
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  000023aa  0000243e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a2  00800270  00800270  000024ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e3fb  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031de  00000000  00000000  00010eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032ba  00000000  00000000  00014089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010e4  00000000  00000000  00017344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000366c  00000000  00000000  00018428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057a2  00000000  00000000  0001ba94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  00021236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c1       	rjmp	.+556    	; 0x22e <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c1       	rjmp	.+614    	; 0x290 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2f c1       	rjmp	.+606    	; 0x290 <__bad_interrupt>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__vector_23>
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_25>
      68:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__vector_26>
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ff c0       	rjmp	.+510    	; 0x290 <__bad_interrupt>
      92:	00 00       	nop
      94:	fd c0       	rjmp	.+506    	; 0x290 <__bad_interrupt>
      96:	00 00       	nop
      98:	fb c0       	rjmp	.+502    	; 0x290 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_39>
      a0:	f7 c0       	rjmp	.+494    	; 0x290 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f5 c0       	rjmp	.+490    	; 0x290 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f3 c0       	rjmp	.+486    	; 0x290 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f1 c0       	rjmp	.+482    	; 0x290 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ef c0       	rjmp	.+478    	; 0x290 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ed c0       	rjmp	.+474    	; 0x290 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	eb c0       	rjmp	.+470    	; 0x290 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e9 c0       	rjmp	.+466    	; 0x290 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e7 c0       	rjmp	.+462    	; 0x290 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e5 c0       	rjmp	.+458    	; 0x290 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e3 c0       	rjmp	.+454    	; 0x290 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e1 c0       	rjmp	.+450    	; 0x290 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	df c0       	rjmp	.+446    	; 0x290 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	dd c0       	rjmp	.+442    	; 0x290 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	db c0       	rjmp	.+438    	; 0x290 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d9 c0       	rjmp	.+434    	; 0x290 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d7 c0       	rjmp	.+430    	; 0x290 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 0f       	add	r27, r23
      e6:	ba 0f       	add	r27, r26
      e8:	a9 0f       	add	r26, r25
      ea:	ad 0f       	add	r26, r29
      ec:	b3 0f       	add	r27, r19
      ee:	f1 0f       	add	r31, r17
      f0:	be 0f       	add	r27, r30
      f2:	c2 0f       	add	r28, r18
      f4:	c8 0f       	add	r28, r24
      f6:	cc 0f       	add	r28, r28
      f8:	d0 0f       	add	r29, r16
      fa:	d6 0f       	add	r29, r22
      fc:	da 0f       	add	r29, r26
      fe:	de 0f       	add	r29, r30
     100:	f1 0f       	add	r31, r17
     102:	e4 0f       	add	r30, r20
     104:	e8 0f       	add	r30, r24
     106:	ec 0f       	add	r30, r28

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	b7 01       	movw	r22, r14
     22a:	92 0a       	sbc	r9, r18
     22c:	17 0e       	add	r1, r23

0000022e <__ctors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d1 e2       	ldi	r29, 0x21	; 33
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	0c bf       	out	0x3c, r16	; 60

0000023e <__do_copy_data>:
     23e:	12 e0       	ldi	r17, 0x02	; 2
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	ea ea       	ldi	r30, 0xAA	; 170
     246:	f3 e2       	ldi	r31, 0x23	; 35
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	0b bf       	out	0x3b, r16	; 59
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x14>
     24e:	07 90       	elpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a0 37       	cpi	r26, 0x70	; 112
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0x10>

00000258 <__do_clear_bss>:
     258:	24 e0       	ldi	r18, 0x04	; 4
     25a:	a0 e7       	ldi	r26, 0x70	; 112
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a2 31       	cpi	r26, 0x12	; 18
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>

00000268 <__do_global_ctors>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	c7 e1       	ldi	r28, 0x17	; 23
     26c:	d1 e0       	ldi	r29, 0x01	; 1
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	06 c0       	rjmp	.+12     	; 0x27e <__do_global_ctors+0x16>
     272:	21 97       	sbiw	r28, 0x01	; 1
     274:	01 09       	sbc	r16, r1
     276:	80 2f       	mov	r24, r16
     278:	fe 01       	movw	r30, r28
     27a:	0e 94 9b 10 	call	0x2136	; 0x2136 <__tablejump2__>
     27e:	c4 31       	cpi	r28, 0x14	; 20
     280:	d1 07       	cpc	r29, r17
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 07       	cpc	r16, r24
     286:	a9 f7       	brne	.-22     	; 0x272 <__do_global_ctors+0xa>
     288:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <main>
     28c:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     292:	08 95       	ret

00000294 <setup>:

	//...

#pragma endregion RFID lår (Hoveddør)

}
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	e1 97       	sbiw	r28, 0x31	; 49
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	26 e0       	ldi	r18, 0x06	; 6
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	55 e2       	ldi	r21, 0x25	; 37
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	88 e6       	ldi	r24, 0x68	; 104
     2b8:	93 e0       	ldi	r25, 0x03	; 3
     2ba:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN14HardwareSerial5beginEmh>
     2be:	82 e1       	ldi	r24, 0x12	; 18
     2c0:	93 e0       	ldi	r25, 0x03	; 3
     2c2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN7TwoWire5beginEv>
     2c6:	88 e7       	ldi	r24, 0x78	; 120
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	17 d4       	rcall	.+2094   	; 0xafa <_ZN11DHT_Unified5beginEv>
     2cc:	08 e7       	ldi	r16, 0x78	; 120
     2ce:	12 e0       	ldi	r17, 0x02	; 2
     2d0:	f8 01       	movw	r30, r16
     2d2:	86 89       	ldd	r24, Z+22	; 0x16
     2d4:	8b a7       	std	Y+43, r24	; 0x2b
     2d6:	84 e3       	ldi	r24, 0x34	; 52
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	9a a7       	std	Y+42, r25	; 0x2a
     2dc:	89 a7       	std	Y+41, r24	; 0x29
     2de:	87 89       	ldd	r24, Z+23	; 0x17
     2e0:	90 8d       	ldd	r25, Z+24	; 0x18
     2e2:	9d a7       	std	Y+45, r25	; 0x2d
     2e4:	8c a7       	std	Y+44, r24	; 0x2c
     2e6:	81 8d       	ldd	r24, Z+25	; 0x19
     2e8:	92 8d       	ldd	r25, Z+26	; 0x1a
     2ea:	a3 8d       	ldd	r26, Z+27	; 0x1b
     2ec:	b4 8d       	ldd	r27, Z+28	; 0x1c
     2ee:	8e a7       	std	Y+46, r24	; 0x2e
     2f0:	9f a7       	std	Y+47, r25	; 0x2f
     2f2:	a8 ab       	std	Y+48, r26	; 0x30
     2f4:	b9 ab       	std	Y+49, r27	; 0x31
     2f6:	be 01       	movw	r22, r28
     2f8:	6f 5f       	subi	r22, 0xFF	; 255
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	ce 01       	movw	r24, r28
     2fe:	89 96       	adiw	r24, 0x29	; 41
     300:	42 d4       	rcall	.+2180   	; 0xb86 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     302:	f8 01       	movw	r30, r16
     304:	87 8d       	ldd	r24, Z+31	; 0x1f
     306:	8b a7       	std	Y+43, r24	; 0x2b
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	9a a7       	std	Y+42, r25	; 0x2a
     30e:	89 a7       	std	Y+41, r24	; 0x29
     310:	80 a1       	ldd	r24, Z+32	; 0x20
     312:	91 a1       	ldd	r25, Z+33	; 0x21
     314:	9d a7       	std	Y+45, r25	; 0x2d
     316:	8c a7       	std	Y+44, r24	; 0x2c
     318:	82 a1       	ldd	r24, Z+34	; 0x22
     31a:	93 a1       	ldd	r25, Z+35	; 0x23
     31c:	a4 a1       	ldd	r26, Z+36	; 0x24
     31e:	b5 a1       	ldd	r27, Z+37	; 0x25
     320:	8e a7       	std	Y+46, r24	; 0x2e
     322:	9f a7       	std	Y+47, r25	; 0x2f
     324:	a8 ab       	std	Y+48, r26	; 0x30
     326:	b9 ab       	std	Y+49, r27	; 0x31
     328:	be 01       	movw	r22, r28
     32a:	6f 5f       	subi	r22, 0xFF	; 255
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	ce 01       	movw	r24, r28
     330:	89 96       	adiw	r24, 0x29	; 41
     332:	ba d4       	rcall	.+2420   	; 0xca8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     334:	6d a1       	ldd	r22, Y+37	; 0x25
     336:	7e a1       	ldd	r23, Y+38	; 0x26
     338:	8f a1       	ldd	r24, Y+39	; 0x27
     33a:	98 a5       	ldd	r25, Y+40	; 0x28
     33c:	28 ee       	ldi	r18, 0xE8	; 232
     33e:	33 e0       	ldi	r19, 0x03	; 3
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__divmodsi4>
     348:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <delayMS>
     34c:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <delayMS+0x1>
     350:	40 93 76 02 	sts	0x0276, r20	; 0x800276 <delayMS+0x2>
     354:	50 93 77 02 	sts	0x0277, r21	; 0x800277 <delayMS+0x3>
     358:	e1 96       	adiw	r28, 0x31	; 49
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	08 95       	ret

0000036e <_GLOBAL__sub_I_dht>:
     36e:	af 92       	push	r10
     370:	bf 92       	push	r11
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	aa 24       	eor	r10, r10
     380:	aa 94       	dec	r10
     382:	ba 2c       	mov	r11, r10
     384:	65 01       	movw	r12, r10
     386:	ee 24       	eor	r14, r14
     388:	ea 94       	dec	r14
     38a:	fe 2c       	mov	r15, r14
     38c:	87 01       	movw	r16, r14
     38e:	26 e0       	ldi	r18, 0x06	; 6
     390:	4b e0       	ldi	r20, 0x0B	; 11
     392:	62 e0       	ldi	r22, 0x02	; 2
     394:	88 e7       	ldi	r24, 0x78	; 120
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	79 d3       	rcall	.+1778   	; 0xa8c <_ZN11DHT_UnifiedC1Ehhhll>
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	bf 90       	pop	r11
     3a8:	af 90       	pop	r10
     3aa:	08 95       	ret

000003ac <loop>:
#pragma endregion DHT

}

void loop()
{
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	ad 97       	sbiw	r28, 0x2d	; 45
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     3c8:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <delayMS>
     3cc:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <delayMS+0x1>
     3d0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <delayMS+0x2>
     3d4:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <delayMS+0x3>
     3d8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <delay>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     3dc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <dht+0x16>
     3e0:	8f a3       	std	Y+39, r24	; 0x27
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     3e2:	84 e3       	ldi	r24, 0x34	; 52
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	9e a3       	std	Y+38, r25	; 0x26
     3e8:	8d a3       	std	Y+37, r24	; 0x25
     3ea:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <dht+0x17>
     3ee:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <dht+0x18>
     3f2:	99 a7       	std	Y+41, r25	; 0x29
     3f4:	88 a7       	std	Y+40, r24	; 0x28
     3f6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <dht+0x19>
     3fa:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <dht+0x1a>
     3fe:	a0 91 93 02 	lds	r26, 0x0293	; 0x800293 <dht+0x1b>
     402:	b0 91 94 02 	lds	r27, 0x0294	; 0x800294 <dht+0x1c>
     406:	8a a7       	std	Y+42, r24	; 0x2a
     408:	9b a7       	std	Y+43, r25	; 0x2b
     40a:	ac a7       	std	Y+44, r26	; 0x2c
     40c:	bd a7       	std	Y+45, r27	; 0x2d
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     40e:	be 01       	movw	r22, r28
     410:	6f 5f       	subi	r22, 0xFF	; 255
     412:	7f 4f       	sbci	r23, 0xFF	; 255
     414:	ce 01       	movw	r24, r28
     416:	85 96       	adiw	r24, 0x25	; 37
     418:	c2 d2       	rcall	.+1412   	; 0x99e <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
	
	// set Temperature value
	if (isnan(event.temperature))
     41a:	cd 88       	ldd	r12, Y+21	; 0x15
     41c:	de 88       	ldd	r13, Y+22	; 0x16
     41e:	ef 88       	ldd	r14, Y+23	; 0x17
     420:	f8 8c       	ldd	r15, Y+24	; 0x18
     422:	a7 01       	movw	r20, r14
     424:	96 01       	movw	r18, r12
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unordsf2>
     42e:	88 23       	and	r24, r24
     430:	39 f0       	breq	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		DhtSencorTemp = -1;
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <DhtSencorTemp+0x1>
     43a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <DhtSencorTemp>
     43e:	08 c0       	rjmp	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     440:	c7 01       	movw	r24, r14
     442:	b6 01       	movw	r22, r12
     444:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fixsfsi>
     448:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <DhtSencorTemp+0x1>
     44c:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <DhtSencorTemp>
     450:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <dht+0x1f>
     454:	8f a3       	std	Y+39, r24	; 0x27
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     456:	82 e4       	ldi	r24, 0x42	; 66
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	9e a3       	std	Y+38, r25	; 0x26
     45c:	8d a3       	std	Y+37, r24	; 0x25
     45e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <dht+0x20>
     462:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <dht+0x21>
     466:	99 a7       	std	Y+41, r25	; 0x29
     468:	88 a7       	std	Y+40, r24	; 0x28
     46a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <dht+0x22>
     46e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <dht+0x23>
     472:	a0 91 9c 02 	lds	r26, 0x029C	; 0x80029c <dht+0x24>
     476:	b0 91 9d 02 	lds	r27, 0x029D	; 0x80029d <dht+0x25>
     47a:	8a a7       	std	Y+42, r24	; 0x2a
     47c:	9b a7       	std	Y+43, r25	; 0x2b
     47e:	ac a7       	std	Y+44, r26	; 0x2c
     480:	bd a7       	std	Y+45, r27	; 0x2d
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     482:	be 01       	movw	r22, r28
     484:	6f 5f       	subi	r22, 0xFF	; 255
     486:	7f 4f       	sbci	r23, 0xFF	; 255
     488:	ce 01       	movw	r24, r28
     48a:	85 96       	adiw	r24, 0x25	; 37
     48c:	c2 d2       	rcall	.+1412   	; 0xa12 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     48e:	cd 88       	ldd	r12, Y+21	; 0x15
     490:	de 88       	ldd	r13, Y+22	; 0x16
     492:	ef 88       	ldd	r14, Y+23	; 0x17
     494:	f8 8c       	ldd	r15, Y+24	; 0x18
     496:	a7 01       	movw	r20, r14
     498:	96 01       	movw	r18, r12
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unordsf2>
     4a2:	88 23       	and	r24, r24
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	{
		DhtSencorHum = -1;
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	9f ef       	ldi	r25, 0xFF	; 255
     4aa:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__data_end+0x1>
     4ae:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     4b4:	c7 01       	movw	r24, r14
     4b6:	b6 01       	movw	r22, r12
     4b8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fixsfsi>
     4bc:	70 93 71 02 	sts	0x0271, r23	; 0x800271 <__data_end+0x1>
     4c0:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <__data_end>
	//Serial.println(DhtSencorTemp);
	//
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);

  Wire.beginTransmission(1);		// transmit to device #1
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	82 e1       	ldi	r24, 0x12	; 18
     4ca:	93 e0       	ldi	r25, 0x03	; 3
     4cc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN7TwoWire17beginTransmissionEi>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     4d0:	46 e0       	ldi	r20, 0x06	; 6
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	66 e0       	ldi	r22, 0x06	; 6
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	82 e1       	ldi	r24, 0x12	; 18
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	8b d7       	rcall	.+3862   	; 0x13f4 <_ZN7TwoWire5writeEPKhj>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     4de:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <DhtSencorTemp>
     4e2:	82 e1       	ldi	r24, 0x12	; 18
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	b2 d7       	rcall	.+3940   	; 0x144c <_ZN7TwoWire5writeEh>
     4e8:	45 e0       	ldi	r20, 0x05	; 5
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	6d e0       	ldi	r22, 0x0D	; 13
     4ee:	72 e0       	ldi	r23, 0x02	; 2
     4f0:	82 e1       	ldi	r24, 0x12	; 18
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	7f d7       	rcall	.+3838   	; 0x13f4 <_ZN7TwoWire5writeEPKhj>
     4f6:	60 91 70 02 	lds	r22, 0x0270	; 0x800270 <__data_end>
     4fa:	82 e1       	ldi	r24, 0x12	; 18
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	a6 d7       	rcall	.+3916   	; 0x144c <_ZN7TwoWire5writeEh>
     500:	82 e1       	ldi	r24, 0x12	; 18
  
  // Send Hum data
  Wire.write("Hum: ");        
  Wire.write(DhtSencorHum);         
  
  Wire.endTransmission();			// stop transmitting
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	0e 94 90 0a 	call	0x1520	; 0x1520 <_ZN7TwoWire15endTransmissionEv>
     508:	ad 96       	adiw	r28, 0x2d	; 45

	//...

#pragma endregion RFID lår (Hoveddør)

}
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	08 95       	ret

00000522 <_ZN3DHTC1Ehhh>:
     522:	dc 01       	movw	r26, r24
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     524:	15 96       	adiw	r26, 0x05	; 5
     526:	6c 93       	st	X, r22
     528:	15 97       	sbiw	r26, 0x05	; 5
     52a:	16 96       	adiw	r26, 0x06	; 6
     52c:	4c 93       	st	X, r20
     52e:	16 97       	sbiw	r26, 0x06	; 6
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	fb 01       	movw	r30, r22
     534:	e2 5b       	subi	r30, 0xB2	; 178
     536:	fe 4f       	sbci	r31, 0xFE	; 254
     538:	e4 91       	lpm	r30, Z
     53a:	17 96       	adiw	r26, 0x07	; 7
     53c:	ec 93       	st	X, r30
     53e:	17 97       	sbiw	r26, 0x07	; 7
     540:	fb 01       	movw	r30, r22
     542:	ec 56       	subi	r30, 0x6C	; 108
     544:	fe 4f       	sbci	r31, 0xFE	; 254
     546:	64 91       	lpm	r22, Z
     548:	18 96       	adiw	r26, 0x08	; 8
     54a:	6c 93       	st	X, r22
     54c:	18 97       	sbiw	r26, 0x08	; 8
     54e:	40 e8       	ldi	r20, 0x80	; 128
     550:	5e e3       	ldi	r21, 0x3E	; 62
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	1d 96       	adiw	r26, 0x0d	; 13
     558:	4d 93       	st	X+, r20
     55a:	5d 93       	st	X+, r21
     55c:	6d 93       	st	X+, r22
     55e:	7c 93       	st	X, r23
     560:	50 97       	sbiw	r26, 0x10	; 16
     562:	08 95       	ret

00000564 <_ZN3DHT5beginEh>:
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ec 01       	movw	r28, r24
     56c:	16 2f       	mov	r17, r22
     56e:	62 e0       	ldi	r22, 0x02	; 2
     570:	8d 81       	ldd	r24, Y+5	; 0x05
     572:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <pinMode>
     576:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <millis>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	80 5d       	subi	r24, 0xD0	; 208
     580:	97 40       	sbci	r25, 0x07	; 7
     582:	a1 09       	sbc	r26, r1
     584:	b1 09       	sbc	r27, r1
     586:	89 87       	std	Y+9, r24	; 0x09
     588:	9a 87       	std	Y+10, r25	; 0x0a
     58a:	ab 87       	std	Y+11, r26	; 0x0b
     58c:	bc 87       	std	Y+12, r27	; 0x0c
     58e:	1a 8b       	std	Y+18, r17	; 0x12
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	08 95       	ret

00000598 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
     5aa:	66 23       	and	r22, r22
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <_ZN3DHT11expectPulseEb+0x1a>
     5ae:	91 2f       	mov	r25, r17
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <_ZN3DHT11expectPulseEb+0x1c>
     5b2:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
     5b4:	28 85       	ldd	r18, Y+8	; 0x08
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	22 0f       	add	r18, r18
     5ba:	33 1f       	adc	r19, r19
     5bc:	26 52       	subi	r18, 0x26	; 38
     5be:	3e 4f       	sbci	r19, 0xFE	; 254
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
     5c0:	a0 e0       	ldi	r26, 0x00	; 0
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
     5c4:	f9 01       	movw	r30, r18
     5c6:	45 91       	lpm	r20, Z+
     5c8:	54 91       	lpm	r21, Z
     5ca:	fa 01       	movw	r30, r20
     5cc:	80 81       	ld	r24, Z
     5ce:	81 23       	and	r24, r17
     5d0:	ad 01       	movw	r20, r26
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	98 13       	cpse	r25, r24
     5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
     5da:	11 96       	adiw	r26, 0x01	; 1
     5dc:	cd 84       	ldd	r12, Y+13	; 0x0d
     5de:	de 84       	ldd	r13, Y+14	; 0x0e
     5e0:	ef 84       	ldd	r14, Y+15	; 0x0f
     5e2:	f8 88       	ldd	r15, Y+16	; 0x10
     5e4:	4c 15       	cp	r20, r12
     5e6:	5d 05       	cpc	r21, r13
     5e8:	6e 05       	cpc	r22, r14
     5ea:	7f 05       	cpc	r23, r15
     5ec:	58 f3       	brcs	.-42     	; 0x5c4 <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
     5ee:	3f ef       	ldi	r19, 0xFF	; 255
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	9f ef       	ldi	r25, 0xFF	; 255
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
     5f8:	3a 2f       	mov	r19, r26
     5fa:	25 2f       	mov	r18, r21
     5fc:	cb 01       	movw	r24, r22
}
     5fe:	63 2f       	mov	r22, r19
     600:	72 2f       	mov	r23, r18
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	08 95       	ret

00000612 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
     612:	8f 92       	push	r8
     614:	9f 92       	push	r9
     616:	af 92       	push	r10
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	c0 54       	subi	r28, 0x40	; 64
     630:	d1 40       	sbci	r29, 0x01	; 1
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	8c 01       	movw	r16, r24
     63e:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     640:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
     644:	f1 10       	cpse	r15, r1
     646:	16 c0       	rjmp	.+44     	; 0x674 <_ZN3DHT4readEb+0x62>
     648:	f8 01       	movw	r30, r16
     64a:	c1 84       	ldd	r12, Z+9	; 0x09
     64c:	d2 84       	ldd	r13, Z+10	; 0x0a
     64e:	e3 84       	ldd	r14, Z+11	; 0x0b
     650:	f4 84       	ldd	r15, Z+12	; 0x0c
     652:	9b 01       	movw	r18, r22
     654:	ac 01       	movw	r20, r24
     656:	2c 19       	sub	r18, r12
     658:	3d 09       	sbc	r19, r13
     65a:	4e 09       	sbc	r20, r14
     65c:	5f 09       	sbc	r21, r15
     65e:	69 01       	movw	r12, r18
     660:	7a 01       	movw	r14, r20
     662:	30 ed       	ldi	r19, 0xD0	; 208
     664:	c3 16       	cp	r12, r19
     666:	37 e0       	ldi	r19, 0x07	; 7
     668:	d3 06       	cpc	r13, r19
     66a:	e1 04       	cpc	r14, r1
     66c:	f1 04       	cpc	r15, r1
     66e:	10 f4       	brcc	.+4      	; 0x674 <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     670:	81 89       	ldd	r24, Z+17	; 0x11
     672:	b6 c0       	rjmp	.+364    	; 0x7e0 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
     674:	f8 01       	movw	r30, r16
     676:	61 87       	std	Z+9, r22	; 0x09
     678:	72 87       	std	Z+10, r23	; 0x0a
     67a:	83 87       	std	Z+11, r24	; 0x0b
     67c:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     67e:	14 82       	std	Z+4, r1	; 0x04
     680:	13 82       	std	Z+3, r1	; 0x03
     682:	12 82       	std	Z+2, r1	; 0x02
     684:	11 82       	std	Z+1, r1	; 0x01
     686:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
     688:	62 e0       	ldi	r22, 0x02	; 2
     68a:	85 81       	ldd	r24, Z+5	; 0x05
     68c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <pinMode>
  delay(1);
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	f8 01       	movw	r30, r16
     6a0:	85 81       	ldd	r24, Z+5	; 0x05
     6a2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <pinMode>
  digitalWrite(_pin, LOW);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	f8 01       	movw	r30, r16
     6aa:	85 81       	ldd	r24, Z+5	; 0x05
     6ac:	0e 94 2e 10 	call	0x205c	; 0x205c <digitalWrite>
  switch (_type) {
     6b0:	f8 01       	movw	r30, r16
     6b2:	86 81       	ldd	r24, Z+6	; 0x06
     6b4:	85 51       	subi	r24, 0x15	; 21
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	28 f4       	brcc	.+10     	; 0x6c4 <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
     6ba:	8c e4       	ldi	r24, 0x4C	; 76
     6bc:	94 e0       	ldi	r25, 0x04	; 4
     6be:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <delayMicroseconds>
    break;
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
     6c4:	64 e1       	ldi	r22, 0x14	; 20
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
     6d0:	62 e0       	ldi	r22, 0x02	; 2
     6d2:	f8 01       	movw	r30, r16
     6d4:	85 81       	ldd	r24, Z+5	; 0x05
     6d6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
     6da:	f8 01       	movw	r30, r16
     6dc:	82 89       	ldd	r24, Z+18	; 0x12
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
     6e4:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	c8 01       	movw	r24, r16
     6ea:	56 df       	rcall	.-340    	; 0x598 <_ZN3DHT11expectPulseEb>
     6ec:	6f 3f       	cpi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	8f 4f       	sbci	r24, 0xFF	; 255
     6f2:	9f 4f       	sbci	r25, 0xFF	; 255
     6f4:	21 f4       	brne	.+8      	; 0x6fe <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
     6f6:	f8 01       	movw	r30, r16
     6f8:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
     6fa:	78 94       	sei
     6fc:	42 c0       	rjmp	.+132    	; 0x782 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	c8 01       	movw	r24, r16
     702:	4a df       	rcall	.-364    	; 0x598 <_ZN3DHT11expectPulseEb>
     704:	6f 3f       	cpi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	8f 4f       	sbci	r24, 0xFF	; 255
     70a:	9f 4f       	sbci	r25, 0xFF	; 255
     70c:	a1 f3       	breq	.-24     	; 0x6f6 <_ZN3DHT4readEb+0xe4>
     70e:	9e 01       	movw	r18, r28
     710:	2f 5f       	subi	r18, 0xFF	; 255
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	79 01       	movw	r14, r18
     716:	5e 01       	movw	r10, r28
     718:	3f eb       	ldi	r19, 0xBF	; 191
     71a:	a3 1a       	sub	r10, r19
     71c:	3e ef       	ldi	r19, 0xFE	; 254
     71e:	b3 0a       	sbc	r11, r19
     720:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	c8 01       	movw	r24, r16
     726:	38 df       	rcall	.-400    	; 0x598 <_ZN3DHT11expectPulseEb>
     728:	f6 01       	movw	r30, r12
     72a:	60 83       	st	Z, r22
     72c:	71 83       	std	Z+1, r23	; 0x01
     72e:	82 83       	std	Z+2, r24	; 0x02
     730:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	c8 01       	movw	r24, r16
     736:	30 df       	rcall	.-416    	; 0x598 <_ZN3DHT11expectPulseEb>
     738:	f6 01       	movw	r30, r12
     73a:	64 83       	std	Z+4, r22	; 0x04
     73c:	75 83       	std	Z+5, r23	; 0x05
     73e:	86 83       	std	Z+6, r24	; 0x06
     740:	97 83       	std	Z+7, r25	; 0x07
     742:	f8 e0       	ldi	r31, 0x08	; 8
     744:	cf 0e       	add	r12, r31
     746:	d1 1c       	adc	r13, r1
     748:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
     74a:	db 04       	cpc	r13, r11
     74c:	51 f7       	brne	.-44     	; 0x722 <_ZN3DHT4readEb+0x110>
     74e:	78 94       	sei
     750:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
     756:	80 80       	ld	r8, Z
     758:	91 80       	ldd	r9, Z+1	; 0x01
     75a:	a2 80       	ldd	r10, Z+2	; 0x02
     75c:	b3 80       	ldd	r11, Z+3	; 0x03
     75e:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
     760:	55 81       	ldd	r21, Z+5	; 0x05
     762:	66 81       	ldd	r22, Z+6	; 0x06
     764:	77 81       	ldd	r23, Z+7	; 0x07
     766:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
     768:	8f 16       	cp	r8, r31
     76a:	9f 06       	cpc	r9, r31
     76c:	af 06       	cpc	r10, r31
     76e:	bf 06       	cpc	r11, r31
     770:	31 f0       	breq	.+12     	; 0x77e <_ZN3DHT4readEb+0x16c>
     772:	4f 3f       	cpi	r20, 0xFF	; 255
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	58 07       	cpc	r21, r24
     778:	68 07       	cpc	r22, r24
     77a:	78 07       	cpc	r23, r24
     77c:	21 f4       	brne	.+8      	; 0x786 <_ZN3DHT4readEb+0x174>
     77e:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
     780:	11 8a       	std	Z+17, r1	; 0x11
     782:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
     784:	2d c0       	rjmp	.+90     	; 0x7e0 <_ZN3DHT4readEb+0x1ce>
     786:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	f5 95       	asr	r31
     78c:	e7 95       	ror	r30
     78e:	8a 95       	dec	r24
     790:	e1 f7       	brne	.-8      	; 0x78a <_ZN3DHT4readEb+0x178>
     792:	e0 0f       	add	r30, r16
     794:	f1 1f       	adc	r31, r17
     796:	80 81       	ld	r24, Z
     798:	88 0f       	add	r24, r24
     79a:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     79c:	95 06       	cpc	r9, r21
     79e:	a6 06       	cpc	r10, r22
     7a0:	b7 06       	cpc	r11, r23
     7a2:	08 f4       	brcc	.+2      	; 0x7a6 <_ZN3DHT4readEb+0x194>
     7a4:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
     7a6:	80 83       	st	Z, r24
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	f8 e0       	ldi	r31, 0x08	; 8
     7ae:	ef 0e       	add	r14, r31
     7b0:	f1 1c       	adc	r15, r1
     7b2:	28 32       	cpi	r18, 0x28	; 40
     7b4:	31 05       	cpc	r19, r1
     7b6:	71 f6       	brne	.-100    	; 0x754 <_ZN3DHT4readEb+0x142>
     7b8:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     7ba:	24 81       	ldd	r18, Z+4	; 0x04
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 81       	ld	r20, Z
     7c0:	81 81       	ldd	r24, Z+1	; 0x01
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	84 0f       	add	r24, r20
     7c6:	91 1d       	adc	r25, r1
     7c8:	42 81       	ldd	r20, Z+2	; 0x02
     7ca:	84 0f       	add	r24, r20
     7cc:	91 1d       	adc	r25, r1
     7ce:	43 81       	ldd	r20, Z+3	; 0x03
     7d0:	84 0f       	add	r24, r20
     7d2:	91 1d       	adc	r25, r1
     7d4:	99 27       	eor	r25, r25
     7d6:	28 17       	cp	r18, r24
     7d8:	39 07       	cpc	r19, r25
     7da:	89 f6       	brne	.-94     	; 0x77e <_ZN3DHT4readEb+0x16c>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
     7de:	81 8b       	std	Z+17, r24	; 0x11
     7e0:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     7e2:	de 4f       	sbci	r29, 0xFE	; 254
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	08 95       	ret

00000808 <_ZN3DHT15readTemperatureEbb>:
     808:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	8c 01       	movw	r16, r24
     81a:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
     81c:	64 2f       	mov	r22, r20
     81e:	f9 de       	rcall	.-526    	; 0x612 <_ZN3DHT4readEb>
     820:	88 23       	and	r24, r24
     822:	09 f4       	brne	.+2      	; 0x826 <_ZN3DHT15readTemperatureEbb+0x1e>
     824:	6b c0       	rjmp	.+214    	; 0x8fc <_ZN3DHT15readTemperatureEbb+0xf4>
    switch (_type) {
     826:	f8 01       	movw	r30, r16
     828:	86 81       	ldd	r24, Z+6	; 0x06
     82a:	8c 30       	cpi	r24, 0x0C	; 12
     82c:	09 f4       	brne	.+2      	; 0x830 <_ZN3DHT15readTemperatureEbb+0x28>
     82e:	3e c0       	rjmp	.+124    	; 0x8ac <_ZN3DHT15readTemperatureEbb+0xa4>
     830:	18 f4       	brcc	.+6      	; 0x838 <_ZN3DHT15readTemperatureEbb+0x30>
     832:	8b 30       	cpi	r24, 0x0B	; 11
     834:	b9 f0       	breq	.+46     	; 0x864 <_ZN3DHT15readTemperatureEbb+0x5c>
     836:	62 c0       	rjmp	.+196    	; 0x8fc <_ZN3DHT15readTemperatureEbb+0xf4>
     838:	85 51       	subi	r24, 0x15	; 21
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	08 f0       	brcs	.+2      	; 0x840 <_ZN3DHT15readTemperatureEbb+0x38>
     83e:	5e c0       	rjmp	.+188    	; 0x8fc <_ZN3DHT15readTemperatureEbb+0xf4>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
     840:	f8 01       	movw	r30, r16
     842:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
     844:	6d 2f       	mov	r22, r29
     846:	6f 77       	andi	r22, 0x7F	; 127
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	76 2f       	mov	r23, r22
     84c:	66 27       	eor	r22, r22
     84e:	83 81       	ldd	r24, Z+3	; 0x03
     850:	68 2b       	or	r22, r24
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	ff d6       	rcall	.+3582   	; 0x1656 <__floatunsisf>
     858:	2d ec       	ldi	r18, 0xCD	; 205
     85a:	3c ec       	ldi	r19, 0xCC	; 204
     85c:	4c ec       	ldi	r20, 0xCC	; 204
     85e:	5d e3       	ldi	r21, 0x3D	; 61
     860:	ac d7       	rcall	.+3928   	; 0x17ba <__mulsf3>
     862:	3d c0       	rjmp	.+122    	; 0x8de <_ZN3DHT15readTemperatureEbb+0xd6>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
     864:	f8 01       	movw	r30, r16
     866:	62 81       	ldd	r22, Z+2	; 0x02
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	f3 d6       	rcall	.+3558   	; 0x1656 <__floatunsisf>
     870:	6b 01       	movw	r12, r22
     872:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
     874:	f8 01       	movw	r30, r16
     876:	d3 81       	ldd	r29, Z+3	; 0x03
     878:	d7 ff       	sbrs	r29, 7
     87a:	09 c0       	rjmp	.+18     	; 0x88e <_ZN3DHT15readTemperatureEbb+0x86>
        f = -1 - f;
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	9f eb       	ldi	r25, 0xBF	; 191
     888:	50 d6       	rcall	.+3232   	; 0x152a <__subsf3>
     88a:	6b 01       	movw	r12, r22
     88c:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
     88e:	6d 2f       	mov	r22, r29
     890:	6f 70       	andi	r22, 0x0F	; 15
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	e0 d6       	rcall	.+3520   	; 0x165a <__floatsisf>
     89a:	2d ec       	ldi	r18, 0xCD	; 205
     89c:	3c ec       	ldi	r19, 0xCC	; 204
     89e:	4c ec       	ldi	r20, 0xCC	; 204
     8a0:	5d e3       	ldi	r21, 0x3D	; 61
     8a2:	8b d7       	rcall	.+3862   	; 0x17ba <__mulsf3>
     8a4:	a7 01       	movw	r20, r14
     8a6:	96 01       	movw	r18, r12
     8a8:	41 d6       	rcall	.+3202   	; 0x152c <__addsf3>
     8aa:	1b c0       	rjmp	.+54     	; 0x8e2 <_ZN3DHT15readTemperatureEbb+0xda>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
     8ac:	f8 01       	movw	r30, r16
     8ae:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
     8b0:	63 81       	ldd	r22, Z+3	; 0x03
     8b2:	6f 70       	andi	r22, 0x0F	; 15
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	cf d6       	rcall	.+3486   	; 0x165a <__floatsisf>
     8bc:	2d ec       	ldi	r18, 0xCD	; 205
     8be:	3c ec       	ldi	r19, 0xCC	; 204
     8c0:	4c ec       	ldi	r20, 0xCC	; 204
     8c2:	5d e3       	ldi	r21, 0x3D	; 61
     8c4:	7a d7       	rcall	.+3828   	; 0x17ba <__mulsf3>
     8c6:	6b 01       	movw	r12, r22
     8c8:	7c 01       	movw	r14, r24
     8ca:	6d 2f       	mov	r22, r29
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	c1 d6       	rcall	.+3458   	; 0x1656 <__floatunsisf>
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	27 d6       	rcall	.+3150   	; 0x152c <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
     8de:	d7 fd       	sbrc	r29, 7
        f *= -1;
      }
      if (S) {
     8e0:	90 58       	subi	r25, 0x80	; 128
     8e2:	cc 23       	and	r28, r28
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
     8e4:	79 f0       	breq	.+30     	; 0x904 <_ZN3DHT15readTemperatureEbb+0xfc>
     8e6:	26 e6       	ldi	r18, 0x66	; 102
     8e8:	36 e6       	ldi	r19, 0x66	; 102
     8ea:	46 ee       	ldi	r20, 0xE6	; 230
     8ec:	5f e3       	ldi	r21, 0x3F	; 63
     8ee:	65 d7       	rcall	.+3786   	; 0x17ba <__mulsf3>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	52 e4       	ldi	r21, 0x42	; 66
     8f8:	19 d6       	rcall	.+3122   	; 0x152c <__addsf3>
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <_ZN3DHT15readTemperatureEbb+0xfc>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	80 ec       	ldi	r24, 0xC0	; 192
     902:	9f e7       	ldi	r25, 0x7F	; 127
     904:	df 91       	pop	r29
      }
      break;
    }
  }
  return f;
}
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	08 95       	ret

00000916 <_ZN3DHT12readHumidityEb>:
     916:	cf 92       	push	r12
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
     924:	76 de       	rcall	.-788    	; 0x612 <_ZN3DHT4readEb>
     926:	88 23       	and	r24, r24
     928:	69 f1       	breq	.+90     	; 0x984 <_ZN3DHT12readHumidityEb+0x6e>
    switch (_type) {
     92a:	8e 81       	ldd	r24, Y+6	; 0x06
     92c:	8b 30       	cpi	r24, 0x0B	; 11
     92e:	50 f1       	brcs	.+84     	; 0x984 <_ZN3DHT12readHumidityEb+0x6e>
     930:	8d 30       	cpi	r24, 0x0D	; 13
     932:	88 f0       	brcs	.+34     	; 0x956 <_ZN3DHT12readHumidityEb+0x40>
     934:	85 51       	subi	r24, 0x15	; 21
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	28 f5       	brcc	.+74     	; 0x984 <_ZN3DHT12readHumidityEb+0x6e>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
     93a:	68 81       	ld	r22, Y
     93c:	79 81       	ldd	r23, Y+1	; 0x01
     93e:	76 27       	eor	r23, r22
     940:	67 27       	eor	r22, r23
     942:	76 27       	eor	r23, r22
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	86 d6       	rcall	.+3340   	; 0x1656 <__floatunsisf>
      f *= 0.1;
     94a:	2d ec       	ldi	r18, 0xCD	; 205
     94c:	3c ec       	ldi	r19, 0xCC	; 204
     94e:	4c ec       	ldi	r20, 0xCC	; 204
     950:	5d e3       	ldi	r21, 0x3D	; 61
     952:	33 d7       	rcall	.+3686   	; 0x17ba <__mulsf3>
      break;
     954:	1b c0       	rjmp	.+54     	; 0x98c <_ZN3DHT12readHumidityEb+0x76>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
     956:	69 81       	ldd	r22, Y+1	; 0x01
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	7d d6       	rcall	.+3322   	; 0x165a <__floatsisf>
     960:	2d ec       	ldi	r18, 0xCD	; 205
     962:	3c ec       	ldi	r19, 0xCC	; 204
     964:	4c ec       	ldi	r20, 0xCC	; 204
     966:	5d e3       	ldi	r21, 0x3D	; 61
     968:	28 d7       	rcall	.+3664   	; 0x17ba <__mulsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	68 81       	ld	r22, Y
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	71 d6       	rcall	.+3298   	; 0x165a <__floatsisf>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	d5 d5       	rcall	.+2986   	; 0x152c <__addsf3>
     982:	04 c0       	rjmp	.+8      	; 0x98c <_ZN3DHT12readHumidityEb+0x76>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 ec       	ldi	r24, 0xC0	; 192
     98a:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	08 95       	ret

0000099a <_ZN11DHT_Unified8HumidityD1Ev>:
     99a:	08 95       	ret

0000099c <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     99c:	08 95       	ret

0000099e <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	8c 01       	movw	r16, r24
     9a8:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     9aa:	84 e2       	ldi	r24, 0x24	; 36
     9ac:	fb 01       	movw	r30, r22
     9ae:	11 92       	st	Z+, r1
     9b0:	8a 95       	dec	r24
     9b2:	e9 f7       	brne	.-6      	; 0x9ae <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     9b4:	84 e2       	ldi	r24, 0x24	; 36
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	88 83       	st	Y, r24
     9be:	99 83       	std	Y+1, r25	; 0x01
     9c0:	aa 83       	std	Y+2, r26	; 0x02
     9c2:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     9c4:	f8 01       	movw	r30, r16
     9c6:	85 81       	ldd	r24, Z+5	; 0x05
     9c8:	96 81       	ldd	r25, Z+6	; 0x06
     9ca:	a7 81       	ldd	r26, Z+7	; 0x07
     9cc:	b0 85       	ldd	r27, Z+8	; 0x08
     9ce:	8c 83       	std	Y+4, r24	; 0x04
     9d0:	9d 83       	std	Y+5, r25	; 0x05
     9d2:	ae 83       	std	Y+6, r26	; 0x06
     9d4:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     9d6:	8d e0       	ldi	r24, 0x0D	; 13
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	88 87       	std	Y+8, r24	; 0x08
     9e0:	99 87       	std	Y+9, r25	; 0x09
     9e2:	aa 87       	std	Y+10, r26	; 0x0a
     9e4:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     9e6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <millis>
     9ea:	68 8b       	std	Y+16, r22	; 0x10
     9ec:	79 8b       	std	Y+17, r23	; 0x11
     9ee:	8a 8b       	std	Y+18, r24	; 0x12
     9f0:	9b 8b       	std	Y+19, r25	; 0x13
  event->temperature = _parent->_dht.readTemperature();
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	f8 01       	movw	r30, r16
     9f8:	83 81       	ldd	r24, Z+3	; 0x03
     9fa:	94 81       	ldd	r25, Z+4	; 0x04
     9fc:	05 df       	rcall	.-502    	; 0x808 <_ZN3DHT15readTemperatureEbb>
     9fe:	6c 8b       	std	Y+20, r22	; 0x14
     a00:	7d 8b       	std	Y+21, r23	; 0x15
     a02:	8e 8b       	std	Y+22, r24	; 0x16
     a04:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	8c 01       	movw	r16, r24
     a1c:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     a1e:	84 e2       	ldi	r24, 0x24	; 36
     a20:	fb 01       	movw	r30, r22
     a22:	11 92       	st	Z+, r1
     a24:	8a 95       	dec	r24
     a26:	e9 f7       	brne	.-6      	; 0xa22 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     a28:	84 e2       	ldi	r24, 0x24	; 36
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	88 83       	st	Y, r24
     a32:	99 83       	std	Y+1, r25	; 0x01
     a34:	aa 83       	std	Y+2, r26	; 0x02
     a36:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     a38:	f8 01       	movw	r30, r16
     a3a:	85 81       	ldd	r24, Z+5	; 0x05
     a3c:	96 81       	ldd	r25, Z+6	; 0x06
     a3e:	a7 81       	ldd	r26, Z+7	; 0x07
     a40:	b0 85       	ldd	r27, Z+8	; 0x08
     a42:	8c 83       	std	Y+4, r24	; 0x04
     a44:	9d 83       	std	Y+5, r25	; 0x05
     a46:	ae 83       	std	Y+6, r26	; 0x06
     a48:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     a4a:	8c e0       	ldi	r24, 0x0C	; 12
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	88 87       	std	Y+8, r24	; 0x08
     a54:	99 87       	std	Y+9, r25	; 0x09
     a56:	aa 87       	std	Y+10, r26	; 0x0a
     a58:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     a5a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <millis>
     a5e:	68 8b       	std	Y+16, r22	; 0x10
     a60:	79 8b       	std	Y+17, r23	; 0x11
     a62:	8a 8b       	std	Y+18, r24	; 0x12
     a64:	9b 8b       	std	Y+19, r25	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	f8 01       	movw	r30, r16
     a6a:	83 81       	ldd	r24, Z+3	; 0x03
     a6c:	94 81       	ldd	r25, Z+4	; 0x04
     a6e:	53 df       	rcall	.-346    	; 0x916 <_ZN3DHT12readHumidityEb>
     a70:	6c 8b       	std	Y+20, r22	; 0x14
     a72:	7d 8b       	std	Y+21, r23	; 0x15
     a74:	8e 8b       	std	Y+22, r24	; 0x16
     a76:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	08 95       	ret

00000a84 <_ZN11DHT_Unified8HumidityD0Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     a84:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZdlPv>

00000a88 <_ZN11DHT_Unified11TemperatureD0Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     a88:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZdlPv>

00000a8c <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
     a8c:	4f 92       	push	r4
     a8e:	5f 92       	push	r5
     a90:	6f 92       	push	r6
     a92:	7f 92       	push	r7
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
     aac:	94 2e       	mov	r9, r20
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     aae:	39 dd       	rcall	.-1422   	; 0x522 <_ZN3DHTC1Ehhh>
     ab0:	9b 8a       	std	Y+19, r9	; 0x13
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     ab2:	84 e3       	ldi	r24, 0x34	; 52
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	9d 8b       	std	Y+21, r25	; 0x15
     ab8:	8c 8b       	std	Y+20, r24	; 0x14
     aba:	d8 8f       	std	Y+24, r29	; 0x18
     abc:	cf 8b       	std	Y+23, r28	; 0x17
     abe:	e9 8e       	std	Y+25, r14	; 0x19
     ac0:	fa 8e       	std	Y+26, r15	; 0x1a
     ac2:	0b 8f       	std	Y+27, r16	; 0x1b
     ac4:	1c 8f       	std	Y+28, r17	; 0x1c
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     ac6:	82 e4       	ldi	r24, 0x42	; 66
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	9e 8f       	std	Y+30, r25	; 0x1e
     acc:	8d 8f       	std	Y+29, r24	; 0x1d
     ace:	d9 a3       	std	Y+33, r29	; 0x21
     ad0:	c8 a3       	std	Y+32, r28	; 0x20
     ad2:	aa a2       	std	Y+34, r10	; 0x22
     ad4:	bb a2       	std	Y+35, r11	; 0x23
     ad6:	cc a2       	std	Y+36, r12	; 0x24
     ad8:	dd a2       	std	Y+37, r13	; 0x25
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	7f 90       	pop	r7
     af2:	6f 90       	pop	r6
     af4:	5f 90       	pop	r5
     af6:	4f 90       	pop	r4
     af8:	08 95       	ret

00000afa <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
     afa:	67 e3       	ldi	r22, 0x37	; 55
     afc:	33 cd       	rjmp	.-1434   	; 0x564 <_ZN3DHT5beginEh>

00000afe <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	eb 01       	movw	r28, r22
  switch (_type) {
     b04:	fc 01       	movw	r30, r24
     b06:	83 89       	ldd	r24, Z+19	; 0x13
     b08:	8c 30       	cpi	r24, 0x0C	; 12
     b0a:	89 f0       	breq	.+34     	; 0xb2e <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>
     b0c:	38 f4       	brcc	.+14     	; 0xb1c <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
     b0e:	8b 30       	cpi	r24, 0x0B	; 11
     b10:	c1 f4       	brne	.+48     	; 0xb42 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
     b12:	4b e0       	ldi	r20, 0x0B	; 11
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	63 e1       	ldi	r22, 0x13	; 19
     b18:	72 e0       	ldi	r23, 0x02	; 2
     b1a:	17 c0       	rjmp	.+46     	; 0xb4a <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
  switch (_type) {
     b1c:	85 31       	cpi	r24, 0x15	; 21
     b1e:	61 f0       	breq	.+24     	; 0xb38 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3a>
     b20:	86 31       	cpi	r24, 0x16	; 22
     b22:	79 f4       	brne	.+30     	; 0xb42 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    break;
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
     b24:	4b e0       	ldi	r20, 0x0B	; 11
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	65 e2       	ldi	r22, 0x25	; 37
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	0e c0       	rjmp	.+28     	; 0xb4a <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
  switch (_type) {
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    break;
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
     b2e:	4b e0       	ldi	r20, 0x0B	; 11
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	69 e1       	ldi	r22, 0x19	; 25
     b34:	72 e0       	ldi	r23, 0x02	; 2
     b36:	09 c0       	rjmp	.+18     	; 0xb4a <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
     b38:	4b e0       	ldi	r20, 0x0B	; 11
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	6f e1       	ldi	r22, 0x1F	; 31
     b3e:	72 e0       	ldi	r23, 0x02	; 2
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
     b42:	4b e0       	ldi	r20, 0x0B	; 11
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	6b e2       	ldi	r22, 0x2B	; 43
     b48:	72 e0       	ldi	r23, 0x02	; 2
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 c4 11 	call	0x2388	; 0x2388 <strncpy>
    break;
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
     b50:	1b 86       	std	Y+11, r1	; 0x0b
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
     b58:	fb 01       	movw	r30, r22
  switch (_type) {
     b5a:	dc 01       	movw	r26, r24
     b5c:	53 96       	adiw	r26, 0x13	; 19
     b5e:	8c 91       	ld	r24, X
     b60:	8c 30       	cpi	r24, 0x0C	; 12
     b62:	41 f0       	breq	.+16     	; 0xb74 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     b64:	38 f4       	brcc	.+14     	; 0xb74 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     b66:	8b 30       	cpi	r24, 0x0B	; 11
     b68:	29 f4       	brne	.+10     	; 0xb74 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
     b6a:	80 e4       	ldi	r24, 0x40	; 64
     b6c:	92 e4       	ldi	r25, 0x42	; 66
     b6e:	af e0       	ldi	r26, 0x0F	; 15
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x24>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    break;
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	94 e8       	ldi	r25, 0x84	; 132
     b78:	ae e1       	ldi	r26, 0x1E	; 30
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	84 a3       	std	Z+36, r24	; 0x24
     b7e:	95 a3       	std	Z+37, r25	; 0x25
     b80:	a6 a3       	std	Z+38, r26	; 0x26
     b82:	b7 a3       	std	Z+39, r27	; 0x27
     b84:	08 95       	ret

00000b86 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	8c 01       	movw	r16, r24
     b90:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     b92:	88 e2       	ldi	r24, 0x28	; 40
     b94:	db 01       	movw	r26, r22
     b96:	1d 92       	st	X+, r1
     b98:	8a 95       	dec	r24
     b9a:	e9 f7       	brne	.-6      	; 0xb96 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     b9c:	f8 01       	movw	r30, r16
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	94 81       	ldd	r25, Z+4	; 0x04
     ba2:	ad df       	rcall	.-166    	; 0xafe <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	8c 87       	std	Y+12, r24	; 0x0c
     bae:	9d 87       	std	Y+13, r25	; 0x0d
     bb0:	ae 87       	std	Y+14, r26	; 0x0e
     bb2:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     bb4:	f8 01       	movw	r30, r16
     bb6:	85 81       	ldd	r24, Z+5	; 0x05
     bb8:	96 81       	ldd	r25, Z+6	; 0x06
     bba:	a7 81       	ldd	r26, Z+7	; 0x07
     bbc:	b0 85       	ldd	r27, Z+8	; 0x08
     bbe:	88 8b       	std	Y+16, r24	; 0x10
     bc0:	99 8b       	std	Y+17, r25	; 0x11
     bc2:	aa 8b       	std	Y+18, r26	; 0x12
     bc4:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     bc6:	8d e0       	ldi	r24, 0x0D	; 13
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	8c 8b       	std	Y+20, r24	; 0x14
     bd0:	9d 8b       	std	Y+21, r25	; 0x15
     bd2:	ae 8b       	std	Y+22, r26	; 0x16
     bd4:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     bd6:	be 01       	movw	r22, r28
     bd8:	83 81       	ldd	r24, Z+3	; 0x03
     bda:	94 81       	ldd	r25, Z+4	; 0x04
     bdc:	bd df       	rcall	.-134    	; 0xb58 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     bde:	d8 01       	movw	r26, r16
     be0:	13 96       	adiw	r26, 0x03	; 3
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	14 97       	sbiw	r26, 0x04	; 4
     be8:	83 89       	ldd	r24, Z+19	; 0x13
     bea:	8c 30       	cpi	r24, 0x0C	; 12
     bec:	f1 f0       	breq	.+60     	; 0xc2a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xa4>
     bee:	a0 f4       	brcc	.+40     	; 0xc18 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x92>
     bf0:	8b 30       	cpi	r24, 0x0B	; 11
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>
     bf4:	48 c0       	rjmp	.+144    	; 0xc86 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
  case DHT11:
    sensor->max_value = 50.0F;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a8 e4       	ldi	r26, 0x48	; 72
     bfc:	b2 e4       	ldi	r27, 0x42	; 66
     bfe:	88 8f       	std	Y+24, r24	; 0x18
     c00:	99 8f       	std	Y+25, r25	; 0x19
     c02:	aa 8f       	std	Y+26, r26	; 0x1a
     c04:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     c06:	1c 8e       	std	Y+28, r1	; 0x1c
     c08:	1d 8e       	std	Y+29, r1	; 0x1d
     c0a:	1e 8e       	std	Y+30, r1	; 0x1e
     c0c:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 2.0F;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	a0 e0       	ldi	r26, 0x00	; 0
     c14:	b0 e4       	ldi	r27, 0x40	; 64
     c16:	32 c0       	rjmp	.+100    	; 0xc7c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     c18:	85 31       	cpi	r24, 0x15	; 21
     c1a:	e1 f0       	breq	.+56     	; 0xc54 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xce>
     c1c:	86 31       	cpi	r24, 0x16	; 22
     c1e:	99 f5       	brne	.+102    	; 0xc86 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    sensor->max_value = 80.0F;
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	aa ef       	ldi	r26, 0xFA	; 250
     c26:	b2 e4       	ldi	r27, 0x42	; 66
     c28:	19 c0       	rjmp	.+50     	; 0xc5c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 50.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 2.0F;
    break;
  case DHT12:
    sensor->max_value = 60.0F;
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e7       	ldi	r26, 0x70	; 112
     c30:	b2 e4       	ldi	r27, 0x42	; 66
     c32:	88 8f       	std	Y+24, r24	; 0x18
     c34:	99 8f       	std	Y+25, r25	; 0x19
     c36:	aa 8f       	std	Y+26, r26	; 0x1a
     c38:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -20.0F;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 ea       	ldi	r26, 0xA0	; 160
     c40:	b1 ec       	ldi	r27, 0xC1	; 193
     c42:	8c 8f       	std	Y+28, r24	; 0x1c
     c44:	9d 8f       	std	Y+29, r25	; 0x1d
     c46:	ae 8f       	std	Y+30, r26	; 0x1e
     c48:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.5F;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	bf e3       	ldi	r27, 0x3F	; 63
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
    break;
  case DHT21:
    sensor->max_value = 80.0F;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 ea       	ldi	r26, 0xA0	; 160
     c5a:	b2 e4       	ldi	r27, 0x42	; 66
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     c5c:	88 8f       	std	Y+24, r24	; 0x18
     c5e:	99 8f       	std	Y+25, r25	; 0x19
     c60:	aa 8f       	std	Y+26, r26	; 0x1a
     c62:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -40.0F;
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	a0 e2       	ldi	r26, 0x20	; 32
     c6a:	b2 ec       	ldi	r27, 0xC2	; 194
     c6c:	8c 8f       	std	Y+28, r24	; 0x1c
     c6e:	9d 8f       	std	Y+29, r25	; 0x1d
     c70:	ae 8f       	std	Y+30, r26	; 0x1e
     c72:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.1F;
     c74:	8d ec       	ldi	r24, 0xCD	; 205
     c76:	9c ec       	ldi	r25, 0xCC	; 204
     c78:	ac ec       	ldi	r26, 0xCC	; 204
     c7a:	bd e3       	ldi	r27, 0x3D	; 61
     c7c:	88 a3       	std	Y+32, r24	; 0x20
     c7e:	99 a3       	std	Y+33, r25	; 0x21
     c80:	aa a3       	std	Y+34, r26	; 0x22
     c82:	bb a3       	std	Y+35, r27	; 0x23
    break;
     c84:	0c c0       	rjmp	.+24     	; 0xc9e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x118>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     c86:	18 8e       	std	Y+24, r1	; 0x18
     c88:	19 8e       	std	Y+25, r1	; 0x19
     c8a:	1a 8e       	std	Y+26, r1	; 0x1a
     c8c:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     c8e:	1c 8e       	std	Y+28, r1	; 0x1c
     c90:	1d 8e       	std	Y+29, r1	; 0x1d
     c92:	1e 8e       	std	Y+30, r1	; 0x1e
     c94:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
     c96:	18 a2       	std	Y+32, r1	; 0x20
     c98:	19 a2       	std	Y+33, r1	; 0x21
     c9a:	1a a2       	std	Y+34, r1	; 0x22
     c9c:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	8c 01       	movw	r16, r24
     cb2:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     cb4:	88 e2       	ldi	r24, 0x28	; 40
     cb6:	db 01       	movw	r26, r22
     cb8:	1d 92       	st	X+, r1
     cba:	8a 95       	dec	r24
     cbc:	e9 f7       	brne	.-6      	; 0xcb8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     cbe:	f8 01       	movw	r30, r16
     cc0:	83 81       	ldd	r24, Z+3	; 0x03
     cc2:	94 81       	ldd	r25, Z+4	; 0x04
     cc4:	1c df       	rcall	.-456    	; 0xafe <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	8c 87       	std	Y+12, r24	; 0x0c
     cd0:	9d 87       	std	Y+13, r25	; 0x0d
     cd2:	ae 87       	std	Y+14, r26	; 0x0e
     cd4:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     cd6:	f8 01       	movw	r30, r16
     cd8:	85 81       	ldd	r24, Z+5	; 0x05
     cda:	96 81       	ldd	r25, Z+6	; 0x06
     cdc:	a7 81       	ldd	r26, Z+7	; 0x07
     cde:	b0 85       	ldd	r27, Z+8	; 0x08
     ce0:	88 8b       	std	Y+16, r24	; 0x10
     ce2:	99 8b       	std	Y+17, r25	; 0x11
     ce4:	aa 8b       	std	Y+18, r26	; 0x12
     ce6:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     ce8:	8c e0       	ldi	r24, 0x0C	; 12
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	8c 8b       	std	Y+20, r24	; 0x14
     cf2:	9d 8b       	std	Y+21, r25	; 0x15
     cf4:	ae 8b       	std	Y+22, r26	; 0x16
     cf6:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     cf8:	be 01       	movw	r22, r28
     cfa:	83 81       	ldd	r24, Z+3	; 0x03
     cfc:	94 81       	ldd	r25, Z+4	; 0x04
     cfe:	2c df       	rcall	.-424    	; 0xb58 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     d00:	d8 01       	movw	r26, r16
     d02:	13 96       	adiw	r26, 0x03	; 3
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	14 97       	sbiw	r26, 0x04	; 4
     d0a:	83 89       	ldd	r24, Z+19	; 0x13
     d0c:	8c 30       	cpi	r24, 0x0C	; 12
     d0e:	69 f0       	breq	.+26     	; 0xd2a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x82>
     d10:	38 f4       	brcc	.+14     	; 0xd20 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x78>
     d12:	8b 30       	cpi	r24, 0x0B	; 11
     d14:	a1 f5       	brne	.+104    	; 0xd7e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
  case DHT11:
    sensor->max_value = 80.0F;
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 ea       	ldi	r26, 0xA0	; 160
     d1c:	b2 e4       	ldi	r27, 0x42	; 66
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x8a>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     d20:	85 31       	cpi	r24, 0x15	; 21
     d22:	c1 f0       	breq	.+48     	; 0xd54 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
     d24:	86 31       	cpi	r24, 0x16	; 22
     d26:	b1 f0       	breq	.+44     	; 0xd54 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
     d28:	2a c0       	rjmp	.+84     	; 0xd7e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 80.0F;
    sensor->min_value = 20.0F;
    sensor->resolution = 5.0F;
    break;
  case DHT12:
    sensor->max_value = 95.0F;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	ae eb       	ldi	r26, 0xBE	; 190
     d30:	b2 e4       	ldi	r27, 0x42	; 66
     d32:	88 8f       	std	Y+24, r24	; 0x18
     d34:	99 8f       	std	Y+25, r25	; 0x19
     d36:	aa 8f       	std	Y+26, r26	; 0x1a
     d38:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 20.0F;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b1 e4       	ldi	r27, 0x41	; 65
     d42:	8c 8f       	std	Y+28, r24	; 0x1c
     d44:	9d 8f       	std	Y+29, r25	; 0x1d
     d46:	ae 8f       	std	Y+30, r26	; 0x1e
     d48:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 5.0F;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 ea       	ldi	r26, 0xA0	; 160
     d50:	b0 e4       	ldi	r27, 0x40	; 64
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xcc>
    sensor->max_value = 100.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 100.0F;
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a8 ec       	ldi	r26, 0xC8	; 200
     d5a:	b2 e4       	ldi	r27, 0x42	; 66
     d5c:	88 8f       	std	Y+24, r24	; 0x18
     d5e:	99 8f       	std	Y+25, r25	; 0x19
     d60:	aa 8f       	std	Y+26, r26	; 0x1a
     d62:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     d64:	1c 8e       	std	Y+28, r1	; 0x1c
     d66:	1d 8e       	std	Y+29, r1	; 0x1d
     d68:	1e 8e       	std	Y+30, r1	; 0x1e
     d6a:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.1F;
     d6c:	8d ec       	ldi	r24, 0xCD	; 205
     d6e:	9c ec       	ldi	r25, 0xCC	; 204
     d70:	ac ec       	ldi	r26, 0xCC	; 204
     d72:	bd e3       	ldi	r27, 0x3D	; 61
     d74:	88 a3       	std	Y+32, r24	; 0x20
     d76:	99 a3       	std	Y+33, r25	; 0x21
     d78:	aa a3       	std	Y+34, r26	; 0x22
     d7a:	bb a3       	std	Y+35, r27	; 0x23
    break;
     d7c:	0c c0       	rjmp	.+24     	; 0xd96 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xee>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     d7e:	18 8e       	std	Y+24, r1	; 0x18
     d80:	19 8e       	std	Y+25, r1	; 0x19
     d82:	1a 8e       	std	Y+26, r1	; 0x1a
     d84:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     d86:	1c 8e       	std	Y+28, r1	; 0x1c
     d88:	1d 8e       	std	Y+29, r1	; 0x1d
     d8a:	1e 8e       	std	Y+30, r1	; 0x1e
     d8c:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
     d8e:	18 a2       	std	Y+32, r1	; 0x20
     d90:	19 a2       	std	Y+33, r1	; 0x21
     d92:	1a a2       	std	Y+34, r1	; 0x22
     d94:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
     da0:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_state>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <twi_sendStop>
     daa:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <twi_inRepStart>
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	84 e1       	ldi	r24, 0x14	; 20
     db2:	0e 94 2e 10 	call	0x205c	; 0x205c <digitalWrite>
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	85 e1       	ldi	r24, 0x15	; 21
     dba:	0e 94 2e 10 	call	0x205c	; 0x205c <digitalWrite>
     dbe:	e9 eb       	ldi	r30, 0xB9	; 185
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	80 83       	st	Z, r24
     dc8:	80 81       	ld	r24, Z
     dca:	8d 7f       	andi	r24, 0xFD	; 253
     dcc:	80 83       	st	Z, r24
     dce:	88 e4       	ldi	r24, 0x48	; 72
     dd0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     dd4:	85 e4       	ldi	r24, 0x45	; 69
     dd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     dda:	08 95       	ret

00000ddc <twi_disable>:
     ddc:	ec eb       	ldi	r30, 0xBC	; 188
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8a 7b       	andi	r24, 0xBA	; 186
     de4:	80 83       	st	Z, r24
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	84 e1       	ldi	r24, 0x14	; 20
     dea:	0e 94 2e 10 	call	0x205c	; 0x205c <digitalWrite>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	85 e1       	ldi	r24, 0x15	; 21
     df2:	0c 94 2e 10 	jmp	0x205c	; 0x205c <digitalWrite>

00000df6 <twi_transmit>:
     df6:	40 91 c0 02 	lds	r20, 0x02C0	; 0x8002c0 <twi_txBufferLength>
     dfa:	26 2f       	mov	r18, r22
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	24 0f       	add	r18, r20
     e00:	31 1d       	adc	r19, r1
     e02:	21 32       	cpi	r18, 0x21	; 33
     e04:	31 05       	cpc	r19, r1
     e06:	dc f4       	brge	.+54     	; 0xe3e <twi_transmit+0x48>
     e08:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <twi_state>
     e0c:	24 30       	cpi	r18, 0x04	; 4
     e0e:	c9 f4       	brne	.+50     	; 0xe42 <twi_transmit+0x4c>
     e10:	fc 01       	movw	r30, r24
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	86 17       	cp	r24, r22
     e18:	58 f4       	brcc	.+22     	; 0xe30 <twi_transmit+0x3a>
     e1a:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <twi_txBufferLength>
     e1e:	21 91       	ld	r18, Z+
     e20:	dc 01       	movw	r26, r24
     e22:	ae 53       	subi	r26, 0x3E	; 62
     e24:	bd 4f       	sbci	r27, 0xFD	; 253
     e26:	a3 0f       	add	r26, r19
     e28:	b1 1d       	adc	r27, r1
     e2a:	2c 93       	st	X, r18
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	f3 cf       	rjmp	.-26     	; 0xe16 <twi_transmit+0x20>
     e30:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
     e34:	68 0f       	add	r22, r24
     e36:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <twi_txBufferLength>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	08 95       	ret
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	08 95       	ret

00000e46 <twi_attachSlaveRxEvent>:
     e46:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <twi_onSlaveReceive+0x1>
     e4a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_onSlaveReceive>
     e4e:	08 95       	ret

00000e50 <twi_attachSlaveTxEvent>:
     e50:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <twi_onSlaveTransmit+0x1>
     e54:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_onSlaveTransmit>
     e58:	08 95       	ret

00000e5a <twi_releaseBus>:
     e5a:	85 ec       	ldi	r24, 0xC5	; 197
     e5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     e60:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_state>
     e64:	08 95       	ret

00000e66 <twi_handleTimeout>:
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <twi_timed_out_flag>
     e70:	88 23       	and	r24, r24
     e72:	51 f0       	breq	.+20     	; 0xe88 <twi_handleTimeout+0x22>
     e74:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     e78:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
     e7c:	af df       	rcall	.-162    	; 0xddc <twi_disable>
     e7e:	90 df       	rcall	.-224    	; 0xda0 <twi_init>
     e80:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
     e84:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <twi_writeTo>:
     e8e:	4f 92       	push	r4
     e90:	5f 92       	push	r5
     e92:	6f 92       	push	r6
     e94:	7f 92       	push	r7
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	41 32       	cpi	r20, 0x21	; 33
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <twi_writeTo+0x26>
     eb2:	bf c0       	rjmp	.+382    	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
     eb4:	12 2f       	mov	r17, r18
     eb6:	f4 2e       	mov	r15, r20
     eb8:	d7 2e       	mov	r13, r23
     eba:	e6 2e       	mov	r14, r22
     ebc:	d8 2f       	mov	r29, r24
     ebe:	72 d7       	rcall	.+3812   	; 0x1da4 <micros>
     ec0:	4b 01       	movw	r8, r22
     ec2:	5c 01       	movw	r10, r24
     ec4:	c0 91 11 03 	lds	r28, 0x0311	; 0x800311 <twi_state>
     ec8:	cc 23       	and	r28, r28
     eca:	09 f1       	breq	.+66     	; 0xf0e <twi_writeTo+0x80>
     ecc:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_timeout_us>
     ed0:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_timeout_us+0x1>
     ed4:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <twi_timeout_us+0x2>
     ed8:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <twi_timeout_us+0x3>
     edc:	89 2b       	or	r24, r25
     ede:	8a 2b       	or	r24, r26
     ee0:	8b 2b       	or	r24, r27
     ee2:	81 f3       	breq	.-32     	; 0xec4 <twi_writeTo+0x36>
     ee4:	5f d7       	rcall	.+3774   	; 0x1da4 <micros>
     ee6:	40 90 0a 03 	lds	r4, 0x030A	; 0x80030a <twi_timeout_us>
     eea:	50 90 0b 03 	lds	r5, 0x030B	; 0x80030b <twi_timeout_us+0x1>
     eee:	60 90 0c 03 	lds	r6, 0x030C	; 0x80030c <twi_timeout_us+0x2>
     ef2:	70 90 0d 03 	lds	r7, 0x030D	; 0x80030d <twi_timeout_us+0x3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	88 19       	sub	r24, r8
     efc:	99 09       	sbc	r25, r9
     efe:	aa 09       	sbc	r26, r10
     f00:	bb 09       	sbc	r27, r11
     f02:	48 16       	cp	r4, r24
     f04:	59 06       	cpc	r5, r25
     f06:	6a 06       	cpc	r6, r26
     f08:	7b 06       	cpc	r7, r27
     f0a:	e0 f6       	brcc	.-72     	; 0xec4 <twi_writeTo+0x36>
     f0c:	7f c0       	rjmp	.+254    	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_state>
     f14:	00 93 0f 03 	sts	0x030F, r16	; 0x80030f <twi_sendStop>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
     f1e:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_masterBufferIndex>
     f22:	f0 92 e2 02 	sts	0x02E2, r15	; 0x8002e2 <twi_masterBufferLength>
     f26:	9e 2d       	mov	r25, r14
     f28:	a4 ee       	ldi	r26, 0xE4	; 228
     f2a:	b2 e0       	ldi	r27, 0x02	; 2
     f2c:	ee 2d       	mov	r30, r14
     f2e:	fd 2d       	mov	r31, r13
     f30:	8e 2f       	mov	r24, r30
     f32:	89 1b       	sub	r24, r25
     f34:	8f 15       	cp	r24, r15
     f36:	18 f4       	brcc	.+6      	; 0xf3e <twi_writeTo+0xb0>
     f38:	81 91       	ld	r24, Z+
     f3a:	8d 93       	st	X+, r24
     f3c:	f9 cf       	rjmp	.-14     	; 0xf30 <twi_writeTo+0xa2>
     f3e:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <twi_slarw>
     f42:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <twi_slarw>
     f46:	dd 0f       	add	r29, r29
     f48:	d9 2b       	or	r29, r25
     f4a:	d0 93 10 03 	sts	0x0310, r29	; 0x800310 <twi_slarw>
     f4e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <twi_inRepStart>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	79 f5       	brne	.+94     	; 0xfb4 <twi_writeTo+0x126>
     f56:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <twi_inRepStart>
     f5a:	24 d7       	rcall	.+3656   	; 0x1da4 <micros>
     f5c:	6b 01       	movw	r12, r22
     f5e:	7c 01       	movw	r14, r24
     f60:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_slarw>
     f64:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     f68:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_timeout_us>
     f6c:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_timeout_us+0x1>
     f70:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <twi_timeout_us+0x2>
     f74:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <twi_timeout_us+0x3>
     f78:	89 2b       	or	r24, r25
     f7a:	8a 2b       	or	r24, r26
     f7c:	8b 2b       	or	r24, r27
     f7e:	a1 f0       	breq	.+40     	; 0xfa8 <twi_writeTo+0x11a>
     f80:	11 d7       	rcall	.+3618   	; 0x1da4 <micros>
     f82:	80 90 0a 03 	lds	r8, 0x030A	; 0x80030a <twi_timeout_us>
     f86:	90 90 0b 03 	lds	r9, 0x030B	; 0x80030b <twi_timeout_us+0x1>
     f8a:	a0 90 0c 03 	lds	r10, 0x030C	; 0x80030c <twi_timeout_us+0x2>
     f8e:	b0 90 0d 03 	lds	r11, 0x030D	; 0x80030d <twi_timeout_us+0x3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8c 19       	sub	r24, r12
     f98:	9d 09       	sbc	r25, r13
     f9a:	ae 09       	sbc	r26, r14
     f9c:	bf 09       	sbc	r27, r15
     f9e:	88 16       	cp	r8, r24
     fa0:	99 06       	cpc	r9, r25
     fa2:	aa 06       	cpc	r10, r26
     fa4:	bb 06       	cpc	r11, r27
     fa6:	90 f1       	brcs	.+100    	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
     fa8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     fac:	83 fd       	sbrc	r24, 3
     fae:	d8 cf       	rjmp	.-80     	; 0xf60 <twi_writeTo+0xd2>
     fb0:	85 ec       	ldi	r24, 0xC5	; 197
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <twi_writeTo+0x128>
     fb4:	85 ee       	ldi	r24, 0xE5	; 229
     fb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     fba:	f4 d6       	rcall	.+3560   	; 0x1da4 <micros>
     fbc:	6b 01       	movw	r12, r22
     fbe:	7c 01       	movw	r14, r24
     fc0:	11 23       	and	r17, r17
     fc2:	49 f1       	breq	.+82     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fc4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <twi_state>
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	29 f5       	brne	.+74     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fcc:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_timeout_us>
     fd0:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_timeout_us+0x1>
     fd4:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <twi_timeout_us+0x2>
     fd8:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <twi_timeout_us+0x3>
     fdc:	89 2b       	or	r24, r25
     fde:	8a 2b       	or	r24, r26
     fe0:	8b 2b       	or	r24, r27
     fe2:	71 f3       	breq	.-36     	; 0xfc0 <twi_writeTo+0x132>
     fe4:	df d6       	rcall	.+3518   	; 0x1da4 <micros>
     fe6:	80 90 0a 03 	lds	r8, 0x030A	; 0x80030a <twi_timeout_us>
     fea:	90 90 0b 03 	lds	r9, 0x030B	; 0x80030b <twi_timeout_us+0x1>
     fee:	a0 90 0c 03 	lds	r10, 0x030C	; 0x80030c <twi_timeout_us+0x2>
     ff2:	b0 90 0d 03 	lds	r11, 0x030D	; 0x80030d <twi_timeout_us+0x3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8c 19       	sub	r24, r12
     ffc:	9d 09       	sbc	r25, r13
     ffe:	ae 09       	sbc	r26, r14
    1000:	bf 09       	sbc	r27, r15
    1002:	88 16       	cp	r8, r24
    1004:	99 06       	cpc	r9, r25
    1006:	aa 06       	cpc	r10, r26
    1008:	bb 06       	cpc	r11, r27
    100a:	d0 f6       	brcc	.-76     	; 0xfc0 <twi_writeTo+0x132>
    100c:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <twi_do_reset_on_timeout>
    1010:	2a df       	rcall	.-428    	; 0xe66 <twi_handleTimeout>
    1012:	c5 e0       	ldi	r28, 0x05	; 5
    1014:	13 c0       	rjmp	.+38     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    1016:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
    101a:	8f 3f       	cpi	r24, 0xFF	; 255
    101c:	79 f0       	breq	.+30     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    101e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
    1022:	80 32       	cpi	r24, 0x20	; 32
    1024:	41 f0       	breq	.+16     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1026:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
    102a:	80 33       	cpi	r24, 0x30	; 48
    102c:	31 f0       	breq	.+12     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    102e:	c4 e0       	ldi	r28, 0x04	; 4
    1030:	05 c0       	rjmp	.+10     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    1032:	c1 e0       	ldi	r28, 0x01	; 1
    1034:	03 c0       	rjmp	.+6      	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    1036:	c2 e0       	ldi	r28, 0x02	; 2
    1038:	01 c0       	rjmp	.+2      	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    103a:	c3 e0       	ldi	r28, 0x03	; 3
    103c:	8c 2f       	mov	r24, r28
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	9f 90       	pop	r9
    1054:	8f 90       	pop	r8
    1056:	7f 90       	pop	r7
    1058:	6f 90       	pop	r6
    105a:	5f 90       	pop	r5
    105c:	4f 90       	pop	r4
    105e:	08 95       	ret

00001060 <twi_stop>:
    1060:	85 ed       	ldi	r24, 0xD5	; 213
    1062:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1066:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_timeout_us>
    106a:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_timeout_us+0x1>
    106e:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <twi_timeout_us+0x2>
    1072:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <twi_timeout_us+0x3>
    1076:	07 96       	adiw	r24, 0x07	; 7
    1078:	a1 1d       	adc	r26, r1
    107a:	b1 1d       	adc	r27, r1
    107c:	23 e0       	ldi	r18, 0x03	; 3
    107e:	b6 95       	lsr	r27
    1080:	a7 95       	ror	r26
    1082:	97 95       	ror	r25
    1084:	87 95       	ror	r24
    1086:	2a 95       	dec	r18
    1088:	d1 f7       	brne	.-12     	; 0x107e <twi_stop+0x1e>
    108a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    108e:	24 ff       	sbrs	r18, 4
    1090:	1b c0       	rjmp	.+54     	; 0x10c8 <twi_stop+0x68>
    1092:	40 91 0a 03 	lds	r20, 0x030A	; 0x80030a <twi_timeout_us>
    1096:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <twi_timeout_us+0x1>
    109a:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <twi_timeout_us+0x2>
    109e:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <twi_timeout_us+0x3>
    10a2:	45 2b       	or	r20, r21
    10a4:	46 2b       	or	r20, r22
    10a6:	47 2b       	or	r20, r23
    10a8:	81 f3       	breq	.-32     	; 0x108a <twi_stop+0x2a>
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	a1 05       	cpc	r26, r1
    10ae:	b1 05       	cpc	r27, r1
    10b0:	41 f0       	breq	.+16     	; 0x10c2 <twi_stop+0x62>
    10b2:	25 e3       	ldi	r18, 0x35	; 53
    10b4:	2a 95       	dec	r18
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <twi_stop+0x54>
    10b8:	00 00       	nop
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	a1 09       	sbc	r26, r1
    10be:	b1 09       	sbc	r27, r1
    10c0:	e4 cf       	rjmp	.-56     	; 0x108a <twi_stop+0x2a>
    10c2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <twi_do_reset_on_timeout>
    10c6:	cf ce       	rjmp	.-610    	; 0xe66 <twi_handleTimeout>
    10c8:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_state>
    10cc:	08 95       	ret

000010ce <__vector_39>:

ISR(TWI_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	0b b6       	in	r0, 0x3b	; 59
    10da:	0f 92       	push	r0
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
  switch(TW_STATUS){
    10f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    10f8:	88 7f       	andi	r24, 0xF8	; 248
    10fa:	80 36       	cpi	r24, 0x60	; 96
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__vector_39+0x32>
    10fe:	9d c0       	rjmp	.+314    	; 0x123a <__vector_39+0x16c>
    1100:	70 f5       	brcc	.+92     	; 0x115e <__vector_39+0x90>
    1102:	88 32       	cpi	r24, 0x28	; 40
    1104:	09 f4       	brne	.+2      	; 0x1108 <__vector_39+0x3a>
    1106:	5c c0       	rjmp	.+184    	; 0x11c0 <__vector_39+0xf2>
    1108:	90 f4       	brcc	.+36     	; 0x112e <__vector_39+0x60>
    110a:	80 31       	cpi	r24, 0x10	; 16
    110c:	09 f4       	brne	.+2      	; 0x1110 <__vector_39+0x42>
    110e:	55 c0       	rjmp	.+170    	; 0x11ba <__vector_39+0xec>
    1110:	38 f4       	brcc	.+14     	; 0x1120 <__vector_39+0x52>
    1112:	88 23       	and	r24, r24
    1114:	09 f4       	brne	.+2      	; 0x1118 <__vector_39+0x4a>
    1116:	f3 c0       	rjmp	.+486    	; 0x12fe <__vector_39+0x230>
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	09 f4       	brne	.+2      	; 0x111e <__vector_39+0x50>
    111c:	4e c0       	rjmp	.+156    	; 0x11ba <__vector_39+0xec>
    111e:	f2 c0       	rjmp	.+484    	; 0x1304 <__vector_39+0x236>
    1120:	88 31       	cpi	r24, 0x18	; 24
    1122:	09 f4       	brne	.+2      	; 0x1126 <__vector_39+0x58>
    1124:	4d c0       	rjmp	.+154    	; 0x11c0 <__vector_39+0xf2>
    1126:	80 32       	cpi	r24, 0x20	; 32
    1128:	09 f4       	brne	.+2      	; 0x112c <__vector_39+0x5e>
    112a:	5e c0       	rjmp	.+188    	; 0x11e8 <__vector_39+0x11a>
    112c:	eb c0       	rjmp	.+470    	; 0x1304 <__vector_39+0x236>
    112e:	80 34       	cpi	r24, 0x40	; 64
    1130:	09 f4       	brne	.+2      	; 0x1134 <__vector_39+0x66>
    1132:	69 c0       	rjmp	.+210    	; 0x1206 <__vector_39+0x138>
    1134:	50 f4       	brcc	.+20     	; 0x114a <__vector_39+0x7c>
    1136:	80 33       	cpi	r24, 0x30	; 48
    1138:	09 f4       	brne	.+2      	; 0x113c <__vector_39+0x6e>
    113a:	56 c0       	rjmp	.+172    	; 0x11e8 <__vector_39+0x11a>
    113c:	88 33       	cpi	r24, 0x38	; 56
    113e:	09 f0       	breq	.+2      	; 0x1142 <__vector_39+0x74>
    1140:	e1 c0       	rjmp	.+450    	; 0x1304 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1142:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
      twi_releaseBus();
    1146:	89 de       	rcall	.-750    	; 0xe5a <twi_releaseBus>
      break;
    1148:	dd c0       	rjmp	.+442    	; 0x1304 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    114a:	80 35       	cpi	r24, 0x50	; 80
    114c:	09 f4       	brne	.+2      	; 0x1150 <__vector_39+0x82>
    114e:	4f c0       	rjmp	.+158    	; 0x11ee <__vector_39+0x120>
    1150:	88 35       	cpi	r24, 0x58	; 88
    1152:	09 f4       	brne	.+2      	; 0x1156 <__vector_39+0x88>
    1154:	5d c0       	rjmp	.+186    	; 0x1210 <__vector_39+0x142>
    1156:	88 34       	cpi	r24, 0x48	; 72
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_39+0x8e>
    115a:	d4 c0       	rjmp	.+424    	; 0x1304 <__vector_39+0x236>
    115c:	d2 c0       	rjmp	.+420    	; 0x1302 <__vector_39+0x234>
    115e:	88 39       	cpi	r24, 0x98	; 152
    1160:	09 f4       	brne	.+2      	; 0x1164 <__vector_39+0x96>
    1162:	c3 c0       	rjmp	.+390    	; 0x12ea <__vector_39+0x21c>
    1164:	a8 f4       	brcc	.+42     	; 0x1190 <__vector_39+0xc2>
    1166:	88 37       	cpi	r24, 0x78	; 120
    1168:	09 f4       	brne	.+2      	; 0x116c <__vector_39+0x9e>
    116a:	67 c0       	rjmp	.+206    	; 0x123a <__vector_39+0x16c>
    116c:	38 f4       	brcc	.+14     	; 0x117c <__vector_39+0xae>
    116e:	88 36       	cpi	r24, 0x68	; 104
    1170:	09 f4       	brne	.+2      	; 0x1174 <__vector_39+0xa6>
    1172:	63 c0       	rjmp	.+198    	; 0x123a <__vector_39+0x16c>
    1174:	80 37       	cpi	r24, 0x70	; 112
    1176:	09 f4       	brne	.+2      	; 0x117a <__vector_39+0xac>
    1178:	60 c0       	rjmp	.+192    	; 0x123a <__vector_39+0x16c>
    117a:	c4 c0       	rjmp	.+392    	; 0x1304 <__vector_39+0x236>
    117c:	88 38       	cpi	r24, 0x88	; 136
    117e:	09 f4       	brne	.+2      	; 0x1182 <__vector_39+0xb4>
    1180:	b4 c0       	rjmp	.+360    	; 0x12ea <__vector_39+0x21c>
    1182:	80 39       	cpi	r24, 0x90	; 144
    1184:	09 f4       	brne	.+2      	; 0x1188 <__vector_39+0xba>
    1186:	5f c0       	rjmp	.+190    	; 0x1246 <__vector_39+0x178>
    1188:	80 38       	cpi	r24, 0x80	; 128
    118a:	09 f0       	breq	.+2      	; 0x118e <__vector_39+0xc0>
    118c:	bb c0       	rjmp	.+374    	; 0x1304 <__vector_39+0x236>
    118e:	5b c0       	rjmp	.+182    	; 0x1246 <__vector_39+0x178>
    1190:	80 3b       	cpi	r24, 0xB0	; 176
    1192:	09 f4       	brne	.+2      	; 0x1196 <__vector_39+0xc8>
    1194:	82 c0       	rjmp	.+260    	; 0x129a <__vector_39+0x1cc>
    1196:	38 f4       	brcc	.+14     	; 0x11a6 <__vector_39+0xd8>
    1198:	80 3a       	cpi	r24, 0xA0	; 160
    119a:	09 f4       	brne	.+2      	; 0x119e <__vector_39+0xd0>
    119c:	66 c0       	rjmp	.+204    	; 0x126a <__vector_39+0x19c>
    119e:	88 3a       	cpi	r24, 0xA8	; 168
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <__vector_39+0xd6>
    11a2:	7b c0       	rjmp	.+246    	; 0x129a <__vector_39+0x1cc>
    11a4:	af c0       	rjmp	.+350    	; 0x1304 <__vector_39+0x236>
    11a6:	80 3c       	cpi	r24, 0xC0	; 192
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__vector_39+0xde>
    11aa:	a3 c0       	rjmp	.+326    	; 0x12f2 <__vector_39+0x224>
    11ac:	88 3c       	cpi	r24, 0xC8	; 200
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <__vector_39+0xe4>
    11b0:	a0 c0       	rjmp	.+320    	; 0x12f2 <__vector_39+0x224>
    11b2:	88 3b       	cpi	r24, 0xB8	; 184
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__vector_39+0xea>
    11b6:	86 c0       	rjmp	.+268    	; 0x12c4 <__vector_39+0x1f6>
    11b8:	a5 c0       	rjmp	.+330    	; 0x1304 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    11ba:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_slarw>
    11be:	10 c0       	rjmp	.+32     	; 0x11e0 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    11c0:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    11c4:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_masterBufferLength>
    11c8:	98 17       	cp	r25, r24
    11ca:	70 f5       	brcc	.+92     	; 0x1228 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    11cc:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	8e 0f       	add	r24, r30
    11d4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	ec 51       	subi	r30, 0x1C	; 28
    11dc:	fd 4f       	sbci	r31, 0xFD	; 253
    11de:	80 81       	ld	r24, Z
    11e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    11e4:	85 ec       	ldi	r24, 0xC5	; 197
    11e6:	82 c0       	rjmp	.+260    	; 0x12ec <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    11e8:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
    11ec:	8a c0       	rjmp	.+276    	; 0x1302 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    11ee:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	8e 0f       	add	r24, r30
    11f6:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
    11fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	ec 51       	subi	r30, 0x1C	; 28
    1202:	fd 4f       	sbci	r31, 0xFD	; 253
    1204:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1206:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    120a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_masterBufferLength>
    120e:	6a c0       	rjmp	.+212    	; 0x12e4 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1210:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8e 0f       	add	r24, r30
    1218:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
    121c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	ec 51       	subi	r30, 0x1C	; 28
    1224:	fd 4f       	sbci	r31, 0xFD	; 253
    1226:	80 83       	st	Z, r24
      if (twi_sendStop){
    1228:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <twi_sendStop>
    122c:	81 11       	cpse	r24, r1
    122e:	69 c0       	rjmp	.+210    	; 0x1302 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1236:	84 ea       	ldi	r24, 0xA4	; 164
    1238:	5d c0       	rjmp	.+186    	; 0x12f4 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1240:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_rxBufferIndex>
    1244:	cf cf       	rjmp	.-98     	; 0x11e4 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1246:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_rxBufferIndex>
    124a:	80 32       	cpi	r24, 0x20	; 32
    124c:	08 f0       	brcs	.+2      	; 0x1250 <__vector_39+0x182>
    124e:	4d c0       	rjmp	.+154    	; 0x12ea <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1250:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	8e 0f       	add	r24, r30
    1258:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <twi_rxBufferIndex>
    125c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	e0 56       	subi	r30, 0x60	; 96
    1264:	fd 4f       	sbci	r31, 0xFD	; 253
    1266:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1268:	bd cf       	rjmp	.-134    	; 0x11e4 <__vector_39+0x116>
    126a:	f7 dd       	rcall	.-1042   	; 0xe5a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    126c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1270:	80 32       	cpi	r24, 0x20	; 32
    1272:	30 f4       	brcc	.+12     	; 0x1280 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1274:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	e0 56       	subi	r30, 0x60	; 96
    127c:	fd 4f       	sbci	r31, 0xFD	; 253
    127e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1280:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_onSlaveReceive>
    128a:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <twi_onSlaveReceive+0x1>
    128e:	80 ea       	ldi	r24, 0xA0	; 160
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1294:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_rxBufferIndex>
      break;
    1298:	35 c0       	rjmp	.+106    	; 0x1304 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    12a0:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    12a4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    12a8:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_onSlaveTransmit>
    12ac:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <twi_onSlaveTransmit+0x1>
    12b0:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    12b2:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
    12b6:	81 11       	cpse	r24, r1
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    12c0:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    12c4:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <twi_txBufferIndex>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	8e 0f       	add	r24, r30
    12cc:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <twi_txBufferIndex>
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ee 53       	subi	r30, 0x3E	; 62
    12d4:	fd 4f       	sbci	r31, 0xFD	; 253
    12d6:	80 81       	ld	r24, Z
    12d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    12dc:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <twi_txBufferIndex>
    12e0:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
    12e4:	98 17       	cp	r25, r24
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <__vector_39+0x21c>
    12e8:	7d cf       	rjmp	.-262    	; 0x11e4 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    12ea:	85 e8       	ldi	r24, 0x85	; 133
    12ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    12f2:	85 ec       	ldi	r24, 0xC5	; 197
    12f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    12f8:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_state>
      break;
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    12fe:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi_error>
      twi_stop();
    1302:	ae de       	rcall	.-676    	; 0x1060 <twi_stop>
      break;
  }
}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0b be       	out	0x3b, r0	; 59
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	08 95       	ret

00001330 <_ZN7TwoWire9availableEv>:
    1330:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN7TwoWire14rxBufferLengthE>
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    133a:	82 1b       	sub	r24, r18
    133c:	91 09       	sbc	r25, r1
    133e:	08 95       	ret

00001340 <_ZN7TwoWire4readEv>:
    1340:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    1344:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN7TwoWire14rxBufferLengthE>
    1348:	98 17       	cp	r25, r24
    134a:	50 f4       	brcc	.+20     	; 0x1360 <_ZN7TwoWire4readEv+0x20>
    134c:	e9 2f       	mov	r30, r25
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	e8 5b       	subi	r30, 0xB8	; 184
    1352:	fc 4f       	sbci	r31, 0xFC	; 252
    1354:	20 81       	ld	r18, Z
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	9f 5f       	subi	r25, 0xFF	; 255
    135a:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <_ZN7TwoWire4readEv+0x24>
    1360:	2f ef       	ldi	r18, 0xFF	; 255
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	c9 01       	movw	r24, r18
    1366:	08 95       	ret

00001368 <_ZN7TwoWire4peekEv>:
    1368:	e0 91 47 03 	lds	r30, 0x0347	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    136c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN7TwoWire14rxBufferLengthE>
    1370:	e8 17       	cp	r30, r24
    1372:	30 f4       	brcc	.+12     	; 0x1380 <_ZN7TwoWire4peekEv+0x18>
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	e8 5b       	subi	r30, 0xB8	; 184
    1378:	fc 4f       	sbci	r31, 0xFC	; 252
    137a:	80 81       	ld	r24, Z
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	08 95       	ret
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	9f ef       	ldi	r25, 0xFF	; 255
    1384:	08 95       	ret

00001386 <_ZN7TwoWire5flushEv>:
    1386:	08 95       	ret

00001388 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
    138e:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <_ZN7TwoWire14user_onReceiveE>
    1392:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <_ZN7TwoWire14user_onReceiveE+0x1>
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	f1 f0       	breq	.+60     	; 0x13d6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    139a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    139e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN7TwoWire14rxBufferLengthE>
    13a2:	98 17       	cp	r25, r24
    13a4:	c0 f0       	brcs	.+48     	; 0x13d6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	29 2f       	mov	r18, r25
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	26 17       	cp	r18, r22
    13ae:	37 07       	cpc	r19, r23
    13b0:	54 f4       	brge	.+20     	; 0x13c6 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    13b2:	de 01       	movw	r26, r28
    13b4:	a2 0f       	add	r26, r18
    13b6:	b3 1f       	adc	r27, r19
    13b8:	4c 91       	ld	r20, X
    13ba:	d9 01       	movw	r26, r18
    13bc:	a8 5b       	subi	r26, 0xB8	; 184
    13be:	bc 4f       	sbci	r27, 0xFC	; 252
    13c0:	4c 93       	st	X, r20
    13c2:	9f 5f       	subi	r25, 0xFF	; 255
    13c4:	f1 cf       	rjmp	.-30     	; 0x13a8 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    13c6:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    13ca:	60 93 46 03 	sts	0x0346, r22	; 0x800346 <_ZN7TwoWire14rxBufferLengthE>
    13ce:	cb 01       	movw	r24, r22
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	19 94       	eijmp
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <_ZN7TwoWire16onRequestServiceEv>:
    13dc:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <_ZN7TwoWire14user_onRequestE>
    13e0:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <_ZN7TwoWire14user_onRequestE+0x1>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	29 f0       	breq	.+10     	; 0x13f2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    13e8:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZN7TwoWire13txBufferIndexE>
    13ec:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    13f0:	19 94       	eijmp
    13f2:	08 95       	ret

000013f4 <_ZN7TwoWire5writeEPKhj>:
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	7c 01       	movw	r14, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8a 01       	movw	r16, r20
    140a:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <_ZN7TwoWire12transmittingE>
    140e:	22 23       	and	r18, r18
    1410:	89 f0       	breq	.+34     	; 0x1434 <_ZN7TwoWire5writeEPKhj+0x40>
    1412:	eb 01       	movw	r28, r22
    1414:	6b 01       	movw	r12, r22
    1416:	c4 0e       	add	r12, r20
    1418:	d5 1e       	adc	r13, r21
    141a:	cc 15       	cp	r28, r12
    141c:	dd 05       	cpc	r29, r13
    141e:	61 f0       	breq	.+24     	; 0x1438 <_ZN7TwoWire5writeEPKhj+0x44>
    1420:	69 91       	ld	r22, Y+
    1422:	d7 01       	movw	r26, r14
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	01 90       	ld	r0, Z+
    142a:	f0 81       	ld	r31, Z
    142c:	e0 2d       	mov	r30, r0
    142e:	c7 01       	movw	r24, r14
    1430:	19 95       	eicall
    1432:	f3 cf       	rjmp	.-26     	; 0x141a <_ZN7TwoWire5writeEPKhj+0x26>
    1434:	64 2f       	mov	r22, r20
    1436:	df dc       	rcall	.-1602   	; 0xdf6 <twi_transmit>
    1438:	c8 01       	movw	r24, r16
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret

0000144c <_ZN7TwoWire5writeEh>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	1f 92       	push	r1
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	69 83       	std	Y+1, r22	; 0x01
    1458:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <_ZN7TwoWire12transmittingE>
    145c:	22 23       	and	r18, r18
    145e:	d1 f0       	breq	.+52     	; 0x1494 <_ZN7TwoWire5writeEh+0x48>
    1460:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    1464:	20 32       	cpi	r18, 0x20	; 32
    1466:	40 f0       	brcs	.+16     	; 0x1478 <_ZN7TwoWire5writeEh+0x2c>
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	33 83       	std	Z+3, r19	; 0x03
    1470:	22 83       	std	Z+2, r18	; 0x02
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <_ZN7TwoWire5writeEh+0x54>
    1478:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_ZN7TwoWire13txBufferIndexE>
    147c:	e8 2f       	mov	r30, r24
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	eb 5d       	subi	r30, 0xDB	; 219
    1482:	fc 4f       	sbci	r31, 0xFC	; 252
    1484:	99 81       	ldd	r25, Y+1	; 0x01
    1486:	90 83       	st	Z, r25
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_ZN7TwoWire13txBufferIndexE>
    148e:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    1492:	04 c0       	rjmp	.+8      	; 0x149c <_ZN7TwoWire5writeEh+0x50>
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	ad dc       	rcall	.-1702   	; 0xdf6 <twi_transmit>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0f 90       	pop	r0
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <_ZN7TwoWireC1Ev>:
    14a8:	fc 01       	movw	r30, r24
    14aa:	13 82       	std	Z+3, r1	; 0x03
    14ac:	12 82       	std	Z+2, r1	; 0x02
    14ae:	88 ee       	ldi	r24, 0xE8	; 232
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	a0 e0       	ldi	r26, 0x00	; 0
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	84 83       	std	Z+4, r24	; 0x04
    14b8:	95 83       	std	Z+5, r25	; 0x05
    14ba:	a6 83       	std	Z+6, r26	; 0x06
    14bc:	b7 83       	std	Z+7, r27	; 0x07
    14be:	80 e5       	ldi	r24, 0x50	; 80
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	91 83       	std	Z+1, r25	; 0x01
    14c4:	80 83       	st	Z, r24
    14c6:	08 95       	ret

000014c8 <_ZN7TwoWire5beginEv>:
    14c8:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <_ZN7TwoWire13rxBufferIndexE>
    14cc:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN7TwoWire14rxBufferLengthE>
    14d0:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZN7TwoWire13txBufferIndexE>
    14d4:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    14d8:	63 dc       	rcall	.-1850   	; 0xda0 <twi_init>
    14da:	8e ee       	ldi	r24, 0xEE	; 238
    14dc:	99 e0       	ldi	r25, 0x09	; 9
    14de:	b8 dc       	rcall	.-1680   	; 0xe50 <twi_attachSlaveTxEvent>
    14e0:	84 ec       	ldi	r24, 0xC4	; 196
    14e2:	99 e0       	ldi	r25, 0x09	; 9
    14e4:	b0 cc       	rjmp	.-1696   	; 0xe46 <twi_attachSlaveRxEvent>

000014e6 <_ZN7TwoWire17beginTransmissionEh>:
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_ZN7TwoWire12transmittingE>
    14ec:	60 93 45 03 	sts	0x0345, r22	; 0x800345 <_ZN7TwoWire9txAddressE>
    14f0:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZN7TwoWire13txBufferIndexE>
    14f4:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    14f8:	08 95       	ret

000014fa <_ZN7TwoWire17beginTransmissionEi>:
    14fa:	f5 cf       	rjmp	.-22     	; 0x14e6 <_ZN7TwoWire17beginTransmissionEh>

000014fc <_ZN7TwoWire15endTransmissionEh>:
    14fc:	0f 93       	push	r16
    14fe:	06 2f       	mov	r16, r22
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    1506:	65 e2       	ldi	r22, 0x25	; 37
    1508:	73 e0       	ldi	r23, 0x03	; 3
    150a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <_ZN7TwoWire9txAddressE>
    150e:	bf dc       	rcall	.-1666   	; 0xe8e <twi_writeTo>
    1510:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZN7TwoWire13txBufferIndexE>
    1514:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZN7TwoWire14txBufferLengthE>
    1518:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <_ZN7TwoWire12transmittingE>
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <_ZN7TwoWire15endTransmissionEv>:
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	ec cf       	rjmp	.-40     	; 0x14fc <_ZN7TwoWire15endTransmissionEh>

00001524 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1524:	82 e1       	ldi	r24, 0x12	; 18
    1526:	93 e0       	ldi	r25, 0x03	; 3
    1528:	bf cf       	rjmp	.-130    	; 0x14a8 <_ZN7TwoWireC1Ev>

0000152a <__subsf3>:
    152a:	50 58       	subi	r21, 0x80	; 128

0000152c <__addsf3>:
    152c:	bb 27       	eor	r27, r27
    152e:	aa 27       	eor	r26, r26
    1530:	0e d0       	rcall	.+28     	; 0x154e <__addsf3x>
    1532:	09 c1       	rjmp	.+530    	; 0x1746 <__fp_round>
    1534:	fa d0       	rcall	.+500    	; 0x172a <__fp_pscA>
    1536:	30 f0       	brcs	.+12     	; 0x1544 <__addsf3+0x18>
    1538:	ff d0       	rcall	.+510    	; 0x1738 <__fp_pscB>
    153a:	20 f0       	brcs	.+8      	; 0x1544 <__addsf3+0x18>
    153c:	31 f4       	brne	.+12     	; 0x154a <__addsf3+0x1e>
    153e:	9f 3f       	cpi	r25, 0xFF	; 255
    1540:	11 f4       	brne	.+4      	; 0x1546 <__addsf3+0x1a>
    1542:	1e f4       	brtc	.+6      	; 0x154a <__addsf3+0x1e>
    1544:	ef c0       	rjmp	.+478    	; 0x1724 <__fp_nan>
    1546:	0e f4       	brtc	.+2      	; 0x154a <__addsf3+0x1e>
    1548:	e0 95       	com	r30
    154a:	e7 fb       	bst	r30, 7
    154c:	e5 c0       	rjmp	.+458    	; 0x1718 <__fp_inf>

0000154e <__addsf3x>:
    154e:	e9 2f       	mov	r30, r25
    1550:	0b d1       	rcall	.+534    	; 0x1768 <__fp_split3>
    1552:	80 f3       	brcs	.-32     	; 0x1534 <__addsf3+0x8>
    1554:	ba 17       	cp	r27, r26
    1556:	62 07       	cpc	r22, r18
    1558:	73 07       	cpc	r23, r19
    155a:	84 07       	cpc	r24, r20
    155c:	95 07       	cpc	r25, r21
    155e:	18 f0       	brcs	.+6      	; 0x1566 <__addsf3x+0x18>
    1560:	71 f4       	brne	.+28     	; 0x157e <__addsf3x+0x30>
    1562:	9e f5       	brtc	.+102    	; 0x15ca <__addsf3x+0x7c>
    1564:	23 c1       	rjmp	.+582    	; 0x17ac <__fp_zero>
    1566:	0e f4       	brtc	.+2      	; 0x156a <__addsf3x+0x1c>
    1568:	e0 95       	com	r30
    156a:	0b 2e       	mov	r0, r27
    156c:	ba 2f       	mov	r27, r26
    156e:	a0 2d       	mov	r26, r0
    1570:	0b 01       	movw	r0, r22
    1572:	b9 01       	movw	r22, r18
    1574:	90 01       	movw	r18, r0
    1576:	0c 01       	movw	r0, r24
    1578:	ca 01       	movw	r24, r20
    157a:	a0 01       	movw	r20, r0
    157c:	11 24       	eor	r1, r1
    157e:	ff 27       	eor	r31, r31
    1580:	59 1b       	sub	r21, r25
    1582:	99 f0       	breq	.+38     	; 0x15aa <__addsf3x+0x5c>
    1584:	59 3f       	cpi	r21, 0xF9	; 249
    1586:	50 f4       	brcc	.+20     	; 0x159c <__addsf3x+0x4e>
    1588:	50 3e       	cpi	r21, 0xE0	; 224
    158a:	68 f1       	brcs	.+90     	; 0x15e6 <__addsf3x+0x98>
    158c:	1a 16       	cp	r1, r26
    158e:	f0 40       	sbci	r31, 0x00	; 0
    1590:	a2 2f       	mov	r26, r18
    1592:	23 2f       	mov	r18, r19
    1594:	34 2f       	mov	r19, r20
    1596:	44 27       	eor	r20, r20
    1598:	58 5f       	subi	r21, 0xF8	; 248
    159a:	f3 cf       	rjmp	.-26     	; 0x1582 <__addsf3x+0x34>
    159c:	46 95       	lsr	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	a7 95       	ror	r26
    15a4:	f0 40       	sbci	r31, 0x00	; 0
    15a6:	53 95       	inc	r21
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__addsf3x+0x4e>
    15aa:	7e f4       	brtc	.+30     	; 0x15ca <__addsf3x+0x7c>
    15ac:	1f 16       	cp	r1, r31
    15ae:	ba 0b       	sbc	r27, r26
    15b0:	62 0b       	sbc	r22, r18
    15b2:	73 0b       	sbc	r23, r19
    15b4:	84 0b       	sbc	r24, r20
    15b6:	ba f0       	brmi	.+46     	; 0x15e6 <__addsf3x+0x98>
    15b8:	91 50       	subi	r25, 0x01	; 1
    15ba:	a1 f0       	breq	.+40     	; 0x15e4 <__addsf3x+0x96>
    15bc:	ff 0f       	add	r31, r31
    15be:	bb 1f       	adc	r27, r27
    15c0:	66 1f       	adc	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	c2 f7       	brpl	.-16     	; 0x15b8 <__addsf3x+0x6a>
    15c8:	0e c0       	rjmp	.+28     	; 0x15e6 <__addsf3x+0x98>
    15ca:	ba 0f       	add	r27, r26
    15cc:	62 1f       	adc	r22, r18
    15ce:	73 1f       	adc	r23, r19
    15d0:	84 1f       	adc	r24, r20
    15d2:	48 f4       	brcc	.+18     	; 0x15e6 <__addsf3x+0x98>
    15d4:	87 95       	ror	r24
    15d6:	77 95       	ror	r23
    15d8:	67 95       	ror	r22
    15da:	b7 95       	ror	r27
    15dc:	f7 95       	ror	r31
    15de:	9e 3f       	cpi	r25, 0xFE	; 254
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <__addsf3x+0x96>
    15e2:	b3 cf       	rjmp	.-154    	; 0x154a <__addsf3+0x1e>
    15e4:	93 95       	inc	r25
    15e6:	88 0f       	add	r24, r24
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <__addsf3x+0x9e>
    15ea:	99 27       	eor	r25, r25
    15ec:	ee 0f       	add	r30, r30
    15ee:	97 95       	ror	r25
    15f0:	87 95       	ror	r24
    15f2:	08 95       	ret

000015f4 <__fixsfsi>:
    15f4:	04 d0       	rcall	.+8      	; 0x15fe <__fixunssfsi>
    15f6:	68 94       	set
    15f8:	b1 11       	cpse	r27, r1
    15fa:	d9 c0       	rjmp	.+434    	; 0x17ae <__fp_szero>
    15fc:	08 95       	ret

000015fe <__fixunssfsi>:
    15fe:	bc d0       	rcall	.+376    	; 0x1778 <__fp_splitA>
    1600:	88 f0       	brcs	.+34     	; 0x1624 <__fixunssfsi+0x26>
    1602:	9f 57       	subi	r25, 0x7F	; 127
    1604:	90 f0       	brcs	.+36     	; 0x162a <__fixunssfsi+0x2c>
    1606:	b9 2f       	mov	r27, r25
    1608:	99 27       	eor	r25, r25
    160a:	b7 51       	subi	r27, 0x17	; 23
    160c:	a0 f0       	brcs	.+40     	; 0x1636 <__fixunssfsi+0x38>
    160e:	d1 f0       	breq	.+52     	; 0x1644 <__fixunssfsi+0x46>
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	1a f0       	brmi	.+6      	; 0x1620 <__fixunssfsi+0x22>
    161a:	ba 95       	dec	r27
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__fixunssfsi+0x12>
    161e:	12 c0       	rjmp	.+36     	; 0x1644 <__fixunssfsi+0x46>
    1620:	b1 30       	cpi	r27, 0x01	; 1
    1622:	81 f0       	breq	.+32     	; 0x1644 <__fixunssfsi+0x46>
    1624:	c3 d0       	rcall	.+390    	; 0x17ac <__fp_zero>
    1626:	b1 e0       	ldi	r27, 0x01	; 1
    1628:	08 95       	ret
    162a:	c0 c0       	rjmp	.+384    	; 0x17ac <__fp_zero>
    162c:	67 2f       	mov	r22, r23
    162e:	78 2f       	mov	r23, r24
    1630:	88 27       	eor	r24, r24
    1632:	b8 5f       	subi	r27, 0xF8	; 248
    1634:	39 f0       	breq	.+14     	; 0x1644 <__fixunssfsi+0x46>
    1636:	b9 3f       	cpi	r27, 0xF9	; 249
    1638:	cc f3       	brlt	.-14     	; 0x162c <__fixunssfsi+0x2e>
    163a:	86 95       	lsr	r24
    163c:	77 95       	ror	r23
    163e:	67 95       	ror	r22
    1640:	b3 95       	inc	r27
    1642:	d9 f7       	brne	.-10     	; 0x163a <__fixunssfsi+0x3c>
    1644:	3e f4       	brtc	.+14     	; 0x1654 <__fixunssfsi+0x56>
    1646:	90 95       	com	r25
    1648:	80 95       	com	r24
    164a:	70 95       	com	r23
    164c:	61 95       	neg	r22
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	8f 4f       	sbci	r24, 0xFF	; 255
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	08 95       	ret

00001656 <__floatunsisf>:
    1656:	e8 94       	clt
    1658:	09 c0       	rjmp	.+18     	; 0x166c <__floatsisf+0x12>

0000165a <__floatsisf>:
    165a:	97 fb       	bst	r25, 7
    165c:	3e f4       	brtc	.+14     	; 0x166c <__floatsisf+0x12>
    165e:	90 95       	com	r25
    1660:	80 95       	com	r24
    1662:	70 95       	com	r23
    1664:	61 95       	neg	r22
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	99 23       	and	r25, r25
    166e:	a9 f0       	breq	.+42     	; 0x169a <__floatsisf+0x40>
    1670:	f9 2f       	mov	r31, r25
    1672:	96 e9       	ldi	r25, 0x96	; 150
    1674:	bb 27       	eor	r27, r27
    1676:	93 95       	inc	r25
    1678:	f6 95       	lsr	r31
    167a:	87 95       	ror	r24
    167c:	77 95       	ror	r23
    167e:	67 95       	ror	r22
    1680:	b7 95       	ror	r27
    1682:	f1 11       	cpse	r31, r1
    1684:	f8 cf       	rjmp	.-16     	; 0x1676 <__floatsisf+0x1c>
    1686:	fa f4       	brpl	.+62     	; 0x16c6 <__floatsisf+0x6c>
    1688:	bb 0f       	add	r27, r27
    168a:	11 f4       	brne	.+4      	; 0x1690 <__floatsisf+0x36>
    168c:	60 ff       	sbrs	r22, 0
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <__floatsisf+0x6c>
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <__floatsisf+0x6c>
    169a:	88 23       	and	r24, r24
    169c:	11 f0       	breq	.+4      	; 0x16a2 <__floatsisf+0x48>
    169e:	96 e9       	ldi	r25, 0x96	; 150
    16a0:	11 c0       	rjmp	.+34     	; 0x16c4 <__floatsisf+0x6a>
    16a2:	77 23       	and	r23, r23
    16a4:	21 f0       	breq	.+8      	; 0x16ae <__floatsisf+0x54>
    16a6:	9e e8       	ldi	r25, 0x8E	; 142
    16a8:	87 2f       	mov	r24, r23
    16aa:	76 2f       	mov	r23, r22
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <__floatsisf+0x5e>
    16ae:	66 23       	and	r22, r22
    16b0:	71 f0       	breq	.+28     	; 0x16ce <__floatsisf+0x74>
    16b2:	96 e8       	ldi	r25, 0x86	; 134
    16b4:	86 2f       	mov	r24, r22
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	2a f0       	brmi	.+10     	; 0x16c6 <__floatsisf+0x6c>
    16bc:	9a 95       	dec	r25
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	da f7       	brpl	.-10     	; 0x16bc <__floatsisf+0x62>
    16c6:	88 0f       	add	r24, r24
    16c8:	96 95       	lsr	r25
    16ca:	87 95       	ror	r24
    16cc:	97 f9       	bld	r25, 7
    16ce:	08 95       	ret

000016d0 <__fp_cmp>:
    16d0:	99 0f       	add	r25, r25
    16d2:	00 08       	sbc	r0, r0
    16d4:	55 0f       	add	r21, r21
    16d6:	aa 0b       	sbc	r26, r26
    16d8:	e0 e8       	ldi	r30, 0x80	; 128
    16da:	fe ef       	ldi	r31, 0xFE	; 254
    16dc:	16 16       	cp	r1, r22
    16de:	17 06       	cpc	r1, r23
    16e0:	e8 07       	cpc	r30, r24
    16e2:	f9 07       	cpc	r31, r25
    16e4:	c0 f0       	brcs	.+48     	; 0x1716 <__fp_cmp+0x46>
    16e6:	12 16       	cp	r1, r18
    16e8:	13 06       	cpc	r1, r19
    16ea:	e4 07       	cpc	r30, r20
    16ec:	f5 07       	cpc	r31, r21
    16ee:	98 f0       	brcs	.+38     	; 0x1716 <__fp_cmp+0x46>
    16f0:	62 1b       	sub	r22, r18
    16f2:	73 0b       	sbc	r23, r19
    16f4:	84 0b       	sbc	r24, r20
    16f6:	95 0b       	sbc	r25, r21
    16f8:	39 f4       	brne	.+14     	; 0x1708 <__fp_cmp+0x38>
    16fa:	0a 26       	eor	r0, r26
    16fc:	61 f0       	breq	.+24     	; 0x1716 <__fp_cmp+0x46>
    16fe:	23 2b       	or	r18, r19
    1700:	24 2b       	or	r18, r20
    1702:	25 2b       	or	r18, r21
    1704:	21 f4       	brne	.+8      	; 0x170e <__fp_cmp+0x3e>
    1706:	08 95       	ret
    1708:	0a 26       	eor	r0, r26
    170a:	09 f4       	brne	.+2      	; 0x170e <__fp_cmp+0x3e>
    170c:	a1 40       	sbci	r26, 0x01	; 1
    170e:	a6 95       	lsr	r26
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	81 1d       	adc	r24, r1
    1714:	81 1d       	adc	r24, r1
    1716:	08 95       	ret

00001718 <__fp_inf>:
    1718:	97 f9       	bld	r25, 7
    171a:	9f 67       	ori	r25, 0x7F	; 127
    171c:	80 e8       	ldi	r24, 0x80	; 128
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	08 95       	ret

00001724 <__fp_nan>:
    1724:	9f ef       	ldi	r25, 0xFF	; 255
    1726:	80 ec       	ldi	r24, 0xC0	; 192
    1728:	08 95       	ret

0000172a <__fp_pscA>:
    172a:	00 24       	eor	r0, r0
    172c:	0a 94       	dec	r0
    172e:	16 16       	cp	r1, r22
    1730:	17 06       	cpc	r1, r23
    1732:	18 06       	cpc	r1, r24
    1734:	09 06       	cpc	r0, r25
    1736:	08 95       	ret

00001738 <__fp_pscB>:
    1738:	00 24       	eor	r0, r0
    173a:	0a 94       	dec	r0
    173c:	12 16       	cp	r1, r18
    173e:	13 06       	cpc	r1, r19
    1740:	14 06       	cpc	r1, r20
    1742:	05 06       	cpc	r0, r21
    1744:	08 95       	ret

00001746 <__fp_round>:
    1746:	09 2e       	mov	r0, r25
    1748:	03 94       	inc	r0
    174a:	00 0c       	add	r0, r0
    174c:	11 f4       	brne	.+4      	; 0x1752 <__fp_round+0xc>
    174e:	88 23       	and	r24, r24
    1750:	52 f0       	brmi	.+20     	; 0x1766 <__fp_round+0x20>
    1752:	bb 0f       	add	r27, r27
    1754:	40 f4       	brcc	.+16     	; 0x1766 <__fp_round+0x20>
    1756:	bf 2b       	or	r27, r31
    1758:	11 f4       	brne	.+4      	; 0x175e <__fp_round+0x18>
    175a:	60 ff       	sbrs	r22, 0
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__fp_round+0x20>
    175e:	6f 5f       	subi	r22, 0xFF	; 255
    1760:	7f 4f       	sbci	r23, 0xFF	; 255
    1762:	8f 4f       	sbci	r24, 0xFF	; 255
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	08 95       	ret

00001768 <__fp_split3>:
    1768:	57 fd       	sbrc	r21, 7
    176a:	90 58       	subi	r25, 0x80	; 128
    176c:	44 0f       	add	r20, r20
    176e:	55 1f       	adc	r21, r21
    1770:	59 f0       	breq	.+22     	; 0x1788 <__fp_splitA+0x10>
    1772:	5f 3f       	cpi	r21, 0xFF	; 255
    1774:	71 f0       	breq	.+28     	; 0x1792 <__fp_splitA+0x1a>
    1776:	47 95       	ror	r20

00001778 <__fp_splitA>:
    1778:	88 0f       	add	r24, r24
    177a:	97 fb       	bst	r25, 7
    177c:	99 1f       	adc	r25, r25
    177e:	61 f0       	breq	.+24     	; 0x1798 <__fp_splitA+0x20>
    1780:	9f 3f       	cpi	r25, 0xFF	; 255
    1782:	79 f0       	breq	.+30     	; 0x17a2 <__fp_splitA+0x2a>
    1784:	87 95       	ror	r24
    1786:	08 95       	ret
    1788:	12 16       	cp	r1, r18
    178a:	13 06       	cpc	r1, r19
    178c:	14 06       	cpc	r1, r20
    178e:	55 1f       	adc	r21, r21
    1790:	f2 cf       	rjmp	.-28     	; 0x1776 <__fp_split3+0xe>
    1792:	46 95       	lsr	r20
    1794:	f1 df       	rcall	.-30     	; 0x1778 <__fp_splitA>
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <__fp_splitA+0x30>
    1798:	16 16       	cp	r1, r22
    179a:	17 06       	cpc	r1, r23
    179c:	18 06       	cpc	r1, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	f1 cf       	rjmp	.-30     	; 0x1784 <__fp_splitA+0xc>
    17a2:	86 95       	lsr	r24
    17a4:	71 05       	cpc	r23, r1
    17a6:	61 05       	cpc	r22, r1
    17a8:	08 94       	sec
    17aa:	08 95       	ret

000017ac <__fp_zero>:
    17ac:	e8 94       	clt

000017ae <__fp_szero>:
    17ae:	bb 27       	eor	r27, r27
    17b0:	66 27       	eor	r22, r22
    17b2:	77 27       	eor	r23, r23
    17b4:	cb 01       	movw	r24, r22
    17b6:	97 f9       	bld	r25, 7
    17b8:	08 95       	ret

000017ba <__mulsf3>:
    17ba:	0b d0       	rcall	.+22     	; 0x17d2 <__mulsf3x>
    17bc:	c4 cf       	rjmp	.-120    	; 0x1746 <__fp_round>
    17be:	b5 df       	rcall	.-150    	; 0x172a <__fp_pscA>
    17c0:	28 f0       	brcs	.+10     	; 0x17cc <__mulsf3+0x12>
    17c2:	ba df       	rcall	.-140    	; 0x1738 <__fp_pscB>
    17c4:	18 f0       	brcs	.+6      	; 0x17cc <__mulsf3+0x12>
    17c6:	95 23       	and	r25, r21
    17c8:	09 f0       	breq	.+2      	; 0x17cc <__mulsf3+0x12>
    17ca:	a6 cf       	rjmp	.-180    	; 0x1718 <__fp_inf>
    17cc:	ab cf       	rjmp	.-170    	; 0x1724 <__fp_nan>
    17ce:	11 24       	eor	r1, r1
    17d0:	ee cf       	rjmp	.-36     	; 0x17ae <__fp_szero>

000017d2 <__mulsf3x>:
    17d2:	ca df       	rcall	.-108    	; 0x1768 <__fp_split3>
    17d4:	a0 f3       	brcs	.-24     	; 0x17be <__mulsf3+0x4>

000017d6 <__mulsf3_pse>:
    17d6:	95 9f       	mul	r25, r21
    17d8:	d1 f3       	breq	.-12     	; 0x17ce <__mulsf3+0x14>
    17da:	95 0f       	add	r25, r21
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	55 1f       	adc	r21, r21
    17e0:	62 9f       	mul	r22, r18
    17e2:	f0 01       	movw	r30, r0
    17e4:	72 9f       	mul	r23, r18
    17e6:	bb 27       	eor	r27, r27
    17e8:	f0 0d       	add	r31, r0
    17ea:	b1 1d       	adc	r27, r1
    17ec:	63 9f       	mul	r22, r19
    17ee:	aa 27       	eor	r26, r26
    17f0:	f0 0d       	add	r31, r0
    17f2:	b1 1d       	adc	r27, r1
    17f4:	aa 1f       	adc	r26, r26
    17f6:	64 9f       	mul	r22, r20
    17f8:	66 27       	eor	r22, r22
    17fa:	b0 0d       	add	r27, r0
    17fc:	a1 1d       	adc	r26, r1
    17fe:	66 1f       	adc	r22, r22
    1800:	82 9f       	mul	r24, r18
    1802:	22 27       	eor	r18, r18
    1804:	b0 0d       	add	r27, r0
    1806:	a1 1d       	adc	r26, r1
    1808:	62 1f       	adc	r22, r18
    180a:	73 9f       	mul	r23, r19
    180c:	b0 0d       	add	r27, r0
    180e:	a1 1d       	adc	r26, r1
    1810:	62 1f       	adc	r22, r18
    1812:	83 9f       	mul	r24, r19
    1814:	a0 0d       	add	r26, r0
    1816:	61 1d       	adc	r22, r1
    1818:	22 1f       	adc	r18, r18
    181a:	74 9f       	mul	r23, r20
    181c:	33 27       	eor	r19, r19
    181e:	a0 0d       	add	r26, r0
    1820:	61 1d       	adc	r22, r1
    1822:	23 1f       	adc	r18, r19
    1824:	84 9f       	mul	r24, r20
    1826:	60 0d       	add	r22, r0
    1828:	21 1d       	adc	r18, r1
    182a:	82 2f       	mov	r24, r18
    182c:	76 2f       	mov	r23, r22
    182e:	6a 2f       	mov	r22, r26
    1830:	11 24       	eor	r1, r1
    1832:	9f 57       	subi	r25, 0x7F	; 127
    1834:	50 40       	sbci	r21, 0x00	; 0
    1836:	8a f0       	brmi	.+34     	; 0x185a <__mulsf3_pse+0x84>
    1838:	e1 f0       	breq	.+56     	; 0x1872 <__mulsf3_pse+0x9c>
    183a:	88 23       	and	r24, r24
    183c:	4a f0       	brmi	.+18     	; 0x1850 <__mulsf3_pse+0x7a>
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	bb 1f       	adc	r27, r27
    1844:	66 1f       	adc	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	91 50       	subi	r25, 0x01	; 1
    184c:	50 40       	sbci	r21, 0x00	; 0
    184e:	a9 f7       	brne	.-22     	; 0x183a <__mulsf3_pse+0x64>
    1850:	9e 3f       	cpi	r25, 0xFE	; 254
    1852:	51 05       	cpc	r21, r1
    1854:	70 f0       	brcs	.+28     	; 0x1872 <__mulsf3_pse+0x9c>
    1856:	60 cf       	rjmp	.-320    	; 0x1718 <__fp_inf>
    1858:	aa cf       	rjmp	.-172    	; 0x17ae <__fp_szero>
    185a:	5f 3f       	cpi	r21, 0xFF	; 255
    185c:	ec f3       	brlt	.-6      	; 0x1858 <__mulsf3_pse+0x82>
    185e:	98 3e       	cpi	r25, 0xE8	; 232
    1860:	dc f3       	brlt	.-10     	; 0x1858 <__mulsf3_pse+0x82>
    1862:	86 95       	lsr	r24
    1864:	77 95       	ror	r23
    1866:	67 95       	ror	r22
    1868:	b7 95       	ror	r27
    186a:	f7 95       	ror	r31
    186c:	e7 95       	ror	r30
    186e:	9f 5f       	subi	r25, 0xFF	; 255
    1870:	c1 f7       	brne	.-16     	; 0x1862 <__mulsf3_pse+0x8c>
    1872:	fe 2b       	or	r31, r30
    1874:	88 0f       	add	r24, r24
    1876:	91 1d       	adc	r25, r1
    1878:	96 95       	lsr	r25
    187a:	87 95       	ror	r24
    187c:	97 f9       	bld	r25, 7
    187e:	08 95       	ret

00001880 <__unordsf2>:
    1880:	27 df       	rcall	.-434    	; 0x16d0 <__fp_cmp>
    1882:	88 0b       	sbc	r24, r24
    1884:	99 0b       	sbc	r25, r25
    1886:	08 95       	ret

00001888 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1888:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    188a:	91 8d       	ldd	r25, Z+25	; 0x19
    188c:	22 8d       	ldd	r18, Z+26	; 0x1a
    188e:	89 2f       	mov	r24, r25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	80 5c       	subi	r24, 0xC0	; 192
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	82 1b       	sub	r24, r18
    1898:	91 09       	sbc	r25, r1
}
    189a:	8f 73       	andi	r24, 0x3F	; 63
    189c:	99 27       	eor	r25, r25
    189e:	08 95       	ret

000018a0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    18a0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    18a2:	91 8d       	ldd	r25, Z+25	; 0x19
    18a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    18a6:	98 17       	cp	r25, r24
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    18aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ac:	e8 0f       	add	r30, r24
    18ae:	f1 1d       	adc	r31, r1
    18b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18ba:	08 95       	ret

000018bc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    18bc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18be:	91 8d       	ldd	r25, Z+25	; 0x19
    18c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18c2:	98 17       	cp	r25, r24
    18c4:	61 f0       	breq	.+24     	; 0x18de <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    18c8:	df 01       	movw	r26, r30
    18ca:	a8 0f       	add	r26, r24
    18cc:	b1 1d       	adc	r27, r1
    18ce:	5d 96       	adiw	r26, 0x1d	; 29
    18d0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    18d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    18d4:	9f 5f       	subi	r25, 0xFF	; 255
    18d6:	9f 73       	andi	r25, 0x3F	; 63
    18d8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    18e2:	08 95       	ret

000018e4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    18e4:	fc 01       	movw	r30, r24
    18e6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    18e8:	44 8d       	ldd	r20, Z+28	; 0x1c
    18ea:	25 2f       	mov	r18, r21
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	84 2f       	mov	r24, r20
    18f0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    18f2:	82 1b       	sub	r24, r18
    18f4:	93 0b       	sbc	r25, r19
    18f6:	54 17       	cp	r21, r20
    18f8:	10 f0       	brcs	.+4      	; 0x18fe <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    18fa:	cf 96       	adiw	r24, 0x3f	; 63
    18fc:	08 95       	ret
  return tail - head - 1;
    18fe:	01 97       	sbiw	r24, 0x01	; 1
}
    1900:	08 95       	ret

00001902 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1902:	8e e0       	ldi	r24, 0x0E	; 14
    1904:	9e e0       	ldi	r25, 0x0E	; 14
    1906:	89 2b       	or	r24, r25
    1908:	39 f0       	breq	.+14     	; 0x1918 <_Z14serialEventRunv+0x16>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	89 2b       	or	r24, r25
    1910:	19 f0       	breq	.+6      	; 0x1918 <_Z14serialEventRunv+0x16>
    1912:	84 d1       	rcall	.+776    	; 0x1c1c <_Z17Serial0_availablev>
    1914:	81 11       	cpse	r24, r1
    1916:	25 c0       	rjmp	.+74     	; 0x1962 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	89 2b       	or	r24, r25
    191e:	41 f0       	breq	.+16     	; 0x1930 <_Z14serialEventRunv+0x2e>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	89 2b       	or	r24, r25
    1926:	21 f0       	breq	.+8      	; 0x1930 <_Z14serialEventRunv+0x2e>
    1928:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    192c:	81 11       	cpse	r24, r1
    192e:	1c c0       	rjmp	.+56     	; 0x1968 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	89 2b       	or	r24, r25
    1936:	41 f0       	breq	.+16     	; 0x1948 <_Z14serialEventRunv+0x46>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	89 2b       	or	r24, r25
    193e:	21 f0       	breq	.+8      	; 0x1948 <_Z14serialEventRunv+0x46>
    1940:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1944:	81 11       	cpse	r24, r1
    1946:	13 c0       	rjmp	.+38     	; 0x196e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	89 2b       	or	r24, r25
    194e:	a1 f0       	breq	.+40     	; 0x1978 <_Z14serialEventRunv+0x76>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	89 2b       	or	r24, r25
    1956:	81 f0       	breq	.+32     	; 0x1978 <_Z14serialEventRunv+0x76>
    1958:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    195c:	81 11       	cpse	r24, r1
    195e:	0a c0       	rjmp	.+20     	; 0x1974 <_Z14serialEventRunv+0x72>
    1960:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1962:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1966:	d8 cf       	rjmp	.-80     	; 0x1918 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1968:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    196c:	e1 cf       	rjmp	.-62     	; 0x1930 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    196e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1972:	ea cf       	rjmp	.-44     	; 0x1948 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1974:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1978:	08 95       	ret

0000197a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    197a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    197c:	84 8d       	ldd	r24, Z+28	; 0x1c
    197e:	df 01       	movw	r26, r30
    1980:	a8 0f       	add	r26, r24
    1982:	b1 1d       	adc	r27, r1
    1984:	a3 5a       	subi	r26, 0xA3	; 163
    1986:	bf 4f       	sbci	r27, 0xFF	; 255
    1988:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    198a:	84 8d       	ldd	r24, Z+28	; 0x1c
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	8f 73       	andi	r24, 0x3F	; 63
    1992:	99 27       	eor	r25, r25
    1994:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1996:	a6 89       	ldd	r26, Z+22	; 0x16
    1998:	b7 89       	ldd	r27, Z+23	; 0x17
    199a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    199c:	a0 89       	ldd	r26, Z+16	; 0x10
    199e:	b1 89       	ldd	r27, Z+17	; 0x11
    19a0:	8c 91       	ld	r24, X
    19a2:	83 70       	andi	r24, 0x03	; 3
    19a4:	80 64       	ori	r24, 0x40	; 64
    19a6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    19a8:	93 8d       	ldd	r25, Z+27	; 0x1b
    19aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    19ac:	98 13       	cpse	r25, r24
    19ae:	06 c0       	rjmp	.+12     	; 0x19bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    19b0:	02 88       	ldd	r0, Z+18	; 0x12
    19b2:	f3 89       	ldd	r31, Z+19	; 0x13
    19b4:	e0 2d       	mov	r30, r0
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 7d       	andi	r24, 0xDF	; 223
    19ba:	80 83       	st	Z, r24
    19bc:	08 95       	ret

000019be <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
  _written = true;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19d4:	98 13       	cpse	r25, r24
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <_ZN14HardwareSerial5writeEh+0x24>
    19d8:	e8 89       	ldd	r30, Y+16	; 0x10
    19da:	f9 89       	ldd	r31, Y+17	; 0x11
    19dc:	80 81       	ld	r24, Z
    19de:	85 fd       	sbrc	r24, 5
    19e0:	25 c0       	rjmp	.+74     	; 0x1a2c <_ZN14HardwareSerial5writeEh+0x6e>
    19e2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19e4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19e6:	10 e0       	ldi	r17, 0x00	; 0
    19e8:	0f 5f       	subi	r16, 0xFF	; 255
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	0f 73       	andi	r16, 0x3F	; 63
    19ee:	11 27       	eor	r17, r17
    19f0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19f4:	e8 12       	cpse	r14, r24
    19f6:	0b c0       	rjmp	.+22     	; 0x1a0e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	07 fc       	sbrc	r0, 7
    19fc:	fa cf       	rjmp	.-12     	; 0x19f2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    19fe:	e8 89       	ldd	r30, Y+16	; 0x10
    1a00:	f9 89       	ldd	r31, Y+17	; 0x11
    1a02:	80 81       	ld	r24, Z
    1a04:	85 ff       	sbrs	r24, 5
    1a06:	f5 cf       	rjmp	.-22     	; 0x19f2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a08:	ce 01       	movw	r24, r28
    1a0a:	b7 df       	rcall	.-146    	; 0x197a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a0c:	f2 cf       	rjmp	.-28     	; 0x19f2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a10:	fe 01       	movw	r30, r28
    1a12:	e8 0f       	add	r30, r24
    1a14:	f1 1d       	adc	r31, r1
    1a16:	e3 5a       	subi	r30, 0xA3	; 163
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a1c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a1e:	f8 94       	cli
    _tx_buffer_head = i;
    1a20:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1a22:	ea 89       	ldd	r30, Y+18	; 0x12
    1a24:	fb 89       	ldd	r31, Y+19	; 0x13
    1a26:	80 81       	ld	r24, Z
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	0a c0       	rjmp	.+20     	; 0x1a40 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a2c:	9f b7       	in	r25, 0x3f	; 63
    1a2e:	f8 94       	cli
      *_udr = c;
    1a30:	ee 89       	ldd	r30, Y+22	; 0x16
    1a32:	ff 89       	ldd	r31, Y+23	; 0x17
    1a34:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a36:	e8 89       	ldd	r30, Y+16	; 0x10
    1a38:	f9 89       	ldd	r31, Y+17	; 0x11
    1a3a:	80 81       	ld	r24, Z
    1a3c:	83 70       	andi	r24, 0x03	; 3
    1a3e:	80 64       	ori	r24, 0x40	; 64
    1a40:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a42:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	08 95       	ret

00001a56 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a5e:	88 23       	and	r24, r24
    1a60:	c1 f0       	breq	.+48     	; 0x1a92 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a62:	ea 89       	ldd	r30, Y+18	; 0x12
    1a64:	fb 89       	ldd	r31, Y+19	; 0x13
    1a66:	80 81       	ld	r24, Z
    1a68:	85 fd       	sbrc	r24, 5
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <_ZN14HardwareSerial5flushEv+0x20>
    1a6c:	a8 89       	ldd	r26, Y+16	; 0x10
    1a6e:	b9 89       	ldd	r27, Y+17	; 0x11
    1a70:	8c 91       	ld	r24, X
    1a72:	86 fd       	sbrc	r24, 6
    1a74:	0e c0       	rjmp	.+28     	; 0x1a92 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	07 fc       	sbrc	r0, 7
    1a7a:	f5 cf       	rjmp	.-22     	; 0x1a66 <_ZN14HardwareSerial5flushEv+0x10>
    1a7c:	80 81       	ld	r24, Z
    1a7e:	85 ff       	sbrs	r24, 5
    1a80:	f2 cf       	rjmp	.-28     	; 0x1a66 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a82:	a8 89       	ldd	r26, Y+16	; 0x10
    1a84:	b9 89       	ldd	r27, Y+17	; 0x11
    1a86:	8c 91       	ld	r24, X
    1a88:	85 ff       	sbrs	r24, 5
    1a8a:	ed cf       	rjmp	.-38     	; 0x1a66 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	75 df       	rcall	.-278    	; 0x197a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a90:	e8 cf       	rjmp	.-48     	; 0x1a62 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a98:	cf 92       	push	r12
    1a9a:	df 92       	push	r13
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	6a 01       	movw	r12, r20
    1aaa:	7b 01       	movw	r14, r22
    1aac:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1aae:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ab6:	41 15       	cp	r20, r1
    1ab8:	51 4e       	sbci	r21, 0xE1	; 225
    1aba:	61 05       	cpc	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	a9 f0       	breq	.+42     	; 0x1aea <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	79 e0       	ldi	r23, 0x09	; 9
    1ac4:	8d e3       	ldi	r24, 0x3D	; 61
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a7 01       	movw	r20, r14
    1aca:	96 01       	movw	r18, r12
    1acc:	f6 d2       	rcall	.+1516   	; 0x20ba <__udivmodsi4>
    1ace:	da 01       	movw	r26, r20
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	a1 09       	sbc	r26, r1
    1ad6:	b1 09       	sbc	r27, r1
    1ad8:	b6 95       	lsr	r27
    1ada:	a7 95       	ror	r26
    1adc:	97 95       	ror	r25
    1ade:	87 95       	ror	r24
    1ae0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ae2:	21 15       	cp	r18, r1
    1ae4:	80 e1       	ldi	r24, 0x10	; 16
    1ae6:	38 07       	cpc	r19, r24
    1ae8:	a0 f0       	brcs	.+40     	; 0x1b12 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    1aea:	e8 89       	ldd	r30, Y+16	; 0x10
    1aec:	f9 89       	ldd	r31, Y+17	; 0x11
    1aee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1af0:	60 e8       	ldi	r22, 0x80	; 128
    1af2:	74 e8       	ldi	r23, 0x84	; 132
    1af4:	8e e1       	ldi	r24, 0x1E	; 30
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a7 01       	movw	r20, r14
    1afa:	96 01       	movw	r18, r12
    1afc:	de d2       	rcall	.+1468   	; 0x20ba <__udivmodsi4>
    1afe:	da 01       	movw	r26, r20
    1b00:	c9 01       	movw	r24, r18
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	a1 09       	sbc	r26, r1
    1b06:	b1 09       	sbc	r27, r1
    1b08:	b6 95       	lsr	r27
    1b0a:	a7 95       	ror	r26
    1b0c:	97 95       	ror	r25
    1b0e:	87 95       	ror	r24
    1b10:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1b12:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b14:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b16:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b18:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b1c:	20 83       	st	Z, r18

  _written = false;
    1b1e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1b20:	ec 89       	ldd	r30, Y+20	; 0x14
    1b22:	fd 89       	ldd	r31, Y+21	; 0x15
    1b24:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1b26:	ea 89       	ldd	r30, Y+18	; 0x12
    1b28:	fb 89       	ldd	r31, Y+19	; 0x13
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 61       	ori	r24, 0x10	; 16
    1b2e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b30:	ea 89       	ldd	r30, Y+18	; 0x12
    1b32:	fb 89       	ldd	r31, Y+19	; 0x13
    1b34:	80 81       	ld	r24, Z
    1b36:	88 60       	ori	r24, 0x08	; 8
    1b38:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b3a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b3c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b44:	ea 89       	ldd	r30, Y+18	; 0x12
    1b46:	fb 89       	ldd	r31, Y+19	; 0x13
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7d       	andi	r24, 0xDF	; 223
    1b4c:	80 83       	st	Z, r24
}
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	ff 90       	pop	r15
    1b56:	ef 90       	pop	r14
    1b58:	df 90       	pop	r13
    1b5a:	cf 90       	pop	r12
    1b5c:	08 95       	ret

00001b5e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	0b b6       	in	r0, 0x3b	; 59
    1b6a:	0f 92       	push	r0
    1b6c:	2f 93       	push	r18
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b76:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <Serial+0x10>
    1b7a:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <Serial+0x11>
    1b7e:	80 81       	ld	r24, Z
    1b80:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <Serial+0x16>
    1b84:	f0 91 7f 03 	lds	r31, 0x037F	; 0x80037f <Serial+0x17>
    1b88:	82 fd       	sbrc	r24, 2
    1b8a:	12 c0       	rjmp	.+36     	; 0x1bb0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b8c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b8e:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <Serial+0x19>
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b96:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <Serial+0x1a>
    1b9a:	82 17       	cp	r24, r18
    1b9c:	51 f0       	breq	.+20     	; 0x1bb2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1b9e:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <Serial+0x19>
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	e8 59       	subi	r30, 0x98	; 152
    1ba6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ba8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1baa:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <Serial+0x19>
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1bb0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	2f 91       	pop	r18
    1bbc:	0f 90       	pop	r0
    1bbe:	0b be       	out	0x3b, r0	; 59
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1bca:	1f 92       	push	r1
    1bcc:	0f 92       	push	r0
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	0f 92       	push	r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	0b b6       	in	r0, 0x3b	; 59
    1bd6:	0f 92       	push	r0
    1bd8:	2f 93       	push	r18
    1bda:	3f 93       	push	r19
    1bdc:	4f 93       	push	r20
    1bde:	5f 93       	push	r21
    1be0:	6f 93       	push	r22
    1be2:	7f 93       	push	r23
    1be4:	8f 93       	push	r24
    1be6:	9f 93       	push	r25
    1be8:	af 93       	push	r26
    1bea:	bf 93       	push	r27
    1bec:	ef 93       	push	r30
    1bee:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1bf0:	88 e6       	ldi	r24, 0x68	; 104
    1bf2:	93 e0       	ldi	r25, 0x03	; 3
    1bf4:	c2 de       	rcall	.-636    	; 0x197a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1bf6:	ff 91       	pop	r31
    1bf8:	ef 91       	pop	r30
    1bfa:	bf 91       	pop	r27
    1bfc:	af 91       	pop	r26
    1bfe:	9f 91       	pop	r25
    1c00:	8f 91       	pop	r24
    1c02:	7f 91       	pop	r23
    1c04:	6f 91       	pop	r22
    1c06:	5f 91       	pop	r21
    1c08:	4f 91       	pop	r20
    1c0a:	3f 91       	pop	r19
    1c0c:	2f 91       	pop	r18
    1c0e:	0f 90       	pop	r0
    1c10:	0b be       	out	0x3b, r0	; 59
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1c1c:	88 e6       	ldi	r24, 0x68	; 104
    1c1e:	93 e0       	ldi	r25, 0x03	; 3
    1c20:	33 de       	rcall	.-922    	; 0x1888 <_ZN14HardwareSerial9availableEv>
    1c22:	21 e0       	ldi	r18, 0x01	; 1
    1c24:	89 2b       	or	r24, r25
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <_Z17Serial0_availablev+0xe>
    1c28:	20 e0       	ldi	r18, 0x00	; 0
}
    1c2a:	82 2f       	mov	r24, r18
    1c2c:	08 95       	ret

00001c2e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1c2e:	e8 e6       	ldi	r30, 0x68	; 104
    1c30:	f3 e0       	ldi	r31, 0x03	; 3
    1c32:	13 82       	std	Z+3, r1	; 0x03
    1c34:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1c36:	88 ee       	ldi	r24, 0xE8	; 232
    1c38:	93 e0       	ldi	r25, 0x03	; 3
    1c3a:	a0 e0       	ldi	r26, 0x00	; 0
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	84 83       	std	Z+4, r24	; 0x04
    1c40:	95 83       	std	Z+5, r25	; 0x05
    1c42:	a6 83       	std	Z+6, r26	; 0x06
    1c44:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c46:	82 e6       	ldi	r24, 0x62	; 98
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
    1c4e:	85 ec       	ldi	r24, 0xC5	; 197
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	95 87       	std	Z+13, r25	; 0x0d
    1c54:	84 87       	std	Z+12, r24	; 0x0c
    1c56:	84 ec       	ldi	r24, 0xC4	; 196
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	97 87       	std	Z+15, r25	; 0x0f
    1c5c:	86 87       	std	Z+14, r24	; 0x0e
    1c5e:	80 ec       	ldi	r24, 0xC0	; 192
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	91 8b       	std	Z+17, r25	; 0x11
    1c64:	80 8b       	std	Z+16, r24	; 0x10
    1c66:	81 ec       	ldi	r24, 0xC1	; 193
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	93 8b       	std	Z+19, r25	; 0x13
    1c6c:	82 8b       	std	Z+18, r24	; 0x12
    1c6e:	82 ec       	ldi	r24, 0xC2	; 194
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	95 8b       	std	Z+21, r25	; 0x15
    1c74:	84 8b       	std	Z+20, r24	; 0x14
    1c76:	86 ec       	ldi	r24, 0xC6	; 198
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	97 8b       	std	Z+23, r25	; 0x17
    1c7c:	86 8b       	std	Z+22, r24	; 0x16
    1c7e:	11 8e       	std	Z+25, r1	; 0x19
    1c80:	12 8e       	std	Z+26, r1	; 0x1a
    1c82:	13 8e       	std	Z+27, r1	; 0x1b
    1c84:	14 8e       	std	Z+28, r1	; 0x1c
    1c86:	08 95       	ret

00001c88 <initVariant>:
    1c88:	08 95       	ret

00001c8a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1c8a:	f5 d0       	rcall	.+490    	; 0x1e76 <init>

	initVariant();
    1c8c:	fd df       	rcall	.-6      	; 0x1c88 <initVariant>
    1c8e:	0e 94 4a 01 	call	0x294	; 0x294 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c92:	c1 e8       	ldi	r28, 0x81	; 129
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c94:	dc e0       	ldi	r29, 0x0C	; 12
    1c96:	0e 94 d6 01 	call	0x3ac	; 0x3ac <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c9a:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    1c9c:	e1 f3       	breq	.-8      	; 0x1c96 <main+0xc>
    1c9e:	31 de       	rcall	.-926    	; 0x1902 <_Z14serialEventRunv>
    1ca0:	fa cf       	rjmp	.-12     	; 0x1c96 <main+0xc>

00001ca2 <_ZdlPv>:
    1ca2:	e9 c2       	rjmp	.+1490   	; 0x2276 <free>

00001ca4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	6c 01       	movw	r12, r24
    1cb6:	7a 01       	movw	r14, r20
    1cb8:	8b 01       	movw	r16, r22
  size_t n = 0;
    1cba:	c0 e0       	ldi	r28, 0x00	; 0
    1cbc:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1cbe:	ce 15       	cp	r28, r14
    1cc0:	df 05       	cpc	r29, r15
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    1cc4:	d8 01       	movw	r26, r16
    1cc6:	6d 91       	ld	r22, X+
    1cc8:	8d 01       	movw	r16, r26
    1cca:	d6 01       	movw	r26, r12
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	f0 81       	ld	r31, Z
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	19 95       	eicall
    1cda:	89 2b       	or	r24, r25
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <_ZN5Print5writeEPKhj+0x3e>
    1cde:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1ce0:	ee cf       	rjmp	.-36     	; 0x1cbe <_ZN5Print5writeEPKhj+0x1a>
    1ce2:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	08 95       	ret

00001cf8 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1cf8:	1f 92       	push	r1
    1cfa:	0f 92       	push	r0
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	0f 92       	push	r0
    1d00:	11 24       	eor	r1, r1
    1d02:	2f 93       	push	r18
    1d04:	3f 93       	push	r19
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1d0e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <timer0_millis>
    1d12:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <timer0_millis+0x1>
    1d16:	a0 91 08 04 	lds	r26, 0x0408	; 0x800408 <timer0_millis+0x2>
    1d1a:	b0 91 09 04 	lds	r27, 0x0409	; 0x800409 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1d1e:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1d22:	23 e0       	ldi	r18, 0x03	; 3
    1d24:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1d26:	2d 37       	cpi	r18, 0x7D	; 125
    1d28:	20 f4       	brcc	.+8      	; 0x1d32 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	b1 1d       	adc	r27, r1
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1d32:	26 e8       	ldi	r18, 0x86	; 134
    1d34:	23 0f       	add	r18, r19
		m += 1;
    1d36:	02 96       	adiw	r24, 0x02	; 2
    1d38:	a1 1d       	adc	r26, r1
    1d3a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1d3c:	20 93 05 04 	sts	0x0405, r18	; 0x800405 <timer0_fract>
	timer0_millis = m;
    1d40:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <timer0_millis>
    1d44:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <timer0_millis+0x1>
    1d48:	a0 93 08 04 	sts	0x0408, r26	; 0x800408 <timer0_millis+0x2>
    1d4c:	b0 93 09 04 	sts	0x0409, r27	; 0x800409 <timer0_millis+0x3>
	timer0_overflow_count++;
    1d50:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <timer0_overflow_count>
    1d54:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <timer0_overflow_count+0x1>
    1d58:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <timer0_overflow_count+0x2>
    1d5c:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <timer0_overflow_count+0x3>
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	a1 1d       	adc	r26, r1
    1d64:	b1 1d       	adc	r27, r1
    1d66:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <timer0_overflow_count>
    1d6a:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <timer0_overflow_count+0x1>
    1d6e:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <timer0_overflow_count+0x2>
    1d72:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <timer0_overflow_count+0x3>
}
    1d76:	bf 91       	pop	r27
    1d78:	af 91       	pop	r26
    1d7a:	9f 91       	pop	r25
    1d7c:	8f 91       	pop	r24
    1d7e:	3f 91       	pop	r19
    1d80:	2f 91       	pop	r18
    1d82:	0f 90       	pop	r0
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	0f 90       	pop	r0
    1d88:	1f 90       	pop	r1
    1d8a:	18 95       	reti

00001d8c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1d8c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1d8e:	f8 94       	cli
	m = timer0_millis;
    1d90:	60 91 06 04 	lds	r22, 0x0406	; 0x800406 <timer0_millis>
    1d94:	70 91 07 04 	lds	r23, 0x0407	; 0x800407 <timer0_millis+0x1>
    1d98:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <timer0_millis+0x2>
    1d9c:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <timer0_millis+0x3>
	SREG = oldSREG;
    1da0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1da2:	08 95       	ret

00001da4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1da4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1da6:	f8 94       	cli
	m = timer0_overflow_count;
    1da8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <timer0_overflow_count>
    1dac:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <timer0_overflow_count+0x1>
    1db0:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <timer0_overflow_count+0x2>
    1db4:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1db8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1dba:	a8 9b       	sbis	0x15, 0	; 21
    1dbc:	05 c0       	rjmp	.+10     	; 0x1dc8 <micros+0x24>
    1dbe:	2f 3f       	cpi	r18, 0xFF	; 255
    1dc0:	19 f0       	breq	.+6      	; 0x1dc8 <micros+0x24>
		m++;
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	a1 1d       	adc	r26, r1
    1dc6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1dc8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1dca:	ba 2f       	mov	r27, r26
    1dcc:	a9 2f       	mov	r26, r25
    1dce:	98 2f       	mov	r25, r24
    1dd0:	88 27       	eor	r24, r24
    1dd2:	82 0f       	add	r24, r18
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	b1 1d       	adc	r27, r1
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	42 e0       	ldi	r20, 0x02	; 2
    1de0:	66 0f       	add	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	4a 95       	dec	r20
    1dea:	d1 f7       	brne	.-12     	; 0x1de0 <micros+0x3c>
}
    1dec:	08 95       	ret

00001dee <delay>:

void delay(unsigned long ms)
{
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	6b 01       	movw	r12, r22
    1e00:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1e02:	d0 df       	rcall	.-96     	; 0x1da4 <micros>
    1e04:	4b 01       	movw	r8, r22
    1e06:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1e08:	c1 14       	cp	r12, r1
    1e0a:	d1 04       	cpc	r13, r1
    1e0c:	e1 04       	cpc	r14, r1
    1e0e:	f1 04       	cpc	r15, r1
		yield();
    1e10:	f1 f0       	breq	.+60     	; 0x1e4e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1e12:	52 d1       	rcall	.+676    	; 0x20b8 <yield>
    1e14:	c7 df       	rcall	.-114    	; 0x1da4 <micros>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	88 19       	sub	r24, r8
    1e1c:	99 09       	sbc	r25, r9
    1e1e:	aa 09       	sbc	r26, r10
    1e20:	bb 09       	sbc	r27, r11
    1e22:	88 3e       	cpi	r24, 0xE8	; 232
    1e24:	93 40       	sbci	r25, 0x03	; 3
    1e26:	a1 05       	cpc	r26, r1
    1e28:	b1 05       	cpc	r27, r1
    1e2a:	70 f3       	brcs	.-36     	; 0x1e08 <delay+0x1a>
			ms--;
    1e2c:	21 e0       	ldi	r18, 0x01	; 1
    1e2e:	c2 1a       	sub	r12, r18
    1e30:	d1 08       	sbc	r13, r1
    1e32:	e1 08       	sbc	r14, r1
    1e34:	f1 08       	sbc	r15, r1
			start += 1000;
    1e36:	88 ee       	ldi	r24, 0xE8	; 232
    1e38:	88 0e       	add	r8, r24
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	98 1e       	adc	r9, r24
    1e3e:	a1 1c       	adc	r10, r1
    1e40:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1e42:	c1 14       	cp	r12, r1
    1e44:	d1 04       	cpc	r13, r1
    1e46:	e1 04       	cpc	r14, r1
    1e48:	f1 04       	cpc	r15, r1
    1e4a:	21 f7       	brne	.-56     	; 0x1e14 <delay+0x26>
    1e4c:	dd cf       	rjmp	.-70     	; 0x1e08 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	bf 90       	pop	r11
    1e58:	af 90       	pop	r10
    1e5a:	9f 90       	pop	r9
    1e5c:	8f 90       	pop	r8
    1e5e:	08 95       	ret

00001e60 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	91 05       	cpc	r25, r1
    1e64:	38 f0       	brcs	.+14     	; 0x1e74 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1e6e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <delayMicroseconds+0x10>
    1e74:	08 95       	ret

00001e76 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1e76:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1e78:	84 b5       	in	r24, 0x24	; 36
    1e7a:	82 60       	ori	r24, 0x02	; 2
    1e7c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1e7e:	84 b5       	in	r24, 0x24	; 36
    1e80:	81 60       	ori	r24, 0x01	; 1
    1e82:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1e84:	85 b5       	in	r24, 0x25	; 37
    1e86:	82 60       	ori	r24, 0x02	; 2
    1e88:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1e8a:	85 b5       	in	r24, 0x25	; 37
    1e8c:	81 60       	ori	r24, 0x01	; 1
    1e8e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1e90:	ee e6       	ldi	r30, 0x6E	; 110
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	81 60       	ori	r24, 0x01	; 1
    1e98:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1e9a:	e1 e8       	ldi	r30, 0x81	; 129
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1ea0:	80 81       	ld	r24, Z
    1ea2:	82 60       	ori	r24, 0x02	; 2
    1ea4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1ea6:	80 81       	ld	r24, Z
    1ea8:	81 60       	ori	r24, 0x01	; 1
    1eaa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1eac:	e0 e8       	ldi	r30, 0x80	; 128
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1eb6:	e1 eb       	ldi	r30, 0xB1	; 177
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	84 60       	ori	r24, 0x04	; 4
    1ebe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ec0:	e0 eb       	ldi	r30, 0xB0	; 176
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	81 60       	ori	r24, 0x01	; 1
    1ec8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1eca:	e1 e9       	ldi	r30, 0x91	; 145
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	82 60       	ori	r24, 0x02	; 2
    1ed2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 60       	ori	r24, 0x01	; 1
    1ed8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1eda:	e0 e9       	ldi	r30, 0x90	; 144
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	81 60       	ori	r24, 0x01	; 1
    1ee2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1ee4:	e1 ea       	ldi	r30, 0xA1	; 161
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1eee:	80 81       	ld	r24, Z
    1ef0:	81 60       	ori	r24, 0x01	; 1
    1ef2:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1ef4:	e0 ea       	ldi	r30, 0xA0	; 160
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	81 60       	ori	r24, 0x01	; 1
    1efc:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1efe:	e1 e2       	ldi	r30, 0x21	; 33
    1f00:	f1 e0       	ldi	r31, 0x01	; 1
    1f02:	80 81       	ld	r24, Z
    1f04:	82 60       	ori	r24, 0x02	; 2
    1f06:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1f08:	80 81       	ld	r24, Z
    1f0a:	81 60       	ori	r24, 0x01	; 1
    1f0c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1f0e:	e0 e2       	ldi	r30, 0x20	; 32
    1f10:	f1 e0       	ldi	r31, 0x01	; 1
    1f12:	80 81       	ld	r24, Z
    1f14:	81 60       	ori	r24, 0x01	; 1
    1f16:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1f18:	ea e7       	ldi	r30, 0x7A	; 122
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	84 60       	ori	r24, 0x04	; 4
    1f20:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1f22:	80 81       	ld	r24, Z
    1f24:	82 60       	ori	r24, 0x02	; 2
    1f26:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1f28:	80 81       	ld	r24, Z
    1f2a:	81 60       	ori	r24, 0x01	; 1
    1f2c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 68       	ori	r24, 0x80	; 128
    1f32:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1f34:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    1f38:	08 95       	ret

00001f3a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	31 97       	sbiw	r30, 0x01	; 1
    1f40:	e2 31       	cpi	r30, 0x12	; 18
    1f42:	f1 05       	cpc	r31, r1
    1f44:	08 f0       	brcs	.+2      	; 0x1f48 <turnOffPWM+0xe>
    1f46:	4d c0       	rjmp	.+154    	; 0x1fe2 <turnOffPWM+0xa8>
    1f48:	88 27       	eor	r24, r24
    1f4a:	ee 58       	subi	r30, 0x8E	; 142
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f50:	f2 c0       	rjmp	.+484    	; 0x2136 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1f52:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1f56:	8f 77       	andi	r24, 0x7F	; 127
    1f58:	03 c0       	rjmp	.+6      	; 0x1f60 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f5a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1f5e:	8f 7d       	andi	r24, 0xDF	; 223
    1f60:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1f64:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1f66:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1f6a:	87 7f       	andi	r24, 0xF7	; 247
    1f6c:	f9 cf       	rjmp	.-14     	; 0x1f60 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1f6e:	84 b5       	in	r24, 0x24	; 36
    1f70:	8f 77       	andi	r24, 0x7F	; 127
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1f74:	84 b5       	in	r24, 0x24	; 36
    1f76:	8f 7d       	andi	r24, 0xDF	; 223
    1f78:	84 bd       	out	0x24, r24	; 36
    1f7a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1f7c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1f80:	8f 77       	andi	r24, 0x7F	; 127
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1f84:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1f8e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1f90:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1f94:	8f 77       	andi	r24, 0x7F	; 127
    1f96:	07 c0       	rjmp	.+14     	; 0x1fa6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1f98:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1f9c:	8f 7d       	andi	r24, 0xDF	; 223
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1fa0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1fa4:	87 7f       	andi	r24, 0xF7	; 247
    1fa6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1faa:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1fac:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1fb0:	8f 77       	andi	r24, 0x7F	; 127
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1fb4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1fb8:	8f 7d       	andi	r24, 0xDF	; 223
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1fbc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1fc0:	87 7f       	andi	r24, 0xF7	; 247
    1fc2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1fc6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1fc8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1fcc:	8f 77       	andi	r24, 0x7F	; 127
    1fce:	07 c0       	rjmp	.+14     	; 0x1fde <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1fd0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1fd4:	8f 7d       	andi	r24, 0xDF	; 223
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1fd8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1fdc:	87 7f       	andi	r24, 0xF7	; 247
    1fde:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1fe2:	08 95       	ret

00001fe4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	fc 01       	movw	r30, r24
    1fec:	e2 5b       	subi	r30, 0xB2	; 178
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	ec 56       	subi	r30, 0x6C	; 108
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1ffa:	88 23       	and	r24, r24
    1ffc:	61 f1       	breq	.+88     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	fc 01       	movw	r30, r24
    2006:	e2 5f       	subi	r30, 0xF2	; 242
    2008:	fd 4f       	sbci	r31, 0xFD	; 253
    200a:	c5 91       	lpm	r28, Z+
    200c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    200e:	fc 01       	movw	r30, r24
    2010:	ec 50       	subi	r30, 0x0C	; 12
    2012:	fe 4f       	sbci	r31, 0xFE	; 254
    2014:	a5 91       	lpm	r26, Z+
    2016:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2018:	61 11       	cpse	r22, r1
    201a:	09 c0       	rjmp	.+18     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
		uint8_t oldSREG = SREG;
    201c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    201e:	f8 94       	cli
		*reg &= ~bit;
    2020:	88 81       	ld	r24, Y
    2022:	20 95       	com	r18
    2024:	82 23       	and	r24, r18
    2026:	88 83       	st	Y, r24
		*out &= ~bit;
    2028:	ec 91       	ld	r30, X
    202a:	2e 23       	and	r18, r30
    202c:	0b c0       	rjmp	.+22     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    202e:	62 30       	cpi	r22, 0x02	; 2
    2030:	61 f4       	brne	.+24     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
		uint8_t oldSREG = SREG;
    2032:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2034:	f8 94       	cli
		*reg &= ~bit;
    2036:	88 81       	ld	r24, Y
    2038:	32 2f       	mov	r19, r18
    203a:	30 95       	com	r19
    203c:	83 23       	and	r24, r19
    203e:	88 83       	st	Y, r24
		*out |= bit;
    2040:	ec 91       	ld	r30, X
    2042:	2e 2b       	or	r18, r30
    2044:	2c 93       	st	X, r18
		SREG = oldSREG;
    2046:	9f bf       	out	0x3f, r25	; 63
    2048:	06 c0       	rjmp	.+12     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
	} else {
		uint8_t oldSREG = SREG;
    204a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    204c:	f8 94       	cli
		*reg |= bit;
    204e:	e8 81       	ld	r30, Y
    2050:	2e 2b       	or	r18, r30
    2052:	28 83       	st	Y, r18
		SREG = oldSREG;
    2054:	8f bf       	out	0x3f, r24	; 63
	}
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	08 95       	ret

0000205c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	f9 01       	movw	r30, r18
    2068:	e8 5f       	subi	r30, 0xF8	; 248
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    206e:	f9 01       	movw	r30, r18
    2070:	e2 5b       	subi	r30, 0xB2	; 178
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2076:	f9 01       	movw	r30, r18
    2078:	ec 56       	subi	r30, 0x6C	; 108
    207a:	fe 4f       	sbci	r31, 0xFE	; 254
    207c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    207e:	cc 23       	and	r28, r28
    2080:	b9 f0       	breq	.+46     	; 0x20b0 <digitalWrite+0x54>
    2082:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2084:	81 11       	cpse	r24, r1
    2086:	59 df       	rcall	.-334    	; 0x1f3a <turnOffPWM>

	out = portOutputRegister(port);
    2088:	ec 2f       	mov	r30, r28
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	ec 50       	subi	r30, 0x0C	; 12
    2092:	fe 4f       	sbci	r31, 0xFE	; 254
    2094:	a5 91       	lpm	r26, Z+
    2096:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2098:	9f b7       	in	r25, 0x3f	; 63
	cli();
    209a:	f8 94       	cli

	if (val == LOW) {
    209c:	11 11       	cpse	r17, r1
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <digitalWrite+0x4c>
		*out &= ~bit;
    20a0:	8c 91       	ld	r24, X
    20a2:	d0 95       	com	r29
    20a4:	d8 23       	and	r29, r24
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <digitalWrite+0x50>
	} else {
		*out |= bit;
    20a8:	ec 91       	ld	r30, X
    20aa:	de 2b       	or	r29, r30
    20ac:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    20ae:	9f bf       	out	0x3f, r25	; 63
}
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	08 95       	ret

000020b8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    20b8:	08 95       	ret

000020ba <__udivmodsi4>:
    20ba:	a1 e2       	ldi	r26, 0x21	; 33
    20bc:	1a 2e       	mov	r1, r26
    20be:	aa 1b       	sub	r26, r26
    20c0:	bb 1b       	sub	r27, r27
    20c2:	fd 01       	movw	r30, r26
    20c4:	0d c0       	rjmp	.+26     	; 0x20e0 <__udivmodsi4_ep>

000020c6 <__udivmodsi4_loop>:
    20c6:	aa 1f       	adc	r26, r26
    20c8:	bb 1f       	adc	r27, r27
    20ca:	ee 1f       	adc	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	a2 17       	cp	r26, r18
    20d0:	b3 07       	cpc	r27, r19
    20d2:	e4 07       	cpc	r30, r20
    20d4:	f5 07       	cpc	r31, r21
    20d6:	20 f0       	brcs	.+8      	; 0x20e0 <__udivmodsi4_ep>
    20d8:	a2 1b       	sub	r26, r18
    20da:	b3 0b       	sbc	r27, r19
    20dc:	e4 0b       	sbc	r30, r20
    20de:	f5 0b       	sbc	r31, r21

000020e0 <__udivmodsi4_ep>:
    20e0:	66 1f       	adc	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	1a 94       	dec	r1
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <__udivmodsi4_loop>
    20ec:	60 95       	com	r22
    20ee:	70 95       	com	r23
    20f0:	80 95       	com	r24
    20f2:	90 95       	com	r25
    20f4:	9b 01       	movw	r18, r22
    20f6:	ac 01       	movw	r20, r24
    20f8:	bd 01       	movw	r22, r26
    20fa:	cf 01       	movw	r24, r30
    20fc:	08 95       	ret

000020fe <__divmodsi4>:
    20fe:	05 2e       	mov	r0, r21
    2100:	97 fb       	bst	r25, 7
    2102:	16 f4       	brtc	.+4      	; 0x2108 <__divmodsi4+0xa>
    2104:	00 94       	com	r0
    2106:	0f d0       	rcall	.+30     	; 0x2126 <__negsi2>
    2108:	57 fd       	sbrc	r21, 7
    210a:	05 d0       	rcall	.+10     	; 0x2116 <__divmodsi4_neg2>
    210c:	d6 df       	rcall	.-84     	; 0x20ba <__udivmodsi4>
    210e:	07 fc       	sbrc	r0, 7
    2110:	02 d0       	rcall	.+4      	; 0x2116 <__divmodsi4_neg2>
    2112:	46 f4       	brtc	.+16     	; 0x2124 <__divmodsi4_exit>
    2114:	08 c0       	rjmp	.+16     	; 0x2126 <__negsi2>

00002116 <__divmodsi4_neg2>:
    2116:	50 95       	com	r21
    2118:	40 95       	com	r20
    211a:	30 95       	com	r19
    211c:	21 95       	neg	r18
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	4f 4f       	sbci	r20, 0xFF	; 255
    2122:	5f 4f       	sbci	r21, 0xFF	; 255

00002124 <__divmodsi4_exit>:
    2124:	08 95       	ret

00002126 <__negsi2>:
    2126:	90 95       	com	r25
    2128:	80 95       	com	r24
    212a:	70 95       	com	r23
    212c:	61 95       	neg	r22
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	8f 4f       	sbci	r24, 0xFF	; 255
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	08 95       	ret

00002136 <__tablejump2__>:
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	88 1f       	adc	r24, r24
    213c:	8b bf       	out	0x3b, r24	; 59
    213e:	07 90       	elpm	r0, Z+
    2140:	f6 91       	elpm	r31, Z
    2142:	e0 2d       	mov	r30, r0
    2144:	19 94       	eijmp

00002146 <malloc>:
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	91 05       	cpc	r25, r1
    2152:	10 f4       	brcc	.+4      	; 0x2158 <malloc+0x12>
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <__flp>
    215c:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <__flp+0x1>
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	a0 e0       	ldi	r26, 0x00	; 0
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	30 97       	sbiw	r30, 0x00	; 0
    216a:	19 f1       	breq	.+70     	; 0x21b2 <malloc+0x6c>
    216c:	40 81       	ld	r20, Z
    216e:	51 81       	ldd	r21, Z+1	; 0x01
    2170:	02 81       	ldd	r16, Z+2	; 0x02
    2172:	13 81       	ldd	r17, Z+3	; 0x03
    2174:	48 17       	cp	r20, r24
    2176:	59 07       	cpc	r21, r25
    2178:	c8 f0       	brcs	.+50     	; 0x21ac <malloc+0x66>
    217a:	84 17       	cp	r24, r20
    217c:	95 07       	cpc	r25, r21
    217e:	69 f4       	brne	.+26     	; 0x219a <malloc+0x54>
    2180:	10 97       	sbiw	r26, 0x00	; 0
    2182:	31 f0       	breq	.+12     	; 0x2190 <malloc+0x4a>
    2184:	12 96       	adiw	r26, 0x02	; 2
    2186:	0c 93       	st	X, r16
    2188:	12 97       	sbiw	r26, 0x02	; 2
    218a:	13 96       	adiw	r26, 0x03	; 3
    218c:	1c 93       	st	X, r17
    218e:	27 c0       	rjmp	.+78     	; 0x21de <malloc+0x98>
    2190:	00 93 10 04 	sts	0x0410, r16	; 0x800410 <__flp>
    2194:	10 93 11 04 	sts	0x0411, r17	; 0x800411 <__flp+0x1>
    2198:	22 c0       	rjmp	.+68     	; 0x21de <malloc+0x98>
    219a:	21 15       	cp	r18, r1
    219c:	31 05       	cpc	r19, r1
    219e:	19 f0       	breq	.+6      	; 0x21a6 <malloc+0x60>
    21a0:	42 17       	cp	r20, r18
    21a2:	53 07       	cpc	r21, r19
    21a4:	18 f4       	brcc	.+6      	; 0x21ac <malloc+0x66>
    21a6:	9a 01       	movw	r18, r20
    21a8:	bd 01       	movw	r22, r26
    21aa:	ef 01       	movw	r28, r30
    21ac:	df 01       	movw	r26, r30
    21ae:	f8 01       	movw	r30, r16
    21b0:	db cf       	rjmp	.-74     	; 0x2168 <malloc+0x22>
    21b2:	21 15       	cp	r18, r1
    21b4:	31 05       	cpc	r19, r1
    21b6:	f9 f0       	breq	.+62     	; 0x21f6 <malloc+0xb0>
    21b8:	28 1b       	sub	r18, r24
    21ba:	39 0b       	sbc	r19, r25
    21bc:	24 30       	cpi	r18, 0x04	; 4
    21be:	31 05       	cpc	r19, r1
    21c0:	80 f4       	brcc	.+32     	; 0x21e2 <malloc+0x9c>
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	61 15       	cp	r22, r1
    21c8:	71 05       	cpc	r23, r1
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <malloc+0x8e>
    21cc:	fb 01       	movw	r30, r22
    21ce:	93 83       	std	Z+3, r25	; 0x03
    21d0:	82 83       	std	Z+2, r24	; 0x02
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <malloc+0x96>
    21d4:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <__flp+0x1>
    21d8:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__flp>
    21dc:	fe 01       	movw	r30, r28
    21de:	32 96       	adiw	r30, 0x02	; 2
    21e0:	44 c0       	rjmp	.+136    	; 0x226a <__stack+0x6b>
    21e2:	fe 01       	movw	r30, r28
    21e4:	e2 0f       	add	r30, r18
    21e6:	f3 1f       	adc	r31, r19
    21e8:	81 93       	st	Z+, r24
    21ea:	91 93       	st	Z+, r25
    21ec:	22 50       	subi	r18, 0x02	; 2
    21ee:	31 09       	sbc	r19, r1
    21f0:	39 83       	std	Y+1, r19	; 0x01
    21f2:	28 83       	st	Y, r18
    21f4:	3a c0       	rjmp	.+116    	; 0x226a <__stack+0x6b>
    21f6:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <__brkval>
    21fa:	30 91 0f 04 	lds	r19, 0x040F	; 0x80040f <__brkval+0x1>
    21fe:	23 2b       	or	r18, r19
    2200:	41 f4       	brne	.+16     	; 0x2212 <__stack+0x13>
    2202:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2206:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    220a:	30 93 0f 04 	sts	0x040F, r19	; 0x80040f <__brkval+0x1>
    220e:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <__brkval>
    2212:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2216:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    221a:	21 15       	cp	r18, r1
    221c:	31 05       	cpc	r19, r1
    221e:	41 f4       	brne	.+16     	; 0x2230 <__stack+0x31>
    2220:	2d b7       	in	r18, 0x3d	; 61
    2222:	3e b7       	in	r19, 0x3e	; 62
    2224:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2228:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    222c:	24 1b       	sub	r18, r20
    222e:	35 0b       	sbc	r19, r21
    2230:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <__brkval>
    2234:	f0 91 0f 04 	lds	r31, 0x040F	; 0x80040f <__brkval+0x1>
    2238:	e2 17       	cp	r30, r18
    223a:	f3 07       	cpc	r31, r19
    223c:	a0 f4       	brcc	.+40     	; 0x2266 <__stack+0x67>
    223e:	2e 1b       	sub	r18, r30
    2240:	3f 0b       	sbc	r19, r31
    2242:	28 17       	cp	r18, r24
    2244:	39 07       	cpc	r19, r25
    2246:	78 f0       	brcs	.+30     	; 0x2266 <__stack+0x67>
    2248:	ac 01       	movw	r20, r24
    224a:	4e 5f       	subi	r20, 0xFE	; 254
    224c:	5f 4f       	sbci	r21, 0xFF	; 255
    224e:	24 17       	cp	r18, r20
    2250:	35 07       	cpc	r19, r21
    2252:	48 f0       	brcs	.+18     	; 0x2266 <__stack+0x67>
    2254:	4e 0f       	add	r20, r30
    2256:	5f 1f       	adc	r21, r31
    2258:	50 93 0f 04 	sts	0x040F, r21	; 0x80040f <__brkval+0x1>
    225c:	40 93 0e 04 	sts	0x040E, r20	; 0x80040e <__brkval>
    2260:	81 93       	st	Z+, r24
    2262:	91 93       	st	Z+, r25
    2264:	02 c0       	rjmp	.+4      	; 0x226a <__stack+0x6b>
    2266:	e0 e0       	ldi	r30, 0x00	; 0
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	cf 01       	movw	r24, r30
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	08 95       	ret

00002276 <free>:
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	09 f4       	brne	.+2      	; 0x2280 <free+0xa>
    227e:	81 c0       	rjmp	.+258    	; 0x2382 <free+0x10c>
    2280:	fc 01       	movw	r30, r24
    2282:	32 97       	sbiw	r30, 0x02	; 2
    2284:	13 82       	std	Z+3, r1	; 0x03
    2286:	12 82       	std	Z+2, r1	; 0x02
    2288:	a0 91 10 04 	lds	r26, 0x0410	; 0x800410 <__flp>
    228c:	b0 91 11 04 	lds	r27, 0x0411	; 0x800411 <__flp+0x1>
    2290:	10 97       	sbiw	r26, 0x00	; 0
    2292:	81 f4       	brne	.+32     	; 0x22b4 <free+0x3e>
    2294:	20 81       	ld	r18, Z
    2296:	31 81       	ldd	r19, Z+1	; 0x01
    2298:	82 0f       	add	r24, r18
    229a:	93 1f       	adc	r25, r19
    229c:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <__brkval>
    22a0:	30 91 0f 04 	lds	r19, 0x040F	; 0x80040f <__brkval+0x1>
    22a4:	28 17       	cp	r18, r24
    22a6:	39 07       	cpc	r19, r25
    22a8:	51 f5       	brne	.+84     	; 0x22fe <free+0x88>
    22aa:	f0 93 0f 04 	sts	0x040F, r31	; 0x80040f <__brkval+0x1>
    22ae:	e0 93 0e 04 	sts	0x040E, r30	; 0x80040e <__brkval>
    22b2:	67 c0       	rjmp	.+206    	; 0x2382 <free+0x10c>
    22b4:	ed 01       	movw	r28, r26
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	ce 17       	cp	r28, r30
    22bc:	df 07       	cpc	r29, r31
    22be:	40 f4       	brcc	.+16     	; 0x22d0 <free+0x5a>
    22c0:	4a 81       	ldd	r20, Y+2	; 0x02
    22c2:	5b 81       	ldd	r21, Y+3	; 0x03
    22c4:	9e 01       	movw	r18, r28
    22c6:	41 15       	cp	r20, r1
    22c8:	51 05       	cpc	r21, r1
    22ca:	f1 f0       	breq	.+60     	; 0x2308 <free+0x92>
    22cc:	ea 01       	movw	r28, r20
    22ce:	f5 cf       	rjmp	.-22     	; 0x22ba <free+0x44>
    22d0:	d3 83       	std	Z+3, r29	; 0x03
    22d2:	c2 83       	std	Z+2, r28	; 0x02
    22d4:	40 81       	ld	r20, Z
    22d6:	51 81       	ldd	r21, Z+1	; 0x01
    22d8:	84 0f       	add	r24, r20
    22da:	95 1f       	adc	r25, r21
    22dc:	c8 17       	cp	r28, r24
    22de:	d9 07       	cpc	r29, r25
    22e0:	59 f4       	brne	.+22     	; 0x22f8 <free+0x82>
    22e2:	88 81       	ld	r24, Y
    22e4:	99 81       	ldd	r25, Y+1	; 0x01
    22e6:	84 0f       	add	r24, r20
    22e8:	95 1f       	adc	r25, r21
    22ea:	02 96       	adiw	r24, 0x02	; 2
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	9b 81       	ldd	r25, Y+3	; 0x03
    22f4:	93 83       	std	Z+3, r25	; 0x03
    22f6:	82 83       	std	Z+2, r24	; 0x02
    22f8:	21 15       	cp	r18, r1
    22fa:	31 05       	cpc	r19, r1
    22fc:	29 f4       	brne	.+10     	; 0x2308 <free+0x92>
    22fe:	f0 93 11 04 	sts	0x0411, r31	; 0x800411 <__flp+0x1>
    2302:	e0 93 10 04 	sts	0x0410, r30	; 0x800410 <__flp>
    2306:	3d c0       	rjmp	.+122    	; 0x2382 <free+0x10c>
    2308:	e9 01       	movw	r28, r18
    230a:	fb 83       	std	Y+3, r31	; 0x03
    230c:	ea 83       	std	Y+2, r30	; 0x02
    230e:	49 91       	ld	r20, Y+
    2310:	59 91       	ld	r21, Y+
    2312:	c4 0f       	add	r28, r20
    2314:	d5 1f       	adc	r29, r21
    2316:	ec 17       	cp	r30, r28
    2318:	fd 07       	cpc	r31, r29
    231a:	61 f4       	brne	.+24     	; 0x2334 <free+0xbe>
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	84 0f       	add	r24, r20
    2322:	95 1f       	adc	r25, r21
    2324:	02 96       	adiw	r24, 0x02	; 2
    2326:	e9 01       	movw	r28, r18
    2328:	99 83       	std	Y+1, r25	; 0x01
    232a:	88 83       	st	Y, r24
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	9b 83       	std	Y+3, r25	; 0x03
    2332:	8a 83       	std	Y+2, r24	; 0x02
    2334:	e0 e0       	ldi	r30, 0x00	; 0
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	12 96       	adiw	r26, 0x02	; 2
    233a:	8d 91       	ld	r24, X+
    233c:	9c 91       	ld	r25, X
    233e:	13 97       	sbiw	r26, 0x03	; 3
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	19 f0       	breq	.+6      	; 0x234a <free+0xd4>
    2344:	fd 01       	movw	r30, r26
    2346:	dc 01       	movw	r26, r24
    2348:	f7 cf       	rjmp	.-18     	; 0x2338 <free+0xc2>
    234a:	8d 91       	ld	r24, X+
    234c:	9c 91       	ld	r25, X
    234e:	11 97       	sbiw	r26, 0x01	; 1
    2350:	9d 01       	movw	r18, r26
    2352:	2e 5f       	subi	r18, 0xFE	; 254
    2354:	3f 4f       	sbci	r19, 0xFF	; 255
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <__brkval>
    235e:	30 91 0f 04 	lds	r19, 0x040F	; 0x80040f <__brkval+0x1>
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	69 f4       	brne	.+26     	; 0x2382 <free+0x10c>
    2368:	30 97       	sbiw	r30, 0x00	; 0
    236a:	29 f4       	brne	.+10     	; 0x2376 <free+0x100>
    236c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <__flp+0x1>
    2370:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <__flp>
    2374:	02 c0       	rjmp	.+4      	; 0x237a <free+0x104>
    2376:	13 82       	std	Z+3, r1	; 0x03
    2378:	12 82       	std	Z+2, r1	; 0x02
    237a:	b0 93 0f 04 	sts	0x040F, r27	; 0x80040f <__brkval+0x1>
    237e:	a0 93 0e 04 	sts	0x040E, r26	; 0x80040e <__brkval>
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <strncpy>:
    2388:	fb 01       	movw	r30, r22
    238a:	dc 01       	movw	r26, r24
    238c:	41 50       	subi	r20, 0x01	; 1
    238e:	50 40       	sbci	r21, 0x00	; 0
    2390:	48 f0       	brcs	.+18     	; 0x23a4 <strncpy+0x1c>
    2392:	01 90       	ld	r0, Z+
    2394:	0d 92       	st	X+, r0
    2396:	00 20       	and	r0, r0
    2398:	c9 f7       	brne	.-14     	; 0x238c <strncpy+0x4>
    239a:	01 c0       	rjmp	.+2      	; 0x239e <strncpy+0x16>
    239c:	1d 92       	st	X+, r1
    239e:	41 50       	subi	r20, 0x01	; 1
    23a0:	50 40       	sbci	r21, 0x00	; 0
    23a2:	e0 f7       	brcc	.-8      	; 0x239c <strncpy+0x14>
    23a4:	08 95       	ret

000023a6 <_exit>:
    23a6:	f8 94       	cli

000023a8 <__stop_program>:
    23a8:	ff cf       	rjmp	.-2      	; 0x23a8 <__stop_program>
