
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800200  00006bbe  00006c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000266  0080033e  0080033e  00006d90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e08  00000000  00000000  00006e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019da8  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043f3  00000000  00000000  000219b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008098  00000000  00000000  00025da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003658  00000000  00000000  0002de3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000062f4  00000000  00000000  00031494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c37a  00000000  00000000  00037788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d78  00000000  00000000  00043b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1d 2f 	jmp	0x5e3a	; 0x5e3a <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 2d 	jmp	0x5b1e	; 0x5b1e <__vector_25>
      68:	0c 94 c5 2d 	jmp	0x5b8a	; 0x5b8a <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 2e 1f 	jmp	0x3e5c	; 0x3e5c <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	58 30       	cpi	r21, 0x08	; 8
      e6:	5b 30       	cpi	r21, 0x0B	; 11
      e8:	4a 30       	cpi	r20, 0x0A	; 10
      ea:	4e 30       	cpi	r20, 0x0E	; 14
      ec:	54 30       	cpi	r21, 0x04	; 4
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	5f 30       	cpi	r21, 0x0F	; 15
      f2:	63 30       	cpi	r22, 0x03	; 3
      f4:	69 30       	cpi	r22, 0x09	; 9
      f6:	6d 30       	cpi	r22, 0x0D	; 13
      f8:	71 30       	cpi	r23, 0x01	; 1
      fa:	77 30       	cpi	r23, 0x07	; 7
      fc:	7b 30       	cpi	r23, 0x0B	; 11
      fe:	7f 30       	cpi	r23, 0x0F	; 15
     100:	92 30       	cpi	r25, 0x02	; 2
     102:	85 30       	cpi	r24, 0x05	; 5
     104:	89 30       	cpi	r24, 0x09	; 9
     106:	8d 30       	cpi	r24, 0x0D	; 13

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	94 07       	cpc	r25, r20
     22a:	67 2a       	or	r6, r23
     22c:	f7 2d       	mov	r31, r7

0000022e <__ctors_end>:
     22e:	a0 07       	cpc	r26, r16

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	ee eb       	ldi	r30, 0xBE	; 190
     248:	fb e6       	ldi	r31, 0x6B	; 107
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ae 33       	cpi	r26, 0x3E	; 62
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	ae e3       	ldi	r26, 0x3E	; 62
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a4 3a       	cpi	r26, 0xA4	; 164
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 35 33 	call	0x666a	; 0x666a <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <main>
     28e:	0c 94 ce 35 	jmp	0x6b9c	; 0x6b9c <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <_ZNK6StringeqERKS_+0x6>
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	7c 83       	std	Y+4, r23	; 0x04
     2a6:	6b 83       	std	Y+3, r22	; 0x03
     2a8:	2b 81       	ldd	r18, Y+3	; 0x03
     2aa:	3c 81       	ldd	r19, Y+4	; 0x04
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	9a 81       	ldd	r25, Y+2	; 0x02
     2b0:	b9 01       	movw	r22, r18
     2b2:	0e 94 83 32 	call	0x6506	; 0x6506 <_ZNK6String6equalsERKS_>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <_ZNK6String9substringEj+0x6>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <_ZNK6String9substringEj+0x8>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	7c 83       	std	Y+4, r23	; 0x04
     2d6:	6b 83       	std	Y+3, r22	; 0x03
     2d8:	5e 83       	std	Y+6, r21	; 0x06
     2da:	4d 83       	std	Y+5, r20	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	fc 01       	movw	r30, r24
     2e2:	24 81       	ldd	r18, Z+4	; 0x04
     2e4:	35 81       	ldd	r19, Z+5	; 0x05
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	4d 81       	ldd	r20, Y+5	; 0x05
     2ec:	5e 81       	ldd	r21, Y+6	; 0x06
     2ee:	6b 81       	ldd	r22, Y+3	; 0x03
     2f0:	7c 81       	ldd	r23, Y+4	; 0x04
     2f2:	0e 94 93 32 	call	0x6526	; 0x6526 <_ZNK6String9substringEjj>
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	26 96       	adiw	r28, 0x06	; 6
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	00 d0       	rcall	.+0      	; 0x316 <_ZN5Print5writeEPKc+0xa>
     316:	1f 92       	push	r1
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     324:	8b 81       	ldd	r24, Y+3	; 0x03
     326:	9c 81       	ldd	r25, Y+4	; 0x04
     328:	89 2b       	or	r24, r25
     32a:	19 f4       	brne	.+6      	; 0x332 <_ZN5Print5writeEPKc+0x26>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	15 c0       	rjmp	.+42     	; 0x35c <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	02 96       	adiw	r24, 0x02	; 2
     33e:	fc 01       	movw	r30, r24
     340:	00 81       	ld	r16, Z
     342:	11 81       	ldd	r17, Z+1	; 0x01
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 83 35 	call	0x6b06	; 0x6b06 <strlen>
     34c:	ac 01       	movw	r20, r24
     34e:	2b 81       	ldd	r18, Y+3	; 0x03
     350:	3c 81       	ldd	r19, Y+4	; 0x04
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	b9 01       	movw	r22, r18
     358:	f8 01       	movw	r30, r16
     35a:	19 95       	eicall
    }
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	08 95       	ret

0000036e <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <_ZN14HardwareSerial5beginEm+0x6>
     374:	00 d0       	rcall	.+0      	; 0x376 <_ZN14HardwareSerial5beginEm+0x8>
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	4b 83       	std	Y+3, r20	; 0x03
     380:	5c 83       	std	Y+4, r21	; 0x04
     382:	6d 83       	std	Y+5, r22	; 0x05
     384:	7e 83       	std	Y+6, r23	; 0x06
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	ad 81       	ldd	r26, Y+5	; 0x05
     38c:	be 81       	ldd	r27, Y+6	; 0x06
     38e:	e9 81       	ldd	r30, Y+1	; 0x01
     390:	fa 81       	ldd	r31, Y+2	; 0x02
     392:	26 e0       	ldi	r18, 0x06	; 6
     394:	ac 01       	movw	r20, r24
     396:	bd 01       	movw	r22, r26
     398:	cf 01       	movw	r24, r30
     39a:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <_ZN14HardwareSerial5beginEmh>
     39e:	00 00       	nop
     3a0:	26 96       	adiw	r28, 0x06	; 6
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	1f 92       	push	r1
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	1f 92       	push	r1
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	2a eb       	ldi	r18, 0xBA	; 186
     3e0:	32 e0       	ldi	r19, 0x02	; 2
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	fc 01       	movw	r30, r24
     3e8:	31 83       	std	Z+1, r19	; 0x01
     3ea:	20 83       	st	Z, r18
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	89 2b       	or	r24, r25
     3f2:	21 f0       	breq	.+8      	; 0x3fc <_ZN15Adafruit_SensorD1Ev+0x2e>
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <_ZdlPv>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <_ZN15Adafruit_SensorD0Ev>:
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	1f 92       	push	r1
     40c:	1f 92       	push	r1
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	d9 df       	rcall	.-78     	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <_ZdlPv>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     43e:	00 00       	nop
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	00 d0       	rcall	.+0      	; 0x452 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	7c 83       	std	Y+4, r23	; 0x04
     45e:	6b 83       	std	Y+3, r22	; 0x03
     460:	2a eb       	ldi	r18, 0xBA	; 186
     462:	32 e0       	ldi	r19, 0x02	; 2
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	fc 01       	movw	r30, r24
     46a:	31 83       	std	Z+1, r19	; 0x01
     46c:	20 83       	st	Z, r18
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	fc 01       	movw	r30, r24
     474:	22 81       	ldd	r18, Z+2	; 0x02
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	22 83       	std	Z+2, r18	; 0x02
     47e:	00 00       	nop
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     494:	1f 92       	push	r1
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	7c 83       	std	Y+4, r23	; 0x04
     4a0:	6b 83       	std	Y+3, r22	; 0x03
     4a2:	2b 81       	ldd	r18, Y+3	; 0x03
     4a4:	3c 81       	ldd	r19, Y+4	; 0x04
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	b9 01       	movw	r22, r18
     4ac:	cf df       	rcall	.-98     	; 0x44c <_ZN15Adafruit_SensorC1ERKS_>
     4ae:	26 ed       	ldi	r18, 0xD6	; 214
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	fc 01       	movw	r30, r24
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	9c 81       	ldd	r25, Y+4	; 0x04
     4c0:	fc 01       	movw	r30, r24
     4c2:	23 81       	ldd	r18, Z+3	; 0x03
     4c4:	34 81       	ldd	r19, Z+4	; 0x04
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	fc 01       	movw	r30, r24
     4cc:	34 83       	std	Z+4, r19	; 0x04
     4ce:	23 83       	std	Z+3, r18	; 0x03
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	9c 81       	ldd	r25, Y+4	; 0x04
     4d4:	fc 01       	movw	r30, r24
     4d6:	85 81       	ldd	r24, Z+5	; 0x05
     4d8:	96 81       	ldd	r25, Z+6	; 0x06
     4da:	a7 81       	ldd	r26, Z+7	; 0x07
     4dc:	b0 85       	ldd	r27, Z+8	; 0x08
     4de:	29 81       	ldd	r18, Y+1	; 0x01
     4e0:	3a 81       	ldd	r19, Y+2	; 0x02
     4e2:	f9 01       	movw	r30, r18
     4e4:	85 83       	std	Z+5, r24	; 0x05
     4e6:	96 83       	std	Z+6, r25	; 0x06
     4e8:	a7 83       	std	Z+7, r26	; 0x07
     4ea:	b0 87       	std	Z+8, r27	; 0x08
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 d0       	rcall	.+0      	; 0x502 <_ZN11DHT_Unified11temperatureEv+0x6>
     502:	1f 92       	push	r1
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	7c 83       	std	Y+4, r23	; 0x04
     50e:	6b 83       	std	Y+3, r22	; 0x03
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	9c 01       	movw	r18, r24
     516:	2c 5e       	subi	r18, 0xEC	; 236
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	b9 01       	movw	r22, r18
     520:	b6 df       	rcall	.-148    	; 0x48e <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	00 d0       	rcall	.+0      	; 0x53a <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	7c 83       	std	Y+4, r23	; 0x04
     546:	6b 83       	std	Y+3, r22	; 0x03
     548:	2b 81       	ldd	r18, Y+3	; 0x03
     54a:	3c 81       	ldd	r19, Y+4	; 0x04
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	b9 01       	movw	r22, r18
     552:	7c df       	rcall	.-264    	; 0x44c <_ZN15Adafruit_SensorC1ERKS_>
     554:	28 ec       	ldi	r18, 0xC8	; 200
     556:	32 e0       	ldi	r19, 0x02	; 2
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	fc 01       	movw	r30, r24
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	fc 01       	movw	r30, r24
     568:	23 81       	ldd	r18, Z+3	; 0x03
     56a:	34 81       	ldd	r19, Z+4	; 0x04
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	fc 01       	movw	r30, r24
     572:	34 83       	std	Z+4, r19	; 0x04
     574:	23 83       	std	Z+3, r18	; 0x03
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	9c 81       	ldd	r25, Y+4	; 0x04
     57a:	fc 01       	movw	r30, r24
     57c:	85 81       	ldd	r24, Z+5	; 0x05
     57e:	96 81       	ldd	r25, Z+6	; 0x06
     580:	a7 81       	ldd	r26, Z+7	; 0x07
     582:	b0 85       	ldd	r27, Z+8	; 0x08
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	3a 81       	ldd	r19, Y+2	; 0x02
     588:	f9 01       	movw	r30, r18
     58a:	85 83       	std	Z+5, r24	; 0x05
     58c:	96 83       	std	Z+6, r25	; 0x06
     58e:	a7 83       	std	Z+7, r26	; 0x07
     590:	b0 87       	std	Z+8, r27	; 0x08
     592:	00 00       	nop
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_ZN11DHT_Unified8humidityEv+0x6>
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	7c 83       	std	Y+4, r23	; 0x04
     5b4:	6b 83       	std	Y+3, r22	; 0x03
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	9c 01       	movw	r18, r24
     5bc:	23 5e       	subi	r18, 0xE3	; 227
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	b9 01       	movw	r22, r18
     5c6:	b6 df       	rcall	.-148    	; 0x534 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <_ZN7TwoWire5writeEi+0x6>
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	7c 83       	std	Y+4, r23	; 0x04
     5ec:	6b 83       	std	Y+3, r22	; 0x03
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 81       	ld	r18, Z
     5fc:	31 81       	ldd	r19, Z+1	; 0x01
     5fe:	4b 81       	ldd	r20, Y+3	; 0x03
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	64 2f       	mov	r22, r20
     606:	f9 01       	movw	r30, r18
     608:	19 95       	eicall
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	eb 97       	sbiw	r28, 0x3b	; 59
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	55 e2       	ldi	r21, 0x25	; 37
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	8a ef       	ldi	r24, 0xFA	; 250
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	9a de       	rcall	.-716    	; 0x36e <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     63a:	8e ee       	ldi	r24, 0xEE	; 238
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     642:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     646:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     650:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     654:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     65e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     662:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     66c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     670:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	92 d2       	rcall	.+1316   	; 0xba2 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     67e:	8a e4       	ldi	r24, 0x4A	; 74
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     686:	ce 01       	movw	r24, r28
     688:	0b 96       	adiw	r24, 0x0b	; 11
     68a:	6a e4       	ldi	r22, 0x4A	; 74
     68c:	73 e0       	ldi	r23, 0x03	; 3
     68e:	36 df       	rcall	.-404    	; 0x4fc <_ZN11DHT_Unified11temperatureEv>
     690:	9e 01       	movw	r18, r28
     692:	2c 5e       	subi	r18, 0xEC	; 236
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	ce 01       	movw	r24, r28
     698:	0b 96       	adiw	r24, 0x0b	; 11
     69a:	b9 01       	movw	r22, r18
     69c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     6a0:	ce 01       	movw	r24, r28
     6a2:	0b 96       	adiw	r24, 0x0b	; 11
     6a4:	db d3       	rcall	.+1974   	; 0xe5c <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     6a6:	ce 01       	movw	r24, r28
     6a8:	02 96       	adiw	r24, 0x02	; 2
     6aa:	6a e4       	ldi	r22, 0x4A	; 74
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	79 df       	rcall	.-270    	; 0x5a2 <_ZN11DHT_Unified8humidityEv>
     6b0:	9e 01       	movw	r18, r28
     6b2:	2c 5e       	subi	r18, 0xEC	; 236
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	ce 01       	movw	r24, r28
     6b8:	02 96       	adiw	r24, 0x02	; 2
     6ba:	b9 01       	movw	r22, r18
     6bc:	0e 94 17 11 	call	0x222e	; 0x222e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     6c0:	ce 01       	movw	r24, r28
     6c2:	02 96       	adiw	r24, 0x02	; 2
     6c4:	fe d3       	rcall	.+2044   	; 0xec2 <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     6c6:	88 ad       	ldd	r24, Y+56	; 0x38
     6c8:	99 ad       	ldd	r25, Y+57	; 0x39
     6ca:	aa ad       	ldd	r26, Y+58	; 0x3a
     6cc:	bb ad       	ldd	r27, Y+59	; 0x3b
     6ce:	28 ee       	ldi	r18, 0xE8	; 232
     6d0:	33 e0       	ldi	r19, 0x03	; 3
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	0e 94 19 33 	call	0x6632	; 0x6632 <__divmodsi4>
     6de:	da 01       	movw	r26, r20
     6e0:	c9 01       	movw	r24, r18
     6e2:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <delayMS>
     6e6:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <delayMS+0x1>
     6ea:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <delayMS+0x2>
     6ee:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     6f2:	8a ef       	ldi	r24, 0xFA	; 250
     6f4:	94 e0       	ldi	r25, 0x04	; 4
     6f6:	5d de       	rcall	.-838    	; 0x3b2 <_ZN14HardwareSerialcvbEv>
     6f8:	98 2f       	mov	r25, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	89 27       	eor	r24, r25
     6fe:	88 23       	and	r24, r24
     700:	09 f0       	breq	.+2      	; 0x704 <setup+0xec>
     702:	f7 cf       	rjmp	.-18     	; 0x6f2 <setup+0xda>
  SPI.begin();         // Init SPI bus
     704:	0e 94 27 23 	call	0x464e	; 0x464e <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     708:	8a e7       	ldi	r24, 0x7A	; 122
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 0a 18 	call	0x3014	; 0x3014 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     710:	19 82       	std	Y+1, r1	; 0x01
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	60 f4       	brcc	.+24     	; 0x730 <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	88 57       	subi	r24, 0x78	; 120
     720:	9c 4f       	sbci	r25, 0xFC	; 252
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	f1 cf       	rjmp	.-30     	; 0x712 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     730:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     734:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     738:	bc 01       	movw	r22, r24
     73a:	84 e9       	ldi	r24, 0x94	; 148
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 86 20 	call	0x410c	; 0x410c <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	84 e9       	ldi	r24, 0x94	; 148
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Servo5writeEi>
#pragma endregion Servo Motor
 
 
#pragma region LCD Display

  lcd.init();                      // initialize the lcd
     74e:	8e e3       	ldi	r24, 0x3E	; 62
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN17LiquidCrystal_I2C4initEv>
  lcd.init();
     756:	8e e3       	ldi	r24, 0x3E	; 62
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN17LiquidCrystal_I2C4initEv>
  // Print a message to the LCD.
  lcd.backlight();
     75e:	8e e3       	ldi	r24, 0x3E	; 62
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <_ZN17LiquidCrystal_I2C9backlightEv>

#pragma endregion LCD Display
}
     766:	00 00       	nop
     768:	eb 96       	adiw	r28, 0x3b	; 59
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <loop>:

void loop()
{
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	e8 97       	sbiw	r28, 0x38	; 56
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     790:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <delayMS>
     794:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <delayMS+0x1>
     798:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <delayMS+0x2>
     79c:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <delayMS+0x3>
     7a0:	bc 01       	movw	r22, r24
     7a2:	cd 01       	movw	r24, r26
     7a4:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     7a8:	ce 01       	movw	r24, r28
     7aa:	0c 96       	adiw	r24, 0x0c	; 12
     7ac:	6a e4       	ldi	r22, 0x4A	; 74
     7ae:	73 e0       	ldi	r23, 0x03	; 3
     7b0:	a5 de       	rcall	.-694    	; 0x4fc <_ZN11DHT_Unified11temperatureEv>
     7b2:	9e 01       	movw	r18, r28
     7b4:	2b 5e       	subi	r18, 0xEB	; 235
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	ce 01       	movw	r24, r28
     7ba:	0c 96       	adiw	r24, 0x0c	; 12
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     7c2:	ce 01       	movw	r24, r28
     7c4:	0c 96       	adiw	r24, 0x0c	; 12
     7c6:	4a d3       	rcall	.+1684   	; 0xe5c <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     7c8:	89 a5       	ldd	r24, Y+41	; 0x29
     7ca:	9a a5       	ldd	r25, Y+42	; 0x2a
     7cc:	ab a5       	ldd	r26, Y+43	; 0x2b
     7ce:	bc a5       	ldd	r27, Y+44	; 0x2c
     7d0:	11 e0       	ldi	r17, 0x01	; 1
     7d2:	9c 01       	movw	r18, r24
     7d4:	ad 01       	movw	r20, r26
     7d6:	bc 01       	movw	r22, r24
     7d8:	cd 01       	movw	r24, r26
     7da:	0e 94 1e 2c 	call	0x583c	; 0x583c <__unordsf2>
     7de:	88 23       	and	r24, r24
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <loop+0x6a>
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	11 23       	and	r17, r17
     7e6:	29 f0       	breq	.+10     	; 0x7f2 <loop+0x78>
	{
		DhtSencorTemp = 0;
     7e8:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <DhtSencorTemp+0x1>
     7ec:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <DhtSencorTemp>
     7f0:	0e c0       	rjmp	.+28     	; 0x80e <loop+0x94>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     7f2:	89 a5       	ldd	r24, Y+41	; 0x29
     7f4:	9a a5       	ldd	r25, Y+42	; 0x2a
     7f6:	ab a5       	ldd	r26, Y+43	; 0x2b
     7f8:	bc a5       	ldd	r27, Y+44	; 0x2c
     7fa:	bc 01       	movw	r22, r24
     7fc:	cd 01       	movw	r24, r26
     7fe:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__fixsfsi>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <DhtSencorTemp+0x1>
     80a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     80e:	ce 01       	movw	r24, r28
     810:	03 96       	adiw	r24, 0x03	; 3
     812:	6a e4       	ldi	r22, 0x4A	; 74
     814:	73 e0       	ldi	r23, 0x03	; 3
     816:	c5 de       	rcall	.-630    	; 0x5a2 <_ZN11DHT_Unified8humidityEv>
     818:	9e 01       	movw	r18, r28
     81a:	2b 5e       	subi	r18, 0xEB	; 235
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	ce 01       	movw	r24, r28
     820:	03 96       	adiw	r24, 0x03	; 3
     822:	b9 01       	movw	r22, r18
     824:	0e 94 be 10 	call	0x217c	; 0x217c <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     828:	ce 01       	movw	r24, r28
     82a:	03 96       	adiw	r24, 0x03	; 3
     82c:	4a d3       	rcall	.+1684   	; 0xec2 <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     82e:	89 a5       	ldd	r24, Y+41	; 0x29
     830:	9a a5       	ldd	r25, Y+42	; 0x2a
     832:	ab a5       	ldd	r26, Y+43	; 0x2b
     834:	bc a5       	ldd	r27, Y+44	; 0x2c
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	9c 01       	movw	r18, r24
     83a:	ad 01       	movw	r20, r26
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 1e 2c 	call	0x583c	; 0x583c <__unordsf2>
     844:	88 23       	and	r24, r24
     846:	09 f4       	brne	.+2      	; 0x84a <loop+0xd0>
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	11 23       	and	r17, r17
     84c:	29 f0       	breq	.+10     	; 0x858 <loop+0xde>
	{
		DhtSencorHum = 0;
     84e:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <DhtSencorHum+0x1>
     852:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <DhtSencorHum>
     856:	0e c0       	rjmp	.+28     	; 0x874 <loop+0xfa>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     858:	89 a5       	ldd	r24, Y+41	; 0x29
     85a:	9a a5       	ldd	r25, Y+42	; 0x2a
     85c:	ab a5       	ldd	r26, Y+43	; 0x2b
     85e:	bc a5       	ldd	r27, Y+44	; 0x2c
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__fixsfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <DhtSencorHum+0x1>
     870:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <DhtSencorHum>
	}
	
#pragma endregion DHT Humidity

	// Alarm the user if conditions are critical
	if (DhtSencorTemp > 27 || DhtSencorHum > 70)
     874:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <DhtSencorTemp>
     878:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <DhtSencorTemp+0x1>
     87c:	4c 97       	sbiw	r24, 0x1c	; 28
     87e:	3c f4       	brge	.+14     	; 0x88e <loop+0x114>
     880:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <DhtSencorHum>
     884:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <DhtSencorHum+0x1>
     888:	87 34       	cpi	r24, 0x47	; 71
     88a:	91 05       	cpc	r25, r1
     88c:	e4 f0       	brlt	.+56     	; 0x8c6 <loop+0x14c>
	{
		if (DhtSencorTemp > 27)
     88e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <DhtSencorTemp>
     892:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <DhtSencorTemp+0x1>
     896:	4c 97       	sbiw	r24, 0x1c	; 28
     898:	34 f0       	brlt	.+12     	; 0x8a6 <loop+0x12c>
		{
			Serial.println("ALARM: The temperature is to high");
     89a:	6e e0       	ldi	r22, 0x0E	; 14
     89c:	72 e0       	ldi	r23, 0x02	; 2
     89e:	8a ef       	ldi	r24, 0xFA	; 250
     8a0:	94 e0       	ldi	r25, 0x04	; 4
     8a2:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <_ZN5Print7printlnEPKc>
		}
		if (DhtSencorHum > 70)
     8a6:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <DhtSencorHum>
     8aa:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <DhtSencorHum+0x1>
     8ae:	87 34       	cpi	r24, 0x47	; 71
     8b0:	91 05       	cpc	r25, r1
     8b2:	34 f0       	brlt	.+12     	; 0x8c0 <loop+0x146>
		{
			Serial.println("ALARM: Humidity levels is to high");
     8b4:	60 e3       	ldi	r22, 0x30	; 48
     8b6:	72 e0       	ldi	r23, 0x02	; 2
     8b8:	8a ef       	ldi	r24, 0xFA	; 250
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <_ZN5Print7printlnEPKc>
		}
		makeBipSound(3); // ALARM sound
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	f3 d1       	rcall	.+998    	; 0xcac <_Z12makeBipSoundi>

#pragma region LCD Display

	// Print a message to the LCD.

	lcd.setCursor(1,0);
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	8e e3       	ldi	r24, 0x3E	; 62
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 83 13 	call	0x2706	; 0x2706 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("Temp: ");
     8d2:	62 e5       	ldi	r22, 0x52	; 82
     8d4:	72 e0       	ldi	r23, 0x02	; 2
     8d6:	8e e3       	ldi	r24, 0x3E	; 62
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <_ZN5Print5printEPKc>
	lcd.print(DhtSencorTemp);
     8de:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <DhtSencorTemp>
     8e2:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <DhtSencorTemp+0x1>
     8e6:	4a e0       	ldi	r20, 0x0A	; 10
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	bc 01       	movw	r22, r24
     8ec:	8e e3       	ldi	r24, 0x3E	; 62
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <_ZN5Print5printEii>

	lcd.setCursor(1,1);
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	8e e3       	ldi	r24, 0x3E	; 62
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 83 13 	call	0x2706	; 0x2706 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("Hum: ");
     900:	69 e5       	ldi	r22, 0x59	; 89
     902:	72 e0       	ldi	r23, 0x02	; 2
     904:	8e e3       	ldi	r24, 0x3E	; 62
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <_ZN5Print5printEPKc>
	lcd.print(DhtSencorHum);
     90c:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <DhtSencorHum>
     910:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <DhtSencorHum+0x1>
     914:	4a e0       	ldi	r20, 0x0A	; 10
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	bc 01       	movw	r22, r24
     91a:	8e e3       	ldi	r24, 0x3E	; 62
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <_ZN5Print5printEii>
#pragma endregion LCD Display

	// Send values to MKR WIFI 110 board
#pragma region Master Writer/Slave Receiver
  
  Wire.beginTransmission(4);		// transmit to device #4
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	8e ee       	ldi	r24, 0xEE	; 238
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	0e 94 9f 28 	call	0x513e	; 0x513e <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     92e:	62 e5       	ldi	r22, 0x52	; 82
     930:	72 e0       	ldi	r23, 0x02	; 2
     932:	8e ee       	ldi	r24, 0xEE	; 238
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	ea dc       	rcall	.-1580   	; 0x30c <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     938:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <DhtSencorTemp>
     93c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <DhtSencorTemp+0x1>
     940:	bc 01       	movw	r22, r24
     942:	8e ee       	ldi	r24, 0xEE	; 238
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	49 de       	rcall	.-878    	; 0x5da <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     948:	8e ee       	ldi	r24, 0xEE	; 238
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	0e 94 da 28 	call	0x51b4	; 0x51b4 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     950:	64 e0       	ldi	r22, 0x04	; 4
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	8e ee       	ldi	r24, 0xEE	; 238
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	0e 94 9f 28 	call	0x513e	; 0x513e <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");				// sends some bytes
     95c:	69 e5       	ldi	r22, 0x59	; 89
     95e:	72 e0       	ldi	r23, 0x02	; 2
     960:	8e ee       	ldi	r24, 0xEE	; 238
     962:	94 e0       	ldi	r25, 0x04	; 4
  Wire.write(DhtSencorHum);		    // sends some bytes
     964:	d3 dc       	rcall	.-1626   	; 0x30c <_ZN5Print5writeEPKc>
     966:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <DhtSencorHum>
     96a:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <DhtSencorHum+0x1>
     96e:	bc 01       	movw	r22, r24
     970:	8e ee       	ldi	r24, 0xEE	; 238
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	32 de       	rcall	.-924    	; 0x5da <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     976:	8e ee       	ldi	r24, 0xEE	; 238
     978:	94 e0       	ldi	r25, 0x04	; 4
     97a:	0e 94 da 28 	call	0x51b4	; 0x51b4 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4
     97e:	47 e0       	ldi	r20, 0x07	; 7
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	64 e0       	ldi	r22, 0x04	; 4
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	8e ee       	ldi	r24, 0xEE	; 238
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN7TwoWire11requestFromEii>

	int keyNumber = 0;
     98e:	1a 82       	std	Y+2, r1	; 0x02
     990:	19 82       	std	Y+1, r1	; 0x01
	//while (Wire.available()) 
	//{ 
		//char request_c = Wire.read();		// receive a byte as character
		//keyword += request_c;
	//}
	keyNumber = Wire.read();        // receive byte as an integer
     992:	8e ee       	ldi	r24, 0xEE	; 238
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 83 29 	call	0x5306	; 0x5306 <_ZN7TwoWire4readEv>
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
	
	// Removes the last char in the received string
	//keyword = keyword.substring(0, keyword.length() - 1);
	 
	 Serial.println(keyNumber);
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	4a e0       	ldi	r20, 0x0A	; 10
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	bc 01       	movw	r22, r24
     9a8:	8a ef       	ldi	r24, 0xFA	; 250
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN5Print7printlnEii>
	 
	// Verify incoming data
	if (keyNumber == 42)
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	8a 97       	sbiw	r24, 0x2a	; 42
	{
		// toggle servo position
		moveServo();
     9b6:	09 f4       	brne	.+2      	; 0x9ba <loop+0x240>
     9b8:	29 d1       	rcall	.+594    	; 0xc0c <_Z9moveServov>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     9ba:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <isCardValid+0x1>
     9be:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <isCardValid>

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     9c2:	8a e7       	ldi	r24, 0x7A	; 122
     9c4:	93 e0       	ldi	r25, 0x03	; 3
     9c6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     9ca:	98 2f       	mov	r25, r24
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	89 27       	eor	r24, r25
     9d0:	88 23       	and	r24, r24
     9d2:	49 f4       	brne	.+18     	; 0x9e6 <loop+0x26c>
     9d4:	8a e7       	ldi	r24, 0x7A	; 122
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     9dc:	98 2f       	mov	r25, r24
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	89 27       	eor	r24, r25
     9e2:	88 23       	and	r24, r24
     9e4:	11 f0       	breq	.+4      	; 0x9ea <loop+0x270>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <loop+0x272>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	88 23       	and	r24, r24
     9ee:	59 f0       	breq	.+22     	; 0xa06 <loop+0x28c>
	{
		delay(50);
     9f0:	62 e3       	ldi	r22, 0x32	; 50
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
		isCardValid = 0;
     9fc:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <isCardValid+0x1>
     a00:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <isCardValid>
	}
	else 
	{
		isCardValid = RfidValidater();
     a04:	19 c0       	rjmp	.+50     	; 0xa38 <loop+0x2be>
     a06:	29 d0       	rcall	.+82     	; 0xa5a <_Z13RfidValidaterv>
     a08:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <isCardValid+0x1>

		// if card/chip is valid
		if (isCardValid == 1)
     a0c:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <isCardValid>
     a10:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <isCardValid>
     a14:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <isCardValid+0x1>
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	29 f4       	brne	.+10     	; 0xa26 <loop+0x2ac>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
				
			// Move servo
			moveServo();
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	45 d1       	rcall	.+650    	; 0xcac <_Z12makeBipSoundi>
     a22:	f4 d0       	rcall	.+488    	; 0xc0c <_Z9moveServov>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <loop+0x2be>
     a26:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <isCardValid>
     a2a:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <isCardValid+0x1>
     a2e:	02 97       	sbiw	r24, 0x02	; 2
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     a30:	19 f4       	brne	.+6      	; 0xa38 <loop+0x2be>
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	3a d1       	rcall	.+628    	; 0xcac <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     a38:	68 ee       	ldi	r22, 0xE8	; 232
     a3a:	73 e0       	ldi	r23, 0x03	; 3
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
}
     a44:	00 00       	nop
     a46:	e8 96       	adiw	r28, 0x38	; 56
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	08 95       	ret

00000a5a <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	69 97       	sbiw	r28, 0x19	; 25
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     a72:	ce 01       	movw	r24, r28
     a74:	44 96       	adiw	r24, 0x14	; 20
     a76:	6f e5       	ldi	r22, 0x5F	; 95
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	0e 94 ce 31 	call	0x639c	; 0x639c <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     a7e:	19 82       	std	Y+1, r1	; 0x01
     a80:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <mfrc522>
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	89 17       	cp	r24, r25
     a88:	08 f0       	brcs	.+2      	; 0xa8c <_Z13RfidValidaterv+0x32>
     a8a:	3e c0       	rjmp	.+124    	; 0xb08 <_Z13RfidValidaterv+0xae>
	{
		//Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
		//Serial.print(mfrc522.uid.uidByte[i], HEX);
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	88 2f       	mov	r24, r24
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	85 58       	subi	r24, 0x85	; 133
     a94:	9c 4f       	sbci	r25, 0xFC	; 252
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	80 31       	cpi	r24, 0x10	; 16
     a9c:	18 f4       	brcc	.+6      	; 0xaa4 <_Z13RfidValidaterv+0x4a>
     a9e:	80 e6       	ldi	r24, 0x60	; 96
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <_Z13RfidValidaterv+0x4e>
     aa4:	83 e6       	ldi	r24, 0x63	; 99
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	9e 01       	movw	r18, r28
     aaa:	22 5f       	subi	r18, 0xF2	; 242
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	bc 01       	movw	r22, r24
     ab0:	c9 01       	movw	r24, r18
     ab2:	0e 94 ce 31 	call	0x639c	; 0x639c <_ZN6StringC1EPKc>
     ab6:	9e 01       	movw	r18, r28
     ab8:	22 5f       	subi	r18, 0xF2	; 242
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	44 96       	adiw	r24, 0x14	; 20
     ac0:	b9 01       	movw	r22, r18
     ac2:	0e 94 4e 32 	call	0x649c	; 0x649c <_ZN6String6concatERKS_>
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 96       	adiw	r24, 0x0e	; 14
     aca:	0e 94 64 31 	call	0x62c8	; 0x62c8 <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	88 2f       	mov	r24, r24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	85 58       	subi	r24, 0x85	; 133
     ad6:	9c 4f       	sbci	r25, 0xFC	; 252
     ad8:	fc 01       	movw	r30, r24
     ada:	20 81       	ld	r18, Z
     adc:	ce 01       	movw	r24, r28
     ade:	08 96       	adiw	r24, 0x08	; 8
     ae0:	40 e1       	ldi	r20, 0x10	; 16
     ae2:	62 2f       	mov	r22, r18
     ae4:	0e 94 f7 31 	call	0x63ee	; 0x63ee <_ZN6StringC1Ehh>
     ae8:	9e 01       	movw	r18, r28
     aea:	28 5f       	subi	r18, 0xF8	; 248
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
     aee:	ce 01       	movw	r24, r28
     af0:	44 96       	adiw	r24, 0x14	; 20
     af2:	b9 01       	movw	r22, r18
     af4:	0e 94 4e 32 	call	0x649c	; 0x649c <_ZN6String6concatERKS_>
     af8:	ce 01       	movw	r24, r28
     afa:	08 96       	adiw	r24, 0x08	; 8
     afc:	0e 94 64 31 	call	0x62c8	; 0x62c8 <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	bc cf       	rjmp	.-136    	; 0xa80 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     b08:	ce 01       	movw	r24, r28
     b0a:	44 96       	adiw	r24, 0x14	; 20
     b0c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     b10:	ce 01       	movw	r24, r28
     b12:	02 96       	adiw	r24, 0x02	; 2
     b14:	9e 01       	movw	r18, r28
     b16:	2c 5e       	subi	r18, 0xEC	; 236
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	b9 01       	movw	r22, r18
     b20:	d1 db       	rcall	.-2142   	; 0x2c4 <_ZNK6String9substringEj>
     b22:	ce 01       	movw	r24, r28
     b24:	02 96       	adiw	r24, 0x02	; 2
     b26:	6e e8       	ldi	r22, 0x8E	; 142
     b28:	73 e0       	ldi	r23, 0x03	; 3
     b2a:	b4 db       	rcall	.-2200   	; 0x294 <_ZNK6StringeqERKS_>
     b2c:	11 e0       	ldi	r17, 0x01	; 1
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <_Z13RfidValidaterv+0xda>
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	ce 01       	movw	r24, r28
     b36:	02 96       	adiw	r24, 0x02	; 2
     b38:	0e 94 64 31 	call	0x62c8	; 0x62c8 <_ZN6StringD1Ev>
     b3c:	11 23       	and	r17, r17
     b3e:	89 f0       	breq	.+34     	; 0xb62 <_Z13RfidValidaterv+0x108>
	{
		Serial.println();
     b40:	8a ef       	ldi	r24, 0xFA	; 250
     b42:	94 e0       	ldi	r25, 0x04	; 4
     b44:	0e 94 65 2e 	call	0x5cca	; 0x5cca <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     b48:	65 e6       	ldi	r22, 0x65	; 101
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	8a ef       	ldi	r24, 0xFA	; 250
     b4e:	94 e0       	ldi	r25, 0x04	; 4
     b50:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <_ZN5Print7printlnEPKc>
		Serial.println();
     b54:	8a ef       	ldi	r24, 0xFA	; 250
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	0e 94 65 2e 	call	0x5cca	; 0x5cca <_ZN5Print7printlnEv>
		return 1;
     b5c:	01 e0       	ldi	r16, 0x01	; 1
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	10 c0       	rjmp	.+32     	; 0xb82 <_Z13RfidValidaterv+0x128>
	}
	else
	{
		Serial.println();
     b62:	8a ef       	ldi	r24, 0xFA	; 250
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	0e 94 65 2e 	call	0x5cca	; 0x5cca <_ZN5Print7printlnEv>
		Serial.println("Access denied");
     b6a:	67 e7       	ldi	r22, 0x77	; 119
     b6c:	72 e0       	ldi	r23, 0x02	; 2
     b6e:	8a ef       	ldi	r24, 0xFA	; 250
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <_ZN5Print7printlnEPKc>
		Serial.println();
     b76:	8a ef       	ldi	r24, 0xFA	; 250
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 65 2e 	call	0x5cca	; 0x5cca <_ZN5Print7printlnEv>
		return 2;
     b7e:	02 e0       	ldi	r16, 0x02	; 2
     b80:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     b82:	ce 01       	movw	r24, r28
     b84:	44 96       	adiw	r24, 0x14	; 20
     b86:	0e 94 64 31 	call	0x62c8	; 0x62c8 <_ZN6StringD1Ev>
     b8a:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     b8c:	69 96       	adiw	r28, 0x19	; 25
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     bae:	99 81       	ldd	r25, Y+1	; 0x01
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	89 27       	eor	r24, r25
     bb4:	88 23       	and	r24, r24
     bb6:	71 f0       	breq	.+28     	; 0xbd4 <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     bb8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     bbc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     bc6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     bca:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
	}
	if (status == true)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	88 23       	and	r24, r24
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     bda:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     bde:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     be8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     bec:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
	}
	delay(100);
     bf6:	64 e6       	ldi	r22, 0x64	; 100
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
}
     c02:	00 00       	nop
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     c14:	84 e9       	ldi	r24, 0x94	; 148
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	0e 94 79 22 	call	0x44f2	; 0x44f2 <_ZN5Servo4readEv>
     c1c:	21 e0       	ldi	r18, 0x01	; 1
     c1e:	84 3b       	cpi	r24, 0xB4	; 180
     c20:	91 05       	cpc	r25, r1
     c22:	09 f0       	breq	.+2      	; 0xc26 <_Z9moveServov+0x1a>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	22 23       	and	r18, r18
     c28:	81 f0       	breq	.+32     	; 0xc4a <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     c2a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c2e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
		servo.write(0);
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	84 e9       	ldi	r24, 0x94	; 148
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	ad df       	rcall	.-166    	; 0xba2 <_Z11SetRfidLedsb>
     c48:	27 c0       	rjmp	.+78     	; 0xc98 <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     c4a:	84 e9       	ldi	r24, 0x94	; 148
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <_ZN5Servo4readEv>
     c52:	21 e0       	ldi	r18, 0x01	; 1
     c54:	89 2b       	or	r24, r25
     c56:	09 f0       	breq	.+2      	; 0xc5a <_Z9moveServov+0x4e>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	22 23       	and	r18, r18
     c5c:	81 f0       	breq	.+32     	; 0xc7e <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     c5e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c62:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
		servo.write(180);
     c6c:	64 eb       	ldi	r22, 0xB4	; 180
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	84 e9       	ldi	r24, 0x94	; 148
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	93 df       	rcall	.-218    	; 0xba2 <_Z11SetRfidLedsb>
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     c7e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c82:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
		servo.write(180);
     c8c:	64 eb       	ldi	r22, 0xB4	; 180
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	84 e9       	ldi	r24, 0x94	; 148
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Servo5writeEi>
	}
	delay(100);
     c98:	64 e6       	ldi	r22, 0x64	; 100
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
}
     ca4:	00 00       	nop
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <_Z12makeBipSoundi+0x6>
     cb2:	1f 92       	push	r1
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9c 83       	std	Y+4, r25	; 0x04
     cba:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	a9 f4       	brne	.+42     	; 0xcee <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     cc4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     cc8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
		delay(100);
     cd2:	64 e6       	ldi	r22, 0x64	; 100
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     cde:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     ce2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
     cec:	35 c0       	rjmp	.+106    	; 0xd58 <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	02 97       	sbiw	r24, 0x02	; 2
     cf4:	31 f5       	brne	.+76     	; 0xd42 <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     cf6:	1a 82       	std	Y+2, r1	; 0x02
     cf8:	19 82       	std	Y+1, r1	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	03 97       	sbiw	r24, 0x03	; 3
     d00:	5c f5       	brge	.+86     	; 0xd58 <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     d02:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d06:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
			delay(100);						// tone length
     d10:	64 e6       	ldi	r22, 0x64	; 100
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     d1c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d20:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
			delay(50);						// Interval between tones
     d2a:	62 e3       	ldi	r22, 0x32	; 50
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	dc cf       	rjmp	.-72     	; 0xcfa <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	03 97       	sbiw	r24, 0x03	; 3
     d48:	39 f4       	brne	.+14     	; 0xd58 <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     d4a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d4e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
	}
	delay(100);
     d58:	64 e6       	ldi	r22, 0x64	; 100
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
     d64:	00 00       	nop
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	1f 92       	push	r1
     d7a:	1f 92       	push	r1
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	4d 96       	adiw	r24, 0x1d	; 29
     d8a:	9b d0       	rcall	.+310    	; 0xec2 <_ZN11DHT_Unified8HumidityD1Ev>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	44 96       	adiw	r24, 0x14	; 20
     d92:	64 d0       	rcall	.+200    	; 0xe5c <_ZN11DHT_Unified11TemperatureD1Ev>
     d94:	00 00       	nop
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <_Z41__static_initialization_and_destruction_0ii>:
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <_Z41__static_initialization_and_destruction_0ii+0x16>
     db6:	1f 92       	push	r1
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	9a 83       	std	Y+2, r25	; 0x02
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	7c 83       	std	Y+4, r23	; 0x04
     dc2:	6b 83       	std	Y+3, r22	; 0x03
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	49 f5       	brne	.+82     	; 0xe1e <_Z41__static_initialization_and_destruction_0ii+0x7e>
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	29 f5       	brne	.+74     	; 0xe1e <_Z41__static_initialization_and_destruction_0ii+0x7e>
byte x = 0;
int BIP_PIN = 10;					// For ALARM and feed back sound effects

#pragma region LCD Display

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display
     dd4:	24 e0       	ldi	r18, 0x04	; 4
     dd6:	44 e1       	ldi	r20, 0x14	; 20
     dd8:	67 e2       	ldi	r22, 0x27	; 39
     dda:	8e e3       	ldi	r24, 0x3E	; 62
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 63 12 	call	0x24c6	; 0x24c6 <_ZN17LiquidCrystal_I2CC1Ehhh>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     de2:	aa 24       	eor	r10, r10
     de4:	aa 94       	dec	r10
     de6:	ba 2c       	mov	r11, r10
     de8:	65 01       	movw	r12, r10
     dea:	ee 24       	eor	r14, r14
     dec:	ea 94       	dec	r14
     dee:	fe 2c       	mov	r15, r14
     df0:	87 01       	movw	r16, r14
     df2:	26 e0       	ldi	r18, 0x06	; 6
     df4:	4b e0       	ldi	r20, 0x0B	; 11
     df6:	62 e0       	ldi	r22, 0x02	; 2
     df8:	8a e4       	ldi	r24, 0x4A	; 74
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	c3 d6       	rcall	.+3462   	; 0x1b84 <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     dfe:	45 e0       	ldi	r20, 0x05	; 5
     e00:	65 e3       	ldi	r22, 0x35	; 53
     e02:	8a e7       	ldi	r24, 0x7A	; 122
     e04:	93 e0       	ldi	r25, 0x03	; 3
     e06:	0e 94 dd 15 	call	0x2bba	; 0x2bba <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e0a:	65 e8       	ldi	r22, 0x85	; 133
     e0c:	72 e0       	ldi	r23, 0x02	; 2
     e0e:	8e e8       	ldi	r24, 0x8E	; 142
     e10:	93 e0       	ldi	r25, 0x03	; 3
     e12:	0e 94 ce 31 	call	0x639c	; 0x639c <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     e16:	84 e9       	ldi	r24, 0x94	; 148
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <_ZN5ServoC1Ev>
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	89 2b       	or	r24, r25
     e24:	59 f4       	brne	.+22     	; 0xe3c <_Z41__static_initialization_and_destruction_0ii+0x9c>
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	39 f4       	brne	.+14     	; 0xe3c <_Z41__static_initialization_and_destruction_0ii+0x9c>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e2e:	8e e8       	ldi	r24, 0x8E	; 142
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	0e 94 64 31 	call	0x62c8	; 0x62c8 <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     e36:	8a e4       	ldi	r24, 0x4A	; 74
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	9c df       	rcall	.-200    	; 0xd74 <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     e3c:	00 00       	nop
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	08 95       	ret

00000e5c <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	1f 92       	push	r1
     e62:	1f 92       	push	r1
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	26 ed       	ldi	r18, 0xD6	; 214
     e6e:	32 e0       	ldi	r19, 0x02	; 2
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	fc 01       	movw	r30, r24
     e76:	31 83       	std	Z+1, r19	; 0x01
     e78:	20 83       	st	Z, r18
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	a7 da       	rcall	.-2738   	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	89 2b       	or	r24, r25
     e86:	21 f0       	breq	.+8      	; 0xe90 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <_ZdlPv>
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <_ZN11DHT_Unified11TemperatureD0Ev>:
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	1f 92       	push	r1
     ea0:	1f 92       	push	r1
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	d6 df       	rcall	.-84     	; 0xe5c <_ZN11DHT_Unified11TemperatureD1Ev>
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <_ZdlPv>
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	1f 92       	push	r1
     ec8:	1f 92       	push	r1
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	28 ec       	ldi	r18, 0xC8	; 200
     ed4:	32 e0       	ldi	r19, 0x02	; 2
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	74 da       	rcall	.-2840   	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	89 2b       	or	r24, r25
     eec:	21 f0       	breq	.+8      	; 0xef6 <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <_ZdlPv>
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <_ZN11DHT_Unified8HumidityD0Ev>:
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	1f 92       	push	r1
     f06:	1f 92       	push	r1
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	d6 df       	rcall	.-84     	; 0xec2 <_ZN11DHT_Unified8HumidityD1Ev>
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <_ZdlPv>
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <_GLOBAL__sub_I_x>:
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	6f ef       	ldi	r22, 0xFF	; 255
     f32:	7f ef       	ldi	r23, 0xFF	; 255
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	33 df       	rcall	.-410    	; 0xda0 <_Z41__static_initialization_and_destruction_0ii>
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <_GLOBAL__sub_D_x>:
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	6f ef       	ldi	r22, 0xFF	; 255
     f4a:	7f ef       	ldi	r23, 0xFF	; 255
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	27 df       	rcall	.-434    	; 0xda0 <_Z41__static_initialization_and_destruction_0ii>
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	1f 92       	push	r1
     f5e:	1f 92       	push	r1
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	f8 94       	cli
     f6a:	00 00       	nop
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <_ZN13InterruptLockD1Ev>:
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	1f 92       	push	r1
     f7c:	1f 92       	push	r1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	78 94       	sei
     f88:	00 00       	nop
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <_ZN3DHTC1Ehhh>:
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	2b 97       	sbiw	r28, 0x0b	; 11
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	98 87       	std	Y+8, r25	; 0x08
     faa:	8f 83       	std	Y+7, r24	; 0x07
     fac:	69 87       	std	Y+9, r22	; 0x09
     fae:	4a 87       	std	Y+10, r20	; 0x0a
     fb0:	2b 87       	std	Y+11, r18	; 0x0b
     fb2:	8f 81       	ldd	r24, Y+7	; 0x07
     fb4:	98 85       	ldd	r25, Y+8	; 0x08
     fb6:	29 85       	ldd	r18, Y+9	; 0x09
     fb8:	fc 01       	movw	r30, r24
     fba:	25 83       	std	Z+5, r18	; 0x05
     fbc:	8f 81       	ldd	r24, Y+7	; 0x07
     fbe:	98 85       	ldd	r25, Y+8	; 0x08
     fc0:	2a 85       	ldd	r18, Y+10	; 0x0a
     fc2:	fc 01       	movw	r30, r24
     fc4:	26 83       	std	Z+6, r18	; 0x06
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	82 5b       	subi	r24, 0xB2	; 178
     fce:	9e 4f       	sbci	r25, 0xFE	; 254
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	fc 01       	movw	r30, r24
     fda:	84 91       	lpm	r24, Z
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	98 85       	ldd	r25, Y+8	; 0x08
     fe2:	2b 81       	ldd	r18, Y+3	; 0x03
     fe4:	fc 01       	movw	r30, r24
     fe6:	27 83       	std	Z+7, r18	; 0x07
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	8c 56       	subi	r24, 0x6C	; 108
     ff0:	9e 4f       	sbci	r25, 0xFE	; 254
     ff2:	9d 83       	std	Y+5, r25	; 0x05
     ff4:	8c 83       	std	Y+4, r24	; 0x04
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	fc 01       	movw	r30, r24
     ffc:	84 91       	lpm	r24, Z
     ffe:	8e 83       	std	Y+6, r24	; 0x06
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	2e 81       	ldd	r18, Y+6	; 0x06
    1006:	fc 01       	movw	r30, r24
    1008:	20 87       	std	Z+8, r18	; 0x08
    100a:	2f 81       	ldd	r18, Y+7	; 0x07
    100c:	38 85       	ldd	r19, Y+8	; 0x08
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	9e e3       	ldi	r25, 0x3E	; 62
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	85 87       	std	Z+13, r24	; 0x0d
    101a:	96 87       	std	Z+14, r25	; 0x0e
    101c:	a7 87       	std	Z+15, r26	; 0x0f
    101e:	b0 8b       	std	Z+16, r27	; 0x10
    1020:	00 00       	nop
    1022:	2b 96       	adiw	r28, 0x0b	; 11
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <_ZN3DHT5beginEh>:
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	00 d0       	rcall	.+0      	; 0x103a <_ZN3DHT5beginEh+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	6b 83       	std	Y+3, r22	; 0x03
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	fc 01       	movw	r30, r24
    104a:	85 81       	ldd	r24, Z+5	; 0x05
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
    1052:	0e 94 67 2f 	call	0x5ece	; 0x5ece <millis>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	80 5d       	subi	r24, 0xD0	; 208
    105c:	97 40       	sbci	r25, 0x07	; 7
    105e:	a1 09       	sbc	r26, r1
    1060:	b1 09       	sbc	r27, r1
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	3a 81       	ldd	r19, Y+2	; 0x02
    1066:	f9 01       	movw	r30, r18
    1068:	81 87       	std	Z+9, r24	; 0x09
    106a:	92 87       	std	Z+10, r25	; 0x0a
    106c:	a3 87       	std	Z+11, r26	; 0x0b
    106e:	b4 87       	std	Z+12, r27	; 0x0c
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	2b 81       	ldd	r18, Y+3	; 0x03
    1076:	fc 01       	movw	r30, r24
    1078:	22 8b       	std	Z+18, r18	; 0x12
    107a:	00 00       	nop
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_ZN3DHT15readTemperatureEbb>:
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	28 97       	sbiw	r28, 0x08	; 8
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	6f 83       	std	Y+7, r22	; 0x07
    10a2:	48 87       	std	Y+8, r20	; 0x08
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a0 ec       	ldi	r26, 0xC0	; 192
    10aa:	bf e7       	ldi	r27, 0x7F	; 127
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	ab 83       	std	Y+3, r26	; 0x03
    10b2:	bc 83       	std	Y+4, r27	; 0x04
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	68 85       	ldd	r22, Y+8	; 0x08
    10ba:	1d d2       	rcall	.+1082   	; 0x14f6 <_ZN3DHT4readEb>
    10bc:	88 23       	and	r24, r24
    10be:	09 f4       	brne	.+2      	; 0x10c2 <_ZN3DHT15readTemperatureEbb+0x3a>
    10c0:	34 c1       	rjmp	.+616    	; 0x132a <_ZN3DHT15readTemperatureEbb+0x2a2>
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	fc 01       	movw	r30, r24
    10c8:	86 81       	ldd	r24, Z+6	; 0x06
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	8c 30       	cpi	r24, 0x0C	; 12
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <_ZN3DHT15readTemperatureEbb+0x4e>
    10d4:	72 c0       	rjmp	.+228    	; 0x11ba <_ZN3DHT15readTemperatureEbb+0x132>
    10d6:	8d 30       	cpi	r24, 0x0D	; 13
    10d8:	91 05       	cpc	r25, r1
    10da:	1c f4       	brge	.+6      	; 0x10e2 <_ZN3DHT15readTemperatureEbb+0x5a>
    10dc:	0b 97       	sbiw	r24, 0x0b	; 11
    10de:	31 f0       	breq	.+12     	; 0x10ec <_ZN3DHT15readTemperatureEbb+0x64>
    10e0:	24 c1       	rjmp	.+584    	; 0x132a <_ZN3DHT15readTemperatureEbb+0x2a2>
    10e2:	45 97       	sbiw	r24, 0x15	; 21
    10e4:	02 97       	sbiw	r24, 0x02	; 2
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <_ZN3DHT15readTemperatureEbb+0x62>
    10e8:	20 c1       	rjmp	.+576    	; 0x132a <_ZN3DHT15readTemperatureEbb+0x2a2>
    10ea:	c7 c0       	rjmp	.+398    	; 0x127a <_ZN3DHT15readTemperatureEbb+0x1f2>
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	fc 01       	movw	r30, r24
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a0 e0       	ldi	r26, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 09 2b 	call	0x5612	; 0x5612 <__floatunsisf>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	ab 83       	std	Y+3, r26	; 0x03
    110e:	bc 83       	std	Y+4, r27	; 0x04
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	fc 01       	movw	r30, r24
    1116:	83 81       	ldd	r24, Z+3	; 0x03
    1118:	88 23       	and	r24, r24
    111a:	84 f4       	brge	.+32     	; 0x113c <_ZN3DHT15readTemperatureEbb+0xb4>
    111c:	29 81       	ldd	r18, Y+1	; 0x01
    111e:	3a 81       	ldd	r19, Y+2	; 0x02
    1120:	4b 81       	ldd	r20, Y+3	; 0x03
    1122:	5c 81       	ldd	r21, Y+4	; 0x04
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	80 e8       	ldi	r24, 0x80	; 128
    112a:	9f eb       	ldi	r25, 0xBF	; 191
    112c:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <__subsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	ab 83       	std	Y+3, r26	; 0x03
    113a:	bc 83       	std	Y+4, r27	; 0x04
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	fc 01       	movw	r30, r24
    1142:	83 81       	ldd	r24, Z+3	; 0x03
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	99 27       	eor	r25, r25
    114c:	09 2e       	mov	r0, r25
    114e:	00 0c       	add	r0, r0
    1150:	aa 0b       	sbc	r26, r26
    1152:	bb 0b       	sbc	r27, r27
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__floatsisf>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	2d ec       	ldi	r18, 0xCD	; 205
    1162:	3c ec       	ldi	r19, 0xCC	; 204
    1164:	4c ec       	ldi	r20, 0xCC	; 204
    1166:	5d e3       	ldi	r21, 0x3D	; 61
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9c 01       	movw	r18, r24
    1176:	ad 01       	movw	r20, r26
    1178:	69 81       	ldd	r22, Y+1	; 0x01
    117a:	7a 81       	ldd	r23, Y+2	; 0x02
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__addsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	ab 83       	std	Y+3, r26	; 0x03
    118e:	bc 83       	std	Y+4, r27	; 0x04
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	88 23       	and	r24, r24
    1194:	09 f4       	brne	.+2      	; 0x1198 <_ZN3DHT15readTemperatureEbb+0x110>
    1196:	c4 c0       	rjmp	.+392    	; 0x1320 <_ZN3DHT15readTemperatureEbb+0x298>
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	ab 81       	ldd	r26, Y+3	; 0x03
    119e:	bc 81       	ldd	r27, Y+4	; 0x04
    11a0:	2d 81       	ldd	r18, Y+5	; 0x05
    11a2:	3e 81       	ldd	r19, Y+6	; 0x06
    11a4:	ac 01       	movw	r20, r24
    11a6:	bd 01       	movw	r22, r26
    11a8:	c9 01       	movw	r24, r18
    11aa:	ce d0       	rcall	.+412    	; 0x1348 <_ZN3DHT11convertCtoFEf>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	ab 83       	std	Y+3, r26	; 0x03
    11b6:	bc 83       	std	Y+4, r27	; 0x04
    11b8:	b3 c0       	rjmp	.+358    	; 0x1320 <_ZN3DHT15readTemperatureEbb+0x298>
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	fc 01       	movw	r30, r24
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 e0       	ldi	r26, 0x00	; 0
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 09 2b 	call	0x5612	; 0x5612 <__floatunsisf>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	ab 83       	std	Y+3, r26	; 0x03
    11dc:	bc 83       	std	Y+4, r27	; 0x04
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	fc 01       	movw	r30, r24
    11e4:	83 81       	ldd	r24, Z+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	8f 70       	andi	r24, 0x0F	; 15
    11ec:	99 27       	eor	r25, r25
    11ee:	09 2e       	mov	r0, r25
    11f0:	00 0c       	add	r0, r0
    11f2:	aa 0b       	sbc	r26, r26
    11f4:	bb 0b       	sbc	r27, r27
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__floatsisf>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	2d ec       	ldi	r18, 0xCD	; 205
    1204:	3c ec       	ldi	r19, 0xCC	; 204
    1206:	4c ec       	ldi	r20, 0xCC	; 204
    1208:	5d e3       	ldi	r21, 0x3D	; 61
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9c 01       	movw	r18, r24
    1218:	ad 01       	movw	r20, r26
    121a:	69 81       	ldd	r22, Y+1	; 0x01
    121c:	7a 81       	ldd	r23, Y+2	; 0x02
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__addsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	ab 83       	std	Y+3, r26	; 0x03
    1230:	bc 83       	std	Y+4, r27	; 0x04
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	fc 01       	movw	r30, r24
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	88 23       	and	r24, r24
    123c:	4c f4       	brge	.+18     	; 0x1250 <_ZN3DHT15readTemperatureEbb+0x1c8>
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	ab 81       	ldd	r26, Y+3	; 0x03
    1244:	bc 81       	ldd	r27, Y+4	; 0x04
    1246:	b0 58       	subi	r27, 0x80	; 128
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	ab 83       	std	Y+3, r26	; 0x03
    124e:	bc 83       	std	Y+4, r27	; 0x04
    1250:	8f 81       	ldd	r24, Y+7	; 0x07
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <_ZN3DHT15readTemperatureEbb+0x1d0>
    1256:	66 c0       	rjmp	.+204    	; 0x1324 <_ZN3DHT15readTemperatureEbb+0x29c>
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	ab 81       	ldd	r26, Y+3	; 0x03
    125e:	bc 81       	ldd	r27, Y+4	; 0x04
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	ac 01       	movw	r20, r24
    1266:	bd 01       	movw	r22, r26
    1268:	c9 01       	movw	r24, r18
    126a:	6e d0       	rcall	.+220    	; 0x1348 <_ZN3DHT11convertCtoFEf>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	ab 83       	std	Y+3, r26	; 0x03
    1276:	bc 83       	std	Y+4, r27	; 0x04
    1278:	55 c0       	rjmp	.+170    	; 0x1324 <_ZN3DHT15readTemperatureEbb+0x29c>
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	fc 01       	movw	r30, r24
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	8f 77       	andi	r24, 0x7F	; 127
    1288:	99 27       	eor	r25, r25
    128a:	38 2f       	mov	r19, r24
    128c:	22 27       	eor	r18, r18
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	fc 01       	movw	r30, r24
    1294:	83 81       	ldd	r24, Z+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	82 2b       	or	r24, r18
    129c:	93 2b       	or	r25, r19
    129e:	cc 01       	movw	r24, r24
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 09 2b 	call	0x5612	; 0x5612 <__floatunsisf>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	ab 83       	std	Y+3, r26	; 0x03
    12b6:	bc 83       	std	Y+4, r27	; 0x04
    12b8:	2d ec       	ldi	r18, 0xCD	; 205
    12ba:	3c ec       	ldi	r19, 0xCC	; 204
    12bc:	4c ec       	ldi	r20, 0xCC	; 204
    12be:	5d e3       	ldi	r21, 0x3D	; 61
    12c0:	69 81       	ldd	r22, Y+1	; 0x01
    12c2:	7a 81       	ldd	r23, Y+2	; 0x02
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	ab 83       	std	Y+3, r26	; 0x03
    12d6:	bc 83       	std	Y+4, r27	; 0x04
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	fc 01       	movw	r30, r24
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	88 23       	and	r24, r24
    12e2:	4c f4       	brge	.+18     	; 0x12f6 <_ZN3DHT15readTemperatureEbb+0x26e>
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	ab 81       	ldd	r26, Y+3	; 0x03
    12ea:	bc 81       	ldd	r27, Y+4	; 0x04
    12ec:	b0 58       	subi	r27, 0x80	; 128
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	ab 83       	std	Y+3, r26	; 0x03
    12f4:	bc 83       	std	Y+4, r27	; 0x04
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	88 23       	and	r24, r24
    12fa:	b1 f0       	breq	.+44     	; 0x1328 <_ZN3DHT15readTemperatureEbb+0x2a0>
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	ab 81       	ldd	r26, Y+3	; 0x03
    1302:	bc 81       	ldd	r27, Y+4	; 0x04
    1304:	2d 81       	ldd	r18, Y+5	; 0x05
    1306:	3e 81       	ldd	r19, Y+6	; 0x06
    1308:	ac 01       	movw	r20, r24
    130a:	bd 01       	movw	r22, r26
    130c:	c9 01       	movw	r24, r18
    130e:	1c d0       	rcall	.+56     	; 0x1348 <_ZN3DHT11convertCtoFEf>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	ab 83       	std	Y+3, r26	; 0x03
    131a:	bc 83       	std	Y+4, r27	; 0x04
    131c:	00 00       	nop
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <_ZN3DHT15readTemperatureEbb+0x2a0>
    1320:	00 00       	nop
    1322:	03 c0       	rjmp	.+6      	; 0x132a <_ZN3DHT15readTemperatureEbb+0x2a2>
    1324:	00 00       	nop
    1326:	01 c0       	rjmp	.+2      	; 0x132a <_ZN3DHT15readTemperatureEbb+0x2a2>
    1328:	00 00       	nop
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	ab 81       	ldd	r26, Y+3	; 0x03
    1330:	bc 81       	ldd	r27, Y+4	; 0x04
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	28 96       	adiw	r28, 0x08	; 8
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <_ZN3DHT11convertCtoFEf>:
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	00 d0       	rcall	.+0      	; 0x134e <_ZN3DHT11convertCtoFEf+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <_ZN3DHT11convertCtoFEf+0x8>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	4b 83       	std	Y+3, r20	; 0x03
    135a:	5c 83       	std	Y+4, r21	; 0x04
    135c:	6d 83       	std	Y+5, r22	; 0x05
    135e:	7e 83       	std	Y+6, r23	; 0x06
    1360:	26 e6       	ldi	r18, 0x66	; 102
    1362:	36 e6       	ldi	r19, 0x66	; 102
    1364:	46 ee       	ldi	r20, 0xE6	; 230
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	6b 81       	ldd	r22, Y+3	; 0x03
    136a:	7c 81       	ldd	r23, Y+4	; 0x04
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	52 e4       	ldi	r21, 0x42	; 66
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__addsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	26 96       	adiw	r28, 0x06	; 6
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <_ZN3DHT12readHumidityEb>:
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	27 97       	sbiw	r28, 0x07	; 7
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	6f 83       	std	Y+7, r22	; 0x07
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a0 ec       	ldi	r26, 0xC0	; 192
    13ca:	bf e7       	ldi	r27, 0x7F	; 127
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	ab 83       	std	Y+3, r26	; 0x03
    13d2:	bc 83       	std	Y+4, r27	; 0x04
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	8d d0       	rcall	.+282    	; 0x14f6 <_ZN3DHT4readEb>
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <_ZN3DHT12readHumidityEb+0x40>
    13e0:	77 c0       	rjmp	.+238    	; 0x14d0 <_ZN3DHT12readHumidityEb+0x12e>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	fc 01       	movw	r30, r24
    13e8:	86 81       	ldd	r24, Z+6	; 0x06
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	8b 30       	cpi	r24, 0x0B	; 11
    13f0:	91 05       	cpc	r25, r1
    13f2:	0c f4       	brge	.+2      	; 0x13f6 <_ZN3DHT12readHumidityEb+0x54>
    13f4:	6d c0       	rjmp	.+218    	; 0x14d0 <_ZN3DHT12readHumidityEb+0x12e>
    13f6:	8d 30       	cpi	r24, 0x0D	; 13
    13f8:	91 05       	cpc	r25, r1
    13fa:	2c f0       	brlt	.+10     	; 0x1406 <_ZN3DHT12readHumidityEb+0x64>
    13fc:	45 97       	sbiw	r24, 0x15	; 21
    13fe:	02 97       	sbiw	r24, 0x02	; 2
    1400:	08 f0       	brcs	.+2      	; 0x1404 <_ZN3DHT12readHumidityEb+0x62>
    1402:	66 c0       	rjmp	.+204    	; 0x14d0 <_ZN3DHT12readHumidityEb+0x12e>
    1404:	37 c0       	rjmp	.+110    	; 0x1474 <_ZN3DHT12readHumidityEb+0xd2>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	09 2e       	mov	r0, r25
    1414:	00 0c       	add	r0, r0
    1416:	aa 0b       	sbc	r26, r26
    1418:	bb 0b       	sbc	r27, r27
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__floatsisf>
    1422:	6b 01       	movw	r12, r22
    1424:	7c 01       	movw	r14, r24
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	fc 01       	movw	r30, r24
    142c:	81 81       	ldd	r24, Z+1	; 0x01
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	09 2e       	mov	r0, r25
    1434:	00 0c       	add	r0, r0
    1436:	aa 0b       	sbc	r26, r26
    1438:	bb 0b       	sbc	r27, r27
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__floatsisf>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	2d ec       	ldi	r18, 0xCD	; 205
    1448:	3c ec       	ldi	r19, 0xCC	; 204
    144a:	4c ec       	ldi	r20, 0xCC	; 204
    144c:	5d e3       	ldi	r21, 0x3D	; 61
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9c 01       	movw	r18, r24
    145c:	ad 01       	movw	r20, r26
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__addsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	ab 83       	std	Y+3, r26	; 0x03
    1470:	bc 83       	std	Y+4, r27	; 0x04
    1472:	2e c0       	rjmp	.+92     	; 0x14d0 <_ZN3DHT12readHumidityEb+0x12e>
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	38 2f       	mov	r19, r24
    1482:	22 27       	eor	r18, r18
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	fc 01       	movw	r30, r24
    148a:	81 81       	ldd	r24, Z+1	; 0x01
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	82 2b       	or	r24, r18
    1492:	93 2b       	or	r25, r19
    1494:	cc 01       	movw	r24, r24
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 09 2b 	call	0x5612	; 0x5612 <__floatunsisf>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	ab 83       	std	Y+3, r26	; 0x03
    14ac:	bc 83       	std	Y+4, r27	; 0x04
    14ae:	2d ec       	ldi	r18, 0xCD	; 205
    14b0:	3c ec       	ldi	r19, 0xCC	; 204
    14b2:	4c ec       	ldi	r20, 0xCC	; 204
    14b4:	5d e3       	ldi	r21, 0x3D	; 61
    14b6:	69 81       	ldd	r22, Y+1	; 0x01
    14b8:	7a 81       	ldd	r23, Y+2	; 0x02
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	ab 83       	std	Y+3, r26	; 0x03
    14cc:	bc 83       	std	Y+4, r27	; 0x04
    14ce:	00 00       	nop
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	ab 81       	ldd	r26, Y+3	; 0x03
    14d6:	bc 81       	ldd	r27, Y+4	; 0x04
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	27 96       	adiw	r28, 0x07	; 7
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	08 95       	ret

000014f6 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	c4 55       	subi	r28, 0x54	; 84
    150e:	d1 40       	sbci	r29, 0x01	; 1
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	9e 01       	movw	r18, r28
    151c:	2e 5a       	subi	r18, 0xAE	; 174
    151e:	3e 4f       	sbci	r19, 0xFE	; 254
    1520:	f9 01       	movw	r30, r18
    1522:	91 83       	std	Z+1, r25	; 0x01
    1524:	80 83       	st	Z, r24
    1526:	ce 01       	movw	r24, r28
    1528:	8c 5a       	subi	r24, 0xAC	; 172
    152a:	9e 4f       	sbci	r25, 0xFE	; 254
    152c:	fc 01       	movw	r30, r24
    152e:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1530:	0e 94 67 2f 	call	0x5ece	; 0x5ece <millis>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	af 83       	std	Y+7, r26	; 0x07
    153e:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1540:	ce 01       	movw	r24, r28
    1542:	8c 5a       	subi	r24, 0xAC	; 172
    1544:	9e 4f       	sbci	r25, 0xFE	; 254
    1546:	fc 01       	movw	r30, r24
    1548:	90 81       	ld	r25, Z
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 27       	eor	r24, r25
    154e:	88 23       	and	r24, r24
    1550:	29 f1       	breq	.+74     	; 0x159c <_ZN3DHT4readEb+0xa6>
    1552:	ce 01       	movw	r24, r28
    1554:	8e 5a       	subi	r24, 0xAE	; 174
    1556:	9e 4f       	sbci	r25, 0xFE	; 254
    1558:	fc 01       	movw	r30, r24
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	fc 01       	movw	r30, r24
    1560:	81 85       	ldd	r24, Z+9	; 0x09
    1562:	92 85       	ldd	r25, Z+10	; 0x0a
    1564:	a3 85       	ldd	r26, Z+11	; 0x0b
    1566:	b4 85       	ldd	r27, Z+12	; 0x0c
    1568:	2d 81       	ldd	r18, Y+5	; 0x05
    156a:	3e 81       	ldd	r19, Y+6	; 0x06
    156c:	4f 81       	ldd	r20, Y+7	; 0x07
    156e:	58 85       	ldd	r21, Y+8	; 0x08
    1570:	59 01       	movw	r10, r18
    1572:	6a 01       	movw	r12, r20
    1574:	a8 1a       	sub	r10, r24
    1576:	b9 0a       	sbc	r11, r25
    1578:	ca 0a       	sbc	r12, r26
    157a:	db 0a       	sbc	r13, r27
    157c:	d6 01       	movw	r26, r12
    157e:	c5 01       	movw	r24, r10
    1580:	80 3d       	cpi	r24, 0xD0	; 208
    1582:	97 40       	sbci	r25, 0x07	; 7
    1584:	a1 05       	cpc	r26, r1
    1586:	b1 05       	cpc	r27, r1
    1588:	48 f4       	brcc	.+18     	; 0x159c <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    158a:	ce 01       	movw	r24, r28
    158c:	8e 5a       	subi	r24, 0xAE	; 174
    158e:	9e 4f       	sbci	r25, 0xFE	; 254
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	fc 01       	movw	r30, r24
    1598:	f1 88       	ldd	r15, Z+17	; 0x11
    159a:	5f c2       	rjmp	.+1214   	; 0x1a5a <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    159c:	ce 01       	movw	r24, r28
    159e:	8e 5a       	subi	r24, 0xAE	; 174
    15a0:	9e 4f       	sbci	r25, 0xFE	; 254
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 81       	ld	r18, Z
    15a6:	31 81       	ldd	r19, Z+1	; 0x01
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	af 81       	ldd	r26, Y+7	; 0x07
    15ae:	b8 85       	ldd	r27, Y+8	; 0x08
    15b0:	f9 01       	movw	r30, r18
    15b2:	81 87       	std	Z+9, r24	; 0x09
    15b4:	92 87       	std	Z+10, r25	; 0x0a
    15b6:	a3 87       	std	Z+11, r26	; 0x0b
    15b8:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    15ba:	ce 01       	movw	r24, r28
    15bc:	8e 5a       	subi	r24, 0xAE	; 174
    15be:	9e 4f       	sbci	r25, 0xFE	; 254
    15c0:	fc 01       	movw	r30, r24
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	fc 01       	movw	r30, r24
    15c8:	14 82       	std	Z+4, r1	; 0x04
    15ca:	ce 01       	movw	r24, r28
    15cc:	8e 5a       	subi	r24, 0xAE	; 174
    15ce:	9e 4f       	sbci	r25, 0xFE	; 254
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	fc 01       	movw	r30, r24
    15d8:	24 81       	ldd	r18, Z+4	; 0x04
    15da:	ce 01       	movw	r24, r28
    15dc:	8e 5a       	subi	r24, 0xAE	; 174
    15de:	9e 4f       	sbci	r25, 0xFE	; 254
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	fc 01       	movw	r30, r24
    15e8:	23 83       	std	Z+3, r18	; 0x03
    15ea:	ce 01       	movw	r24, r28
    15ec:	8e 5a       	subi	r24, 0xAE	; 174
    15ee:	9e 4f       	sbci	r25, 0xFE	; 254
    15f0:	fc 01       	movw	r30, r24
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	fc 01       	movw	r30, r24
    15f8:	23 81       	ldd	r18, Z+3	; 0x03
    15fa:	ce 01       	movw	r24, r28
    15fc:	8e 5a       	subi	r24, 0xAE	; 174
    15fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	fc 01       	movw	r30, r24
    1608:	22 83       	std	Z+2, r18	; 0x02
    160a:	ce 01       	movw	r24, r28
    160c:	8e 5a       	subi	r24, 0xAE	; 174
    160e:	9e 4f       	sbci	r25, 0xFE	; 254
    1610:	fc 01       	movw	r30, r24
    1612:	80 81       	ld	r24, Z
    1614:	91 81       	ldd	r25, Z+1	; 0x01
    1616:	fc 01       	movw	r30, r24
    1618:	22 81       	ldd	r18, Z+2	; 0x02
    161a:	ce 01       	movw	r24, r28
    161c:	8e 5a       	subi	r24, 0xAE	; 174
    161e:	9e 4f       	sbci	r25, 0xFE	; 254
    1620:	fc 01       	movw	r30, r24
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	fc 01       	movw	r30, r24
    1628:	21 83       	std	Z+1, r18	; 0x01
    162a:	ce 01       	movw	r24, r28
    162c:	8e 5a       	subi	r24, 0xAE	; 174
    162e:	9e 4f       	sbci	r25, 0xFE	; 254
    1630:	fc 01       	movw	r30, r24
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	fc 01       	movw	r30, r24
    1638:	21 81       	ldd	r18, Z+1	; 0x01
    163a:	ce 01       	movw	r24, r28
    163c:	8e 5a       	subi	r24, 0xAE	; 174
    163e:	9e 4f       	sbci	r25, 0xFE	; 254
    1640:	fc 01       	movw	r30, r24
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    164a:	ce 01       	movw	r24, r28
    164c:	8e 5a       	subi	r24, 0xAE	; 174
    164e:	9e 4f       	sbci	r25, 0xFE	; 254
    1650:	fc 01       	movw	r30, r24
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	fc 01       	movw	r30, r24
    1658:	85 81       	ldd	r24, Z+5	; 0x05
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
  delay(1);
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    166c:	ce 01       	movw	r24, r28
    166e:	8e 5a       	subi	r24, 0xAE	; 174
    1670:	9e 4f       	sbci	r25, 0xFE	; 254
    1672:	fc 01       	movw	r30, r24
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	fc 01       	movw	r30, r24
    167a:	85 81       	ldd	r24, Z+5	; 0x05
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
  digitalWrite(_pin, LOW);
    1682:	ce 01       	movw	r24, r28
    1684:	8e 5a       	subi	r24, 0xAE	; 174
    1686:	9e 4f       	sbci	r25, 0xFE	; 254
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	fc 01       	movw	r30, r24
    1690:	85 81       	ldd	r24, Z+5	; 0x05
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
  switch (_type) {
    1698:	ce 01       	movw	r24, r28
    169a:	8e 5a       	subi	r24, 0xAE	; 174
    169c:	9e 4f       	sbci	r25, 0xFE	; 254
    169e:	fc 01       	movw	r30, r24
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	fc 01       	movw	r30, r24
    16a6:	86 81       	ldd	r24, Z+6	; 0x06
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	45 97       	sbiw	r24, 0x15	; 21
    16ae:	02 97       	sbiw	r24, 0x02	; 2
    16b0:	28 f4       	brcc	.+10     	; 0x16bc <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    16b2:	8c e4       	ldi	r24, 0x4C	; 76
    16b4:	94 e0       	ldi	r25, 0x04	; 4
    16b6:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
    break;
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    16bc:	64 e1       	ldi	r22, 0x14	; 20
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
    break;
    16c8:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    16ca:	ce 01       	movw	r24, r28
    16cc:	8e 5a       	subi	r24, 0xAE	; 174
    16ce:	9e 4f       	sbci	r25, 0xFE	; 254
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	fc 01       	movw	r30, r24
    16d8:	85 81       	ldd	r24, Z+5	; 0x05
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    16e0:	ce 01       	movw	r24, r28
    16e2:	8e 5a       	subi	r24, 0xAE	; 174
    16e4:	9e 4f       	sbci	r25, 0xFE	; 254
    16e6:	fc 01       	movw	r30, r24
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	fc 01       	movw	r30, r24
    16ee:	82 89       	ldd	r24, Z+18	; 0x12
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    16f8:	ce 01       	movw	r24, r28
    16fa:	8f 5a       	subi	r24, 0xAF	; 175
    16fc:	9e 4f       	sbci	r25, 0xFE	; 254
    16fe:	2c dc       	rcall	.-1960   	; 0xf58 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1700:	ce 01       	movw	r24, r28
    1702:	8e 5a       	subi	r24, 0xAE	; 174
    1704:	9e 4f       	sbci	r25, 0xFE	; 254
    1706:	fc 01       	movw	r30, r24
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	b7 d1       	rcall	.+878    	; 0x1a7e <_ZN3DHT11expectPulseEb>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	21 e0       	ldi	r18, 0x01	; 1
    1716:	8f 3f       	cpi	r24, 0xFF	; 255
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	af 4f       	sbci	r26, 0xFF	; 255
    171c:	bf 4f       	sbci	r27, 0xFF	; 255
    171e:	09 f0       	breq	.+2      	; 0x1722 <_ZN3DHT4readEb+0x22c>
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	22 23       	and	r18, r18
    1724:	99 f0       	breq	.+38     	; 0x174c <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    1726:	ce 01       	movw	r24, r28
    1728:	8e 5a       	subi	r24, 0xAE	; 174
    172a:	9e 4f       	sbci	r25, 0xFE	; 254
    172c:	fc 01       	movw	r30, r24
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	fc 01       	movw	r30, r24
    1734:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1736:	ce 01       	movw	r24, r28
    1738:	8e 5a       	subi	r24, 0xAE	; 174
    173a:	9e 4f       	sbci	r25, 0xFE	; 254
    173c:	fc 01       	movw	r30, r24
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	fc 01       	movw	r30, r24
    1744:	f1 88       	ldd	r15, Z+17	; 0x11
    1746:	00 e0       	ldi	r16, 0x00	; 0
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	72 c0       	rjmp	.+228    	; 0x1830 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    174c:	ce 01       	movw	r24, r28
    174e:	8e 5a       	subi	r24, 0xAE	; 174
    1750:	9e 4f       	sbci	r25, 0xFE	; 254
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	91 d1       	rcall	.+802    	; 0x1a7e <_ZN3DHT11expectPulseEb>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	8f 3f       	cpi	r24, 0xFF	; 255
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	af 4f       	sbci	r26, 0xFF	; 255
    1768:	bf 4f       	sbci	r27, 0xFF	; 255
    176a:	09 f0       	breq	.+2      	; 0x176e <_ZN3DHT4readEb+0x278>
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	22 23       	and	r18, r18
    1770:	99 f0       	breq	.+38     	; 0x1798 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    1772:	ce 01       	movw	r24, r28
    1774:	8e 5a       	subi	r24, 0xAE	; 174
    1776:	9e 4f       	sbci	r25, 0xFE	; 254
    1778:	fc 01       	movw	r30, r24
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	fc 01       	movw	r30, r24
    1780:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1782:	ce 01       	movw	r24, r28
    1784:	8e 5a       	subi	r24, 0xAE	; 174
    1786:	9e 4f       	sbci	r25, 0xFE	; 254
    1788:	fc 01       	movw	r30, r24
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	fc 01       	movw	r30, r24
    1790:	f1 88       	ldd	r15, Z+17	; 0x11
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	4c c0       	rjmp	.+152    	; 0x1830 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1798:	1a 82       	std	Y+2, r1	; 0x02
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	80 35       	cpi	r24, 0x50	; 80
    17a2:	91 05       	cpc	r25, r1
    17a4:	0c f0       	brlt	.+2      	; 0x17a8 <_ZN3DHT4readEb+0x2b2>
    17a6:	42 c0       	rjmp	.+132    	; 0x182c <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    17a8:	ce 01       	movw	r24, r28
    17aa:	8e 5a       	subi	r24, 0xAE	; 174
    17ac:	9e 4f       	sbci	r25, 0xFE	; 254
    17ae:	fc 01       	movw	r30, r24
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	63 d1       	rcall	.+710    	; 0x1a7e <_ZN3DHT11expectPulseEb>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	29 81       	ldd	r18, Y+1	; 0x01
    17be:	3a 81       	ldd	r19, Y+2	; 0x02
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	ae 01       	movw	r20, r28
    17ca:	4f 5f       	subi	r20, 0xFF	; 255
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255
    17ce:	24 0f       	add	r18, r20
    17d0:	35 1f       	adc	r19, r21
    17d2:	20 5f       	subi	r18, 0xF0	; 240
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	f9 01       	movw	r30, r18
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	8c 01       	movw	r16, r24
    17e6:	0f 5f       	subi	r16, 0xFF	; 255
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	ce 01       	movw	r24, r28
    17ec:	8e 5a       	subi	r24, 0xAE	; 174
    17ee:	9e 4f       	sbci	r25, 0xFE	; 254
    17f0:	fc 01       	movw	r30, r24
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	42 d1       	rcall	.+644    	; 0x1a7e <_ZN3DHT11expectPulseEb>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	98 01       	movw	r18, r16
    1800:	22 0f       	add	r18, r18
    1802:	33 1f       	adc	r19, r19
    1804:	22 0f       	add	r18, r18
    1806:	33 1f       	adc	r19, r19
    1808:	ae 01       	movw	r20, r28
    180a:	4f 5f       	subi	r20, 0xFF	; 255
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	24 0f       	add	r18, r20
    1810:	35 1f       	adc	r19, r21
    1812:	20 5f       	subi	r18, 0xF0	; 240
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	f9 01       	movw	r30, r18
    1818:	80 83       	st	Z, r24
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	a2 83       	std	Z+2, r26	; 0x02
    181e:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	02 96       	adiw	r24, 0x02	; 2
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	b8 cf       	rjmp	.-144    	; 0x179c <_ZN3DHT4readEb+0x2a6>
    182c:	01 e0       	ldi	r16, 0x01	; 1
    182e:	10 e0       	ldi	r17, 0x00	; 0
    1830:	ce 01       	movw	r24, r28
    1832:	8f 5a       	subi	r24, 0xAF	; 175
    1834:	9e 4f       	sbci	r25, 0xFE	; 254
    1836:	9f db       	rcall	.-2242   	; 0xf76 <_ZN13InterruptLockD1Ev>
    1838:	01 30       	cpi	r16, 0x01	; 1
    183a:	11 05       	cpc	r17, r1
    183c:	09 f0       	breq	.+2      	; 0x1840 <_ZN3DHT4readEb+0x34a>
    183e:	0d c1       	rjmp	.+538    	; 0x1a5a <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1840:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1842:	1c 82       	std	Y+4, r1	; 0x04
    1844:	1b 82       	std	Y+3, r1	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	88 97       	sbiw	r24, 0x28	; 40
    184c:	0c f0       	brlt	.+2      	; 0x1850 <_ZN3DHT4readEb+0x35a>
    184e:	a7 c0       	rjmp	.+334    	; 0x199e <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	9e 01       	movw	r18, r28
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	82 0f       	add	r24, r18
    1868:	93 1f       	adc	r25, r19
    186a:	40 96       	adiw	r24, 0x10	; 16
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	a2 81       	ldd	r26, Z+2	; 0x02
    1874:	b3 81       	ldd	r27, Z+3	; 0x03
    1876:	89 87       	std	Y+9, r24	; 0x09
    1878:	9a 87       	std	Y+10, r25	; 0x0a
    187a:	ab 87       	std	Y+11, r26	; 0x0b
    187c:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	9e 01       	movw	r18, r28
    1892:	2f 5f       	subi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	82 0f       	add	r24, r18
    1898:	93 1f       	adc	r25, r19
    189a:	40 96       	adiw	r24, 0x10	; 16
    189c:	fc 01       	movw	r30, r24
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	a2 81       	ldd	r26, Z+2	; 0x02
    18a4:	b3 81       	ldd	r27, Z+3	; 0x03
    18a6:	8d 87       	std	Y+13, r24	; 0x0d
    18a8:	9e 87       	std	Y+14, r25	; 0x0e
    18aa:	af 87       	std	Y+15, r26	; 0x0f
    18ac:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    18b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    18b6:	8f 3f       	cpi	r24, 0xFF	; 255
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	af 4f       	sbci	r26, 0xFF	; 255
    18bc:	bf 4f       	sbci	r27, 0xFF	; 255
    18be:	49 f0       	breq	.+18     	; 0x18d2 <_ZN3DHT4readEb+0x3dc>
    18c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c4:	af 85       	ldd	r26, Y+15	; 0x0f
    18c6:	b8 89       	ldd	r27, Y+16	; 0x10
    18c8:	8f 3f       	cpi	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	af 4f       	sbci	r26, 0xFF	; 255
    18ce:	bf 4f       	sbci	r27, 0xFF	; 255
    18d0:	89 f4       	brne	.+34     	; 0x18f4 <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    18d2:	ce 01       	movw	r24, r28
    18d4:	8e 5a       	subi	r24, 0xAE	; 174
    18d6:	9e 4f       	sbci	r25, 0xFE	; 254
    18d8:	fc 01       	movw	r30, r24
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	fc 01       	movw	r30, r24
    18e0:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    18e2:	ce 01       	movw	r24, r28
    18e4:	8e 5a       	subi	r24, 0xAE	; 174
    18e6:	9e 4f       	sbci	r25, 0xFE	; 254
    18e8:	fc 01       	movw	r30, r24
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	fc 01       	movw	r30, r24
    18f0:	f1 88       	ldd	r15, Z+17	; 0x11
    18f2:	b3 c0       	rjmp	.+358    	; 0x1a5a <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	99 23       	and	r25, r25
    18fa:	0c f4       	brge	.+2      	; 0x18fe <_ZN3DHT4readEb+0x408>
    18fc:	07 96       	adiw	r24, 0x07	; 7
    18fe:	95 95       	asr	r25
    1900:	87 95       	ror	r24
    1902:	95 95       	asr	r25
    1904:	87 95       	ror	r24
    1906:	95 95       	asr	r25
    1908:	87 95       	ror	r24
    190a:	9e 01       	movw	r18, r28
    190c:	2e 5a       	subi	r18, 0xAE	; 174
    190e:	3e 4f       	sbci	r19, 0xFE	; 254
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	31 81       	ldd	r19, Z+1	; 0x01
    1916:	28 0f       	add	r18, r24
    1918:	39 1f       	adc	r19, r25
    191a:	f9 01       	movw	r30, r18
    191c:	20 81       	ld	r18, Z
    191e:	42 2f       	mov	r20, r18
    1920:	44 0f       	add	r20, r20
    1922:	9e 01       	movw	r18, r28
    1924:	2e 5a       	subi	r18, 0xAE	; 174
    1926:	3e 4f       	sbci	r19, 0xFE	; 254
    1928:	f9 01       	movw	r30, r18
    192a:	20 81       	ld	r18, Z
    192c:	31 81       	ldd	r19, Z+1	; 0x01
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	fc 01       	movw	r30, r24
    1934:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    1936:	2d 85       	ldd	r18, Y+13	; 0x0d
    1938:	3e 85       	ldd	r19, Y+14	; 0x0e
    193a:	4f 85       	ldd	r20, Y+15	; 0x0f
    193c:	58 89       	ldd	r21, Y+16	; 0x10
    193e:	89 85       	ldd	r24, Y+9	; 0x09
    1940:	9a 85       	ldd	r25, Y+10	; 0x0a
    1942:	ab 85       	ldd	r26, Y+11	; 0x0b
    1944:	bc 85       	ldd	r27, Y+12	; 0x0c
    1946:	82 17       	cp	r24, r18
    1948:	93 07       	cpc	r25, r19
    194a:	a4 07       	cpc	r26, r20
    194c:	b5 07       	cpc	r27, r21
    194e:	08 f5       	brcc	.+66     	; 0x1992 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	99 23       	and	r25, r25
    1956:	0c f4       	brge	.+2      	; 0x195a <_ZN3DHT4readEb+0x464>
    1958:	07 96       	adiw	r24, 0x07	; 7
    195a:	95 95       	asr	r25
    195c:	87 95       	ror	r24
    195e:	95 95       	asr	r25
    1960:	87 95       	ror	r24
    1962:	95 95       	asr	r25
    1964:	87 95       	ror	r24
    1966:	9e 01       	movw	r18, r28
    1968:	2e 5a       	subi	r18, 0xAE	; 174
    196a:	3e 4f       	sbci	r19, 0xFE	; 254
    196c:	f9 01       	movw	r30, r18
    196e:	20 81       	ld	r18, Z
    1970:	31 81       	ldd	r19, Z+1	; 0x01
    1972:	28 0f       	add	r18, r24
    1974:	39 1f       	adc	r19, r25
    1976:	f9 01       	movw	r30, r18
    1978:	20 81       	ld	r18, Z
    197a:	42 2f       	mov	r20, r18
    197c:	41 60       	ori	r20, 0x01	; 1
    197e:	9e 01       	movw	r18, r28
    1980:	2e 5a       	subi	r18, 0xAE	; 174
    1982:	3e 4f       	sbci	r19, 0xFE	; 254
    1984:	f9 01       	movw	r30, r18
    1986:	20 81       	ld	r18, Z
    1988:	31 81       	ldd	r19, Z+1	; 0x01
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	fc 01       	movw	r30, r24
    1990:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
    199c:	54 cf       	rjmp	.-344    	; 0x1846 <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    199e:	ce 01       	movw	r24, r28
    19a0:	8e 5a       	subi	r24, 0xAE	; 174
    19a2:	9e 4f       	sbci	r25, 0xFE	; 254
    19a4:	fc 01       	movw	r30, r24
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	fc 01       	movw	r30, r24
    19ac:	84 81       	ldd	r24, Z+4	; 0x04
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	ce 01       	movw	r24, r28
    19b4:	8e 5a       	subi	r24, 0xAE	; 174
    19b6:	9e 4f       	sbci	r25, 0xFE	; 254
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	ce 01       	movw	r24, r28
    19c8:	8e 5a       	subi	r24, 0xAE	; 174
    19ca:	9e 4f       	sbci	r25, 0xFE	; 254
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	fc 01       	movw	r30, r24
    19d4:	81 81       	ldd	r24, Z+1	; 0x01
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	48 0f       	add	r20, r24
    19dc:	59 1f       	adc	r21, r25
    19de:	ce 01       	movw	r24, r28
    19e0:	8e 5a       	subi	r24, 0xAE	; 174
    19e2:	9e 4f       	sbci	r25, 0xFE	; 254
    19e4:	fc 01       	movw	r30, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	fc 01       	movw	r30, r24
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	48 0f       	add	r20, r24
    19f4:	59 1f       	adc	r21, r25
    19f6:	ce 01       	movw	r24, r28
    19f8:	8e 5a       	subi	r24, 0xAE	; 174
    19fa:	9e 4f       	sbci	r25, 0xFE	; 254
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	fc 01       	movw	r30, r24
    1a04:	83 81       	ldd	r24, Z+3	; 0x03
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	84 0f       	add	r24, r20
    1a0c:	95 1f       	adc	r25, r21
    1a0e:	99 27       	eor	r25, r25
    1a10:	28 17       	cp	r18, r24
    1a12:	39 07       	cpc	r19, r25
    1a14:	91 f4       	brne	.+36     	; 0x1a3a <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1a16:	ce 01       	movw	r24, r28
    1a18:	8e 5a       	subi	r24, 0xAE	; 174
    1a1a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	21 e0       	ldi	r18, 0x01	; 1
    1a24:	fc 01       	movw	r30, r24
    1a26:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1a28:	ce 01       	movw	r24, r28
    1a2a:	8e 5a       	subi	r24, 0xAE	; 174
    1a2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	fc 01       	movw	r30, r24
    1a36:	f1 88       	ldd	r15, Z+17	; 0x11
    1a38:	10 c0       	rjmp	.+32     	; 0x1a5a <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	8e 5a       	subi	r24, 0xAE	; 174
    1a3e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a40:	fc 01       	movw	r30, r24
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	fc 01       	movw	r30, r24
    1a48:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	8e 5a       	subi	r24, 0xAE	; 174
    1a4e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a50:	fc 01       	movw	r30, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	fc 01       	movw	r30, r24
    1a58:	f1 88       	ldd	r15, Z+17	; 0x11
    1a5a:	8f 2d       	mov	r24, r15
  }
}
    1a5c:	cc 5a       	subi	r28, 0xAC	; 172
    1a5e:	de 4f       	sbci	r29, 0xFE	; 254
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	bf 90       	pop	r11
    1a7a:	af 90       	pop	r10
    1a7c:	08 95       	ret

00001a7e <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	2a 97       	sbiw	r28, 0x0a	; 10
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	99 87       	std	Y+9, r25	; 0x09
    1a94:	88 87       	std	Y+8, r24	; 0x08
    1a96:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1a98:	1a 82       	std	Y+2, r1	; 0x02
    1a9a:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1a9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9e:	88 23       	and	r24, r24
    1aa0:	29 f0       	breq	.+10     	; 0x1aac <_ZN3DHT11expectPulseEb+0x2e>
    1aa2:	88 85       	ldd	r24, Y+8	; 0x08
    1aa4:	99 85       	ldd	r25, Y+9	; 0x09
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	87 81       	ldd	r24, Z+7	; 0x07
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <_ZN3DHT11expectPulseEb+0x30>
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1ab0:	88 85       	ldd	r24, Y+8	; 0x08
    1ab2:	99 85       	ldd	r25, Y+9	; 0x09
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	80 85       	ldd	r24, Z+8	; 0x08
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	86 52       	subi	r24, 0x26	; 38
    1ac2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ac4:	9d 83       	std	Y+5, r25	; 0x05
    1ac6:	8c 83       	std	Y+4, r24	; 0x04
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	fc 01       	movw	r30, r24
    1ace:	25 91       	lpm	r18, Z+
    1ad0:	34 91       	lpm	r19, Z
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	3f 83       	std	Y+7, r19	; 0x07
    1ad6:	2e 83       	std	Y+6, r18	; 0x06
    1ad8:	9d 83       	std	Y+5, r25	; 0x05
    1ada:	8c 83       	std	Y+4, r24	; 0x04
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 81       	ld	r18, Z
    1ae4:	88 85       	ldd	r24, Y+8	; 0x08
    1ae6:	99 85       	ldd	r25, Y+9	; 0x09
    1ae8:	fc 01       	movw	r30, r24
    1aea:	87 81       	ldd	r24, Z+7	; 0x07
    1aec:	28 23       	and	r18, r24
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	9b 81       	ldd	r25, Y+3	; 0x03
    1af2:	29 17       	cp	r18, r25
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <_ZN3DHT11expectPulseEb+0x7a>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	88 23       	and	r24, r24
    1afa:	f9 f0       	breq	.+62     	; 0x1b3a <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	9c 01       	movw	r18, r24
    1b02:	2f 5f       	subi	r18, 0xFF	; 255
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	3a 83       	std	Y+2, r19	; 0x02
    1b08:	29 83       	std	Y+1, r18	; 0x01
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	88 85       	ldd	r24, Y+8	; 0x08
    1b12:	99 85       	ldd	r25, Y+9	; 0x09
    1b14:	fc 01       	movw	r30, r24
    1b16:	85 85       	ldd	r24, Z+13	; 0x0d
    1b18:	96 85       	ldd	r25, Z+14	; 0x0e
    1b1a:	a7 85       	ldd	r26, Z+15	; 0x0f
    1b1c:	b0 89       	ldd	r27, Z+16	; 0x10
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	4a 07       	cpc	r20, r26
    1b26:	5b 07       	cpc	r21, r27
    1b28:	08 f4       	brcc	.+2      	; 0x1b2c <_ZN3DHT11expectPulseEb+0xae>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	66 23       	and	r22, r22
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <_ZN3DHT11expectPulseEb+0xb4>
    1b30:	bf cf       	rjmp	.-130    	; 0x1ab0 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	dc 01       	movw	r26, r24
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	cc 01       	movw	r24, r24
    1b40:	a0 e0       	ldi	r26, 0x00	; 0
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
}
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	2a 96       	adiw	r28, 0x0a	; 10
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	08 95       	ret

00001b5a <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	1f 92       	push	r1
    1b60:	1f 92       	push	r1
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	2a eb       	ldi	r18, 0xBA	; 186
    1b6c:	32 e0       	ldi	r19, 0x02	; 2
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	fc 01       	movw	r30, r24
    1b74:	31 83       	std	Z+1, r19	; 0x01
    1b76:	20 83       	st	Z, r18
    1b78:	00 00       	nop
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	2d 97       	sbiw	r28, 0x0d	; 13
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	9a 83       	std	Y+2, r25	; 0x02
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	6b 83       	std	Y+3, r22	; 0x03
    1bae:	4c 83       	std	Y+4, r20	; 0x04
    1bb0:	2d 83       	std	Y+5, r18	; 0x05
    1bb2:	ee 82       	std	Y+6, r14	; 0x06
    1bb4:	ff 82       	std	Y+7, r15	; 0x07
    1bb6:	08 87       	std	Y+8, r16	; 0x08
    1bb8:	19 87       	std	Y+9, r17	; 0x09
    1bba:	aa 86       	std	Y+10, r10	; 0x0a
    1bbc:	bb 86       	std	Y+11, r11	; 0x0b
    1bbe:	cc 86       	std	Y+12, r12	; 0x0c
    1bc0:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc8:	4c 81       	ldd	r20, Y+4	; 0x04
    1bca:	6b 81       	ldd	r22, Y+3	; 0x03
    1bcc:	e3 d9       	rcall	.-3130   	; 0xf94 <_ZN3DHTC1Ehhh>
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	23 8b       	std	Z+19, r18	; 0x13
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	fc 01       	movw	r30, r24
    1bde:	74 96       	adiw	r30, 0x14	; 20
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	a8 85       	ldd	r26, Y+8	; 0x08
    1be6:	b9 85       	ldd	r27, Y+9	; 0x09
    1be8:	69 81       	ldd	r22, Y+1	; 0x01
    1bea:	7a 81       	ldd	r23, Y+2	; 0x02
    1bec:	9c 01       	movw	r18, r24
    1bee:	ad 01       	movw	r20, r26
    1bf0:	cf 01       	movw	r24, r30
    1bf2:	f6 d0       	rcall	.+492    	; 0x1de0 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	7d 96       	adiw	r30, 0x1d	; 29
    1bfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c00:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c02:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c04:	69 81       	ldd	r22, Y+1	; 0x01
    1c06:	7a 81       	ldd	r23, Y+2	; 0x02
    1c08:	9c 01       	movw	r18, r24
    1c0a:	ad 01       	movw	r20, r26
    1c0c:	cf 01       	movw	r24, r30
    1c0e:	7e d2       	rcall	.+1276   	; 0x210c <_ZN11DHT_Unified8HumidityC1EPS_l>
    1c10:	00 00       	nop
    1c12:	2d 96       	adiw	r28, 0x0d	; 13
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	08 95       	ret

00001c34 <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	1f 92       	push	r1
    1c3a:	1f 92       	push	r1
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	67 e3       	ldi	r22, 0x37	; 55
    1c4a:	f4 d9       	rcall	.-3096   	; 0x1034 <_ZN3DHT5beginEh>
    1c4c:	00 00       	nop
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1c5e:	1f 92       	push	r1
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	7c 83       	std	Y+4, r23	; 0x04
    1c6a:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	fc 01       	movw	r30, r24
    1c72:	83 89       	ldd	r24, Z+19	; 0x13
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	8c 30       	cpi	r24, 0x0C	; 12
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	b1 f0       	breq	.+44     	; 0x1caa <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1c7e:	8d 30       	cpi	r24, 0x0D	; 13
    1c80:	91 05       	cpc	r25, r1
    1c82:	1c f4       	brge	.+6      	; 0x1c8a <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1c84:	0b 97       	sbiw	r24, 0x0b	; 11
    1c86:	39 f0       	breq	.+14     	; 0x1c96 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1c88:	2e c0       	rjmp	.+92     	; 0x1ce6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1c8a:	85 31       	cpi	r24, 0x15	; 21
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	b9 f0       	breq	.+46     	; 0x1cbe <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1c90:	46 97       	sbiw	r24, 0x16	; 22
    1c92:	f9 f0       	breq	.+62     	; 0x1cd2 <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1c94:	28 c0       	rjmp	.+80     	; 0x1ce6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1c96:	2b e0       	ldi	r18, 0x0B	; 11
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	a9 01       	movw	r20, r18
    1ca0:	61 e9       	ldi	r22, 0x91	; 145
    1ca2:	72 e0       	ldi	r23, 0x02	; 2
    1ca4:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <strncpy>
    break;
    1ca8:	28 c0       	rjmp	.+80     	; 0x1cfa <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1caa:	2b e0       	ldi	r18, 0x0B	; 11
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	a9 01       	movw	r20, r18
    1cb4:	67 e9       	ldi	r22, 0x97	; 151
    1cb6:	72 e0       	ldi	r23, 0x02	; 2
    1cb8:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <strncpy>
    break;
    1cbc:	1e c0       	rjmp	.+60     	; 0x1cfa <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1cbe:	2b e0       	ldi	r18, 0x0B	; 11
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	6d e9       	ldi	r22, 0x9D	; 157
    1cca:	72 e0       	ldi	r23, 0x02	; 2
    1ccc:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <strncpy>
    break;
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1cd2:	2b e0       	ldi	r18, 0x0B	; 11
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	a9 01       	movw	r20, r18
    1cdc:	63 ea       	ldi	r22, 0xA3	; 163
    1cde:	72 e0       	ldi	r23, 0x02	; 2
    1ce0:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <strncpy>
    break;
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1ce6:	2b e0       	ldi	r18, 0x0B	; 11
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	a9 01       	movw	r20, r18
    1cf0:	69 ea       	ldi	r22, 0xA9	; 169
    1cf2:	72 e0       	ldi	r23, 0x02	; 2
    1cf4:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <strncpy>
    break;
    1cf8:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1cfa:	8b e0       	ldi	r24, 0x0B	; 11
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	fc 01       	movw	r30, r24
    1d08:	10 82       	st	Z, r1
}
    1d0a:	00 00       	nop
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1d20:	1f 92       	push	r1
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	7c 83       	std	Y+4, r23	; 0x04
    1d2c:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	fc 01       	movw	r30, r24
    1d34:	83 89       	ldd	r24, Z+19	; 0x13
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	8c 30       	cpi	r24, 0x0C	; 12
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	c1 f0       	breq	.+48     	; 0x1d70 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1d40:	8d 30       	cpi	r24, 0x0D	; 13
    1d42:	91 05       	cpc	r25, r1
    1d44:	1c f4       	brge	.+6      	; 0x1d4c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1d46:	0b 97       	sbiw	r24, 0x0b	; 11
    1d48:	39 f0       	breq	.+14     	; 0x1d58 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1d4a:	36 c0       	rjmp	.+108    	; 0x1db8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1d4c:	85 31       	cpi	r24, 0x15	; 21
    1d4e:	91 05       	cpc	r25, r1
    1d50:	d9 f0       	breq	.+54     	; 0x1d88 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1d52:	46 97       	sbiw	r24, 0x16	; 22
    1d54:	29 f1       	breq	.+74     	; 0x1da0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1d56:	30 c0       	rjmp	.+96     	; 0x1db8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	80 e4       	ldi	r24, 0x40	; 64
    1d5e:	92 e4       	ldi	r25, 0x42	; 66
    1d60:	af e0       	ldi	r26, 0x0F	; 15
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	f9 01       	movw	r30, r18
    1d66:	84 a3       	std	Z+36, r24	; 0x24
    1d68:	95 a3       	std	Z+37, r25	; 0x25
    1d6a:	a6 a3       	std	Z+38, r26	; 0x26
    1d6c:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d6e:	30 c0       	rjmp	.+96     	; 0x1dd0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1d70:	2b 81       	ldd	r18, Y+3	; 0x03
    1d72:	3c 81       	ldd	r19, Y+4	; 0x04
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	94 e8       	ldi	r25, 0x84	; 132
    1d78:	ae e1       	ldi	r26, 0x1E	; 30
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	84 a3       	std	Z+36, r24	; 0x24
    1d80:	95 a3       	std	Z+37, r25	; 0x25
    1d82:	a6 a3       	std	Z+38, r26	; 0x26
    1d84:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d86:	24 c0       	rjmp	.+72     	; 0x1dd0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	94 e8       	ldi	r25, 0x84	; 132
    1d90:	ae e1       	ldi	r26, 0x1E	; 30
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	f9 01       	movw	r30, r18
    1d96:	84 a3       	std	Z+36, r24	; 0x24
    1d98:	95 a3       	std	Z+37, r25	; 0x25
    1d9a:	a6 a3       	std	Z+38, r26	; 0x26
    1d9c:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d9e:	18 c0       	rjmp	.+48     	; 0x1dd0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1da0:	2b 81       	ldd	r18, Y+3	; 0x03
    1da2:	3c 81       	ldd	r19, Y+4	; 0x04
    1da4:	80 e8       	ldi	r24, 0x80	; 128
    1da6:	94 e8       	ldi	r25, 0x84	; 132
    1da8:	ae e1       	ldi	r26, 0x1E	; 30
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	f9 01       	movw	r30, r18
    1dae:	84 a3       	std	Z+36, r24	; 0x24
    1db0:	95 a3       	std	Z+37, r25	; 0x25
    1db2:	a6 a3       	std	Z+38, r26	; 0x26
    1db4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1db6:	0c c0       	rjmp	.+24     	; 0x1dd0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	80 e8       	ldi	r24, 0x80	; 128
    1dbe:	94 e8       	ldi	r25, 0x84	; 132
    1dc0:	ae e1       	ldi	r26, 0x1E	; 30
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	84 a3       	std	Z+36, r24	; 0x24
    1dc8:	95 a3       	std	Z+37, r25	; 0x25
    1dca:	a6 a3       	std	Z+38, r26	; 0x26
    1dcc:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1dce:	00 00       	nop
  }
}
    1dd0:	00 00       	nop
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	08 95       	ret

00001de0 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	28 97       	sbiw	r28, 0x08	; 8
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	7c 83       	std	Y+4, r23	; 0x04
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
    1dfc:	2d 83       	std	Y+5, r18	; 0x05
    1dfe:	3e 83       	std	Y+6, r19	; 0x06
    1e00:	4f 83       	std	Y+7, r20	; 0x07
    1e02:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	a8 de       	rcall	.-688    	; 0x1b5a <_ZN15Adafruit_SensorC1Ev>
    1e0a:	26 ed       	ldi	r18, 0xD6	; 214
    1e0c:	32 e0       	ldi	r19, 0x02	; 2
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	9a 81       	ldd	r25, Y+2	; 0x02
    1e12:	fc 01       	movw	r30, r24
    1e14:	31 83       	std	Z+1, r19	; 0x01
    1e16:	20 83       	st	Z, r18
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	fc 01       	movw	r30, r24
    1e22:	34 83       	std	Z+4, r19	; 0x04
    1e24:	23 83       	std	Z+3, r18	; 0x03
    1e26:	29 81       	ldd	r18, Y+1	; 0x01
    1e28:	3a 81       	ldd	r19, Y+2	; 0x02
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	af 81       	ldd	r26, Y+7	; 0x07
    1e30:	b8 85       	ldd	r27, Y+8	; 0x08
    1e32:	f9 01       	movw	r30, r18
    1e34:	85 83       	std	Z+5, r24	; 0x05
    1e36:	96 83       	std	Z+6, r25	; 0x06
    1e38:	a7 83       	std	Z+7, r26	; 0x07
    1e3a:	b0 87       	std	Z+8, r27	; 0x08
    1e3c:	00 00       	nop
    1e3e:	28 96       	adiw	r28, 0x08	; 8
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1e56:	1f 92       	push	r1
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	7c 83       	std	Y+4, r23	; 0x04
    1e62:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	44 e2       	ldi	r20, 0x24	; 36
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1e74:	84 e2       	ldi	r24, 0x24	; 36
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e0       	ldi	r26, 0x00	; 0
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	f9 01       	movw	r30, r18
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	fc 01       	movw	r30, r24
    1e90:	85 81       	ldd	r24, Z+5	; 0x05
    1e92:	96 81       	ldd	r25, Z+6	; 0x06
    1e94:	a7 81       	ldd	r26, Z+7	; 0x07
    1e96:	b0 85       	ldd	r27, Z+8	; 0x08
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	84 83       	std	Z+4, r24	; 0x04
    1ea0:	95 83       	std	Z+5, r25	; 0x05
    1ea2:	a6 83       	std	Z+6, r26	; 0x06
    1ea4:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	8d e0       	ldi	r24, 0x0D	; 13
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a0 e0       	ldi	r26, 0x00	; 0
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	80 87       	std	Z+8, r24	; 0x08
    1eb6:	91 87       	std	Z+9, r25	; 0x09
    1eb8:	a2 87       	std	Z+10, r26	; 0x0a
    1eba:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1ebc:	0e 94 67 2f 	call	0x5ece	; 0x5ece <millis>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec8:	f9 01       	movw	r30, r18
    1eca:	80 8b       	std	Z+16, r24	; 0x10
    1ecc:	91 8b       	std	Z+17, r25	; 0x11
    1ece:	a2 8b       	std	Z+18, r26	; 0x12
    1ed0:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	83 81       	ldd	r24, Z+3	; 0x03
    1eda:	94 81       	ldd	r25, Z+4	; 0x04
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	d3 d8       	rcall	.-3674   	; 0x1088 <_ZN3DHT15readTemperatureEbb>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	f9 01       	movw	r30, r18
    1eec:	84 8b       	std	Z+20, r24	; 0x14
    1eee:	95 8b       	std	Z+21, r25	; 0x15
    1ef0:	a6 8b       	std	Z+22, r26	; 0x16
    1ef2:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1f0a:	1f 92       	push	r1
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	7c 83       	std	Y+4, r23	; 0x04
    1f16:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	48 e2       	ldi	r20, 0x28	; 40
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	83 81       	ldd	r24, Z+3	; 0x03
    1f30:	94 81       	ldd	r25, Z+4	; 0x04
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	3c 81       	ldd	r19, Y+4	; 0x04
    1f36:	b9 01       	movw	r22, r18
    1f38:	8f de       	rcall	.-738    	; 0x1c58 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	f9 01       	movw	r30, r18
    1f48:	84 87       	std	Z+12, r24	; 0x0c
    1f4a:	95 87       	std	Z+13, r25	; 0x0d
    1f4c:	a6 87       	std	Z+14, r26	; 0x0e
    1f4e:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	fc 01       	movw	r30, r24
    1f56:	85 81       	ldd	r24, Z+5	; 0x05
    1f58:	96 81       	ldd	r25, Z+6	; 0x06
    1f5a:	a7 81       	ldd	r26, Z+7	; 0x07
    1f5c:	b0 85       	ldd	r27, Z+8	; 0x08
    1f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f60:	3c 81       	ldd	r19, Y+4	; 0x04
    1f62:	f9 01       	movw	r30, r18
    1f64:	80 8b       	std	Z+16, r24	; 0x10
    1f66:	91 8b       	std	Z+17, r25	; 0x11
    1f68:	a2 8b       	std	Z+18, r26	; 0x12
    1f6a:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f70:	8d e0       	ldi	r24, 0x0D	; 13
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e0       	ldi	r26, 0x00	; 0
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	f9 01       	movw	r30, r18
    1f7a:	84 8b       	std	Z+20, r24	; 0x14
    1f7c:	95 8b       	std	Z+21, r25	; 0x15
    1f7e:	a6 8b       	std	Z+22, r26	; 0x16
    1f80:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	fc 01       	movw	r30, r24
    1f88:	83 81       	ldd	r24, Z+3	; 0x03
    1f8a:	94 81       	ldd	r25, Z+4	; 0x04
    1f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f90:	b9 01       	movw	r22, r18
    1f92:	c3 de       	rcall	.-634    	; 0x1d1a <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	fc 01       	movw	r30, r24
    1f9a:	83 81       	ldd	r24, Z+3	; 0x03
    1f9c:	94 81       	ldd	r25, Z+4	; 0x04
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	83 89       	ldd	r24, Z+19	; 0x13
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	8c 30       	cpi	r24, 0x0C	; 12
    1fa8:	91 05       	cpc	r25, r1
    1faa:	61 f1       	breq	.+88     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1fac:	8d 30       	cpi	r24, 0x0D	; 13
    1fae:	91 05       	cpc	r25, r1
    1fb0:	1c f4       	brge	.+6      	; 0x1fb8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    1fb2:	0b 97       	sbiw	r24, 0x0b	; 11
    1fb4:	49 f0       	breq	.+18     	; 0x1fc8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    1fb6:	8c c0       	rjmp	.+280    	; 0x20d0 <__DATA_REGION_LENGTH__+0xd0>
    1fb8:	85 31       	cpi	r24, 0x15	; 21
    1fba:	91 05       	cpc	r25, r1
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    1fbe:	44 c0       	rjmp	.+136    	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    1fc0:	46 97       	sbiw	r24, 0x16	; 22
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    1fc4:	63 c0       	rjmp	.+198    	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    1fc6:	84 c0       	rjmp	.+264    	; 0x20d0 <__DATA_REGION_LENGTH__+0xd0>
  case DHT11:
    sensor->max_value = 50.0F;
    1fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fca:	3c 81       	ldd	r19, Y+4	; 0x04
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a8 e4       	ldi	r26, 0x48	; 72
    1fd2:	b2 e4       	ldi	r27, 0x42	; 66
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	80 8f       	std	Z+24, r24	; 0x18
    1fd8:	91 8f       	std	Z+25, r25	; 0x19
    1fda:	a2 8f       	std	Z+26, r26	; 0x1a
    1fdc:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	14 8e       	std	Z+28, r1	; 0x1c
    1fe6:	15 8e       	std	Z+29, r1	; 0x1d
    1fe8:	16 8e       	std	Z+30, r1	; 0x1e
    1fea:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    1fec:	2b 81       	ldd	r18, Y+3	; 0x03
    1fee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e4       	ldi	r27, 0x40	; 64
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	80 a3       	std	Z+32, r24	; 0x20
    1ffc:	91 a3       	std	Z+33, r25	; 0x21
    1ffe:	a2 a3       	std	Z+34, r26	; 0x22
    2000:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2002:	7c c0       	rjmp	.+248    	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
  case DHT12:
    sensor->max_value = 60.0F;
    2004:	2b 81       	ldd	r18, Y+3	; 0x03
    2006:	3c 81       	ldd	r19, Y+4	; 0x04
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e7       	ldi	r26, 0x70	; 112
    200e:	b2 e4       	ldi	r27, 0x42	; 66
    2010:	f9 01       	movw	r30, r18
    2012:	80 8f       	std	Z+24, r24	; 0x18
    2014:	91 8f       	std	Z+25, r25	; 0x19
    2016:	a2 8f       	std	Z+26, r26	; 0x1a
    2018:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    201a:	2b 81       	ldd	r18, Y+3	; 0x03
    201c:	3c 81       	ldd	r19, Y+4	; 0x04
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 ea       	ldi	r26, 0xA0	; 160
    2024:	b1 ec       	ldi	r27, 0xC1	; 193
    2026:	f9 01       	movw	r30, r18
    2028:	84 8f       	std	Z+28, r24	; 0x1c
    202a:	95 8f       	std	Z+29, r25	; 0x1d
    202c:	a6 8f       	std	Z+30, r26	; 0x1e
    202e:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    2030:	2b 81       	ldd	r18, Y+3	; 0x03
    2032:	3c 81       	ldd	r19, Y+4	; 0x04
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	bf e3       	ldi	r27, 0x3F	; 63
    203c:	f9 01       	movw	r30, r18
    203e:	80 a3       	std	Z+32, r24	; 0x20
    2040:	91 a3       	std	Z+33, r25	; 0x21
    2042:	a2 a3       	std	Z+34, r26	; 0x22
    2044:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2046:	5a c0       	rjmp	.+180    	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
  case DHT21:
    sensor->max_value = 80.0F;
    2048:	2b 81       	ldd	r18, Y+3	; 0x03
    204a:	3c 81       	ldd	r19, Y+4	; 0x04
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 ea       	ldi	r26, 0xA0	; 160
    2052:	b2 e4       	ldi	r27, 0x42	; 66
    2054:	f9 01       	movw	r30, r18
    2056:	80 8f       	std	Z+24, r24	; 0x18
    2058:	91 8f       	std	Z+25, r25	; 0x19
    205a:	a2 8f       	std	Z+26, r26	; 0x1a
    205c:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    205e:	2b 81       	ldd	r18, Y+3	; 0x03
    2060:	3c 81       	ldd	r19, Y+4	; 0x04
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e2       	ldi	r26, 0x20	; 32
    2068:	b2 ec       	ldi	r27, 0xC2	; 194
    206a:	f9 01       	movw	r30, r18
    206c:	84 8f       	std	Z+28, r24	; 0x1c
    206e:	95 8f       	std	Z+29, r25	; 0x1d
    2070:	a6 8f       	std	Z+30, r26	; 0x1e
    2072:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	8d ec       	ldi	r24, 0xCD	; 205
    207a:	9c ec       	ldi	r25, 0xCC	; 204
    207c:	ac ec       	ldi	r26, 0xCC	; 204
    207e:	bd e3       	ldi	r27, 0x3D	; 61
    2080:	f9 01       	movw	r30, r18
    2082:	80 a3       	std	Z+32, r24	; 0x20
    2084:	91 a3       	std	Z+33, r25	; 0x21
    2086:	a2 a3       	std	Z+34, r26	; 0x22
    2088:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    208a:	38 c0       	rjmp	.+112    	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
  case DHT22:
    sensor->max_value = 125.0F;
    208c:	2b 81       	ldd	r18, Y+3	; 0x03
    208e:	3c 81       	ldd	r19, Y+4	; 0x04
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	aa ef       	ldi	r26, 0xFA	; 250
    2096:	b2 e4       	ldi	r27, 0x42	; 66
    2098:	f9 01       	movw	r30, r18
    209a:	80 8f       	std	Z+24, r24	; 0x18
    209c:	91 8f       	std	Z+25, r25	; 0x19
    209e:	a2 8f       	std	Z+26, r26	; 0x1a
    20a0:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 e2       	ldi	r26, 0x20	; 32
    20ac:	b2 ec       	ldi	r27, 0xC2	; 194
    20ae:	f9 01       	movw	r30, r18
    20b0:	84 8f       	std	Z+28, r24	; 0x1c
    20b2:	95 8f       	std	Z+29, r25	; 0x1d
    20b4:	a6 8f       	std	Z+30, r26	; 0x1e
    20b6:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    20b8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ba:	3c 81       	ldd	r19, Y+4	; 0x04
    20bc:	8d ec       	ldi	r24, 0xCD	; 205
    20be:	9c ec       	ldi	r25, 0xCC	; 204
    20c0:	ac ec       	ldi	r26, 0xCC	; 204
    20c2:	bd e3       	ldi	r27, 0x3D	; 61
    20c4:	f9 01       	movw	r30, r18
    20c6:	80 a3       	std	Z+32, r24	; 0x20
    20c8:	91 a3       	std	Z+33, r25	; 0x21
    20ca:	a2 a3       	std	Z+34, r26	; 0x22
    20cc:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    20ce:	16 c0       	rjmp	.+44     	; 0x20fc <__DATA_REGION_LENGTH__+0xfc>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	fc 01       	movw	r30, r24
    20d6:	10 8e       	std	Z+24, r1	; 0x18
    20d8:	11 8e       	std	Z+25, r1	; 0x19
    20da:	12 8e       	std	Z+26, r1	; 0x1a
    20dc:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	fc 01       	movw	r30, r24
    20e4:	14 8e       	std	Z+28, r1	; 0x1c
    20e6:	15 8e       	std	Z+29, r1	; 0x1d
    20e8:	16 8e       	std	Z+30, r1	; 0x1e
    20ea:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	fc 01       	movw	r30, r24
    20f2:	10 a2       	std	Z+32, r1	; 0x20
    20f4:	11 a2       	std	Z+33, r1	; 0x21
    20f6:	12 a2       	std	Z+34, r1	; 0x22
    20f8:	13 a2       	std	Z+35, r1	; 0x23
    break;
    20fa:	00 00       	nop
  }
}
    20fc:	00 00       	nop
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	28 97       	sbiw	r28, 0x08	; 8
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	7c 83       	std	Y+4, r23	; 0x04
    2126:	6b 83       	std	Y+3, r22	; 0x03
    2128:	2d 83       	std	Y+5, r18	; 0x05
    212a:	3e 83       	std	Y+6, r19	; 0x06
    212c:	4f 83       	std	Y+7, r20	; 0x07
    212e:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	12 dd       	rcall	.-1500   	; 0x1b5a <_ZN15Adafruit_SensorC1Ev>
    2136:	28 ec       	ldi	r18, 0xC8	; 200
    2138:	32 e0       	ldi	r19, 0x02	; 2
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	fc 01       	movw	r30, r24
    2140:	31 83       	std	Z+1, r19	; 0x01
    2142:	20 83       	st	Z, r18
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	fc 01       	movw	r30, r24
    214e:	34 83       	std	Z+4, r19	; 0x04
    2150:	23 83       	std	Z+3, r18	; 0x03
    2152:	29 81       	ldd	r18, Y+1	; 0x01
    2154:	3a 81       	ldd	r19, Y+2	; 0x02
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	af 81       	ldd	r26, Y+7	; 0x07
    215c:	b8 85       	ldd	r27, Y+8	; 0x08
    215e:	f9 01       	movw	r30, r18
    2160:	85 83       	std	Z+5, r24	; 0x05
    2162:	96 83       	std	Z+6, r25	; 0x06
    2164:	a7 83       	std	Z+7, r26	; 0x07
    2166:	b0 87       	std	Z+8, r27	; 0x08
    2168:	00 00       	nop
    216a:	28 96       	adiw	r28, 0x08	; 8
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	00 d0       	rcall	.+0      	; 0x2182 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    2182:	1f 92       	push	r1
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	7c 83       	std	Y+4, r23	; 0x04
    218e:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	44 e2       	ldi	r20, 0x24	; 36
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    21a0:	84 e2       	ldi	r24, 0x24	; 36
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e0       	ldi	r26, 0x00	; 0
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	2b 81       	ldd	r18, Y+3	; 0x03
    21aa:	3c 81       	ldd	r19, Y+4	; 0x04
    21ac:	f9 01       	movw	r30, r18
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	fc 01       	movw	r30, r24
    21bc:	85 81       	ldd	r24, Z+5	; 0x05
    21be:	96 81       	ldd	r25, Z+6	; 0x06
    21c0:	a7 81       	ldd	r26, Z+7	; 0x07
    21c2:	b0 85       	ldd	r27, Z+8	; 0x08
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	f9 01       	movw	r30, r18
    21ca:	84 83       	std	Z+4, r24	; 0x04
    21cc:	95 83       	std	Z+5, r25	; 0x05
    21ce:	a6 83       	std	Z+6, r26	; 0x06
    21d0:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    21d2:	2b 81       	ldd	r18, Y+3	; 0x03
    21d4:	3c 81       	ldd	r19, Y+4	; 0x04
    21d6:	8c e0       	ldi	r24, 0x0C	; 12
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	f9 01       	movw	r30, r18
    21e0:	80 87       	std	Z+8, r24	; 0x08
    21e2:	91 87       	std	Z+9, r25	; 0x09
    21e4:	a2 87       	std	Z+10, r26	; 0x0a
    21e6:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    21e8:	0e 94 67 2f 	call	0x5ece	; 0x5ece <millis>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	2b 81       	ldd	r18, Y+3	; 0x03
    21f2:	3c 81       	ldd	r19, Y+4	; 0x04
    21f4:	f9 01       	movw	r30, r18
    21f6:	80 8b       	std	Z+16, r24	; 0x10
    21f8:	91 8b       	std	Z+17, r25	; 0x11
    21fa:	a2 8b       	std	Z+18, r26	; 0x12
    21fc:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	fc 01       	movw	r30, r24
    2204:	83 81       	ldd	r24, Z+3	; 0x03
    2206:	94 81       	ldd	r25, Z+4	; 0x04
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	cb d8       	rcall	.-3690   	; 0x13a2 <_ZN3DHT12readHumidityEb>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	2b 81       	ldd	r18, Y+3	; 0x03
    2212:	3c 81       	ldd	r19, Y+4	; 0x04
    2214:	f9 01       	movw	r30, r18
    2216:	84 8b       	std	Z+20, r24	; 0x14
    2218:	95 8b       	std	Z+21, r25	; 0x15
    221a:	a6 8b       	std	Z+22, r26	; 0x16
    221c:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    221e:	81 e0       	ldi	r24, 0x01	; 1
}
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	00 d0       	rcall	.+0      	; 0x2234 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    2234:	1f 92       	push	r1
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	7c 83       	std	Y+4, r23	; 0x04
    2240:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	48 e2       	ldi	r20, 0x28	; 40
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	fc 01       	movw	r30, r24
    2258:	83 81       	ldd	r24, Z+3	; 0x03
    225a:	94 81       	ldd	r25, Z+4	; 0x04
    225c:	2b 81       	ldd	r18, Y+3	; 0x03
    225e:	3c 81       	ldd	r19, Y+4	; 0x04
    2260:	b9 01       	movw	r22, r18
    2262:	fa dc       	rcall	.-1548   	; 0x1c58 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    2264:	2b 81       	ldd	r18, Y+3	; 0x03
    2266:	3c 81       	ldd	r19, Y+4	; 0x04
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	f9 01       	movw	r30, r18
    2272:	84 87       	std	Z+12, r24	; 0x0c
    2274:	95 87       	std	Z+13, r25	; 0x0d
    2276:	a6 87       	std	Z+14, r26	; 0x0e
    2278:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	fc 01       	movw	r30, r24
    2280:	85 81       	ldd	r24, Z+5	; 0x05
    2282:	96 81       	ldd	r25, Z+6	; 0x06
    2284:	a7 81       	ldd	r26, Z+7	; 0x07
    2286:	b0 85       	ldd	r27, Z+8	; 0x08
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	f9 01       	movw	r30, r18
    228e:	80 8b       	std	Z+16, r24	; 0x10
    2290:	91 8b       	std	Z+17, r25	; 0x11
    2292:	a2 8b       	std	Z+18, r26	; 0x12
    2294:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	8c e0       	ldi	r24, 0x0C	; 12
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	f9 01       	movw	r30, r18
    22a4:	84 8b       	std	Z+20, r24	; 0x14
    22a6:	95 8b       	std	Z+21, r25	; 0x15
    22a8:	a6 8b       	std	Z+22, r26	; 0x16
    22aa:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	fc 01       	movw	r30, r24
    22b2:	83 81       	ldd	r24, Z+3	; 0x03
    22b4:	94 81       	ldd	r25, Z+4	; 0x04
    22b6:	2b 81       	ldd	r18, Y+3	; 0x03
    22b8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ba:	b9 01       	movw	r22, r18
    22bc:	2e dd       	rcall	.-1444   	; 0x1d1a <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	fc 01       	movw	r30, r24
    22c4:	83 81       	ldd	r24, Z+3	; 0x03
    22c6:	94 81       	ldd	r25, Z+4	; 0x04
    22c8:	fc 01       	movw	r30, r24
    22ca:	83 89       	ldd	r24, Z+19	; 0x13
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	8c 30       	cpi	r24, 0x0C	; 12
    22d2:	91 05       	cpc	r25, r1
    22d4:	81 f1       	breq	.+96     	; 0x2336 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    22d6:	8d 30       	cpi	r24, 0x0D	; 13
    22d8:	91 05       	cpc	r25, r1
    22da:	1c f4       	brge	.+6      	; 0x22e2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    22dc:	0b 97       	sbiw	r24, 0x0b	; 11
    22de:	49 f0       	breq	.+18     	; 0x22f2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    22e0:	88 c0       	rjmp	.+272    	; 0x23f2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    22e2:	85 31       	cpi	r24, 0x15	; 21
    22e4:	91 05       	cpc	r25, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    22e8:	48 c0       	rjmp	.+144    	; 0x237a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    22ea:	46 97       	sbiw	r24, 0x16	; 22
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    22ee:	63 c0       	rjmp	.+198    	; 0x23b6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    22f0:	80 c0       	rjmp	.+256    	; 0x23f2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    22f2:	2b 81       	ldd	r18, Y+3	; 0x03
    22f4:	3c 81       	ldd	r19, Y+4	; 0x04
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 ea       	ldi	r26, 0xA0	; 160
    22fc:	b2 e4       	ldi	r27, 0x42	; 66
    22fe:	f9 01       	movw	r30, r18
    2300:	80 8f       	std	Z+24, r24	; 0x18
    2302:	91 8f       	std	Z+25, r25	; 0x19
    2304:	a2 8f       	std	Z+26, r26	; 0x1a
    2306:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 ea       	ldi	r26, 0xA0	; 160
    2312:	b1 e4       	ldi	r27, 0x41	; 65
    2314:	f9 01       	movw	r30, r18
    2316:	84 8f       	std	Z+28, r24	; 0x1c
    2318:	95 8f       	std	Z+29, r25	; 0x1d
    231a:	a6 8f       	std	Z+30, r26	; 0x1e
    231c:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    231e:	2b 81       	ldd	r18, Y+3	; 0x03
    2320:	3c 81       	ldd	r19, Y+4	; 0x04
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 ea       	ldi	r26, 0xA0	; 160
    2328:	b0 e4       	ldi	r27, 0x40	; 64
    232a:	f9 01       	movw	r30, r18
    232c:	80 a3       	std	Z+32, r24	; 0x20
    232e:	91 a3       	std	Z+33, r25	; 0x21
    2330:	a2 a3       	std	Z+34, r26	; 0x22
    2332:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2334:	74 c0       	rjmp	.+232    	; 0x241e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    2336:	2b 81       	ldd	r18, Y+3	; 0x03
    2338:	3c 81       	ldd	r19, Y+4	; 0x04
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	ae eb       	ldi	r26, 0xBE	; 190
    2340:	b2 e4       	ldi	r27, 0x42	; 66
    2342:	f9 01       	movw	r30, r18
    2344:	80 8f       	std	Z+24, r24	; 0x18
    2346:	91 8f       	std	Z+25, r25	; 0x19
    2348:	a2 8f       	std	Z+26, r26	; 0x1a
    234a:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    234c:	2b 81       	ldd	r18, Y+3	; 0x03
    234e:	3c 81       	ldd	r19, Y+4	; 0x04
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 ea       	ldi	r26, 0xA0	; 160
    2356:	b1 e4       	ldi	r27, 0x41	; 65
    2358:	f9 01       	movw	r30, r18
    235a:	84 8f       	std	Z+28, r24	; 0x1c
    235c:	95 8f       	std	Z+29, r25	; 0x1d
    235e:	a6 8f       	std	Z+30, r26	; 0x1e
    2360:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2362:	2b 81       	ldd	r18, Y+3	; 0x03
    2364:	3c 81       	ldd	r19, Y+4	; 0x04
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a0 ea       	ldi	r26, 0xA0	; 160
    236c:	b0 e4       	ldi	r27, 0x40	; 64
    236e:	f9 01       	movw	r30, r18
    2370:	80 a3       	std	Z+32, r24	; 0x20
    2372:	91 a3       	std	Z+33, r25	; 0x21
    2374:	a2 a3       	std	Z+34, r26	; 0x22
    2376:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2378:	52 c0       	rjmp	.+164    	; 0x241e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    237a:	2b 81       	ldd	r18, Y+3	; 0x03
    237c:	3c 81       	ldd	r19, Y+4	; 0x04
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a8 ec       	ldi	r26, 0xC8	; 200
    2384:	b2 e4       	ldi	r27, 0x42	; 66
    2386:	f9 01       	movw	r30, r18
    2388:	80 8f       	std	Z+24, r24	; 0x18
    238a:	91 8f       	std	Z+25, r25	; 0x19
    238c:	a2 8f       	std	Z+26, r26	; 0x1a
    238e:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	fc 01       	movw	r30, r24
    2396:	14 8e       	std	Z+28, r1	; 0x1c
    2398:	15 8e       	std	Z+29, r1	; 0x1d
    239a:	16 8e       	std	Z+30, r1	; 0x1e
    239c:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	8d ec       	ldi	r24, 0xCD	; 205
    23a4:	9c ec       	ldi	r25, 0xCC	; 204
    23a6:	ac ec       	ldi	r26, 0xCC	; 204
    23a8:	bd e3       	ldi	r27, 0x3D	; 61
    23aa:	f9 01       	movw	r30, r18
    23ac:	80 a3       	std	Z+32, r24	; 0x20
    23ae:	91 a3       	std	Z+33, r25	; 0x21
    23b0:	a2 a3       	std	Z+34, r26	; 0x22
    23b2:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    23b4:	34 c0       	rjmp	.+104    	; 0x241e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    23b6:	2b 81       	ldd	r18, Y+3	; 0x03
    23b8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a8 ec       	ldi	r26, 0xC8	; 200
    23c0:	b2 e4       	ldi	r27, 0x42	; 66
    23c2:	f9 01       	movw	r30, r18
    23c4:	80 8f       	std	Z+24, r24	; 0x18
    23c6:	91 8f       	std	Z+25, r25	; 0x19
    23c8:	a2 8f       	std	Z+26, r26	; 0x1a
    23ca:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	fc 01       	movw	r30, r24
    23d2:	14 8e       	std	Z+28, r1	; 0x1c
    23d4:	15 8e       	std	Z+29, r1	; 0x1d
    23d6:	16 8e       	std	Z+30, r1	; 0x1e
    23d8:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    23da:	2b 81       	ldd	r18, Y+3	; 0x03
    23dc:	3c 81       	ldd	r19, Y+4	; 0x04
    23de:	8d ec       	ldi	r24, 0xCD	; 205
    23e0:	9c ec       	ldi	r25, 0xCC	; 204
    23e2:	ac ec       	ldi	r26, 0xCC	; 204
    23e4:	bd e3       	ldi	r27, 0x3D	; 61
    23e6:	f9 01       	movw	r30, r18
    23e8:	80 a3       	std	Z+32, r24	; 0x20
    23ea:	91 a3       	std	Z+33, r25	; 0x21
    23ec:	a2 a3       	std	Z+34, r26	; 0x22
    23ee:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    23f0:	16 c0       	rjmp	.+44     	; 0x241e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	fc 01       	movw	r30, r24
    23f8:	10 8e       	std	Z+24, r1	; 0x18
    23fa:	11 8e       	std	Z+25, r1	; 0x19
    23fc:	12 8e       	std	Z+26, r1	; 0x1a
    23fe:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	fc 01       	movw	r30, r24
    2406:	14 8e       	std	Z+28, r1	; 0x1c
    2408:	15 8e       	std	Z+29, r1	; 0x1d
    240a:	16 8e       	std	Z+30, r1	; 0x1e
    240c:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	fc 01       	movw	r30, r24
    2414:	10 a2       	std	Z+32, r1	; 0x20
    2416:	11 a2       	std	Z+33, r1	; 0x21
    2418:	12 a2       	std	Z+34, r1	; 0x22
    241a:	13 a2       	std	Z+35, r1	; 0x23
    break;
    241c:	00 00       	nop
  }
}
    241e:	00 00       	nop
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <_ZN5PrintC1Ev>:

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	1f 92       	push	r1
    2434:	1f 92       	push	r1
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	25 e3       	ldi	r18, 0x35	; 53
    2440:	33 e0       	ldi	r19, 0x03	; 3
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	fc 01       	movw	r30, r24
    2448:	31 83       	std	Z+1, r19	; 0x01
    244a:	20 83       	st	Z, r18
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	fc 01       	movw	r30, r24
    2452:	13 82       	std	Z+3, r1	; 0x03
    2454:	12 82       	std	Z+2, r1	; 0x02
    2456:	00 00       	nop
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	08 95       	ret

00002462 <_ZN5Print17availableForWriteEv>:
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	1f 92       	push	r1
    2468:	1f 92       	push	r1
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <_ZN5Print5flushEv>:
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	1f 92       	push	r1
    2486:	1f 92       	push	r1
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	00 00       	nop
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	08 95       	ret

0000249c <_ZN17LiquidCrystal_I2C5writeEh>:
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <_ZN17LiquidCrystal_I2C5writeEh+0x6>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	9a 83       	std	Y+2, r25	; 0x02
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	6b 83       	std	Y+3, r22	; 0x03
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	6b 81       	ldd	r22, Y+3	; 0x03
    24b4:	ba d1       	rcall	.+884    	; 0x282a <_ZN17LiquidCrystal_I2C4sendEhh>
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	08 95       	ret

000024c6 <_ZN17LiquidCrystal_I2CC1Ehhh>:
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <_ZN17LiquidCrystal_I2CC1Ehhh+0x6>
    24cc:	1f 92       	push	r1
    24ce:	1f 92       	push	r1
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	6b 83       	std	Y+3, r22	; 0x03
    24da:	4c 83       	std	Y+4, r20	; 0x04
    24dc:	2d 83       	std	Y+5, r18	; 0x05
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	a5 df       	rcall	.-182    	; 0x242e <_ZN5PrintC1Ev>
    24e4:	24 ee       	ldi	r18, 0xE4	; 228
    24e6:	32 e0       	ldi	r19, 0x02	; 2
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	fc 01       	movw	r30, r24
    24ee:	31 83       	std	Z+1, r19	; 0x01
    24f0:	20 83       	st	Z, r18
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	fc 01       	movw	r30, r24
    24fa:	24 83       	std	Z+4, r18	; 0x04
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	2c 81       	ldd	r18, Y+4	; 0x04
    2502:	fc 01       	movw	r30, r24
    2504:	21 87       	std	Z+9, r18	; 0x09
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	2d 81       	ldd	r18, Y+5	; 0x05
    250c:	fc 01       	movw	r30, r24
    250e:	22 87       	std	Z+10, r18	; 0x0a
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	fc 01       	movw	r30, r24
    2516:	13 86       	std	Z+11, r1	; 0x0b
    2518:	00 00       	nop
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	08 95       	ret

0000252a <_ZN17LiquidCrystal_I2C4initEv>:
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	1f 92       	push	r1
    2530:	1f 92       	push	r1
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	06 d0       	rcall	.+12     	; 0x254c <_ZN17LiquidCrystal_I2C9init_privEv>
    2540:	00 00       	nop
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <_ZN17LiquidCrystal_I2C9init_privEv>:
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	1f 92       	push	r1
    2552:	1f 92       	push	r1
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	8e ee       	ldi	r24, 0xEE	; 238
    255e:	94 e0       	ldi	r25, 0x04	; 4
    2560:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5beginEv>
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	fc 01       	movw	r30, r24
    256a:	15 82       	std	Z+5, r1	; 0x05
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	fc 01       	movw	r30, r24
    2572:	42 85       	ldd	r20, Z+10	; 0x0a
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	fc 01       	movw	r30, r24
    257a:	31 85       	ldd	r19, Z+9	; 0x09
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	63 2f       	mov	r22, r19
    2584:	06 d0       	rcall	.+12     	; 0x2592 <_ZN17LiquidCrystal_I2C5beginEhhh>
    2586:	00 00       	nop
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <_ZN17LiquidCrystal_I2C5beginEhhh>:
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	00 d0       	rcall	.+0      	; 0x2598 <_ZN17LiquidCrystal_I2C5beginEhhh+0x6>
    2598:	1f 92       	push	r1
    259a:	1f 92       	push	r1
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	6b 83       	std	Y+3, r22	; 0x03
    25a6:	4c 83       	std	Y+4, r20	; 0x04
    25a8:	2d 83       	std	Y+5, r18	; 0x05
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	50 f0       	brcs	.+20     	; 0x25c4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x32>
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	fc 01       	movw	r30, r24
    25b6:	85 81       	ldd	r24, Z+5	; 0x05
    25b8:	28 2f       	mov	r18, r24
    25ba:	28 60       	ori	r18, 0x08	; 8
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	fc 01       	movw	r30, r24
    25c2:	25 83       	std	Z+5, r18	; 0x05
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ca:	fc 01       	movw	r30, r24
    25cc:	20 87       	std	Z+8, r18	; 0x08
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	88 23       	and	r24, r24
    25d2:	69 f0       	breq	.+26     	; 0x25ee <_ZN17LiquidCrystal_I2C5beginEhhh+0x5c>
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	51 f4       	brne	.+20     	; 0x25ee <_ZN17LiquidCrystal_I2C5beginEhhh+0x5c>
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	fc 01       	movw	r30, r24
    25e0:	85 81       	ldd	r24, Z+5	; 0x05
    25e2:	28 2f       	mov	r18, r24
    25e4:	24 60       	ori	r18, 0x04	; 4
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	fc 01       	movw	r30, r24
    25ec:	25 83       	std	Z+5, r18	; 0x05
    25ee:	62 e3       	ldi	r22, 0x32	; 50
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	fc 01       	movw	r30, r24
    2600:	23 85       	ldd	r18, Z+11	; 0x0b
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	62 2f       	mov	r22, r18
    2608:	58 d1       	rcall	.+688    	; 0x28ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    260a:	68 ee       	ldi	r22, 0xE8	; 232
    260c:	73 e0       	ldi	r23, 0x03	; 3
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	60 e3       	ldi	r22, 0x30	; 48
    261c:	37 d1       	rcall	.+622    	; 0x288c <_ZN17LiquidCrystal_I2C10write4bitsEh>
    261e:	84 e9       	ldi	r24, 0x94	; 148
    2620:	91 e1       	ldi	r25, 0x11	; 17
    2622:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	60 e3       	ldi	r22, 0x30	; 48
    262c:	2f d1       	rcall	.+606    	; 0x288c <_ZN17LiquidCrystal_I2C10write4bitsEh>
    262e:	84 e9       	ldi	r24, 0x94	; 148
    2630:	91 e1       	ldi	r25, 0x11	; 17
    2632:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	60 e3       	ldi	r22, 0x30	; 48
    263c:	27 d1       	rcall	.+590    	; 0x288c <_ZN17LiquidCrystal_I2C10write4bitsEh>
    263e:	86 e9       	ldi	r24, 0x96	; 150
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	60 e2       	ldi	r22, 0x20	; 32
    264c:	1f d1       	rcall	.+574    	; 0x288c <_ZN17LiquidCrystal_I2C10write4bitsEh>
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	fc 01       	movw	r30, r24
    2654:	85 81       	ldd	r24, Z+5	; 0x05
    2656:	28 2f       	mov	r18, r24
    2658:	20 62       	ori	r18, 0x20	; 32
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	62 2f       	mov	r22, r18
    2660:	d0 d0       	rcall	.+416    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	24 e0       	ldi	r18, 0x04	; 4
    2668:	fc 01       	movw	r30, r24
    266a:	26 83       	std	Z+6, r18	; 0x06
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	8f d0       	rcall	.+286    	; 0x2790 <_ZN17LiquidCrystal_I2C7displayEv>
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	1b d0       	rcall	.+54     	; 0x26ae <_ZN17LiquidCrystal_I2C5clearEv>
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	22 e0       	ldi	r18, 0x02	; 2
    267e:	fc 01       	movw	r30, r24
    2680:	27 83       	std	Z+7, r18	; 0x07
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	fc 01       	movw	r30, r24
    2688:	87 81       	ldd	r24, Z+7	; 0x07
    268a:	28 2f       	mov	r18, r24
    268c:	24 60       	ori	r18, 0x04	; 4
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	62 2f       	mov	r22, r18
    2694:	b6 d0       	rcall	.+364    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	1f d0       	rcall	.+62     	; 0x26da <_ZN17LiquidCrystal_I2C4homeEv>
    269c:	00 00       	nop
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	08 95       	ret

000026ae <_ZN17LiquidCrystal_I2C5clearEv>:
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	1f 92       	push	r1
    26b4:	1f 92       	push	r1
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	9e d0       	rcall	.+316    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    26c6:	80 ed       	ldi	r24, 0xD0	; 208
    26c8:	97 e0       	ldi	r25, 0x07	; 7
    26ca:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
    26ce:	00 00       	nop
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <_ZN17LiquidCrystal_I2C4homeEv>:
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	1f 92       	push	r1
    26e0:	1f 92       	push	r1
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	88 d0       	rcall	.+272    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    26f2:	80 ed       	ldi	r24, 0xD0	; 208
    26f4:	97 e0       	ldi	r25, 0x07	; 7
    26f6:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
    26fa:	00 00       	nop
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	2c 97       	sbiw	r28, 0x0c	; 12
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	9a 87       	std	Y+10, r25	; 0x0a
    271c:	89 87       	std	Y+9, r24	; 0x09
    271e:	6b 87       	std	Y+11, r22	; 0x0b
    2720:	4c 87       	std	Y+12, r20	; 0x0c
    2722:	28 e0       	ldi	r18, 0x08	; 8
    2724:	ee ea       	ldi	r30, 0xAE	; 174
    2726:	f2 e0       	ldi	r31, 0x02	; 2
    2728:	ce 01       	movw	r24, r28
    272a:	01 96       	adiw	r24, 0x01	; 1
    272c:	dc 01       	movw	r26, r24
    272e:	01 90       	ld	r0, Z+
    2730:	0d 92       	st	X+, r0
    2732:	2a 95       	dec	r18
    2734:	e1 f7       	brne	.-8      	; 0x272e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x28>
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	fc 01       	movw	r30, r24
    273c:	90 85       	ldd	r25, Z+8	; 0x08
    273e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2740:	98 17       	cp	r25, r24
    2742:	30 f4       	brcc	.+12     	; 0x2750 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x4a>
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	fc 01       	movw	r30, r24
    274a:	80 85       	ldd	r24, Z+8	; 0x08
    274c:	81 50       	subi	r24, 0x01	; 1
    274e:	8c 87       	std	Y+12, r24	; 0x0c
    2750:	8c 85       	ldd	r24, Y+12	; 0x0c
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	9e 01       	movw	r18, r28
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	fc 01       	movw	r30, r24
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	98 2f       	mov	r25, r24
    276c:	8b 85       	ldd	r24, Y+11	; 0x0b
    276e:	89 0f       	add	r24, r25
    2770:	80 68       	ori	r24, 0x80	; 128
    2772:	28 2f       	mov	r18, r24
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	62 2f       	mov	r22, r18
    277a:	43 d0       	rcall	.+134    	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    277c:	00 00       	nop
    277e:	2c 96       	adiw	r28, 0x0c	; 12
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	08 95       	ret

00002790 <_ZN17LiquidCrystal_I2C7displayEv>:
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	1f 92       	push	r1
    2796:	1f 92       	push	r1
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	9a 83       	std	Y+2, r25	; 0x02
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	fc 01       	movw	r30, r24
    27a6:	86 81       	ldd	r24, Z+6	; 0x06
    27a8:	28 2f       	mov	r18, r24
    27aa:	24 60       	ori	r18, 0x04	; 4
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	fc 01       	movw	r30, r24
    27b2:	26 83       	std	Z+6, r18	; 0x06
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	fc 01       	movw	r30, r24
    27ba:	86 81       	ldd	r24, Z+6	; 0x06
    27bc:	28 2f       	mov	r18, r24
    27be:	28 60       	ori	r18, 0x08	; 8
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	62 2f       	mov	r22, r18
    27c6:	1d d0       	rcall	.+58     	; 0x2802 <_ZN17LiquidCrystal_I2C7commandEh>
    27c8:	00 00       	nop
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	08 95       	ret

000027d4 <_ZN17LiquidCrystal_I2C9backlightEv>:

void LiquidCrystal_I2C::backlight(void) {
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	1f 92       	push	r1
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
	_backlightval=LCD_BACKLIGHT;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	28 e0       	ldi	r18, 0x08	; 8
    27ea:	fc 01       	movw	r30, r24
    27ec:	23 87       	std	Z+11, r18	; 0x0b
	expanderWrite(0);
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	62 d0       	rcall	.+196    	; 0x28ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
}
    27f6:	00 00       	nop
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret

00002802 <_ZN17LiquidCrystal_I2C7commandEh>:



/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	00 d0       	rcall	.+0      	; 0x2808 <_ZN17LiquidCrystal_I2C7commandEh+0x6>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9a 83       	std	Y+2, r25	; 0x02
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	6b 83       	std	Y+3, r22	; 0x03
	send(value, 0);
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	6b 81       	ldd	r22, Y+3	; 0x03
    281a:	07 d0       	rcall	.+14     	; 0x282a <_ZN17LiquidCrystal_I2C4sendEhh>
}
    281c:	00 00       	nop
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	08 95       	ret

0000282a <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	00 d0       	rcall	.+0      	; 0x2830 <_ZN17LiquidCrystal_I2C4sendEhh+0x6>
    2830:	00 d0       	rcall	.+0      	; 0x2832 <_ZN17LiquidCrystal_I2C4sendEhh+0x8>
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	6d 83       	std	Y+5, r22	; 0x05
    283c:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t highnib=value&0xf0;
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	80 7f       	andi	r24, 0xF0	; 240
    2842:	89 83       	std	Y+1, r24	; 0x01
	uint8_t lownib=(value<<4)&0xf0;
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	88 2f       	mov	r24, r24
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	82 95       	swap	r24
    284c:	92 95       	swap	r25
    284e:	90 7f       	andi	r25, 0xF0	; 240
    2850:	98 27       	eor	r25, r24
    2852:	80 7f       	andi	r24, 0xF0	; 240
    2854:	98 27       	eor	r25, r24
    2856:	8a 83       	std	Y+2, r24	; 0x02
       write4bits((highnib)|mode);
    2858:	99 81       	ldd	r25, Y+1	; 0x01
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	29 2f       	mov	r18, r25
    285e:	28 2b       	or	r18, r24
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	62 2f       	mov	r22, r18
    2866:	12 d0       	rcall	.+36     	; 0x288c <_ZN17LiquidCrystal_I2C10write4bitsEh>
	write4bits((lownib)|mode); 
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	29 2f       	mov	r18, r25
    286e:	28 2b       	or	r18, r24
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	62 2f       	mov	r22, r18
    2876:	0a d0       	rcall	.+20     	; 0x288c <_ZN17LiquidCrystal_I2C10write4bitsEh>
}
    2878:	00 00       	nop
    287a:	26 96       	adiw	r28, 0x06	; 6
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	08 95       	ret

0000288c <_ZN17LiquidCrystal_I2C10write4bitsEh>:

void LiquidCrystal_I2C::write4bits(uint8_t value) {
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	00 d0       	rcall	.+0      	; 0x2892 <_ZN17LiquidCrystal_I2C10write4bitsEh+0x6>
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	6b 83       	std	Y+3, r22	; 0x03
	expanderWrite(value);
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	6b 81       	ldd	r22, Y+3	; 0x03
    28a2:	0b d0       	rcall	.+22     	; 0x28ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	pulseEnable(value);
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	9a 81       	ldd	r25, Y+2	; 0x02
    28a8:	6b 81       	ldd	r22, Y+3	; 0x03
    28aa:	30 d0       	rcall	.+96     	; 0x290c <_ZN17LiquidCrystal_I2C11pulseEnableEh>
}
    28ac:	00 00       	nop
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	08 95       	ret

000028ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>:

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x6>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	6b 83       	std	Y+3, r22	; 0x03
	Wire.beginTransmission(_Addr);
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	fc 01       	movw	r30, r24
    28d0:	84 81       	ldd	r24, Z+4	; 0x04
    28d2:	68 2f       	mov	r22, r24
    28d4:	8e ee       	ldi	r24, 0xEE	; 238
    28d6:	94 e0       	ldi	r25, 0x04	; 4
    28d8:	0e 94 86 28 	call	0x510c	; 0x510c <_ZN7TwoWire17beginTransmissionEh>
	printIIC((int)(_data) | _backlightval);
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	fc 01       	movw	r30, r24
    28e2:	93 85       	ldd	r25, Z+11	; 0x0b
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	89 2b       	or	r24, r25
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	bc 01       	movw	r22, r24
    28ee:	8e ee       	ldi	r24, 0xEE	; 238
    28f0:	94 e0       	ldi	r25, 0x04	; 4
    28f2:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7TwoWire5writeEi>
	Wire.endTransmission();   
    28f6:	8e ee       	ldi	r24, 0xEE	; 238
    28f8:	94 e0       	ldi	r25, 0x04	; 4
    28fa:	0e 94 da 28 	call	0x51b4	; 0x51b4 <_ZN7TwoWire15endTransmissionEv>
}
    28fe:	00 00       	nop
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	08 95       	ret

0000290c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	00 d0       	rcall	.+0      	; 0x2912 <_ZN17LiquidCrystal_I2C11pulseEnableEh+0x6>
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	6b 83       	std	Y+3, r22	; 0x03
	expanderWrite(_data | En);	// En high
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	28 2f       	mov	r18, r24
    2920:	24 60       	ori	r18, 0x04	; 4
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	62 2f       	mov	r22, r18
    2928:	c8 df       	rcall	.-112    	; 0x28ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(1);		// enable pulse must be >450ns
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
	
	expanderWrite(_data & ~En);	// En low
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	28 2f       	mov	r18, r24
    2936:	2b 7f       	andi	r18, 0xFB	; 251
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	62 2f       	mov	r22, r18
    293e:	bd df       	rcall	.-134    	; 0x28ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(50);		// commands need > 37us to settle
    2940:	82 e3       	ldi	r24, 0x32	; 50
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <delayMicroseconds>
} 
    2948:	00 00       	nop
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	08 95       	ret

00002956 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2956:	0f 93       	push	r16
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	28 97       	sbiw	r28, 0x08	; 8
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	4b 83       	std	Y+3, r20	; 0x03
    2972:	5c 83       	std	Y+4, r21	; 0x04
    2974:	6d 83       	std	Y+5, r22	; 0x05
    2976:	7e 83       	std	Y+6, r23	; 0x06
    2978:	2f 83       	std	Y+7, r18	; 0x07
    297a:	08 87       	std	Y+8, r16	; 0x08
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	ad 81       	ldd	r26, Y+5	; 0x05
    2982:	be 81       	ldd	r27, Y+6	; 0x06
    2984:	e9 81       	ldd	r30, Y+1	; 0x01
    2986:	fa 81       	ldd	r31, Y+2	; 0x02
    2988:	08 85       	ldd	r16, Y+8	; 0x08
    298a:	2f 81       	ldd	r18, Y+7	; 0x07
    298c:	ac 01       	movw	r20, r24
    298e:	bd 01       	movw	r22, r26
    2990:	cf 01       	movw	r24, r30
    2992:	0b d0       	rcall	.+22     	; 0x29aa <_ZN11SPISettings16init_MightInlineEmhh>
    2994:	00 00       	nop
    2996:	28 96       	adiw	r28, 0x08	; 8
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <_ZN11SPISettings16init_MightInlineEmhh>:
    29aa:	0f 93       	push	r16
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	65 97       	sbiw	r28, 0x15	; 21
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	9f 87       	std	Y+15, r25	; 0x0f
    29c2:	8e 87       	std	Y+14, r24	; 0x0e
    29c4:	48 8b       	std	Y+16, r20	; 0x10
    29c6:	59 8b       	std	Y+17, r21	; 0x11
    29c8:	6a 8b       	std	Y+18, r22	; 0x12
    29ca:	7b 8b       	std	Y+19, r23	; 0x13
    29cc:	2c 8b       	std	Y+20, r18	; 0x14
    29ce:	0d 8b       	std	Y+21, r16	; 0x15
    29d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    29d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	88 89       	ldd	r24, Y+16	; 0x10
    29da:	99 89       	ldd	r25, Y+17	; 0x11
    29dc:	aa 89       	ldd	r26, Y+18	; 0x12
    29de:	bb 89       	ldd	r27, Y+19	; 0x13
    29e0:	8b 83       	std	Y+3, r24	; 0x03
    29e2:	9c 83       	std	Y+4, r25	; 0x04
    29e4:	ad 83       	std	Y+5, r26	; 0x05
    29e6:	be 83       	std	Y+6, r27	; 0x06
    29e8:	8c 89       	ldd	r24, Y+20	; 0x14
    29ea:	8f 83       	std	Y+7, r24	; 0x07
    29ec:	8d 89       	ldd	r24, Y+21	; 0x15
    29ee:	88 87       	std	Y+8, r24	; 0x08
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	92 e1       	ldi	r25, 0x12	; 18
    29f4:	aa e7       	ldi	r26, 0x7A	; 122
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	89 87       	std	Y+9, r24	; 0x09
    29fa:	9a 87       	std	Y+10, r25	; 0x0a
    29fc:	ab 87       	std	Y+11, r26	; 0x0b
    29fe:	bc 87       	std	Y+12, r27	; 0x0c
    2a00:	1d 86       	std	Y+13, r1	; 0x0d
    2a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a04:	86 30       	cpi	r24, 0x06	; 6
    2a06:	e8 f4       	brcc	.+58     	; 0x2a42 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2a08:	2b 81       	ldd	r18, Y+3	; 0x03
    2a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0c:	4d 81       	ldd	r20, Y+5	; 0x05
    2a0e:	5e 81       	ldd	r21, Y+6	; 0x06
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a16:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a18:	28 17       	cp	r18, r24
    2a1a:	39 07       	cpc	r19, r25
    2a1c:	4a 07       	cpc	r20, r26
    2a1e:	5b 07       	cpc	r21, r27
    2a20:	80 f4       	brcc	.+32     	; 0x2a42 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a28:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a2a:	b6 95       	lsr	r27
    2a2c:	a7 95       	ror	r26
    2a2e:	97 95       	ror	r25
    2a30:	87 95       	ror	r24
    2a32:	89 87       	std	Y+9, r24	; 0x09
    2a34:	9a 87       	std	Y+10, r25	; 0x0a
    2a36:	ab 87       	std	Y+11, r26	; 0x0b
    2a38:	bc 87       	std	Y+12, r27	; 0x0c
    2a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	8d 87       	std	Y+13, r24	; 0x0d
    2a40:	e0 cf       	rjmp	.-64     	; 0x2a02 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a44:	86 30       	cpi	r24, 0x06	; 6
    2a46:	11 f4       	brne	.+4      	; 0x2a4c <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2a48:	87 e0       	ldi	r24, 0x07	; 7
    2a4a:	8d 87       	std	Y+13, r24	; 0x0d
    2a4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	89 27       	eor	r24, r25
    2a52:	8d 87       	std	Y+13, r24	; 0x0d
    2a54:	8f 81       	ldd	r24, Y+7	; 0x07
    2a56:	88 23       	and	r24, r24
    2a58:	11 f4       	brne	.+4      	; 0x2a5e <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    2a5a:	80 e7       	ldi	r24, 0x70	; 112
    2a5c:	01 c0       	rjmp	.+2      	; 0x2a60 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2a5e:	80 e5       	ldi	r24, 0x50	; 80
    2a60:	98 85       	ldd	r25, Y+8	; 0x08
    2a62:	9c 70       	andi	r25, 0x0C	; 12
    2a64:	29 2f       	mov	r18, r25
    2a66:	28 2b       	or	r18, r24
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	95 95       	asr	r25
    2a70:	87 95       	ror	r24
    2a72:	83 70       	andi	r24, 0x03	; 3
    2a74:	82 2b       	or	r24, r18
    2a76:	28 2f       	mov	r18, r24
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	20 83       	st	Z, r18
    2a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a82:	28 2f       	mov	r18, r24
    2a84:	21 70       	andi	r18, 0x01	; 1
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	21 83       	std	Z+1, r18	; 0x01
    2a8e:	00 00       	nop
    2a90:	65 96       	adiw	r28, 0x15	; 21
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9b 83       	std	Y+3, r25	; 0x03
    2ab0:	8a 83       	std	Y+2, r24	; 0x02
    2ab2:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN8SPIClass13interruptModeE>
    2ab6:	88 23       	and	r24, r24
    2ab8:	31 f1       	breq	.+76     	; 0x2b06 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2aba:	8f e5       	ldi	r24, 0x5F	; 95
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	fc 01       	movw	r30, r24
    2ac0:	80 81       	ld	r24, Z
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	f8 94       	cli
    2ac6:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN8SPIClass13interruptModeE>
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	c9 f4       	brne	.+50     	; 0x2b00 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    2ace:	8d e3       	ldi	r24, 0x3D	; 61
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	80 81       	ld	r24, Z
    2ad6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <_ZN8SPIClass13interruptSaveE>
    2ada:	8d e3       	ldi	r24, 0x3D	; 61
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	2d e3       	ldi	r18, 0x3D	; 61
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	f9 01       	movw	r30, r18
    2ae4:	20 81       	ld	r18, Z
    2ae6:	32 2f       	mov	r19, r18
    2ae8:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <_ZN8SPIClass13interruptMaskE>
    2aec:	20 95       	com	r18
    2aee:	23 23       	and	r18, r19
    2af0:	fc 01       	movw	r30, r24
    2af2:	20 83       	st	Z, r18
    2af4:	8f e5       	ldi	r24, 0x5F	; 95
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	29 81       	ldd	r18, Y+1	; 0x01
    2afa:	fc 01       	movw	r30, r24
    2afc:	20 83       	st	Z, r18
    2afe:	03 c0       	rjmp	.+6      	; 0x2b06 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <_ZN8SPIClass13interruptSaveE>
    2b06:	8c e4       	ldi	r24, 0x4C	; 76
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	20 83       	st	Z, r18
    2b10:	8d e4       	ldi	r24, 0x4D	; 77
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	2b 81       	ldd	r18, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	20 83       	st	Z, r18
    2b1a:	00 00       	nop
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <_ZN8SPIClass8transferEh>:
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	1f 92       	push	r1
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	8e e4       	ldi	r24, 0x4E	; 78
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	29 81       	ldd	r18, Y+1	; 0x01
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	20 83       	st	Z, r18
    2b3e:	00 00       	nop
    2b40:	8d e4       	ldi	r24, 0x4D	; 77
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	fc 01       	movw	r30, r24
    2b46:	80 81       	ld	r24, Z
    2b48:	80 95       	com	r24
    2b4a:	88 1f       	adc	r24, r24
    2b4c:	88 27       	eor	r24, r24
    2b4e:	88 1f       	adc	r24, r24
    2b50:	88 23       	and	r24, r24
    2b52:	09 f0       	breq	.+2      	; 0x2b56 <_ZN8SPIClass8transferEh+0x2e>
    2b54:	f5 cf       	rjmp	.-22     	; 0x2b40 <_ZN8SPIClass8transferEh+0x18>
    2b56:	8e e4       	ldi	r24, 0x4E	; 78
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	80 81       	ld	r24, Z
    2b5e:	0f 90       	pop	r0
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	08 95       	ret

00002b66 <_ZN8SPIClass14endTransactionEv>:
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	1f 92       	push	r1
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN8SPIClass13interruptModeE>
    2b74:	88 23       	and	r24, r24
    2b76:	e1 f0       	breq	.+56     	; 0x2bb0 <_ZN8SPIClass14endTransactionEv+0x4a>
    2b78:	8f e5       	ldi	r24, 0x5F	; 95
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	80 81       	ld	r24, Z
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	f8 94       	cli
    2b84:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN8SPIClass13interruptModeE>
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	61 f4       	brne	.+24     	; 0x2ba4 <_ZN8SPIClass14endTransactionEv+0x3e>
    2b8c:	8d e3       	ldi	r24, 0x3D	; 61
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN8SPIClass13interruptSaveE>
    2b94:	fc 01       	movw	r30, r24
    2b96:	20 83       	st	Z, r18
    2b98:	8f e5       	ldi	r24, 0x5F	; 95
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	29 81       	ldd	r18, Y+1	; 0x01
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	20 83       	st	Z, r18
    2ba2:	06 c0       	rjmp	.+12     	; 0x2bb0 <_ZN8SPIClass14endTransactionEv+0x4a>
    2ba4:	8f e5       	ldi	r24, 0x5F	; 95
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN8SPIClass13interruptSaveE>
    2bac:	fc 01       	movw	r30, r24
    2bae:	20 83       	st	Z, r18
    2bb0:	00 00       	nop
    2bb2:	0f 90       	pop	r0
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	08 95       	ret

00002bba <_ZN7MFRC522C1Ehh>:
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <_ZN7MFRC522C1Ehh+0x6>
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	6b 83       	std	Y+3, r22	; 0x03
    2bcc:	4c 83       	std	Y+4, r20	; 0x04
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	24 87       	std	Z+12, r18	; 0x0c
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2bde:	fc 01       	movw	r30, r24
    2be0:	25 87       	std	Z+13, r18	; 0x0d
    2be2:	00 00       	nop
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	08 95       	ret

00002bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    2bf2:	0f 93       	push	r16
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	6d 83       	std	Y+5, r22	; 0x05
    2c06:	4e 83       	std	Y+6, r20	; 0x06
    2c08:	00 e0       	ldi	r16, 0x00	; 0
    2c0a:	21 e0       	ldi	r18, 0x01	; 1
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	ba 01       	movw	r22, r20
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	9f de       	rcall	.-706    	; 0x2956 <_ZN11SPISettingsC1Emhh>
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	43 df       	rcall	.-378    	; 0x2aa4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	fc 01       	movw	r30, r24
    2c24:	84 85       	ldd	r24, Z+12	; 0x0c
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	8e 77       	andi	r24, 0x7E	; 126
    2c30:	7b df       	rcall	.-266    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2c32:	8e 81       	ldd	r24, Y+6	; 0x06
    2c34:	79 df       	rcall	.-270    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c3e:	61 e0       	ldi	r22, 0x01	; 1
    2c40:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2c44:	90 df       	rcall	.-224    	; 0x2b66 <_ZN8SPIClass14endTransactionEv>
    2c46:	00 00       	nop
    2c48:	26 96       	adiw	r28, 0x06	; 6
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	0f 91       	pop	r16
    2c5a:	08 95       	ret

00002c5c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    2c5c:	0f 93       	push	r16
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	29 97       	sbiw	r28, 0x09	; 9
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	9d 83       	std	Y+5, r25	; 0x05
    2c74:	8c 83       	std	Y+4, r24	; 0x04
    2c76:	6e 83       	std	Y+6, r22	; 0x06
    2c78:	4f 83       	std	Y+7, r20	; 0x07
    2c7a:	39 87       	std	Y+9, r19	; 0x09
    2c7c:	28 87       	std	Y+8, r18	; 0x08
    2c7e:	ce 01       	movw	r24, r28
    2c80:	02 96       	adiw	r24, 0x02	; 2
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	21 e0       	ldi	r18, 0x01	; 1
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	ba 01       	movw	r22, r20
    2c8c:	64 de       	rcall	.-824    	; 0x2956 <_ZN11SPISettingsC1Emhh>
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	9b 81       	ldd	r25, Y+3	; 0x03
    2c92:	08 df       	rcall	.-496    	; 0x2aa4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	9d 81       	ldd	r25, Y+5	; 0x05
    2c98:	fc 01       	movw	r30, r24
    2c9a:	84 85       	ldd	r24, Z+12	; 0x0c
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca4:	8e 77       	andi	r24, 0x7E	; 126
    2ca6:	40 df       	rcall	.-384    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2ca8:	19 82       	std	Y+1, r1	; 0x01
    2caa:	99 81       	ldd	r25, Y+1	; 0x01
    2cac:	8f 81       	ldd	r24, Y+7	; 0x07
    2cae:	98 17       	cp	r25, r24
    2cb0:	70 f4       	brcc	.+28     	; 0x2cce <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	28 85       	ldd	r18, Y+8	; 0x08
    2cba:	39 85       	ldd	r19, Y+9	; 0x09
    2cbc:	82 0f       	add	r24, r18
    2cbe:	93 1f       	adc	r25, r19
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	80 81       	ld	r24, Z
    2cc4:	31 df       	rcall	.-414    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	ee cf       	rjmp	.-36     	; 0x2caa <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	84 85       	ldd	r24, Z+12	; 0x0c
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2cdc:	44 df       	rcall	.-376    	; 0x2b66 <_ZN8SPIClass14endTransactionEv>
    2cde:	00 00       	nop
    2ce0:	29 96       	adiw	r28, 0x09	; 9
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	0f 91       	pop	r16
    2cf2:	08 95       	ret

00002cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    2cf4:	0f 93       	push	r16
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	9d 83       	std	Y+5, r25	; 0x05
    2d04:	8c 83       	std	Y+4, r24	; 0x04
    2d06:	6e 83       	std	Y+6, r22	; 0x06
    2d08:	ce 01       	movw	r24, r28
    2d0a:	02 96       	adiw	r24, 0x02	; 2
    2d0c:	00 e0       	ldi	r16, 0x00	; 0
    2d0e:	21 e0       	ldi	r18, 0x01	; 1
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	ba 01       	movw	r22, r20
    2d16:	1f de       	rcall	.-962    	; 0x2956 <_ZN11SPISettingsC1Emhh>
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1c:	c3 de       	rcall	.-634    	; 0x2aa4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d20:	9d 81       	ldd	r25, Y+5	; 0x05
    2d22:	fc 01       	movw	r30, r24
    2d24:	84 85       	ldd	r24, Z+12	; 0x0c
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2d2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2e:	8e 77       	andi	r24, 0x7E	; 126
    2d30:	80 68       	ori	r24, 0x80	; 128
    2d32:	fa de       	rcall	.-524    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	f8 de       	rcall	.-528    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d3e:	fc 01       	movw	r30, r24
    2d40:	84 85       	ldd	r24, Z+12	; 0x0c
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2d48:	0e df       	rcall	.-484    	; 0x2b66 <_ZN8SPIClass14endTransactionEv>
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	26 96       	adiw	r28, 0x06	; 6
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	2e 97       	sbiw	r28, 0x0e	; 14
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	99 87       	std	Y+9, r25	; 0x09
    2d7a:	88 87       	std	Y+8, r24	; 0x08
    2d7c:	6a 87       	std	Y+10, r22	; 0x0a
    2d7e:	4b 87       	std	Y+11, r20	; 0x0b
    2d80:	3d 87       	std	Y+13, r19	; 0x0d
    2d82:	2c 87       	std	Y+12, r18	; 0x0c
    2d84:	0e 87       	std	Y+14, r16	; 0x0e
    2d86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d88:	88 23       	and	r24, r24
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    2d8c:	7e c0       	rjmp	.+252    	; 0x2e8a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    2d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d90:	8e 77       	andi	r24, 0x7E	; 126
    2d92:	80 68       	ori	r24, 0x80	; 128
    2d94:	8c 83       	std	Y+4, r24	; 0x04
    2d96:	19 82       	std	Y+1, r1	; 0x01
    2d98:	ce 01       	movw	r24, r28
    2d9a:	06 96       	adiw	r24, 0x06	; 6
    2d9c:	00 e0       	ldi	r16, 0x00	; 0
    2d9e:	21 e0       	ldi	r18, 0x01	; 1
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	ba 01       	movw	r22, r20
    2da6:	d7 dd       	rcall	.-1106   	; 0x2956 <_ZN11SPISettingsC1Emhh>
    2da8:	8e 81       	ldd	r24, Y+6	; 0x06
    2daa:	9f 81       	ldd	r25, Y+7	; 0x07
    2dac:	7b de       	rcall	.-778    	; 0x2aa4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2dae:	88 85       	ldd	r24, Y+8	; 0x08
    2db0:	99 85       	ldd	r25, Y+9	; 0x09
    2db2:	fc 01       	movw	r30, r24
    2db4:	84 85       	ldd	r24, Z+12	; 0x0c
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dbe:	81 50       	subi	r24, 0x01	; 1
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc4:	b1 de       	rcall	.-670    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2dc6:	99 81       	ldd	r25, Y+1	; 0x01
    2dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dca:	98 17       	cp	r25, r24
    2dcc:	08 f0       	brcs	.+2      	; 0x2dd0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    2dce:	48 c0       	rjmp	.+144    	; 0x2e60 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	88 23       	and	r24, r24
    2dd4:	a9 f5       	brne	.+106    	; 0x2e40 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2dd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dd8:	88 23       	and	r24, r24
    2dda:	91 f1       	breq	.+100    	; 0x2e40 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2ddc:	1a 82       	std	Y+2, r1	; 0x02
    2dde:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de0:	8b 83       	std	Y+3, r24	; 0x03
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	88 30       	cpi	r24, 0x08	; 8
    2de6:	90 f4       	brcc	.+36     	; 0x2e0c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	02 c0       	rjmp	.+4      	; 0x2df8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	2a 95       	dec	r18
    2dfa:	e2 f7       	brpl	.-8      	; 0x2df4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	89 2b       	or	r24, r25
    2e02:	8a 83       	std	Y+2, r24	; 0x02
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	8f 5f       	subi	r24, 0xFF	; 255
    2e08:	8b 83       	std	Y+3, r24	; 0x03
    2e0a:	eb cf       	rjmp	.-42     	; 0x2de2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    2e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0e:	8c de       	rcall	.-744    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2e10:	8d 83       	std	Y+5, r24	; 0x05
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e1c:	82 0f       	add	r24, r18
    2e1e:	93 1f       	adc	r25, r19
    2e20:	fc 01       	movw	r30, r24
    2e22:	80 81       	ld	r24, Z
    2e24:	98 2f       	mov	r25, r24
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	80 95       	com	r24
    2e2a:	89 23       	and	r24, r25
    2e2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	92 23       	and	r25, r18
    2e32:	89 2b       	or	r24, r25
    2e34:	28 2f       	mov	r18, r24
    2e36:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e38:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	20 83       	st	Z, r18
    2e3e:	0c c0       	rjmp	.+24     	; 0x2e58 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e48:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e4a:	89 01       	movw	r16, r18
    2e4c:	08 0f       	add	r16, r24
    2e4e:	19 1f       	adc	r17, r25
    2e50:	8c 81       	ldd	r24, Y+4	; 0x04
    2e52:	6a de       	rcall	.-812    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2e54:	f8 01       	movw	r30, r16
    2e56:	80 83       	st	Z, r24
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	8f 5f       	subi	r24, 0xFF	; 255
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	b3 cf       	rjmp	.-154    	; 0x2dc6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	88 2f       	mov	r24, r24
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e68:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e6a:	89 01       	movw	r16, r18
    2e6c:	08 0f       	add	r16, r24
    2e6e:	19 1f       	adc	r17, r25
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	5a de       	rcall	.-844    	; 0x2b28 <_ZN8SPIClass8transferEh>
    2e74:	f8 01       	movw	r30, r16
    2e76:	80 83       	st	Z, r24
    2e78:	88 85       	ldd	r24, Y+8	; 0x08
    2e7a:	99 85       	ldd	r25, Y+9	; 0x09
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	84 85       	ldd	r24, Z+12	; 0x0c
    2e80:	61 e0       	ldi	r22, 0x01	; 1
    2e82:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    2e86:	6f de       	rcall	.-802    	; 0x2b66 <_ZN8SPIClass14endTransactionEv>
    2e88:	01 c0       	rjmp	.+2      	; 0x2e8c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    2e8a:	00 00       	nop
    2e8c:	2e 96       	adiw	r28, 0x0e	; 14
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

00002ea2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    2ea8:	1f 92       	push	r1
    2eaa:	1f 92       	push	r1
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
    2eb4:	6c 83       	std	Y+4, r22	; 0x04
    2eb6:	4d 83       	std	Y+5, r20	; 0x05
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	6c 81       	ldd	r22, Y+4	; 0x04
    2ebe:	1a df       	rcall	.-460    	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	99 81       	ldd	r25, Y+1	; 0x01
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	29 2f       	mov	r18, r25
    2ec8:	28 2b       	or	r18, r24
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ece:	42 2f       	mov	r20, r18
    2ed0:	6c 81       	ldd	r22, Y+4	; 0x04
    2ed2:	8f de       	rcall	.-738    	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ed4:	00 00       	nop
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	08 95       	ret

00002ee6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    2eec:	1f 92       	push	r1
    2eee:	1f 92       	push	r1
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	9b 83       	std	Y+3, r25	; 0x03
    2ef6:	8a 83       	std	Y+2, r24	; 0x02
    2ef8:	6c 83       	std	Y+4, r22	; 0x04
    2efa:	4d 83       	std	Y+5, r20	; 0x05
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	6c 81       	ldd	r22, Y+4	; 0x04
    2f02:	f8 de       	rcall	.-528    	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	98 2f       	mov	r25, r24
    2f0a:	90 95       	com	r25
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	89 23       	and	r24, r25
    2f10:	28 2f       	mov	r18, r24
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	42 2f       	mov	r20, r18
    2f18:	6c 81       	ldd	r22, Y+4	; 0x04
    2f1a:	6b de       	rcall	.-810    	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2f1c:	00 00       	nop
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	08 95       	ret

00002f2e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	2a 97       	sbiw	r28, 0x0a	; 10
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	9d 83       	std	Y+5, r25	; 0x05
    2f48:	8c 83       	std	Y+4, r24	; 0x04
    2f4a:	7f 83       	std	Y+7, r23	; 0x07
    2f4c:	6e 83       	std	Y+6, r22	; 0x06
    2f4e:	48 87       	std	Y+8, r20	; 0x08
    2f50:	3a 87       	std	Y+10, r19	; 0x0a
    2f52:	29 87       	std	Y+9, r18	; 0x09
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	62 e0       	ldi	r22, 0x02	; 2
    2f5c:	4a de       	rcall	.-876    	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f60:	9d 81       	ldd	r25, Y+5	; 0x05
    2f62:	44 e0       	ldi	r20, 0x04	; 4
    2f64:	6a e0       	ldi	r22, 0x0A	; 10
    2f66:	45 de       	rcall	.-886    	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2f68:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	64 e1       	ldi	r22, 0x14	; 20
    2f70:	98 df       	rcall	.-208    	; 0x2ea2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2f72:	2e 81       	ldd	r18, Y+6	; 0x06
    2f74:	3f 81       	ldd	r19, Y+7	; 0x07
    2f76:	8c 81       	ldd	r24, Y+4	; 0x04
    2f78:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7a:	48 85       	ldd	r20, Y+8	; 0x08
    2f7c:	62 e1       	ldi	r22, 0x12	; 18
    2f7e:	6e de       	rcall	.-804    	; 0x2c5c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	9d 81       	ldd	r25, Y+5	; 0x05
    2f84:	43 e0       	ldi	r20, 0x03	; 3
    2f86:	62 e0       	ldi	r22, 0x02	; 2
    2f88:	34 de       	rcall	.-920    	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2f8a:	88 e8       	ldi	r24, 0x88	; 136
    2f8c:	93 e1       	ldi	r25, 0x13	; 19
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	8c 81       	ldd	r24, Y+4	; 0x04
    2f94:	9d 81       	ldd	r25, Y+5	; 0x05
    2f96:	6a e0       	ldi	r22, 0x0A	; 10
    2f98:	ad de       	rcall	.-678    	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	84 70       	andi	r24, 0x04	; 4
    2fa4:	99 27       	eor	r25, r25
    2fa6:	89 2b       	or	r24, r25
    2fa8:	79 f4       	brne	.+30     	; 0x2fc8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	21 e0       	ldi	r18, 0x01	; 1
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	89 2b       	or	r24, r25
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	22 23       	and	r18, r18
    2fc2:	39 f3       	breq	.-50     	; 0x2f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	1b c0       	rjmp	.+54     	; 0x2ffe <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    2fc8:	00 00       	nop
    2fca:	8c 81       	ldd	r24, Y+4	; 0x04
    2fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	62 e0       	ldi	r22, 0x02	; 2
    2fd2:	0f de       	rcall	.-994    	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd8:	64 e4       	ldi	r22, 0x44	; 68
    2fda:	8c de       	rcall	.-744    	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2fdc:	28 2f       	mov	r18, r24
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	20 83       	st	Z, r18
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	8c 01       	movw	r16, r24
    2fec:	0f 5f       	subi	r16, 0xFF	; 255
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff4:	62 e4       	ldi	r22, 0x42	; 66
    2ff6:	7e de       	rcall	.-772    	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	80 83       	st	Z, r24
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	2a 96       	adiw	r28, 0x0a	; 10
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	08 95       	ret

00003014 <_ZN7MFRC5228PCD_InitEv>:
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	1f 92       	push	r1
    301a:	1f 92       	push	r1
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	fc 01       	movw	r30, r24
    302a:	84 85       	ldd	r24, Z+12	; 0x0c
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	fc 01       	movw	r30, r24
    3038:	84 85       	ldd	r24, Z+12	; 0x0c
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	fc 01       	movw	r30, r24
    3046:	85 85       	ldd	r24, Z+13	; 0x0d
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	fc 01       	movw	r30, r24
    3054:	85 85       	ldd	r24, Z+13	; 0x0d
    3056:	0e 94 fd 30 	call	0x61fa	; 0x61fa <digitalRead>
    305a:	21 e0       	ldi	r18, 0x01	; 1
    305c:	89 2b       	or	r24, r25
    305e:	09 f0       	breq	.+2      	; 0x3062 <_ZN7MFRC5228PCD_InitEv+0x4e>
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	22 23       	and	r18, r18
    3064:	71 f0       	breq	.+28     	; 0x3082 <_ZN7MFRC5228PCD_InitEv+0x6e>
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	9a 81       	ldd	r25, Y+2	; 0x02
    306a:	fc 01       	movw	r30, r24
    306c:	85 85       	ldd	r24, Z+13	; 0x0d
    306e:	61 e0       	ldi	r22, 0x01	; 1
    3070:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    3074:	62 e3       	ldi	r22, 0x32	; 50
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
    3080:	03 c0       	rjmp	.+6      	; 0x3088 <_ZN7MFRC5228PCD_InitEv+0x74>
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	27 d0       	rcall	.+78     	; 0x30d6 <_ZN7MFRC5229PCD_ResetEv>
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	64 e5       	ldi	r22, 0x54	; 84
    3090:	b0 dd       	rcall	.-1184   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	49 ea       	ldi	r20, 0xA9	; 169
    3098:	66 e5       	ldi	r22, 0x56	; 86
    309a:	ab dd       	rcall	.-1194   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	43 e0       	ldi	r20, 0x03	; 3
    30a2:	68 e5       	ldi	r22, 0x58	; 88
    30a4:	a6 dd       	rcall	.-1204   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	9a 81       	ldd	r25, Y+2	; 0x02
    30aa:	48 ee       	ldi	r20, 0xE8	; 232
    30ac:	6a e5       	ldi	r22, 0x5A	; 90
    30ae:	a1 dd       	rcall	.-1214   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	9a 81       	ldd	r25, Y+2	; 0x02
    30b4:	40 e4       	ldi	r20, 0x40	; 64
    30b6:	6a e2       	ldi	r22, 0x2A	; 42
    30b8:	9c dd       	rcall	.-1224   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	4d e3       	ldi	r20, 0x3D	; 61
    30c0:	62 e2       	ldi	r22, 0x22	; 34
    30c2:	97 dd       	rcall	.-1234   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	2e d0       	rcall	.+92     	; 0x3126 <_ZN7MFRC52213PCD_AntennaOnEv>
    30ca:	00 00       	nop
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	08 95       	ret

000030d6 <_ZN7MFRC5229PCD_ResetEv>:
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	1f 92       	push	r1
    30dc:	1f 92       	push	r1
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	4f e0       	ldi	r20, 0x0F	; 15
    30ec:	62 e0       	ldi	r22, 0x02	; 2
    30ee:	81 dd       	rcall	.-1278   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30f0:	62 e3       	ldi	r22, 0x32	; 50
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <delay>
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	62 e0       	ldi	r22, 0x02	; 2
    3102:	f8 dd       	rcall	.-1040   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3104:	88 2f       	mov	r24, r24
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	80 71       	andi	r24, 0x10	; 16
    310a:	99 27       	eor	r25, r25
    310c:	21 e0       	ldi	r18, 0x01	; 1
    310e:	89 2b       	or	r24, r25
    3110:	09 f4       	brne	.+2      	; 0x3114 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	22 23       	and	r18, r18
    3116:	09 f0       	breq	.+2      	; 0x311a <_ZN7MFRC5229PCD_ResetEv+0x44>
    3118:	f1 cf       	rjmp	.-30     	; 0x30fc <_ZN7MFRC5229PCD_ResetEv+0x26>
    311a:	00 00       	nop
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	08 95       	ret

00003126 <_ZN7MFRC52213PCD_AntennaOnEv>:
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	00 d0       	rcall	.+0      	; 0x312c <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9b 83       	std	Y+3, r25	; 0x03
    3132:	8a 83       	std	Y+2, r24	; 0x02
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	68 e2       	ldi	r22, 0x28	; 40
    313a:	dc dd       	rcall	.-1096   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	83 70       	andi	r24, 0x03	; 3
    3146:	99 27       	eor	r25, r25
    3148:	03 97       	sbiw	r24, 0x03	; 3
    314a:	41 f0       	breq	.+16     	; 0x315c <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	28 2f       	mov	r18, r24
    3150:	23 60       	ori	r18, 0x03	; 3
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	42 2f       	mov	r20, r18
    3158:	68 e2       	ldi	r22, 0x28	; 40
    315a:	4b dd       	rcall	.-1386   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    315c:	00 00       	nop
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	08 95       	ret

0000316a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    316a:	8f 92       	push	r8
    316c:	af 92       	push	r10
    316e:	bf 92       	push	r11
    3170:	cf 92       	push	r12
    3172:	df 92       	push	r13
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	2e 97       	sbiw	r28, 0x0e	; 14
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	9b 83       	std	Y+3, r25	; 0x03
    3192:	8a 83       	std	Y+2, r24	; 0x02
    3194:	7d 83       	std	Y+5, r23	; 0x05
    3196:	6c 83       	std	Y+4, r22	; 0x04
    3198:	4e 83       	std	Y+6, r20	; 0x06
    319a:	38 87       	std	Y+8, r19	; 0x08
    319c:	2f 83       	std	Y+7, r18	; 0x07
    319e:	1a 87       	std	Y+10, r17	; 0x0a
    31a0:	09 87       	std	Y+9, r16	; 0x09
    31a2:	fc 86       	std	Y+12, r15	; 0x0c
    31a4:	eb 86       	std	Y+11, r14	; 0x0b
    31a6:	cd 86       	std	Y+13, r12	; 0x0d
    31a8:	ae 86       	std	Y+14, r10	; 0x0e
    31aa:	80 e3       	ldi	r24, 0x30	; 48
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    31b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    31b2:	69 85       	ldd	r22, Y+9	; 0x09
    31b4:	7a 85       	ldd	r23, Y+10	; 0x0a
    31b6:	4f 81       	ldd	r20, Y+7	; 0x07
    31b8:	58 85       	ldd	r21, Y+8	; 0x08
    31ba:	2c 81       	ldd	r18, Y+4	; 0x04
    31bc:	3d 81       	ldd	r19, Y+5	; 0x05
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	9b 81       	ldd	r25, Y+3	; 0x03
    31c2:	ae 85       	ldd	r26, Y+14	; 0x0e
    31c4:	af 93       	push	r26
    31c6:	8d 84       	ldd	r8, Y+13	; 0x0d
    31c8:	5f 01       	movw	r10, r30
    31ca:	6b 01       	movw	r12, r22
    31cc:	7a 01       	movw	r14, r20
    31ce:	0e 81       	ldd	r16, Y+6	; 0x06
    31d0:	49 81       	ldd	r20, Y+1	; 0x01
    31d2:	6c e0       	ldi	r22, 0x0C	; 12
    31d4:	13 d0       	rcall	.+38     	; 0x31fc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    31d6:	0f 90       	pop	r0
    31d8:	2e 96       	adiw	r28, 0x0e	; 14
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
    31f4:	bf 90       	pop	r11
    31f6:	af 90       	pop	r10
    31f8:	8f 90       	pop	r8
    31fa:	08 95       	ret

000031fc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    31fc:	8f 92       	push	r8
    31fe:	af 92       	push	r10
    3200:	bf 92       	push	r11
    3202:	cf 92       	push	r12
    3204:	df 92       	push	r13
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	68 97       	sbiw	r28, 0x18	; 24
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	9c 87       	std	Y+12, r25	; 0x0c
    3222:	8b 87       	std	Y+11, r24	; 0x0b
    3224:	6d 87       	std	Y+13, r22	; 0x0d
    3226:	4e 87       	std	Y+14, r20	; 0x0e
    3228:	38 8b       	std	Y+16, r19	; 0x10
    322a:	2f 87       	std	Y+15, r18	; 0x0f
    322c:	09 8b       	std	Y+17, r16	; 0x11
    322e:	fb 8a       	std	Y+19, r15	; 0x13
    3230:	ea 8a       	std	Y+18, r14	; 0x12
    3232:	dd 8a       	std	Y+21, r13	; 0x15
    3234:	cc 8a       	std	Y+20, r12	; 0x14
    3236:	bf 8a       	std	Y+23, r11	; 0x17
    3238:	ae 8a       	std	Y+22, r10	; 0x16
    323a:	88 8e       	std	Y+24, r8	; 0x18
    323c:	8e 89       	ldd	r24, Y+22	; 0x16
    323e:	9f 89       	ldd	r25, Y+23	; 0x17
    3240:	89 2b       	or	r24, r25
    3242:	29 f0       	breq	.+10     	; 0x324e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    3244:	8e 89       	ldd	r24, Y+22	; 0x16
    3246:	9f 89       	ldd	r25, Y+23	; 0x17
    3248:	fc 01       	movw	r30, r24
    324a:	80 81       	ld	r24, Z
    324c:	01 c0       	rjmp	.+2      	; 0x3250 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	8c 83       	std	Y+4, r24	; 0x04
    3252:	88 8d       	ldd	r24, Y+24	; 0x18
    3254:	98 2f       	mov	r25, r24
    3256:	92 95       	swap	r25
    3258:	90 7f       	andi	r25, 0xF0	; 240
    325a:	8c 81       	ldd	r24, Y+4	; 0x04
    325c:	89 0f       	add	r24, r25
    325e:	8d 83       	std	Y+5, r24	; 0x05
    3260:	8b 85       	ldd	r24, Y+11	; 0x0b
    3262:	9c 85       	ldd	r25, Y+12	; 0x0c
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	62 e0       	ldi	r22, 0x02	; 2
    3268:	c4 dc       	rcall	.-1656   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    326a:	8b 85       	ldd	r24, Y+11	; 0x0b
    326c:	9c 85       	ldd	r25, Y+12	; 0x0c
    326e:	4f e7       	ldi	r20, 0x7F	; 127
    3270:	68 e0       	ldi	r22, 0x08	; 8
    3272:	bf dc       	rcall	.-1666   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3274:	8b 85       	ldd	r24, Y+11	; 0x0b
    3276:	9c 85       	ldd	r25, Y+12	; 0x0c
    3278:	40 e8       	ldi	r20, 0x80	; 128
    327a:	64 e1       	ldi	r22, 0x14	; 20
    327c:	12 de       	rcall	.-988    	; 0x2ea2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    327e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3280:	38 89       	ldd	r19, Y+16	; 0x10
    3282:	8b 85       	ldd	r24, Y+11	; 0x0b
    3284:	9c 85       	ldd	r25, Y+12	; 0x0c
    3286:	49 89       	ldd	r20, Y+17	; 0x11
    3288:	62 e1       	ldi	r22, 0x12	; 18
    328a:	e8 dc       	rcall	.-1584   	; 0x2c5c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    328c:	8b 85       	ldd	r24, Y+11	; 0x0b
    328e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3290:	4d 81       	ldd	r20, Y+5	; 0x05
    3292:	6a e1       	ldi	r22, 0x1A	; 26
    3294:	ae dc       	rcall	.-1700   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3296:	8b 85       	ldd	r24, Y+11	; 0x0b
    3298:	9c 85       	ldd	r25, Y+12	; 0x0c
    329a:	4d 85       	ldd	r20, Y+13	; 0x0d
    329c:	62 e0       	ldi	r22, 0x02	; 2
    329e:	a9 dc       	rcall	.-1710   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    32a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a2:	8c 30       	cpi	r24, 0x0C	; 12
    32a4:	29 f4       	brne	.+10     	; 0x32b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    32a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    32a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    32aa:	40 e8       	ldi	r20, 0x80	; 128
    32ac:	6a e1       	ldi	r22, 0x1A	; 26
    32ae:	f9 dd       	rcall	.-1038   	; 0x2ea2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    32b0:	80 ed       	ldi	r24, 0xD0	; 208
    32b2:	97 e0       	ldi	r25, 0x07	; 7
    32b4:	9b 83       	std	Y+3, r25	; 0x03
    32b6:	8a 83       	std	Y+2, r24	; 0x02
    32b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    32bc:	68 e0       	ldi	r22, 0x08	; 8
    32be:	1a dd       	rcall	.-1484   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    32c0:	8e 83       	std	Y+6, r24	; 0x06
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32c6:	89 23       	and	r24, r25
    32c8:	88 23       	and	r24, r24
    32ca:	c1 f4       	brne	.+48     	; 0x32fc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    32cc:	8e 81       	ldd	r24, Y+6	; 0x06
    32ce:	88 2f       	mov	r24, r24
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	81 70       	andi	r24, 0x01	; 1
    32d4:	99 27       	eor	r25, r25
    32d6:	89 2b       	or	r24, r25
    32d8:	11 f0       	breq	.+4      	; 0x32de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    32da:	83 e0       	ldi	r24, 0x03	; 3
    32dc:	b4 c0       	rjmp	.+360    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9b 83       	std	Y+3, r25	; 0x03
    32e6:	8a 83       	std	Y+2, r24	; 0x02
    32e8:	21 e0       	ldi	r18, 0x01	; 1
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	9b 81       	ldd	r25, Y+3	; 0x03
    32ee:	89 2b       	or	r24, r25
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	22 23       	and	r18, r18
    32f6:	01 f3       	breq	.-64     	; 0x32b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	a5 c0       	rjmp	.+330    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    32fc:	00 00       	nop
    32fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3300:	9c 85       	ldd	r25, Y+12	; 0x0c
    3302:	6c e0       	ldi	r22, 0x0C	; 12
    3304:	f7 dc       	rcall	.-1554   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3306:	8f 83       	std	Y+7, r24	; 0x07
    3308:	8f 81       	ldd	r24, Y+7	; 0x07
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	83 71       	andi	r24, 0x13	; 19
    3310:	99 27       	eor	r25, r25
    3312:	89 2b       	or	r24, r25
    3314:	11 f0       	breq	.+4      	; 0x331a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	96 c0       	rjmp	.+300    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    331a:	8a 89       	ldd	r24, Y+18	; 0x12
    331c:	9b 89       	ldd	r25, Y+19	; 0x13
    331e:	89 2b       	or	r24, r25
    3320:	71 f1       	breq	.+92     	; 0x337e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    3322:	8c 89       	ldd	r24, Y+20	; 0x14
    3324:	9d 89       	ldd	r25, Y+21	; 0x15
    3326:	89 2b       	or	r24, r25
    3328:	51 f1       	breq	.+84     	; 0x337e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    332a:	8b 85       	ldd	r24, Y+11	; 0x0b
    332c:	9c 85       	ldd	r25, Y+12	; 0x0c
    332e:	64 e1       	ldi	r22, 0x14	; 20
    3330:	e1 dc       	rcall	.-1598   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3332:	8e 83       	std	Y+6, r24	; 0x06
    3334:	8c 89       	ldd	r24, Y+20	; 0x14
    3336:	9d 89       	ldd	r25, Y+21	; 0x15
    3338:	fc 01       	movw	r30, r24
    333a:	90 81       	ld	r25, Z
    333c:	8e 81       	ldd	r24, Y+6	; 0x06
    333e:	98 17       	cp	r25, r24
    3340:	10 f4       	brcc	.+4      	; 0x3346 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    3342:	84 e0       	ldi	r24, 0x04	; 4
    3344:	80 c0       	rjmp	.+256    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3346:	8c 89       	ldd	r24, Y+20	; 0x14
    3348:	9d 89       	ldd	r25, Y+21	; 0x15
    334a:	2e 81       	ldd	r18, Y+6	; 0x06
    334c:	fc 01       	movw	r30, r24
    334e:	20 83       	st	Z, r18
    3350:	2a 89       	ldd	r18, Y+18	; 0x12
    3352:	3b 89       	ldd	r19, Y+19	; 0x13
    3354:	8b 85       	ldd	r24, Y+11	; 0x0b
    3356:	9c 85       	ldd	r25, Y+12	; 0x0c
    3358:	08 8d       	ldd	r16, Y+24	; 0x18
    335a:	4e 81       	ldd	r20, Y+6	; 0x06
    335c:	62 e1       	ldi	r22, 0x12	; 18
    335e:	00 dd       	rcall	.-1536   	; 0x2d60 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    3360:	8b 85       	ldd	r24, Y+11	; 0x0b
    3362:	9c 85       	ldd	r25, Y+12	; 0x0c
    3364:	68 e1       	ldi	r22, 0x18	; 24
    3366:	c6 dc       	rcall	.-1652   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3368:	87 70       	andi	r24, 0x07	; 7
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	8e 89       	ldd	r24, Y+22	; 0x16
    336e:	9f 89       	ldd	r25, Y+23	; 0x17
    3370:	89 2b       	or	r24, r25
    3372:	29 f0       	breq	.+10     	; 0x337e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    3374:	8e 89       	ldd	r24, Y+22	; 0x16
    3376:	9f 89       	ldd	r25, Y+23	; 0x17
    3378:	29 81       	ldd	r18, Y+1	; 0x01
    337a:	fc 01       	movw	r30, r24
    337c:	20 83       	st	Z, r18
    337e:	8f 81       	ldd	r24, Y+7	; 0x07
    3380:	88 2f       	mov	r24, r24
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	88 70       	andi	r24, 0x08	; 8
    3386:	99 27       	eor	r25, r25
    3388:	89 2b       	or	r24, r25
    338a:	11 f0       	breq	.+4      	; 0x3390 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    338c:	82 e0       	ldi	r24, 0x02	; 2
    338e:	5b c0       	rjmp	.+182    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3390:	8a 89       	ldd	r24, Y+18	; 0x12
    3392:	9b 89       	ldd	r25, Y+19	; 0x13
    3394:	89 2b       	or	r24, r25
    3396:	09 f4       	brne	.+2      	; 0x339a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    3398:	55 c0       	rjmp	.+170    	; 0x3444 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    339a:	8c 89       	ldd	r24, Y+20	; 0x14
    339c:	9d 89       	ldd	r25, Y+21	; 0x15
    339e:	89 2b       	or	r24, r25
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    33a2:	50 c0       	rjmp	.+160    	; 0x3444 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    33a4:	8e a1       	ldd	r24, Y+38	; 0x26
    33a6:	88 23       	and	r24, r24
    33a8:	09 f4       	brne	.+2      	; 0x33ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    33aa:	4c c0       	rjmp	.+152    	; 0x3444 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    33ac:	8c 89       	ldd	r24, Y+20	; 0x14
    33ae:	9d 89       	ldd	r25, Y+21	; 0x15
    33b0:	fc 01       	movw	r30, r24
    33b2:	80 81       	ld	r24, Z
    33b4:	81 30       	cpi	r24, 0x01	; 1
    33b6:	29 f4       	brne	.+10     	; 0x33c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	84 30       	cpi	r24, 0x04	; 4
    33bc:	11 f4       	brne	.+4      	; 0x33c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    33be:	8f ef       	ldi	r24, 0xFF	; 255
    33c0:	42 c0       	rjmp	.+132    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    33c2:	8c 89       	ldd	r24, Y+20	; 0x14
    33c4:	9d 89       	ldd	r25, Y+21	; 0x15
    33c6:	fc 01       	movw	r30, r24
    33c8:	80 81       	ld	r24, Z
    33ca:	82 30       	cpi	r24, 0x02	; 2
    33cc:	18 f0       	brcs	.+6      	; 0x33d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	88 23       	and	r24, r24
    33d2:	11 f0       	breq	.+4      	; 0x33d8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    33d4:	87 e0       	ldi	r24, 0x07	; 7
    33d6:	37 c0       	rjmp	.+110    	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    33d8:	8c 89       	ldd	r24, Y+20	; 0x14
    33da:	9d 89       	ldd	r25, Y+21	; 0x15
    33dc:	fc 01       	movw	r30, r24
    33de:	80 81       	ld	r24, Z
    33e0:	4e ef       	ldi	r20, 0xFE	; 254
    33e2:	48 0f       	add	r20, r24
    33e4:	9e 01       	movw	r18, r28
    33e6:	27 5f       	subi	r18, 0xF7	; 247
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	6a 89       	ldd	r22, Y+18	; 0x12
    33ec:	7b 89       	ldd	r23, Y+19	; 0x13
    33ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33f2:	9d dd       	rcall	.-1222   	; 0x2f2e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    33f4:	88 87       	std	Y+8, r24	; 0x08
    33f6:	88 85       	ldd	r24, Y+8	; 0x08
    33f8:	88 23       	and	r24, r24
    33fa:	11 f0       	breq	.+4      	; 0x3400 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    33fc:	88 85       	ldd	r24, Y+8	; 0x08
    33fe:	23 c0       	rjmp	.+70     	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3400:	8c 89       	ldd	r24, Y+20	; 0x14
    3402:	9d 89       	ldd	r25, Y+21	; 0x15
    3404:	fc 01       	movw	r30, r24
    3406:	80 81       	ld	r24, Z
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	02 97       	sbiw	r24, 0x02	; 2
    340e:	2a 89       	ldd	r18, Y+18	; 0x12
    3410:	3b 89       	ldd	r19, Y+19	; 0x13
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	fc 01       	movw	r30, r24
    3418:	90 81       	ld	r25, Z
    341a:	89 85       	ldd	r24, Y+9	; 0x09
    341c:	98 17       	cp	r25, r24
    341e:	81 f4       	brne	.+32     	; 0x3440 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    3420:	8c 89       	ldd	r24, Y+20	; 0x14
    3422:	9d 89       	ldd	r25, Y+21	; 0x15
    3424:	fc 01       	movw	r30, r24
    3426:	80 81       	ld	r24, Z
    3428:	88 2f       	mov	r24, r24
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	2a 89       	ldd	r18, Y+18	; 0x12
    3430:	3b 89       	ldd	r19, Y+19	; 0x13
    3432:	82 0f       	add	r24, r18
    3434:	93 1f       	adc	r25, r19
    3436:	fc 01       	movw	r30, r24
    3438:	90 81       	ld	r25, Z
    343a:	8a 85       	ldd	r24, Y+10	; 0x0a
    343c:	98 17       	cp	r25, r24
    343e:	11 f0       	breq	.+4      	; 0x3444 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    3440:	87 e0       	ldi	r24, 0x07	; 7
    3442:	01 c0       	rjmp	.+2      	; 0x3446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	68 96       	adiw	r28, 0x18	; 24
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	0f 91       	pop	r16
    3458:	ff 90       	pop	r15
    345a:	ef 90       	pop	r14
    345c:	df 90       	pop	r13
    345e:	cf 90       	pop	r12
    3460:	bf 90       	pop	r11
    3462:	af 90       	pop	r10
    3464:	8f 90       	pop	r8
    3466:	08 95       	ret

00003468 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	00 d0       	rcall	.+0      	; 0x346e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	7c 83       	std	Y+4, r23	; 0x04
    347a:	6b 83       	std	Y+3, r22	; 0x03
    347c:	5e 83       	std	Y+6, r21	; 0x06
    347e:	4d 83       	std	Y+5, r20	; 0x05
    3480:	2d 81       	ldd	r18, Y+5	; 0x05
    3482:	3e 81       	ldd	r19, Y+6	; 0x06
    3484:	4b 81       	ldd	r20, Y+3	; 0x03
    3486:	5c 81       	ldd	r21, Y+4	; 0x04
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	66 e2       	ldi	r22, 0x26	; 38
    348e:	09 d0       	rcall	.+18     	; 0x34a2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    3490:	26 96       	adiw	r28, 0x06	; 6
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	08 95       	ret

000034a2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    34a2:	af 92       	push	r10
    34a4:	cf 92       	push	r12
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	29 97       	sbiw	r28, 0x09	; 9
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	9c 83       	std	Y+4, r25	; 0x04
    34c4:	8b 83       	std	Y+3, r24	; 0x03
    34c6:	6d 83       	std	Y+5, r22	; 0x05
    34c8:	5f 83       	std	Y+7, r21	; 0x07
    34ca:	4e 83       	std	Y+6, r20	; 0x06
    34cc:	39 87       	std	Y+9, r19	; 0x09
    34ce:	28 87       	std	Y+8, r18	; 0x08
    34d0:	8e 81       	ldd	r24, Y+6	; 0x06
    34d2:	9f 81       	ldd	r25, Y+7	; 0x07
    34d4:	89 2b       	or	r24, r25
    34d6:	31 f0       	breq	.+12     	; 0x34e4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    34d8:	88 85       	ldd	r24, Y+8	; 0x08
    34da:	99 85       	ldd	r25, Y+9	; 0x09
    34dc:	fc 01       	movw	r30, r24
    34de:	80 81       	ld	r24, Z
    34e0:	82 30       	cpi	r24, 0x02	; 2
    34e2:	10 f4       	brcc	.+4      	; 0x34e8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    34e4:	84 e0       	ldi	r24, 0x04	; 4
    34e6:	2a c0       	rjmp	.+84     	; 0x353c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	40 e8       	ldi	r20, 0x80	; 128
    34ee:	6c e1       	ldi	r22, 0x1C	; 28
    34f0:	fa dc       	rcall	.-1548   	; 0x2ee6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    34f2:	87 e0       	ldi	r24, 0x07	; 7
    34f4:	8a 83       	std	Y+2, r24	; 0x02
    34f6:	fe 01       	movw	r30, r28
    34f8:	32 96       	adiw	r30, 0x02	; 2
    34fa:	48 85       	ldd	r20, Y+8	; 0x08
    34fc:	59 85       	ldd	r21, Y+9	; 0x09
    34fe:	2e 81       	ldd	r18, Y+6	; 0x06
    3500:	3f 81       	ldd	r19, Y+7	; 0x07
    3502:	be 01       	movw	r22, r28
    3504:	6b 5f       	subi	r22, 0xFB	; 251
    3506:	7f 4f       	sbci	r23, 0xFF	; 255
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	a1 2c       	mov	r10, r1
    350e:	c1 2c       	mov	r12, r1
    3510:	7f 01       	movw	r14, r30
    3512:	8a 01       	movw	r16, r20
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	29 de       	rcall	.-942    	; 0x316a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3518:	89 83       	std	Y+1, r24	; 0x01
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	88 23       	and	r24, r24
    351e:	11 f0       	breq	.+4      	; 0x3524 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	0c c0       	rjmp	.+24     	; 0x353c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3524:	88 85       	ldd	r24, Y+8	; 0x08
    3526:	99 85       	ldd	r25, Y+9	; 0x09
    3528:	fc 01       	movw	r30, r24
    352a:	80 81       	ld	r24, Z
    352c:	82 30       	cpi	r24, 0x02	; 2
    352e:	19 f4       	brne	.+6      	; 0x3536 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	88 23       	and	r24, r24
    3534:	11 f0       	breq	.+4      	; 0x353a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	01 c0       	rjmp	.+2      	; 0x353c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	29 96       	adiw	r28, 0x09	; 9
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	de bf       	out	0x3e, r29	; 62
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	cd bf       	out	0x3d, r28	; 61
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	1f 91       	pop	r17
    354e:	0f 91       	pop	r16
    3550:	ff 90       	pop	r15
    3552:	ef 90       	pop	r14
    3554:	cf 90       	pop	r12
    3556:	af 90       	pop	r10
    3558:	08 95       	ret

0000355a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    355a:	af 92       	push	r10
    355c:	cf 92       	push	r12
    355e:	ef 92       	push	r14
    3560:	ff 92       	push	r15
    3562:	0f 93       	push	r16
    3564:	1f 93       	push	r17
    3566:	cf 93       	push	r28
    3568:	df 93       	push	r29
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	a1 97       	sbiw	r28, 0x21	; 33
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	9e 8f       	std	Y+30, r25	; 0x1e
    357c:	8d 8f       	std	Y+29, r24	; 0x1d
    357e:	78 a3       	std	Y+32, r23	; 0x20
    3580:	6f 8f       	std	Y+31, r22	; 0x1f
    3582:	49 a3       	std	Y+33, r20	; 0x21
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	8c 83       	std	Y+4, r24	; 0x04
    3588:	89 a1       	ldd	r24, Y+33	; 0x21
    358a:	81 35       	cpi	r24, 0x51	; 81
    358c:	10 f0       	brcs	.+4      	; 0x3592 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    358e:	86 e0       	ldi	r24, 0x06	; 6
    3590:	29 c2       	rjmp	.+1106   	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3592:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3594:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3596:	40 e8       	ldi	r20, 0x80	; 128
    3598:	6c e1       	ldi	r22, 0x1C	; 28
    359a:	a5 dc       	rcall	.-1718   	; 0x2ee6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    359c:	19 82       	std	Y+1, r1	; 0x01
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	88 23       	and	r24, r24
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    35a4:	14 c2       	rjmp	.+1064   	; 0x39ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    35a6:	8c 81       	ldd	r24, Y+4	; 0x04
    35a8:	88 2f       	mov	r24, r24
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	82 30       	cpi	r24, 0x02	; 2
    35ae:	91 05       	cpc	r25, r1
    35b0:	b1 f0       	breq	.+44     	; 0x35de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    35b2:	83 30       	cpi	r24, 0x03	; 3
    35b4:	91 05       	cpc	r25, r1
    35b6:	29 f1       	breq	.+74     	; 0x3602 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	49 f5       	brne	.+82     	; 0x360e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    35bc:	83 e9       	ldi	r24, 0x93	; 147
    35be:	8a 8b       	std	Y+18, r24	; 0x12
    35c0:	1f 82       	std	Y+7, r1	; 0x07
    35c2:	89 a1       	ldd	r24, Y+33	; 0x21
    35c4:	88 23       	and	r24, r24
    35c6:	41 f0       	breq	.+16     	; 0x35d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    35c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35ca:	98 a1       	ldd	r25, Y+32	; 0x20
    35cc:	fc 01       	movw	r30, r24
    35ce:	80 81       	ld	r24, Z
    35d0:	85 30       	cpi	r24, 0x05	; 5
    35d2:	10 f0       	brcs	.+4      	; 0x35d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	01 c0       	rjmp	.+2      	; 0x35da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	8b 83       	std	Y+3, r24	; 0x03
    35dc:	1a c0       	rjmp	.+52     	; 0x3612 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    35de:	85 e9       	ldi	r24, 0x95	; 149
    35e0:	8a 8b       	std	Y+18, r24	; 0x12
    35e2:	83 e0       	ldi	r24, 0x03	; 3
    35e4:	8f 83       	std	Y+7, r24	; 0x07
    35e6:	89 a1       	ldd	r24, Y+33	; 0x21
    35e8:	88 23       	and	r24, r24
    35ea:	41 f0       	breq	.+16     	; 0x35fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    35ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35ee:	98 a1       	ldd	r25, Y+32	; 0x20
    35f0:	fc 01       	movw	r30, r24
    35f2:	80 81       	ld	r24, Z
    35f4:	88 30       	cpi	r24, 0x08	; 8
    35f6:	10 f0       	brcs	.+4      	; 0x35fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	01 c0       	rjmp	.+2      	; 0x35fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	8b 83       	std	Y+3, r24	; 0x03
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3602:	87 e9       	ldi	r24, 0x97	; 151
    3604:	8a 8b       	std	Y+18, r24	; 0x12
    3606:	86 e0       	ldi	r24, 0x06	; 6
    3608:	8f 83       	std	Y+7, r24	; 0x07
    360a:	1b 82       	std	Y+3, r1	; 0x03
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    360e:	85 e0       	ldi	r24, 0x05	; 5
    3610:	e9 c1       	rjmp	.+978    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3612:	8f 81       	ldd	r24, Y+7	; 0x07
    3614:	88 0f       	add	r24, r24
    3616:	88 0f       	add	r24, r24
    3618:	88 0f       	add	r24, r24
    361a:	99 a1       	ldd	r25, Y+33	; 0x21
    361c:	f9 2f       	mov	r31, r25
    361e:	f8 1b       	sub	r31, r24
    3620:	8f 2f       	mov	r24, r31
    3622:	88 87       	std	Y+8, r24	; 0x08
    3624:	88 85       	ldd	r24, Y+8	; 0x08
    3626:	88 23       	and	r24, r24
    3628:	0c f4       	brge	.+2      	; 0x362c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    362a:	18 86       	std	Y+8, r1	; 0x08
    362c:	82 e0       	ldi	r24, 0x02	; 2
    362e:	8e 83       	std	Y+6, r24	; 0x06
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	88 23       	and	r24, r24
    3634:	71 f0       	breq	.+28     	; 0x3652 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    3636:	8e 81       	ldd	r24, Y+6	; 0x06
    3638:	91 e0       	ldi	r25, 0x01	; 1
    363a:	98 0f       	add	r25, r24
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	88 2f       	mov	r24, r24
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9e 01       	movw	r18, r28
    3644:	2e 5e       	subi	r18, 0xEE	; 238
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	82 0f       	add	r24, r18
    364a:	93 1f       	adc	r25, r19
    364c:	28 e8       	ldi	r18, 0x88	; 136
    364e:	fc 01       	movw	r30, r24
    3650:	20 83       	st	Z, r18
    3652:	88 85       	ldd	r24, Y+8	; 0x08
    3654:	88 23       	and	r24, r24
    3656:	0c f4       	brge	.+2      	; 0x365a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3658:	89 5f       	subi	r24, 0xF9	; 249
    365a:	85 95       	asr	r24
    365c:	85 95       	asr	r24
    365e:	85 95       	asr	r24
    3660:	98 2f       	mov	r25, r24
    3662:	88 85       	ldd	r24, Y+8	; 0x08
    3664:	87 70       	andi	r24, 0x07	; 7
    3666:	88 23       	and	r24, r24
    3668:	11 f0       	breq	.+4      	; 0x366e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	01 c0       	rjmp	.+2      	; 0x3670 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	89 0f       	add	r24, r25
    3672:	8c 87       	std	Y+12, r24	; 0x0c
    3674:	8c 85       	ldd	r24, Y+12	; 0x0c
    3676:	88 23       	and	r24, r24
    3678:	99 f1       	breq	.+102    	; 0x36e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    367a:	8b 81       	ldd	r24, Y+3	; 0x03
    367c:	88 23       	and	r24, r24
    367e:	11 f0       	breq	.+4      	; 0x3684 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    3680:	83 e0       	ldi	r24, 0x03	; 3
    3682:	01 c0       	rjmp	.+2      	; 0x3686 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    3684:	84 e0       	ldi	r24, 0x04	; 4
    3686:	8e 87       	std	Y+14, r24	; 0x0e
    3688:	9c 85       	ldd	r25, Y+12	; 0x0c
    368a:	8e 85       	ldd	r24, Y+14	; 0x0e
    368c:	89 17       	cp	r24, r25
    368e:	10 f4       	brcc	.+4      	; 0x3694 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    3690:	8e 85       	ldd	r24, Y+14	; 0x0e
    3692:	8c 87       	std	Y+12, r24	; 0x0c
    3694:	1d 82       	std	Y+5, r1	; 0x05
    3696:	9d 81       	ldd	r25, Y+5	; 0x05
    3698:	8c 85       	ldd	r24, Y+12	; 0x0c
    369a:	98 17       	cp	r25, r24
    369c:	08 f5       	brcc	.+66     	; 0x36e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    369e:	8e 81       	ldd	r24, Y+6	; 0x06
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	98 0f       	add	r25, r24
    36a4:	9e 83       	std	Y+6, r25	; 0x06
    36a6:	88 2f       	mov	r24, r24
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	2f 81       	ldd	r18, Y+7	; 0x07
    36ac:	42 2f       	mov	r20, r18
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	2d 81       	ldd	r18, Y+5	; 0x05
    36b2:	22 2f       	mov	r18, r18
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	24 0f       	add	r18, r20
    36b8:	35 1f       	adc	r19, r21
    36ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    36bc:	58 a1       	ldd	r21, Y+32	; 0x20
    36be:	24 0f       	add	r18, r20
    36c0:	35 1f       	adc	r19, r21
    36c2:	2f 5f       	subi	r18, 0xFF	; 255
    36c4:	3f 4f       	sbci	r19, 0xFF	; 255
    36c6:	f9 01       	movw	r30, r18
    36c8:	40 81       	ld	r20, Z
    36ca:	9e 01       	movw	r18, r28
    36cc:	2e 5e       	subi	r18, 0xEE	; 238
    36ce:	3f 4f       	sbci	r19, 0xFF	; 255
    36d0:	82 0f       	add	r24, r18
    36d2:	93 1f       	adc	r25, r19
    36d4:	fc 01       	movw	r30, r24
    36d6:	40 83       	st	Z, r20
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	8f 5f       	subi	r24, 0xFF	; 255
    36dc:	8d 83       	std	Y+5, r24	; 0x05
    36de:	db cf       	rjmp	.-74     	; 0x3696 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	88 23       	and	r24, r24
    36e4:	19 f0       	breq	.+6      	; 0x36ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    36e6:	88 85       	ldd	r24, Y+8	; 0x08
    36e8:	88 5f       	subi	r24, 0xF8	; 248
    36ea:	88 87       	std	Y+8, r24	; 0x08
    36ec:	1a 82       	std	Y+2, r1	; 0x02
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	88 23       	and	r24, r24
    36f2:	09 f0       	breq	.+2      	; 0x36f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    36f4:	f5 c0       	rjmp	.+490    	; 0x38e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    36f6:	88 85       	ldd	r24, Y+8	; 0x08
    36f8:	80 32       	cpi	r24, 0x20	; 32
    36fa:	3c f1       	brlt	.+78     	; 0x374a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    36fc:	80 e7       	ldi	r24, 0x70	; 112
    36fe:	8b 8b       	std	Y+19, r24	; 0x13
    3700:	9c 89       	ldd	r25, Y+20	; 0x14
    3702:	8d 89       	ldd	r24, Y+21	; 0x15
    3704:	98 27       	eor	r25, r24
    3706:	8e 89       	ldd	r24, Y+22	; 0x16
    3708:	98 27       	eor	r25, r24
    370a:	8f 89       	ldd	r24, Y+23	; 0x17
    370c:	89 27       	eor	r24, r25
    370e:	88 8f       	std	Y+24, r24	; 0x18
    3710:	ce 01       	movw	r24, r28
    3712:	42 96       	adiw	r24, 0x12	; 18
    3714:	9c 01       	movw	r18, r24
    3716:	29 5f       	subi	r18, 0xF9	; 249
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	be 01       	movw	r22, r28
    371c:	6e 5e       	subi	r22, 0xEE	; 238
    371e:	7f 4f       	sbci	r23, 0xFF	; 255
    3720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3724:	47 e0       	ldi	r20, 0x07	; 7
    3726:	03 dc       	rcall	.-2042   	; 0x2f2e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3728:	8f 87       	std	Y+15, r24	; 0x0f
    372a:	8f 85       	ldd	r24, Y+15	; 0x0f
    372c:	88 23       	and	r24, r24
    372e:	11 f0       	breq	.+4      	; 0x3734 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    3730:	8f 85       	ldd	r24, Y+15	; 0x0f
    3732:	58 c1       	rjmp	.+688    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3734:	1b 8e       	std	Y+27, r1	; 0x1b
    3736:	89 e0       	ldi	r24, 0x09	; 9
    3738:	89 87       	std	Y+9, r24	; 0x09
    373a:	ce 01       	movw	r24, r28
    373c:	42 96       	adiw	r24, 0x12	; 18
    373e:	06 96       	adiw	r24, 0x06	; 6
    3740:	9b 87       	std	Y+11, r25	; 0x0b
    3742:	8a 87       	std	Y+10, r24	; 0x0a
    3744:	83 e0       	ldi	r24, 0x03	; 3
    3746:	8c 8f       	std	Y+28, r24	; 0x1c
    3748:	33 c0       	rjmp	.+102    	; 0x37b0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    374a:	88 85       	ldd	r24, Y+8	; 0x08
    374c:	87 78       	andi	r24, 0x87	; 135
    374e:	88 23       	and	r24, r24
    3750:	1c f4       	brge	.+6      	; 0x3758 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3752:	81 50       	subi	r24, 0x01	; 1
    3754:	88 6f       	ori	r24, 0xF8	; 248
    3756:	8f 5f       	subi	r24, 0xFF	; 255
    3758:	8b 8f       	std	Y+27, r24	; 0x1b
    375a:	88 85       	ldd	r24, Y+8	; 0x08
    375c:	88 23       	and	r24, r24
    375e:	0c f4       	brge	.+2      	; 0x3762 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    3760:	89 5f       	subi	r24, 0xF9	; 249
    3762:	85 95       	asr	r24
    3764:	85 95       	asr	r24
    3766:	85 95       	asr	r24
    3768:	8d 83       	std	Y+5, r24	; 0x05
    376a:	8d 81       	ldd	r24, Y+5	; 0x05
    376c:	8e 5f       	subi	r24, 0xFE	; 254
    376e:	8e 83       	std	Y+6, r24	; 0x06
    3770:	8e 81       	ldd	r24, Y+6	; 0x06
    3772:	98 2f       	mov	r25, r24
    3774:	92 95       	swap	r25
    3776:	90 7f       	andi	r25, 0xF0	; 240
    3778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377a:	89 0f       	add	r24, r25
    377c:	8b 8b       	std	Y+19, r24	; 0x13
    377e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3780:	88 23       	and	r24, r24
    3782:	11 f0       	breq	.+4      	; 0x3788 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	01 c0       	rjmp	.+2      	; 0x378a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	89 0f       	add	r24, r25
    378e:	89 87       	std	Y+9, r24	; 0x09
    3790:	8e 81       	ldd	r24, Y+6	; 0x06
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9e 01       	movw	r18, r28
    3798:	2e 5e       	subi	r18, 0xEE	; 238
    379a:	3f 4f       	sbci	r19, 0xFF	; 255
    379c:	82 0f       	add	r24, r18
    379e:	93 1f       	adc	r25, r19
    37a0:	9b 87       	std	Y+11, r25	; 0x0b
    37a2:	8a 87       	std	Y+10, r24	; 0x0a
    37a4:	99 e0       	ldi	r25, 0x09	; 9
    37a6:	8e 81       	ldd	r24, Y+6	; 0x06
    37a8:	f9 2f       	mov	r31, r25
    37aa:	f8 1b       	sub	r31, r24
    37ac:	8f 2f       	mov	r24, r31
    37ae:	8c 8f       	std	Y+28, r24	; 0x1c
    37b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37b2:	88 8b       	std	Y+16, r24	; 0x10
    37b4:	88 89       	ldd	r24, Y+16	; 0x10
    37b6:	98 2f       	mov	r25, r24
    37b8:	92 95       	swap	r25
    37ba:	90 7f       	andi	r25, 0xF0	; 240
    37bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37be:	29 2f       	mov	r18, r25
    37c0:	28 0f       	add	r18, r24
    37c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37c6:	42 2f       	mov	r20, r18
    37c8:	6a e1       	ldi	r22, 0x1A	; 26
    37ca:	13 da       	rcall	.-3034   	; 0x2bf2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    37cc:	fe 01       	movw	r30, r28
    37ce:	7b 96       	adiw	r30, 0x1b	; 27
    37d0:	ae 01       	movw	r20, r28
    37d2:	44 5e       	subi	r20, 0xE4	; 228
    37d4:	5f 4f       	sbci	r21, 0xFF	; 255
    37d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    37d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    37da:	be 01       	movw	r22, r28
    37dc:	6e 5e       	subi	r22, 0xEE	; 238
    37de:	7f 4f       	sbci	r23, 0xFF	; 255
    37e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37e4:	a1 2c       	mov	r10, r1
    37e6:	c8 88       	ldd	r12, Y+16	; 0x10
    37e8:	7f 01       	movw	r14, r30
    37ea:	8a 01       	movw	r16, r20
    37ec:	49 85       	ldd	r20, Y+9	; 0x09
    37ee:	bd dc       	rcall	.-1670   	; 0x316a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    37f0:	8f 87       	std	Y+15, r24	; 0x0f
    37f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f4:	82 30       	cpi	r24, 0x02	; 2
    37f6:	09 f0       	breq	.+2      	; 0x37fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    37f8:	65 c0       	rjmp	.+202    	; 0x38c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    37fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37fe:	6c e1       	ldi	r22, 0x1C	; 28
    3800:	79 da       	rcall	.-2830   	; 0x2cf4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3802:	89 8b       	std	Y+17, r24	; 0x11
    3804:	89 89       	ldd	r24, Y+17	; 0x11
    3806:	88 2f       	mov	r24, r24
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	80 72       	andi	r24, 0x20	; 32
    380c:	99 27       	eor	r25, r25
    380e:	89 2b       	or	r24, r25
    3810:	11 f0       	breq	.+4      	; 0x3816 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    3812:	82 e0       	ldi	r24, 0x02	; 2
    3814:	e7 c0       	rjmp	.+462    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3816:	89 89       	ldd	r24, Y+17	; 0x11
    3818:	8f 71       	andi	r24, 0x1F	; 31
    381a:	8d 87       	std	Y+13, r24	; 0x0d
    381c:	8d 85       	ldd	r24, Y+13	; 0x0d
    381e:	88 23       	and	r24, r24
    3820:	11 f4       	brne	.+4      	; 0x3826 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3822:	80 e2       	ldi	r24, 0x20	; 32
    3824:	8d 87       	std	Y+13, r24	; 0x0d
    3826:	8d 85       	ldd	r24, Y+13	; 0x0d
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	88 85       	ldd	r24, Y+8	; 0x08
    382e:	08 2e       	mov	r0, r24
    3830:	00 0c       	add	r0, r0
    3832:	99 0b       	sbc	r25, r25
    3834:	82 17       	cp	r24, r18
    3836:	93 07       	cpc	r25, r19
    3838:	14 f0       	brlt	.+4      	; 0x383e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    383a:	85 e0       	ldi	r24, 0x05	; 5
    383c:	d3 c0       	rjmp	.+422    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    383e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3840:	88 87       	std	Y+8, r24	; 0x08
    3842:	88 85       	ldd	r24, Y+8	; 0x08
    3844:	08 2e       	mov	r0, r24
    3846:	00 0c       	add	r0, r0
    3848:	99 0b       	sbc	r25, r25
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	87 70       	andi	r24, 0x07	; 7
    384e:	90 78       	andi	r25, 0x80	; 128
    3850:	99 23       	and	r25, r25
    3852:	24 f4       	brge	.+8      	; 0x385c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	88 6f       	ori	r24, 0xF8	; 248
    3858:	9f 6f       	ori	r25, 0xFF	; 255
    385a:	01 96       	adiw	r24, 0x01	; 1
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	88 85       	ldd	r24, Y+8	; 0x08
    3860:	88 23       	and	r24, r24
    3862:	0c f4       	brge	.+2      	; 0x3866 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3864:	89 5f       	subi	r24, 0xF9	; 249
    3866:	85 95       	asr	r24
    3868:	85 95       	asr	r24
    386a:	85 95       	asr	r24
    386c:	98 2f       	mov	r25, r24
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	88 23       	and	r24, r24
    3872:	11 f0       	breq	.+4      	; 0x3878 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	01 c0       	rjmp	.+2      	; 0x387a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	89 0f       	add	r24, r25
    387c:	8f 5f       	subi	r24, 0xFF	; 255
    387e:	8e 83       	std	Y+6, r24	; 0x06
    3880:	8e 81       	ldd	r24, Y+6	; 0x06
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	2e 81       	ldd	r18, Y+6	; 0x06
    3888:	22 2f       	mov	r18, r18
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	ae 01       	movw	r20, r28
    388e:	4e 5e       	subi	r20, 0xEE	; 238
    3890:	5f 4f       	sbci	r21, 0xFF	; 255
    3892:	24 0f       	add	r18, r20
    3894:	35 1f       	adc	r19, r21
    3896:	f9 01       	movw	r30, r18
    3898:	20 81       	ld	r18, Z
    389a:	62 2f       	mov	r22, r18
    389c:	2d 81       	ldd	r18, Y+5	; 0x05
    389e:	42 2f       	mov	r20, r18
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	21 e0       	ldi	r18, 0x01	; 1
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	02 c0       	rjmp	.+4      	; 0x38ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    38a8:	22 0f       	add	r18, r18
    38aa:	33 1f       	adc	r19, r19
    38ac:	4a 95       	dec	r20
    38ae:	e2 f7       	brpl	.-8      	; 0x38a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    38b0:	26 2b       	or	r18, r22
    38b2:	42 2f       	mov	r20, r18
    38b4:	9e 01       	movw	r18, r28
    38b6:	2e 5e       	subi	r18, 0xEE	; 238
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ba:	82 0f       	add	r24, r18
    38bc:	93 1f       	adc	r25, r19
    38be:	fc 01       	movw	r30, r24
    38c0:	40 83       	st	Z, r20
    38c2:	15 cf       	rjmp	.-470    	; 0x36ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    38c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c6:	88 23       	and	r24, r24
    38c8:	11 f0       	breq	.+4      	; 0x38ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    38ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    38cc:	8b c0       	rjmp	.+278    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    38ce:	88 85       	ldd	r24, Y+8	; 0x08
    38d0:	80 32       	cpi	r24, 0x20	; 32
    38d2:	1c f0       	brlt	.+6      	; 0x38da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	8a 83       	std	Y+2, r24	; 0x02
    38d8:	0a cf       	rjmp	.-492    	; 0x36ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    38da:	80 e2       	ldi	r24, 0x20	; 32
    38dc:	88 87       	std	Y+8, r24	; 0x08
    38de:	07 cf       	rjmp	.-498    	; 0x36ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    38e0:	8c 89       	ldd	r24, Y+20	; 0x14
    38e2:	88 38       	cpi	r24, 0x88	; 136
    38e4:	11 f4       	brne	.+4      	; 0x38ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    38e6:	83 e0       	ldi	r24, 0x03	; 3
    38e8:	01 c0       	rjmp	.+2      	; 0x38ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    38ea:	82 e0       	ldi	r24, 0x02	; 2
    38ec:	8e 83       	std	Y+6, r24	; 0x06
    38ee:	8c 89       	ldd	r24, Y+20	; 0x14
    38f0:	88 38       	cpi	r24, 0x88	; 136
    38f2:	11 f4       	brne	.+4      	; 0x38f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	01 c0       	rjmp	.+2      	; 0x38fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    38f8:	84 e0       	ldi	r24, 0x04	; 4
    38fa:	8c 87       	std	Y+12, r24	; 0x0c
    38fc:	1d 82       	std	Y+5, r1	; 0x05
    38fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3900:	8c 85       	ldd	r24, Y+12	; 0x0c
    3902:	98 17       	cp	r25, r24
    3904:	00 f5       	brcc	.+64     	; 0x3946 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    3906:	8f 81       	ldd	r24, Y+7	; 0x07
    3908:	28 2f       	mov	r18, r24
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	8d 81       	ldd	r24, Y+5	; 0x05
    390e:	88 2f       	mov	r24, r24
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	82 0f       	add	r24, r18
    3914:	93 1f       	adc	r25, r19
    3916:	2e 81       	ldd	r18, Y+6	; 0x06
    3918:	31 e0       	ldi	r19, 0x01	; 1
    391a:	32 0f       	add	r19, r18
    391c:	3e 83       	std	Y+6, r19	; 0x06
    391e:	22 2f       	mov	r18, r18
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	ae 01       	movw	r20, r28
    3924:	4e 5e       	subi	r20, 0xEE	; 238
    3926:	5f 4f       	sbci	r21, 0xFF	; 255
    3928:	24 0f       	add	r18, r20
    392a:	35 1f       	adc	r19, r21
    392c:	f9 01       	movw	r30, r18
    392e:	40 81       	ld	r20, Z
    3930:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3932:	38 a1       	ldd	r19, Y+32	; 0x20
    3934:	82 0f       	add	r24, r18
    3936:	93 1f       	adc	r25, r19
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	fc 01       	movw	r30, r24
    393c:	40 83       	st	Z, r20
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	8f 5f       	subi	r24, 0xFF	; 255
    3942:	8d 83       	std	Y+5, r24	; 0x05
    3944:	dc cf       	rjmp	.-72     	; 0x38fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3946:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3948:	83 30       	cpi	r24, 0x03	; 3
    394a:	19 f4       	brne	.+6      	; 0x3952 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    394c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    394e:	88 23       	and	r24, r24
    3950:	11 f0       	breq	.+4      	; 0x3956 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	47 c0       	rjmp	.+142    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3956:	ce 01       	movw	r24, r28
    3958:	42 96       	adiw	r24, 0x12	; 18
    395a:	9c 01       	movw	r18, r24
    395c:	2e 5f       	subi	r18, 0xFE	; 254
    395e:	3f 4f       	sbci	r19, 0xFF	; 255
    3960:	6a 85       	ldd	r22, Y+10	; 0x0a
    3962:	7b 85       	ldd	r23, Y+11	; 0x0b
    3964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3968:	41 e0       	ldi	r20, 0x01	; 1
    396a:	e1 da       	rcall	.-2622   	; 0x2f2e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    396c:	8f 87       	std	Y+15, r24	; 0x0f
    396e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3970:	88 23       	and	r24, r24
    3972:	11 f0       	breq	.+4      	; 0x3978 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3974:	8f 85       	ldd	r24, Y+15	; 0x0f
    3976:	36 c0       	rjmp	.+108    	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3978:	2c 89       	ldd	r18, Y+20	; 0x14
    397a:	8a 85       	ldd	r24, Y+10	; 0x0a
    397c:	9b 85       	ldd	r25, Y+11	; 0x0b
    397e:	01 96       	adiw	r24, 0x01	; 1
    3980:	fc 01       	movw	r30, r24
    3982:	80 81       	ld	r24, Z
    3984:	28 17       	cp	r18, r24
    3986:	41 f4       	brne	.+16     	; 0x3998 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    3988:	2d 89       	ldd	r18, Y+21	; 0x15
    398a:	8a 85       	ldd	r24, Y+10	; 0x0a
    398c:	9b 85       	ldd	r25, Y+11	; 0x0b
    398e:	02 96       	adiw	r24, 0x02	; 2
    3990:	fc 01       	movw	r30, r24
    3992:	80 81       	ld	r24, Z
    3994:	28 17       	cp	r18, r24
    3996:	11 f0       	breq	.+4      	; 0x399c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    3998:	87 e0       	ldi	r24, 0x07	; 7
    399a:	24 c0       	rjmp	.+72     	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    399c:	8a 85       	ldd	r24, Y+10	; 0x0a
    399e:	9b 85       	ldd	r25, Y+11	; 0x0b
    39a0:	fc 01       	movw	r30, r24
    39a2:	80 81       	ld	r24, Z
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	84 70       	andi	r24, 0x04	; 4
    39aa:	99 27       	eor	r25, r25
    39ac:	89 2b       	or	r24, r25
    39ae:	21 f0       	breq	.+8      	; 0x39b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	8c 83       	std	Y+4, r24	; 0x04
    39b6:	f3 cd       	rjmp	.-1050   	; 0x359e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    39be:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c0:	fc 01       	movw	r30, r24
    39c2:	20 81       	ld	r18, Z
    39c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39c6:	98 a1       	ldd	r25, Y+32	; 0x20
    39c8:	fc 01       	movw	r30, r24
    39ca:	23 87       	std	Z+11, r18	; 0x0b
    39cc:	e8 cd       	rjmp	.-1072   	; 0x359e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    39ce:	9c 81       	ldd	r25, Y+4	; 0x04
    39d0:	89 2f       	mov	r24, r25
    39d2:	88 0f       	add	r24, r24
    39d4:	89 0f       	add	r24, r25
    39d6:	21 e0       	ldi	r18, 0x01	; 1
    39d8:	28 0f       	add	r18, r24
    39da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39dc:	98 a1       	ldd	r25, Y+32	; 0x20
    39de:	fc 01       	movw	r30, r24
    39e0:	20 83       	st	Z, r18
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	a1 96       	adiw	r28, 0x21	; 33
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	df 91       	pop	r29
    39f2:	cf 91       	pop	r28
    39f4:	1f 91       	pop	r17
    39f6:	0f 91       	pop	r16
    39f8:	ff 90       	pop	r15
    39fa:	ef 90       	pop	r14
    39fc:	cf 90       	pop	r12
    39fe:	af 90       	pop	r10
    3a00:	08 95       	ret

00003a02 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    3a02:	cf 93       	push	r28
    3a04:	df 93       	push	r29
    3a06:	00 d0       	rcall	.+0      	; 0x3a08 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	9e 83       	std	Y+6, r25	; 0x06
    3a10:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3a12:	82 e0       	ldi	r24, 0x02	; 2
    3a14:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    3a16:	ae 01       	movw	r20, r28
    3a18:	4c 5f       	subi	r20, 0xFC	; 252
    3a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a1c:	9e 01       	movw	r18, r28
    3a1e:	2e 5f       	subi	r18, 0xFE	; 254
    3a20:	3f 4f       	sbci	r19, 0xFF	; 255
    3a22:	8d 81       	ldd	r24, Y+5	; 0x05
    3a24:	9e 81       	ldd	r25, Y+6	; 0x06
    3a26:	b9 01       	movw	r22, r18
    3a28:	1f dd       	rcall	.-1474   	; 0x3468 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    3a2a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	88 23       	and	r24, r24
    3a30:	19 f0       	breq	.+6      	; 0x3a38 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	82 30       	cpi	r24, 0x02	; 2
    3a36:	11 f4       	brne	.+4      	; 0x3a3c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	01 c0       	rjmp	.+2      	; 0x3a3e <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    3a3e:	26 96       	adiw	r28, 0x06	; 6
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	08 95       	ret

00003a50 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	00 d0       	rcall	.+0      	; 0x3a56 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	9b 83       	std	Y+3, r25	; 0x03
    3a5c:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    3a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    3a60:	3b 81       	ldd	r19, Y+3	; 0x03
    3a62:	8a 81       	ldd	r24, Y+2	; 0x02
    3a64:	9b 81       	ldd	r25, Y+3	; 0x03
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	b9 01       	movw	r22, r18
    3a6a:	77 dd       	rcall	.-1298   	; 0x355a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	99 81       	ldd	r25, Y+1	; 0x01
    3a72:	99 23       	and	r25, r25
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3a76:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	08 95       	ret

00003a84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    3a8a:	1f 92       	push	r1
    3a8c:	1f 92       	push	r1
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	7b 83       	std	Y+3, r23	; 0x03
    3a96:	6a 83       	std	Y+2, r22	; 0x02
    3a98:	5d 83       	std	Y+5, r21	; 0x05
    3a9a:	4c 83       	std	Y+4, r20	; 0x04
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	88 2f       	mov	r24, r24
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	89 5d       	subi	r24, 0xD9	; 217
    3aa4:	9b 4f       	sbci	r25, 0xFB	; 251
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	80 81       	ld	r24, Z
    3aaa:	88 1f       	adc	r24, r24
    3aac:	88 27       	eor	r24, r24
    3aae:	88 1f       	adc	r24, r24
    3ab0:	88 23       	and	r24, r24
    3ab2:	31 f0       	breq	.+12     	; 0x3ac0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab8:	fc 01       	movw	r30, r24
    3aba:	11 82       	std	Z+1, r1	; 0x01
    3abc:	10 82       	st	Z, r1
    3abe:	72 c0       	rjmp	.+228    	; 0x3ba4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	28 2f       	mov	r18, r24
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	82 0f       	add	r24, r18
    3ace:	93 1f       	adc	r25, r19
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	88 0f       	add	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	9c 01       	movw	r18, r24
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	88 2f       	mov	r24, r24
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	89 5d       	subi	r24, 0xD9	; 217
    3ae2:	9b 4f       	sbci	r25, 0xFB	; 251
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	80 81       	ld	r24, Z
    3ae8:	08 2e       	mov	r0, r24
    3aea:	00 0c       	add	r0, r0
    3aec:	99 0b       	sbc	r25, r25
    3aee:	28 0f       	add	r18, r24
    3af0:	39 1f       	adc	r19, r25
    3af2:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <ServoCount>
    3af6:	88 2f       	mov	r24, r24
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	28 17       	cp	r18, r24
    3afc:	39 07       	cpc	r19, r25
    3afe:	4c f5       	brge	.+82     	; 0x3b52 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	28 2f       	mov	r18, r24
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	c9 01       	movw	r24, r18
    3b08:	88 0f       	add	r24, r24
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	82 0f       	add	r24, r18
    3b0e:	93 1f       	adc	r25, r19
    3b10:	88 0f       	add	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	9c 01       	movw	r18, r24
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	89 5d       	subi	r24, 0xD9	; 217
    3b22:	9b 4f       	sbci	r25, 0xFB	; 251
    3b24:	fc 01       	movw	r30, r24
    3b26:	80 81       	ld	r24, Z
    3b28:	08 2e       	mov	r0, r24
    3b2a:	00 0c       	add	r0, r0
    3b2c:	99 0b       	sbc	r25, r25
    3b2e:	28 0f       	add	r18, r24
    3b30:	39 1f       	adc	r19, r25
    3b32:	c9 01       	movw	r24, r18
    3b34:	88 0f       	add	r24, r24
    3b36:	99 1f       	adc	r25, r25
    3b38:	82 0f       	add	r24, r18
    3b3a:	93 1f       	adc	r25, r19
    3b3c:	89 56       	subi	r24, 0x69	; 105
    3b3e:	9c 4f       	sbci	r25, 0xFC	; 252
    3b40:	fc 01       	movw	r30, r24
    3b42:	80 81       	ld	r24, Z
    3b44:	86 fb       	bst	r24, 6
    3b46:	88 27       	eor	r24, r24
    3b48:	80 f9       	bld	r24, 0
    3b4a:	81 30       	cpi	r24, 0x01	; 1
    3b4c:	11 f4       	brne	.+4      	; 0x3b52 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	88 23       	and	r24, r24
    3b56:	31 f1       	breq	.+76     	; 0x3ba4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	c9 01       	movw	r24, r18
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	82 0f       	add	r24, r18
    3b66:	93 1f       	adc	r25, r19
    3b68:	88 0f       	add	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	9c 01       	movw	r18, r24
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	88 2f       	mov	r24, r24
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	89 5d       	subi	r24, 0xD9	; 217
    3b7a:	9b 4f       	sbci	r25, 0xFB	; 251
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	80 81       	ld	r24, Z
    3b80:	08 2e       	mov	r0, r24
    3b82:	00 0c       	add	r0, r0
    3b84:	99 0b       	sbc	r25, r25
    3b86:	28 0f       	add	r18, r24
    3b88:	39 1f       	adc	r19, r25
    3b8a:	c9 01       	movw	r24, r18
    3b8c:	88 0f       	add	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	82 0f       	add	r24, r18
    3b92:	93 1f       	adc	r25, r19
    3b94:	89 56       	subi	r24, 0x69	; 105
    3b96:	9c 4f       	sbci	r25, 0xFC	; 252
    3b98:	fc 01       	movw	r30, r24
    3b9a:	80 81       	ld	r24, Z
    3b9c:	8f 73       	andi	r24, 0x3F	; 63
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	88 2f       	mov	r24, r24
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	9c 01       	movw	r18, r24
    3bac:	29 5d       	subi	r18, 0xD9	; 217
    3bae:	3b 4f       	sbci	r19, 0xFB	; 251
    3bb0:	f9 01       	movw	r30, r18
    3bb2:	20 81       	ld	r18, Z
    3bb4:	2f 5f       	subi	r18, 0xFF	; 255
    3bb6:	89 5d       	subi	r24, 0xD9	; 217
    3bb8:	9b 4f       	sbci	r25, 0xFB	; 251
    3bba:	fc 01       	movw	r30, r24
    3bbc:	20 83       	st	Z, r18
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	28 2f       	mov	r18, r24
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	c9 01       	movw	r24, r18
    3bc6:	88 0f       	add	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	82 0f       	add	r24, r18
    3bcc:	93 1f       	adc	r25, r19
    3bce:	88 0f       	add	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	9c 01       	movw	r18, r24
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	89 5d       	subi	r24, 0xD9	; 217
    3be0:	9b 4f       	sbci	r25, 0xFB	; 251
    3be2:	fc 01       	movw	r30, r24
    3be4:	80 81       	ld	r24, Z
    3be6:	08 2e       	mov	r0, r24
    3be8:	00 0c       	add	r0, r0
    3bea:	99 0b       	sbc	r25, r25
    3bec:	28 0f       	add	r18, r24
    3bee:	39 1f       	adc	r19, r25
    3bf0:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <ServoCount>
    3bf4:	88 2f       	mov	r24, r24
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	28 17       	cp	r18, r24
    3bfa:	39 07       	cpc	r19, r25
    3bfc:	5c f4       	brge	.+22     	; 0x3c14 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	88 2f       	mov	r24, r24
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	89 5d       	subi	r24, 0xD9	; 217
    3c06:	9b 4f       	sbci	r25, 0xFB	; 251
    3c08:	fc 01       	movw	r30, r24
    3c0a:	80 81       	ld	r24, Z
    3c0c:	8c 30       	cpi	r24, 0x0C	; 12
    3c0e:	14 f4       	brge	.+4      	; 0x3c14 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	01 c0       	rjmp	.+2      	; 0x3c16 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	88 23       	and	r24, r24
    3c18:	09 f4       	brne	.+2      	; 0x3c1c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    3c1a:	7f c0       	rjmp	.+254    	; 0x3d1a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c20:	fc 01       	movw	r30, r24
    3c22:	40 81       	ld	r20, Z
    3c24:	51 81       	ldd	r21, Z+1	; 0x01
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	28 2f       	mov	r18, r24
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	c9 01       	movw	r24, r18
    3c2e:	88 0f       	add	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	82 0f       	add	r24, r18
    3c34:	93 1f       	adc	r25, r19
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	88 0f       	add	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	9c 01       	movw	r18, r24
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	88 2f       	mov	r24, r24
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	89 5d       	subi	r24, 0xD9	; 217
    3c48:	9b 4f       	sbci	r25, 0xFB	; 251
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	80 81       	ld	r24, Z
    3c4e:	08 2e       	mov	r0, r24
    3c50:	00 0c       	add	r0, r0
    3c52:	99 0b       	sbc	r25, r25
    3c54:	28 0f       	add	r18, r24
    3c56:	39 1f       	adc	r19, r25
    3c58:	c9 01       	movw	r24, r18
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	82 0f       	add	r24, r18
    3c60:	93 1f       	adc	r25, r19
    3c62:	88 56       	subi	r24, 0x68	; 104
    3c64:	9c 4f       	sbci	r25, 0xFC	; 252
    3c66:	fc 01       	movw	r30, r24
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	9a 01       	movw	r18, r20
    3c6e:	28 0f       	add	r18, r24
    3c70:	39 1f       	adc	r19, r25
    3c72:	8c 81       	ldd	r24, Y+4	; 0x04
    3c74:	9d 81       	ldd	r25, Y+5	; 0x05
    3c76:	fc 01       	movw	r30, r24
    3c78:	31 83       	std	Z+1, r19	; 0x01
    3c7a:	20 83       	st	Z, r18
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	28 2f       	mov	r18, r24
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	c9 01       	movw	r24, r18
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	82 0f       	add	r24, r18
    3c8a:	93 1f       	adc	r25, r19
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	9c 01       	movw	r18, r24
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	88 2f       	mov	r24, r24
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	89 5d       	subi	r24, 0xD9	; 217
    3c9e:	9b 4f       	sbci	r25, 0xFB	; 251
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	80 81       	ld	r24, Z
    3ca4:	08 2e       	mov	r0, r24
    3ca6:	00 0c       	add	r0, r0
    3ca8:	99 0b       	sbc	r25, r25
    3caa:	28 0f       	add	r18, r24
    3cac:	39 1f       	adc	r19, r25
    3cae:	c9 01       	movw	r24, r18
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	82 0f       	add	r24, r18
    3cb6:	93 1f       	adc	r25, r19
    3cb8:	89 56       	subi	r24, 0x69	; 105
    3cba:	9c 4f       	sbci	r25, 0xFC	; 252
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	80 81       	ld	r24, Z
    3cc0:	86 fb       	bst	r24, 6
    3cc2:	88 27       	eor	r24, r24
    3cc4:	80 f9       	bld	r24, 0
    3cc6:	88 23       	and	r24, r24
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    3cca:	51 c0       	rjmp	.+162    	; 0x3d6e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	28 2f       	mov	r18, r24
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	c9 01       	movw	r24, r18
    3cd4:	88 0f       	add	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	82 0f       	add	r24, r18
    3cda:	93 1f       	adc	r25, r19
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	9c 01       	movw	r18, r24
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	88 2f       	mov	r24, r24
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	89 5d       	subi	r24, 0xD9	; 217
    3cee:	9b 4f       	sbci	r25, 0xFB	; 251
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	80 81       	ld	r24, Z
    3cf4:	08 2e       	mov	r0, r24
    3cf6:	00 0c       	add	r0, r0
    3cf8:	99 0b       	sbc	r25, r25
    3cfa:	28 0f       	add	r18, r24
    3cfc:	39 1f       	adc	r19, r25
    3cfe:	c9 01       	movw	r24, r18
    3d00:	88 0f       	add	r24, r24
    3d02:	99 1f       	adc	r25, r25
    3d04:	82 0f       	add	r24, r18
    3d06:	93 1f       	adc	r25, r19
    3d08:	89 56       	subi	r24, 0x69	; 105
    3d0a:	9c 4f       	sbci	r25, 0xFC	; 252
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	80 81       	ld	r24, Z
    3d10:	8f 73       	andi	r24, 0x3F	; 63
    3d12:	61 e0       	ldi	r22, 0x01	; 1
    3d14:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    3d18:	2a c0       	rjmp	.+84     	; 0x3d6e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1e:	fc 01       	movw	r30, r24
    3d20:	80 81       	ld	r24, Z
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	04 96       	adiw	r24, 0x04	; 4
    3d26:	21 e0       	ldi	r18, 0x01	; 1
    3d28:	80 34       	cpi	r24, 0x40	; 64
    3d2a:	9c 49       	sbci	r25, 0x9C	; 156
    3d2c:	08 f0       	brcs	.+2      	; 0x3d30 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	22 23       	and	r18, r18
    3d32:	41 f0       	breq	.+16     	; 0x3d44 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	9d 81       	ldd	r25, Y+5	; 0x05
    3d38:	20 e4       	ldi	r18, 0x40	; 64
    3d3a:	3c e9       	ldi	r19, 0x9C	; 156
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	31 83       	std	Z+1, r19	; 0x01
    3d40:	20 83       	st	Z, r18
    3d42:	0d c0       	rjmp	.+26     	; 0x3d5e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	9b 81       	ldd	r25, Y+3	; 0x03
    3d48:	fc 01       	movw	r30, r24
    3d4a:	80 81       	ld	r24, Z
    3d4c:	91 81       	ldd	r25, Z+1	; 0x01
    3d4e:	9c 01       	movw	r18, r24
    3d50:	2c 5f       	subi	r18, 0xFC	; 252
    3d52:	3f 4f       	sbci	r19, 0xFF	; 255
    3d54:	8c 81       	ldd	r24, Y+4	; 0x04
    3d56:	9d 81       	ldd	r25, Y+5	; 0x05
    3d58:	fc 01       	movw	r30, r24
    3d5a:	31 83       	std	Z+1, r19	; 0x01
    3d5c:	20 83       	st	Z, r18
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	89 5d       	subi	r24, 0xD9	; 217
    3d66:	9b 4f       	sbci	r25, 0xFB	; 251
    3d68:	2f ef       	ldi	r18, 0xFF	; 255
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	20 83       	st	Z, r18
    3d6e:	00 00       	nop
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	08 95       	ret

00003d80 <__vector_17>:
    3d80:	1f 92       	push	r1
    3d82:	0f 92       	push	r0
    3d84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3d88:	0f 92       	push	r0
    3d8a:	11 24       	eor	r1, r1
    3d8c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3d90:	0f 92       	push	r0
    3d92:	2f 93       	push	r18
    3d94:	3f 93       	push	r19
    3d96:	4f 93       	push	r20
    3d98:	5f 93       	push	r21
    3d9a:	6f 93       	push	r22
    3d9c:	7f 93       	push	r23
    3d9e:	8f 93       	push	r24
    3da0:	9f 93       	push	r25
    3da2:	af 93       	push	r26
    3da4:	bf 93       	push	r27
    3da6:	ef 93       	push	r30
    3da8:	ff 93       	push	r31
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	48 e8       	ldi	r20, 0x88	; 136
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	64 e8       	ldi	r22, 0x84	; 132
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	63 de       	rcall	.-826    	; 0x3a84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3dbe:	00 00       	nop
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	ff 91       	pop	r31
    3dc6:	ef 91       	pop	r30
    3dc8:	bf 91       	pop	r27
    3dca:	af 91       	pop	r26
    3dcc:	9f 91       	pop	r25
    3dce:	8f 91       	pop	r24
    3dd0:	7f 91       	pop	r23
    3dd2:	6f 91       	pop	r22
    3dd4:	5f 91       	pop	r21
    3dd6:	4f 91       	pop	r20
    3dd8:	3f 91       	pop	r19
    3dda:	2f 91       	pop	r18
    3ddc:	0f 90       	pop	r0
    3dde:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3de2:	0f 90       	pop	r0
    3de4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3de8:	0f 90       	pop	r0
    3dea:	1f 90       	pop	r1
    3dec:	18 95       	reti

00003dee <__vector_32>:
    3dee:	1f 92       	push	r1
    3df0:	0f 92       	push	r0
    3df2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3df6:	0f 92       	push	r0
    3df8:	11 24       	eor	r1, r1
    3dfa:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3dfe:	0f 92       	push	r0
    3e00:	2f 93       	push	r18
    3e02:	3f 93       	push	r19
    3e04:	4f 93       	push	r20
    3e06:	5f 93       	push	r21
    3e08:	6f 93       	push	r22
    3e0a:	7f 93       	push	r23
    3e0c:	8f 93       	push	r24
    3e0e:	9f 93       	push	r25
    3e10:	af 93       	push	r26
    3e12:	bf 93       	push	r27
    3e14:	ef 93       	push	r30
    3e16:	ff 93       	push	r31
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	48 e9       	ldi	r20, 0x98	; 152
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	64 e9       	ldi	r22, 0x94	; 148
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	82 e0       	ldi	r24, 0x02	; 2
    3e2a:	2c de       	rcall	.-936    	; 0x3a84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3e2c:	00 00       	nop
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	ff 91       	pop	r31
    3e34:	ef 91       	pop	r30
    3e36:	bf 91       	pop	r27
    3e38:	af 91       	pop	r26
    3e3a:	9f 91       	pop	r25
    3e3c:	8f 91       	pop	r24
    3e3e:	7f 91       	pop	r23
    3e40:	6f 91       	pop	r22
    3e42:	5f 91       	pop	r21
    3e44:	4f 91       	pop	r20
    3e46:	3f 91       	pop	r19
    3e48:	2f 91       	pop	r18
    3e4a:	0f 90       	pop	r0
    3e4c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3e50:	0f 90       	pop	r0
    3e52:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3e56:	0f 90       	pop	r0
    3e58:	1f 90       	pop	r1
    3e5a:	18 95       	reti

00003e5c <__vector_42>:
    3e5c:	1f 92       	push	r1
    3e5e:	0f 92       	push	r0
    3e60:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3e64:	0f 92       	push	r0
    3e66:	11 24       	eor	r1, r1
    3e68:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3e6c:	0f 92       	push	r0
    3e6e:	2f 93       	push	r18
    3e70:	3f 93       	push	r19
    3e72:	4f 93       	push	r20
    3e74:	5f 93       	push	r21
    3e76:	6f 93       	push	r22
    3e78:	7f 93       	push	r23
    3e7a:	8f 93       	push	r24
    3e7c:	9f 93       	push	r25
    3e7e:	af 93       	push	r26
    3e80:	bf 93       	push	r27
    3e82:	ef 93       	push	r30
    3e84:	ff 93       	push	r31
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	48 ea       	ldi	r20, 0xA8	; 168
    3e90:	50 e0       	ldi	r21, 0x00	; 0
    3e92:	64 ea       	ldi	r22, 0xA4	; 164
    3e94:	70 e0       	ldi	r23, 0x00	; 0
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	f5 dd       	rcall	.-1046   	; 0x3a84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3e9a:	00 00       	nop
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	ff 91       	pop	r31
    3ea2:	ef 91       	pop	r30
    3ea4:	bf 91       	pop	r27
    3ea6:	af 91       	pop	r26
    3ea8:	9f 91       	pop	r25
    3eaa:	8f 91       	pop	r24
    3eac:	7f 91       	pop	r23
    3eae:	6f 91       	pop	r22
    3eb0:	5f 91       	pop	r21
    3eb2:	4f 91       	pop	r20
    3eb4:	3f 91       	pop	r19
    3eb6:	2f 91       	pop	r18
    3eb8:	0f 90       	pop	r0
    3eba:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3ebe:	0f 90       	pop	r0
    3ec0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3ec4:	0f 90       	pop	r0
    3ec6:	1f 90       	pop	r1
    3ec8:	18 95       	reti

00003eca <__vector_47>:
    3eca:	1f 92       	push	r1
    3ecc:	0f 92       	push	r0
    3ece:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3ed2:	0f 92       	push	r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3eda:	0f 92       	push	r0
    3edc:	2f 93       	push	r18
    3ede:	3f 93       	push	r19
    3ee0:	4f 93       	push	r20
    3ee2:	5f 93       	push	r21
    3ee4:	6f 93       	push	r22
    3ee6:	7f 93       	push	r23
    3ee8:	8f 93       	push	r24
    3eea:	9f 93       	push	r25
    3eec:	af 93       	push	r26
    3eee:	bf 93       	push	r27
    3ef0:	ef 93       	push	r30
    3ef2:	ff 93       	push	r31
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	48 e2       	ldi	r20, 0x28	; 40
    3efe:	51 e0       	ldi	r21, 0x01	; 1
    3f00:	64 e2       	ldi	r22, 0x24	; 36
    3f02:	71 e0       	ldi	r23, 0x01	; 1
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	be dd       	rcall	.-1156   	; 0x3a84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3f08:	00 00       	nop
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	ff 91       	pop	r31
    3f10:	ef 91       	pop	r30
    3f12:	bf 91       	pop	r27
    3f14:	af 91       	pop	r26
    3f16:	9f 91       	pop	r25
    3f18:	8f 91       	pop	r24
    3f1a:	7f 91       	pop	r23
    3f1c:	6f 91       	pop	r22
    3f1e:	5f 91       	pop	r21
    3f20:	4f 91       	pop	r20
    3f22:	3f 91       	pop	r19
    3f24:	2f 91       	pop	r18
    3f26:	0f 90       	pop	r0
    3f28:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f2c:	0f 90       	pop	r0
    3f2e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f32:	0f 90       	pop	r0
    3f34:	1f 90       	pop	r1
    3f36:	18 95       	reti

00003f38 <_ZL7initISR18timer16_Sequence_t>:
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	1f 92       	push	r1
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	89 83       	std	Y+1, r24	; 0x01
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	81 30       	cpi	r24, 0x01	; 1
    3f48:	01 f5       	brne	.+64     	; 0x3f8a <_ZL7initISR18timer16_Sequence_t+0x52>
    3f4a:	80 e8       	ldi	r24, 0x80	; 128
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	fc 01       	movw	r30, r24
    3f50:	10 82       	st	Z, r1
    3f52:	81 e8       	ldi	r24, 0x81	; 129
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	22 e0       	ldi	r18, 0x02	; 2
    3f58:	fc 01       	movw	r30, r24
    3f5a:	20 83       	st	Z, r18
    3f5c:	84 e8       	ldi	r24, 0x84	; 132
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	fc 01       	movw	r30, r24
    3f62:	11 82       	std	Z+1, r1	; 0x01
    3f64:	10 82       	st	Z, r1
    3f66:	86 e3       	ldi	r24, 0x36	; 54
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	26 e3       	ldi	r18, 0x36	; 54
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	f9 01       	movw	r30, r18
    3f70:	20 81       	ld	r18, Z
    3f72:	22 60       	ori	r18, 0x02	; 2
    3f74:	fc 01       	movw	r30, r24
    3f76:	20 83       	st	Z, r18
    3f78:	8f e6       	ldi	r24, 0x6F	; 111
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	2f e6       	ldi	r18, 0x6F	; 111
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	f9 01       	movw	r30, r18
    3f82:	20 81       	ld	r18, Z
    3f84:	22 60       	ori	r18, 0x02	; 2
    3f86:	fc 01       	movw	r30, r24
    3f88:	20 83       	st	Z, r18
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	82 30       	cpi	r24, 0x02	; 2
    3f8e:	c1 f4       	brne	.+48     	; 0x3fc0 <_ZL7initISR18timer16_Sequence_t+0x88>
    3f90:	80 e9       	ldi	r24, 0x90	; 144
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	fc 01       	movw	r30, r24
    3f96:	10 82       	st	Z, r1
    3f98:	81 e9       	ldi	r24, 0x91	; 145
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	22 e0       	ldi	r18, 0x02	; 2
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	20 83       	st	Z, r18
    3fa2:	84 e9       	ldi	r24, 0x94	; 148
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	11 82       	std	Z+1, r1	; 0x01
    3faa:	10 82       	st	Z, r1
    3fac:	88 e3       	ldi	r24, 0x38	; 56
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	22 e0       	ldi	r18, 0x02	; 2
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	20 83       	st	Z, r18
    3fb6:	81 e7       	ldi	r24, 0x71	; 113
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	22 e0       	ldi	r18, 0x02	; 2
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	20 83       	st	Z, r18
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	83 30       	cpi	r24, 0x03	; 3
    3fc4:	c1 f4       	brne	.+48     	; 0x3ff6 <_ZL7initISR18timer16_Sequence_t+0xbe>
    3fc6:	80 ea       	ldi	r24, 0xA0	; 160
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	fc 01       	movw	r30, r24
    3fcc:	10 82       	st	Z, r1
    3fce:	81 ea       	ldi	r24, 0xA1	; 161
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	22 e0       	ldi	r18, 0x02	; 2
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	20 83       	st	Z, r18
    3fd8:	84 ea       	ldi	r24, 0xA4	; 164
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	fc 01       	movw	r30, r24
    3fde:	11 82       	std	Z+1, r1	; 0x01
    3fe0:	10 82       	st	Z, r1
    3fe2:	89 e3       	ldi	r24, 0x39	; 57
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	22 e0       	ldi	r18, 0x02	; 2
    3fe8:	fc 01       	movw	r30, r24
    3fea:	20 83       	st	Z, r18
    3fec:	82 e7       	ldi	r24, 0x72	; 114
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	22 e0       	ldi	r18, 0x02	; 2
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	20 83       	st	Z, r18
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	88 23       	and	r24, r24
    3ffa:	c1 f4       	brne	.+48     	; 0x402c <_ZL7initISR18timer16_Sequence_t+0xf4>
    3ffc:	80 e2       	ldi	r24, 0x20	; 32
    3ffe:	91 e0       	ldi	r25, 0x01	; 1
    4000:	fc 01       	movw	r30, r24
    4002:	10 82       	st	Z, r1
    4004:	81 e2       	ldi	r24, 0x21	; 33
    4006:	91 e0       	ldi	r25, 0x01	; 1
    4008:	22 e0       	ldi	r18, 0x02	; 2
    400a:	fc 01       	movw	r30, r24
    400c:	20 83       	st	Z, r18
    400e:	84 e2       	ldi	r24, 0x24	; 36
    4010:	91 e0       	ldi	r25, 0x01	; 1
    4012:	fc 01       	movw	r30, r24
    4014:	11 82       	std	Z+1, r1	; 0x01
    4016:	10 82       	st	Z, r1
    4018:	8a e3       	ldi	r24, 0x3A	; 58
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	22 e0       	ldi	r18, 0x02	; 2
    401e:	fc 01       	movw	r30, r24
    4020:	20 83       	st	Z, r18
    4022:	83 e7       	ldi	r24, 0x73	; 115
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	22 e0       	ldi	r18, 0x02	; 2
    4028:	fc 01       	movw	r30, r24
    402a:	20 83       	st	Z, r18
    402c:	00 00       	nop
    402e:	0f 90       	pop	r0
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	08 95       	ret

00004036 <_ZL13isTimerActive18timer16_Sequence_t>:
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	1f 92       	push	r1
    403c:	1f 92       	push	r1
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	8a 83       	std	Y+2, r24	; 0x02
    4044:	19 82       	std	Y+1, r1	; 0x01
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	8c 30       	cpi	r24, 0x0C	; 12
    404a:	30 f5       	brcc	.+76     	; 0x4098 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
    404e:	28 2f       	mov	r18, r24
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	c9 01       	movw	r24, r18
    4054:	88 0f       	add	r24, r24
    4056:	99 1f       	adc	r25, r25
    4058:	82 0f       	add	r24, r18
    405a:	93 1f       	adc	r25, r19
    405c:	88 0f       	add	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	88 0f       	add	r24, r24
    4062:	99 1f       	adc	r25, r25
    4064:	9c 01       	movw	r18, r24
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	88 2f       	mov	r24, r24
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	28 0f       	add	r18, r24
    406e:	39 1f       	adc	r19, r25
    4070:	c9 01       	movw	r24, r18
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	82 0f       	add	r24, r18
    4078:	93 1f       	adc	r25, r19
    407a:	89 56       	subi	r24, 0x69	; 105
    407c:	9c 4f       	sbci	r25, 0xFC	; 252
    407e:	fc 01       	movw	r30, r24
    4080:	80 81       	ld	r24, Z
    4082:	86 fb       	bst	r24, 6
    4084:	88 27       	eor	r24, r24
    4086:	80 f9       	bld	r24, 0
    4088:	81 30       	cpi	r24, 0x01	; 1
    408a:	11 f4       	brne	.+4      	; 0x4090 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	05 c0       	rjmp	.+10     	; 0x409a <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	8f 5f       	subi	r24, 0xFF	; 255
    4094:	89 83       	std	Y+1, r24	; 0x01
    4096:	d7 cf       	rjmp	.-82     	; 0x4046 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	08 95       	ret

000040a4 <_ZN5ServoC1Ev>:
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	1f 92       	push	r1
    40aa:	1f 92       	push	r1
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
    40b0:	9a 83       	std	Y+2, r25	; 0x02
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <ServoCount>
    40b8:	80 33       	cpi	r24, 0x30	; 48
    40ba:	e8 f4       	brcc	.+58     	; 0x40f6 <_ZN5ServoC1Ev+0x52>
    40bc:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <ServoCount>
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	82 0f       	add	r24, r18
    40c4:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <ServoCount>
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	9a 81       	ldd	r25, Y+2	; 0x02
    40cc:	fc 01       	movw	r30, r24
    40ce:	20 83       	st	Z, r18
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	9a 81       	ldd	r25, Y+2	; 0x02
    40d4:	fc 01       	movw	r30, r24
    40d6:	80 81       	ld	r24, Z
    40d8:	28 2f       	mov	r18, r24
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	c9 01       	movw	r24, r18
    40de:	88 0f       	add	r24, r24
    40e0:	99 1f       	adc	r25, r25
    40e2:	82 0f       	add	r24, r18
    40e4:	93 1f       	adc	r25, r19
    40e6:	88 56       	subi	r24, 0x68	; 104
    40e8:	9c 4f       	sbci	r25, 0xFC	; 252
    40ea:	28 eb       	ldi	r18, 0xB8	; 184
    40ec:	3b e0       	ldi	r19, 0x0B	; 11
    40ee:	fc 01       	movw	r30, r24
    40f0:	31 83       	std	Z+1, r19	; 0x01
    40f2:	20 83       	st	Z, r18
    40f4:	05 c0       	rjmp	.+10     	; 0x4100 <_ZN5ServoC1Ev+0x5c>
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	9a 81       	ldd	r25, Y+2	; 0x02
    40fa:	2f ef       	ldi	r18, 0xFF	; 255
    40fc:	fc 01       	movw	r30, r24
    40fe:	20 83       	st	Z, r18
    4100:	00 00       	nop
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	08 95       	ret

0000410c <_ZN5Servo6attachEi>:
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	00 d0       	rcall	.+0      	; 0x4112 <_ZN5Servo6attachEi+0x6>
    4112:	1f 92       	push	r1
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	9a 83       	std	Y+2, r25	; 0x02
    411a:	89 83       	std	Y+1, r24	; 0x01
    411c:	7c 83       	std	Y+4, r23	; 0x04
    411e:	6b 83       	std	Y+3, r22	; 0x03
    4120:	6b 81       	ldd	r22, Y+3	; 0x03
    4122:	7c 81       	ldd	r23, Y+4	; 0x04
    4124:	89 81       	ldd	r24, Y+1	; 0x01
    4126:	9a 81       	ldd	r25, Y+2	; 0x02
    4128:	20 e6       	ldi	r18, 0x60	; 96
    412a:	39 e0       	ldi	r19, 0x09	; 9
    412c:	40 e2       	ldi	r20, 0x20	; 32
    412e:	52 e0       	ldi	r21, 0x02	; 2
    4130:	07 d0       	rcall	.+14     	; 0x4140 <_ZN5Servo6attachEiii>
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	df 91       	pop	r29
    413c:	cf 91       	pop	r28
    413e:	08 95       	ret

00004140 <_ZN5Servo6attachEiii>:
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	29 97       	sbiw	r28, 0x09	; 9
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	9b 83       	std	Y+3, r25	; 0x03
    4156:	8a 83       	std	Y+2, r24	; 0x02
    4158:	7d 83       	std	Y+5, r23	; 0x05
    415a:	6c 83       	std	Y+4, r22	; 0x04
    415c:	5f 83       	std	Y+7, r21	; 0x07
    415e:	4e 83       	std	Y+6, r20	; 0x06
    4160:	39 87       	std	Y+9, r19	; 0x09
    4162:	28 87       	std	Y+8, r18	; 0x08
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	9b 81       	ldd	r25, Y+3	; 0x03
    4168:	fc 01       	movw	r30, r24
    416a:	80 81       	ld	r24, Z
    416c:	80 33       	cpi	r24, 0x30	; 48
    416e:	08 f0       	brcs	.+2      	; 0x4172 <_ZN5Servo6attachEiii+0x32>
    4170:	6b c0       	rjmp	.+214    	; 0x4248 <_ZN5Servo6attachEiii+0x108>
    4172:	8c 81       	ldd	r24, Y+4	; 0x04
    4174:	61 e0       	ldi	r22, 0x01	; 1
    4176:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
    417a:	8a 81       	ldd	r24, Y+2	; 0x02
    417c:	9b 81       	ldd	r25, Y+3	; 0x03
    417e:	fc 01       	movw	r30, r24
    4180:	80 81       	ld	r24, Z
    4182:	28 2f       	mov	r18, r24
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	48 2f       	mov	r20, r24
    418a:	4f 73       	andi	r20, 0x3F	; 63
    418c:	c9 01       	movw	r24, r18
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	82 0f       	add	r24, r18
    4194:	93 1f       	adc	r25, r19
    4196:	89 56       	subi	r24, 0x69	; 105
    4198:	9c 4f       	sbci	r25, 0xFC	; 252
    419a:	24 2f       	mov	r18, r20
    419c:	2f 73       	andi	r18, 0x3F	; 63
    419e:	fc 01       	movw	r30, r24
    41a0:	30 81       	ld	r19, Z
    41a2:	30 7c       	andi	r19, 0xC0	; 192
    41a4:	23 2b       	or	r18, r19
    41a6:	fc 01       	movw	r30, r24
    41a8:	20 83       	st	Z, r18
    41aa:	20 e2       	ldi	r18, 0x20	; 32
    41ac:	32 e0       	ldi	r19, 0x02	; 2
    41ae:	8e 81       	ldd	r24, Y+6	; 0x06
    41b0:	9f 81       	ldd	r25, Y+7	; 0x07
    41b2:	a9 01       	movw	r20, r18
    41b4:	48 1b       	sub	r20, r24
    41b6:	59 0b       	sbc	r21, r25
    41b8:	ca 01       	movw	r24, r20
    41ba:	99 23       	and	r25, r25
    41bc:	0c f4       	brge	.+2      	; 0x41c0 <_ZN5Servo6attachEiii+0x80>
    41be:	03 96       	adiw	r24, 0x03	; 3
    41c0:	95 95       	asr	r25
    41c2:	87 95       	ror	r24
    41c4:	95 95       	asr	r25
    41c6:	87 95       	ror	r24
    41c8:	28 2f       	mov	r18, r24
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	9b 81       	ldd	r25, Y+3	; 0x03
    41ce:	fc 01       	movw	r30, r24
    41d0:	21 83       	std	Z+1, r18	; 0x01
    41d2:	20 e6       	ldi	r18, 0x60	; 96
    41d4:	39 e0       	ldi	r19, 0x09	; 9
    41d6:	88 85       	ldd	r24, Y+8	; 0x08
    41d8:	99 85       	ldd	r25, Y+9	; 0x09
    41da:	a9 01       	movw	r20, r18
    41dc:	48 1b       	sub	r20, r24
    41de:	59 0b       	sbc	r21, r25
    41e0:	ca 01       	movw	r24, r20
    41e2:	99 23       	and	r25, r25
    41e4:	0c f4       	brge	.+2      	; 0x41e8 <_ZN5Servo6attachEiii+0xa8>
    41e6:	03 96       	adiw	r24, 0x03	; 3
    41e8:	95 95       	asr	r25
    41ea:	87 95       	ror	r24
    41ec:	95 95       	asr	r25
    41ee:	87 95       	ror	r24
    41f0:	28 2f       	mov	r18, r24
    41f2:	8a 81       	ldd	r24, Y+2	; 0x02
    41f4:	9b 81       	ldd	r25, Y+3	; 0x03
    41f6:	fc 01       	movw	r30, r24
    41f8:	22 83       	std	Z+2, r18	; 0x02
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
    41fc:	9b 81       	ldd	r25, Y+3	; 0x03
    41fe:	fc 01       	movw	r30, r24
    4200:	90 81       	ld	r25, Z
    4202:	8b ea       	ldi	r24, 0xAB	; 171
    4204:	98 9f       	mul	r25, r24
    4206:	81 2d       	mov	r24, r1
    4208:	11 24       	eor	r1, r1
    420a:	86 95       	lsr	r24
    420c:	86 95       	lsr	r24
    420e:	86 95       	lsr	r24
    4210:	89 83       	std	Y+1, r24	; 0x01
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	10 df       	rcall	.-480    	; 0x4036 <_ZL13isTimerActive18timer16_Sequence_t>
    4216:	98 2f       	mov	r25, r24
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	89 27       	eor	r24, r25
    421c:	88 23       	and	r24, r24
    421e:	11 f0       	breq	.+4      	; 0x4224 <_ZN5Servo6attachEiii+0xe4>
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	8a de       	rcall	.-748    	; 0x3f38 <_ZL7initISR18timer16_Sequence_t>
    4224:	8a 81       	ldd	r24, Y+2	; 0x02
    4226:	9b 81       	ldd	r25, Y+3	; 0x03
    4228:	fc 01       	movw	r30, r24
    422a:	80 81       	ld	r24, Z
    422c:	28 2f       	mov	r18, r24
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	c9 01       	movw	r24, r18
    4232:	88 0f       	add	r24, r24
    4234:	99 1f       	adc	r25, r25
    4236:	82 0f       	add	r24, r18
    4238:	93 1f       	adc	r25, r19
    423a:	89 56       	subi	r24, 0x69	; 105
    423c:	9c 4f       	sbci	r25, 0xFC	; 252
    423e:	fc 01       	movw	r30, r24
    4240:	20 81       	ld	r18, Z
    4242:	20 64       	ori	r18, 0x40	; 64
    4244:	fc 01       	movw	r30, r24
    4246:	20 83       	st	Z, r18
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	9b 81       	ldd	r25, Y+3	; 0x03
    424c:	fc 01       	movw	r30, r24
    424e:	80 81       	ld	r24, Z
    4250:	29 96       	adiw	r28, 0x09	; 9
    4252:	0f b6       	in	r0, 0x3f	; 63
    4254:	f8 94       	cli
    4256:	de bf       	out	0x3e, r29	; 62
    4258:	0f be       	out	0x3f, r0	; 63
    425a:	cd bf       	out	0x3d, r28	; 61
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	08 95       	ret

00004262 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    4262:	6f 92       	push	r6
    4264:	7f 92       	push	r7
    4266:	8f 92       	push	r8
    4268:	9f 92       	push	r9
    426a:	af 92       	push	r10
    426c:	bf 92       	push	r11
    426e:	cf 92       	push	r12
    4270:	df 92       	push	r13
    4272:	ef 92       	push	r14
    4274:	ff 92       	push	r15
    4276:	0f 93       	push	r16
    4278:	1f 93       	push	r17
    427a:	cf 93       	push	r28
    427c:	df 93       	push	r29
    427e:	00 d0       	rcall	.+0      	; 0x4280 <_ZN5Servo5writeEi+0x1e>
    4280:	1f 92       	push	r1
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
    428a:	7c 83       	std	Y+4, r23	; 0x04
    428c:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	9c 81       	ldd	r25, Y+4	; 0x04
    4292:	80 32       	cpi	r24, 0x20	; 32
    4294:	92 40       	sbci	r25, 0x02	; 2
    4296:	0c f0       	brlt	.+2      	; 0x429a <_ZN5Servo5writeEi+0x38>
    4298:	5c c0       	rjmp	.+184    	; 0x4352 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    429a:	8b 81       	ldd	r24, Y+3	; 0x03
    429c:	9c 81       	ldd	r25, Y+4	; 0x04
    429e:	99 23       	and	r25, r25
    42a0:	14 f4       	brge	.+4      	; 0x42a6 <_ZN5Servo5writeEi+0x44>
    42a2:	1c 82       	std	Y+4, r1	; 0x04
    42a4:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    42a6:	8b 81       	ldd	r24, Y+3	; 0x03
    42a8:	9c 81       	ldd	r25, Y+4	; 0x04
    42aa:	85 3b       	cpi	r24, 0xB5	; 181
    42ac:	91 05       	cpc	r25, r1
    42ae:	24 f0       	brlt	.+8      	; 0x42b8 <_ZN5Servo5writeEi+0x56>
    42b0:	84 eb       	ldi	r24, 0xB4	; 180
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	9c 83       	std	Y+4, r25	; 0x04
    42b6:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	9a 81       	ldd	r25, Y+2	; 0x02
    42bc:	fc 01       	movw	r30, r24
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	08 2e       	mov	r0, r24
    42c2:	00 0c       	add	r0, r0
    42c4:	99 0b       	sbc	r25, r25
    42c6:	28 e5       	ldi	r18, 0x58	; 88
    42c8:	32 e0       	ldi	r19, 0x02	; 2
    42ca:	a9 01       	movw	r20, r18
    42cc:	48 1b       	sub	r20, r24
    42ce:	59 0b       	sbc	r21, r25
    42d0:	ca 01       	movw	r24, r20
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	09 2e       	mov	r0, r25
    42dc:	00 0c       	add	r0, r0
    42de:	aa 0b       	sbc	r26, r26
    42e0:	bb 0b       	sbc	r27, r27
    42e2:	29 81       	ldd	r18, Y+1	; 0x01
    42e4:	3a 81       	ldd	r19, Y+2	; 0x02
    42e6:	f9 01       	movw	r30, r18
    42e8:	21 81       	ldd	r18, Z+1	; 0x01
    42ea:	02 2e       	mov	r0, r18
    42ec:	00 0c       	add	r0, r0
    42ee:	33 0b       	sbc	r19, r19
    42f0:	48 e8       	ldi	r20, 0x88	; 136
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	ba 01       	movw	r22, r20
    42f6:	62 1b       	sub	r22, r18
    42f8:	73 0b       	sbc	r23, r19
    42fa:	9b 01       	movw	r18, r22
    42fc:	22 0f       	add	r18, r18
    42fe:	33 1f       	adc	r19, r19
    4300:	22 0f       	add	r18, r18
    4302:	33 1f       	adc	r19, r19
    4304:	03 2e       	mov	r0, r19
    4306:	00 0c       	add	r0, r0
    4308:	44 0b       	sbc	r20, r20
    430a:	55 0b       	sbc	r21, r21
    430c:	6b 81       	ldd	r22, Y+3	; 0x03
    430e:	7c 81       	ldd	r23, Y+4	; 0x04
    4310:	3b 01       	movw	r6, r22
    4312:	77 0f       	add	r23, r23
    4314:	88 08       	sbc	r8, r8
    4316:	99 08       	sbc	r9, r9
    4318:	6b 2f       	mov	r22, r27
    431a:	6f 93       	push	r22
    431c:	6a 2f       	mov	r22, r26
    431e:	6f 93       	push	r22
    4320:	69 2f       	mov	r22, r25
    4322:	6f 93       	push	r22
    4324:	8f 93       	push	r24
    4326:	59 01       	movw	r10, r18
    4328:	6a 01       	movw	r12, r20
    432a:	14 eb       	ldi	r17, 0xB4	; 180
    432c:	e1 2e       	mov	r14, r17
    432e:	f1 2c       	mov	r15, r1
    4330:	00 e0       	ldi	r16, 0x00	; 0
    4332:	10 e0       	ldi	r17, 0x00	; 0
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	a9 01       	movw	r20, r18
    433a:	c4 01       	movw	r24, r8
    433c:	b3 01       	movw	r22, r6
    433e:	0e 94 25 31 	call	0x624a	; 0x624a <_Z3maplllll>
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	9c 83       	std	Y+4, r25	; 0x04
    4350:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    4352:	2b 81       	ldd	r18, Y+3	; 0x03
    4354:	3c 81       	ldd	r19, Y+4	; 0x04
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	9a 81       	ldd	r25, Y+2	; 0x02
    435a:	b9 01       	movw	r22, r18
    435c:	14 d0       	rcall	.+40     	; 0x4386 <_ZN5Servo17writeMicrosecondsEi>
}
    435e:	00 00       	nop
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	1f 91       	pop	r17
    436e:	0f 91       	pop	r16
    4370:	ff 90       	pop	r15
    4372:	ef 90       	pop	r14
    4374:	df 90       	pop	r13
    4376:	cf 90       	pop	r12
    4378:	bf 90       	pop	r11
    437a:	af 90       	pop	r10
    437c:	9f 90       	pop	r9
    437e:	8f 90       	pop	r8
    4380:	7f 90       	pop	r7
    4382:	6f 90       	pop	r6
    4384:	08 95       	ret

00004386 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	00 d0       	rcall	.+0      	; 0x438c <_ZN5Servo17writeMicrosecondsEi+0x6>
    438c:	00 d0       	rcall	.+0      	; 0x438e <_ZN5Servo17writeMicrosecondsEi+0x8>
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
    4392:	9c 83       	std	Y+4, r25	; 0x04
    4394:	8b 83       	std	Y+3, r24	; 0x03
    4396:	7e 83       	std	Y+6, r23	; 0x06
    4398:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	fc 01       	movw	r30, r24
    43a0:	80 81       	ld	r24, Z
    43a2:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    43a4:	89 81       	ldd	r24, Y+1	; 0x01
    43a6:	80 33       	cpi	r24, 0x30	; 48
    43a8:	08 f0       	brcs	.+2      	; 0x43ac <_ZN5Servo17writeMicrosecondsEi+0x26>
    43aa:	99 c0       	rjmp	.+306    	; 0x44de <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    43ac:	8b 81       	ldd	r24, Y+3	; 0x03
    43ae:	9c 81       	ldd	r25, Y+4	; 0x04
    43b0:	fc 01       	movw	r30, r24
    43b2:	81 81       	ldd	r24, Z+1	; 0x01
    43b4:	08 2e       	mov	r0, r24
    43b6:	00 0c       	add	r0, r0
    43b8:	99 0b       	sbc	r25, r25
    43ba:	28 e8       	ldi	r18, 0x88	; 136
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	a9 01       	movw	r20, r18
    43c0:	48 1b       	sub	r20, r24
    43c2:	59 0b       	sbc	r21, r25
    43c4:	ca 01       	movw	r24, r20
    43c6:	9c 01       	movw	r18, r24
    43c8:	22 0f       	add	r18, r18
    43ca:	33 1f       	adc	r19, r19
    43cc:	22 0f       	add	r18, r18
    43ce:	33 1f       	adc	r19, r19
    43d0:	8d 81       	ldd	r24, Y+5	; 0x05
    43d2:	9e 81       	ldd	r25, Y+6	; 0x06
    43d4:	82 17       	cp	r24, r18
    43d6:	93 07       	cpc	r25, r19
    43d8:	a4 f4       	brge	.+40     	; 0x4402 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    43da:	8b 81       	ldd	r24, Y+3	; 0x03
    43dc:	9c 81       	ldd	r25, Y+4	; 0x04
    43de:	fc 01       	movw	r30, r24
    43e0:	81 81       	ldd	r24, Z+1	; 0x01
    43e2:	08 2e       	mov	r0, r24
    43e4:	00 0c       	add	r0, r0
    43e6:	99 0b       	sbc	r25, r25
    43e8:	28 e8       	ldi	r18, 0x88	; 136
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	a9 01       	movw	r20, r18
    43ee:	48 1b       	sub	r20, r24
    43f0:	59 0b       	sbc	r21, r25
    43f2:	ca 01       	movw	r24, r20
    43f4:	88 0f       	add	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	9e 83       	std	Y+6, r25	; 0x06
    43fe:	8d 83       	std	Y+5, r24	; 0x05
    4400:	2a c0       	rjmp	.+84     	; 0x4456 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    4402:	8b 81       	ldd	r24, Y+3	; 0x03
    4404:	9c 81       	ldd	r25, Y+4	; 0x04
    4406:	fc 01       	movw	r30, r24
    4408:	82 81       	ldd	r24, Z+2	; 0x02
    440a:	08 2e       	mov	r0, r24
    440c:	00 0c       	add	r0, r0
    440e:	99 0b       	sbc	r25, r25
    4410:	28 e5       	ldi	r18, 0x58	; 88
    4412:	32 e0       	ldi	r19, 0x02	; 2
    4414:	a9 01       	movw	r20, r18
    4416:	48 1b       	sub	r20, r24
    4418:	59 0b       	sbc	r21, r25
    441a:	ca 01       	movw	r24, r20
    441c:	9c 01       	movw	r18, r24
    441e:	22 0f       	add	r18, r18
    4420:	33 1f       	adc	r19, r19
    4422:	22 0f       	add	r18, r18
    4424:	33 1f       	adc	r19, r19
    4426:	8d 81       	ldd	r24, Y+5	; 0x05
    4428:	9e 81       	ldd	r25, Y+6	; 0x06
    442a:	28 17       	cp	r18, r24
    442c:	39 07       	cpc	r19, r25
    442e:	9c f4       	brge	.+38     	; 0x4456 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    4430:	8b 81       	ldd	r24, Y+3	; 0x03
    4432:	9c 81       	ldd	r25, Y+4	; 0x04
    4434:	fc 01       	movw	r30, r24
    4436:	82 81       	ldd	r24, Z+2	; 0x02
    4438:	08 2e       	mov	r0, r24
    443a:	00 0c       	add	r0, r0
    443c:	99 0b       	sbc	r25, r25
    443e:	28 e5       	ldi	r18, 0x58	; 88
    4440:	32 e0       	ldi	r19, 0x02	; 2
    4442:	a9 01       	movw	r20, r18
    4444:	48 1b       	sub	r20, r24
    4446:	59 0b       	sbc	r21, r25
    4448:	ca 01       	movw	r24, r20
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	88 0f       	add	r24, r24
    4450:	99 1f       	adc	r25, r25
    4452:	9e 83       	std	Y+6, r25	; 0x06
    4454:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    4456:	8d 81       	ldd	r24, Y+5	; 0x05
    4458:	9e 81       	ldd	r25, Y+6	; 0x06
    445a:	02 97       	sbiw	r24, 0x02	; 2
    445c:	9e 83       	std	Y+6, r25	; 0x06
    445e:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    4460:	8d 81       	ldd	r24, Y+5	; 0x05
    4462:	9e 81       	ldd	r25, Y+6	; 0x06
    4464:	09 2e       	mov	r0, r25
    4466:	00 0c       	add	r0, r0
    4468:	aa 0b       	sbc	r26, r26
    446a:	bb 0b       	sbc	r27, r27
    446c:	88 0f       	add	r24, r24
    446e:	99 1f       	adc	r25, r25
    4470:	aa 1f       	adc	r26, r26
    4472:	bb 1f       	adc	r27, r27
    4474:	88 0f       	add	r24, r24
    4476:	99 1f       	adc	r25, r25
    4478:	aa 1f       	adc	r26, r26
    447a:	bb 1f       	adc	r27, r27
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	aa 1f       	adc	r26, r26
    4482:	bb 1f       	adc	r27, r27
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	aa 1f       	adc	r26, r26
    448a:	bb 1f       	adc	r27, r27
    448c:	bb 23       	and	r27, r27
    448e:	1c f4       	brge	.+6      	; 0x4496 <_ZN5Servo17writeMicrosecondsEi+0x110>
    4490:	07 96       	adiw	r24, 0x07	; 7
    4492:	a1 1d       	adc	r26, r1
    4494:	b1 1d       	adc	r27, r1
    4496:	68 94       	set
    4498:	12 f8       	bld	r1, 2
    449a:	b5 95       	asr	r27
    449c:	a7 95       	ror	r26
    449e:	97 95       	ror	r25
    44a0:	87 95       	ror	r24
    44a2:	16 94       	lsr	r1
    44a4:	d1 f7       	brne	.-12     	; 0x449a <_ZN5Servo17writeMicrosecondsEi+0x114>
    44a6:	9e 83       	std	Y+6, r25	; 0x06
    44a8:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    44aa:	8f e5       	ldi	r24, 0x5F	; 95
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	fc 01       	movw	r30, r24
    44b0:	80 81       	ld	r24, Z
    44b2:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    44b4:	f8 94       	cli
    servos[channel].ticks = value;
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
    44b8:	28 2f       	mov	r18, r24
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	4d 81       	ldd	r20, Y+5	; 0x05
    44be:	5e 81       	ldd	r21, Y+6	; 0x06
    44c0:	c9 01       	movw	r24, r18
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	82 0f       	add	r24, r18
    44c8:	93 1f       	adc	r25, r19
    44ca:	88 56       	subi	r24, 0x68	; 104
    44cc:	9c 4f       	sbci	r25, 0xFC	; 252
    44ce:	fc 01       	movw	r30, r24
    44d0:	51 83       	std	Z+1, r21	; 0x01
    44d2:	40 83       	st	Z, r20
    SREG = oldSREG;
    44d4:	8f e5       	ldi	r24, 0x5F	; 95
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	2a 81       	ldd	r18, Y+2	; 0x02
    44da:	fc 01       	movw	r30, r24
    44dc:	20 83       	st	Z, r18
  }
}
    44de:	00 00       	nop
    44e0:	26 96       	adiw	r28, 0x06	; 6
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	f8 94       	cli
    44e6:	de bf       	out	0x3e, r29	; 62
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	cd bf       	out	0x3d, r28	; 61
    44ec:	df 91       	pop	r29
    44ee:	cf 91       	pop	r28
    44f0:	08 95       	ret

000044f2 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    44f2:	2f 92       	push	r2
    44f4:	3f 92       	push	r3
    44f6:	4f 92       	push	r4
    44f8:	5f 92       	push	r5
    44fa:	6f 92       	push	r6
    44fc:	7f 92       	push	r7
    44fe:	8f 92       	push	r8
    4500:	9f 92       	push	r9
    4502:	af 92       	push	r10
    4504:	bf 92       	push	r11
    4506:	cf 92       	push	r12
    4508:	df 92       	push	r13
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	0f 93       	push	r16
    4510:	1f 93       	push	r17
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	1f 92       	push	r1
    4518:	1f 92       	push	r1
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	9a 83       	std	Y+2, r25	; 0x02
    4520:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	9a 81       	ldd	r25, Y+2	; 0x02
    4526:	fc 01       	movw	r30, r24
    4528:	82 81       	ldd	r24, Z+2	; 0x02
    452a:	08 2e       	mov	r0, r24
    452c:	00 0c       	add	r0, r0
    452e:	99 0b       	sbc	r25, r25
    4530:	28 e5       	ldi	r18, 0x58	; 88
    4532:	32 e0       	ldi	r19, 0x02	; 2
    4534:	a9 01       	movw	r20, r18
    4536:	48 1b       	sub	r20, r24
    4538:	59 0b       	sbc	r21, r25
    453a:	ca 01       	movw	r24, r20
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	88 0f       	add	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	1c 01       	movw	r2, r24
    4546:	99 0f       	add	r25, r25
    4548:	44 08       	sbc	r4, r4
    454a:	55 08       	sbc	r5, r5
    454c:	89 81       	ldd	r24, Y+1	; 0x01
    454e:	9a 81       	ldd	r25, Y+2	; 0x02
    4550:	fc 01       	movw	r30, r24
    4552:	81 81       	ldd	r24, Z+1	; 0x01
    4554:	08 2e       	mov	r0, r24
    4556:	00 0c       	add	r0, r0
    4558:	99 0b       	sbc	r25, r25
    455a:	28 e8       	ldi	r18, 0x88	; 136
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	a9 01       	movw	r20, r18
    4560:	48 1b       	sub	r20, r24
    4562:	59 0b       	sbc	r21, r25
    4564:	ca 01       	movw	r24, r20
    4566:	88 0f       	add	r24, r24
    4568:	99 1f       	adc	r25, r25
    456a:	88 0f       	add	r24, r24
    456c:	99 1f       	adc	r25, r25
    456e:	3c 01       	movw	r6, r24
    4570:	99 0f       	add	r25, r25
    4572:	88 08       	sbc	r8, r8
    4574:	99 08       	sbc	r9, r9
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	9a 81       	ldd	r25, Y+2	; 0x02
    457a:	30 d0       	rcall	.+96     	; 0x45dc <_ZN5Servo16readMicrosecondsEv>
    457c:	01 96       	adiw	r24, 0x01	; 1
    457e:	09 2e       	mov	r0, r25
    4580:	00 0c       	add	r0, r0
    4582:	aa 0b       	sbc	r26, r26
    4584:	bb 0b       	sbc	r27, r27
    4586:	1f 92       	push	r1
    4588:	1f 92       	push	r1
    458a:	1f 92       	push	r1
    458c:	24 eb       	ldi	r18, 0xB4	; 180
    458e:	2f 93       	push	r18
    4590:	a1 2c       	mov	r10, r1
    4592:	b1 2c       	mov	r11, r1
    4594:	65 01       	movw	r12, r10
    4596:	82 01       	movw	r16, r4
    4598:	71 01       	movw	r14, r2
    459a:	a4 01       	movw	r20, r8
    459c:	93 01       	movw	r18, r6
    459e:	bc 01       	movw	r22, r24
    45a0:	cd 01       	movw	r24, r26
    45a2:	0e 94 25 31 	call	0x624a	; 0x624a <_Z3maplllll>
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	0f 90       	pop	r0
    45ac:	0f 90       	pop	r0
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
}
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	1f 91       	pop	r17
    45bc:	0f 91       	pop	r16
    45be:	ff 90       	pop	r15
    45c0:	ef 90       	pop	r14
    45c2:	df 90       	pop	r13
    45c4:	cf 90       	pop	r12
    45c6:	bf 90       	pop	r11
    45c8:	af 90       	pop	r10
    45ca:	9f 90       	pop	r9
    45cc:	8f 90       	pop	r8
    45ce:	7f 90       	pop	r7
    45d0:	6f 90       	pop	r6
    45d2:	5f 90       	pop	r5
    45d4:	4f 90       	pop	r4
    45d6:	3f 90       	pop	r3
    45d8:	2f 90       	pop	r2
    45da:	08 95       	ret

000045dc <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	00 d0       	rcall	.+0      	; 0x45e2 <_ZN5Servo16readMicrosecondsEv+0x6>
    45e2:	1f 92       	push	r1
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	9c 81       	ldd	r25, Y+4	; 0x04
    45f0:	fc 01       	movw	r30, r24
    45f2:	80 81       	ld	r24, Z
    45f4:	8f 3f       	cpi	r24, 0xFF	; 255
    45f6:	01 f1       	breq	.+64     	; 0x4638 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    45f8:	8b 81       	ldd	r24, Y+3	; 0x03
    45fa:	9c 81       	ldd	r25, Y+4	; 0x04
    45fc:	fc 01       	movw	r30, r24
    45fe:	80 81       	ld	r24, Z
    4600:	28 2f       	mov	r18, r24
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	c9 01       	movw	r24, r18
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	82 0f       	add	r24, r18
    460c:	93 1f       	adc	r25, r19
    460e:	88 56       	subi	r24, 0x68	; 104
    4610:	9c 4f       	sbci	r25, 0xFC	; 252
    4612:	fc 01       	movw	r30, r24
    4614:	80 81       	ld	r24, Z
    4616:	91 81       	ldd	r25, Z+1	; 0x01
    4618:	88 0f       	add	r24, r24
    461a:	99 1f       	adc	r25, r25
    461c:	88 0f       	add	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	88 0f       	add	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	92 95       	swap	r25
    4626:	82 95       	swap	r24
    4628:	8f 70       	andi	r24, 0x0F	; 15
    462a:	89 27       	eor	r24, r25
    462c:	9f 70       	andi	r25, 0x0F	; 15
    462e:	89 27       	eor	r24, r25
    4630:	02 96       	adiw	r24, 0x02	; 2
    4632:	9a 83       	std	Y+2, r25	; 0x02
    4634:	89 83       	std	Y+1, r24	; 0x01
    4636:	02 c0       	rjmp	.+4      	; 0x463c <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    4638:	1a 82       	std	Y+2, r1	; 0x02
    463a:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    463c:	89 81       	ldd	r24, Y+1	; 0x01
    463e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	08 95       	ret

0000464e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    464e:	cf 93       	push	r28
    4650:	df 93       	push	r29
    4652:	cd b7       	in	r28, 0x3d	; 61
    4654:	de b7       	in	r29, 0x3e	; 62
    4656:	2f 97       	sbiw	r28, 0x0f	; 15
    4658:	0f b6       	in	r0, 0x3f	; 63
    465a:	f8 94       	cli
    465c:	de bf       	out	0x3e, r29	; 62
    465e:	0f be       	out	0x3f, r0	; 63
    4660:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4662:	8f e5       	ldi	r24, 0x5F	; 95
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	fc 01       	movw	r30, r24
    4668:	80 81       	ld	r24, Z
    466a:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    466c:	f8 94       	cli
  if (!initialized) {
    466e:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN8SPIClass11initializedE>
    4672:	88 23       	and	r24, r24
    4674:	09 f0       	breq	.+2      	; 0x4678 <_ZN8SPIClass5beginEv+0x2a>
    4676:	5b c0       	rjmp	.+182    	; 0x472e <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4678:	89 ec       	ldi	r24, 0xC9	; 201
    467a:	91 e0       	ldi	r25, 0x01	; 1
    467c:	9b 83       	std	Y+3, r25	; 0x03
    467e:	8a 83       	std	Y+2, r24	; 0x02
    4680:	8a 81       	ldd	r24, Y+2	; 0x02
    4682:	9b 81       	ldd	r25, Y+3	; 0x03
    4684:	fc 01       	movw	r30, r24
    4686:	84 91       	lpm	r24, Z
    4688:	8c 83       	std	Y+4, r24	; 0x04
    468a:	8c 81       	ldd	r24, Y+4	; 0x04
    468c:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    468e:	83 e8       	ldi	r24, 0x83	; 131
    4690:	91 e0       	ldi	r25, 0x01	; 1
    4692:	9f 83       	std	Y+7, r25	; 0x07
    4694:	8e 83       	std	Y+6, r24	; 0x06
    4696:	8e 81       	ldd	r24, Y+6	; 0x06
    4698:	9f 81       	ldd	r25, Y+7	; 0x07
    469a:	fc 01       	movw	r30, r24
    469c:	84 91       	lpm	r24, Z
    469e:	88 87       	std	Y+8, r24	; 0x08
    46a0:	88 85       	ldd	r24, Y+8	; 0x08
    46a2:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    46a4:	8d 81       	ldd	r24, Y+5	; 0x05
    46a6:	88 2f       	mov	r24, r24
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	82 5f       	subi	r24, 0xF2	; 242
    46b0:	9d 4f       	sbci	r25, 0xFD	; 253
    46b2:	9b 87       	std	Y+11, r25	; 0x0b
    46b4:	8a 87       	std	Y+10, r24	; 0x0a
    46b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    46b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    46ba:	fc 01       	movw	r30, r24
    46bc:	25 91       	lpm	r18, Z+
    46be:	34 91       	lpm	r19, Z
    46c0:	cf 01       	movw	r24, r30
    46c2:	3d 87       	std	Y+13, r19	; 0x0d
    46c4:	2c 87       	std	Y+12, r18	; 0x0c
    46c6:	9b 87       	std	Y+11, r25	; 0x0b
    46c8:	8a 87       	std	Y+10, r24	; 0x0a
    46ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    46cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    46ce:	9f 87       	std	Y+15, r25	; 0x0f
    46d0:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    46d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    46d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    46d6:	fc 01       	movw	r30, r24
    46d8:	90 81       	ld	r25, Z
    46da:	89 85       	ldd	r24, Y+9	; 0x09
    46dc:	98 23       	and	r25, r24
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	99 23       	and	r25, r25
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <_ZN8SPIClass5beginEv+0x98>
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	88 23       	and	r24, r24
    46e8:	21 f0       	breq	.+8      	; 0x46f2 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	85 e3       	ldi	r24, 0x35	; 53
    46ee:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    46f2:	61 e0       	ldi	r22, 0x01	; 1
    46f4:	85 e3       	ldi	r24, 0x35	; 53
    46f6:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    46fa:	8c e4       	ldi	r24, 0x4C	; 76
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	2c e4       	ldi	r18, 0x4C	; 76
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	f9 01       	movw	r30, r18
    4704:	20 81       	ld	r18, Z
    4706:	20 61       	ori	r18, 0x10	; 16
    4708:	fc 01       	movw	r30, r24
    470a:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    470c:	8c e4       	ldi	r24, 0x4C	; 76
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	2c e4       	ldi	r18, 0x4C	; 76
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	f9 01       	movw	r30, r18
    4716:	20 81       	ld	r18, Z
    4718:	20 64       	ori	r18, 0x40	; 64
    471a:	fc 01       	movw	r30, r24
    471c:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    471e:	61 e0       	ldi	r22, 0x01	; 1
    4720:	84 e3       	ldi	r24, 0x34	; 52
    4722:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
    pinMode(MOSI, OUTPUT);
    4726:	61 e0       	ldi	r22, 0x01	; 1
    4728:	83 e3       	ldi	r24, 0x33	; 51
    472a:	0e 94 93 30 	call	0x6126	; 0x6126 <pinMode>
  }
  initialized++; // reference count
    472e:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN8SPIClass11initializedE>
    4732:	8f 5f       	subi	r24, 0xFF	; 255
    4734:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4738:	8f e5       	ldi	r24, 0x5F	; 95
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	29 81       	ldd	r18, Y+1	; 0x01
    473e:	fc 01       	movw	r30, r24
    4740:	20 83       	st	Z, r18
}
    4742:	00 00       	nop
    4744:	2f 96       	adiw	r28, 0x0f	; 15
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	f8 94       	cli
    474a:	de bf       	out	0x3e, r29	; 62
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	cd bf       	out	0x3d, r28	; 61
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	08 95       	ret

00004756 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4756:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <twi_state>
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <twi_sendStop>
    4760:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_inRepStart>
    4764:	61 e0       	ldi	r22, 0x01	; 1
    4766:	84 e1       	ldi	r24, 0x14	; 20
    4768:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	85 e1       	ldi	r24, 0x15	; 21
    4770:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    4774:	e9 eb       	ldi	r30, 0xB9	; 185
    4776:	f0 e0       	ldi	r31, 0x00	; 0
    4778:	80 81       	ld	r24, Z
    477a:	8e 7f       	andi	r24, 0xFE	; 254
    477c:	80 83       	st	Z, r24
    477e:	80 81       	ld	r24, Z
    4780:	8d 7f       	andi	r24, 0xFD	; 253
    4782:	80 83       	st	Z, r24
    4784:	88 e4       	ldi	r24, 0x48	; 72
    4786:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    478a:	85 e4       	ldi	r24, 0x45	; 69
    478c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4790:	08 95       	ret

00004792 <twi_disable>:
    4792:	ec eb       	ldi	r30, 0xBC	; 188
    4794:	f0 e0       	ldi	r31, 0x00	; 0
    4796:	80 81       	ld	r24, Z
    4798:	8a 7b       	andi	r24, 0xBA	; 186
    479a:	80 83       	st	Z, r24
    479c:	60 e0       	ldi	r22, 0x00	; 0
    479e:	84 e1       	ldi	r24, 0x14	; 20
    47a0:	0e 94 cf 30 	call	0x619e	; 0x619e <digitalWrite>
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	85 e1       	ldi	r24, 0x15	; 21
    47a8:	0c 94 cf 30 	jmp	0x619e	; 0x619e <digitalWrite>

000047ac <twi_transmit>:
    47ac:	40 91 52 04 	lds	r20, 0x0452	; 0x800452 <twi_txBufferLength>
    47b0:	26 2f       	mov	r18, r22
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	24 0f       	add	r18, r20
    47b6:	31 1d       	adc	r19, r1
    47b8:	21 32       	cpi	r18, 0x21	; 33
    47ba:	31 05       	cpc	r19, r1
    47bc:	dc f4       	brge	.+54     	; 0x47f4 <twi_transmit+0x48>
    47be:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <twi_state>
    47c2:	24 30       	cpi	r18, 0x04	; 4
    47c4:	c9 f4       	brne	.+50     	; 0x47f8 <twi_transmit+0x4c>
    47c6:	fc 01       	movw	r30, r24
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	86 17       	cp	r24, r22
    47ce:	58 f4       	brcc	.+22     	; 0x47e6 <twi_transmit+0x3a>
    47d0:	30 91 52 04 	lds	r19, 0x0452	; 0x800452 <twi_txBufferLength>
    47d4:	21 91       	ld	r18, Z+
    47d6:	dc 01       	movw	r26, r24
    47d8:	ac 5a       	subi	r26, 0xAC	; 172
    47da:	bb 4f       	sbci	r27, 0xFB	; 251
    47dc:	a3 0f       	add	r26, r19
    47de:	b1 1d       	adc	r27, r1
    47e0:	2c 93       	st	X, r18
    47e2:	01 96       	adiw	r24, 0x01	; 1
    47e4:	f3 cf       	rjmp	.-26     	; 0x47cc <twi_transmit+0x20>
    47e6:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_txBufferLength>
    47ea:	68 0f       	add	r22, r24
    47ec:	60 93 52 04 	sts	0x0452, r22	; 0x800452 <twi_txBufferLength>
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	08 95       	ret
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	08 95       	ret
    47f8:	82 e0       	ldi	r24, 0x02	; 2
    47fa:	08 95       	ret

000047fc <twi_attachSlaveRxEvent>:
    47fc:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <twi_onSlaveReceive+0x1>
    4800:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <twi_onSlaveReceive>
    4804:	08 95       	ret

00004806 <twi_attachSlaveTxEvent>:
    4806:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <twi_onSlaveTransmit+0x1>
    480a:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <twi_onSlaveTransmit>
    480e:	08 95       	ret

00004810 <twi_releaseBus>:
    4810:	85 ec       	ldi	r24, 0xC5	; 197
    4812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4816:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <twi_state>
    481a:	08 95       	ret

0000481c <twi_handleTimeout>:
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	91 e0       	ldi	r25, 0x01	; 1
    4822:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <twi_timed_out_flag>
    4826:	88 23       	and	r24, r24
    4828:	51 f0       	breq	.+20     	; 0x483e <twi_handleTimeout+0x22>
    482a:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    482e:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4832:	af df       	rcall	.-162    	; 0x4792 <twi_disable>
    4834:	90 df       	rcall	.-224    	; 0x4756 <twi_init>
    4836:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    483a:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    483e:	df 91       	pop	r29
    4840:	cf 91       	pop	r28
    4842:	08 95       	ret

00004844 <twi_readFrom>:
    4844:	4f 92       	push	r4
    4846:	5f 92       	push	r5
    4848:	6f 92       	push	r6
    484a:	7f 92       	push	r7
    484c:	8f 92       	push	r8
    484e:	9f 92       	push	r9
    4850:	af 92       	push	r10
    4852:	bf 92       	push	r11
    4854:	cf 92       	push	r12
    4856:	df 92       	push	r13
    4858:	ef 92       	push	r14
    485a:	ff 92       	push	r15
    485c:	0f 93       	push	r16
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	f8 2e       	mov	r15, r24
    4866:	16 2f       	mov	r17, r22
    4868:	07 2f       	mov	r16, r23
    486a:	c4 2f       	mov	r28, r20
    486c:	e2 2e       	mov	r14, r18
    486e:	41 32       	cpi	r20, 0x21	; 33
    4870:	08 f0       	brcs	.+2      	; 0x4874 <twi_readFrom+0x30>
    4872:	bc c0       	rjmp	.+376    	; 0x49ec <twi_readFrom+0x1a8>
    4874:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4878:	4b 01       	movw	r8, r22
    487a:	5c 01       	movw	r10, r24
    487c:	d0 91 a3 04 	lds	r29, 0x04A3	; 0x8004a3 <twi_state>
    4880:	dd 23       	and	r29, r29
    4882:	29 f1       	breq	.+74     	; 0x48ce <twi_readFrom+0x8a>
    4884:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    4888:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    488c:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4890:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4894:	89 2b       	or	r24, r25
    4896:	8a 2b       	or	r24, r26
    4898:	8b 2b       	or	r24, r27
    489a:	81 f3       	breq	.-32     	; 0x487c <twi_readFrom+0x38>
    489c:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    48a0:	40 90 9c 04 	lds	r4, 0x049C	; 0x80049c <twi_timeout_us>
    48a4:	50 90 9d 04 	lds	r5, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    48a8:	60 90 9e 04 	lds	r6, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    48ac:	70 90 9f 04 	lds	r7, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	88 19       	sub	r24, r8
    48b6:	99 09       	sbc	r25, r9
    48b8:	aa 09       	sbc	r26, r10
    48ba:	bb 09       	sbc	r27, r11
    48bc:	48 16       	cp	r4, r24
    48be:	59 06       	cpc	r5, r25
    48c0:	6a 06       	cpc	r6, r26
    48c2:	7b 06       	cpc	r7, r27
    48c4:	d8 f6       	brcc	.-74     	; 0x487c <twi_readFrom+0x38>
    48c6:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_do_reset_on_timeout>
    48ca:	a8 df       	rcall	.-176    	; 0x481c <twi_handleTimeout>
    48cc:	8f c0       	rjmp	.+286    	; 0x49ec <twi_readFrom+0x1a8>
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <twi_state>
    48d4:	e0 92 a1 04 	sts	0x04A1, r14	; 0x8004a1 <twi_sendStop>
    48d8:	9f ef       	ldi	r25, 0xFF	; 255
    48da:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <twi_error>
    48de:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <twi_masterBufferIndex>
    48e2:	9c 0f       	add	r25, r28
    48e4:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <twi_masterBufferLength>
    48e8:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <twi_slarw>
    48ec:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <twi_slarw>
    48f0:	8f 2d       	mov	r24, r15
    48f2:	88 0f       	add	r24, r24
    48f4:	89 2b       	or	r24, r25
    48f6:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <twi_slarw>
    48fa:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <twi_inRepStart>
    48fe:	81 30       	cpi	r24, 0x01	; 1
    4900:	89 f5       	brne	.+98     	; 0x4964 <twi_readFrom+0x120>
    4902:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_inRepStart>
    4906:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    490a:	6b 01       	movw	r12, r22
    490c:	7c 01       	movw	r14, r24
    490e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <twi_slarw>
    4912:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4916:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    491a:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    491e:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4922:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4926:	89 2b       	or	r24, r25
    4928:	8a 2b       	or	r24, r26
    492a:	8b 2b       	or	r24, r27
    492c:	a9 f0       	breq	.+42     	; 0x4958 <twi_readFrom+0x114>
    492e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4932:	80 90 9c 04 	lds	r8, 0x049C	; 0x80049c <twi_timeout_us>
    4936:	90 90 9d 04 	lds	r9, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    493a:	a0 90 9e 04 	lds	r10, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    493e:	b0 90 9f 04 	lds	r11, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	8c 19       	sub	r24, r12
    4948:	9d 09       	sbc	r25, r13
    494a:	ae 09       	sbc	r26, r14
    494c:	bf 09       	sbc	r27, r15
    494e:	88 16       	cp	r8, r24
    4950:	99 06       	cpc	r9, r25
    4952:	aa 06       	cpc	r10, r26
    4954:	bb 06       	cpc	r11, r27
    4956:	90 f1       	brcs	.+100    	; 0x49bc <twi_readFrom+0x178>
    4958:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    495c:	83 fd       	sbrc	r24, 3
    495e:	d7 cf       	rjmp	.-82     	; 0x490e <twi_readFrom+0xca>
    4960:	85 ec       	ldi	r24, 0xC5	; 197
    4962:	01 c0       	rjmp	.+2      	; 0x4966 <twi_readFrom+0x122>
    4964:	85 ee       	ldi	r24, 0xE5	; 229
    4966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    496a:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    496e:	6b 01       	movw	r12, r22
    4970:	7c 01       	movw	r14, r24
    4972:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <twi_state>
    4976:	81 30       	cpi	r24, 0x01	; 1
    4978:	29 f5       	brne	.+74     	; 0x49c4 <twi_readFrom+0x180>
    497a:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    497e:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4982:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4986:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    498a:	89 2b       	or	r24, r25
    498c:	8a 2b       	or	r24, r26
    498e:	8b 2b       	or	r24, r27
    4990:	81 f3       	breq	.-32     	; 0x4972 <twi_readFrom+0x12e>
    4992:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4996:	80 90 9c 04 	lds	r8, 0x049C	; 0x80049c <twi_timeout_us>
    499a:	90 90 9d 04 	lds	r9, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    499e:	a0 90 9e 04 	lds	r10, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    49a2:	b0 90 9f 04 	lds	r11, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    49a6:	dc 01       	movw	r26, r24
    49a8:	cb 01       	movw	r24, r22
    49aa:	8c 19       	sub	r24, r12
    49ac:	9d 09       	sbc	r25, r13
    49ae:	ae 09       	sbc	r26, r14
    49b0:	bf 09       	sbc	r27, r15
    49b2:	88 16       	cp	r8, r24
    49b4:	99 06       	cpc	r9, r25
    49b6:	aa 06       	cpc	r10, r26
    49b8:	bb 06       	cpc	r11, r27
    49ba:	d8 f6       	brcc	.-74     	; 0x4972 <twi_readFrom+0x12e>
    49bc:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_do_reset_on_timeout>
    49c0:	2d df       	rcall	.-422    	; 0x481c <twi_handleTimeout>
    49c2:	15 c0       	rjmp	.+42     	; 0x49ee <twi_readFrom+0x1aa>
    49c4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <twi_masterBufferIndex>
    49c8:	8c 17       	cp	r24, r28
    49ca:	10 f4       	brcc	.+4      	; 0x49d0 <twi_readFrom+0x18c>
    49cc:	c0 91 75 04 	lds	r28, 0x0475	; 0x800475 <twi_masterBufferIndex>
    49d0:	a6 e7       	ldi	r26, 0x76	; 118
    49d2:	b4 e0       	ldi	r27, 0x04	; 4
    49d4:	91 2f       	mov	r25, r17
    49d6:	e1 2f       	mov	r30, r17
    49d8:	f0 2f       	mov	r31, r16
    49da:	8e 2f       	mov	r24, r30
    49dc:	89 1b       	sub	r24, r25
    49de:	8c 17       	cp	r24, r28
    49e0:	18 f4       	brcc	.+6      	; 0x49e8 <twi_readFrom+0x1a4>
    49e2:	8d 91       	ld	r24, X+
    49e4:	81 93       	st	Z+, r24
    49e6:	f9 cf       	rjmp	.-14     	; 0x49da <twi_readFrom+0x196>
    49e8:	dc 2f       	mov	r29, r28
    49ea:	01 c0       	rjmp	.+2      	; 0x49ee <twi_readFrom+0x1aa>
    49ec:	d0 e0       	ldi	r29, 0x00	; 0
    49ee:	8d 2f       	mov	r24, r29
    49f0:	df 91       	pop	r29
    49f2:	cf 91       	pop	r28
    49f4:	1f 91       	pop	r17
    49f6:	0f 91       	pop	r16
    49f8:	ff 90       	pop	r15
    49fa:	ef 90       	pop	r14
    49fc:	df 90       	pop	r13
    49fe:	cf 90       	pop	r12
    4a00:	bf 90       	pop	r11
    4a02:	af 90       	pop	r10
    4a04:	9f 90       	pop	r9
    4a06:	8f 90       	pop	r8
    4a08:	7f 90       	pop	r7
    4a0a:	6f 90       	pop	r6
    4a0c:	5f 90       	pop	r5
    4a0e:	4f 90       	pop	r4
    4a10:	08 95       	ret

00004a12 <twi_writeTo>:
    4a12:	4f 92       	push	r4
    4a14:	5f 92       	push	r5
    4a16:	6f 92       	push	r6
    4a18:	7f 92       	push	r7
    4a1a:	8f 92       	push	r8
    4a1c:	9f 92       	push	r9
    4a1e:	af 92       	push	r10
    4a20:	bf 92       	push	r11
    4a22:	cf 92       	push	r12
    4a24:	df 92       	push	r13
    4a26:	ef 92       	push	r14
    4a28:	ff 92       	push	r15
    4a2a:	0f 93       	push	r16
    4a2c:	1f 93       	push	r17
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29
    4a32:	41 32       	cpi	r20, 0x21	; 33
    4a34:	08 f0       	brcs	.+2      	; 0x4a38 <twi_writeTo+0x26>
    4a36:	c5 c0       	rjmp	.+394    	; 0x4bc2 <twi_writeTo+0x1b0>
    4a38:	12 2f       	mov	r17, r18
    4a3a:	f4 2e       	mov	r15, r20
    4a3c:	d7 2e       	mov	r13, r23
    4a3e:	e6 2e       	mov	r14, r22
    4a40:	d8 2f       	mov	r29, r24
    4a42:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4a46:	4b 01       	movw	r8, r22
    4a48:	5c 01       	movw	r10, r24
    4a4a:	c0 91 a3 04 	lds	r28, 0x04A3	; 0x8004a3 <twi_state>
    4a4e:	cc 23       	and	r28, r28
    4a50:	11 f1       	breq	.+68     	; 0x4a96 <twi_writeTo+0x84>
    4a52:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    4a56:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4a5a:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4a5e:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4a62:	89 2b       	or	r24, r25
    4a64:	8a 2b       	or	r24, r26
    4a66:	8b 2b       	or	r24, r27
    4a68:	81 f3       	breq	.-32     	; 0x4a4a <twi_writeTo+0x38>
    4a6a:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4a6e:	40 90 9c 04 	lds	r4, 0x049C	; 0x80049c <twi_timeout_us>
    4a72:	50 90 9d 04 	lds	r5, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4a76:	60 90 9e 04 	lds	r6, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4a7a:	70 90 9f 04 	lds	r7, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	88 19       	sub	r24, r8
    4a84:	99 09       	sbc	r25, r9
    4a86:	aa 09       	sbc	r26, r10
    4a88:	bb 09       	sbc	r27, r11
    4a8a:	48 16       	cp	r4, r24
    4a8c:	59 06       	cpc	r5, r25
    4a8e:	6a 06       	cpc	r6, r26
    4a90:	7b 06       	cpc	r7, r27
    4a92:	d8 f6       	brcc	.-74     	; 0x4a4a <twi_writeTo+0x38>
    4a94:	83 c0       	rjmp	.+262    	; 0x4b9c <twi_writeTo+0x18a>
    4a96:	82 e0       	ldi	r24, 0x02	; 2
    4a98:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <twi_state>
    4a9c:	00 93 a1 04 	sts	0x04A1, r16	; 0x8004a1 <twi_sendStop>
    4aa0:	8f ef       	ldi	r24, 0xFF	; 255
    4aa2:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
    4aa6:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <twi_masterBufferIndex>
    4aaa:	f0 92 74 04 	sts	0x0474, r15	; 0x800474 <twi_masterBufferLength>
    4aae:	9e 2d       	mov	r25, r14
    4ab0:	a6 e7       	ldi	r26, 0x76	; 118
    4ab2:	b4 e0       	ldi	r27, 0x04	; 4
    4ab4:	ee 2d       	mov	r30, r14
    4ab6:	fd 2d       	mov	r31, r13
    4ab8:	8e 2f       	mov	r24, r30
    4aba:	89 1b       	sub	r24, r25
    4abc:	8f 15       	cp	r24, r15
    4abe:	18 f4       	brcc	.+6      	; 0x4ac6 <twi_writeTo+0xb4>
    4ac0:	81 91       	ld	r24, Z+
    4ac2:	8d 93       	st	X+, r24
    4ac4:	f9 cf       	rjmp	.-14     	; 0x4ab8 <twi_writeTo+0xa6>
    4ac6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <twi_slarw>
    4aca:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <twi_slarw>
    4ace:	dd 0f       	add	r29, r29
    4ad0:	d9 2b       	or	r29, r25
    4ad2:	d0 93 a2 04 	sts	0x04A2, r29	; 0x8004a2 <twi_slarw>
    4ad6:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <twi_inRepStart>
    4ada:	81 30       	cpi	r24, 0x01	; 1
    4adc:	89 f5       	brne	.+98     	; 0x4b40 <twi_writeTo+0x12e>
    4ade:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_inRepStart>
    4ae2:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4ae6:	6b 01       	movw	r12, r22
    4ae8:	7c 01       	movw	r14, r24
    4aea:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <twi_slarw>
    4aee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4af2:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    4af6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4afa:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4afe:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4b02:	89 2b       	or	r24, r25
    4b04:	8a 2b       	or	r24, r26
    4b06:	8b 2b       	or	r24, r27
    4b08:	a9 f0       	breq	.+42     	; 0x4b34 <twi_writeTo+0x122>
    4b0a:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4b0e:	80 90 9c 04 	lds	r8, 0x049C	; 0x80049c <twi_timeout_us>
    4b12:	90 90 9d 04 	lds	r9, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4b16:	a0 90 9e 04 	lds	r10, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4b1a:	b0 90 9f 04 	lds	r11, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	8c 19       	sub	r24, r12
    4b24:	9d 09       	sbc	r25, r13
    4b26:	ae 09       	sbc	r26, r14
    4b28:	bf 09       	sbc	r27, r15
    4b2a:	88 16       	cp	r8, r24
    4b2c:	99 06       	cpc	r9, r25
    4b2e:	aa 06       	cpc	r10, r26
    4b30:	bb 06       	cpc	r11, r27
    4b32:	a0 f1       	brcs	.+104    	; 0x4b9c <twi_writeTo+0x18a>
    4b34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b38:	83 fd       	sbrc	r24, 3
    4b3a:	d7 cf       	rjmp	.-82     	; 0x4aea <twi_writeTo+0xd8>
    4b3c:	85 ec       	ldi	r24, 0xC5	; 197
    4b3e:	01 c0       	rjmp	.+2      	; 0x4b42 <twi_writeTo+0x130>
    4b40:	85 ee       	ldi	r24, 0xE5	; 229
    4b42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b46:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4b4a:	6b 01       	movw	r12, r22
    4b4c:	7c 01       	movw	r14, r24
    4b4e:	11 23       	and	r17, r17
    4b50:	51 f1       	breq	.+84     	; 0x4ba6 <twi_writeTo+0x194>
    4b52:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <twi_state>
    4b56:	82 30       	cpi	r24, 0x02	; 2
    4b58:	31 f5       	brne	.+76     	; 0x4ba6 <twi_writeTo+0x194>
    4b5a:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    4b5e:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4b62:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4b66:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4b6a:	89 2b       	or	r24, r25
    4b6c:	8a 2b       	or	r24, r26
    4b6e:	8b 2b       	or	r24, r27
    4b70:	71 f3       	breq	.-36     	; 0x4b4e <twi_writeTo+0x13c>
    4b72:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <micros>
    4b76:	80 90 9c 04 	lds	r8, 0x049C	; 0x80049c <twi_timeout_us>
    4b7a:	90 90 9d 04 	lds	r9, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4b7e:	a0 90 9e 04 	lds	r10, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4b82:	b0 90 9f 04 	lds	r11, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	8c 19       	sub	r24, r12
    4b8c:	9d 09       	sbc	r25, r13
    4b8e:	ae 09       	sbc	r26, r14
    4b90:	bf 09       	sbc	r27, r15
    4b92:	88 16       	cp	r8, r24
    4b94:	99 06       	cpc	r9, r25
    4b96:	aa 06       	cpc	r10, r26
    4b98:	bb 06       	cpc	r11, r27
    4b9a:	c8 f6       	brcc	.-78     	; 0x4b4e <twi_writeTo+0x13c>
    4b9c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_do_reset_on_timeout>
    4ba0:	3d de       	rcall	.-902    	; 0x481c <twi_handleTimeout>
    4ba2:	c5 e0       	ldi	r28, 0x05	; 5
    4ba4:	13 c0       	rjmp	.+38     	; 0x4bcc <twi_writeTo+0x1ba>
    4ba6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
    4baa:	8f 3f       	cpi	r24, 0xFF	; 255
    4bac:	79 f0       	breq	.+30     	; 0x4bcc <twi_writeTo+0x1ba>
    4bae:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
    4bb2:	80 32       	cpi	r24, 0x20	; 32
    4bb4:	41 f0       	breq	.+16     	; 0x4bc6 <twi_writeTo+0x1b4>
    4bb6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_error>
    4bba:	80 33       	cpi	r24, 0x30	; 48
    4bbc:	31 f0       	breq	.+12     	; 0x4bca <twi_writeTo+0x1b8>
    4bbe:	c4 e0       	ldi	r28, 0x04	; 4
    4bc0:	05 c0       	rjmp	.+10     	; 0x4bcc <twi_writeTo+0x1ba>
    4bc2:	c1 e0       	ldi	r28, 0x01	; 1
    4bc4:	03 c0       	rjmp	.+6      	; 0x4bcc <twi_writeTo+0x1ba>
    4bc6:	c2 e0       	ldi	r28, 0x02	; 2
    4bc8:	01 c0       	rjmp	.+2      	; 0x4bcc <twi_writeTo+0x1ba>
    4bca:	c3 e0       	ldi	r28, 0x03	; 3
    4bcc:	8c 2f       	mov	r24, r28
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	1f 91       	pop	r17
    4bd4:	0f 91       	pop	r16
    4bd6:	ff 90       	pop	r15
    4bd8:	ef 90       	pop	r14
    4bda:	df 90       	pop	r13
    4bdc:	cf 90       	pop	r12
    4bde:	bf 90       	pop	r11
    4be0:	af 90       	pop	r10
    4be2:	9f 90       	pop	r9
    4be4:	8f 90       	pop	r8
    4be6:	7f 90       	pop	r7
    4be8:	6f 90       	pop	r6
    4bea:	5f 90       	pop	r5
    4bec:	4f 90       	pop	r4
    4bee:	08 95       	ret

00004bf0 <twi_stop>:
    4bf0:	85 ed       	ldi	r24, 0xD5	; 213
    4bf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bf6:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_timeout_us>
    4bfa:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4bfe:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4c02:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4c06:	07 96       	adiw	r24, 0x07	; 7
    4c08:	a1 1d       	adc	r26, r1
    4c0a:	b1 1d       	adc	r27, r1
    4c0c:	23 e0       	ldi	r18, 0x03	; 3
    4c0e:	b6 95       	lsr	r27
    4c10:	a7 95       	ror	r26
    4c12:	97 95       	ror	r25
    4c14:	87 95       	ror	r24
    4c16:	2a 95       	dec	r18
    4c18:	d1 f7       	brne	.-12     	; 0x4c0e <twi_stop+0x1e>
    4c1a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c1e:	24 ff       	sbrs	r18, 4
    4c20:	1b c0       	rjmp	.+54     	; 0x4c58 <twi_stop+0x68>
    4c22:	40 91 9c 04 	lds	r20, 0x049C	; 0x80049c <twi_timeout_us>
    4c26:	50 91 9d 04 	lds	r21, 0x049D	; 0x80049d <twi_timeout_us+0x1>
    4c2a:	60 91 9e 04 	lds	r22, 0x049E	; 0x80049e <twi_timeout_us+0x2>
    4c2e:	70 91 9f 04 	lds	r23, 0x049F	; 0x80049f <twi_timeout_us+0x3>
    4c32:	45 2b       	or	r20, r21
    4c34:	46 2b       	or	r20, r22
    4c36:	47 2b       	or	r20, r23
    4c38:	81 f3       	breq	.-32     	; 0x4c1a <twi_stop+0x2a>
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	a1 05       	cpc	r26, r1
    4c3e:	b1 05       	cpc	r27, r1
    4c40:	41 f0       	breq	.+16     	; 0x4c52 <twi_stop+0x62>
    4c42:	25 e3       	ldi	r18, 0x35	; 53
    4c44:	2a 95       	dec	r18
    4c46:	f1 f7       	brne	.-4      	; 0x4c44 <twi_stop+0x54>
    4c48:	00 00       	nop
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	a1 09       	sbc	r26, r1
    4c4e:	b1 09       	sbc	r27, r1
    4c50:	e4 cf       	rjmp	.-56     	; 0x4c1a <twi_stop+0x2a>
    4c52:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_do_reset_on_timeout>
    4c56:	e2 cd       	rjmp	.-1084   	; 0x481c <twi_handleTimeout>
    4c58:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <twi_state>
    4c5c:	08 95       	ret

00004c5e <__vector_39>:

ISR(TWI_vect)
{
    4c5e:	1f 92       	push	r1
    4c60:	0f 92       	push	r0
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	0f 92       	push	r0
    4c66:	11 24       	eor	r1, r1
    4c68:	0b b6       	in	r0, 0x3b	; 59
    4c6a:	0f 92       	push	r0
    4c6c:	2f 93       	push	r18
    4c6e:	3f 93       	push	r19
    4c70:	4f 93       	push	r20
    4c72:	5f 93       	push	r21
    4c74:	6f 93       	push	r22
    4c76:	7f 93       	push	r23
    4c78:	8f 93       	push	r24
    4c7a:	9f 93       	push	r25
    4c7c:	af 93       	push	r26
    4c7e:	bf 93       	push	r27
    4c80:	ef 93       	push	r30
    4c82:	ff 93       	push	r31
  switch(TW_STATUS){
    4c84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4c88:	88 7f       	andi	r24, 0xF8	; 248
    4c8a:	80 36       	cpi	r24, 0x60	; 96
    4c8c:	09 f4       	brne	.+2      	; 0x4c90 <__vector_39+0x32>
    4c8e:	9d c0       	rjmp	.+314    	; 0x4dca <__vector_39+0x16c>
    4c90:	70 f5       	brcc	.+92     	; 0x4cee <__vector_39+0x90>
    4c92:	88 32       	cpi	r24, 0x28	; 40
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <__vector_39+0x3a>
    4c96:	5c c0       	rjmp	.+184    	; 0x4d50 <__vector_39+0xf2>
    4c98:	90 f4       	brcc	.+36     	; 0x4cbe <__vector_39+0x60>
    4c9a:	80 31       	cpi	r24, 0x10	; 16
    4c9c:	09 f4       	brne	.+2      	; 0x4ca0 <__vector_39+0x42>
    4c9e:	55 c0       	rjmp	.+170    	; 0x4d4a <__vector_39+0xec>
    4ca0:	38 f4       	brcc	.+14     	; 0x4cb0 <__vector_39+0x52>
    4ca2:	88 23       	and	r24, r24
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <__vector_39+0x4a>
    4ca6:	f3 c0       	rjmp	.+486    	; 0x4e8e <__vector_39+0x230>
    4ca8:	88 30       	cpi	r24, 0x08	; 8
    4caa:	09 f4       	brne	.+2      	; 0x4cae <__vector_39+0x50>
    4cac:	4e c0       	rjmp	.+156    	; 0x4d4a <__vector_39+0xec>
    4cae:	f2 c0       	rjmp	.+484    	; 0x4e94 <__vector_39+0x236>
    4cb0:	88 31       	cpi	r24, 0x18	; 24
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <__vector_39+0x58>
    4cb4:	4d c0       	rjmp	.+154    	; 0x4d50 <__vector_39+0xf2>
    4cb6:	80 32       	cpi	r24, 0x20	; 32
    4cb8:	09 f4       	brne	.+2      	; 0x4cbc <__vector_39+0x5e>
    4cba:	5e c0       	rjmp	.+188    	; 0x4d78 <__vector_39+0x11a>
    4cbc:	eb c0       	rjmp	.+470    	; 0x4e94 <__vector_39+0x236>
    4cbe:	80 34       	cpi	r24, 0x40	; 64
    4cc0:	09 f4       	brne	.+2      	; 0x4cc4 <__vector_39+0x66>
    4cc2:	69 c0       	rjmp	.+210    	; 0x4d96 <__vector_39+0x138>
    4cc4:	50 f4       	brcc	.+20     	; 0x4cda <__vector_39+0x7c>
    4cc6:	80 33       	cpi	r24, 0x30	; 48
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <__vector_39+0x6e>
    4cca:	56 c0       	rjmp	.+172    	; 0x4d78 <__vector_39+0x11a>
    4ccc:	88 33       	cpi	r24, 0x38	; 56
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <__vector_39+0x74>
    4cd0:	e1 c0       	rjmp	.+450    	; 0x4e94 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4cd2:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
      twi_releaseBus();
    4cd6:	9c dd       	rcall	.-1224   	; 0x4810 <twi_releaseBus>
      break;
    4cd8:	dd c0       	rjmp	.+442    	; 0x4e94 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4cda:	80 35       	cpi	r24, 0x50	; 80
    4cdc:	09 f4       	brne	.+2      	; 0x4ce0 <__vector_39+0x82>
    4cde:	4f c0       	rjmp	.+158    	; 0x4d7e <__vector_39+0x120>
    4ce0:	88 35       	cpi	r24, 0x58	; 88
    4ce2:	09 f4       	brne	.+2      	; 0x4ce6 <__vector_39+0x88>
    4ce4:	5d c0       	rjmp	.+186    	; 0x4da0 <__vector_39+0x142>
    4ce6:	88 34       	cpi	r24, 0x48	; 72
    4ce8:	09 f0       	breq	.+2      	; 0x4cec <__vector_39+0x8e>
    4cea:	d4 c0       	rjmp	.+424    	; 0x4e94 <__vector_39+0x236>
    4cec:	d2 c0       	rjmp	.+420    	; 0x4e92 <__vector_39+0x234>
    4cee:	88 39       	cpi	r24, 0x98	; 152
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <__vector_39+0x96>
    4cf2:	c3 c0       	rjmp	.+390    	; 0x4e7a <__vector_39+0x21c>
    4cf4:	a8 f4       	brcc	.+42     	; 0x4d20 <__vector_39+0xc2>
    4cf6:	88 37       	cpi	r24, 0x78	; 120
    4cf8:	09 f4       	brne	.+2      	; 0x4cfc <__vector_39+0x9e>
    4cfa:	67 c0       	rjmp	.+206    	; 0x4dca <__vector_39+0x16c>
    4cfc:	38 f4       	brcc	.+14     	; 0x4d0c <__vector_39+0xae>
    4cfe:	88 36       	cpi	r24, 0x68	; 104
    4d00:	09 f4       	brne	.+2      	; 0x4d04 <__vector_39+0xa6>
    4d02:	63 c0       	rjmp	.+198    	; 0x4dca <__vector_39+0x16c>
    4d04:	80 37       	cpi	r24, 0x70	; 112
    4d06:	09 f4       	brne	.+2      	; 0x4d0a <__vector_39+0xac>
    4d08:	60 c0       	rjmp	.+192    	; 0x4dca <__vector_39+0x16c>
    4d0a:	c4 c0       	rjmp	.+392    	; 0x4e94 <__vector_39+0x236>
    4d0c:	88 38       	cpi	r24, 0x88	; 136
    4d0e:	09 f4       	brne	.+2      	; 0x4d12 <__vector_39+0xb4>
    4d10:	b4 c0       	rjmp	.+360    	; 0x4e7a <__vector_39+0x21c>
    4d12:	80 39       	cpi	r24, 0x90	; 144
    4d14:	09 f4       	brne	.+2      	; 0x4d18 <__vector_39+0xba>
    4d16:	5f c0       	rjmp	.+190    	; 0x4dd6 <__vector_39+0x178>
    4d18:	80 38       	cpi	r24, 0x80	; 128
    4d1a:	09 f0       	breq	.+2      	; 0x4d1e <__vector_39+0xc0>
    4d1c:	bb c0       	rjmp	.+374    	; 0x4e94 <__vector_39+0x236>
    4d1e:	5b c0       	rjmp	.+182    	; 0x4dd6 <__vector_39+0x178>
    4d20:	80 3b       	cpi	r24, 0xB0	; 176
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <__vector_39+0xc8>
    4d24:	82 c0       	rjmp	.+260    	; 0x4e2a <__vector_39+0x1cc>
    4d26:	38 f4       	brcc	.+14     	; 0x4d36 <__vector_39+0xd8>
    4d28:	80 3a       	cpi	r24, 0xA0	; 160
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <__vector_39+0xd0>
    4d2c:	66 c0       	rjmp	.+204    	; 0x4dfa <__vector_39+0x19c>
    4d2e:	88 3a       	cpi	r24, 0xA8	; 168
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <__vector_39+0xd6>
    4d32:	7b c0       	rjmp	.+246    	; 0x4e2a <__vector_39+0x1cc>
    4d34:	af c0       	rjmp	.+350    	; 0x4e94 <__vector_39+0x236>
    4d36:	80 3c       	cpi	r24, 0xC0	; 192
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <__vector_39+0xde>
    4d3a:	a3 c0       	rjmp	.+326    	; 0x4e82 <__vector_39+0x224>
    4d3c:	88 3c       	cpi	r24, 0xC8	; 200
    4d3e:	09 f4       	brne	.+2      	; 0x4d42 <__vector_39+0xe4>
    4d40:	a0 c0       	rjmp	.+320    	; 0x4e82 <__vector_39+0x224>
    4d42:	88 3b       	cpi	r24, 0xB8	; 184
    4d44:	09 f4       	brne	.+2      	; 0x4d48 <__vector_39+0xea>
    4d46:	86 c0       	rjmp	.+268    	; 0x4e54 <__vector_39+0x1f6>
    4d48:	a5 c0       	rjmp	.+330    	; 0x4e94 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4d4a:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <twi_slarw>
    4d4e:	10 c0       	rjmp	.+32     	; 0x4d70 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4d50:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <twi_masterBufferIndex>
    4d54:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <twi_masterBufferLength>
    4d58:	98 17       	cp	r25, r24
    4d5a:	70 f5       	brcc	.+92     	; 0x4db8 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4d5c:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <twi_masterBufferIndex>
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	8e 0f       	add	r24, r30
    4d64:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <twi_masterBufferIndex>
    4d68:	f0 e0       	ldi	r31, 0x00	; 0
    4d6a:	ea 58       	subi	r30, 0x8A	; 138
    4d6c:	fb 4f       	sbci	r31, 0xFB	; 251
    4d6e:	80 81       	ld	r24, Z
    4d70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4d74:	85 ec       	ldi	r24, 0xC5	; 197
    4d76:	82 c0       	rjmp	.+260    	; 0x4e7c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4d78:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_error>
    4d7c:	8a c0       	rjmp	.+276    	; 0x4e92 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4d7e:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <twi_masterBufferIndex>
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	8e 0f       	add	r24, r30
    4d86:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <twi_masterBufferIndex>
    4d8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d8e:	f0 e0       	ldi	r31, 0x00	; 0
    4d90:	ea 58       	subi	r30, 0x8A	; 138
    4d92:	fb 4f       	sbci	r31, 0xFB	; 251
    4d94:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4d96:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <twi_masterBufferIndex>
    4d9a:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <twi_masterBufferLength>
    4d9e:	6a c0       	rjmp	.+212    	; 0x4e74 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4da0:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <twi_masterBufferIndex>
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	8e 0f       	add	r24, r30
    4da8:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <twi_masterBufferIndex>
    4dac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4db0:	f0 e0       	ldi	r31, 0x00	; 0
    4db2:	ea 58       	subi	r30, 0x8A	; 138
    4db4:	fb 4f       	sbci	r31, 0xFB	; 251
    4db6:	80 83       	st	Z, r24
      if (twi_sendStop){
    4db8:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <twi_sendStop>
    4dbc:	81 11       	cpse	r24, r1
    4dbe:	69 c0       	rjmp	.+210    	; 0x4e92 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4dc6:	84 ea       	ldi	r24, 0xA4	; 164
    4dc8:	5d c0       	rjmp	.+186    	; 0x4e84 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4dca:	83 e0       	ldi	r24, 0x03	; 3
    4dcc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4dd0:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <twi_rxBufferIndex>
    4dd4:	cf cf       	rjmp	.-98     	; 0x4d74 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4dd6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_rxBufferIndex>
    4dda:	80 32       	cpi	r24, 0x20	; 32
    4ddc:	08 f0       	brcs	.+2      	; 0x4de0 <__vector_39+0x182>
    4dde:	4d c0       	rjmp	.+154    	; 0x4e7a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4de0:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <twi_rxBufferIndex>
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	8e 0f       	add	r24, r30
    4de8:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <twi_rxBufferIndex>
    4dec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	ee 5c       	subi	r30, 0xCE	; 206
    4df4:	fb 4f       	sbci	r31, 0xFB	; 251
    4df6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4df8:	bd cf       	rjmp	.-134    	; 0x4d74 <__vector_39+0x116>
    4dfa:	0a dd       	rcall	.-1516   	; 0x4810 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4dfc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_rxBufferIndex>
    4e00:	80 32       	cpi	r24, 0x20	; 32
    4e02:	30 f4       	brcc	.+12     	; 0x4e10 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4e04:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <twi_rxBufferIndex>
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	ee 5c       	subi	r30, 0xCE	; 206
    4e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    4e0e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4e10:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <twi_rxBufferIndex>
    4e14:	70 e0       	ldi	r23, 0x00	; 0
    4e16:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <twi_onSlaveReceive>
    4e1a:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <twi_onSlaveReceive+0x1>
    4e1e:	82 e3       	ldi	r24, 0x32	; 50
    4e20:	94 e0       	ldi	r25, 0x04	; 4
    4e22:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4e24:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <twi_rxBufferIndex>
      break;
    4e28:	35 c0       	rjmp	.+106    	; 0x4e94 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4e2a:	84 e0       	ldi	r24, 0x04	; 4
    4e2c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4e30:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4e34:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4e38:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <twi_onSlaveTransmit>
    4e3c:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <twi_onSlaveTransmit+0x1>
    4e40:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4e42:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_txBufferLength>
    4e46:	81 11       	cpse	r24, r1
    4e48:	05 c0       	rjmp	.+10     	; 0x4e54 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4e50:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4e54:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <twi_txBufferIndex>
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	8e 0f       	add	r24, r30
    4e5c:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <twi_txBufferIndex>
    4e60:	f0 e0       	ldi	r31, 0x00	; 0
    4e62:	ec 5a       	subi	r30, 0xAC	; 172
    4e64:	fb 4f       	sbci	r31, 0xFB	; 251
    4e66:	80 81       	ld	r24, Z
    4e68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4e6c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_txBufferIndex>
    4e70:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_txBufferLength>
    4e74:	98 17       	cp	r25, r24
    4e76:	08 f4       	brcc	.+2      	; 0x4e7a <__vector_39+0x21c>
    4e78:	7d cf       	rjmp	.-262    	; 0x4d74 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4e7a:	85 e8       	ldi	r24, 0x85	; 133
    4e7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e80:	09 c0       	rjmp	.+18     	; 0x4e94 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4e82:	85 ec       	ldi	r24, 0xC5	; 197
    4e84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4e88:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <twi_state>
      break;
    4e8c:	03 c0       	rjmp	.+6      	; 0x4e94 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4e8e:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_error>
      twi_stop();
    4e92:	ae de       	rcall	.-676    	; 0x4bf0 <twi_stop>
      break;
  }
}
    4e94:	ff 91       	pop	r31
    4e96:	ef 91       	pop	r30
    4e98:	bf 91       	pop	r27
    4e9a:	af 91       	pop	r26
    4e9c:	9f 91       	pop	r25
    4e9e:	8f 91       	pop	r24
    4ea0:	7f 91       	pop	r23
    4ea2:	6f 91       	pop	r22
    4ea4:	5f 91       	pop	r21
    4ea6:	4f 91       	pop	r20
    4ea8:	3f 91       	pop	r19
    4eaa:	2f 91       	pop	r18
    4eac:	0f 90       	pop	r0
    4eae:	0b be       	out	0x3b, r0	; 59
    4eb0:	0f 90       	pop	r0
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	0f 90       	pop	r0
    4eb6:	1f 90       	pop	r1
    4eb8:	18 95       	reti

00004eba <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    4eba:	cf 93       	push	r28
    4ebc:	df 93       	push	r29
    4ebe:	00 d0       	rcall	.+0      	; 0x4ec0 <_ZN5Print13setWriteErrorEi+0x6>
    4ec0:	1f 92       	push	r1
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
    4ec6:	9a 83       	std	Y+2, r25	; 0x02
    4ec8:	89 83       	std	Y+1, r24	; 0x01
    4eca:	7c 83       	std	Y+4, r23	; 0x04
    4ecc:	6b 83       	std	Y+3, r22	; 0x03
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    4ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	33 83       	std	Z+3, r19	; 0x03
    4eda:	22 83       	std	Z+2, r18	; 0x02
    4edc:	00 00       	nop
    4ede:	0f 90       	pop	r0
    4ee0:	0f 90       	pop	r0
    4ee2:	0f 90       	pop	r0
    4ee4:	0f 90       	pop	r0
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	08 95       	ret

00004eec <_ZN6StreamC1Ev>:
    4eec:	cf 93       	push	r28
    4eee:	df 93       	push	r29
    4ef0:	1f 92       	push	r1
    4ef2:	1f 92       	push	r1
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	9a 83       	std	Y+2, r25	; 0x02
    4efa:	89 83       	std	Y+1, r24	; 0x01
    4efc:	89 81       	ldd	r24, Y+1	; 0x01
    4efe:	9a 81       	ldd	r25, Y+2	; 0x02
    4f00:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN5PrintC1Ev>
    4f04:	22 e0       	ldi	r18, 0x02	; 2
    4f06:	33 e0       	ldi	r19, 0x03	; 3
    4f08:	89 81       	ldd	r24, Y+1	; 0x01
    4f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	31 83       	std	Z+1, r19	; 0x01
    4f10:	20 83       	st	Z, r18
    4f12:	29 81       	ldd	r18, Y+1	; 0x01
    4f14:	3a 81       	ldd	r19, Y+2	; 0x02
    4f16:	88 ee       	ldi	r24, 0xE8	; 232
    4f18:	93 e0       	ldi	r25, 0x03	; 3
    4f1a:	a0 e0       	ldi	r26, 0x00	; 0
    4f1c:	b0 e0       	ldi	r27, 0x00	; 0
    4f1e:	f9 01       	movw	r30, r18
    4f20:	84 83       	std	Z+4, r24	; 0x04
    4f22:	95 83       	std	Z+5, r25	; 0x05
    4f24:	a6 83       	std	Z+6, r26	; 0x06
    4f26:	b7 83       	std	Z+7, r27	; 0x07
    4f28:	00 00       	nop
    4f2a:	0f 90       	pop	r0
    4f2c:	0f 90       	pop	r0
    4f2e:	df 91       	pop	r29
    4f30:	cf 91       	pop	r28
    4f32:	08 95       	ret

00004f34 <_ZN7TwoWireC1Ev>:
    4f34:	cf 93       	push	r28
    4f36:	df 93       	push	r29
    4f38:	1f 92       	push	r1
    4f3a:	1f 92       	push	r1
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	9a 83       	std	Y+2, r25	; 0x02
    4f42:	89 83       	std	Y+1, r24	; 0x01
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	9a 81       	ldd	r25, Y+2	; 0x02
    4f48:	d1 df       	rcall	.-94     	; 0x4eec <_ZN6StreamC1Ev>
    4f4a:	20 ef       	ldi	r18, 0xF0	; 240
    4f4c:	32 e0       	ldi	r19, 0x02	; 2
    4f4e:	89 81       	ldd	r24, Y+1	; 0x01
    4f50:	9a 81       	ldd	r25, Y+2	; 0x02
    4f52:	fc 01       	movw	r30, r24
    4f54:	31 83       	std	Z+1, r19	; 0x01
    4f56:	20 83       	st	Z, r18
    4f58:	00 00       	nop
    4f5a:	0f 90       	pop	r0
    4f5c:	0f 90       	pop	r0
    4f5e:	df 91       	pop	r29
    4f60:	cf 91       	pop	r28
    4f62:	08 95       	ret

00004f64 <_ZN7TwoWire5beginEv>:
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	1f 92       	push	r1
    4f6a:	1f 92       	push	r1
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	9a 83       	std	Y+2, r25	; 0x02
    4f72:	89 83       	std	Y+1, r24	; 0x01
    4f74:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    4f78:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    4f7c:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    4f80:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    4f84:	e8 db       	rcall	.-2096   	; 0x4756 <twi_init>
    4f86:	81 e3       	ldi	r24, 0x31	; 49
    4f88:	9a e2       	ldi	r25, 0x2A	; 42
    4f8a:	3d dc       	rcall	.-1926   	; 0x4806 <twi_attachSlaveTxEvent>
    4f8c:	84 ee       	ldi	r24, 0xE4	; 228
    4f8e:	99 e2       	ldi	r25, 0x29	; 41
    4f90:	35 dc       	rcall	.-1942   	; 0x47fc <twi_attachSlaveRxEvent>
    4f92:	00 00       	nop
    4f94:	0f 90       	pop	r0
    4f96:	0f 90       	pop	r0
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	08 95       	ret

00004f9e <_ZN7TwoWire11requestFromEhhmhh>:
    4f9e:	cf 92       	push	r12
    4fa0:	ef 92       	push	r14
    4fa2:	0f 93       	push	r16
    4fa4:	1f 93       	push	r17
    4fa6:	cf 93       	push	r28
    4fa8:	df 93       	push	r29
    4faa:	cd b7       	in	r28, 0x3d	; 61
    4fac:	de b7       	in	r29, 0x3e	; 62
    4fae:	2b 97       	sbiw	r28, 0x0b	; 11
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	f8 94       	cli
    4fb4:	de bf       	out	0x3e, r29	; 62
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	cd bf       	out	0x3d, r28	; 61
    4fba:	9b 83       	std	Y+3, r25	; 0x03
    4fbc:	8a 83       	std	Y+2, r24	; 0x02
    4fbe:	6c 83       	std	Y+4, r22	; 0x04
    4fc0:	4d 83       	std	Y+5, r20	; 0x05
    4fc2:	0e 83       	std	Y+6, r16	; 0x06
    4fc4:	1f 83       	std	Y+7, r17	; 0x07
    4fc6:	28 87       	std	Y+8, r18	; 0x08
    4fc8:	39 87       	std	Y+9, r19	; 0x09
    4fca:	ea 86       	std	Y+10, r14	; 0x0a
    4fcc:	cb 86       	std	Y+11, r12	; 0x0b
    4fce:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fd0:	88 23       	and	r24, r24
    4fd2:	d9 f1       	breq	.+118    	; 0x504a <_ZN7TwoWire11requestFromEhhmhh+0xac>
    4fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fd8:	6c 81       	ldd	r22, Y+4	; 0x04
    4fda:	98 d0       	rcall	.+304    	; 0x510c <_ZN7TwoWire17beginTransmissionEh>
    4fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fde:	84 30       	cpi	r24, 0x04	; 4
    4fe0:	10 f0       	brcs	.+4      	; 0x4fe6 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4fe2:	83 e0       	ldi	r24, 0x03	; 3
    4fe4:	8a 87       	std	Y+10, r24	; 0x0a
    4fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fe8:	9f ef       	ldi	r25, 0xFF	; 255
    4fea:	98 0f       	add	r25, r24
    4fec:	9a 87       	std	Y+10, r25	; 0x0a
    4fee:	91 e0       	ldi	r25, 0x01	; 1
    4ff0:	88 23       	and	r24, r24
    4ff2:	09 f4       	brne	.+2      	; 0x4ff6 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	99 23       	and	r25, r25
    4ff8:	21 f1       	breq	.+72     	; 0x5042 <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ffe:	fc 01       	movw	r30, r24
    5000:	80 81       	ld	r24, Z
    5002:	91 81       	ldd	r25, Z+1	; 0x01
    5004:	fc 01       	movw	r30, r24
    5006:	20 81       	ld	r18, Z
    5008:	31 81       	ldd	r19, Z+1	; 0x01
    500a:	8a 85       	ldd	r24, Y+10	; 0x0a
    500c:	88 2f       	mov	r24, r24
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	ac 01       	movw	r20, r24
    5012:	44 0f       	add	r20, r20
    5014:	55 1f       	adc	r21, r21
    5016:	44 0f       	add	r20, r20
    5018:	55 1f       	adc	r21, r21
    501a:	44 0f       	add	r20, r20
    501c:	55 1f       	adc	r21, r21
    501e:	8e 81       	ldd	r24, Y+6	; 0x06
    5020:	9f 81       	ldd	r25, Y+7	; 0x07
    5022:	a8 85       	ldd	r26, Y+8	; 0x08
    5024:	b9 85       	ldd	r27, Y+9	; 0x09
    5026:	04 c0       	rjmp	.+8      	; 0x5030 <_ZN7TwoWire11requestFromEhhmhh+0x92>
    5028:	b6 95       	lsr	r27
    502a:	a7 95       	ror	r26
    502c:	97 95       	ror	r25
    502e:	87 95       	ror	r24
    5030:	4a 95       	dec	r20
    5032:	d2 f7       	brpl	.-12     	; 0x5028 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    5034:	48 2f       	mov	r20, r24
    5036:	8a 81       	ldd	r24, Y+2	; 0x02
    5038:	9b 81       	ldd	r25, Y+3	; 0x03
    503a:	64 2f       	mov	r22, r20
    503c:	f9 01       	movw	r30, r18
    503e:	19 95       	eicall
    5040:	d2 cf       	rjmp	.-92     	; 0x4fe6 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	9b 81       	ldd	r25, Y+3	; 0x03
    5046:	60 e0       	ldi	r22, 0x00	; 0
    5048:	91 d0       	rcall	.+290    	; 0x516c <_ZN7TwoWire15endTransmissionEh>
    504a:	8d 81       	ldd	r24, Y+5	; 0x05
    504c:	81 32       	cpi	r24, 0x21	; 33
    504e:	10 f0       	brcs	.+4      	; 0x5054 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    5050:	80 e2       	ldi	r24, 0x20	; 32
    5052:	8d 83       	std	Y+5, r24	; 0x05
    5054:	2b 85       	ldd	r18, Y+11	; 0x0b
    5056:	4d 81       	ldd	r20, Y+5	; 0x05
    5058:	64 ea       	ldi	r22, 0xA4	; 164
    505a:	74 e0       	ldi	r23, 0x04	; 4
    505c:	8c 81       	ldd	r24, Y+4	; 0x04
    505e:	f2 db       	rcall	.-2076   	; 0x4844 <twi_readFrom>
    5060:	89 83       	std	Y+1, r24	; 0x01
    5062:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    506c:	89 81       	ldd	r24, Y+1	; 0x01
    506e:	2b 96       	adiw	r28, 0x0b	; 11
    5070:	0f b6       	in	r0, 0x3f	; 63
    5072:	f8 94       	cli
    5074:	de bf       	out	0x3e, r29	; 62
    5076:	0f be       	out	0x3f, r0	; 63
    5078:	cd bf       	out	0x3d, r28	; 61
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	ef 90       	pop	r14
    5084:	cf 90       	pop	r12
    5086:	08 95       	ret

00005088 <_ZN7TwoWire11requestFromEhhh>:
    5088:	cf 92       	push	r12
    508a:	ef 92       	push	r14
    508c:	0f 93       	push	r16
    508e:	1f 93       	push	r17
    5090:	cf 93       	push	r28
    5092:	df 93       	push	r29
    5094:	00 d0       	rcall	.+0      	; 0x5096 <_ZN7TwoWire11requestFromEhhh+0xe>
    5096:	1f 92       	push	r1
    5098:	1f 92       	push	r1
    509a:	cd b7       	in	r28, 0x3d	; 61
    509c:	de b7       	in	r29, 0x3e	; 62
    509e:	9a 83       	std	Y+2, r25	; 0x02
    50a0:	89 83       	std	Y+1, r24	; 0x01
    50a2:	6b 83       	std	Y+3, r22	; 0x03
    50a4:	4c 83       	std	Y+4, r20	; 0x04
    50a6:	2d 83       	std	Y+5, r18	; 0x05
    50a8:	89 81       	ldd	r24, Y+1	; 0x01
    50aa:	9a 81       	ldd	r25, Y+2	; 0x02
    50ac:	cd 80       	ldd	r12, Y+5	; 0x05
    50ae:	e1 2c       	mov	r14, r1
    50b0:	00 e0       	ldi	r16, 0x00	; 0
    50b2:	10 e0       	ldi	r17, 0x00	; 0
    50b4:	98 01       	movw	r18, r16
    50b6:	4c 81       	ldd	r20, Y+4	; 0x04
    50b8:	6b 81       	ldd	r22, Y+3	; 0x03
    50ba:	71 df       	rcall	.-286    	; 0x4f9e <_ZN7TwoWire11requestFromEhhmhh>
    50bc:	0f 90       	pop	r0
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
    50c2:	0f 90       	pop	r0
    50c4:	0f 90       	pop	r0
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	1f 91       	pop	r17
    50cc:	0f 91       	pop	r16
    50ce:	ef 90       	pop	r14
    50d0:	cf 90       	pop	r12
    50d2:	08 95       	ret

000050d4 <_ZN7TwoWire11requestFromEii>:
    50d4:	cf 93       	push	r28
    50d6:	df 93       	push	r29
    50d8:	00 d0       	rcall	.+0      	; 0x50da <_ZN7TwoWire11requestFromEii+0x6>
    50da:	00 d0       	rcall	.+0      	; 0x50dc <_ZN7TwoWire11requestFromEii+0x8>
    50dc:	cd b7       	in	r28, 0x3d	; 61
    50de:	de b7       	in	r29, 0x3e	; 62
    50e0:	9a 83       	std	Y+2, r25	; 0x02
    50e2:	89 83       	std	Y+1, r24	; 0x01
    50e4:	7c 83       	std	Y+4, r23	; 0x04
    50e6:	6b 83       	std	Y+3, r22	; 0x03
    50e8:	5e 83       	std	Y+6, r21	; 0x06
    50ea:	4d 83       	std	Y+5, r20	; 0x05
    50ec:	4d 81       	ldd	r20, Y+5	; 0x05
    50ee:	3b 81       	ldd	r19, Y+3	; 0x03
    50f0:	89 81       	ldd	r24, Y+1	; 0x01
    50f2:	9a 81       	ldd	r25, Y+2	; 0x02
    50f4:	21 e0       	ldi	r18, 0x01	; 1
    50f6:	63 2f       	mov	r22, r19
    50f8:	c7 df       	rcall	.-114    	; 0x5088 <_ZN7TwoWire11requestFromEhhh>
    50fa:	26 96       	adiw	r28, 0x06	; 6
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	de bf       	out	0x3e, r29	; 62
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	cd bf       	out	0x3d, r28	; 61
    5106:	df 91       	pop	r29
    5108:	cf 91       	pop	r28
    510a:	08 95       	ret

0000510c <_ZN7TwoWire17beginTransmissionEh>:
    510c:	cf 93       	push	r28
    510e:	df 93       	push	r29
    5110:	00 d0       	rcall	.+0      	; 0x5112 <_ZN7TwoWire17beginTransmissionEh+0x6>
    5112:	cd b7       	in	r28, 0x3d	; 61
    5114:	de b7       	in	r29, 0x3e	; 62
    5116:	9a 83       	std	Y+2, r25	; 0x02
    5118:	89 83       	std	Y+1, r24	; 0x01
    511a:	6b 83       	std	Y+3, r22	; 0x03
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <_ZN7TwoWire12transmittingE>
    5122:	8b 81       	ldd	r24, Y+3	; 0x03
    5124:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <_ZN7TwoWire9txAddressE>
    5128:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    512c:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    5130:	00 00       	nop
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	0f 90       	pop	r0
    5138:	df 91       	pop	r29
    513a:	cf 91       	pop	r28
    513c:	08 95       	ret

0000513e <_ZN7TwoWire17beginTransmissionEi>:
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	00 d0       	rcall	.+0      	; 0x5144 <_ZN7TwoWire17beginTransmissionEi+0x6>
    5144:	1f 92       	push	r1
    5146:	cd b7       	in	r28, 0x3d	; 61
    5148:	de b7       	in	r29, 0x3e	; 62
    514a:	9a 83       	std	Y+2, r25	; 0x02
    514c:	89 83       	std	Y+1, r24	; 0x01
    514e:	7c 83       	std	Y+4, r23	; 0x04
    5150:	6b 83       	std	Y+3, r22	; 0x03
    5152:	2b 81       	ldd	r18, Y+3	; 0x03
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	9a 81       	ldd	r25, Y+2	; 0x02
    5158:	62 2f       	mov	r22, r18
    515a:	d8 df       	rcall	.-80     	; 0x510c <_ZN7TwoWire17beginTransmissionEh>
    515c:	00 00       	nop
    515e:	0f 90       	pop	r0
    5160:	0f 90       	pop	r0
    5162:	0f 90       	pop	r0
    5164:	0f 90       	pop	r0
    5166:	df 91       	pop	r29
    5168:	cf 91       	pop	r28
    516a:	08 95       	ret

0000516c <_ZN7TwoWire15endTransmissionEh>:
    516c:	0f 93       	push	r16
    516e:	cf 93       	push	r28
    5170:	df 93       	push	r29
    5172:	00 d0       	rcall	.+0      	; 0x5174 <_ZN7TwoWire15endTransmissionEh+0x8>
    5174:	1f 92       	push	r1
    5176:	cd b7       	in	r28, 0x3d	; 61
    5178:	de b7       	in	r29, 0x3e	; 62
    517a:	9b 83       	std	Y+3, r25	; 0x03
    517c:	8a 83       	std	Y+2, r24	; 0x02
    517e:	6c 83       	std	Y+4, r22	; 0x04
    5180:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    5184:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <_ZN7TwoWire9txAddressE>
    5188:	0c 81       	ldd	r16, Y+4	; 0x04
    518a:	21 e0       	ldi	r18, 0x01	; 1
    518c:	49 2f       	mov	r20, r25
    518e:	67 ec       	ldi	r22, 0xC7	; 199
    5190:	74 e0       	ldi	r23, 0x04	; 4
    5192:	3f dc       	rcall	.-1922   	; 0x4a12 <twi_writeTo>
    5194:	89 83       	std	Y+1, r24	; 0x01
    5196:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    519a:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    519e:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <_ZN7TwoWire12transmittingE>
    51a2:	89 81       	ldd	r24, Y+1	; 0x01
    51a4:	0f 90       	pop	r0
    51a6:	0f 90       	pop	r0
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	0f 91       	pop	r16
    51b2:	08 95       	ret

000051b4 <_ZN7TwoWire15endTransmissionEv>:
    51b4:	cf 93       	push	r28
    51b6:	df 93       	push	r29
    51b8:	1f 92       	push	r1
    51ba:	1f 92       	push	r1
    51bc:	cd b7       	in	r28, 0x3d	; 61
    51be:	de b7       	in	r29, 0x3e	; 62
    51c0:	9a 83       	std	Y+2, r25	; 0x02
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	9a 81       	ldd	r25, Y+2	; 0x02
    51c8:	61 e0       	ldi	r22, 0x01	; 1
    51ca:	d0 df       	rcall	.-96     	; 0x516c <_ZN7TwoWire15endTransmissionEh>
    51cc:	0f 90       	pop	r0
    51ce:	0f 90       	pop	r0
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	08 95       	ret

000051d6 <_ZN7TwoWire5writeEh>:
    51d6:	cf 93       	push	r28
    51d8:	df 93       	push	r29
    51da:	00 d0       	rcall	.+0      	; 0x51dc <_ZN7TwoWire5writeEh+0x6>
    51dc:	cd b7       	in	r28, 0x3d	; 61
    51de:	de b7       	in	r29, 0x3e	; 62
    51e0:	9a 83       	std	Y+2, r25	; 0x02
    51e2:	89 83       	std	Y+1, r24	; 0x01
    51e4:	6b 83       	std	Y+3, r22	; 0x03
    51e6:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <_ZN7TwoWire12transmittingE>
    51ea:	88 23       	and	r24, r24
    51ec:	f9 f0       	breq	.+62     	; 0x522c <_ZN7TwoWire5writeEh+0x56>
    51ee:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    51f2:	80 32       	cpi	r24, 0x20	; 32
    51f4:	40 f0       	brcs	.+16     	; 0x5206 <_ZN7TwoWire5writeEh+0x30>
    51f6:	89 81       	ldd	r24, Y+1	; 0x01
    51f8:	9a 81       	ldd	r25, Y+2	; 0x02
    51fa:	61 e0       	ldi	r22, 0x01	; 1
    51fc:	70 e0       	ldi	r23, 0x00	; 0
    51fe:	5d de       	rcall	.-838    	; 0x4eba <_ZN5Print13setWriteErrorEi>
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	19 c0       	rjmp	.+50     	; 0x5238 <_ZN7TwoWire5writeEh+0x62>
    5206:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    520a:	88 2f       	mov	r24, r24
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	2b 81       	ldd	r18, Y+3	; 0x03
    5210:	89 53       	subi	r24, 0x39	; 57
    5212:	9b 4f       	sbci	r25, 0xFB	; 251
    5214:	fc 01       	movw	r30, r24
    5216:	20 83       	st	Z, r18
    5218:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    521c:	8f 5f       	subi	r24, 0xFF	; 255
    521e:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    5222:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    5226:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    522a:	04 c0       	rjmp	.+8      	; 0x5234 <_ZN7TwoWire5writeEh+0x5e>
    522c:	ce 01       	movw	r24, r28
    522e:	03 96       	adiw	r24, 0x03	; 3
    5230:	61 e0       	ldi	r22, 0x01	; 1
    5232:	bc da       	rcall	.-2696   	; 0x47ac <twi_transmit>
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	0f 90       	pop	r0
    523a:	0f 90       	pop	r0
    523c:	0f 90       	pop	r0
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	08 95       	ret

00005244 <_ZN7TwoWire5writeEPKhj>:
    5244:	cf 93       	push	r28
    5246:	df 93       	push	r29
    5248:	cd b7       	in	r28, 0x3d	; 61
    524a:	de b7       	in	r29, 0x3e	; 62
    524c:	28 97       	sbiw	r28, 0x08	; 8
    524e:	0f b6       	in	r0, 0x3f	; 63
    5250:	f8 94       	cli
    5252:	de bf       	out	0x3e, r29	; 62
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	cd bf       	out	0x3d, r28	; 61
    5258:	9c 83       	std	Y+4, r25	; 0x04
    525a:	8b 83       	std	Y+3, r24	; 0x03
    525c:	7e 83       	std	Y+6, r23	; 0x06
    525e:	6d 83       	std	Y+5, r22	; 0x05
    5260:	58 87       	std	Y+8, r21	; 0x08
    5262:	4f 83       	std	Y+7, r20	; 0x07
    5264:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <_ZN7TwoWire12transmittingE>
    5268:	88 23       	and	r24, r24
    526a:	21 f1       	breq	.+72     	; 0x52b4 <_ZN7TwoWire5writeEPKhj+0x70>
    526c:	1a 82       	std	Y+2, r1	; 0x02
    526e:	19 82       	std	Y+1, r1	; 0x01
    5270:	29 81       	ldd	r18, Y+1	; 0x01
    5272:	3a 81       	ldd	r19, Y+2	; 0x02
    5274:	8f 81       	ldd	r24, Y+7	; 0x07
    5276:	98 85       	ldd	r25, Y+8	; 0x08
    5278:	28 17       	cp	r18, r24
    527a:	39 07       	cpc	r19, r25
    527c:	00 f5       	brcc	.+64     	; 0x52be <_ZN7TwoWire5writeEPKhj+0x7a>
    527e:	8b 81       	ldd	r24, Y+3	; 0x03
    5280:	9c 81       	ldd	r25, Y+4	; 0x04
    5282:	fc 01       	movw	r30, r24
    5284:	80 81       	ld	r24, Z
    5286:	91 81       	ldd	r25, Z+1	; 0x01
    5288:	fc 01       	movw	r30, r24
    528a:	20 81       	ld	r18, Z
    528c:	31 81       	ldd	r19, Z+1	; 0x01
    528e:	4d 81       	ldd	r20, Y+5	; 0x05
    5290:	5e 81       	ldd	r21, Y+6	; 0x06
    5292:	89 81       	ldd	r24, Y+1	; 0x01
    5294:	9a 81       	ldd	r25, Y+2	; 0x02
    5296:	84 0f       	add	r24, r20
    5298:	95 1f       	adc	r25, r21
    529a:	fc 01       	movw	r30, r24
    529c:	40 81       	ld	r20, Z
    529e:	8b 81       	ldd	r24, Y+3	; 0x03
    52a0:	9c 81       	ldd	r25, Y+4	; 0x04
    52a2:	64 2f       	mov	r22, r20
    52a4:	f9 01       	movw	r30, r18
    52a6:	19 95       	eicall
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
    52aa:	9a 81       	ldd	r25, Y+2	; 0x02
    52ac:	01 96       	adiw	r24, 0x01	; 1
    52ae:	9a 83       	std	Y+2, r25	; 0x02
    52b0:	89 83       	std	Y+1, r24	; 0x01
    52b2:	de cf       	rjmp	.-68     	; 0x5270 <_ZN7TwoWire5writeEPKhj+0x2c>
    52b4:	2f 81       	ldd	r18, Y+7	; 0x07
    52b6:	8d 81       	ldd	r24, Y+5	; 0x05
    52b8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ba:	62 2f       	mov	r22, r18
    52bc:	77 da       	rcall	.-2834   	; 0x47ac <twi_transmit>
    52be:	8f 81       	ldd	r24, Y+7	; 0x07
    52c0:	98 85       	ldd	r25, Y+8	; 0x08
    52c2:	28 96       	adiw	r28, 0x08	; 8
    52c4:	0f b6       	in	r0, 0x3f	; 63
    52c6:	f8 94       	cli
    52c8:	de bf       	out	0x3e, r29	; 62
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	cd bf       	out	0x3d, r28	; 61
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	08 95       	ret

000052d4 <_ZN7TwoWire9availableEv>:
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	1f 92       	push	r1
    52da:	1f 92       	push	r1
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
    52e0:	9a 83       	std	Y+2, r25	; 0x02
    52e2:	89 83       	std	Y+1, r24	; 0x01
    52e4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    52e8:	28 2f       	mov	r18, r24
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    52f0:	88 2f       	mov	r24, r24
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	a9 01       	movw	r20, r18
    52f6:	48 1b       	sub	r20, r24
    52f8:	59 0b       	sbc	r21, r25
    52fa:	ca 01       	movw	r24, r20
    52fc:	0f 90       	pop	r0
    52fe:	0f 90       	pop	r0
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	08 95       	ret

00005306 <_ZN7TwoWire4readEv>:
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	00 d0       	rcall	.+0      	; 0x530c <_ZN7TwoWire4readEv+0x6>
    530c:	1f 92       	push	r1
    530e:	cd b7       	in	r28, 0x3d	; 61
    5310:	de b7       	in	r29, 0x3e	; 62
    5312:	9c 83       	std	Y+4, r25	; 0x04
    5314:	8b 83       	std	Y+3, r24	; 0x03
    5316:	8f ef       	ldi	r24, 0xFF	; 255
    5318:	9f ef       	ldi	r25, 0xFF	; 255
    531a:	9a 83       	std	Y+2, r25	; 0x02
    531c:	89 83       	std	Y+1, r24	; 0x01
    531e:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    5322:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    5326:	98 17       	cp	r25, r24
    5328:	88 f4       	brcc	.+34     	; 0x534c <_ZN7TwoWire4readEv+0x46>
    532a:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    532e:	88 2f       	mov	r24, r24
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	8c 55       	subi	r24, 0x5C	; 92
    5334:	9b 4f       	sbci	r25, 0xFB	; 251
    5336:	fc 01       	movw	r30, r24
    5338:	80 81       	ld	r24, Z
    533a:	88 2f       	mov	r24, r24
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	9a 83       	std	Y+2, r25	; 0x02
    5340:	89 83       	std	Y+1, r24	; 0x01
    5342:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    5346:	8f 5f       	subi	r24, 0xFF	; 255
    5348:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
    5350:	0f 90       	pop	r0
    5352:	0f 90       	pop	r0
    5354:	0f 90       	pop	r0
    5356:	0f 90       	pop	r0
    5358:	df 91       	pop	r29
    535a:	cf 91       	pop	r28
    535c:	08 95       	ret

0000535e <_ZN7TwoWire4peekEv>:
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	00 d0       	rcall	.+0      	; 0x5364 <_ZN7TwoWire4peekEv+0x6>
    5364:	1f 92       	push	r1
    5366:	cd b7       	in	r28, 0x3d	; 61
    5368:	de b7       	in	r29, 0x3e	; 62
    536a:	9c 83       	std	Y+4, r25	; 0x04
    536c:	8b 83       	std	Y+3, r24	; 0x03
    536e:	8f ef       	ldi	r24, 0xFF	; 255
    5370:	9f ef       	ldi	r25, 0xFF	; 255
    5372:	9a 83       	std	Y+2, r25	; 0x02
    5374:	89 83       	std	Y+1, r24	; 0x01
    5376:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    537a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    537e:	98 17       	cp	r25, r24
    5380:	60 f4       	brcc	.+24     	; 0x539a <_ZN7TwoWire4peekEv+0x3c>
    5382:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    5386:	88 2f       	mov	r24, r24
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	8c 55       	subi	r24, 0x5C	; 92
    538c:	9b 4f       	sbci	r25, 0xFB	; 251
    538e:	fc 01       	movw	r30, r24
    5390:	80 81       	ld	r24, Z
    5392:	88 2f       	mov	r24, r24
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	9a 83       	std	Y+2, r25	; 0x02
    5398:	89 83       	std	Y+1, r24	; 0x01
    539a:	89 81       	ldd	r24, Y+1	; 0x01
    539c:	9a 81       	ldd	r25, Y+2	; 0x02
    539e:	0f 90       	pop	r0
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	df 91       	pop	r29
    53a8:	cf 91       	pop	r28
    53aa:	08 95       	ret

000053ac <_ZN7TwoWire5flushEv>:
    53ac:	cf 93       	push	r28
    53ae:	df 93       	push	r29
    53b0:	1f 92       	push	r1
    53b2:	1f 92       	push	r1
    53b4:	cd b7       	in	r28, 0x3d	; 61
    53b6:	de b7       	in	r29, 0x3e	; 62
    53b8:	9a 83       	std	Y+2, r25	; 0x02
    53ba:	89 83       	std	Y+1, r24	; 0x01
    53bc:	00 00       	nop
    53be:	0f 90       	pop	r0
    53c0:	0f 90       	pop	r0
    53c2:	df 91       	pop	r29
    53c4:	cf 91       	pop	r28
    53c6:	08 95       	ret

000053c8 <_ZN7TwoWire16onReceiveServiceEPhi>:
    53c8:	cf 93       	push	r28
    53ca:	df 93       	push	r29
    53cc:	00 d0       	rcall	.+0      	; 0x53ce <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    53ce:	1f 92       	push	r1
    53d0:	1f 92       	push	r1
    53d2:	cd b7       	in	r28, 0x3d	; 61
    53d4:	de b7       	in	r29, 0x3e	; 62
    53d6:	9b 83       	std	Y+3, r25	; 0x03
    53d8:	8a 83       	std	Y+2, r24	; 0x02
    53da:	7d 83       	std	Y+5, r23	; 0x05
    53dc:	6c 83       	std	Y+4, r22	; 0x04
    53de:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZN7TwoWire14user_onReceiveE>
    53e2:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZN7TwoWire14user_onReceiveE+0x1>
    53e6:	89 2b       	or	r24, r25
    53e8:	89 f1       	breq	.+98     	; 0x544c <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    53ea:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    53ee:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    53f2:	98 17       	cp	r25, r24
    53f4:	68 f1       	brcs	.+90     	; 0x5450 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    53f6:	19 82       	std	Y+1, r1	; 0x01
    53f8:	89 81       	ldd	r24, Y+1	; 0x01
    53fa:	28 2f       	mov	r18, r24
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	8c 81       	ldd	r24, Y+4	; 0x04
    5400:	9d 81       	ldd	r25, Y+5	; 0x05
    5402:	28 17       	cp	r18, r24
    5404:	39 07       	cpc	r19, r25
    5406:	a4 f4       	brge	.+40     	; 0x5430 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	88 2f       	mov	r24, r24
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	29 81       	ldd	r18, Y+1	; 0x01
    5410:	22 2f       	mov	r18, r18
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	4a 81       	ldd	r20, Y+2	; 0x02
    5416:	5b 81       	ldd	r21, Y+3	; 0x03
    5418:	24 0f       	add	r18, r20
    541a:	35 1f       	adc	r19, r21
    541c:	f9 01       	movw	r30, r18
    541e:	20 81       	ld	r18, Z
    5420:	8c 55       	subi	r24, 0x5C	; 92
    5422:	9b 4f       	sbci	r25, 0xFB	; 251
    5424:	fc 01       	movw	r30, r24
    5426:	20 83       	st	Z, r18
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	8f 5f       	subi	r24, 0xFF	; 255
    542c:	89 83       	std	Y+1, r24	; 0x01
    542e:	e4 cf       	rjmp	.-56     	; 0x53f8 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    5430:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <_ZN7TwoWire13rxBufferIndexE>
    5434:	8c 81       	ldd	r24, Y+4	; 0x04
    5436:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <_ZN7TwoWire14rxBufferLengthE>
    543a:	20 91 ec 04 	lds	r18, 0x04EC	; 0x8004ec <_ZN7TwoWire14user_onReceiveE>
    543e:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <_ZN7TwoWire14user_onReceiveE+0x1>
    5442:	8c 81       	ldd	r24, Y+4	; 0x04
    5444:	9d 81       	ldd	r25, Y+5	; 0x05
    5446:	f9 01       	movw	r30, r18
    5448:	19 95       	eicall
    544a:	03 c0       	rjmp	.+6      	; 0x5452 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    544c:	00 00       	nop
    544e:	01 c0       	rjmp	.+2      	; 0x5452 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    5450:	00 00       	nop
    5452:	0f 90       	pop	r0
    5454:	0f 90       	pop	r0
    5456:	0f 90       	pop	r0
    5458:	0f 90       	pop	r0
    545a:	0f 90       	pop	r0
    545c:	df 91       	pop	r29
    545e:	cf 91       	pop	r28
    5460:	08 95       	ret

00005462 <_ZN7TwoWire16onRequestServiceEv>:
    5462:	cf 93       	push	r28
    5464:	df 93       	push	r29
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
    546a:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_ZN7TwoWire14user_onRequestE>
    546e:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <_ZN7TwoWire14user_onRequestE+0x1>
    5472:	89 2b       	or	r24, r25
    5474:	59 f0       	breq	.+22     	; 0x548c <_ZN7TwoWire16onRequestServiceEv+0x2a>
    5476:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <_ZN7TwoWire13txBufferIndexE>
    547a:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <_ZN7TwoWire14txBufferLengthE>
    547e:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_ZN7TwoWire14user_onRequestE>
    5482:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <_ZN7TwoWire14user_onRequestE+0x1>
    5486:	fc 01       	movw	r30, r24
    5488:	19 95       	eicall
    548a:	01 c0       	rjmp	.+2      	; 0x548e <_ZN7TwoWire16onRequestServiceEv+0x2c>
    548c:	00 00       	nop
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	08 95       	ret

00005494 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5494:	cf 93       	push	r28
    5496:	df 93       	push	r29
    5498:	00 d0       	rcall	.+0      	; 0x549a <_Z41__static_initialization_and_destruction_0ii+0x6>
    549a:	1f 92       	push	r1
    549c:	cd b7       	in	r28, 0x3d	; 61
    549e:	de b7       	in	r29, 0x3e	; 62
    54a0:	9a 83       	std	Y+2, r25	; 0x02
    54a2:	89 83       	std	Y+1, r24	; 0x01
    54a4:	7c 83       	std	Y+4, r23	; 0x04
    54a6:	6b 83       	std	Y+3, r22	; 0x03
    54a8:	89 81       	ldd	r24, Y+1	; 0x01
    54aa:	9a 81       	ldd	r25, Y+2	; 0x02
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	39 f4       	brne	.+14     	; 0x54be <_Z41__static_initialization_and_destruction_0ii+0x2a>
    54b0:	8b 81       	ldd	r24, Y+3	; 0x03
    54b2:	9c 81       	ldd	r25, Y+4	; 0x04
    54b4:	01 96       	adiw	r24, 0x01	; 1
    54b6:	19 f4       	brne	.+6      	; 0x54be <_Z41__static_initialization_and_destruction_0ii+0x2a>
    54b8:	8e ee       	ldi	r24, 0xEE	; 238
    54ba:	94 e0       	ldi	r25, 0x04	; 4
    54bc:	3b dd       	rcall	.-1418   	; 0x4f34 <_ZN7TwoWireC1Ev>
    54be:	00 00       	nop
    54c0:	0f 90       	pop	r0
    54c2:	0f 90       	pop	r0
    54c4:	0f 90       	pop	r0
    54c6:	0f 90       	pop	r0
    54c8:	df 91       	pop	r29
    54ca:	cf 91       	pop	r28
    54cc:	08 95       	ret

000054ce <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    54ce:	cf 93       	push	r28
    54d0:	df 93       	push	r29
    54d2:	cd b7       	in	r28, 0x3d	; 61
    54d4:	de b7       	in	r29, 0x3e	; 62
    54d6:	6f ef       	ldi	r22, 0xFF	; 255
    54d8:	7f ef       	ldi	r23, 0xFF	; 255
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	da df       	rcall	.-76     	; 0x5494 <_Z41__static_initialization_and_destruction_0ii>
    54e0:	df 91       	pop	r29
    54e2:	cf 91       	pop	r28
    54e4:	08 95       	ret

000054e6 <__subsf3>:
    54e6:	50 58       	subi	r21, 0x80	; 128

000054e8 <__addsf3>:
    54e8:	bb 27       	eor	r27, r27
    54ea:	aa 27       	eor	r26, r26
    54ec:	0e d0       	rcall	.+28     	; 0x550a <__addsf3x>
    54ee:	09 c1       	rjmp	.+530    	; 0x5702 <__fp_round>
    54f0:	fa d0       	rcall	.+500    	; 0x56e6 <__fp_pscA>
    54f2:	30 f0       	brcs	.+12     	; 0x5500 <__addsf3+0x18>
    54f4:	ff d0       	rcall	.+510    	; 0x56f4 <__fp_pscB>
    54f6:	20 f0       	brcs	.+8      	; 0x5500 <__addsf3+0x18>
    54f8:	31 f4       	brne	.+12     	; 0x5506 <__addsf3+0x1e>
    54fa:	9f 3f       	cpi	r25, 0xFF	; 255
    54fc:	11 f4       	brne	.+4      	; 0x5502 <__addsf3+0x1a>
    54fe:	1e f4       	brtc	.+6      	; 0x5506 <__addsf3+0x1e>
    5500:	ef c0       	rjmp	.+478    	; 0x56e0 <__fp_nan>
    5502:	0e f4       	brtc	.+2      	; 0x5506 <__addsf3+0x1e>
    5504:	e0 95       	com	r30
    5506:	e7 fb       	bst	r30, 7
    5508:	e5 c0       	rjmp	.+458    	; 0x56d4 <__fp_inf>

0000550a <__addsf3x>:
    550a:	e9 2f       	mov	r30, r25
    550c:	0b d1       	rcall	.+534    	; 0x5724 <__fp_split3>
    550e:	80 f3       	brcs	.-32     	; 0x54f0 <__addsf3+0x8>
    5510:	ba 17       	cp	r27, r26
    5512:	62 07       	cpc	r22, r18
    5514:	73 07       	cpc	r23, r19
    5516:	84 07       	cpc	r24, r20
    5518:	95 07       	cpc	r25, r21
    551a:	18 f0       	brcs	.+6      	; 0x5522 <__addsf3x+0x18>
    551c:	71 f4       	brne	.+28     	; 0x553a <__addsf3x+0x30>
    551e:	9e f5       	brtc	.+102    	; 0x5586 <__addsf3x+0x7c>
    5520:	23 c1       	rjmp	.+582    	; 0x5768 <__fp_zero>
    5522:	0e f4       	brtc	.+2      	; 0x5526 <__addsf3x+0x1c>
    5524:	e0 95       	com	r30
    5526:	0b 2e       	mov	r0, r27
    5528:	ba 2f       	mov	r27, r26
    552a:	a0 2d       	mov	r26, r0
    552c:	0b 01       	movw	r0, r22
    552e:	b9 01       	movw	r22, r18
    5530:	90 01       	movw	r18, r0
    5532:	0c 01       	movw	r0, r24
    5534:	ca 01       	movw	r24, r20
    5536:	a0 01       	movw	r20, r0
    5538:	11 24       	eor	r1, r1
    553a:	ff 27       	eor	r31, r31
    553c:	59 1b       	sub	r21, r25
    553e:	99 f0       	breq	.+38     	; 0x5566 <__addsf3x+0x5c>
    5540:	59 3f       	cpi	r21, 0xF9	; 249
    5542:	50 f4       	brcc	.+20     	; 0x5558 <__addsf3x+0x4e>
    5544:	50 3e       	cpi	r21, 0xE0	; 224
    5546:	68 f1       	brcs	.+90     	; 0x55a2 <__addsf3x+0x98>
    5548:	1a 16       	cp	r1, r26
    554a:	f0 40       	sbci	r31, 0x00	; 0
    554c:	a2 2f       	mov	r26, r18
    554e:	23 2f       	mov	r18, r19
    5550:	34 2f       	mov	r19, r20
    5552:	44 27       	eor	r20, r20
    5554:	58 5f       	subi	r21, 0xF8	; 248
    5556:	f3 cf       	rjmp	.-26     	; 0x553e <__addsf3x+0x34>
    5558:	46 95       	lsr	r20
    555a:	37 95       	ror	r19
    555c:	27 95       	ror	r18
    555e:	a7 95       	ror	r26
    5560:	f0 40       	sbci	r31, 0x00	; 0
    5562:	53 95       	inc	r21
    5564:	c9 f7       	brne	.-14     	; 0x5558 <__addsf3x+0x4e>
    5566:	7e f4       	brtc	.+30     	; 0x5586 <__addsf3x+0x7c>
    5568:	1f 16       	cp	r1, r31
    556a:	ba 0b       	sbc	r27, r26
    556c:	62 0b       	sbc	r22, r18
    556e:	73 0b       	sbc	r23, r19
    5570:	84 0b       	sbc	r24, r20
    5572:	ba f0       	brmi	.+46     	; 0x55a2 <__addsf3x+0x98>
    5574:	91 50       	subi	r25, 0x01	; 1
    5576:	a1 f0       	breq	.+40     	; 0x55a0 <__addsf3x+0x96>
    5578:	ff 0f       	add	r31, r31
    557a:	bb 1f       	adc	r27, r27
    557c:	66 1f       	adc	r22, r22
    557e:	77 1f       	adc	r23, r23
    5580:	88 1f       	adc	r24, r24
    5582:	c2 f7       	brpl	.-16     	; 0x5574 <__addsf3x+0x6a>
    5584:	0e c0       	rjmp	.+28     	; 0x55a2 <__addsf3x+0x98>
    5586:	ba 0f       	add	r27, r26
    5588:	62 1f       	adc	r22, r18
    558a:	73 1f       	adc	r23, r19
    558c:	84 1f       	adc	r24, r20
    558e:	48 f4       	brcc	.+18     	; 0x55a2 <__addsf3x+0x98>
    5590:	87 95       	ror	r24
    5592:	77 95       	ror	r23
    5594:	67 95       	ror	r22
    5596:	b7 95       	ror	r27
    5598:	f7 95       	ror	r31
    559a:	9e 3f       	cpi	r25, 0xFE	; 254
    559c:	08 f0       	brcs	.+2      	; 0x55a0 <__addsf3x+0x96>
    559e:	b3 cf       	rjmp	.-154    	; 0x5506 <__addsf3+0x1e>
    55a0:	93 95       	inc	r25
    55a2:	88 0f       	add	r24, r24
    55a4:	08 f0       	brcs	.+2      	; 0x55a8 <__addsf3x+0x9e>
    55a6:	99 27       	eor	r25, r25
    55a8:	ee 0f       	add	r30, r30
    55aa:	97 95       	ror	r25
    55ac:	87 95       	ror	r24
    55ae:	08 95       	ret

000055b0 <__fixsfsi>:
    55b0:	04 d0       	rcall	.+8      	; 0x55ba <__fixunssfsi>
    55b2:	68 94       	set
    55b4:	b1 11       	cpse	r27, r1
    55b6:	d9 c0       	rjmp	.+434    	; 0x576a <__fp_szero>
    55b8:	08 95       	ret

000055ba <__fixunssfsi>:
    55ba:	bc d0       	rcall	.+376    	; 0x5734 <__fp_splitA>
    55bc:	88 f0       	brcs	.+34     	; 0x55e0 <__fixunssfsi+0x26>
    55be:	9f 57       	subi	r25, 0x7F	; 127
    55c0:	90 f0       	brcs	.+36     	; 0x55e6 <__fixunssfsi+0x2c>
    55c2:	b9 2f       	mov	r27, r25
    55c4:	99 27       	eor	r25, r25
    55c6:	b7 51       	subi	r27, 0x17	; 23
    55c8:	a0 f0       	brcs	.+40     	; 0x55f2 <__fixunssfsi+0x38>
    55ca:	d1 f0       	breq	.+52     	; 0x5600 <__fixunssfsi+0x46>
    55cc:	66 0f       	add	r22, r22
    55ce:	77 1f       	adc	r23, r23
    55d0:	88 1f       	adc	r24, r24
    55d2:	99 1f       	adc	r25, r25
    55d4:	1a f0       	brmi	.+6      	; 0x55dc <__fixunssfsi+0x22>
    55d6:	ba 95       	dec	r27
    55d8:	c9 f7       	brne	.-14     	; 0x55cc <__fixunssfsi+0x12>
    55da:	12 c0       	rjmp	.+36     	; 0x5600 <__fixunssfsi+0x46>
    55dc:	b1 30       	cpi	r27, 0x01	; 1
    55de:	81 f0       	breq	.+32     	; 0x5600 <__fixunssfsi+0x46>
    55e0:	c3 d0       	rcall	.+390    	; 0x5768 <__fp_zero>
    55e2:	b1 e0       	ldi	r27, 0x01	; 1
    55e4:	08 95       	ret
    55e6:	c0 c0       	rjmp	.+384    	; 0x5768 <__fp_zero>
    55e8:	67 2f       	mov	r22, r23
    55ea:	78 2f       	mov	r23, r24
    55ec:	88 27       	eor	r24, r24
    55ee:	b8 5f       	subi	r27, 0xF8	; 248
    55f0:	39 f0       	breq	.+14     	; 0x5600 <__fixunssfsi+0x46>
    55f2:	b9 3f       	cpi	r27, 0xF9	; 249
    55f4:	cc f3       	brlt	.-14     	; 0x55e8 <__fixunssfsi+0x2e>
    55f6:	86 95       	lsr	r24
    55f8:	77 95       	ror	r23
    55fa:	67 95       	ror	r22
    55fc:	b3 95       	inc	r27
    55fe:	d9 f7       	brne	.-10     	; 0x55f6 <__fixunssfsi+0x3c>
    5600:	3e f4       	brtc	.+14     	; 0x5610 <__fixunssfsi+0x56>
    5602:	90 95       	com	r25
    5604:	80 95       	com	r24
    5606:	70 95       	com	r23
    5608:	61 95       	neg	r22
    560a:	7f 4f       	sbci	r23, 0xFF	; 255
    560c:	8f 4f       	sbci	r24, 0xFF	; 255
    560e:	9f 4f       	sbci	r25, 0xFF	; 255
    5610:	08 95       	ret

00005612 <__floatunsisf>:
    5612:	e8 94       	clt
    5614:	09 c0       	rjmp	.+18     	; 0x5628 <__floatsisf+0x12>

00005616 <__floatsisf>:
    5616:	97 fb       	bst	r25, 7
    5618:	3e f4       	brtc	.+14     	; 0x5628 <__floatsisf+0x12>
    561a:	90 95       	com	r25
    561c:	80 95       	com	r24
    561e:	70 95       	com	r23
    5620:	61 95       	neg	r22
    5622:	7f 4f       	sbci	r23, 0xFF	; 255
    5624:	8f 4f       	sbci	r24, 0xFF	; 255
    5626:	9f 4f       	sbci	r25, 0xFF	; 255
    5628:	99 23       	and	r25, r25
    562a:	a9 f0       	breq	.+42     	; 0x5656 <__floatsisf+0x40>
    562c:	f9 2f       	mov	r31, r25
    562e:	96 e9       	ldi	r25, 0x96	; 150
    5630:	bb 27       	eor	r27, r27
    5632:	93 95       	inc	r25
    5634:	f6 95       	lsr	r31
    5636:	87 95       	ror	r24
    5638:	77 95       	ror	r23
    563a:	67 95       	ror	r22
    563c:	b7 95       	ror	r27
    563e:	f1 11       	cpse	r31, r1
    5640:	f8 cf       	rjmp	.-16     	; 0x5632 <__floatsisf+0x1c>
    5642:	fa f4       	brpl	.+62     	; 0x5682 <__floatsisf+0x6c>
    5644:	bb 0f       	add	r27, r27
    5646:	11 f4       	brne	.+4      	; 0x564c <__floatsisf+0x36>
    5648:	60 ff       	sbrs	r22, 0
    564a:	1b c0       	rjmp	.+54     	; 0x5682 <__floatsisf+0x6c>
    564c:	6f 5f       	subi	r22, 0xFF	; 255
    564e:	7f 4f       	sbci	r23, 0xFF	; 255
    5650:	8f 4f       	sbci	r24, 0xFF	; 255
    5652:	9f 4f       	sbci	r25, 0xFF	; 255
    5654:	16 c0       	rjmp	.+44     	; 0x5682 <__floatsisf+0x6c>
    5656:	88 23       	and	r24, r24
    5658:	11 f0       	breq	.+4      	; 0x565e <__floatsisf+0x48>
    565a:	96 e9       	ldi	r25, 0x96	; 150
    565c:	11 c0       	rjmp	.+34     	; 0x5680 <__floatsisf+0x6a>
    565e:	77 23       	and	r23, r23
    5660:	21 f0       	breq	.+8      	; 0x566a <__floatsisf+0x54>
    5662:	9e e8       	ldi	r25, 0x8E	; 142
    5664:	87 2f       	mov	r24, r23
    5666:	76 2f       	mov	r23, r22
    5668:	05 c0       	rjmp	.+10     	; 0x5674 <__floatsisf+0x5e>
    566a:	66 23       	and	r22, r22
    566c:	71 f0       	breq	.+28     	; 0x568a <__floatsisf+0x74>
    566e:	96 e8       	ldi	r25, 0x86	; 134
    5670:	86 2f       	mov	r24, r22
    5672:	70 e0       	ldi	r23, 0x00	; 0
    5674:	60 e0       	ldi	r22, 0x00	; 0
    5676:	2a f0       	brmi	.+10     	; 0x5682 <__floatsisf+0x6c>
    5678:	9a 95       	dec	r25
    567a:	66 0f       	add	r22, r22
    567c:	77 1f       	adc	r23, r23
    567e:	88 1f       	adc	r24, r24
    5680:	da f7       	brpl	.-10     	; 0x5678 <__floatsisf+0x62>
    5682:	88 0f       	add	r24, r24
    5684:	96 95       	lsr	r25
    5686:	87 95       	ror	r24
    5688:	97 f9       	bld	r25, 7
    568a:	08 95       	ret

0000568c <__fp_cmp>:
    568c:	99 0f       	add	r25, r25
    568e:	00 08       	sbc	r0, r0
    5690:	55 0f       	add	r21, r21
    5692:	aa 0b       	sbc	r26, r26
    5694:	e0 e8       	ldi	r30, 0x80	; 128
    5696:	fe ef       	ldi	r31, 0xFE	; 254
    5698:	16 16       	cp	r1, r22
    569a:	17 06       	cpc	r1, r23
    569c:	e8 07       	cpc	r30, r24
    569e:	f9 07       	cpc	r31, r25
    56a0:	c0 f0       	brcs	.+48     	; 0x56d2 <__fp_cmp+0x46>
    56a2:	12 16       	cp	r1, r18
    56a4:	13 06       	cpc	r1, r19
    56a6:	e4 07       	cpc	r30, r20
    56a8:	f5 07       	cpc	r31, r21
    56aa:	98 f0       	brcs	.+38     	; 0x56d2 <__fp_cmp+0x46>
    56ac:	62 1b       	sub	r22, r18
    56ae:	73 0b       	sbc	r23, r19
    56b0:	84 0b       	sbc	r24, r20
    56b2:	95 0b       	sbc	r25, r21
    56b4:	39 f4       	brne	.+14     	; 0x56c4 <__fp_cmp+0x38>
    56b6:	0a 26       	eor	r0, r26
    56b8:	61 f0       	breq	.+24     	; 0x56d2 <__fp_cmp+0x46>
    56ba:	23 2b       	or	r18, r19
    56bc:	24 2b       	or	r18, r20
    56be:	25 2b       	or	r18, r21
    56c0:	21 f4       	brne	.+8      	; 0x56ca <__fp_cmp+0x3e>
    56c2:	08 95       	ret
    56c4:	0a 26       	eor	r0, r26
    56c6:	09 f4       	brne	.+2      	; 0x56ca <__fp_cmp+0x3e>
    56c8:	a1 40       	sbci	r26, 0x01	; 1
    56ca:	a6 95       	lsr	r26
    56cc:	8f ef       	ldi	r24, 0xFF	; 255
    56ce:	81 1d       	adc	r24, r1
    56d0:	81 1d       	adc	r24, r1
    56d2:	08 95       	ret

000056d4 <__fp_inf>:
    56d4:	97 f9       	bld	r25, 7
    56d6:	9f 67       	ori	r25, 0x7F	; 127
    56d8:	80 e8       	ldi	r24, 0x80	; 128
    56da:	70 e0       	ldi	r23, 0x00	; 0
    56dc:	60 e0       	ldi	r22, 0x00	; 0
    56de:	08 95       	ret

000056e0 <__fp_nan>:
    56e0:	9f ef       	ldi	r25, 0xFF	; 255
    56e2:	80 ec       	ldi	r24, 0xC0	; 192
    56e4:	08 95       	ret

000056e6 <__fp_pscA>:
    56e6:	00 24       	eor	r0, r0
    56e8:	0a 94       	dec	r0
    56ea:	16 16       	cp	r1, r22
    56ec:	17 06       	cpc	r1, r23
    56ee:	18 06       	cpc	r1, r24
    56f0:	09 06       	cpc	r0, r25
    56f2:	08 95       	ret

000056f4 <__fp_pscB>:
    56f4:	00 24       	eor	r0, r0
    56f6:	0a 94       	dec	r0
    56f8:	12 16       	cp	r1, r18
    56fa:	13 06       	cpc	r1, r19
    56fc:	14 06       	cpc	r1, r20
    56fe:	05 06       	cpc	r0, r21
    5700:	08 95       	ret

00005702 <__fp_round>:
    5702:	09 2e       	mov	r0, r25
    5704:	03 94       	inc	r0
    5706:	00 0c       	add	r0, r0
    5708:	11 f4       	brne	.+4      	; 0x570e <__fp_round+0xc>
    570a:	88 23       	and	r24, r24
    570c:	52 f0       	brmi	.+20     	; 0x5722 <__fp_round+0x20>
    570e:	bb 0f       	add	r27, r27
    5710:	40 f4       	brcc	.+16     	; 0x5722 <__fp_round+0x20>
    5712:	bf 2b       	or	r27, r31
    5714:	11 f4       	brne	.+4      	; 0x571a <__fp_round+0x18>
    5716:	60 ff       	sbrs	r22, 0
    5718:	04 c0       	rjmp	.+8      	; 0x5722 <__fp_round+0x20>
    571a:	6f 5f       	subi	r22, 0xFF	; 255
    571c:	7f 4f       	sbci	r23, 0xFF	; 255
    571e:	8f 4f       	sbci	r24, 0xFF	; 255
    5720:	9f 4f       	sbci	r25, 0xFF	; 255
    5722:	08 95       	ret

00005724 <__fp_split3>:
    5724:	57 fd       	sbrc	r21, 7
    5726:	90 58       	subi	r25, 0x80	; 128
    5728:	44 0f       	add	r20, r20
    572a:	55 1f       	adc	r21, r21
    572c:	59 f0       	breq	.+22     	; 0x5744 <__fp_splitA+0x10>
    572e:	5f 3f       	cpi	r21, 0xFF	; 255
    5730:	71 f0       	breq	.+28     	; 0x574e <__fp_splitA+0x1a>
    5732:	47 95       	ror	r20

00005734 <__fp_splitA>:
    5734:	88 0f       	add	r24, r24
    5736:	97 fb       	bst	r25, 7
    5738:	99 1f       	adc	r25, r25
    573a:	61 f0       	breq	.+24     	; 0x5754 <__fp_splitA+0x20>
    573c:	9f 3f       	cpi	r25, 0xFF	; 255
    573e:	79 f0       	breq	.+30     	; 0x575e <__fp_splitA+0x2a>
    5740:	87 95       	ror	r24
    5742:	08 95       	ret
    5744:	12 16       	cp	r1, r18
    5746:	13 06       	cpc	r1, r19
    5748:	14 06       	cpc	r1, r20
    574a:	55 1f       	adc	r21, r21
    574c:	f2 cf       	rjmp	.-28     	; 0x5732 <__fp_split3+0xe>
    574e:	46 95       	lsr	r20
    5750:	f1 df       	rcall	.-30     	; 0x5734 <__fp_splitA>
    5752:	08 c0       	rjmp	.+16     	; 0x5764 <__fp_splitA+0x30>
    5754:	16 16       	cp	r1, r22
    5756:	17 06       	cpc	r1, r23
    5758:	18 06       	cpc	r1, r24
    575a:	99 1f       	adc	r25, r25
    575c:	f1 cf       	rjmp	.-30     	; 0x5740 <__fp_splitA+0xc>
    575e:	86 95       	lsr	r24
    5760:	71 05       	cpc	r23, r1
    5762:	61 05       	cpc	r22, r1
    5764:	08 94       	sec
    5766:	08 95       	ret

00005768 <__fp_zero>:
    5768:	e8 94       	clt

0000576a <__fp_szero>:
    576a:	bb 27       	eor	r27, r27
    576c:	66 27       	eor	r22, r22
    576e:	77 27       	eor	r23, r23
    5770:	cb 01       	movw	r24, r22
    5772:	97 f9       	bld	r25, 7
    5774:	08 95       	ret

00005776 <__mulsf3>:
    5776:	0b d0       	rcall	.+22     	; 0x578e <__mulsf3x>
    5778:	c4 cf       	rjmp	.-120    	; 0x5702 <__fp_round>
    577a:	b5 df       	rcall	.-150    	; 0x56e6 <__fp_pscA>
    577c:	28 f0       	brcs	.+10     	; 0x5788 <__mulsf3+0x12>
    577e:	ba df       	rcall	.-140    	; 0x56f4 <__fp_pscB>
    5780:	18 f0       	brcs	.+6      	; 0x5788 <__mulsf3+0x12>
    5782:	95 23       	and	r25, r21
    5784:	09 f0       	breq	.+2      	; 0x5788 <__mulsf3+0x12>
    5786:	a6 cf       	rjmp	.-180    	; 0x56d4 <__fp_inf>
    5788:	ab cf       	rjmp	.-170    	; 0x56e0 <__fp_nan>
    578a:	11 24       	eor	r1, r1
    578c:	ee cf       	rjmp	.-36     	; 0x576a <__fp_szero>

0000578e <__mulsf3x>:
    578e:	ca df       	rcall	.-108    	; 0x5724 <__fp_split3>
    5790:	a0 f3       	brcs	.-24     	; 0x577a <__mulsf3+0x4>

00005792 <__mulsf3_pse>:
    5792:	95 9f       	mul	r25, r21
    5794:	d1 f3       	breq	.-12     	; 0x578a <__mulsf3+0x14>
    5796:	95 0f       	add	r25, r21
    5798:	50 e0       	ldi	r21, 0x00	; 0
    579a:	55 1f       	adc	r21, r21
    579c:	62 9f       	mul	r22, r18
    579e:	f0 01       	movw	r30, r0
    57a0:	72 9f       	mul	r23, r18
    57a2:	bb 27       	eor	r27, r27
    57a4:	f0 0d       	add	r31, r0
    57a6:	b1 1d       	adc	r27, r1
    57a8:	63 9f       	mul	r22, r19
    57aa:	aa 27       	eor	r26, r26
    57ac:	f0 0d       	add	r31, r0
    57ae:	b1 1d       	adc	r27, r1
    57b0:	aa 1f       	adc	r26, r26
    57b2:	64 9f       	mul	r22, r20
    57b4:	66 27       	eor	r22, r22
    57b6:	b0 0d       	add	r27, r0
    57b8:	a1 1d       	adc	r26, r1
    57ba:	66 1f       	adc	r22, r22
    57bc:	82 9f       	mul	r24, r18
    57be:	22 27       	eor	r18, r18
    57c0:	b0 0d       	add	r27, r0
    57c2:	a1 1d       	adc	r26, r1
    57c4:	62 1f       	adc	r22, r18
    57c6:	73 9f       	mul	r23, r19
    57c8:	b0 0d       	add	r27, r0
    57ca:	a1 1d       	adc	r26, r1
    57cc:	62 1f       	adc	r22, r18
    57ce:	83 9f       	mul	r24, r19
    57d0:	a0 0d       	add	r26, r0
    57d2:	61 1d       	adc	r22, r1
    57d4:	22 1f       	adc	r18, r18
    57d6:	74 9f       	mul	r23, r20
    57d8:	33 27       	eor	r19, r19
    57da:	a0 0d       	add	r26, r0
    57dc:	61 1d       	adc	r22, r1
    57de:	23 1f       	adc	r18, r19
    57e0:	84 9f       	mul	r24, r20
    57e2:	60 0d       	add	r22, r0
    57e4:	21 1d       	adc	r18, r1
    57e6:	82 2f       	mov	r24, r18
    57e8:	76 2f       	mov	r23, r22
    57ea:	6a 2f       	mov	r22, r26
    57ec:	11 24       	eor	r1, r1
    57ee:	9f 57       	subi	r25, 0x7F	; 127
    57f0:	50 40       	sbci	r21, 0x00	; 0
    57f2:	8a f0       	brmi	.+34     	; 0x5816 <__mulsf3_pse+0x84>
    57f4:	e1 f0       	breq	.+56     	; 0x582e <__mulsf3_pse+0x9c>
    57f6:	88 23       	and	r24, r24
    57f8:	4a f0       	brmi	.+18     	; 0x580c <__mulsf3_pse+0x7a>
    57fa:	ee 0f       	add	r30, r30
    57fc:	ff 1f       	adc	r31, r31
    57fe:	bb 1f       	adc	r27, r27
    5800:	66 1f       	adc	r22, r22
    5802:	77 1f       	adc	r23, r23
    5804:	88 1f       	adc	r24, r24
    5806:	91 50       	subi	r25, 0x01	; 1
    5808:	50 40       	sbci	r21, 0x00	; 0
    580a:	a9 f7       	brne	.-22     	; 0x57f6 <__mulsf3_pse+0x64>
    580c:	9e 3f       	cpi	r25, 0xFE	; 254
    580e:	51 05       	cpc	r21, r1
    5810:	70 f0       	brcs	.+28     	; 0x582e <__mulsf3_pse+0x9c>
    5812:	60 cf       	rjmp	.-320    	; 0x56d4 <__fp_inf>
    5814:	aa cf       	rjmp	.-172    	; 0x576a <__fp_szero>
    5816:	5f 3f       	cpi	r21, 0xFF	; 255
    5818:	ec f3       	brlt	.-6      	; 0x5814 <__mulsf3_pse+0x82>
    581a:	98 3e       	cpi	r25, 0xE8	; 232
    581c:	dc f3       	brlt	.-10     	; 0x5814 <__mulsf3_pse+0x82>
    581e:	86 95       	lsr	r24
    5820:	77 95       	ror	r23
    5822:	67 95       	ror	r22
    5824:	b7 95       	ror	r27
    5826:	f7 95       	ror	r31
    5828:	e7 95       	ror	r30
    582a:	9f 5f       	subi	r25, 0xFF	; 255
    582c:	c1 f7       	brne	.-16     	; 0x581e <__mulsf3_pse+0x8c>
    582e:	fe 2b       	or	r31, r30
    5830:	88 0f       	add	r24, r24
    5832:	91 1d       	adc	r25, r1
    5834:	96 95       	lsr	r25
    5836:	87 95       	ror	r24
    5838:	97 f9       	bld	r25, 7
    583a:	08 95       	ret

0000583c <__unordsf2>:
    583c:	27 df       	rcall	.-434    	; 0x568c <__fp_cmp>
    583e:	88 0b       	sbc	r24, r24
    5840:	99 0b       	sbc	r25, r25
    5842:	08 95       	ret

00005844 <__cxa_pure_virtual>:
    5844:	0e 94 57 35 	call	0x6aae	; 0x6aae <abort>

00005848 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5848:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    584a:	91 8d       	ldd	r25, Z+25	; 0x19
    584c:	22 8d       	ldd	r18, Z+26	; 0x1a
    584e:	89 2f       	mov	r24, r25
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	80 5c       	subi	r24, 0xC0	; 192
    5854:	9f 4f       	sbci	r25, 0xFF	; 255
    5856:	82 1b       	sub	r24, r18
    5858:	91 09       	sbc	r25, r1
}
    585a:	8f 73       	andi	r24, 0x3F	; 63
    585c:	99 27       	eor	r25, r25
    585e:	08 95       	ret

00005860 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    5860:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5862:	91 8d       	ldd	r25, Z+25	; 0x19
    5864:	82 8d       	ldd	r24, Z+26	; 0x1a
    5866:	98 17       	cp	r25, r24
    5868:	31 f0       	breq	.+12     	; 0x5876 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    586a:	82 8d       	ldd	r24, Z+26	; 0x1a
    586c:	e8 0f       	add	r30, r24
    586e:	f1 1d       	adc	r31, r1
    5870:	85 8d       	ldd	r24, Z+29	; 0x1d
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5876:	8f ef       	ldi	r24, 0xFF	; 255
    5878:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    587a:	08 95       	ret

0000587c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    587c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    587e:	91 8d       	ldd	r25, Z+25	; 0x19
    5880:	82 8d       	ldd	r24, Z+26	; 0x1a
    5882:	98 17       	cp	r25, r24
    5884:	61 f0       	breq	.+24     	; 0x589e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5886:	82 8d       	ldd	r24, Z+26	; 0x1a
    5888:	df 01       	movw	r26, r30
    588a:	a8 0f       	add	r26, r24
    588c:	b1 1d       	adc	r27, r1
    588e:	5d 96       	adiw	r26, 0x1d	; 29
    5890:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5892:	92 8d       	ldd	r25, Z+26	; 0x1a
    5894:	9f 5f       	subi	r25, 0xFF	; 255
    5896:	9f 73       	andi	r25, 0x3F	; 63
    5898:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    589e:	8f ef       	ldi	r24, 0xFF	; 255
    58a0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    58a2:	08 95       	ret

000058a4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    58a4:	fc 01       	movw	r30, r24
    58a6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    58a8:	44 8d       	ldd	r20, Z+28	; 0x1c
    58aa:	25 2f       	mov	r18, r21
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	84 2f       	mov	r24, r20
    58b0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    58b2:	82 1b       	sub	r24, r18
    58b4:	93 0b       	sbc	r25, r19
    58b6:	54 17       	cp	r21, r20
    58b8:	10 f0       	brcs	.+4      	; 0x58be <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    58ba:	cf 96       	adiw	r24, 0x3f	; 63
    58bc:	08 95       	ret
  return tail - head - 1;
    58be:	01 97       	sbiw	r24, 0x01	; 1
}
    58c0:	08 95       	ret

000058c2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    58c2:	8e ee       	ldi	r24, 0xEE	; 238
    58c4:	9d e2       	ldi	r25, 0x2D	; 45
    58c6:	89 2b       	or	r24, r25
    58c8:	39 f0       	breq	.+14     	; 0x58d8 <_Z14serialEventRunv+0x16>
    58ca:	80 e0       	ldi	r24, 0x00	; 0
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	89 2b       	or	r24, r25
    58d0:	19 f0       	breq	.+6      	; 0x58d8 <_Z14serialEventRunv+0x16>
    58d2:	84 d1       	rcall	.+776    	; 0x5bdc <_Z17Serial0_availablev>
    58d4:	81 11       	cpse	r24, r1
    58d6:	25 c0       	rjmp	.+74     	; 0x5922 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    58d8:	80 e0       	ldi	r24, 0x00	; 0
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	89 2b       	or	r24, r25
    58de:	41 f0       	breq	.+16     	; 0x58f0 <_Z14serialEventRunv+0x2e>
    58e0:	80 e0       	ldi	r24, 0x00	; 0
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	89 2b       	or	r24, r25
    58e6:	21 f0       	breq	.+8      	; 0x58f0 <_Z14serialEventRunv+0x2e>
    58e8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    58ec:	81 11       	cpse	r24, r1
    58ee:	1c c0       	rjmp	.+56     	; 0x5928 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    58f0:	80 e0       	ldi	r24, 0x00	; 0
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	89 2b       	or	r24, r25
    58f6:	41 f0       	breq	.+16     	; 0x5908 <_Z14serialEventRunv+0x46>
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	89 2b       	or	r24, r25
    58fe:	21 f0       	breq	.+8      	; 0x5908 <_Z14serialEventRunv+0x46>
    5900:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5904:	81 11       	cpse	r24, r1
    5906:	13 c0       	rjmp	.+38     	; 0x592e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	89 2b       	or	r24, r25
    590e:	a1 f0       	breq	.+40     	; 0x5938 <_Z14serialEventRunv+0x76>
    5910:	80 e0       	ldi	r24, 0x00	; 0
    5912:	90 e0       	ldi	r25, 0x00	; 0
    5914:	89 2b       	or	r24, r25
    5916:	81 f0       	breq	.+32     	; 0x5938 <_Z14serialEventRunv+0x76>
    5918:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    591c:	81 11       	cpse	r24, r1
    591e:	0a c0       	rjmp	.+20     	; 0x5934 <_Z14serialEventRunv+0x72>
    5920:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5922:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5926:	d8 cf       	rjmp	.-80     	; 0x58d8 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5928:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    592c:	e1 cf       	rjmp	.-62     	; 0x58f0 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    592e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5932:	ea cf       	rjmp	.-44     	; 0x5908 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5934:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5938:	08 95       	ret

0000593a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    593a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    593c:	84 8d       	ldd	r24, Z+28	; 0x1c
    593e:	df 01       	movw	r26, r30
    5940:	a8 0f       	add	r26, r24
    5942:	b1 1d       	adc	r27, r1
    5944:	a3 5a       	subi	r26, 0xA3	; 163
    5946:	bf 4f       	sbci	r27, 0xFF	; 255
    5948:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    594a:	84 8d       	ldd	r24, Z+28	; 0x1c
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	01 96       	adiw	r24, 0x01	; 1
    5950:	8f 73       	andi	r24, 0x3F	; 63
    5952:	99 27       	eor	r25, r25
    5954:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5956:	a6 89       	ldd	r26, Z+22	; 0x16
    5958:	b7 89       	ldd	r27, Z+23	; 0x17
    595a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    595c:	a0 89       	ldd	r26, Z+16	; 0x10
    595e:	b1 89       	ldd	r27, Z+17	; 0x11
    5960:	8c 91       	ld	r24, X
    5962:	83 70       	andi	r24, 0x03	; 3
    5964:	80 64       	ori	r24, 0x40	; 64
    5966:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5968:	93 8d       	ldd	r25, Z+27	; 0x1b
    596a:	84 8d       	ldd	r24, Z+28	; 0x1c
    596c:	98 13       	cpse	r25, r24
    596e:	06 c0       	rjmp	.+12     	; 0x597c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5970:	02 88       	ldd	r0, Z+18	; 0x12
    5972:	f3 89       	ldd	r31, Z+19	; 0x13
    5974:	e0 2d       	mov	r30, r0
    5976:	80 81       	ld	r24, Z
    5978:	8f 7d       	andi	r24, 0xDF	; 223
    597a:	80 83       	st	Z, r24
    597c:	08 95       	ret

0000597e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    597e:	ef 92       	push	r14
    5980:	ff 92       	push	r15
    5982:	0f 93       	push	r16
    5984:	1f 93       	push	r17
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
    598a:	ec 01       	movw	r28, r24
  _written = true;
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5990:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5992:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5994:	98 13       	cpse	r25, r24
    5996:	05 c0       	rjmp	.+10     	; 0x59a2 <_ZN14HardwareSerial5writeEh+0x24>
    5998:	e8 89       	ldd	r30, Y+16	; 0x10
    599a:	f9 89       	ldd	r31, Y+17	; 0x11
    599c:	80 81       	ld	r24, Z
    599e:	85 fd       	sbrc	r24, 5
    59a0:	25 c0       	rjmp	.+74     	; 0x59ec <_ZN14HardwareSerial5writeEh+0x6e>
    59a2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    59a4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    59a6:	10 e0       	ldi	r17, 0x00	; 0
    59a8:	0f 5f       	subi	r16, 0xFF	; 255
    59aa:	1f 4f       	sbci	r17, 0xFF	; 255
    59ac:	0f 73       	andi	r16, 0x3F	; 63
    59ae:	11 27       	eor	r17, r17
    59b0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    59b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    59b4:	e8 12       	cpse	r14, r24
    59b6:	0b c0       	rjmp	.+22     	; 0x59ce <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    59b8:	0f b6       	in	r0, 0x3f	; 63
    59ba:	07 fc       	sbrc	r0, 7
    59bc:	fa cf       	rjmp	.-12     	; 0x59b2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    59be:	e8 89       	ldd	r30, Y+16	; 0x10
    59c0:	f9 89       	ldd	r31, Y+17	; 0x11
    59c2:	80 81       	ld	r24, Z
    59c4:	85 ff       	sbrs	r24, 5
    59c6:	f5 cf       	rjmp	.-22     	; 0x59b2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    59c8:	ce 01       	movw	r24, r28
    59ca:	b7 df       	rcall	.-146    	; 0x593a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    59cc:	f2 cf       	rjmp	.-28     	; 0x59b2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    59ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59d0:	fe 01       	movw	r30, r28
    59d2:	e8 0f       	add	r30, r24
    59d4:	f1 1d       	adc	r31, r1
    59d6:	e3 5a       	subi	r30, 0xA3	; 163
    59d8:	ff 4f       	sbci	r31, 0xFF	; 255
    59da:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    59dc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    59de:	f8 94       	cli
    _tx_buffer_head = i;
    59e0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    59e2:	ea 89       	ldd	r30, Y+18	; 0x12
    59e4:	fb 89       	ldd	r31, Y+19	; 0x13
    59e6:	80 81       	ld	r24, Z
    59e8:	80 62       	ori	r24, 0x20	; 32
    59ea:	0a c0       	rjmp	.+20     	; 0x5a00 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    59ec:	9f b7       	in	r25, 0x3f	; 63
    59ee:	f8 94       	cli
      *_udr = c;
    59f0:	ee 89       	ldd	r30, Y+22	; 0x16
    59f2:	ff 89       	ldd	r31, Y+23	; 0x17
    59f4:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    59f6:	e8 89       	ldd	r30, Y+16	; 0x10
    59f8:	f9 89       	ldd	r31, Y+17	; 0x11
    59fa:	80 81       	ld	r24, Z
    59fc:	83 70       	andi	r24, 0x03	; 3
    59fe:	80 64       	ori	r24, 0x40	; 64
    5a00:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5a02:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	df 91       	pop	r29
    5a0a:	cf 91       	pop	r28
    5a0c:	1f 91       	pop	r17
    5a0e:	0f 91       	pop	r16
    5a10:	ff 90       	pop	r15
    5a12:	ef 90       	pop	r14
    5a14:	08 95       	ret

00005a16 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5a16:	cf 93       	push	r28
    5a18:	df 93       	push	r29
    5a1a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5a1c:	88 8d       	ldd	r24, Y+24	; 0x18
    5a1e:	88 23       	and	r24, r24
    5a20:	c1 f0       	breq	.+48     	; 0x5a52 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5a22:	ea 89       	ldd	r30, Y+18	; 0x12
    5a24:	fb 89       	ldd	r31, Y+19	; 0x13
    5a26:	80 81       	ld	r24, Z
    5a28:	85 fd       	sbrc	r24, 5
    5a2a:	05 c0       	rjmp	.+10     	; 0x5a36 <_ZN14HardwareSerial5flushEv+0x20>
    5a2c:	a8 89       	ldd	r26, Y+16	; 0x10
    5a2e:	b9 89       	ldd	r27, Y+17	; 0x11
    5a30:	8c 91       	ld	r24, X
    5a32:	86 fd       	sbrc	r24, 6
    5a34:	0e c0       	rjmp	.+28     	; 0x5a52 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5a36:	0f b6       	in	r0, 0x3f	; 63
    5a38:	07 fc       	sbrc	r0, 7
    5a3a:	f5 cf       	rjmp	.-22     	; 0x5a26 <_ZN14HardwareSerial5flushEv+0x10>
    5a3c:	80 81       	ld	r24, Z
    5a3e:	85 ff       	sbrs	r24, 5
    5a40:	f2 cf       	rjmp	.-28     	; 0x5a26 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5a42:	a8 89       	ldd	r26, Y+16	; 0x10
    5a44:	b9 89       	ldd	r27, Y+17	; 0x11
    5a46:	8c 91       	ld	r24, X
    5a48:	85 ff       	sbrs	r24, 5
    5a4a:	ed cf       	rjmp	.-38     	; 0x5a26 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5a4c:	ce 01       	movw	r24, r28
    5a4e:	75 df       	rcall	.-278    	; 0x593a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5a50:	e8 cf       	rjmp	.-48     	; 0x5a22 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5a52:	df 91       	pop	r29
    5a54:	cf 91       	pop	r28
    5a56:	08 95       	ret

00005a58 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5a58:	cf 92       	push	r12
    5a5a:	df 92       	push	r13
    5a5c:	ef 92       	push	r14
    5a5e:	ff 92       	push	r15
    5a60:	1f 93       	push	r17
    5a62:	cf 93       	push	r28
    5a64:	df 93       	push	r29
    5a66:	ec 01       	movw	r28, r24
    5a68:	6a 01       	movw	r12, r20
    5a6a:	7b 01       	movw	r14, r22
    5a6c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5a6e:	e8 89       	ldd	r30, Y+16	; 0x10
    5a70:	f9 89       	ldd	r31, Y+17	; 0x11
    5a72:	82 e0       	ldi	r24, 0x02	; 2
    5a74:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5a76:	41 15       	cp	r20, r1
    5a78:	51 4e       	sbci	r21, 0xE1	; 225
    5a7a:	61 05       	cpc	r22, r1
    5a7c:	71 05       	cpc	r23, r1
    5a7e:	a9 f0       	breq	.+42     	; 0x5aaa <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5a80:	60 e0       	ldi	r22, 0x00	; 0
    5a82:	79 e0       	ldi	r23, 0x09	; 9
    5a84:	8d e3       	ldi	r24, 0x3D	; 61
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	a7 01       	movw	r20, r14
    5a8a:	96 01       	movw	r18, r12
    5a8c:	b0 d5       	rcall	.+2912   	; 0x65ee <__udivmodsi4>
    5a8e:	da 01       	movw	r26, r20
    5a90:	c9 01       	movw	r24, r18
    5a92:	01 97       	sbiw	r24, 0x01	; 1
    5a94:	a1 09       	sbc	r26, r1
    5a96:	b1 09       	sbc	r27, r1
    5a98:	b6 95       	lsr	r27
    5a9a:	a7 95       	ror	r26
    5a9c:	97 95       	ror	r25
    5a9e:	87 95       	ror	r24
    5aa0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5aa2:	21 15       	cp	r18, r1
    5aa4:	80 e1       	ldi	r24, 0x10	; 16
    5aa6:	38 07       	cpc	r19, r24
    5aa8:	a0 f0       	brcs	.+40     	; 0x5ad2 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5aaa:	e8 89       	ldd	r30, Y+16	; 0x10
    5aac:	f9 89       	ldd	r31, Y+17	; 0x11
    5aae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5ab0:	60 e8       	ldi	r22, 0x80	; 128
    5ab2:	74 e8       	ldi	r23, 0x84	; 132
    5ab4:	8e e1       	ldi	r24, 0x1E	; 30
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	a7 01       	movw	r20, r14
    5aba:	96 01       	movw	r18, r12
    5abc:	98 d5       	rcall	.+2864   	; 0x65ee <__udivmodsi4>
    5abe:	da 01       	movw	r26, r20
    5ac0:	c9 01       	movw	r24, r18
    5ac2:	01 97       	sbiw	r24, 0x01	; 1
    5ac4:	a1 09       	sbc	r26, r1
    5ac6:	b1 09       	sbc	r27, r1
    5ac8:	b6 95       	lsr	r27
    5aca:	a7 95       	ror	r26
    5acc:	97 95       	ror	r25
    5ace:	87 95       	ror	r24
    5ad0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5ad2:	ec 85       	ldd	r30, Y+12	; 0x0c
    5ad4:	fd 85       	ldd	r31, Y+13	; 0x0d
    5ad6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5ad8:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ada:	ff 85       	ldd	r31, Y+15	; 0x0f
    5adc:	20 83       	st	Z, r18

  _written = false;
    5ade:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5ae0:	ec 89       	ldd	r30, Y+20	; 0x14
    5ae2:	fd 89       	ldd	r31, Y+21	; 0x15
    5ae4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5ae6:	ea 89       	ldd	r30, Y+18	; 0x12
    5ae8:	fb 89       	ldd	r31, Y+19	; 0x13
    5aea:	80 81       	ld	r24, Z
    5aec:	80 61       	ori	r24, 0x10	; 16
    5aee:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5af0:	ea 89       	ldd	r30, Y+18	; 0x12
    5af2:	fb 89       	ldd	r31, Y+19	; 0x13
    5af4:	80 81       	ld	r24, Z
    5af6:	88 60       	ori	r24, 0x08	; 8
    5af8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5afa:	ea 89       	ldd	r30, Y+18	; 0x12
    5afc:	fb 89       	ldd	r31, Y+19	; 0x13
    5afe:	80 81       	ld	r24, Z
    5b00:	80 68       	ori	r24, 0x80	; 128
    5b02:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5b04:	ea 89       	ldd	r30, Y+18	; 0x12
    5b06:	fb 89       	ldd	r31, Y+19	; 0x13
    5b08:	80 81       	ld	r24, Z
    5b0a:	8f 7d       	andi	r24, 0xDF	; 223
    5b0c:	80 83       	st	Z, r24
}
    5b0e:	df 91       	pop	r29
    5b10:	cf 91       	pop	r28
    5b12:	1f 91       	pop	r17
    5b14:	ff 90       	pop	r15
    5b16:	ef 90       	pop	r14
    5b18:	df 90       	pop	r13
    5b1a:	cf 90       	pop	r12
    5b1c:	08 95       	ret

00005b1e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5b1e:	1f 92       	push	r1
    5b20:	0f 92       	push	r0
    5b22:	0f b6       	in	r0, 0x3f	; 63
    5b24:	0f 92       	push	r0
    5b26:	11 24       	eor	r1, r1
    5b28:	0b b6       	in	r0, 0x3b	; 59
    5b2a:	0f 92       	push	r0
    5b2c:	2f 93       	push	r18
    5b2e:	8f 93       	push	r24
    5b30:	9f 93       	push	r25
    5b32:	ef 93       	push	r30
    5b34:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5b36:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <Serial+0x10>
    5b3a:	f0 91 0b 05 	lds	r31, 0x050B	; 0x80050b <Serial+0x11>
    5b3e:	80 81       	ld	r24, Z
    5b40:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <Serial+0x16>
    5b44:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <Serial+0x17>
    5b48:	82 fd       	sbrc	r24, 2
    5b4a:	12 c0       	rjmp	.+36     	; 0x5b70 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5b4c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5b4e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <Serial+0x19>
    5b52:	8f 5f       	subi	r24, 0xFF	; 255
    5b54:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5b56:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <Serial+0x1a>
    5b5a:	82 17       	cp	r24, r18
    5b5c:	51 f0       	breq	.+20     	; 0x5b72 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    5b5e:	e0 91 13 05 	lds	r30, 0x0513	; 0x800513 <Serial+0x19>
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	e6 50       	subi	r30, 0x06	; 6
    5b66:	fb 4f       	sbci	r31, 0xFB	; 251
    5b68:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5b6a:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <Serial+0x19>
    5b6e:	01 c0       	rjmp	.+2      	; 0x5b72 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5b70:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5b72:	ff 91       	pop	r31
    5b74:	ef 91       	pop	r30
    5b76:	9f 91       	pop	r25
    5b78:	8f 91       	pop	r24
    5b7a:	2f 91       	pop	r18
    5b7c:	0f 90       	pop	r0
    5b7e:	0b be       	out	0x3b, r0	; 59
    5b80:	0f 90       	pop	r0
    5b82:	0f be       	out	0x3f, r0	; 63
    5b84:	0f 90       	pop	r0
    5b86:	1f 90       	pop	r1
    5b88:	18 95       	reti

00005b8a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5b8a:	1f 92       	push	r1
    5b8c:	0f 92       	push	r0
    5b8e:	0f b6       	in	r0, 0x3f	; 63
    5b90:	0f 92       	push	r0
    5b92:	11 24       	eor	r1, r1
    5b94:	0b b6       	in	r0, 0x3b	; 59
    5b96:	0f 92       	push	r0
    5b98:	2f 93       	push	r18
    5b9a:	3f 93       	push	r19
    5b9c:	4f 93       	push	r20
    5b9e:	5f 93       	push	r21
    5ba0:	6f 93       	push	r22
    5ba2:	7f 93       	push	r23
    5ba4:	8f 93       	push	r24
    5ba6:	9f 93       	push	r25
    5ba8:	af 93       	push	r26
    5baa:	bf 93       	push	r27
    5bac:	ef 93       	push	r30
    5bae:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5bb0:	8a ef       	ldi	r24, 0xFA	; 250
    5bb2:	94 e0       	ldi	r25, 0x04	; 4
    5bb4:	c2 de       	rcall	.-636    	; 0x593a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5bb6:	ff 91       	pop	r31
    5bb8:	ef 91       	pop	r30
    5bba:	bf 91       	pop	r27
    5bbc:	af 91       	pop	r26
    5bbe:	9f 91       	pop	r25
    5bc0:	8f 91       	pop	r24
    5bc2:	7f 91       	pop	r23
    5bc4:	6f 91       	pop	r22
    5bc6:	5f 91       	pop	r21
    5bc8:	4f 91       	pop	r20
    5bca:	3f 91       	pop	r19
    5bcc:	2f 91       	pop	r18
    5bce:	0f 90       	pop	r0
    5bd0:	0b be       	out	0x3b, r0	; 59
    5bd2:	0f 90       	pop	r0
    5bd4:	0f be       	out	0x3f, r0	; 63
    5bd6:	0f 90       	pop	r0
    5bd8:	1f 90       	pop	r1
    5bda:	18 95       	reti

00005bdc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5bdc:	8a ef       	ldi	r24, 0xFA	; 250
    5bde:	94 e0       	ldi	r25, 0x04	; 4
    5be0:	33 de       	rcall	.-922    	; 0x5848 <_ZN14HardwareSerial9availableEv>
    5be2:	21 e0       	ldi	r18, 0x01	; 1
    5be4:	89 2b       	or	r24, r25
    5be6:	09 f4       	brne	.+2      	; 0x5bea <_Z17Serial0_availablev+0xe>
    5be8:	20 e0       	ldi	r18, 0x00	; 0
}
    5bea:	82 2f       	mov	r24, r18
    5bec:	08 95       	ret

00005bee <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5bee:	ea ef       	ldi	r30, 0xFA	; 250
    5bf0:	f4 e0       	ldi	r31, 0x04	; 4
    5bf2:	13 82       	std	Z+3, r1	; 0x03
    5bf4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5bf6:	88 ee       	ldi	r24, 0xE8	; 232
    5bf8:	93 e0       	ldi	r25, 0x03	; 3
    5bfa:	a0 e0       	ldi	r26, 0x00	; 0
    5bfc:	b0 e0       	ldi	r27, 0x00	; 0
    5bfe:	84 83       	std	Z+4, r24	; 0x04
    5c00:	95 83       	std	Z+5, r25	; 0x05
    5c02:	a6 83       	std	Z+6, r26	; 0x06
    5c04:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5c06:	84 e1       	ldi	r24, 0x14	; 20
    5c08:	93 e0       	ldi	r25, 0x03	; 3
    5c0a:	91 83       	std	Z+1, r25	; 0x01
    5c0c:	80 83       	st	Z, r24
    5c0e:	85 ec       	ldi	r24, 0xC5	; 197
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	95 87       	std	Z+13, r25	; 0x0d
    5c14:	84 87       	std	Z+12, r24	; 0x0c
    5c16:	84 ec       	ldi	r24, 0xC4	; 196
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	97 87       	std	Z+15, r25	; 0x0f
    5c1c:	86 87       	std	Z+14, r24	; 0x0e
    5c1e:	80 ec       	ldi	r24, 0xC0	; 192
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	91 8b       	std	Z+17, r25	; 0x11
    5c24:	80 8b       	std	Z+16, r24	; 0x10
    5c26:	81 ec       	ldi	r24, 0xC1	; 193
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	93 8b       	std	Z+19, r25	; 0x13
    5c2c:	82 8b       	std	Z+18, r24	; 0x12
    5c2e:	82 ec       	ldi	r24, 0xC2	; 194
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	95 8b       	std	Z+21, r25	; 0x15
    5c34:	84 8b       	std	Z+20, r24	; 0x14
    5c36:	86 ec       	ldi	r24, 0xC6	; 198
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	97 8b       	std	Z+23, r25	; 0x17
    5c3c:	86 8b       	std	Z+22, r24	; 0x16
    5c3e:	11 8e       	std	Z+25, r1	; 0x19
    5c40:	12 8e       	std	Z+26, r1	; 0x1a
    5c42:	13 8e       	std	Z+27, r1	; 0x1b
    5c44:	14 8e       	std	Z+28, r1	; 0x1c
    5c46:	08 95       	ret

00005c48 <initVariant>:
    5c48:	08 95       	ret

00005c4a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5c4a:	b6 d1       	rcall	.+876    	; 0x5fb8 <init>

	initVariant();
    5c4c:	fd df       	rcall	.-6      	; 0x5c48 <initVariant>
    5c4e:	0e 94 0c 03 	call	0x618	; 0x618 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5c52:	c1 e6       	ldi	r28, 0x61	; 97
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5c54:	dc e2       	ldi	r29, 0x2C	; 44
    5c56:	0e 94 bd 03 	call	0x77a	; 0x77a <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5c5a:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5c5c:	e1 f3       	breq	.-8      	; 0x5c56 <main+0xc>
    5c5e:	31 de       	rcall	.-926    	; 0x58c2 <_Z14serialEventRunv>
    5c60:	fa cf       	rjmp	.-12     	; 0x5c56 <main+0xc>

00005c62 <_ZdlPv>:
    5c62:	bc c5       	rjmp	.+2936   	; 0x67dc <free>

00005c64 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5c64:	cf 92       	push	r12
    5c66:	df 92       	push	r13
    5c68:	ef 92       	push	r14
    5c6a:	ff 92       	push	r15
    5c6c:	0f 93       	push	r16
    5c6e:	1f 93       	push	r17
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	6c 01       	movw	r12, r24
    5c76:	7a 01       	movw	r14, r20
    5c78:	8b 01       	movw	r16, r22
    5c7a:	c0 e0       	ldi	r28, 0x00	; 0
    5c7c:	d0 e0       	ldi	r29, 0x00	; 0
    5c7e:	ce 15       	cp	r28, r14
    5c80:	df 05       	cpc	r29, r15
    5c82:	81 f0       	breq	.+32     	; 0x5ca4 <_ZN5Print5writeEPKhj+0x40>
    5c84:	d8 01       	movw	r26, r16
    5c86:	6d 91       	ld	r22, X+
    5c88:	8d 01       	movw	r16, r26
    5c8a:	d6 01       	movw	r26, r12
    5c8c:	ed 91       	ld	r30, X+
    5c8e:	fc 91       	ld	r31, X
    5c90:	01 90       	ld	r0, Z+
    5c92:	f0 81       	ld	r31, Z
    5c94:	e0 2d       	mov	r30, r0
    5c96:	c6 01       	movw	r24, r12
    5c98:	19 95       	eicall
    5c9a:	89 2b       	or	r24, r25
    5c9c:	11 f0       	breq	.+4      	; 0x5ca2 <_ZN5Print5writeEPKhj+0x3e>
    5c9e:	21 96       	adiw	r28, 0x01	; 1
    5ca0:	ee cf       	rjmp	.-36     	; 0x5c7e <_ZN5Print5writeEPKhj+0x1a>
    5ca2:	7e 01       	movw	r14, r28
    5ca4:	c7 01       	movw	r24, r14
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	1f 91       	pop	r17
    5cac:	0f 91       	pop	r16
    5cae:	ff 90       	pop	r15
    5cb0:	ef 90       	pop	r14
    5cb2:	df 90       	pop	r13
    5cb4:	cf 90       	pop	r12
    5cb6:	08 95       	ret

00005cb8 <_ZN5Print5printEPKc>:
    5cb8:	0c 94 86 01 	jmp	0x30c	; 0x30c <_ZN5Print5writeEPKc>

00005cbc <_ZN5Print5printEc>:
    5cbc:	dc 01       	movw	r26, r24
    5cbe:	ed 91       	ld	r30, X+
    5cc0:	fc 91       	ld	r31, X
    5cc2:	01 90       	ld	r0, Z+
    5cc4:	f0 81       	ld	r31, Z
    5cc6:	e0 2d       	mov	r30, r0
    5cc8:	19 94       	eijmp

00005cca <_ZN5Print7printlnEv>:
    5cca:	62 e2       	ldi	r22, 0x22	; 34
    5ccc:	73 e0       	ldi	r23, 0x03	; 3
    5cce:	0c 94 86 01 	jmp	0x30c	; 0x30c <_ZN5Print5writeEPKc>

00005cd2 <_ZN5Print7printlnEPKc>:
    5cd2:	0f 93       	push	r16
    5cd4:	1f 93       	push	r17
    5cd6:	cf 93       	push	r28
    5cd8:	df 93       	push	r29
    5cda:	ec 01       	movw	r28, r24
    5cdc:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN5Print5writeEPKc>
    5ce0:	8c 01       	movw	r16, r24
    5ce2:	ce 01       	movw	r24, r28
    5ce4:	f2 df       	rcall	.-28     	; 0x5cca <_ZN5Print7printlnEv>
    5ce6:	80 0f       	add	r24, r16
    5ce8:	91 1f       	adc	r25, r17
    5cea:	df 91       	pop	r29
    5cec:	cf 91       	pop	r28
    5cee:	1f 91       	pop	r17
    5cf0:	0f 91       	pop	r16
    5cf2:	08 95       	ret

00005cf4 <_ZN5Print11printNumberEmh>:
    5cf4:	8f 92       	push	r8
    5cf6:	9f 92       	push	r9
    5cf8:	af 92       	push	r10
    5cfa:	bf 92       	push	r11
    5cfc:	ef 92       	push	r14
    5cfe:	ff 92       	push	r15
    5d00:	0f 93       	push	r16
    5d02:	1f 93       	push	r17
    5d04:	cf 93       	push	r28
    5d06:	df 93       	push	r29
    5d08:	cd b7       	in	r28, 0x3d	; 61
    5d0a:	de b7       	in	r29, 0x3e	; 62
    5d0c:	a1 97       	sbiw	r28, 0x21	; 33
    5d0e:	0f b6       	in	r0, 0x3f	; 63
    5d10:	f8 94       	cli
    5d12:	de bf       	out	0x3e, r29	; 62
    5d14:	0f be       	out	0x3f, r0	; 63
    5d16:	cd bf       	out	0x3d, r28	; 61
    5d18:	7c 01       	movw	r14, r24
    5d1a:	fa 01       	movw	r30, r20
    5d1c:	cb 01       	movw	r24, r22
    5d1e:	19 a2       	std	Y+33, r1	; 0x21
    5d20:	22 30       	cpi	r18, 0x02	; 2
    5d22:	08 f4       	brcc	.+2      	; 0x5d26 <_ZN5Print11printNumberEmh+0x32>
    5d24:	2a e0       	ldi	r18, 0x0A	; 10
    5d26:	8e 01       	movw	r16, r28
    5d28:	0f 5d       	subi	r16, 0xDF	; 223
    5d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2c:	82 2e       	mov	r8, r18
    5d2e:	91 2c       	mov	r9, r1
    5d30:	a1 2c       	mov	r10, r1
    5d32:	b1 2c       	mov	r11, r1
    5d34:	bf 01       	movw	r22, r30
    5d36:	a5 01       	movw	r20, r10
    5d38:	94 01       	movw	r18, r8
    5d3a:	59 d4       	rcall	.+2226   	; 0x65ee <__udivmodsi4>
    5d3c:	f9 01       	movw	r30, r18
    5d3e:	ca 01       	movw	r24, r20
    5d40:	01 50       	subi	r16, 0x01	; 1
    5d42:	11 09       	sbc	r17, r1
    5d44:	6a 30       	cpi	r22, 0x0A	; 10
    5d46:	10 f4       	brcc	.+4      	; 0x5d4c <_ZN5Print11printNumberEmh+0x58>
    5d48:	60 5d       	subi	r22, 0xD0	; 208
    5d4a:	01 c0       	rjmp	.+2      	; 0x5d4e <_ZN5Print11printNumberEmh+0x5a>
    5d4c:	69 5c       	subi	r22, 0xC9	; 201
    5d4e:	d8 01       	movw	r26, r16
    5d50:	6c 93       	st	X, r22
    5d52:	23 2b       	or	r18, r19
    5d54:	24 2b       	or	r18, r20
    5d56:	25 2b       	or	r18, r21
    5d58:	69 f7       	brne	.-38     	; 0x5d34 <_ZN5Print11printNumberEmh+0x40>
    5d5a:	b8 01       	movw	r22, r16
    5d5c:	c7 01       	movw	r24, r14
    5d5e:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN5Print5writeEPKc>
    5d62:	a1 96       	adiw	r28, 0x21	; 33
    5d64:	0f b6       	in	r0, 0x3f	; 63
    5d66:	f8 94       	cli
    5d68:	de bf       	out	0x3e, r29	; 62
    5d6a:	0f be       	out	0x3f, r0	; 63
    5d6c:	cd bf       	out	0x3d, r28	; 61
    5d6e:	df 91       	pop	r29
    5d70:	cf 91       	pop	r28
    5d72:	1f 91       	pop	r17
    5d74:	0f 91       	pop	r16
    5d76:	ff 90       	pop	r15
    5d78:	ef 90       	pop	r14
    5d7a:	bf 90       	pop	r11
    5d7c:	af 90       	pop	r10
    5d7e:	9f 90       	pop	r9
    5d80:	8f 90       	pop	r8
    5d82:	08 95       	ret

00005d84 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    5d84:	cf 92       	push	r12
    5d86:	df 92       	push	r13
    5d88:	ef 92       	push	r14
    5d8a:	ff 92       	push	r15
    5d8c:	0f 93       	push	r16
    5d8e:	1f 93       	push	r17
    5d90:	cf 93       	push	r28
    5d92:	df 93       	push	r29
  if (base == 0) {
    5d94:	21 15       	cp	r18, r1
    5d96:	31 05       	cpc	r19, r1
    5d98:	81 f4       	brne	.+32     	; 0x5dba <_ZN5Print5printEli+0x36>
    return write(n);
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	ed 91       	ld	r30, X+
    5d9e:	fc 91       	ld	r31, X
    5da0:	01 90       	ld	r0, Z+
    5da2:	f0 81       	ld	r31, Z
    5da4:	e0 2d       	mov	r30, r0
    5da6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5da8:	df 91       	pop	r29
    5daa:	cf 91       	pop	r28
    5dac:	1f 91       	pop	r17
    5dae:	0f 91       	pop	r16
    5db0:	ff 90       	pop	r15
    5db2:	ef 90       	pop	r14
    5db4:	df 90       	pop	r13
    5db6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    5db8:	19 94       	eijmp
  } else if (base == 10) {
    5dba:	2a 30       	cpi	r18, 0x0A	; 10
    5dbc:	31 05       	cpc	r19, r1
    5dbe:	f1 f4       	brne	.+60     	; 0x5dfc <_ZN5Print5printEli+0x78>
    if (n < 0) {
    5dc0:	77 ff       	sbrs	r23, 7
    5dc2:	1b c0       	rjmp	.+54     	; 0x5dfa <_ZN5Print5printEli+0x76>
    5dc4:	6a 01       	movw	r12, r20
    5dc6:	7b 01       	movw	r14, r22
    5dc8:	ec 01       	movw	r28, r24
      int t = print('-');
    5dca:	6d e2       	ldi	r22, 0x2D	; 45
    5dcc:	77 df       	rcall	.-274    	; 0x5cbc <_ZN5Print5printEc>
    5dce:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    5dd0:	44 27       	eor	r20, r20
    5dd2:	55 27       	eor	r21, r21
    5dd4:	ba 01       	movw	r22, r20
    5dd6:	4c 19       	sub	r20, r12
    5dd8:	5d 09       	sbc	r21, r13
    5dda:	6e 09       	sbc	r22, r14
    5ddc:	7f 09       	sbc	r23, r15
    5dde:	2a e0       	ldi	r18, 0x0A	; 10
    5de0:	ce 01       	movw	r24, r28
    5de2:	88 df       	rcall	.-240    	; 0x5cf4 <_ZN5Print11printNumberEmh>
    5de4:	80 0f       	add	r24, r16
    5de6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5de8:	df 91       	pop	r29
    5dea:	cf 91       	pop	r28
    5dec:	1f 91       	pop	r17
    5dee:	0f 91       	pop	r16
    5df0:	ff 90       	pop	r15
    5df2:	ef 90       	pop	r14
    5df4:	df 90       	pop	r13
    5df6:	cf 90       	pop	r12
    5df8:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    5dfa:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    5dfc:	df 91       	pop	r29
    5dfe:	cf 91       	pop	r28
    5e00:	1f 91       	pop	r17
    5e02:	0f 91       	pop	r16
    5e04:	ff 90       	pop	r15
    5e06:	ef 90       	pop	r14
    5e08:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    5e0a:	cf 90       	pop	r12
    5e0c:	73 cf       	rjmp	.-282    	; 0x5cf4 <_ZN5Print11printNumberEmh>

00005e0e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    5e0e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    5e10:	ab 01       	movw	r20, r22
    5e12:	77 0f       	add	r23, r23
    5e14:	66 0b       	sbc	r22, r22
    5e16:	77 0b       	sbc	r23, r23
    5e18:	b5 cf       	rjmp	.-150    	; 0x5d84 <_ZN5Print5printEli>

00005e1a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    5e1a:	0f 93       	push	r16
    5e1c:	1f 93       	push	r17
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    5e24:	f4 df       	rcall	.-24     	; 0x5e0e <_ZN5Print5printEii>
    5e26:	8c 01       	movw	r16, r24
  n += println();
    5e28:	ce 01       	movw	r24, r28
    5e2a:	4f df       	rcall	.-354    	; 0x5cca <_ZN5Print7printlnEv>
  return n;
}
    5e2c:	80 0f       	add	r24, r16
    5e2e:	91 1f       	adc	r25, r17
    5e30:	df 91       	pop	r29
    5e32:	cf 91       	pop	r28
    5e34:	1f 91       	pop	r17
    5e36:	0f 91       	pop	r16
    5e38:	08 95       	ret

00005e3a <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5e3a:	1f 92       	push	r1
    5e3c:	0f 92       	push	r0
    5e3e:	0f b6       	in	r0, 0x3f	; 63
    5e40:	0f 92       	push	r0
    5e42:	11 24       	eor	r1, r1
    5e44:	2f 93       	push	r18
    5e46:	3f 93       	push	r19
    5e48:	8f 93       	push	r24
    5e4a:	9f 93       	push	r25
    5e4c:	af 93       	push	r26
    5e4e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5e50:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <timer0_millis>
    5e54:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <timer0_millis+0x1>
    5e58:	a0 91 9a 05 	lds	r26, 0x059A	; 0x80059a <timer0_millis+0x2>
    5e5c:	b0 91 9b 05 	lds	r27, 0x059B	; 0x80059b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5e60:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5e64:	23 e0       	ldi	r18, 0x03	; 3
    5e66:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5e68:	2d 37       	cpi	r18, 0x7D	; 125
    5e6a:	20 f4       	brcc	.+8      	; 0x5e74 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5e6c:	01 96       	adiw	r24, 0x01	; 1
    5e6e:	a1 1d       	adc	r26, r1
    5e70:	b1 1d       	adc	r27, r1
    5e72:	05 c0       	rjmp	.+10     	; 0x5e7e <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5e74:	26 e8       	ldi	r18, 0x86	; 134
    5e76:	23 0f       	add	r18, r19
		m += 1;
    5e78:	02 96       	adiw	r24, 0x02	; 2
    5e7a:	a1 1d       	adc	r26, r1
    5e7c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5e7e:	20 93 97 05 	sts	0x0597, r18	; 0x800597 <timer0_fract>
	timer0_millis = m;
    5e82:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <timer0_millis>
    5e86:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <timer0_millis+0x1>
    5e8a:	a0 93 9a 05 	sts	0x059A, r26	; 0x80059a <timer0_millis+0x2>
    5e8e:	b0 93 9b 05 	sts	0x059B, r27	; 0x80059b <timer0_millis+0x3>
	timer0_overflow_count++;
    5e92:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <timer0_overflow_count>
    5e96:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <timer0_overflow_count+0x1>
    5e9a:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <timer0_overflow_count+0x2>
    5e9e:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <timer0_overflow_count+0x3>
    5ea2:	01 96       	adiw	r24, 0x01	; 1
    5ea4:	a1 1d       	adc	r26, r1
    5ea6:	b1 1d       	adc	r27, r1
    5ea8:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <timer0_overflow_count>
    5eac:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <timer0_overflow_count+0x1>
    5eb0:	a0 93 9e 05 	sts	0x059E, r26	; 0x80059e <timer0_overflow_count+0x2>
    5eb4:	b0 93 9f 05 	sts	0x059F, r27	; 0x80059f <timer0_overflow_count+0x3>
}
    5eb8:	bf 91       	pop	r27
    5eba:	af 91       	pop	r26
    5ebc:	9f 91       	pop	r25
    5ebe:	8f 91       	pop	r24
    5ec0:	3f 91       	pop	r19
    5ec2:	2f 91       	pop	r18
    5ec4:	0f 90       	pop	r0
    5ec6:	0f be       	out	0x3f, r0	; 63
    5ec8:	0f 90       	pop	r0
    5eca:	1f 90       	pop	r1
    5ecc:	18 95       	reti

00005ece <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5ece:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5ed0:	f8 94       	cli
	m = timer0_millis;
    5ed2:	60 91 98 05 	lds	r22, 0x0598	; 0x800598 <timer0_millis>
    5ed6:	70 91 99 05 	lds	r23, 0x0599	; 0x800599 <timer0_millis+0x1>
    5eda:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <timer0_millis+0x2>
    5ede:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <timer0_millis+0x3>
	SREG = oldSREG;
    5ee2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5ee4:	08 95       	ret

00005ee6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5ee6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5ee8:	f8 94       	cli
	m = timer0_overflow_count;
    5eea:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <timer0_overflow_count>
    5eee:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <timer0_overflow_count+0x1>
    5ef2:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <timer0_overflow_count+0x2>
    5ef6:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5efa:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5efc:	a8 9b       	sbis	0x15, 0	; 21
    5efe:	05 c0       	rjmp	.+10     	; 0x5f0a <micros+0x24>
    5f00:	2f 3f       	cpi	r18, 0xFF	; 255
    5f02:	19 f0       	breq	.+6      	; 0x5f0a <micros+0x24>
		m++;
    5f04:	01 96       	adiw	r24, 0x01	; 1
    5f06:	a1 1d       	adc	r26, r1
    5f08:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5f0a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5f0c:	ba 2f       	mov	r27, r26
    5f0e:	a9 2f       	mov	r26, r25
    5f10:	98 2f       	mov	r25, r24
    5f12:	88 27       	eor	r24, r24
    5f14:	82 0f       	add	r24, r18
    5f16:	91 1d       	adc	r25, r1
    5f18:	a1 1d       	adc	r26, r1
    5f1a:	b1 1d       	adc	r27, r1
    5f1c:	bc 01       	movw	r22, r24
    5f1e:	cd 01       	movw	r24, r26
    5f20:	42 e0       	ldi	r20, 0x02	; 2
    5f22:	66 0f       	add	r22, r22
    5f24:	77 1f       	adc	r23, r23
    5f26:	88 1f       	adc	r24, r24
    5f28:	99 1f       	adc	r25, r25
    5f2a:	4a 95       	dec	r20
    5f2c:	d1 f7       	brne	.-12     	; 0x5f22 <micros+0x3c>
}
    5f2e:	08 95       	ret

00005f30 <delay>:

void delay(unsigned long ms)
{
    5f30:	8f 92       	push	r8
    5f32:	9f 92       	push	r9
    5f34:	af 92       	push	r10
    5f36:	bf 92       	push	r11
    5f38:	cf 92       	push	r12
    5f3a:	df 92       	push	r13
    5f3c:	ef 92       	push	r14
    5f3e:	ff 92       	push	r15
    5f40:	6b 01       	movw	r12, r22
    5f42:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5f44:	d0 df       	rcall	.-96     	; 0x5ee6 <micros>
    5f46:	4b 01       	movw	r8, r22
    5f48:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5f4a:	c1 14       	cp	r12, r1
    5f4c:	d1 04       	cpc	r13, r1
    5f4e:	e1 04       	cpc	r14, r1
    5f50:	f1 04       	cpc	r15, r1
		yield();
    5f52:	f1 f0       	breq	.+60     	; 0x5f90 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5f54:	3c d3       	rcall	.+1656   	; 0x65ce <yield>
    5f56:	c7 df       	rcall	.-114    	; 0x5ee6 <micros>
    5f58:	dc 01       	movw	r26, r24
    5f5a:	cb 01       	movw	r24, r22
    5f5c:	88 19       	sub	r24, r8
    5f5e:	99 09       	sbc	r25, r9
    5f60:	aa 09       	sbc	r26, r10
    5f62:	bb 09       	sbc	r27, r11
    5f64:	88 3e       	cpi	r24, 0xE8	; 232
    5f66:	93 40       	sbci	r25, 0x03	; 3
    5f68:	a1 05       	cpc	r26, r1
    5f6a:	b1 05       	cpc	r27, r1
    5f6c:	70 f3       	brcs	.-36     	; 0x5f4a <delay+0x1a>
			ms--;
    5f6e:	21 e0       	ldi	r18, 0x01	; 1
    5f70:	c2 1a       	sub	r12, r18
    5f72:	d1 08       	sbc	r13, r1
    5f74:	e1 08       	sbc	r14, r1
    5f76:	f1 08       	sbc	r15, r1
			start += 1000;
    5f78:	88 ee       	ldi	r24, 0xE8	; 232
    5f7a:	88 0e       	add	r8, r24
    5f7c:	83 e0       	ldi	r24, 0x03	; 3
    5f7e:	98 1e       	adc	r9, r24
    5f80:	a1 1c       	adc	r10, r1
    5f82:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5f84:	c1 14       	cp	r12, r1
    5f86:	d1 04       	cpc	r13, r1
    5f88:	e1 04       	cpc	r14, r1
    5f8a:	f1 04       	cpc	r15, r1
    5f8c:	21 f7       	brne	.-56     	; 0x5f56 <delay+0x26>
    5f8e:	dd cf       	rjmp	.-70     	; 0x5f4a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5f90:	ff 90       	pop	r15
    5f92:	ef 90       	pop	r14
    5f94:	df 90       	pop	r13
    5f96:	cf 90       	pop	r12
    5f98:	bf 90       	pop	r11
    5f9a:	af 90       	pop	r10
    5f9c:	9f 90       	pop	r9
    5f9e:	8f 90       	pop	r8
    5fa0:	08 95       	ret

00005fa2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5fa2:	82 30       	cpi	r24, 0x02	; 2
    5fa4:	91 05       	cpc	r25, r1
    5fa6:	38 f0       	brcs	.+14     	; 0x5fb6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5fa8:	88 0f       	add	r24, r24
    5faa:	99 1f       	adc	r25, r25
    5fac:	88 0f       	add	r24, r24
    5fae:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5fb0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5fb2:	01 97       	sbiw	r24, 0x01	; 1
    5fb4:	f1 f7       	brne	.-4      	; 0x5fb2 <delayMicroseconds+0x10>
    5fb6:	08 95       	ret

00005fb8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5fb8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5fba:	84 b5       	in	r24, 0x24	; 36
    5fbc:	82 60       	ori	r24, 0x02	; 2
    5fbe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5fc0:	84 b5       	in	r24, 0x24	; 36
    5fc2:	81 60       	ori	r24, 0x01	; 1
    5fc4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5fc6:	85 b5       	in	r24, 0x25	; 37
    5fc8:	82 60       	ori	r24, 0x02	; 2
    5fca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5fcc:	85 b5       	in	r24, 0x25	; 37
    5fce:	81 60       	ori	r24, 0x01	; 1
    5fd0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5fd2:	ee e6       	ldi	r30, 0x6E	; 110
    5fd4:	f0 e0       	ldi	r31, 0x00	; 0
    5fd6:	80 81       	ld	r24, Z
    5fd8:	81 60       	ori	r24, 0x01	; 1
    5fda:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5fdc:	e1 e8       	ldi	r30, 0x81	; 129
    5fde:	f0 e0       	ldi	r31, 0x00	; 0
    5fe0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5fe2:	80 81       	ld	r24, Z
    5fe4:	82 60       	ori	r24, 0x02	; 2
    5fe6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5fe8:	80 81       	ld	r24, Z
    5fea:	81 60       	ori	r24, 0x01	; 1
    5fec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5fee:	e0 e8       	ldi	r30, 0x80	; 128
    5ff0:	f0 e0       	ldi	r31, 0x00	; 0
    5ff2:	80 81       	ld	r24, Z
    5ff4:	81 60       	ori	r24, 0x01	; 1
    5ff6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5ff8:	e1 eb       	ldi	r30, 0xB1	; 177
    5ffa:	f0 e0       	ldi	r31, 0x00	; 0
    5ffc:	80 81       	ld	r24, Z
    5ffe:	84 60       	ori	r24, 0x04	; 4
    6000:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6002:	e0 eb       	ldi	r30, 0xB0	; 176
    6004:	f0 e0       	ldi	r31, 0x00	; 0
    6006:	80 81       	ld	r24, Z
    6008:	81 60       	ori	r24, 0x01	; 1
    600a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    600c:	e1 e9       	ldi	r30, 0x91	; 145
    600e:	f0 e0       	ldi	r31, 0x00	; 0
    6010:	80 81       	ld	r24, Z
    6012:	82 60       	ori	r24, 0x02	; 2
    6014:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6016:	80 81       	ld	r24, Z
    6018:	81 60       	ori	r24, 0x01	; 1
    601a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    601c:	e0 e9       	ldi	r30, 0x90	; 144
    601e:	f0 e0       	ldi	r31, 0x00	; 0
    6020:	80 81       	ld	r24, Z
    6022:	81 60       	ori	r24, 0x01	; 1
    6024:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6026:	e1 ea       	ldi	r30, 0xA1	; 161
    6028:	f0 e0       	ldi	r31, 0x00	; 0
    602a:	80 81       	ld	r24, Z
    602c:	82 60       	ori	r24, 0x02	; 2
    602e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6030:	80 81       	ld	r24, Z
    6032:	81 60       	ori	r24, 0x01	; 1
    6034:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6036:	e0 ea       	ldi	r30, 0xA0	; 160
    6038:	f0 e0       	ldi	r31, 0x00	; 0
    603a:	80 81       	ld	r24, Z
    603c:	81 60       	ori	r24, 0x01	; 1
    603e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6040:	e1 e2       	ldi	r30, 0x21	; 33
    6042:	f1 e0       	ldi	r31, 0x01	; 1
    6044:	80 81       	ld	r24, Z
    6046:	82 60       	ori	r24, 0x02	; 2
    6048:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    604a:	80 81       	ld	r24, Z
    604c:	81 60       	ori	r24, 0x01	; 1
    604e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6050:	e0 e2       	ldi	r30, 0x20	; 32
    6052:	f1 e0       	ldi	r31, 0x01	; 1
    6054:	80 81       	ld	r24, Z
    6056:	81 60       	ori	r24, 0x01	; 1
    6058:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    605a:	ea e7       	ldi	r30, 0x7A	; 122
    605c:	f0 e0       	ldi	r31, 0x00	; 0
    605e:	80 81       	ld	r24, Z
    6060:	84 60       	ori	r24, 0x04	; 4
    6062:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6064:	80 81       	ld	r24, Z
    6066:	82 60       	ori	r24, 0x02	; 2
    6068:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    606a:	80 81       	ld	r24, Z
    606c:	81 60       	ori	r24, 0x01	; 1
    606e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6070:	80 81       	ld	r24, Z
    6072:	80 68       	ori	r24, 0x80	; 128
    6074:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6076:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    607a:	08 95       	ret

0000607c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	fc 01       	movw	r30, r24
    6080:	31 97       	sbiw	r30, 0x01	; 1
    6082:	e2 31       	cpi	r30, 0x12	; 18
    6084:	f1 05       	cpc	r31, r1
    6086:	08 f0       	brcs	.+2      	; 0x608a <turnOffPWM+0xe>
    6088:	4d c0       	rjmp	.+154    	; 0x6124 <turnOffPWM+0xa8>
    608a:	88 27       	eor	r24, r24
    608c:	ee 58       	subi	r30, 0x8E	; 142
    608e:	ff 4f       	sbci	r31, 0xFF	; 255
    6090:	8f 4f       	sbci	r24, 0xFF	; 255
    6092:	eb c2       	rjmp	.+1494   	; 0x666a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6094:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6098:	8f 77       	andi	r24, 0x7F	; 127
    609a:	03 c0       	rjmp	.+6      	; 0x60a2 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    609c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    60a0:	8f 7d       	andi	r24, 0xDF	; 223
    60a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    60a6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    60a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    60ac:	87 7f       	andi	r24, 0xF7	; 247
    60ae:	f9 cf       	rjmp	.-14     	; 0x60a2 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    60b0:	84 b5       	in	r24, 0x24	; 36
    60b2:	8f 77       	andi	r24, 0x7F	; 127
    60b4:	02 c0       	rjmp	.+4      	; 0x60ba <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    60b6:	84 b5       	in	r24, 0x24	; 36
    60b8:	8f 7d       	andi	r24, 0xDF	; 223
    60ba:	84 bd       	out	0x24, r24	; 36
    60bc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    60be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    60c2:	8f 77       	andi	r24, 0x7F	; 127
    60c4:	03 c0       	rjmp	.+6      	; 0x60cc <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    60c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    60ca:	8f 7d       	andi	r24, 0xDF	; 223
    60cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    60d0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    60d2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    60d6:	8f 77       	andi	r24, 0x7F	; 127
    60d8:	07 c0       	rjmp	.+14     	; 0x60e8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    60da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    60de:	8f 7d       	andi	r24, 0xDF	; 223
    60e0:	03 c0       	rjmp	.+6      	; 0x60e8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    60e2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    60e6:	87 7f       	andi	r24, 0xF7	; 247
    60e8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    60ec:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    60ee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    60f2:	8f 77       	andi	r24, 0x7F	; 127
    60f4:	07 c0       	rjmp	.+14     	; 0x6104 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    60f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    60fa:	8f 7d       	andi	r24, 0xDF	; 223
    60fc:	03 c0       	rjmp	.+6      	; 0x6104 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    60fe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6102:	87 7f       	andi	r24, 0xF7	; 247
    6104:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6108:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    610a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    610e:	8f 77       	andi	r24, 0x7F	; 127
    6110:	07 c0       	rjmp	.+14     	; 0x6120 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6112:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6116:	8f 7d       	andi	r24, 0xDF	; 223
    6118:	03 c0       	rjmp	.+6      	; 0x6120 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    611a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    611e:	87 7f       	andi	r24, 0xF7	; 247
    6120:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6124:	08 95       	ret

00006126 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6126:	cf 93       	push	r28
    6128:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	fc 01       	movw	r30, r24
    612e:	e2 5b       	subi	r30, 0xB2	; 178
    6130:	fe 4f       	sbci	r31, 0xFE	; 254
    6132:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6134:	fc 01       	movw	r30, r24
    6136:	ec 56       	subi	r30, 0x6C	; 108
    6138:	fe 4f       	sbci	r31, 0xFE	; 254
    613a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    613c:	88 23       	and	r24, r24
    613e:	61 f1       	breq	.+88     	; 0x6198 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	88 0f       	add	r24, r24
    6144:	99 1f       	adc	r25, r25
    6146:	fc 01       	movw	r30, r24
    6148:	e2 5f       	subi	r30, 0xF2	; 242
    614a:	fd 4f       	sbci	r31, 0xFD	; 253
    614c:	c5 91       	lpm	r28, Z+
    614e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6150:	fc 01       	movw	r30, r24
    6152:	ec 50       	subi	r30, 0x0C	; 12
    6154:	fe 4f       	sbci	r31, 0xFE	; 254
    6156:	a5 91       	lpm	r26, Z+
    6158:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    615a:	61 11       	cpse	r22, r1
    615c:	09 c0       	rjmp	.+18     	; 0x6170 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    615e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6160:	f8 94       	cli
		*reg &= ~bit;
    6162:	88 81       	ld	r24, Y
    6164:	20 95       	com	r18
    6166:	82 23       	and	r24, r18
    6168:	88 83       	st	Y, r24
		*out &= ~bit;
    616a:	ec 91       	ld	r30, X
    616c:	2e 23       	and	r18, r30
    616e:	0b c0       	rjmp	.+22     	; 0x6186 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6170:	62 30       	cpi	r22, 0x02	; 2
    6172:	61 f4       	brne	.+24     	; 0x618c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6174:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6176:	f8 94       	cli
		*reg &= ~bit;
    6178:	88 81       	ld	r24, Y
    617a:	32 2f       	mov	r19, r18
    617c:	30 95       	com	r19
    617e:	83 23       	and	r24, r19
    6180:	88 83       	st	Y, r24
		*out |= bit;
    6182:	ec 91       	ld	r30, X
    6184:	2e 2b       	or	r18, r30
    6186:	2c 93       	st	X, r18
		SREG = oldSREG;
    6188:	9f bf       	out	0x3f, r25	; 63
    618a:	06 c0       	rjmp	.+12     	; 0x6198 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    618c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    618e:	f8 94       	cli
		*reg |= bit;
    6190:	e8 81       	ld	r30, Y
    6192:	2e 2b       	or	r18, r30
    6194:	28 83       	st	Y, r18
		SREG = oldSREG;
    6196:	8f bf       	out	0x3f, r24	; 63
	}
}
    6198:	df 91       	pop	r29
    619a:	cf 91       	pop	r28
    619c:	08 95       	ret

0000619e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    619e:	1f 93       	push	r17
    61a0:	cf 93       	push	r28
    61a2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    61a4:	28 2f       	mov	r18, r24
    61a6:	30 e0       	ldi	r19, 0x00	; 0
    61a8:	f9 01       	movw	r30, r18
    61aa:	e8 5f       	subi	r30, 0xF8	; 248
    61ac:	fe 4f       	sbci	r31, 0xFE	; 254
    61ae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    61b0:	f9 01       	movw	r30, r18
    61b2:	e2 5b       	subi	r30, 0xB2	; 178
    61b4:	fe 4f       	sbci	r31, 0xFE	; 254
    61b6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    61b8:	f9 01       	movw	r30, r18
    61ba:	ec 56       	subi	r30, 0x6C	; 108
    61bc:	fe 4f       	sbci	r31, 0xFE	; 254
    61be:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    61c0:	cc 23       	and	r28, r28
    61c2:	b9 f0       	breq	.+46     	; 0x61f2 <digitalWrite+0x54>
    61c4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    61c6:	81 11       	cpse	r24, r1
    61c8:	59 df       	rcall	.-334    	; 0x607c <turnOffPWM>

	out = portOutputRegister(port);
    61ca:	ec 2f       	mov	r30, r28
    61cc:	f0 e0       	ldi	r31, 0x00	; 0
    61ce:	ee 0f       	add	r30, r30
    61d0:	ff 1f       	adc	r31, r31
    61d2:	ec 50       	subi	r30, 0x0C	; 12
    61d4:	fe 4f       	sbci	r31, 0xFE	; 254
    61d6:	a5 91       	lpm	r26, Z+
    61d8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    61da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    61dc:	f8 94       	cli

	if (val == LOW) {
    61de:	11 11       	cpse	r17, r1
    61e0:	04 c0       	rjmp	.+8      	; 0x61ea <digitalWrite+0x4c>
		*out &= ~bit;
    61e2:	8c 91       	ld	r24, X
    61e4:	d0 95       	com	r29
    61e6:	d8 23       	and	r29, r24
    61e8:	02 c0       	rjmp	.+4      	; 0x61ee <digitalWrite+0x50>
	} else {
		*out |= bit;
    61ea:	ec 91       	ld	r30, X
    61ec:	de 2b       	or	r29, r30
    61ee:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    61f0:	9f bf       	out	0x3f, r25	; 63
}
    61f2:	df 91       	pop	r29
    61f4:	cf 91       	pop	r28
    61f6:	1f 91       	pop	r17
    61f8:	08 95       	ret

000061fa <digitalRead>:

int digitalRead(uint8_t pin)
{
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    61fe:	28 2f       	mov	r18, r24
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	f9 01       	movw	r30, r18
    6204:	e8 5f       	subi	r30, 0xF8	; 248
    6206:	fe 4f       	sbci	r31, 0xFE	; 254
    6208:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    620a:	f9 01       	movw	r30, r18
    620c:	e2 5b       	subi	r30, 0xB2	; 178
    620e:	fe 4f       	sbci	r31, 0xFE	; 254
    6210:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6212:	f9 01       	movw	r30, r18
    6214:	ec 56       	subi	r30, 0x6C	; 108
    6216:	fe 4f       	sbci	r31, 0xFE	; 254
    6218:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    621a:	cc 23       	and	r28, r28
    621c:	89 f0       	breq	.+34     	; 0x6240 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    621e:	81 11       	cpse	r24, r1
    6220:	2d df       	rcall	.-422    	; 0x607c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6222:	ec 2f       	mov	r30, r28
    6224:	f0 e0       	ldi	r31, 0x00	; 0
    6226:	ee 0f       	add	r30, r30
    6228:	ff 1f       	adc	r31, r31
    622a:	e6 52       	subi	r30, 0x26	; 38
    622c:	fe 4f       	sbci	r31, 0xFE	; 254
    622e:	a5 91       	lpm	r26, Z+
    6230:	b4 91       	lpm	r27, Z
    6232:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6234:	ed 23       	and	r30, r29
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	21 f4       	brne	.+8      	; 0x6244 <digitalRead+0x4a>
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <digitalRead+0x4a>
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6244:	df 91       	pop	r29
    6246:	cf 91       	pop	r28
    6248:	08 95       	ret

0000624a <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    624a:	4f 92       	push	r4
    624c:	5f 92       	push	r5
    624e:	6f 92       	push	r6
    6250:	7f 92       	push	r7
    6252:	af 92       	push	r10
    6254:	bf 92       	push	r11
    6256:	cf 92       	push	r12
    6258:	df 92       	push	r13
    625a:	ef 92       	push	r14
    625c:	ff 92       	push	r15
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	29 01       	movw	r4, r18
    626c:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    626e:	9b 01       	movw	r18, r22
    6270:	ac 01       	movw	r20, r24
    6272:	24 19       	sub	r18, r4
    6274:	35 09       	sbc	r19, r5
    6276:	46 09       	sbc	r20, r6
    6278:	57 09       	sbc	r21, r7
    627a:	8a 89       	ldd	r24, Y+18	; 0x12
    627c:	9b 89       	ldd	r25, Y+19	; 0x13
    627e:	ac 89       	ldd	r26, Y+20	; 0x14
    6280:	bd 89       	ldd	r27, Y+21	; 0x15
    6282:	bc 01       	movw	r22, r24
    6284:	cd 01       	movw	r24, r26
    6286:	6a 19       	sub	r22, r10
    6288:	7b 09       	sbc	r23, r11
    628a:	8c 09       	sbc	r24, r12
    628c:	9d 09       	sbc	r25, r13
    628e:	a0 d1       	rcall	.+832    	; 0x65d0 <__mulsi3>
    6290:	a8 01       	movw	r20, r16
    6292:	97 01       	movw	r18, r14
    6294:	24 19       	sub	r18, r4
    6296:	35 09       	sbc	r19, r5
    6298:	46 09       	sbc	r20, r6
    629a:	57 09       	sbc	r21, r7
    629c:	ca d1       	rcall	.+916    	; 0x6632 <__divmodsi4>
    629e:	ca 01       	movw	r24, r20
    62a0:	b9 01       	movw	r22, r18
    62a2:	6a 0d       	add	r22, r10
    62a4:	7b 1d       	adc	r23, r11
    62a6:	8c 1d       	adc	r24, r12
    62a8:	9d 1d       	adc	r25, r13
}
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	1f 91       	pop	r17
    62b0:	0f 91       	pop	r16
    62b2:	ff 90       	pop	r15
    62b4:	ef 90       	pop	r14
    62b6:	df 90       	pop	r13
    62b8:	cf 90       	pop	r12
    62ba:	bf 90       	pop	r11
    62bc:	af 90       	pop	r10
    62be:	7f 90       	pop	r7
    62c0:	6f 90       	pop	r6
    62c2:	5f 90       	pop	r5
    62c4:	4f 90       	pop	r4
    62c6:	08 95       	ret

000062c8 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    62c8:	fc 01       	movw	r30, r24
    62ca:	80 81       	ld	r24, Z
    62cc:	91 81       	ldd	r25, Z+1	; 0x01
    62ce:	00 97       	sbiw	r24, 0x00	; 0
    62d0:	09 f0       	breq	.+2      	; 0x62d4 <_ZN6StringD1Ev+0xc>
    62d2:	84 c2       	rjmp	.+1288   	; 0x67dc <free>
    62d4:	08 95       	ret

000062d6 <_ZN6String10invalidateEv>:
    62d6:	cf 93       	push	r28
    62d8:	df 93       	push	r29
    62da:	ec 01       	movw	r28, r24
    62dc:	88 81       	ld	r24, Y
    62de:	99 81       	ldd	r25, Y+1	; 0x01
    62e0:	00 97       	sbiw	r24, 0x00	; 0
    62e2:	09 f0       	breq	.+2      	; 0x62e6 <_ZN6String10invalidateEv+0x10>
    62e4:	7b d2       	rcall	.+1270   	; 0x67dc <free>
    62e6:	19 82       	std	Y+1, r1	; 0x01
    62e8:	18 82       	st	Y, r1
    62ea:	1d 82       	std	Y+5, r1	; 0x05
    62ec:	1c 82       	std	Y+4, r1	; 0x04
    62ee:	1b 82       	std	Y+3, r1	; 0x03
    62f0:	1a 82       	std	Y+2, r1	; 0x02
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	08 95       	ret

000062f8 <_ZN6String12changeBufferEj>:
    62f8:	0f 93       	push	r16
    62fa:	1f 93       	push	r17
    62fc:	cf 93       	push	r28
    62fe:	df 93       	push	r29
    6300:	ec 01       	movw	r28, r24
    6302:	8b 01       	movw	r16, r22
    6304:	6f 5f       	subi	r22, 0xFF	; 255
    6306:	7f 4f       	sbci	r23, 0xFF	; 255
    6308:	88 81       	ld	r24, Y
    630a:	99 81       	ldd	r25, Y+1	; 0x01
    630c:	f0 d2       	rcall	.+1504   	; 0x68ee <realloc>
    630e:	00 97       	sbiw	r24, 0x00	; 0
    6310:	31 f0       	breq	.+12     	; 0x631e <_ZN6String12changeBufferEj+0x26>
    6312:	99 83       	std	Y+1, r25	; 0x01
    6314:	88 83       	st	Y, r24
    6316:	1b 83       	std	Y+3, r17	; 0x03
    6318:	0a 83       	std	Y+2, r16	; 0x02
    631a:	81 e0       	ldi	r24, 0x01	; 1
    631c:	01 c0       	rjmp	.+2      	; 0x6320 <_ZN6String12changeBufferEj+0x28>
    631e:	80 e0       	ldi	r24, 0x00	; 0
    6320:	df 91       	pop	r29
    6322:	cf 91       	pop	r28
    6324:	1f 91       	pop	r17
    6326:	0f 91       	pop	r16
    6328:	08 95       	ret

0000632a <_ZN6String7reserveEj>:
    632a:	cf 93       	push	r28
    632c:	df 93       	push	r29
    632e:	ec 01       	movw	r28, r24
    6330:	88 81       	ld	r24, Y
    6332:	99 81       	ldd	r25, Y+1	; 0x01
    6334:	89 2b       	or	r24, r25
    6336:	29 f0       	breq	.+10     	; 0x6342 <_ZN6String7reserveEj+0x18>
    6338:	8a 81       	ldd	r24, Y+2	; 0x02
    633a:	9b 81       	ldd	r25, Y+3	; 0x03
    633c:	86 17       	cp	r24, r22
    633e:	97 07       	cpc	r25, r23
    6340:	58 f4       	brcc	.+22     	; 0x6358 <_ZN6String7reserveEj+0x2e>
    6342:	ce 01       	movw	r24, r28
    6344:	d9 df       	rcall	.-78     	; 0x62f8 <_ZN6String12changeBufferEj>
    6346:	88 23       	and	r24, r24
    6348:	41 f0       	breq	.+16     	; 0x635a <_ZN6String7reserveEj+0x30>
    634a:	8c 81       	ldd	r24, Y+4	; 0x04
    634c:	9d 81       	ldd	r25, Y+5	; 0x05
    634e:	89 2b       	or	r24, r25
    6350:	19 f4       	brne	.+6      	; 0x6358 <_ZN6String7reserveEj+0x2e>
    6352:	e8 81       	ld	r30, Y
    6354:	f9 81       	ldd	r31, Y+1	; 0x01
    6356:	10 82       	st	Z, r1
    6358:	81 e0       	ldi	r24, 0x01	; 1
    635a:	df 91       	pop	r29
    635c:	cf 91       	pop	r28
    635e:	08 95       	ret

00006360 <_ZN6String4copyEPKcj>:
    6360:	ef 92       	push	r14
    6362:	ff 92       	push	r15
    6364:	0f 93       	push	r16
    6366:	1f 93       	push	r17
    6368:	cf 93       	push	r28
    636a:	df 93       	push	r29
    636c:	ec 01       	movw	r28, r24
    636e:	7b 01       	movw	r14, r22
    6370:	8a 01       	movw	r16, r20
    6372:	ba 01       	movw	r22, r20
    6374:	da df       	rcall	.-76     	; 0x632a <_ZN6String7reserveEj>
    6376:	81 11       	cpse	r24, r1
    6378:	03 c0       	rjmp	.+6      	; 0x6380 <_ZN6String4copyEPKcj+0x20>
    637a:	ce 01       	movw	r24, r28
    637c:	ac df       	rcall	.-168    	; 0x62d6 <_ZN6String10invalidateEv>
    637e:	06 c0       	rjmp	.+12     	; 0x638c <_ZN6String4copyEPKcj+0x2c>
    6380:	1d 83       	std	Y+5, r17	; 0x05
    6382:	0c 83       	std	Y+4, r16	; 0x04
    6384:	b7 01       	movw	r22, r14
    6386:	88 81       	ld	r24, Y
    6388:	99 81       	ldd	r25, Y+1	; 0x01
    638a:	b6 d3       	rcall	.+1900   	; 0x6af8 <strcpy>
    638c:	ce 01       	movw	r24, r28
    638e:	df 91       	pop	r29
    6390:	cf 91       	pop	r28
    6392:	1f 91       	pop	r17
    6394:	0f 91       	pop	r16
    6396:	ff 90       	pop	r15
    6398:	ef 90       	pop	r14
    639a:	08 95       	ret

0000639c <_ZN6StringC1EPKc>:
    639c:	fc 01       	movw	r30, r24
    639e:	11 82       	std	Z+1, r1	; 0x01
    63a0:	10 82       	st	Z, r1
    63a2:	13 82       	std	Z+3, r1	; 0x03
    63a4:	12 82       	std	Z+2, r1	; 0x02
    63a6:	15 82       	std	Z+5, r1	; 0x05
    63a8:	14 82       	std	Z+4, r1	; 0x04
    63aa:	61 15       	cp	r22, r1
    63ac:	71 05       	cpc	r23, r1
    63ae:	49 f0       	breq	.+18     	; 0x63c2 <_ZN6StringC1EPKc+0x26>
    63b0:	fb 01       	movw	r30, r22
    63b2:	01 90       	ld	r0, Z+
    63b4:	00 20       	and	r0, r0
    63b6:	e9 f7       	brne	.-6      	; 0x63b2 <_ZN6StringC1EPKc+0x16>
    63b8:	31 97       	sbiw	r30, 0x01	; 1
    63ba:	af 01       	movw	r20, r30
    63bc:	46 1b       	sub	r20, r22
    63be:	57 0b       	sbc	r21, r23
    63c0:	cf cf       	rjmp	.-98     	; 0x6360 <_ZN6String4copyEPKcj>
    63c2:	08 95       	ret

000063c4 <_ZN6StringaSEPKc>:
    63c4:	cf 93       	push	r28
    63c6:	df 93       	push	r29
    63c8:	ec 01       	movw	r28, r24
    63ca:	61 15       	cp	r22, r1
    63cc:	71 05       	cpc	r23, r1
    63ce:	51 f0       	breq	.+20     	; 0x63e4 <_ZN6StringaSEPKc+0x20>
    63d0:	fb 01       	movw	r30, r22
    63d2:	01 90       	ld	r0, Z+
    63d4:	00 20       	and	r0, r0
    63d6:	e9 f7       	brne	.-6      	; 0x63d2 <_ZN6StringaSEPKc+0xe>
    63d8:	31 97       	sbiw	r30, 0x01	; 1
    63da:	af 01       	movw	r20, r30
    63dc:	46 1b       	sub	r20, r22
    63de:	57 0b       	sbc	r21, r23
    63e0:	bf df       	rcall	.-130    	; 0x6360 <_ZN6String4copyEPKcj>
    63e2:	01 c0       	rjmp	.+2      	; 0x63e6 <_ZN6StringaSEPKc+0x22>
    63e4:	78 df       	rcall	.-272    	; 0x62d6 <_ZN6String10invalidateEv>
    63e6:	ce 01       	movw	r24, r28
    63e8:	df 91       	pop	r29
    63ea:	cf 91       	pop	r28
    63ec:	08 95       	ret

000063ee <_ZN6StringC1Ehh>:
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	cd b7       	in	r28, 0x3d	; 61
    63f8:	de b7       	in	r29, 0x3e	; 62
    63fa:	29 97       	sbiw	r28, 0x09	; 9
    63fc:	0f b6       	in	r0, 0x3f	; 63
    63fe:	f8 94       	cli
    6400:	de bf       	out	0x3e, r29	; 62
    6402:	0f be       	out	0x3f, r0	; 63
    6404:	cd bf       	out	0x3d, r28	; 61
    6406:	8c 01       	movw	r16, r24
    6408:	86 2f       	mov	r24, r22
    640a:	f8 01       	movw	r30, r16
    640c:	11 82       	std	Z+1, r1	; 0x01
    640e:	10 82       	st	Z, r1
    6410:	13 82       	std	Z+3, r1	; 0x03
    6412:	12 82       	std	Z+2, r1	; 0x02
    6414:	15 82       	std	Z+5, r1	; 0x05
    6416:	14 82       	std	Z+4, r1	; 0x04
    6418:	50 e0       	ldi	r21, 0x00	; 0
    641a:	be 01       	movw	r22, r28
    641c:	6f 5f       	subi	r22, 0xFF	; 255
    641e:	7f 4f       	sbci	r23, 0xFF	; 255
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	89 d3       	rcall	.+1810   	; 0x6b36 <utoa>
    6424:	be 01       	movw	r22, r28
    6426:	6f 5f       	subi	r22, 0xFF	; 255
    6428:	7f 4f       	sbci	r23, 0xFF	; 255
    642a:	c8 01       	movw	r24, r16
    642c:	cb df       	rcall	.-106    	; 0x63c4 <_ZN6StringaSEPKc>
    642e:	29 96       	adiw	r28, 0x09	; 9
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	de bf       	out	0x3e, r29	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	cd bf       	out	0x3d, r28	; 61
    643a:	df 91       	pop	r29
    643c:	cf 91       	pop	r28
    643e:	1f 91       	pop	r17
    6440:	0f 91       	pop	r16
    6442:	08 95       	ret

00006444 <_ZN6String6concatEPKcj>:
    6444:	ef 92       	push	r14
    6446:	ff 92       	push	r15
    6448:	0f 93       	push	r16
    644a:	1f 93       	push	r17
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	61 15       	cp	r22, r1
    6452:	71 05       	cpc	r23, r1
    6454:	11 f4       	brne	.+4      	; 0x645a <_ZN6String6concatEPKcj+0x16>
    6456:	80 e0       	ldi	r24, 0x00	; 0
    6458:	1a c0       	rjmp	.+52     	; 0x648e <_ZN6String6concatEPKcj+0x4a>
    645a:	41 15       	cp	r20, r1
    645c:	51 05       	cpc	r21, r1
    645e:	b1 f0       	breq	.+44     	; 0x648c <_ZN6String6concatEPKcj+0x48>
    6460:	7b 01       	movw	r14, r22
    6462:	ec 01       	movw	r28, r24
    6464:	8c 81       	ldd	r24, Y+4	; 0x04
    6466:	9d 81       	ldd	r25, Y+5	; 0x05
    6468:	8a 01       	movw	r16, r20
    646a:	08 0f       	add	r16, r24
    646c:	19 1f       	adc	r17, r25
    646e:	b8 01       	movw	r22, r16
    6470:	ce 01       	movw	r24, r28
    6472:	5b df       	rcall	.-330    	; 0x632a <_ZN6String7reserveEj>
    6474:	88 23       	and	r24, r24
    6476:	79 f3       	breq	.-34     	; 0x6456 <_ZN6String6concatEPKcj+0x12>
    6478:	28 81       	ld	r18, Y
    647a:	39 81       	ldd	r19, Y+1	; 0x01
    647c:	8c 81       	ldd	r24, Y+4	; 0x04
    647e:	9d 81       	ldd	r25, Y+5	; 0x05
    6480:	b7 01       	movw	r22, r14
    6482:	82 0f       	add	r24, r18
    6484:	93 1f       	adc	r25, r19
    6486:	38 d3       	rcall	.+1648   	; 0x6af8 <strcpy>
    6488:	1d 83       	std	Y+5, r17	; 0x05
    648a:	0c 83       	std	Y+4, r16	; 0x04
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	1f 91       	pop	r17
    6494:	0f 91       	pop	r16
    6496:	ff 90       	pop	r15
    6498:	ef 90       	pop	r14
    649a:	08 95       	ret

0000649c <_ZN6String6concatERKS_>:
    649c:	fb 01       	movw	r30, r22
    649e:	44 81       	ldd	r20, Z+4	; 0x04
    64a0:	55 81       	ldd	r21, Z+5	; 0x05
    64a2:	60 81       	ld	r22, Z
    64a4:	71 81       	ldd	r23, Z+1	; 0x01
    64a6:	ce cf       	rjmp	.-100    	; 0x6444 <_ZN6String6concatEPKcj>

000064a8 <_ZNK6String9compareToERKS_>:
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	dc 01       	movw	r26, r24
    64ae:	ed 91       	ld	r30, X+
    64b0:	fc 91       	ld	r31, X
    64b2:	eb 01       	movw	r28, r22
    64b4:	a8 81       	ld	r26, Y
    64b6:	b9 81       	ldd	r27, Y+1	; 0x01
    64b8:	30 97       	sbiw	r30, 0x00	; 0
    64ba:	11 f0       	breq	.+4      	; 0x64c0 <_ZNK6String9compareToERKS_+0x18>
    64bc:	10 97       	sbiw	r26, 0x00	; 0
    64be:	c9 f4       	brne	.+50     	; 0x64f2 <_ZNK6String9compareToERKS_+0x4a>
    64c0:	10 97       	sbiw	r26, 0x00	; 0
    64c2:	59 f0       	breq	.+22     	; 0x64da <_ZNK6String9compareToERKS_+0x32>
    64c4:	eb 01       	movw	r28, r22
    64c6:	2c 81       	ldd	r18, Y+4	; 0x04
    64c8:	3d 81       	ldd	r19, Y+5	; 0x05
    64ca:	23 2b       	or	r18, r19
    64cc:	31 f0       	breq	.+12     	; 0x64da <_ZNK6String9compareToERKS_+0x32>
    64ce:	8c 91       	ld	r24, X
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	91 95       	neg	r25
    64d4:	81 95       	neg	r24
    64d6:	91 09       	sbc	r25, r1
    64d8:	13 c0       	rjmp	.+38     	; 0x6500 <_ZNK6String9compareToERKS_+0x58>
    64da:	30 97       	sbiw	r30, 0x00	; 0
    64dc:	79 f0       	breq	.+30     	; 0x64fc <_ZNK6String9compareToERKS_+0x54>
    64de:	dc 01       	movw	r26, r24
    64e0:	14 96       	adiw	r26, 0x04	; 4
    64e2:	8d 91       	ld	r24, X+
    64e4:	9c 91       	ld	r25, X
    64e6:	15 97       	sbiw	r26, 0x05	; 5
    64e8:	89 2b       	or	r24, r25
    64ea:	41 f0       	breq	.+16     	; 0x64fc <_ZNK6String9compareToERKS_+0x54>
    64ec:	80 81       	ld	r24, Z
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	07 c0       	rjmp	.+14     	; 0x6500 <_ZNK6String9compareToERKS_+0x58>
    64f2:	bd 01       	movw	r22, r26
    64f4:	cf 01       	movw	r24, r30
    64f6:	df 91       	pop	r29
    64f8:	cf 91       	pop	r28
    64fa:	f5 c2       	rjmp	.+1514   	; 0x6ae6 <strcmp>
    64fc:	80 e0       	ldi	r24, 0x00	; 0
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	df 91       	pop	r29
    6502:	cf 91       	pop	r28
    6504:	08 95       	ret

00006506 <_ZNK6String6equalsERKS_>:
    6506:	fc 01       	movw	r30, r24
    6508:	44 81       	ldd	r20, Z+4	; 0x04
    650a:	55 81       	ldd	r21, Z+5	; 0x05
    650c:	fb 01       	movw	r30, r22
    650e:	24 81       	ldd	r18, Z+4	; 0x04
    6510:	35 81       	ldd	r19, Z+5	; 0x05
    6512:	42 17       	cp	r20, r18
    6514:	53 07       	cpc	r21, r19
    6516:	21 f4       	brne	.+8      	; 0x6520 <_ZNK6String6equalsERKS_+0x1a>
    6518:	c7 df       	rcall	.-114    	; 0x64a8 <_ZNK6String9compareToERKS_>
    651a:	21 e0       	ldi	r18, 0x01	; 1
    651c:	89 2b       	or	r24, r25
    651e:	09 f0       	breq	.+2      	; 0x6522 <_ZNK6String6equalsERKS_+0x1c>
    6520:	20 e0       	ldi	r18, 0x00	; 0
    6522:	82 2f       	mov	r24, r18
    6524:	08 95       	ret

00006526 <_ZNK6String9substringEjj>:
    6526:	bf 92       	push	r11
    6528:	cf 92       	push	r12
    652a:	df 92       	push	r13
    652c:	ef 92       	push	r14
    652e:	ff 92       	push	r15
    6530:	0f 93       	push	r16
    6532:	1f 93       	push	r17
    6534:	cf 93       	push	r28
    6536:	df 93       	push	r29
    6538:	7c 01       	movw	r14, r24
    653a:	6b 01       	movw	r12, r22
    653c:	8a 01       	movw	r16, r20
    653e:	e9 01       	movw	r28, r18
    6540:	24 17       	cp	r18, r20
    6542:	35 07       	cpc	r19, r21
    6544:	20 f4       	brcc	.+8      	; 0x654e <_ZNK6String9substringEjj+0x28>
    6546:	81 2f       	mov	r24, r17
    6548:	89 01       	movw	r16, r18
    654a:	c4 2f       	mov	r28, r20
    654c:	d8 2f       	mov	r29, r24
    654e:	64 e2       	ldi	r22, 0x24	; 36
    6550:	73 e0       	ldi	r23, 0x03	; 3
    6552:	c7 01       	movw	r24, r14
    6554:	23 df       	rcall	.-442    	; 0x639c <_ZN6StringC1EPKc>
    6556:	d6 01       	movw	r26, r12
    6558:	14 96       	adiw	r26, 0x04	; 4
    655a:	8d 91       	ld	r24, X+
    655c:	9c 91       	ld	r25, X
    655e:	15 97       	sbiw	r26, 0x05	; 5
    6560:	08 17       	cp	r16, r24
    6562:	19 07       	cpc	r17, r25
    6564:	c0 f4       	brcc	.+48     	; 0x6596 <_ZNK6String9substringEjj+0x70>
    6566:	8c 17       	cp	r24, r28
    6568:	9d 07       	cpc	r25, r29
    656a:	08 f4       	brcc	.+2      	; 0x656e <_ZNK6String9substringEjj+0x48>
    656c:	ec 01       	movw	r28, r24
    656e:	d6 01       	movw	r26, r12
    6570:	ed 91       	ld	r30, X+
    6572:	fc 91       	ld	r31, X
    6574:	11 97       	sbiw	r26, 0x01	; 1
    6576:	ec 0f       	add	r30, r28
    6578:	fd 1f       	adc	r31, r29
    657a:	b0 80       	ld	r11, Z
    657c:	10 82       	st	Z, r1
    657e:	6d 91       	ld	r22, X+
    6580:	7c 91       	ld	r23, X
    6582:	60 0f       	add	r22, r16
    6584:	71 1f       	adc	r23, r17
    6586:	c7 01       	movw	r24, r14
    6588:	1d df       	rcall	.-454    	; 0x63c4 <_ZN6StringaSEPKc>
    658a:	d6 01       	movw	r26, r12
    658c:	ed 91       	ld	r30, X+
    658e:	fc 91       	ld	r31, X
    6590:	ec 0f       	add	r30, r28
    6592:	fd 1f       	adc	r31, r29
    6594:	b0 82       	st	Z, r11
    6596:	c7 01       	movw	r24, r14
    6598:	df 91       	pop	r29
    659a:	cf 91       	pop	r28
    659c:	1f 91       	pop	r17
    659e:	0f 91       	pop	r16
    65a0:	ff 90       	pop	r15
    65a2:	ef 90       	pop	r14
    65a4:	df 90       	pop	r13
    65a6:	cf 90       	pop	r12
    65a8:	bf 90       	pop	r11
    65aa:	08 95       	ret

000065ac <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    65ac:	cf 93       	push	r28
    65ae:	df 93       	push	r29
	if (!buffer) return;
    65b0:	fc 01       	movw	r30, r24
    65b2:	c0 81       	ld	r28, Z
    65b4:	d1 81       	ldd	r29, Z+1	; 0x01
    65b6:	20 97       	sbiw	r28, 0x00	; 0
    65b8:	39 f0       	breq	.+14     	; 0x65c8 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    65ba:	88 81       	ld	r24, Y
    65bc:	88 23       	and	r24, r24
    65be:	21 f0       	breq	.+8      	; 0x65c8 <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	79 d2       	rcall	.+1266   	; 0x6ab6 <toupper>
    65c4:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    65c6:	f9 cf       	rjmp	.-14     	; 0x65ba <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	08 95       	ret

000065ce <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    65ce:	08 95       	ret

000065d0 <__mulsi3>:
    65d0:	db 01       	movw	r26, r22
    65d2:	8f 93       	push	r24
    65d4:	9f 93       	push	r25
    65d6:	51 d0       	rcall	.+162    	; 0x667a <__muluhisi3>
    65d8:	bf 91       	pop	r27
    65da:	af 91       	pop	r26
    65dc:	a2 9f       	mul	r26, r18
    65de:	80 0d       	add	r24, r0
    65e0:	91 1d       	adc	r25, r1
    65e2:	a3 9f       	mul	r26, r19
    65e4:	90 0d       	add	r25, r0
    65e6:	b2 9f       	mul	r27, r18
    65e8:	90 0d       	add	r25, r0
    65ea:	11 24       	eor	r1, r1
    65ec:	08 95       	ret

000065ee <__udivmodsi4>:
    65ee:	a1 e2       	ldi	r26, 0x21	; 33
    65f0:	1a 2e       	mov	r1, r26
    65f2:	aa 1b       	sub	r26, r26
    65f4:	bb 1b       	sub	r27, r27
    65f6:	fd 01       	movw	r30, r26
    65f8:	0d c0       	rjmp	.+26     	; 0x6614 <__udivmodsi4_ep>

000065fa <__udivmodsi4_loop>:
    65fa:	aa 1f       	adc	r26, r26
    65fc:	bb 1f       	adc	r27, r27
    65fe:	ee 1f       	adc	r30, r30
    6600:	ff 1f       	adc	r31, r31
    6602:	a2 17       	cp	r26, r18
    6604:	b3 07       	cpc	r27, r19
    6606:	e4 07       	cpc	r30, r20
    6608:	f5 07       	cpc	r31, r21
    660a:	20 f0       	brcs	.+8      	; 0x6614 <__udivmodsi4_ep>
    660c:	a2 1b       	sub	r26, r18
    660e:	b3 0b       	sbc	r27, r19
    6610:	e4 0b       	sbc	r30, r20
    6612:	f5 0b       	sbc	r31, r21

00006614 <__udivmodsi4_ep>:
    6614:	66 1f       	adc	r22, r22
    6616:	77 1f       	adc	r23, r23
    6618:	88 1f       	adc	r24, r24
    661a:	99 1f       	adc	r25, r25
    661c:	1a 94       	dec	r1
    661e:	69 f7       	brne	.-38     	; 0x65fa <__udivmodsi4_loop>
    6620:	60 95       	com	r22
    6622:	70 95       	com	r23
    6624:	80 95       	com	r24
    6626:	90 95       	com	r25
    6628:	9b 01       	movw	r18, r22
    662a:	ac 01       	movw	r20, r24
    662c:	bd 01       	movw	r22, r26
    662e:	cf 01       	movw	r24, r30
    6630:	08 95       	ret

00006632 <__divmodsi4>:
    6632:	05 2e       	mov	r0, r21
    6634:	97 fb       	bst	r25, 7
    6636:	16 f4       	brtc	.+4      	; 0x663c <__divmodsi4+0xa>
    6638:	00 94       	com	r0
    663a:	0f d0       	rcall	.+30     	; 0x665a <__negsi2>
    663c:	57 fd       	sbrc	r21, 7
    663e:	05 d0       	rcall	.+10     	; 0x664a <__divmodsi4_neg2>
    6640:	d6 df       	rcall	.-84     	; 0x65ee <__udivmodsi4>
    6642:	07 fc       	sbrc	r0, 7
    6644:	02 d0       	rcall	.+4      	; 0x664a <__divmodsi4_neg2>
    6646:	46 f4       	brtc	.+16     	; 0x6658 <__divmodsi4_exit>
    6648:	08 c0       	rjmp	.+16     	; 0x665a <__negsi2>

0000664a <__divmodsi4_neg2>:
    664a:	50 95       	com	r21
    664c:	40 95       	com	r20
    664e:	30 95       	com	r19
    6650:	21 95       	neg	r18
    6652:	3f 4f       	sbci	r19, 0xFF	; 255
    6654:	4f 4f       	sbci	r20, 0xFF	; 255
    6656:	5f 4f       	sbci	r21, 0xFF	; 255

00006658 <__divmodsi4_exit>:
    6658:	08 95       	ret

0000665a <__negsi2>:
    665a:	90 95       	com	r25
    665c:	80 95       	com	r24
    665e:	70 95       	com	r23
    6660:	61 95       	neg	r22
    6662:	7f 4f       	sbci	r23, 0xFF	; 255
    6664:	8f 4f       	sbci	r24, 0xFF	; 255
    6666:	9f 4f       	sbci	r25, 0xFF	; 255
    6668:	08 95       	ret

0000666a <__tablejump2__>:
    666a:	ee 0f       	add	r30, r30
    666c:	ff 1f       	adc	r31, r31
    666e:	88 1f       	adc	r24, r24
    6670:	8b bf       	out	0x3b, r24	; 59
    6672:	07 90       	elpm	r0, Z+
    6674:	f6 91       	elpm	r31, Z
    6676:	e0 2d       	mov	r30, r0
    6678:	19 94       	eijmp

0000667a <__muluhisi3>:
    667a:	09 d0       	rcall	.+18     	; 0x668e <__umulhisi3>
    667c:	a5 9f       	mul	r26, r21
    667e:	90 0d       	add	r25, r0
    6680:	b4 9f       	mul	r27, r20
    6682:	90 0d       	add	r25, r0
    6684:	a4 9f       	mul	r26, r20
    6686:	80 0d       	add	r24, r0
    6688:	91 1d       	adc	r25, r1
    668a:	11 24       	eor	r1, r1
    668c:	08 95       	ret

0000668e <__umulhisi3>:
    668e:	a2 9f       	mul	r26, r18
    6690:	b0 01       	movw	r22, r0
    6692:	b3 9f       	mul	r27, r19
    6694:	c0 01       	movw	r24, r0
    6696:	a3 9f       	mul	r26, r19
    6698:	70 0d       	add	r23, r0
    669a:	81 1d       	adc	r24, r1
    669c:	11 24       	eor	r1, r1
    669e:	91 1d       	adc	r25, r1
    66a0:	b2 9f       	mul	r27, r18
    66a2:	70 0d       	add	r23, r0
    66a4:	81 1d       	adc	r24, r1
    66a6:	11 24       	eor	r1, r1
    66a8:	91 1d       	adc	r25, r1
    66aa:	08 95       	ret

000066ac <malloc>:
    66ac:	0f 93       	push	r16
    66ae:	1f 93       	push	r17
    66b0:	cf 93       	push	r28
    66b2:	df 93       	push	r29
    66b4:	82 30       	cpi	r24, 0x02	; 2
    66b6:	91 05       	cpc	r25, r1
    66b8:	10 f4       	brcc	.+4      	; 0x66be <malloc+0x12>
    66ba:	82 e0       	ldi	r24, 0x02	; 2
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	e0 91 a2 05 	lds	r30, 0x05A2	; 0x8005a2 <__flp>
    66c2:	f0 91 a3 05 	lds	r31, 0x05A3	; 0x8005a3 <__flp+0x1>
    66c6:	20 e0       	ldi	r18, 0x00	; 0
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	a0 e0       	ldi	r26, 0x00	; 0
    66cc:	b0 e0       	ldi	r27, 0x00	; 0
    66ce:	30 97       	sbiw	r30, 0x00	; 0
    66d0:	19 f1       	breq	.+70     	; 0x6718 <malloc+0x6c>
    66d2:	40 81       	ld	r20, Z
    66d4:	51 81       	ldd	r21, Z+1	; 0x01
    66d6:	02 81       	ldd	r16, Z+2	; 0x02
    66d8:	13 81       	ldd	r17, Z+3	; 0x03
    66da:	48 17       	cp	r20, r24
    66dc:	59 07       	cpc	r21, r25
    66de:	c8 f0       	brcs	.+50     	; 0x6712 <malloc+0x66>
    66e0:	84 17       	cp	r24, r20
    66e2:	95 07       	cpc	r25, r21
    66e4:	69 f4       	brne	.+26     	; 0x6700 <malloc+0x54>
    66e6:	10 97       	sbiw	r26, 0x00	; 0
    66e8:	31 f0       	breq	.+12     	; 0x66f6 <malloc+0x4a>
    66ea:	12 96       	adiw	r26, 0x02	; 2
    66ec:	0c 93       	st	X, r16
    66ee:	12 97       	sbiw	r26, 0x02	; 2
    66f0:	13 96       	adiw	r26, 0x03	; 3
    66f2:	1c 93       	st	X, r17
    66f4:	27 c0       	rjmp	.+78     	; 0x6744 <malloc+0x98>
    66f6:	00 93 a2 05 	sts	0x05A2, r16	; 0x8005a2 <__flp>
    66fa:	10 93 a3 05 	sts	0x05A3, r17	; 0x8005a3 <__flp+0x1>
    66fe:	22 c0       	rjmp	.+68     	; 0x6744 <malloc+0x98>
    6700:	21 15       	cp	r18, r1
    6702:	31 05       	cpc	r19, r1
    6704:	19 f0       	breq	.+6      	; 0x670c <malloc+0x60>
    6706:	42 17       	cp	r20, r18
    6708:	53 07       	cpc	r21, r19
    670a:	18 f4       	brcc	.+6      	; 0x6712 <malloc+0x66>
    670c:	9a 01       	movw	r18, r20
    670e:	bd 01       	movw	r22, r26
    6710:	ef 01       	movw	r28, r30
    6712:	df 01       	movw	r26, r30
    6714:	f8 01       	movw	r30, r16
    6716:	db cf       	rjmp	.-74     	; 0x66ce <malloc+0x22>
    6718:	21 15       	cp	r18, r1
    671a:	31 05       	cpc	r19, r1
    671c:	f9 f0       	breq	.+62     	; 0x675c <malloc+0xb0>
    671e:	28 1b       	sub	r18, r24
    6720:	39 0b       	sbc	r19, r25
    6722:	24 30       	cpi	r18, 0x04	; 4
    6724:	31 05       	cpc	r19, r1
    6726:	80 f4       	brcc	.+32     	; 0x6748 <malloc+0x9c>
    6728:	8a 81       	ldd	r24, Y+2	; 0x02
    672a:	9b 81       	ldd	r25, Y+3	; 0x03
    672c:	61 15       	cp	r22, r1
    672e:	71 05       	cpc	r23, r1
    6730:	21 f0       	breq	.+8      	; 0x673a <malloc+0x8e>
    6732:	fb 01       	movw	r30, r22
    6734:	93 83       	std	Z+3, r25	; 0x03
    6736:	82 83       	std	Z+2, r24	; 0x02
    6738:	04 c0       	rjmp	.+8      	; 0x6742 <malloc+0x96>
    673a:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <__flp+0x1>
    673e:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <__flp>
    6742:	fe 01       	movw	r30, r28
    6744:	32 96       	adiw	r30, 0x02	; 2
    6746:	44 c0       	rjmp	.+136    	; 0x67d0 <malloc+0x124>
    6748:	fe 01       	movw	r30, r28
    674a:	e2 0f       	add	r30, r18
    674c:	f3 1f       	adc	r31, r19
    674e:	81 93       	st	Z+, r24
    6750:	91 93       	st	Z+, r25
    6752:	22 50       	subi	r18, 0x02	; 2
    6754:	31 09       	sbc	r19, r1
    6756:	39 83       	std	Y+1, r19	; 0x01
    6758:	28 83       	st	Y, r18
    675a:	3a c0       	rjmp	.+116    	; 0x67d0 <malloc+0x124>
    675c:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <__brkval>
    6760:	30 91 a1 05 	lds	r19, 0x05A1	; 0x8005a1 <__brkval+0x1>
    6764:	23 2b       	or	r18, r19
    6766:	41 f4       	brne	.+16     	; 0x6778 <malloc+0xcc>
    6768:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    676c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6770:	30 93 a1 05 	sts	0x05A1, r19	; 0x8005a1 <__brkval+0x1>
    6774:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <__brkval>
    6778:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    677c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6780:	21 15       	cp	r18, r1
    6782:	31 05       	cpc	r19, r1
    6784:	41 f4       	brne	.+16     	; 0x6796 <malloc+0xea>
    6786:	2d b7       	in	r18, 0x3d	; 61
    6788:	3e b7       	in	r19, 0x3e	; 62
    678a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    678e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6792:	24 1b       	sub	r18, r20
    6794:	35 0b       	sbc	r19, r21
    6796:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <__brkval>
    679a:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <__brkval+0x1>
    679e:	e2 17       	cp	r30, r18
    67a0:	f3 07       	cpc	r31, r19
    67a2:	a0 f4       	brcc	.+40     	; 0x67cc <malloc+0x120>
    67a4:	2e 1b       	sub	r18, r30
    67a6:	3f 0b       	sbc	r19, r31
    67a8:	28 17       	cp	r18, r24
    67aa:	39 07       	cpc	r19, r25
    67ac:	78 f0       	brcs	.+30     	; 0x67cc <malloc+0x120>
    67ae:	ac 01       	movw	r20, r24
    67b0:	4e 5f       	subi	r20, 0xFE	; 254
    67b2:	5f 4f       	sbci	r21, 0xFF	; 255
    67b4:	24 17       	cp	r18, r20
    67b6:	35 07       	cpc	r19, r21
    67b8:	48 f0       	brcs	.+18     	; 0x67cc <malloc+0x120>
    67ba:	4e 0f       	add	r20, r30
    67bc:	5f 1f       	adc	r21, r31
    67be:	50 93 a1 05 	sts	0x05A1, r21	; 0x8005a1 <__brkval+0x1>
    67c2:	40 93 a0 05 	sts	0x05A0, r20	; 0x8005a0 <__brkval>
    67c6:	81 93       	st	Z+, r24
    67c8:	91 93       	st	Z+, r25
    67ca:	02 c0       	rjmp	.+4      	; 0x67d0 <malloc+0x124>
    67cc:	e0 e0       	ldi	r30, 0x00	; 0
    67ce:	f0 e0       	ldi	r31, 0x00	; 0
    67d0:	cf 01       	movw	r24, r30
    67d2:	df 91       	pop	r29
    67d4:	cf 91       	pop	r28
    67d6:	1f 91       	pop	r17
    67d8:	0f 91       	pop	r16
    67da:	08 95       	ret

000067dc <free>:
    67dc:	cf 93       	push	r28
    67de:	df 93       	push	r29
    67e0:	00 97       	sbiw	r24, 0x00	; 0
    67e2:	09 f4       	brne	.+2      	; 0x67e6 <free+0xa>
    67e4:	81 c0       	rjmp	.+258    	; 0x68e8 <free+0x10c>
    67e6:	fc 01       	movw	r30, r24
    67e8:	32 97       	sbiw	r30, 0x02	; 2
    67ea:	13 82       	std	Z+3, r1	; 0x03
    67ec:	12 82       	std	Z+2, r1	; 0x02
    67ee:	a0 91 a2 05 	lds	r26, 0x05A2	; 0x8005a2 <__flp>
    67f2:	b0 91 a3 05 	lds	r27, 0x05A3	; 0x8005a3 <__flp+0x1>
    67f6:	10 97       	sbiw	r26, 0x00	; 0
    67f8:	81 f4       	brne	.+32     	; 0x681a <free+0x3e>
    67fa:	20 81       	ld	r18, Z
    67fc:	31 81       	ldd	r19, Z+1	; 0x01
    67fe:	82 0f       	add	r24, r18
    6800:	93 1f       	adc	r25, r19
    6802:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <__brkval>
    6806:	30 91 a1 05 	lds	r19, 0x05A1	; 0x8005a1 <__brkval+0x1>
    680a:	28 17       	cp	r18, r24
    680c:	39 07       	cpc	r19, r25
    680e:	51 f5       	brne	.+84     	; 0x6864 <free+0x88>
    6810:	f0 93 a1 05 	sts	0x05A1, r31	; 0x8005a1 <__brkval+0x1>
    6814:	e0 93 a0 05 	sts	0x05A0, r30	; 0x8005a0 <__brkval>
    6818:	67 c0       	rjmp	.+206    	; 0x68e8 <free+0x10c>
    681a:	ed 01       	movw	r28, r26
    681c:	20 e0       	ldi	r18, 0x00	; 0
    681e:	30 e0       	ldi	r19, 0x00	; 0
    6820:	ce 17       	cp	r28, r30
    6822:	df 07       	cpc	r29, r31
    6824:	40 f4       	brcc	.+16     	; 0x6836 <free+0x5a>
    6826:	4a 81       	ldd	r20, Y+2	; 0x02
    6828:	5b 81       	ldd	r21, Y+3	; 0x03
    682a:	9e 01       	movw	r18, r28
    682c:	41 15       	cp	r20, r1
    682e:	51 05       	cpc	r21, r1
    6830:	f1 f0       	breq	.+60     	; 0x686e <free+0x92>
    6832:	ea 01       	movw	r28, r20
    6834:	f5 cf       	rjmp	.-22     	; 0x6820 <free+0x44>
    6836:	d3 83       	std	Z+3, r29	; 0x03
    6838:	c2 83       	std	Z+2, r28	; 0x02
    683a:	40 81       	ld	r20, Z
    683c:	51 81       	ldd	r21, Z+1	; 0x01
    683e:	84 0f       	add	r24, r20
    6840:	95 1f       	adc	r25, r21
    6842:	c8 17       	cp	r28, r24
    6844:	d9 07       	cpc	r29, r25
    6846:	59 f4       	brne	.+22     	; 0x685e <free+0x82>
    6848:	88 81       	ld	r24, Y
    684a:	99 81       	ldd	r25, Y+1	; 0x01
    684c:	84 0f       	add	r24, r20
    684e:	95 1f       	adc	r25, r21
    6850:	02 96       	adiw	r24, 0x02	; 2
    6852:	91 83       	std	Z+1, r25	; 0x01
    6854:	80 83       	st	Z, r24
    6856:	8a 81       	ldd	r24, Y+2	; 0x02
    6858:	9b 81       	ldd	r25, Y+3	; 0x03
    685a:	93 83       	std	Z+3, r25	; 0x03
    685c:	82 83       	std	Z+2, r24	; 0x02
    685e:	21 15       	cp	r18, r1
    6860:	31 05       	cpc	r19, r1
    6862:	29 f4       	brne	.+10     	; 0x686e <free+0x92>
    6864:	f0 93 a3 05 	sts	0x05A3, r31	; 0x8005a3 <__flp+0x1>
    6868:	e0 93 a2 05 	sts	0x05A2, r30	; 0x8005a2 <__flp>
    686c:	3d c0       	rjmp	.+122    	; 0x68e8 <free+0x10c>
    686e:	e9 01       	movw	r28, r18
    6870:	fb 83       	std	Y+3, r31	; 0x03
    6872:	ea 83       	std	Y+2, r30	; 0x02
    6874:	49 91       	ld	r20, Y+
    6876:	59 91       	ld	r21, Y+
    6878:	c4 0f       	add	r28, r20
    687a:	d5 1f       	adc	r29, r21
    687c:	ec 17       	cp	r30, r28
    687e:	fd 07       	cpc	r31, r29
    6880:	61 f4       	brne	.+24     	; 0x689a <free+0xbe>
    6882:	80 81       	ld	r24, Z
    6884:	91 81       	ldd	r25, Z+1	; 0x01
    6886:	84 0f       	add	r24, r20
    6888:	95 1f       	adc	r25, r21
    688a:	02 96       	adiw	r24, 0x02	; 2
    688c:	e9 01       	movw	r28, r18
    688e:	99 83       	std	Y+1, r25	; 0x01
    6890:	88 83       	st	Y, r24
    6892:	82 81       	ldd	r24, Z+2	; 0x02
    6894:	93 81       	ldd	r25, Z+3	; 0x03
    6896:	9b 83       	std	Y+3, r25	; 0x03
    6898:	8a 83       	std	Y+2, r24	; 0x02
    689a:	e0 e0       	ldi	r30, 0x00	; 0
    689c:	f0 e0       	ldi	r31, 0x00	; 0
    689e:	12 96       	adiw	r26, 0x02	; 2
    68a0:	8d 91       	ld	r24, X+
    68a2:	9c 91       	ld	r25, X
    68a4:	13 97       	sbiw	r26, 0x03	; 3
    68a6:	00 97       	sbiw	r24, 0x00	; 0
    68a8:	19 f0       	breq	.+6      	; 0x68b0 <free+0xd4>
    68aa:	fd 01       	movw	r30, r26
    68ac:	dc 01       	movw	r26, r24
    68ae:	f7 cf       	rjmp	.-18     	; 0x689e <free+0xc2>
    68b0:	8d 91       	ld	r24, X+
    68b2:	9c 91       	ld	r25, X
    68b4:	11 97       	sbiw	r26, 0x01	; 1
    68b6:	9d 01       	movw	r18, r26
    68b8:	2e 5f       	subi	r18, 0xFE	; 254
    68ba:	3f 4f       	sbci	r19, 0xFF	; 255
    68bc:	82 0f       	add	r24, r18
    68be:	93 1f       	adc	r25, r19
    68c0:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <__brkval>
    68c4:	30 91 a1 05 	lds	r19, 0x05A1	; 0x8005a1 <__brkval+0x1>
    68c8:	28 17       	cp	r18, r24
    68ca:	39 07       	cpc	r19, r25
    68cc:	69 f4       	brne	.+26     	; 0x68e8 <free+0x10c>
    68ce:	30 97       	sbiw	r30, 0x00	; 0
    68d0:	29 f4       	brne	.+10     	; 0x68dc <free+0x100>
    68d2:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <__flp+0x1>
    68d6:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <__flp>
    68da:	02 c0       	rjmp	.+4      	; 0x68e0 <free+0x104>
    68dc:	13 82       	std	Z+3, r1	; 0x03
    68de:	12 82       	std	Z+2, r1	; 0x02
    68e0:	b0 93 a1 05 	sts	0x05A1, r27	; 0x8005a1 <__brkval+0x1>
    68e4:	a0 93 a0 05 	sts	0x05A0, r26	; 0x8005a0 <__brkval>
    68e8:	df 91       	pop	r29
    68ea:	cf 91       	pop	r28
    68ec:	08 95       	ret

000068ee <realloc>:
    68ee:	6f 92       	push	r6
    68f0:	7f 92       	push	r7
    68f2:	8f 92       	push	r8
    68f4:	9f 92       	push	r9
    68f6:	af 92       	push	r10
    68f8:	bf 92       	push	r11
    68fa:	cf 92       	push	r12
    68fc:	df 92       	push	r13
    68fe:	ef 92       	push	r14
    6900:	ff 92       	push	r15
    6902:	0f 93       	push	r16
    6904:	1f 93       	push	r17
    6906:	cf 93       	push	r28
    6908:	df 93       	push	r29
    690a:	00 97       	sbiw	r24, 0x00	; 0
    690c:	81 f4       	brne	.+32     	; 0x692e <realloc+0x40>
    690e:	cb 01       	movw	r24, r22
    6910:	df 91       	pop	r29
    6912:	cf 91       	pop	r28
    6914:	1f 91       	pop	r17
    6916:	0f 91       	pop	r16
    6918:	ff 90       	pop	r15
    691a:	ef 90       	pop	r14
    691c:	df 90       	pop	r13
    691e:	cf 90       	pop	r12
    6920:	bf 90       	pop	r11
    6922:	af 90       	pop	r10
    6924:	9f 90       	pop	r9
    6926:	8f 90       	pop	r8
    6928:	7f 90       	pop	r7
    692a:	6f 90       	pop	r6
    692c:	bf ce       	rjmp	.-642    	; 0x66ac <malloc>
    692e:	fc 01       	movw	r30, r24
    6930:	e6 0f       	add	r30, r22
    6932:	f7 1f       	adc	r31, r23
    6934:	9c 01       	movw	r18, r24
    6936:	22 50       	subi	r18, 0x02	; 2
    6938:	31 09       	sbc	r19, r1
    693a:	e2 17       	cp	r30, r18
    693c:	f3 07       	cpc	r31, r19
    693e:	08 f4       	brcc	.+2      	; 0x6942 <realloc+0x54>
    6940:	a5 c0       	rjmp	.+330    	; 0x6a8c <realloc+0x19e>
    6942:	ec 01       	movw	r28, r24
    6944:	d9 01       	movw	r26, r18
    6946:	0d 91       	ld	r16, X+
    6948:	1c 91       	ld	r17, X
    694a:	11 97       	sbiw	r26, 0x01	; 1
    694c:	06 17       	cp	r16, r22
    694e:	17 07       	cpc	r17, r23
    6950:	a8 f0       	brcs	.+42     	; 0x697c <realloc+0x8e>
    6952:	05 30       	cpi	r16, 0x05	; 5
    6954:	11 05       	cpc	r17, r1
    6956:	08 f4       	brcc	.+2      	; 0x695a <realloc+0x6c>
    6958:	97 c0       	rjmp	.+302    	; 0x6a88 <realloc+0x19a>
    695a:	c8 01       	movw	r24, r16
    695c:	04 97       	sbiw	r24, 0x04	; 4
    695e:	86 17       	cp	r24, r22
    6960:	97 07       	cpc	r25, r23
    6962:	08 f4       	brcc	.+2      	; 0x6966 <realloc+0x78>
    6964:	91 c0       	rjmp	.+290    	; 0x6a88 <realloc+0x19a>
    6966:	02 50       	subi	r16, 0x02	; 2
    6968:	11 09       	sbc	r17, r1
    696a:	06 1b       	sub	r16, r22
    696c:	17 0b       	sbc	r17, r23
    696e:	01 93       	st	Z+, r16
    6970:	11 93       	st	Z+, r17
    6972:	6d 93       	st	X+, r22
    6974:	7c 93       	st	X, r23
    6976:	cf 01       	movw	r24, r30
    6978:	31 df       	rcall	.-414    	; 0x67dc <free>
    697a:	86 c0       	rjmp	.+268    	; 0x6a88 <realloc+0x19a>
    697c:	5b 01       	movw	r10, r22
    697e:	a0 1a       	sub	r10, r16
    6980:	b1 0a       	sbc	r11, r17
    6982:	4c 01       	movw	r8, r24
    6984:	80 0e       	add	r8, r16
    6986:	91 1e       	adc	r9, r17
    6988:	a0 91 a2 05 	lds	r26, 0x05A2	; 0x8005a2 <__flp>
    698c:	b0 91 a3 05 	lds	r27, 0x05A3	; 0x8005a3 <__flp+0x1>
    6990:	61 2c       	mov	r6, r1
    6992:	71 2c       	mov	r7, r1
    6994:	e1 2c       	mov	r14, r1
    6996:	f1 2c       	mov	r15, r1
    6998:	10 97       	sbiw	r26, 0x00	; 0
    699a:	09 f4       	brne	.+2      	; 0x699e <realloc+0xb0>
    699c:	46 c0       	rjmp	.+140    	; 0x6a2a <realloc+0x13c>
    699e:	8d 91       	ld	r24, X+
    69a0:	9c 91       	ld	r25, X
    69a2:	11 97       	sbiw	r26, 0x01	; 1
    69a4:	a8 15       	cp	r26, r8
    69a6:	b9 05       	cpc	r27, r9
    69a8:	b1 f5       	brne	.+108    	; 0x6a16 <realloc+0x128>
    69aa:	6c 01       	movw	r12, r24
    69ac:	42 e0       	ldi	r20, 0x02	; 2
    69ae:	c4 0e       	add	r12, r20
    69b0:	d1 1c       	adc	r13, r1
    69b2:	ca 14       	cp	r12, r10
    69b4:	db 04       	cpc	r13, r11
    69b6:	78 f1       	brcs	.+94     	; 0x6a16 <realloc+0x128>
    69b8:	4c 01       	movw	r8, r24
    69ba:	8a 18       	sub	r8, r10
    69bc:	9b 08       	sbc	r9, r11
    69be:	64 01       	movw	r12, r8
    69c0:	42 e0       	ldi	r20, 0x02	; 2
    69c2:	c4 0e       	add	r12, r20
    69c4:	d1 1c       	adc	r13, r1
    69c6:	12 96       	adiw	r26, 0x02	; 2
    69c8:	bc 90       	ld	r11, X
    69ca:	12 97       	sbiw	r26, 0x02	; 2
    69cc:	13 96       	adiw	r26, 0x03	; 3
    69ce:	ac 91       	ld	r26, X
    69d0:	b5 e0       	ldi	r27, 0x05	; 5
    69d2:	cb 16       	cp	r12, r27
    69d4:	d1 04       	cpc	r13, r1
    69d6:	40 f0       	brcs	.+16     	; 0x69e8 <realloc+0xfa>
    69d8:	b2 82       	std	Z+2, r11	; 0x02
    69da:	a3 83       	std	Z+3, r26	; 0x03
    69dc:	91 82       	std	Z+1, r9	; 0x01
    69de:	80 82       	st	Z, r8
    69e0:	d9 01       	movw	r26, r18
    69e2:	6d 93       	st	X+, r22
    69e4:	7c 93       	st	X, r23
    69e6:	09 c0       	rjmp	.+18     	; 0x69fa <realloc+0x10c>
    69e8:	0e 5f       	subi	r16, 0xFE	; 254
    69ea:	1f 4f       	sbci	r17, 0xFF	; 255
    69ec:	80 0f       	add	r24, r16
    69ee:	91 1f       	adc	r25, r17
    69f0:	f9 01       	movw	r30, r18
    69f2:	91 83       	std	Z+1, r25	; 0x01
    69f4:	80 83       	st	Z, r24
    69f6:	eb 2d       	mov	r30, r11
    69f8:	fa 2f       	mov	r31, r26
    69fa:	e1 14       	cp	r14, r1
    69fc:	f1 04       	cpc	r15, r1
    69fe:	31 f0       	breq	.+12     	; 0x6a0c <realloc+0x11e>
    6a00:	d7 01       	movw	r26, r14
    6a02:	13 96       	adiw	r26, 0x03	; 3
    6a04:	fc 93       	st	X, r31
    6a06:	ee 93       	st	-X, r30
    6a08:	12 97       	sbiw	r26, 0x02	; 2
    6a0a:	3e c0       	rjmp	.+124    	; 0x6a88 <realloc+0x19a>
    6a0c:	f0 93 a3 05 	sts	0x05A3, r31	; 0x8005a3 <__flp+0x1>
    6a10:	e0 93 a2 05 	sts	0x05A2, r30	; 0x8005a2 <__flp>
    6a14:	39 c0       	rjmp	.+114    	; 0x6a88 <realloc+0x19a>
    6a16:	68 16       	cp	r6, r24
    6a18:	79 06       	cpc	r7, r25
    6a1a:	08 f4       	brcc	.+2      	; 0x6a1e <realloc+0x130>
    6a1c:	3c 01       	movw	r6, r24
    6a1e:	7d 01       	movw	r14, r26
    6a20:	12 96       	adiw	r26, 0x02	; 2
    6a22:	0d 90       	ld	r0, X+
    6a24:	bc 91       	ld	r27, X
    6a26:	a0 2d       	mov	r26, r0
    6a28:	b7 cf       	rjmp	.-146    	; 0x6998 <realloc+0xaa>
    6a2a:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <__brkval>
    6a2e:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <__brkval+0x1>
    6a32:	88 16       	cp	r8, r24
    6a34:	99 06       	cpc	r9, r25
    6a36:	e1 f4       	brne	.+56     	; 0x6a70 <realloc+0x182>
    6a38:	66 16       	cp	r6, r22
    6a3a:	77 06       	cpc	r7, r23
    6a3c:	c8 f4       	brcc	.+50     	; 0x6a70 <realloc+0x182>
    6a3e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6a42:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6a46:	00 97       	sbiw	r24, 0x00	; 0
    6a48:	41 f4       	brne	.+16     	; 0x6a5a <realloc+0x16c>
    6a4a:	8d b7       	in	r24, 0x3d	; 61
    6a4c:	9e b7       	in	r25, 0x3e	; 62
    6a4e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6a52:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6a56:	84 1b       	sub	r24, r20
    6a58:	95 0b       	sbc	r25, r21
    6a5a:	e8 17       	cp	r30, r24
    6a5c:	f9 07       	cpc	r31, r25
    6a5e:	b0 f4       	brcc	.+44     	; 0x6a8c <realloc+0x19e>
    6a60:	f0 93 a1 05 	sts	0x05A1, r31	; 0x8005a1 <__brkval+0x1>
    6a64:	e0 93 a0 05 	sts	0x05A0, r30	; 0x8005a0 <__brkval>
    6a68:	f9 01       	movw	r30, r18
    6a6a:	71 83       	std	Z+1, r23	; 0x01
    6a6c:	60 83       	st	Z, r22
    6a6e:	0c c0       	rjmp	.+24     	; 0x6a88 <realloc+0x19a>
    6a70:	cb 01       	movw	r24, r22
    6a72:	1c de       	rcall	.-968    	; 0x66ac <malloc>
    6a74:	7c 01       	movw	r14, r24
    6a76:	00 97       	sbiw	r24, 0x00	; 0
    6a78:	49 f0       	breq	.+18     	; 0x6a8c <realloc+0x19e>
    6a7a:	a8 01       	movw	r20, r16
    6a7c:	be 01       	movw	r22, r28
    6a7e:	23 d0       	rcall	.+70     	; 0x6ac6 <memcpy>
    6a80:	ce 01       	movw	r24, r28
    6a82:	ac de       	rcall	.-680    	; 0x67dc <free>
    6a84:	c7 01       	movw	r24, r14
    6a86:	04 c0       	rjmp	.+8      	; 0x6a90 <realloc+0x1a2>
    6a88:	ce 01       	movw	r24, r28
    6a8a:	02 c0       	rjmp	.+4      	; 0x6a90 <realloc+0x1a2>
    6a8c:	80 e0       	ldi	r24, 0x00	; 0
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	df 91       	pop	r29
    6a92:	cf 91       	pop	r28
    6a94:	1f 91       	pop	r17
    6a96:	0f 91       	pop	r16
    6a98:	ff 90       	pop	r15
    6a9a:	ef 90       	pop	r14
    6a9c:	df 90       	pop	r13
    6a9e:	cf 90       	pop	r12
    6aa0:	bf 90       	pop	r11
    6aa2:	af 90       	pop	r10
    6aa4:	9f 90       	pop	r9
    6aa6:	8f 90       	pop	r8
    6aa8:	7f 90       	pop	r7
    6aaa:	6f 90       	pop	r6
    6aac:	08 95       	ret

00006aae <abort>:
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	f8 94       	cli
    6ab4:	73 c0       	rjmp	.+230    	; 0x6b9c <__do_global_dtors>

00006ab6 <toupper>:
    6ab6:	91 11       	cpse	r25, r1
    6ab8:	08 95       	ret
    6aba:	81 56       	subi	r24, 0x61	; 97
    6abc:	8a 51       	subi	r24, 0x1A	; 26
    6abe:	08 f4       	brcc	.+2      	; 0x6ac2 <toupper+0xc>
    6ac0:	80 52       	subi	r24, 0x20	; 32
    6ac2:	85 58       	subi	r24, 0x85	; 133
    6ac4:	08 95       	ret

00006ac6 <memcpy>:
    6ac6:	fb 01       	movw	r30, r22
    6ac8:	dc 01       	movw	r26, r24
    6aca:	02 c0       	rjmp	.+4      	; 0x6ad0 <memcpy+0xa>
    6acc:	01 90       	ld	r0, Z+
    6ace:	0d 92       	st	X+, r0
    6ad0:	41 50       	subi	r20, 0x01	; 1
    6ad2:	50 40       	sbci	r21, 0x00	; 0
    6ad4:	d8 f7       	brcc	.-10     	; 0x6acc <memcpy+0x6>
    6ad6:	08 95       	ret

00006ad8 <memset>:
    6ad8:	dc 01       	movw	r26, r24
    6ada:	01 c0       	rjmp	.+2      	; 0x6ade <memset+0x6>
    6adc:	6d 93       	st	X+, r22
    6ade:	41 50       	subi	r20, 0x01	; 1
    6ae0:	50 40       	sbci	r21, 0x00	; 0
    6ae2:	e0 f7       	brcc	.-8      	; 0x6adc <memset+0x4>
    6ae4:	08 95       	ret

00006ae6 <strcmp>:
    6ae6:	fb 01       	movw	r30, r22
    6ae8:	dc 01       	movw	r26, r24
    6aea:	8d 91       	ld	r24, X+
    6aec:	01 90       	ld	r0, Z+
    6aee:	80 19       	sub	r24, r0
    6af0:	01 10       	cpse	r0, r1
    6af2:	d9 f3       	breq	.-10     	; 0x6aea <strcmp+0x4>
    6af4:	99 0b       	sbc	r25, r25
    6af6:	08 95       	ret

00006af8 <strcpy>:
    6af8:	fb 01       	movw	r30, r22
    6afa:	dc 01       	movw	r26, r24
    6afc:	01 90       	ld	r0, Z+
    6afe:	0d 92       	st	X+, r0
    6b00:	00 20       	and	r0, r0
    6b02:	e1 f7       	brne	.-8      	; 0x6afc <strcpy+0x4>
    6b04:	08 95       	ret

00006b06 <strlen>:
    6b06:	fc 01       	movw	r30, r24
    6b08:	01 90       	ld	r0, Z+
    6b0a:	00 20       	and	r0, r0
    6b0c:	e9 f7       	brne	.-6      	; 0x6b08 <strlen+0x2>
    6b0e:	80 95       	com	r24
    6b10:	90 95       	com	r25
    6b12:	8e 0f       	add	r24, r30
    6b14:	9f 1f       	adc	r25, r31
    6b16:	08 95       	ret

00006b18 <strncpy>:
    6b18:	fb 01       	movw	r30, r22
    6b1a:	dc 01       	movw	r26, r24
    6b1c:	41 50       	subi	r20, 0x01	; 1
    6b1e:	50 40       	sbci	r21, 0x00	; 0
    6b20:	48 f0       	brcs	.+18     	; 0x6b34 <strncpy+0x1c>
    6b22:	01 90       	ld	r0, Z+
    6b24:	0d 92       	st	X+, r0
    6b26:	00 20       	and	r0, r0
    6b28:	c9 f7       	brne	.-14     	; 0x6b1c <strncpy+0x4>
    6b2a:	01 c0       	rjmp	.+2      	; 0x6b2e <strncpy+0x16>
    6b2c:	1d 92       	st	X+, r1
    6b2e:	41 50       	subi	r20, 0x01	; 1
    6b30:	50 40       	sbci	r21, 0x00	; 0
    6b32:	e0 f7       	brcc	.-8      	; 0x6b2c <strncpy+0x14>
    6b34:	08 95       	ret

00006b36 <utoa>:
    6b36:	45 32       	cpi	r20, 0x25	; 37
    6b38:	51 05       	cpc	r21, r1
    6b3a:	18 f4       	brcc	.+6      	; 0x6b42 <utoa+0xc>
    6b3c:	42 30       	cpi	r20, 0x02	; 2
    6b3e:	08 f0       	brcs	.+2      	; 0x6b42 <utoa+0xc>
    6b40:	04 c0       	rjmp	.+8      	; 0x6b4a <__utoa_ncheck>
    6b42:	fb 01       	movw	r30, r22
    6b44:	10 82       	st	Z, r1
    6b46:	cb 01       	movw	r24, r22
    6b48:	08 95       	ret

00006b4a <__utoa_ncheck>:
    6b4a:	bb 27       	eor	r27, r27

00006b4c <__utoa_common>:
    6b4c:	fb 01       	movw	r30, r22
    6b4e:	55 27       	eor	r21, r21
    6b50:	aa 27       	eor	r26, r26
    6b52:	88 0f       	add	r24, r24
    6b54:	99 1f       	adc	r25, r25
    6b56:	aa 1f       	adc	r26, r26
    6b58:	a4 17       	cp	r26, r20
    6b5a:	10 f0       	brcs	.+4      	; 0x6b60 <__utoa_common+0x14>
    6b5c:	a4 1b       	sub	r26, r20
    6b5e:	83 95       	inc	r24
    6b60:	50 51       	subi	r21, 0x10	; 16
    6b62:	b9 f7       	brne	.-18     	; 0x6b52 <__utoa_common+0x6>
    6b64:	a0 5d       	subi	r26, 0xD0	; 208
    6b66:	aa 33       	cpi	r26, 0x3A	; 58
    6b68:	08 f0       	brcs	.+2      	; 0x6b6c <__utoa_common+0x20>
    6b6a:	a9 5d       	subi	r26, 0xD9	; 217
    6b6c:	a1 93       	st	Z+, r26
    6b6e:	00 97       	sbiw	r24, 0x00	; 0
    6b70:	79 f7       	brne	.-34     	; 0x6b50 <__utoa_common+0x4>
    6b72:	b1 11       	cpse	r27, r1
    6b74:	b1 93       	st	Z+, r27
    6b76:	11 92       	st	Z+, r1
    6b78:	cb 01       	movw	r24, r22
    6b7a:	00 c0       	rjmp	.+0      	; 0x6b7c <strrev>

00006b7c <strrev>:
    6b7c:	dc 01       	movw	r26, r24
    6b7e:	fc 01       	movw	r30, r24
    6b80:	67 2f       	mov	r22, r23
    6b82:	71 91       	ld	r23, Z+
    6b84:	77 23       	and	r23, r23
    6b86:	e1 f7       	brne	.-8      	; 0x6b80 <strrev+0x4>
    6b88:	32 97       	sbiw	r30, 0x02	; 2
    6b8a:	04 c0       	rjmp	.+8      	; 0x6b94 <strrev+0x18>
    6b8c:	7c 91       	ld	r23, X
    6b8e:	6d 93       	st	X+, r22
    6b90:	70 83       	st	Z, r23
    6b92:	62 91       	ld	r22, -Z
    6b94:	ae 17       	cp	r26, r30
    6b96:	bf 07       	cpc	r27, r31
    6b98:	c8 f3       	brcs	.-14     	; 0x6b8c <strrev+0x10>
    6b9a:	08 95       	ret

00006b9c <__do_global_dtors>:
    6b9c:	11 e0       	ldi	r17, 0x01	; 1
    6b9e:	c7 e1       	ldi	r28, 0x17	; 23
    6ba0:	d1 e0       	ldi	r29, 0x01	; 1
    6ba2:	00 e0       	ldi	r16, 0x00	; 0
    6ba4:	05 c0       	rjmp	.+10     	; 0x6bb0 <__do_global_dtors+0x14>
    6ba6:	80 2f       	mov	r24, r16
    6ba8:	fe 01       	movw	r30, r28
    6baa:	5f dd       	rcall	.-1346   	; 0x666a <__tablejump2__>
    6bac:	21 96       	adiw	r28, 0x01	; 1
    6bae:	01 1d       	adc	r16, r1
    6bb0:	c8 31       	cpi	r28, 0x18	; 24
    6bb2:	d1 07       	cpc	r29, r17
    6bb4:	80 e0       	ldi	r24, 0x00	; 0
    6bb6:	08 07       	cpc	r16, r24
    6bb8:	b1 f7       	brne	.-20     	; 0x6ba6 <__do_global_dtors+0xa>
    6bba:	f8 94       	cli

00006bbc <__stop_program>:
    6bbc:	ff cf       	rjmp	.-2      	; 0x6bbc <__stop_program>
