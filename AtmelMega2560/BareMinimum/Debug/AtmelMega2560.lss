
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800200  00006332  000063c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000258  00800302  00800302  000064c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000064c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c70  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018922  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004114  00000000  00000000  0001faca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000773e  00000000  00000000  00023bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003034  00000000  00000000  0002b31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058de  00000000  00000000  0002e350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b5d5  00000000  00000000  00033c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bf0  00000000  00000000  0003f203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 d7 2a 	jmp	0x55ae	; 0x55ae <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 37 29 	jmp	0x526e	; 0x526e <__vector_25>
      68:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	12 2c       	mov	r1, r2
      e6:	15 2c       	mov	r1, r5
      e8:	04 2c       	mov	r0, r4
      ea:	08 2c       	mov	r0, r8
      ec:	0e 2c       	mov	r0, r14
      ee:	4c 2c       	mov	r4, r12
      f0:	19 2c       	mov	r1, r9
      f2:	1d 2c       	mov	r1, r13
      f4:	23 2c       	mov	r2, r3
      f6:	27 2c       	mov	r2, r7
      f8:	2b 2c       	mov	r2, r11
      fa:	31 2c       	mov	r3, r1
      fc:	35 2c       	mov	r3, r5
      fe:	39 2c       	mov	r3, r9
     100:	4c 2c       	mov	r4, r12
     102:	3f 2c       	mov	r3, r15
     104:	43 2c       	mov	r4, r3
     106:	47 2c       	mov	r4, r7

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	38 07       	cpc	r19, r24
     22a:	0f 26       	eor	r0, r31
     22c:	9f 29       	or	r25, r15

0000022e <__ctors_end>:
     22e:	44 07       	cpc	r20, r20

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e2 e3       	ldi	r30, 0x32	; 50
     248:	f3 e6       	ldi	r31, 0x63	; 99
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	a2 30       	cpi	r26, 0x02	; 2
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	a2 e0       	ldi	r26, 0x02	; 2
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	aa 35       	cpi	r26, 0x5A	; 90
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 cd 29 	call	0x539a	; 0x539a <main>
     28e:	0c 94 88 31 	jmp	0x6310	; 0x6310 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <_ZNK6StringeqERKS_+0x6>
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	7c 83       	std	Y+4, r23	; 0x04
     2a6:	6b 83       	std	Y+3, r22	; 0x03
     2a8:	2b 81       	ldd	r18, Y+3	; 0x03
     2aa:	3c 81       	ldd	r19, Y+4	; 0x04
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	9a 81       	ldd	r25, Y+2	; 0x02
     2b0:	b9 01       	movw	r22, r18
     2b2:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <_ZNK6String6equalsERKS_>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <_ZNK6String9substringEj+0x6>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <_ZNK6String9substringEj+0x8>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	7c 83       	std	Y+4, r23	; 0x04
     2d6:	6b 83       	std	Y+3, r22	; 0x03
     2d8:	5e 83       	std	Y+6, r21	; 0x06
     2da:	4d 83       	std	Y+5, r20	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	fc 01       	movw	r30, r24
     2e2:	24 81       	ldd	r18, Z+4	; 0x04
     2e4:	35 81       	ldd	r19, Z+5	; 0x05
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	4d 81       	ldd	r20, Y+5	; 0x05
     2ec:	5e 81       	ldd	r21, Y+6	; 0x06
     2ee:	6b 81       	ldd	r22, Y+3	; 0x03
     2f0:	7c 81       	ldd	r23, Y+4	; 0x04
     2f2:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <_ZNK6String9substringEjj>
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	26 96       	adiw	r28, 0x06	; 6
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	00 d0       	rcall	.+0      	; 0x316 <_ZN5Print5writeEPKc+0xa>
     316:	1f 92       	push	r1
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     324:	8b 81       	ldd	r24, Y+3	; 0x03
     326:	9c 81       	ldd	r25, Y+4	; 0x04
     328:	89 2b       	or	r24, r25
     32a:	19 f4       	brne	.+6      	; 0x332 <_ZN5Print5writeEPKc+0x26>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	15 c0       	rjmp	.+42     	; 0x35c <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	02 96       	adiw	r24, 0x02	; 2
     33e:	fc 01       	movw	r30, r24
     340:	00 81       	ld	r16, Z
     342:	11 81       	ldd	r17, Z+1	; 0x01
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 3d 31 	call	0x627a	; 0x627a <strlen>
     34c:	ac 01       	movw	r20, r24
     34e:	2b 81       	ldd	r18, Y+3	; 0x03
     350:	3c 81       	ldd	r19, Y+4	; 0x04
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	b9 01       	movw	r22, r18
     358:	f8 01       	movw	r30, r16
     35a:	19 95       	eicall
    }
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	08 95       	ret

0000036e <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <_ZN14HardwareSerial5beginEm+0x6>
     374:	00 d0       	rcall	.+0      	; 0x376 <_ZN14HardwareSerial5beginEm+0x8>
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	4b 83       	std	Y+3, r20	; 0x03
     380:	5c 83       	std	Y+4, r21	; 0x04
     382:	6d 83       	std	Y+5, r22	; 0x05
     384:	7e 83       	std	Y+6, r23	; 0x06
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	ad 81       	ldd	r26, Y+5	; 0x05
     38c:	be 81       	ldd	r27, Y+6	; 0x06
     38e:	e9 81       	ldd	r30, Y+1	; 0x01
     390:	fa 81       	ldd	r31, Y+2	; 0x02
     392:	26 e0       	ldi	r18, 0x06	; 6
     394:	ac 01       	movw	r20, r24
     396:	bd 01       	movw	r22, r26
     398:	cf 01       	movw	r24, r30
     39a:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN14HardwareSerial5beginEmh>
     39e:	00 00       	nop
     3a0:	26 96       	adiw	r28, 0x06	; 6
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	1f 92       	push	r1
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	1f 92       	push	r1
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	2b e8       	ldi	r18, 0x8B	; 139
     3e0:	32 e0       	ldi	r19, 0x02	; 2
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	fc 01       	movw	r30, r24
     3e8:	31 83       	std	Z+1, r19	; 0x01
     3ea:	20 83       	st	Z, r18
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	89 2b       	or	r24, r25
     3f2:	21 f0       	breq	.+8      	; 0x3fc <_ZN15Adafruit_SensorD1Ev+0x2e>
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZdlPv>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <_ZN15Adafruit_SensorD0Ev>:
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	1f 92       	push	r1
     40c:	1f 92       	push	r1
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	d9 df       	rcall	.-78     	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZdlPv>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     43e:	00 00       	nop
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	00 d0       	rcall	.+0      	; 0x452 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	7c 83       	std	Y+4, r23	; 0x04
     45e:	6b 83       	std	Y+3, r22	; 0x03
     460:	2b e8       	ldi	r18, 0x8B	; 139
     462:	32 e0       	ldi	r19, 0x02	; 2
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	fc 01       	movw	r30, r24
     46a:	31 83       	std	Z+1, r19	; 0x01
     46c:	20 83       	st	Z, r18
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	fc 01       	movw	r30, r24
     474:	22 81       	ldd	r18, Z+2	; 0x02
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	22 83       	std	Z+2, r18	; 0x02
     47e:	00 00       	nop
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     494:	1f 92       	push	r1
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	7c 83       	std	Y+4, r23	; 0x04
     4a0:	6b 83       	std	Y+3, r22	; 0x03
     4a2:	2b 81       	ldd	r18, Y+3	; 0x03
     4a4:	3c 81       	ldd	r19, Y+4	; 0x04
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	b9 01       	movw	r22, r18
     4ac:	cf df       	rcall	.-98     	; 0x44c <_ZN15Adafruit_SensorC1ERKS_>
     4ae:	27 ea       	ldi	r18, 0xA7	; 167
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	fc 01       	movw	r30, r24
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	9c 81       	ldd	r25, Y+4	; 0x04
     4c0:	fc 01       	movw	r30, r24
     4c2:	23 81       	ldd	r18, Z+3	; 0x03
     4c4:	34 81       	ldd	r19, Z+4	; 0x04
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	fc 01       	movw	r30, r24
     4cc:	34 83       	std	Z+4, r19	; 0x04
     4ce:	23 83       	std	Z+3, r18	; 0x03
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	9c 81       	ldd	r25, Y+4	; 0x04
     4d4:	fc 01       	movw	r30, r24
     4d6:	85 81       	ldd	r24, Z+5	; 0x05
     4d8:	96 81       	ldd	r25, Z+6	; 0x06
     4da:	a7 81       	ldd	r26, Z+7	; 0x07
     4dc:	b0 85       	ldd	r27, Z+8	; 0x08
     4de:	29 81       	ldd	r18, Y+1	; 0x01
     4e0:	3a 81       	ldd	r19, Y+2	; 0x02
     4e2:	f9 01       	movw	r30, r18
     4e4:	85 83       	std	Z+5, r24	; 0x05
     4e6:	96 83       	std	Z+6, r25	; 0x06
     4e8:	a7 83       	std	Z+7, r26	; 0x07
     4ea:	b0 87       	std	Z+8, r27	; 0x08
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 d0       	rcall	.+0      	; 0x502 <_ZN11DHT_Unified11temperatureEv+0x6>
     502:	1f 92       	push	r1
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	7c 83       	std	Y+4, r23	; 0x04
     50e:	6b 83       	std	Y+3, r22	; 0x03
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	9c 01       	movw	r18, r24
     516:	2c 5e       	subi	r18, 0xEC	; 236
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	b9 01       	movw	r22, r18
     520:	b6 df       	rcall	.-148    	; 0x48e <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	00 d0       	rcall	.+0      	; 0x53a <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	7c 83       	std	Y+4, r23	; 0x04
     546:	6b 83       	std	Y+3, r22	; 0x03
     548:	2b 81       	ldd	r18, Y+3	; 0x03
     54a:	3c 81       	ldd	r19, Y+4	; 0x04
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	b9 01       	movw	r22, r18
     552:	7c df       	rcall	.-264    	; 0x44c <_ZN15Adafruit_SensorC1ERKS_>
     554:	29 e9       	ldi	r18, 0x99	; 153
     556:	32 e0       	ldi	r19, 0x02	; 2
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	fc 01       	movw	r30, r24
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	fc 01       	movw	r30, r24
     568:	23 81       	ldd	r18, Z+3	; 0x03
     56a:	34 81       	ldd	r19, Z+4	; 0x04
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	fc 01       	movw	r30, r24
     572:	34 83       	std	Z+4, r19	; 0x04
     574:	23 83       	std	Z+3, r18	; 0x03
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	9c 81       	ldd	r25, Y+4	; 0x04
     57a:	fc 01       	movw	r30, r24
     57c:	85 81       	ldd	r24, Z+5	; 0x05
     57e:	96 81       	ldd	r25, Z+6	; 0x06
     580:	a7 81       	ldd	r26, Z+7	; 0x07
     582:	b0 85       	ldd	r27, Z+8	; 0x08
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	3a 81       	ldd	r19, Y+2	; 0x02
     588:	f9 01       	movw	r30, r18
     58a:	85 83       	std	Z+5, r24	; 0x05
     58c:	96 83       	std	Z+6, r25	; 0x06
     58e:	a7 83       	std	Z+7, r26	; 0x07
     590:	b0 87       	std	Z+8, r27	; 0x08
     592:	00 00       	nop
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_ZN11DHT_Unified8humidityEv+0x6>
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	7c 83       	std	Y+4, r23	; 0x04
     5b4:	6b 83       	std	Y+3, r22	; 0x03
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	9c 01       	movw	r18, r24
     5bc:	23 5e       	subi	r18, 0xE3	; 227
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	b9 01       	movw	r22, r18
     5c6:	b6 df       	rcall	.-148    	; 0x534 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <_ZN7TwoWire5writeEi+0x6>
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	7c 83       	std	Y+4, r23	; 0x04
     5ec:	6b 83       	std	Y+3, r22	; 0x03
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 81       	ld	r18, Z
     5fc:	31 81       	ldd	r19, Z+1	; 0x01
     5fe:	4b 81       	ldd	r20, Y+3	; 0x03
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	64 2f       	mov	r22, r20
     606:	f9 01       	movw	r30, r18
     608:	19 95       	eicall
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <setup>:
int RFID_RED_LED = 9;	// Red led pin;

#pragma endregion LEDs

void setup()
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	eb 97       	sbiw	r28, 0x3b	; 59
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	55 e2       	ldi	r21, 0x25	; 37
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	80 eb       	ldi	r24, 0xB0	; 176
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	9a de       	rcall	.-716    	; 0x36e <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     63a:	84 ea       	ldi	r24, 0xA4	; 164
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN7TwoWire5beginEv>
	
	pinMode(10, OUTPUT);	// alarm biber
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
	digitalWrite(10, LOW); // silence the alarm biber
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8a e0       	ldi	r24, 0x0A	; 10
     64e:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
	
#pragma region LEDs

// Front door led status indicator for door lock
pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     652:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     656:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <RFID_GREEN_LED+0x1>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
pinMode(RFID_RED_LED, OUTPUT);		// Red led
     660:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_RED_LED>
     664:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_RED_LED+0x1>
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>

// set led state for startup
digitalWrite(RFID_GREEN_LED, LOW);	// Green led
     66e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     672:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <RFID_GREEN_LED+0x1>
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
digitalWrite(RFID_RED_LED, HIGH);	// Red led
     67c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_RED_LED>
     680:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_RED_LED+0x1>
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     692:	ce 01       	movw	r24, r28
     694:	0b 96       	adiw	r24, 0x0b	; 11
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	73 e0       	ldi	r23, 0x03	; 3
     69a:	30 df       	rcall	.-416    	; 0x4fc <_ZN11DHT_Unified11temperatureEv>
     69c:	9e 01       	movw	r18, r28
     69e:	2c 5e       	subi	r18, 0xEC	; 236
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	ce 01       	movw	r24, r28
     6a4:	0b 96       	adiw	r24, 0x0b	; 11
     6a6:	b9 01       	movw	r22, r18
     6a8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     6ac:	ce 01       	movw	r24, r28
     6ae:	0b 96       	adiw	r24, 0x0b	; 11
     6b0:	79 d3       	rcall	.+1778   	; 0xda4 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     6b2:	ce 01       	movw	r24, r28
     6b4:	02 96       	adiw	r24, 0x02	; 2
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	73 e0       	ldi	r23, 0x03	; 3
     6ba:	73 df       	rcall	.-282    	; 0x5a2 <_ZN11DHT_Unified8humidityEv>
     6bc:	9e 01       	movw	r18, r28
     6be:	2c 5e       	subi	r18, 0xEC	; 236
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	ce 01       	movw	r24, r28
     6c4:	02 96       	adiw	r24, 0x02	; 2
     6c6:	b9 01       	movw	r22, r18
     6c8:	0e 94 bb 10 	call	0x2176	; 0x2176 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     6cc:	ce 01       	movw	r24, r28
     6ce:	02 96       	adiw	r24, 0x02	; 2
     6d0:	9c d3       	rcall	.+1848   	; 0xe0a <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     6d2:	88 ad       	ldd	r24, Y+56	; 0x38
     6d4:	99 ad       	ldd	r25, Y+57	; 0x39
     6d6:	aa ad       	ldd	r26, Y+58	; 0x3a
     6d8:	bb ad       	ldd	r27, Y+59	; 0x3b
     6da:	28 ee       	ldi	r18, 0xE8	; 232
     6dc:	33 e0       	ldi	r19, 0x03	; 3
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	bc 01       	movw	r22, r24
     6e4:	cd 01       	movw	r24, r26
     6e6:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__divmodsi4>
     6ea:	da 01       	movw	r26, r20
     6ec:	c9 01       	movw	r24, r18
     6ee:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <delayMS>
     6f2:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <delayMS+0x1>
     6f6:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <delayMS+0x2>
     6fa:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     6fe:	80 eb       	ldi	r24, 0xB0	; 176
     700:	94 e0       	ldi	r25, 0x04	; 4
     702:	57 de       	rcall	.-850    	; 0x3b2 <_ZN14HardwareSerialcvbEv>
     704:	98 2f       	mov	r25, r24
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	89 27       	eor	r24, r25
     70a:	88 23       	and	r24, r24
     70c:	09 f0       	breq	.+2      	; 0x710 <setup+0xf8>
     70e:	f7 cf       	rjmp	.-18     	; 0x6fe <setup+0xe6>
  SPI.begin();         // Init SPI bus
     710:	0e 94 37 20 	call	0x406e	; 0x406e <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     714:	80 e3       	ldi	r24, 0x30	; 48
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	60 f4       	brcc	.+24     	; 0x73c <setup+0x124>
  {
	  key.keyByte[i] = 0xFF;
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	82 5c       	subi	r24, 0xC2	; 194
     72c:	9c 4f       	sbci	r25, 0xFC	; 252
     72e:	2f ef       	ldi	r18, 0xFF	; 255
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	89 83       	std	Y+1, r24	; 0x01
     73a:	f1 cf       	rjmp	.-30     	; 0x71e <setup+0x106>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     73c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Servo_pin>
     740:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Servo_pin+0x1>
     744:	bc 01       	movw	r22, r24
     746:	8a e4       	ldi	r24, 0x4A	; 74
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8a e4       	ldi	r24, 0x4A	; 74
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN5Servo5writeEi>

#pragma endregion Servo Motor
 
}
     75a:	00 00       	nop
     75c:	eb 96       	adiw	r28, 0x3b	; 59
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <loop>:

void loop()
{
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	e8 97       	sbiw	r28, 0x38	; 56
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     784:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <delayMS>
     788:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <delayMS+0x1>
     78c:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <delayMS+0x2>
     790:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <delayMS+0x3>
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     79c:	ce 01       	movw	r24, r28
     79e:	0c 96       	adiw	r24, 0x0c	; 12
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	73 e0       	ldi	r23, 0x03	; 3
     7a4:	ab de       	rcall	.-682    	; 0x4fc <_ZN11DHT_Unified11temperatureEv>
     7a6:	9e 01       	movw	r18, r28
     7a8:	2b 5e       	subi	r18, 0xEB	; 235
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	ce 01       	movw	r24, r28
     7ae:	0c 96       	adiw	r24, 0x0c	; 12
     7b0:	b9 01       	movw	r22, r18
     7b2:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     7b6:	ce 01       	movw	r24, r28
     7b8:	0c 96       	adiw	r24, 0x0c	; 12
     7ba:	f4 d2       	rcall	.+1512   	; 0xda4 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     7bc:	89 a5       	ldd	r24, Y+41	; 0x29
     7be:	9a a5       	ldd	r25, Y+42	; 0x2a
     7c0:	ab a5       	ldd	r26, Y+43	; 0x2b
     7c2:	bc a5       	ldd	r27, Y+44	; 0x2c
     7c4:	11 e0       	ldi	r17, 0x01	; 1
     7c6:	9c 01       	movw	r18, r24
     7c8:	ad 01       	movw	r20, r26
     7ca:	bc 01       	movw	r22, r24
     7cc:	cd 01       	movw	r24, r26
     7ce:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <__unordsf2>
     7d2:	88 23       	and	r24, r24
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <loop+0x6a>
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	11 23       	and	r17, r17
     7da:	39 f0       	breq	.+14     	; 0x7ea <loop+0x7c>
	{
		DhtSencorTemp = 420;
     7dc:	84 ea       	ldi	r24, 0xA4	; 164
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <DhtSencorTemp+0x1>
     7e4:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <DhtSencorTemp>
     7e8:	0e c0       	rjmp	.+28     	; 0x806 <loop+0x98>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     7ea:	89 a5       	ldd	r24, Y+41	; 0x29
     7ec:	9a a5       	ldd	r25, Y+42	; 0x2a
     7ee:	ab a5       	ldd	r26, Y+43	; 0x2b
     7f0:	bc a5       	ldd	r27, Y+44	; 0x2c
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__fixsfsi>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <DhtSencorTemp+0x1>
     802:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     806:	ce 01       	movw	r24, r28
     808:	03 96       	adiw	r24, 0x03	; 3
     80a:	62 e0       	ldi	r22, 0x02	; 2
     80c:	73 e0       	ldi	r23, 0x03	; 3
     80e:	c9 de       	rcall	.-622    	; 0x5a2 <_ZN11DHT_Unified8humidityEv>
     810:	9e 01       	movw	r18, r28
     812:	2b 5e       	subi	r18, 0xEB	; 235
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	ce 01       	movw	r24, r28
     818:	03 96       	adiw	r24, 0x03	; 3
     81a:	b9 01       	movw	r22, r18
     81c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     820:	ce 01       	movw	r24, r28
     822:	03 96       	adiw	r24, 0x03	; 3
     824:	f2 d2       	rcall	.+1508   	; 0xe0a <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     826:	89 a5       	ldd	r24, Y+41	; 0x29
     828:	9a a5       	ldd	r25, Y+42	; 0x2a
     82a:	ab a5       	ldd	r26, Y+43	; 0x2b
     82c:	bc a5       	ldd	r27, Y+44	; 0x2c
     82e:	11 e0       	ldi	r17, 0x01	; 1
     830:	9c 01       	movw	r18, r24
     832:	ad 01       	movw	r20, r26
     834:	bc 01       	movw	r22, r24
     836:	cd 01       	movw	r24, r26
     838:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <__unordsf2>
     83c:	88 23       	and	r24, r24
     83e:	09 f4       	brne	.+2      	; 0x842 <loop+0xd4>
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	11 23       	and	r17, r17
     844:	39 f0       	breq	.+14     	; 0x854 <loop+0xe6>
	{
		DhtSencorHum = 360;
     846:	88 e6       	ldi	r24, 0x68	; 104
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <DhtSencorHum+0x1>
     84e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <DhtSencorHum>
     852:	0e c0       	rjmp	.+28     	; 0x870 <loop+0x102>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     854:	89 a5       	ldd	r24, Y+41	; 0x29
     856:	9a a5       	ldd	r25, Y+42	; 0x2a
     858:	ab a5       	ldd	r26, Y+43	; 0x2b
     85a:	bc a5       	ldd	r27, Y+44	; 0x2c
     85c:	bc 01       	movw	r22, r24
     85e:	cd 01       	movw	r24, r26
     860:	0e 94 80 26 	call	0x4d00	; 0x4d00 <__fixsfsi>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <DhtSencorHum+0x1>
     86c:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <DhtSencorHum>
	//Serial.print("Temp: ");
	//Serial.println(DhtSencorTemp);
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);
  
  Wire.beginTransmission(4);		// transmit to device #4
     870:	64 e0       	ldi	r22, 0x04	; 4
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	84 ea       	ldi	r24, 0xA4	; 164
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	0e 94 47 24 	call	0x488e	; 0x488e <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     87c:	6c e0       	ldi	r22, 0x0C	; 12
     87e:	72 e0       	ldi	r23, 0x02	; 2
     880:	84 ea       	ldi	r24, 0xA4	; 164
     882:	94 e0       	ldi	r25, 0x04	; 4
     884:	43 dd       	rcall	.-1402   	; 0x30c <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     886:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <DhtSencorTemp>
     88a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <DhtSencorTemp+0x1>
     88e:	bc 01       	movw	r22, r24
     890:	84 ea       	ldi	r24, 0xA4	; 164
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	a2 de       	rcall	.-700    	; 0x5da <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     896:	84 ea       	ldi	r24, 0xA4	; 164
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	0e 94 82 24 	call	0x4904	; 0x4904 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     89e:	64 e0       	ldi	r22, 0x04	; 4
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	84 ea       	ldi	r24, 0xA4	; 164
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	0e 94 47 24 	call	0x488e	; 0x488e <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");			// sends some bytes
     8aa:	63 e1       	ldi	r22, 0x13	; 19
     8ac:	72 e0       	ldi	r23, 0x02	; 2
     8ae:	84 ea       	ldi	r24, 0xA4	; 164
     8b0:	94 e0       	ldi	r25, 0x04	; 4
     8b2:	2c dd       	rcall	.-1448   	; 0x30c <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorHum);		    // sends some bytes
     8b4:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <DhtSencorHum>
     8b8:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <DhtSencorHum+0x1>
     8bc:	bc 01       	movw	r22, r24
     8be:	84 ea       	ldi	r24, 0xA4	; 164
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	8b de       	rcall	.-746    	; 0x5da <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     8c4:	84 ea       	ldi	r24, 0xA4	; 164
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	0e 94 82 24 	call	0x4904	; 0x4904 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver


#pragma region RFID lås (Hoveddør)

	int isCardValid = 0;	// set - reset state
     8cc:	1a 82       	std	Y+2, r1	; 0x02
     8ce:	19 82       	std	Y+1, r1	; 0x01

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     8d0:	80 e3       	ldi	r24, 0x30	; 48
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     8d8:	98 2f       	mov	r25, r24
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	89 27       	eor	r24, r25
     8de:	88 23       	and	r24, r24
     8e0:	49 f4       	brne	.+18     	; 0x8f4 <loop+0x186>
     8e2:	80 e3       	ldi	r24, 0x30	; 48
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 38 1a 	call	0x3470	; 0x3470 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     8ea:	98 2f       	mov	r25, r24
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	89 27       	eor	r24, r25
     8f0:	88 23       	and	r24, r24
     8f2:	11 f0       	breq	.+4      	; 0x8f8 <loop+0x18a>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <loop+0x18c>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	88 23       	and	r24, r24
     8fc:	49 f0       	breq	.+18     	; 0x910 <loop+0x1a2>
	{
		delay(50);
     8fe:	62 e3       	ldi	r22, 0x32	; 50
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
		isCardValid = 0;
     90a:	1a 82       	std	Y+2, r1	; 0x02
     90c:	19 82       	std	Y+1, r1	; 0x01
	}
	else 
	{
		isCardValid = RfidValidater();
     90e:	42 c0       	rjmp	.+132    	; 0x994 <loop+0x226>
     910:	52 d0       	rcall	.+164    	; 0x9b6 <_Z13RfidValidaterv>
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
		Serial.print("stade 1: ");
     916:	69 e1       	ldi	r22, 0x19	; 25
     918:	72 e0       	ldi	r23, 0x02	; 2
     91a:	80 eb       	ldi	r24, 0xB0	; 176
     91c:	94 e0       	ldi	r25, 0x04	; 4
     91e:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN5Print5printEPKc>
		Serial.println(isCardValid);
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	4a e0       	ldi	r20, 0x0A	; 10
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	bc 01       	movw	r22, r24
     92c:	80 eb       	ldi	r24, 0xB0	; 176
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	0e 94 c7 2a 	call	0x558e	; 0x558e <_ZN5Print7printlnEii>
		// if card/chip is valid
		if (isCardValid == 1)
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	a9 f4       	brne	.+42     	; 0x966 <loop+0x1f8>
		{
			Serial.print("stade 2: ");
     93c:	63 e2       	ldi	r22, 0x23	; 35
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	80 eb       	ldi	r24, 0xB0	; 176
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN5Print5printEPKc>
			Serial.println(isCardValid);
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	4a e0       	ldi	r20, 0x0A	; 10
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	bc 01       	movw	r22, r24
     952:	80 eb       	ldi	r24, 0xB0	; 176
			// Toggles the Front door status led's
			SwitchRfidLeds();
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	0e 94 c7 2a 	call	0x558e	; 0x558e <_ZN5Print7printlnEii>
				
			// makes 1 small bib sound
			makeBipSound(1);
     95a:	e6 d0       	rcall	.+460    	; 0xb28 <_Z14SwitchRfidLedsv>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
				
			// Move servo
			moveServo();
     960:	65 d1       	rcall	.+714    	; 0xc2c <_Z12makeBipSoundi>
     962:	18 d1       	rcall	.+560    	; 0xb94 <_Z9moveServov>
     964:	17 c0       	rjmp	.+46     	; 0x994 <loop+0x226>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	02 97       	sbiw	r24, 0x02	; 2
     96c:	99 f4       	brne	.+38     	; 0x994 <loop+0x226>
		{
			Serial.print("stade 3: ");
     96e:	6d e2       	ldi	r22, 0x2D	; 45
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	80 eb       	ldi	r24, 0xB0	; 176
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN5Print5printEPKc>
			Serial.println(isCardValid);
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	4a e0       	ldi	r20, 0x0A	; 10
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	bc 01       	movw	r22, r24
     984:	80 eb       	ldi	r24, 0xB0	; 176
     986:	94 e0       	ldi	r25, 0x04	; 4
			// Toggles the Front door status led's
			SwitchRfidLeds();
     988:	0e 94 c7 2a 	call	0x558e	; 0x558e <_ZN5Print7printlnEii>
				
			// makes 3 small bib sounds
			makeBipSound(2);
     98c:	cd d0       	rcall	.+410    	; 0xb28 <_Z14SwitchRfidLedsv>
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	4c d1       	rcall	.+664    	; 0xc2c <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     994:	68 ee       	ldi	r22, 0xE8	; 232
     996:	73 e0       	ldi	r23, 0x03	; 3
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
}
     9a0:	00 00       	nop
     9a2:	e8 96       	adiw	r28, 0x38	; 56
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	08 95       	ret

000009b6 <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	69 97       	sbiw	r28, 0x19	; 25
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     9ce:	ce 01       	movw	r24, r28
     9d0:	44 96       	adiw	r24, 0x14	; 20
     9d2:	67 e3       	ldi	r22, 0x37	; 55
     9d4:	72 e0       	ldi	r23, 0x02	; 2
     9d6:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     9da:	19 82       	std	Y+1, r1	; 0x01
     9dc:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <mfrc522>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	89 17       	cp	r24, r25
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <_Z13RfidValidaterv+0x32>
     9e6:	5f c0       	rjmp	.+190    	; 0xaa6 <_Z13RfidValidaterv+0xf0>
	{
		Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	8f 5c       	subi	r24, 0xCF	; 207
     9f0:	9c 4f       	sbci	r25, 0xFC	; 252
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	80 31       	cpi	r24, 0x10	; 16
     9f8:	18 f4       	brcc	.+6      	; 0xa00 <_Z13RfidValidaterv+0x4a>
     9fa:	88 e3       	ldi	r24, 0x38	; 56
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <_Z13RfidValidaterv+0x4e>
     a00:	8b e3       	ldi	r24, 0x3B	; 59
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	bc 01       	movw	r22, r24
     a06:	80 eb       	ldi	r24, 0xB0	; 176
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN5Print5printEPKc>
		Serial.print(mfrc522.uid.uidByte[i], HEX);
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	8f 5c       	subi	r24, 0xCF	; 207
     a16:	9c 4f       	sbci	r25, 0xFC	; 252
     a18:	fc 01       	movw	r30, r24
     a1a:	80 81       	ld	r24, Z
     a1c:	40 e1       	ldi	r20, 0x10	; 16
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	68 2f       	mov	r22, r24
     a22:	80 eb       	ldi	r24, 0xB0	; 176
     a24:	94 e0       	ldi	r25, 0x04	; 4
     a26:	0e 94 76 2a 	call	0x54ec	; 0x54ec <_ZN5Print5printEhi>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	88 2f       	mov	r24, r24
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	8f 5c       	subi	r24, 0xCF	; 207
     a32:	9c 4f       	sbci	r25, 0xFC	; 252
     a34:	fc 01       	movw	r30, r24
     a36:	80 81       	ld	r24, Z
     a38:	80 31       	cpi	r24, 0x10	; 16
     a3a:	18 f4       	brcc	.+6      	; 0xa42 <_Z13RfidValidaterv+0x8c>
     a3c:	88 e3       	ldi	r24, 0x38	; 56
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <_Z13RfidValidaterv+0x90>
     a42:	8b e3       	ldi	r24, 0x3B	; 59
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	9e 01       	movw	r18, r28
     a48:	22 5f       	subi	r18, 0xF2	; 242
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	bc 01       	movw	r22, r24
     a4e:	c9 01       	movw	r24, r18
     a50:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <_ZN6StringC1EPKc>
     a54:	9e 01       	movw	r18, r28
     a56:	22 5f       	subi	r18, 0xF2	; 242
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	ce 01       	movw	r24, r28
     a5c:	44 96       	adiw	r24, 0x14	; 20
     a5e:	b9 01       	movw	r22, r18
     a60:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <_ZN6String6concatERKS_>
     a64:	ce 01       	movw	r24, r28
     a66:	0e 96       	adiw	r24, 0x0e	; 14
     a68:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	8f 5c       	subi	r24, 0xCF	; 207
     a74:	9c 4f       	sbci	r25, 0xFC	; 252
     a76:	fc 01       	movw	r30, r24
     a78:	20 81       	ld	r18, Z
     a7a:	ce 01       	movw	r24, r28
     a7c:	08 96       	adiw	r24, 0x08	; 8
     a7e:	40 e1       	ldi	r20, 0x10	; 16
     a80:	62 2f       	mov	r22, r18
     a82:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN6StringC1Ehh>
     a86:	9e 01       	movw	r18, r28
     a88:	28 5f       	subi	r18, 0xF8	; 248
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	ce 01       	movw	r24, r28
     a8e:	44 96       	adiw	r24, 0x14	; 20
     a90:	b9 01       	movw	r22, r18
     a92:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <_ZN6String6concatERKS_>
     a96:	ce 01       	movw	r24, r28
     a98:	08 96       	adiw	r24, 0x08	; 8
     a9a:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	9b cf       	rjmp	.-202    	; 0x9dc <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     aa6:	ce 01       	movw	r24, r28
     aa8:	44 96       	adiw	r24, 0x14	; 20
     aaa:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     aae:	ce 01       	movw	r24, r28
     ab0:	02 96       	adiw	r24, 0x02	; 2
     ab2:	9e 01       	movw	r18, r28
     ab4:	2c 5e       	subi	r18, 0xEC	; 236
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	b9 01       	movw	r22, r18
     abe:	02 dc       	rcall	.-2044   	; 0x2c4 <_ZNK6String9substringEj>
     ac0:	ce 01       	movw	r24, r28
     ac2:	02 96       	adiw	r24, 0x02	; 2
     ac4:	64 e4       	ldi	r22, 0x44	; 68
     ac6:	73 e0       	ldi	r23, 0x03	; 3
     ac8:	e5 db       	rcall	.-2102   	; 0x294 <_ZNK6StringeqERKS_>
     aca:	11 e0       	ldi	r17, 0x01	; 1
     acc:	88 23       	and	r24, r24
     ace:	09 f4       	brne	.+2      	; 0xad2 <_Z13RfidValidaterv+0x11c>
     ad0:	10 e0       	ldi	r17, 0x00	; 0
     ad2:	ce 01       	movw	r24, r28
     ad4:	02 96       	adiw	r24, 0x02	; 2
     ad6:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN6StringD1Ev>
     ada:	11 23       	and	r17, r17
     adc:	69 f0       	breq	.+26     	; 0xaf8 <_Z13RfidValidaterv+0x142>
	{
		Serial.println("Authorized access");
     ade:	6d e3       	ldi	r22, 0x3D	; 61
     ae0:	72 e0       	ldi	r23, 0x02	; 2
     ae2:	80 eb       	ldi	r24, 0xB0	; 176
     ae4:	94 e0       	ldi	r25, 0x04	; 4
     ae6:	0e 94 11 2a 	call	0x5422	; 0x5422 <_ZN5Print7printlnEPKc>
		Serial.println();
     aea:	80 eb       	ldi	r24, 0xB0	; 176
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	0e 94 0d 2a 	call	0x541a	; 0x541a <_ZN5Print7printlnEv>
		return 1;
     af2:	01 e0       	ldi	r16, 0x01	; 1
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	08 c0       	rjmp	.+16     	; 0xb08 <_Z13RfidValidaterv+0x152>
	}
	else
	{
		Serial.println(" Access denied");
     af8:	6f e4       	ldi	r22, 0x4F	; 79
     afa:	72 e0       	ldi	r23, 0x02	; 2
     afc:	80 eb       	ldi	r24, 0xB0	; 176
     afe:	94 e0       	ldi	r25, 0x04	; 4
     b00:	0e 94 11 2a 	call	0x5422	; 0x5422 <_ZN5Print7printlnEPKc>
		return 2;
     b04:	02 e0       	ldi	r16, 0x02	; 2
     b06:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     b08:	ce 01       	movw	r24, r28
     b0a:	44 96       	adiw	r24, 0x14	; 20
     b0c:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN6StringD1Ev>
     b10:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     b12:	69 96       	adiw	r28, 0x19	; 25
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <_Z14SwitchRfidLedsv>:

// This function switches between high and low values each time it is called.
void SwitchRfidLeds() 
{
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	// Toggles the Front door status led's
	if (RFID_GREEN_LED == HIGH)
     b30:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     b34:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <RFID_GREEN_LED+0x1>
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	71 f4       	brne	.+28     	; 0xb58 <_Z14SwitchRfidLedsv+0x30>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Light up GREEN LED
     b3c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     b40:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <RFID_GREEN_LED+0x1>
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Turn OFF RED LED
     b4a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_RED_LED>
     b4e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_RED_LED+0x1>
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
	}
	if (RFID_RED_LED == HIGH)
     b58:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_RED_LED>
     b5c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_RED_LED+0x1>
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	71 f4       	brne	.+28     	; 0xb80 <_Z14SwitchRfidLedsv+0x58>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     b64:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     b68:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <RFID_GREEN_LED+0x1>
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     b72:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_RED_LED>
     b76:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_RED_LED+0x1>
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
	}
	delay(100);
     b80:	64 e6       	ldi	r22, 0x64	; 100
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
}
     b8c:	00 00       	nop
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     b9c:	8a e4       	ldi	r24, 0x4A	; 74
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN5Servo4readEv>
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	84 3b       	cpi	r24, 0xB4	; 180
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f0       	breq	.+2      	; 0xbae <_Z9moveServov+0x1a>
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	22 23       	and	r18, r18
     bb0:	71 f0       	breq	.+28     	; 0xbce <_Z9moveServov+0x3a>
	{
		digitalWrite(Servo_pin, HIGH);
     bb2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Servo_pin>
     bb6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Servo_pin+0x1>
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
		servo.write(0);
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	8a e4       	ldi	r24, 0x4A	; 74
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN5Servo5writeEi>
     bcc:	25 c0       	rjmp	.+74     	; 0xc18 <_Z9moveServov+0x84>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     bce:	8a e4       	ldi	r24, 0x4A	; 74
     bd0:	93 e0       	ldi	r25, 0x03	; 3
     bd2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN5Servo4readEv>
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	89 2b       	or	r24, r25
     bda:	09 f0       	breq	.+2      	; 0xbde <_Z9moveServov+0x4a>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	22 23       	and	r18, r18
     be0:	71 f0       	breq	.+28     	; 0xbfe <_Z9moveServov+0x6a>
	{
		digitalWrite(Servo_pin, LOW);
     be2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Servo_pin>
     be6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Servo_pin+0x1>
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
		servo.write(180);
     bf0:	64 eb       	ldi	r22, 0xB4	; 180
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	8a e4       	ldi	r24, 0x4A	; 74
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN5Servo5writeEi>
     bfc:	0d c0       	rjmp	.+26     	; 0xc18 <_Z9moveServov+0x84>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     bfe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Servo_pin>
     c02:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Servo_pin+0x1>
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
		servo.write(180);
     c0c:	64 eb       	ldi	r22, 0xB4	; 180
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	8a e4       	ldi	r24, 0x4A	; 74
     c12:	93 e0       	ldi	r25, 0x03	; 3
     c14:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN5Servo5writeEi>
	}
	delay(100);
     c18:	64 e6       	ldi	r22, 0x64	; 100
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
}
     c24:	00 00       	nop
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 d0       	rcall	.+0      	; 0xc32 <_Z12makeBipSoundi+0x6>
     c32:	1f 92       	push	r1
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	79 f4       	brne	.+30     	; 0xc62 <_Z12makeBipSoundi+0x36>
	{
		digitalWrite(10, HIGH); // start alarm
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
		delay(100);
     c4c:	64 e6       	ldi	r22, 0x64	; 100
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
		digitalWrite(10, LOW); // silence the alarm 
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	8a e0       	ldi	r24, 0x0A	; 10
     c5c:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
     c60:	26 c0       	rjmp	.+76     	; 0xcae <_Z12makeBipSoundi+0x82>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	02 97       	sbiw	r24, 0x02	; 2
     c68:	d1 f4       	brne	.+52     	; 0xc9e <_Z12makeBipSoundi+0x72>
	{
		// bibs 3 times
		for (int i = 0; i < 2;  i++)
     c6a:	1a 82       	std	Y+2, r1	; 0x02
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	02 97       	sbiw	r24, 0x02	; 2
     c74:	e4 f4       	brge	.+56     	; 0xcae <_Z12makeBipSoundi+0x82>
		{
			digitalWrite(10, HIGH); // start alarm
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	8a e0       	ldi	r24, 0x0A	; 10
     c7a:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
			delay(50);
     c7e:	62 e3       	ldi	r22, 0x32	; 50
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
			digitalWrite(10, LOW); // silence the alarm
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 2;  i++)
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	e8 cf       	rjmp	.-48     	; 0xc6e <_Z12makeBipSoundi+0x42>
			delay(50);
			digitalWrite(10, LOW); // silence the alarm
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	03 97       	sbiw	r24, 0x03	; 3
     ca4:	21 f4       	brne	.+8      	; 0xcae <_Z12makeBipSoundi+0x82>
	{
		digitalWrite(10, HIGH); // start alarm
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	8a e0       	ldi	r24, 0x0A	; 10
     caa:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
	}
	delay(100);
     cae:	64 e6       	ldi	r22, 0x64	; 100
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
     cba:	00 00       	nop
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	1f 92       	push	r1
     cd0:	1f 92       	push	r1
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	4d 96       	adiw	r24, 0x1d	; 29
     ce0:	94 d0       	rcall	.+296    	; 0xe0a <_ZN11DHT_Unified8HumidityD1Ev>
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	44 96       	adiw	r24, 0x14	; 20
     ce8:	5d d0       	rcall	.+186    	; 0xda4 <_ZN11DHT_Unified11TemperatureD1Ev>
     cea:	00 00       	nop
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <_Z41__static_initialization_and_destruction_0ii>:
     cf6:	af 92       	push	r10
     cf8:	bf 92       	push	r11
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <_Z41__static_initialization_and_destruction_0ii+0x16>
     d0c:	1f 92       	push	r1
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	7c 83       	std	Y+4, r23	; 0x04
     d18:	6b 83       	std	Y+3, r22	; 0x03
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	11 f5       	brne	.+68     	; 0xd66 <_Z41__static_initialization_and_destruction_0ii+0x70>
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	f1 f4       	brne	.+60     	; 0xd66 <_Z41__static_initialization_and_destruction_0ii+0x70>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     d2a:	aa 24       	eor	r10, r10
     d2c:	aa 94       	dec	r10
     d2e:	ba 2c       	mov	r11, r10
     d30:	65 01       	movw	r12, r10
     d32:	ee 24       	eor	r14, r14
     d34:	ea 94       	dec	r14
     d36:	fe 2c       	mov	r15, r14
     d38:	87 01       	movw	r16, r14
     d3a:	26 e0       	ldi	r18, 0x06	; 6
     d3c:	4b e0       	ldi	r20, 0x0B	; 11
     d3e:	62 e0       	ldi	r22, 0x02	; 2
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	c3 d6       	rcall	.+3462   	; 0x1acc <_ZN11DHT_UnifiedC1Ehhhll>

// definitions
#define RST_PIN   5     // Configurable, see typical pin layout above
#define SS_PIN    53    // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     d46:	45 e0       	ldi	r20, 0x05	; 5
     d48:	65 e3       	ldi	r22, 0x35	; 53
     d4a:	80 e3       	ldi	r24, 0x30	; 48
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC522C1Ehh>
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}

MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     d52:	6e e5       	ldi	r22, 0x5E	; 94
     d54:	72 e0       	ldi	r23, 0x02	; 2
     d56:	84 e4       	ldi	r24, 0x44	; 68
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     d5e:	8a e4       	ldi	r24, 0x4A	; 74
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <_ZN5ServoC1Ev>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	89 2b       	or	r24, r25
     d6c:	59 f4       	brne	.+22     	; 0xd84 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	39 f4       	brne	.+14     	; 0xd84 <_Z41__static_initialization_and_destruction_0ii+0x8e>
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}

MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     d76:	84 e4       	ldi	r24, 0x44	; 68
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	a3 df       	rcall	.-186    	; 0xcca <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(10, HIGH); // start alarm
	}
	delay(100);
     d84:	00 00       	nop
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	08 95       	ret

00000da4 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	1f 92       	push	r1
     daa:	1f 92       	push	r1
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	27 ea       	ldi	r18, 0xA7	; 167
     db6:	32 e0       	ldi	r19, 0x02	; 2
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	fc 01       	movw	r30, r24
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	20 83       	st	Z, r18
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	03 db       	rcall	.-2554   	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	89 2b       	or	r24, r25
     dce:	21 f0       	breq	.+8      	; 0xdd8 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZdlPv>
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <_ZN11DHT_Unified11TemperatureD0Ev>:
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	1f 92       	push	r1
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	d6 df       	rcall	.-84     	; 0xda4 <_ZN11DHT_Unified11TemperatureD1Ev>
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZdlPv>
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	1f 92       	push	r1
     e10:	1f 92       	push	r1
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	29 e9       	ldi	r18, 0x99	; 153
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	fc 01       	movw	r30, r24
     e24:	31 83       	std	Z+1, r19	; 0x01
     e26:	20 83       	st	Z, r18
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	d0 da       	rcall	.-2656   	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	89 2b       	or	r24, r25
     e34:	21 f0       	breq	.+8      	; 0xe3e <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZdlPv>
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <_ZN11DHT_Unified8HumidityD0Ev>:
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	1f 92       	push	r1
     e4e:	1f 92       	push	r1
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	d6 df       	rcall	.-84     	; 0xe0a <_ZN11DHT_Unified8HumidityD1Ev>
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_ZdlPv>
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <_GLOBAL__sub_I_x>:
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	6f ef       	ldi	r22, 0xFF	; 255
     e7a:	7f ef       	ldi	r23, 0xFF	; 255
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	3a df       	rcall	.-396    	; 0xcf6 <_Z41__static_initialization_and_destruction_0ii>
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <_GLOBAL__sub_D_x>:
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	6f ef       	ldi	r22, 0xFF	; 255
     e92:	7f ef       	ldi	r23, 0xFF	; 255
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2e df       	rcall	.-420    	; 0xcf6 <_Z41__static_initialization_and_destruction_0ii>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	1f 92       	push	r1
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	f8 94       	cli
     eb2:	00 00       	nop
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <_ZN13InterruptLockD1Ev>:
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	1f 92       	push	r1
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	78 94       	sei
     ed0:	00 00       	nop
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <_ZN3DHTC1Ehhh>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	2b 97       	sbiw	r28, 0x0b	; 11
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	98 87       	std	Y+8, r25	; 0x08
     ef2:	8f 83       	std	Y+7, r24	; 0x07
     ef4:	69 87       	std	Y+9, r22	; 0x09
     ef6:	4a 87       	std	Y+10, r20	; 0x0a
     ef8:	2b 87       	std	Y+11, r18	; 0x0b
     efa:	8f 81       	ldd	r24, Y+7	; 0x07
     efc:	98 85       	ldd	r25, Y+8	; 0x08
     efe:	29 85       	ldd	r18, Y+9	; 0x09
     f00:	fc 01       	movw	r30, r24
     f02:	25 83       	std	Z+5, r18	; 0x05
     f04:	8f 81       	ldd	r24, Y+7	; 0x07
     f06:	98 85       	ldd	r25, Y+8	; 0x08
     f08:	2a 85       	ldd	r18, Y+10	; 0x0a
     f0a:	fc 01       	movw	r30, r24
     f0c:	26 83       	std	Z+6, r18	; 0x06
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	82 5b       	subi	r24, 0xB2	; 178
     f16:	9e 4f       	sbci	r25, 0xFE	; 254
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	fc 01       	movw	r30, r24
     f22:	84 91       	lpm	r24, Z
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	8f 81       	ldd	r24, Y+7	; 0x07
     f28:	98 85       	ldd	r25, Y+8	; 0x08
     f2a:	2b 81       	ldd	r18, Y+3	; 0x03
     f2c:	fc 01       	movw	r30, r24
     f2e:	27 83       	std	Z+7, r18	; 0x07
     f30:	89 85       	ldd	r24, Y+9	; 0x09
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	8c 56       	subi	r24, 0x6C	; 108
     f38:	9e 4f       	sbci	r25, 0xFE	; 254
     f3a:	9d 83       	std	Y+5, r25	; 0x05
     f3c:	8c 83       	std	Y+4, r24	; 0x04
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	fc 01       	movw	r30, r24
     f44:	84 91       	lpm	r24, Z
     f46:	8e 83       	std	Y+6, r24	; 0x06
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	98 85       	ldd	r25, Y+8	; 0x08
     f4c:	2e 81       	ldd	r18, Y+6	; 0x06
     f4e:	fc 01       	movw	r30, r24
     f50:	20 87       	std	Z+8, r18	; 0x08
     f52:	2f 81       	ldd	r18, Y+7	; 0x07
     f54:	38 85       	ldd	r19, Y+8	; 0x08
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	9e e3       	ldi	r25, 0x3E	; 62
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	85 87       	std	Z+13, r24	; 0x0d
     f62:	96 87       	std	Z+14, r25	; 0x0e
     f64:	a7 87       	std	Z+15, r26	; 0x0f
     f66:	b0 8b       	std	Z+16, r27	; 0x10
     f68:	00 00       	nop
     f6a:	2b 96       	adiw	r28, 0x0b	; 11
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <_ZN3DHT5beginEh>:
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	00 d0       	rcall	.+0      	; 0xf82 <_ZN3DHT5beginEh+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	6b 83       	std	Y+3, r22	; 0x03
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	85 81       	ldd	r24, Z+5	; 0x05
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
     f9a:	0e 94 21 2b 	call	0x5642	; 0x5642 <millis>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	80 5d       	subi	r24, 0xD0	; 208
     fa4:	97 40       	sbci	r25, 0x07	; 7
     fa6:	a1 09       	sbc	r26, r1
     fa8:	b1 09       	sbc	r27, r1
     faa:	29 81       	ldd	r18, Y+1	; 0x01
     fac:	3a 81       	ldd	r19, Y+2	; 0x02
     fae:	f9 01       	movw	r30, r18
     fb0:	81 87       	std	Z+9, r24	; 0x09
     fb2:	92 87       	std	Z+10, r25	; 0x0a
     fb4:	a3 87       	std	Z+11, r26	; 0x0b
     fb6:	b4 87       	std	Z+12, r27	; 0x0c
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	2b 81       	ldd	r18, Y+3	; 0x03
     fbe:	fc 01       	movw	r30, r24
     fc0:	22 8b       	std	Z+18, r18	; 0x12
     fc2:	00 00       	nop
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <_ZN3DHT15readTemperatureEbb>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	28 97       	sbiw	r28, 0x08	; 8
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	6f 83       	std	Y+7, r22	; 0x07
     fea:	48 87       	std	Y+8, r20	; 0x08
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a0 ec       	ldi	r26, 0xC0	; 192
     ff2:	bf e7       	ldi	r27, 0x7F	; 127
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	ab 83       	std	Y+3, r26	; 0x03
     ffa:	bc 83       	std	Y+4, r27	; 0x04
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	68 85       	ldd	r22, Y+8	; 0x08
    1002:	1d d2       	rcall	.+1082   	; 0x143e <_ZN3DHT4readEb>
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    1008:	34 c1       	rjmp	.+616    	; 0x1272 <__EEPROM_REGION_LENGTH__+0x272>
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	fc 01       	movw	r30, r24
    1010:	86 81       	ldd	r24, Z+6	; 0x06
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	8c 30       	cpi	r24, 0x0C	; 12
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101c:	72 c0       	rjmp	.+228    	; 0x1102 <__EEPROM_REGION_LENGTH__+0x102>
    101e:	8d 30       	cpi	r24, 0x0D	; 13
    1020:	91 05       	cpc	r25, r1
    1022:	1c f4       	brge	.+6      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1024:	0b 97       	sbiw	r24, 0x0b	; 11
    1026:	31 f0       	breq	.+12     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1028:	24 c1       	rjmp	.+584    	; 0x1272 <__EEPROM_REGION_LENGTH__+0x272>
    102a:	45 97       	sbiw	r24, 0x15	; 21
    102c:	02 97       	sbiw	r24, 0x02	; 2
    102e:	08 f0       	brcs	.+2      	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1030:	20 c1       	rjmp	.+576    	; 0x1272 <__EEPROM_REGION_LENGTH__+0x272>
    1032:	c7 c0       	rjmp	.+398    	; 0x11c2 <__EEPROM_REGION_LENGTH__+0x1c2>
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	fc 01       	movw	r30, r24
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e0       	ldi	r26, 0x00	; 0
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__floatunsisf>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	ab 83       	std	Y+3, r26	; 0x03
    1056:	bc 83       	std	Y+4, r27	; 0x04
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	fc 01       	movw	r30, r24
    105e:	83 81       	ldd	r24, Z+3	; 0x03
    1060:	88 23       	and	r24, r24
    1062:	84 f4       	brge	.+32     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	3a 81       	ldd	r19, Y+2	; 0x02
    1068:	4b 81       	ldd	r20, Y+3	; 0x03
    106a:	5c 81       	ldd	r21, Y+4	; 0x04
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	9f eb       	ldi	r25, 0xBF	; 191
    1074:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__subsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	ab 83       	std	Y+3, r26	; 0x03
    1082:	bc 83       	std	Y+4, r27	; 0x04
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	fc 01       	movw	r30, r24
    108a:	83 81       	ldd	r24, Z+3	; 0x03
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	8f 70       	andi	r24, 0x0F	; 15
    1092:	99 27       	eor	r25, r25
    1094:	09 2e       	mov	r0, r25
    1096:	00 0c       	add	r0, r0
    1098:	aa 0b       	sbc	r26, r26
    109a:	bb 0b       	sbc	r27, r27
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__floatsisf>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	2d ec       	ldi	r18, 0xCD	; 205
    10aa:	3c ec       	ldi	r19, 0xCC	; 204
    10ac:	4c ec       	ldi	r20, 0xCC	; 204
    10ae:	5d e3       	ldi	r21, 0x3D	; 61
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9c 01       	movw	r18, r24
    10be:	ad 01       	movw	r20, r26
    10c0:	69 81       	ldd	r22, Y+1	; 0x01
    10c2:	7a 81       	ldd	r23, Y+2	; 0x02
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__addsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	ab 83       	std	Y+3, r26	; 0x03
    10d6:	bc 83       	std	Y+4, r27	; 0x04
    10d8:	8f 81       	ldd	r24, Y+7	; 0x07
    10da:	88 23       	and	r24, r24
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <__EEPROM_REGION_LENGTH__+0xe0>
    10de:	c4 c0       	rjmp	.+392    	; 0x1268 <__EEPROM_REGION_LENGTH__+0x268>
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	ab 81       	ldd	r26, Y+3	; 0x03
    10e6:	bc 81       	ldd	r27, Y+4	; 0x04
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	3e 81       	ldd	r19, Y+6	; 0x06
    10ec:	ac 01       	movw	r20, r24
    10ee:	bd 01       	movw	r22, r26
    10f0:	c9 01       	movw	r24, r18
    10f2:	ce d0       	rcall	.+412    	; 0x1290 <_ZN3DHT11convertCtoFEf>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	ab 83       	std	Y+3, r26	; 0x03
    10fe:	bc 83       	std	Y+4, r27	; 0x04
    1100:	b3 c0       	rjmp	.+358    	; 0x1268 <__EEPROM_REGION_LENGTH__+0x268>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	fc 01       	movw	r30, r24
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__floatunsisf>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	ab 83       	std	Y+3, r26	; 0x03
    1124:	bc 83       	std	Y+4, r27	; 0x04
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	fc 01       	movw	r30, r24
    112c:	83 81       	ldd	r24, Z+3	; 0x03
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	8f 70       	andi	r24, 0x0F	; 15
    1134:	99 27       	eor	r25, r25
    1136:	09 2e       	mov	r0, r25
    1138:	00 0c       	add	r0, r0
    113a:	aa 0b       	sbc	r26, r26
    113c:	bb 0b       	sbc	r27, r27
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__floatsisf>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	2d ec       	ldi	r18, 0xCD	; 205
    114c:	3c ec       	ldi	r19, 0xCC	; 204
    114e:	4c ec       	ldi	r20, 0xCC	; 204
    1150:	5d e3       	ldi	r21, 0x3D	; 61
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	9c 01       	movw	r18, r24
    1160:	ad 01       	movw	r20, r26
    1162:	69 81       	ldd	r22, Y+1	; 0x01
    1164:	7a 81       	ldd	r23, Y+2	; 0x02
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__addsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	ab 83       	std	Y+3, r26	; 0x03
    1178:	bc 83       	std	Y+4, r27	; 0x04
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	fc 01       	movw	r30, r24
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	88 23       	and	r24, r24
    1184:	4c f4       	brge	.+18     	; 0x1198 <__EEPROM_REGION_LENGTH__+0x198>
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	ab 81       	ldd	r26, Y+3	; 0x03
    118c:	bc 81       	ldd	r27, Y+4	; 0x04
    118e:	b0 58       	subi	r27, 0x80	; 128
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	ab 83       	std	Y+3, r26	; 0x03
    1196:	bc 83       	std	Y+4, r27	; 0x04
    1198:	8f 81       	ldd	r24, Y+7	; 0x07
    119a:	88 23       	and	r24, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__EEPROM_REGION_LENGTH__+0x1a0>
    119e:	66 c0       	rjmp	.+204    	; 0x126c <__EEPROM_REGION_LENGTH__+0x26c>
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	ab 81       	ldd	r26, Y+3	; 0x03
    11a6:	bc 81       	ldd	r27, Y+4	; 0x04
    11a8:	2d 81       	ldd	r18, Y+5	; 0x05
    11aa:	3e 81       	ldd	r19, Y+6	; 0x06
    11ac:	ac 01       	movw	r20, r24
    11ae:	bd 01       	movw	r22, r26
    11b0:	c9 01       	movw	r24, r18
    11b2:	6e d0       	rcall	.+220    	; 0x1290 <_ZN3DHT11convertCtoFEf>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	ab 83       	std	Y+3, r26	; 0x03
    11be:	bc 83       	std	Y+4, r27	; 0x04
    11c0:	55 c0       	rjmp	.+170    	; 0x126c <__EEPROM_REGION_LENGTH__+0x26c>
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	fc 01       	movw	r30, r24
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	8f 77       	andi	r24, 0x7F	; 127
    11d0:	99 27       	eor	r25, r25
    11d2:	38 2f       	mov	r19, r24
    11d4:	22 27       	eor	r18, r18
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	fc 01       	movw	r30, r24
    11dc:	83 81       	ldd	r24, Z+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	82 2b       	or	r24, r18
    11e4:	93 2b       	or	r25, r19
    11e6:	cc 01       	movw	r24, r24
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__floatunsisf>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	ab 83       	std	Y+3, r26	; 0x03
    11fe:	bc 83       	std	Y+4, r27	; 0x04
    1200:	2d ec       	ldi	r18, 0xCD	; 205
    1202:	3c ec       	ldi	r19, 0xCC	; 204
    1204:	4c ec       	ldi	r20, 0xCC	; 204
    1206:	5d e3       	ldi	r21, 0x3D	; 61
    1208:	69 81       	ldd	r22, Y+1	; 0x01
    120a:	7a 81       	ldd	r23, Y+2	; 0x02
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	ab 83       	std	Y+3, r26	; 0x03
    121e:	bc 83       	std	Y+4, r27	; 0x04
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	fc 01       	movw	r30, r24
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	88 23       	and	r24, r24
    122a:	4c f4       	brge	.+18     	; 0x123e <__EEPROM_REGION_LENGTH__+0x23e>
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	ab 81       	ldd	r26, Y+3	; 0x03
    1232:	bc 81       	ldd	r27, Y+4	; 0x04
    1234:	b0 58       	subi	r27, 0x80	; 128
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	ab 83       	std	Y+3, r26	; 0x03
    123c:	bc 83       	std	Y+4, r27	; 0x04
    123e:	8f 81       	ldd	r24, Y+7	; 0x07
    1240:	88 23       	and	r24, r24
    1242:	b1 f0       	breq	.+44     	; 0x1270 <__EEPROM_REGION_LENGTH__+0x270>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	ab 81       	ldd	r26, Y+3	; 0x03
    124a:	bc 81       	ldd	r27, Y+4	; 0x04
    124c:	2d 81       	ldd	r18, Y+5	; 0x05
    124e:	3e 81       	ldd	r19, Y+6	; 0x06
    1250:	ac 01       	movw	r20, r24
    1252:	bd 01       	movw	r22, r26
    1254:	c9 01       	movw	r24, r18
    1256:	1c d0       	rcall	.+56     	; 0x1290 <_ZN3DHT11convertCtoFEf>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	ab 83       	std	Y+3, r26	; 0x03
    1262:	bc 83       	std	Y+4, r27	; 0x04
    1264:	00 00       	nop
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <__EEPROM_REGION_LENGTH__+0x270>
    1268:	00 00       	nop
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <__EEPROM_REGION_LENGTH__+0x272>
    126c:	00 00       	nop
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <__EEPROM_REGION_LENGTH__+0x272>
    1270:	00 00       	nop
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	ab 81       	ldd	r26, Y+3	; 0x03
    1278:	bc 81       	ldd	r27, Y+4	; 0x04
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	28 96       	adiw	r28, 0x08	; 8
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <_ZN3DHT11convertCtoFEf>:
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	00 d0       	rcall	.+0      	; 0x1296 <_ZN3DHT11convertCtoFEf+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <_ZN3DHT11convertCtoFEf+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	4b 83       	std	Y+3, r20	; 0x03
    12a2:	5c 83       	std	Y+4, r21	; 0x04
    12a4:	6d 83       	std	Y+5, r22	; 0x05
    12a6:	7e 83       	std	Y+6, r23	; 0x06
    12a8:	26 e6       	ldi	r18, 0x66	; 102
    12aa:	36 e6       	ldi	r19, 0x66	; 102
    12ac:	46 ee       	ldi	r20, 0xE6	; 230
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	6b 81       	ldd	r22, Y+3	; 0x03
    12b2:	7c 81       	ldd	r23, Y+4	; 0x04
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	52 e4       	ldi	r21, 0x42	; 66
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__addsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	26 96       	adiw	r28, 0x06	; 6
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <_ZN3DHT12readHumidityEb>:
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	27 97       	sbiw	r28, 0x07	; 7
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	6f 83       	std	Y+7, r22	; 0x07
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 ec       	ldi	r26, 0xC0	; 192
    1312:	bf e7       	ldi	r27, 0x7F	; 127
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	ab 83       	std	Y+3, r26	; 0x03
    131a:	bc 83       	std	Y+4, r27	; 0x04
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	6f 81       	ldd	r22, Y+7	; 0x07
    1322:	8d d0       	rcall	.+282    	; 0x143e <_ZN3DHT4readEb>
    1324:	88 23       	and	r24, r24
    1326:	09 f4       	brne	.+2      	; 0x132a <_ZN3DHT12readHumidityEb+0x40>
    1328:	77 c0       	rjmp	.+238    	; 0x1418 <_ZN3DHT12readHumidityEb+0x12e>
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	fc 01       	movw	r30, r24
    1330:	86 81       	ldd	r24, Z+6	; 0x06
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	8b 30       	cpi	r24, 0x0B	; 11
    1338:	91 05       	cpc	r25, r1
    133a:	0c f4       	brge	.+2      	; 0x133e <_ZN3DHT12readHumidityEb+0x54>
    133c:	6d c0       	rjmp	.+218    	; 0x1418 <_ZN3DHT12readHumidityEb+0x12e>
    133e:	8d 30       	cpi	r24, 0x0D	; 13
    1340:	91 05       	cpc	r25, r1
    1342:	2c f0       	brlt	.+10     	; 0x134e <_ZN3DHT12readHumidityEb+0x64>
    1344:	45 97       	sbiw	r24, 0x15	; 21
    1346:	02 97       	sbiw	r24, 0x02	; 2
    1348:	08 f0       	brcs	.+2      	; 0x134c <_ZN3DHT12readHumidityEb+0x62>
    134a:	66 c0       	rjmp	.+204    	; 0x1418 <_ZN3DHT12readHumidityEb+0x12e>
    134c:	37 c0       	rjmp	.+110    	; 0x13bc <_ZN3DHT12readHumidityEb+0xd2>
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	fc 01       	movw	r30, r24
    1354:	80 81       	ld	r24, Z
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	09 2e       	mov	r0, r25
    135c:	00 0c       	add	r0, r0
    135e:	aa 0b       	sbc	r26, r26
    1360:	bb 0b       	sbc	r27, r27
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__floatsisf>
    136a:	6b 01       	movw	r12, r22
    136c:	7c 01       	movw	r14, r24
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	fc 01       	movw	r30, r24
    1374:	81 81       	ldd	r24, Z+1	; 0x01
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	09 2e       	mov	r0, r25
    137c:	00 0c       	add	r0, r0
    137e:	aa 0b       	sbc	r26, r26
    1380:	bb 0b       	sbc	r27, r27
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <__floatsisf>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	2d ec       	ldi	r18, 0xCD	; 205
    1390:	3c ec       	ldi	r19, 0xCC	; 204
    1392:	4c ec       	ldi	r20, 0xCC	; 204
    1394:	5d e3       	ldi	r21, 0x3D	; 61
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9c 01       	movw	r18, r24
    13a4:	ad 01       	movw	r20, r26
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__addsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	ab 83       	std	Y+3, r26	; 0x03
    13b8:	bc 83       	std	Y+4, r27	; 0x04
    13ba:	2e c0       	rjmp	.+92     	; 0x1418 <_ZN3DHT12readHumidityEb+0x12e>
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	fc 01       	movw	r30, r24
    13c2:	80 81       	ld	r24, Z
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	38 2f       	mov	r19, r24
    13ca:	22 27       	eor	r18, r18
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	fc 01       	movw	r30, r24
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	82 2b       	or	r24, r18
    13da:	93 2b       	or	r25, r19
    13dc:	cc 01       	movw	r24, r24
    13de:	a0 e0       	ldi	r26, 0x00	; 0
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__floatunsisf>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	ab 83       	std	Y+3, r26	; 0x03
    13f4:	bc 83       	std	Y+4, r27	; 0x04
    13f6:	2d ec       	ldi	r18, 0xCD	; 205
    13f8:	3c ec       	ldi	r19, 0xCC	; 204
    13fa:	4c ec       	ldi	r20, 0xCC	; 204
    13fc:	5d e3       	ldi	r21, 0x3D	; 61
    13fe:	69 81       	ldd	r22, Y+1	; 0x01
    1400:	7a 81       	ldd	r23, Y+2	; 0x02
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	ab 83       	std	Y+3, r26	; 0x03
    1414:	bc 83       	std	Y+4, r27	; 0x04
    1416:	00 00       	nop
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	ab 81       	ldd	r26, Y+3	; 0x03
    141e:	bc 81       	ldd	r27, Y+4	; 0x04
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	27 96       	adiw	r28, 0x07	; 7
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	08 95       	ret

0000143e <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    143e:	af 92       	push	r10
    1440:	bf 92       	push	r11
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	c4 55       	subi	r28, 0x54	; 84
    1456:	d1 40       	sbci	r29, 0x01	; 1
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	9e 01       	movw	r18, r28
    1464:	2e 5a       	subi	r18, 0xAE	; 174
    1466:	3e 4f       	sbci	r19, 0xFE	; 254
    1468:	f9 01       	movw	r30, r18
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	ce 01       	movw	r24, r28
    1470:	8c 5a       	subi	r24, 0xAC	; 172
    1472:	9e 4f       	sbci	r25, 0xFE	; 254
    1474:	fc 01       	movw	r30, r24
    1476:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1478:	0e 94 21 2b 	call	0x5642	; 0x5642 <millis>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	af 83       	std	Y+7, r26	; 0x07
    1486:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1488:	ce 01       	movw	r24, r28
    148a:	8c 5a       	subi	r24, 0xAC	; 172
    148c:	9e 4f       	sbci	r25, 0xFE	; 254
    148e:	fc 01       	movw	r30, r24
    1490:	90 81       	ld	r25, Z
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 27       	eor	r24, r25
    1496:	88 23       	and	r24, r24
    1498:	29 f1       	breq	.+74     	; 0x14e4 <_ZN3DHT4readEb+0xa6>
    149a:	ce 01       	movw	r24, r28
    149c:	8e 5a       	subi	r24, 0xAE	; 174
    149e:	9e 4f       	sbci	r25, 0xFE	; 254
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	fc 01       	movw	r30, r24
    14a8:	81 85       	ldd	r24, Z+9	; 0x09
    14aa:	92 85       	ldd	r25, Z+10	; 0x0a
    14ac:	a3 85       	ldd	r26, Z+11	; 0x0b
    14ae:	b4 85       	ldd	r27, Z+12	; 0x0c
    14b0:	2d 81       	ldd	r18, Y+5	; 0x05
    14b2:	3e 81       	ldd	r19, Y+6	; 0x06
    14b4:	4f 81       	ldd	r20, Y+7	; 0x07
    14b6:	58 85       	ldd	r21, Y+8	; 0x08
    14b8:	59 01       	movw	r10, r18
    14ba:	6a 01       	movw	r12, r20
    14bc:	a8 1a       	sub	r10, r24
    14be:	b9 0a       	sbc	r11, r25
    14c0:	ca 0a       	sbc	r12, r26
    14c2:	db 0a       	sbc	r13, r27
    14c4:	d6 01       	movw	r26, r12
    14c6:	c5 01       	movw	r24, r10
    14c8:	80 3d       	cpi	r24, 0xD0	; 208
    14ca:	97 40       	sbci	r25, 0x07	; 7
    14cc:	a1 05       	cpc	r26, r1
    14ce:	b1 05       	cpc	r27, r1
    14d0:	48 f4       	brcc	.+18     	; 0x14e4 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    14d2:	ce 01       	movw	r24, r28
    14d4:	8e 5a       	subi	r24, 0xAE	; 174
    14d6:	9e 4f       	sbci	r25, 0xFE	; 254
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	fc 01       	movw	r30, r24
    14e0:	f1 88       	ldd	r15, Z+17	; 0x11
    14e2:	5f c2       	rjmp	.+1214   	; 0x19a2 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    14e4:	ce 01       	movw	r24, r28
    14e6:	8e 5a       	subi	r24, 0xAE	; 174
    14e8:	9e 4f       	sbci	r25, 0xFE	; 254
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 81       	ld	r18, Z
    14ee:	31 81       	ldd	r19, Z+1	; 0x01
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	af 81       	ldd	r26, Y+7	; 0x07
    14f6:	b8 85       	ldd	r27, Y+8	; 0x08
    14f8:	f9 01       	movw	r30, r18
    14fa:	81 87       	std	Z+9, r24	; 0x09
    14fc:	92 87       	std	Z+10, r25	; 0x0a
    14fe:	a3 87       	std	Z+11, r26	; 0x0b
    1500:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    1502:	ce 01       	movw	r24, r28
    1504:	8e 5a       	subi	r24, 0xAE	; 174
    1506:	9e 4f       	sbci	r25, 0xFE	; 254
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	fc 01       	movw	r30, r24
    1510:	14 82       	std	Z+4, r1	; 0x04
    1512:	ce 01       	movw	r24, r28
    1514:	8e 5a       	subi	r24, 0xAE	; 174
    1516:	9e 4f       	sbci	r25, 0xFE	; 254
    1518:	fc 01       	movw	r30, r24
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	fc 01       	movw	r30, r24
    1520:	24 81       	ldd	r18, Z+4	; 0x04
    1522:	ce 01       	movw	r24, r28
    1524:	8e 5a       	subi	r24, 0xAE	; 174
    1526:	9e 4f       	sbci	r25, 0xFE	; 254
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	fc 01       	movw	r30, r24
    1530:	23 83       	std	Z+3, r18	; 0x03
    1532:	ce 01       	movw	r24, r28
    1534:	8e 5a       	subi	r24, 0xAE	; 174
    1536:	9e 4f       	sbci	r25, 0xFE	; 254
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	fc 01       	movw	r30, r24
    1540:	23 81       	ldd	r18, Z+3	; 0x03
    1542:	ce 01       	movw	r24, r28
    1544:	8e 5a       	subi	r24, 0xAE	; 174
    1546:	9e 4f       	sbci	r25, 0xFE	; 254
    1548:	fc 01       	movw	r30, r24
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	fc 01       	movw	r30, r24
    1550:	22 83       	std	Z+2, r18	; 0x02
    1552:	ce 01       	movw	r24, r28
    1554:	8e 5a       	subi	r24, 0xAE	; 174
    1556:	9e 4f       	sbci	r25, 0xFE	; 254
    1558:	fc 01       	movw	r30, r24
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	fc 01       	movw	r30, r24
    1560:	22 81       	ldd	r18, Z+2	; 0x02
    1562:	ce 01       	movw	r24, r28
    1564:	8e 5a       	subi	r24, 0xAE	; 174
    1566:	9e 4f       	sbci	r25, 0xFE	; 254
    1568:	fc 01       	movw	r30, r24
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	fc 01       	movw	r30, r24
    1570:	21 83       	std	Z+1, r18	; 0x01
    1572:	ce 01       	movw	r24, r28
    1574:	8e 5a       	subi	r24, 0xAE	; 174
    1576:	9e 4f       	sbci	r25, 0xFE	; 254
    1578:	fc 01       	movw	r30, r24
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	fc 01       	movw	r30, r24
    1580:	21 81       	ldd	r18, Z+1	; 0x01
    1582:	ce 01       	movw	r24, r28
    1584:	8e 5a       	subi	r24, 0xAE	; 174
    1586:	9e 4f       	sbci	r25, 0xFE	; 254
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1592:	ce 01       	movw	r24, r28
    1594:	8e 5a       	subi	r24, 0xAE	; 174
    1596:	9e 4f       	sbci	r25, 0xFE	; 254
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	fc 01       	movw	r30, r24
    15a0:	85 81       	ldd	r24, Z+5	; 0x05
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
  delay(1);
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    15b4:	ce 01       	movw	r24, r28
    15b6:	8e 5a       	subi	r24, 0xAE	; 174
    15b8:	9e 4f       	sbci	r25, 0xFE	; 254
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	fc 01       	movw	r30, r24
    15c2:	85 81       	ldd	r24, Z+5	; 0x05
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
  digitalWrite(_pin, LOW);
    15ca:	ce 01       	movw	r24, r28
    15cc:	8e 5a       	subi	r24, 0xAE	; 174
    15ce:	9e 4f       	sbci	r25, 0xFE	; 254
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	fc 01       	movw	r30, r24
    15d8:	85 81       	ldd	r24, Z+5	; 0x05
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
  switch (_type) {
    15e0:	ce 01       	movw	r24, r28
    15e2:	8e 5a       	subi	r24, 0xAE	; 174
    15e4:	9e 4f       	sbci	r25, 0xFE	; 254
    15e6:	fc 01       	movw	r30, r24
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	fc 01       	movw	r30, r24
    15ee:	86 81       	ldd	r24, Z+6	; 0x06
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	45 97       	sbiw	r24, 0x15	; 21
    15f6:	02 97       	sbiw	r24, 0x02	; 2
    15f8:	28 f4       	brcc	.+10     	; 0x1604 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    15fa:	8c e4       	ldi	r24, 0x4C	; 76
    15fc:	94 e0       	ldi	r25, 0x04	; 4
    15fe:	0e 94 8b 2b 	call	0x5716	; 0x5716 <delayMicroseconds>
    break;
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    1604:	64 e1       	ldi	r22, 0x14	; 20
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
    break;
    1610:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    1612:	ce 01       	movw	r24, r28
    1614:	8e 5a       	subi	r24, 0xAE	; 174
    1616:	9e 4f       	sbci	r25, 0xFE	; 254
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	fc 01       	movw	r30, r24
    1620:	85 81       	ldd	r24, Z+5	; 0x05
    1622:	62 e0       	ldi	r22, 0x02	; 2
    1624:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    1628:	ce 01       	movw	r24, r28
    162a:	8e 5a       	subi	r24, 0xAE	; 174
    162c:	9e 4f       	sbci	r25, 0xFE	; 254
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	fc 01       	movw	r30, r24
    1636:	82 89       	ldd	r24, Z+18	; 0x12
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 8b 2b 	call	0x5716	; 0x5716 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1640:	ce 01       	movw	r24, r28
    1642:	8f 5a       	subi	r24, 0xAF	; 175
    1644:	9e 4f       	sbci	r25, 0xFE	; 254
    1646:	2c dc       	rcall	.-1960   	; 0xea0 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1648:	ce 01       	movw	r24, r28
    164a:	8e 5a       	subi	r24, 0xAE	; 174
    164c:	9e 4f       	sbci	r25, 0xFE	; 254
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	b7 d1       	rcall	.+878    	; 0x19c6 <_ZN3DHT11expectPulseEb>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	8f 3f       	cpi	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	af 4f       	sbci	r26, 0xFF	; 255
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	09 f0       	breq	.+2      	; 0x166a <_ZN3DHT4readEb+0x22c>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	22 23       	and	r18, r18
    166c:	99 f0       	breq	.+38     	; 0x1694 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    166e:	ce 01       	movw	r24, r28
    1670:	8e 5a       	subi	r24, 0xAE	; 174
    1672:	9e 4f       	sbci	r25, 0xFE	; 254
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	fc 01       	movw	r30, r24
    167c:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    167e:	ce 01       	movw	r24, r28
    1680:	8e 5a       	subi	r24, 0xAE	; 174
    1682:	9e 4f       	sbci	r25, 0xFE	; 254
    1684:	fc 01       	movw	r30, r24
    1686:	80 81       	ld	r24, Z
    1688:	91 81       	ldd	r25, Z+1	; 0x01
    168a:	fc 01       	movw	r30, r24
    168c:	f1 88       	ldd	r15, Z+17	; 0x11
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	72 c0       	rjmp	.+228    	; 0x1778 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1694:	ce 01       	movw	r24, r28
    1696:	8e 5a       	subi	r24, 0xAE	; 174
    1698:	9e 4f       	sbci	r25, 0xFE	; 254
    169a:	fc 01       	movw	r30, r24
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	91 d1       	rcall	.+802    	; 0x19c6 <_ZN3DHT11expectPulseEb>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	8f 3f       	cpi	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	af 4f       	sbci	r26, 0xFF	; 255
    16b0:	bf 4f       	sbci	r27, 0xFF	; 255
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <_ZN3DHT4readEb+0x278>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	22 23       	and	r18, r18
    16b8:	99 f0       	breq	.+38     	; 0x16e0 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    16ba:	ce 01       	movw	r24, r28
    16bc:	8e 5a       	subi	r24, 0xAE	; 174
    16be:	9e 4f       	sbci	r25, 0xFE	; 254
    16c0:	fc 01       	movw	r30, r24
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	fc 01       	movw	r30, r24
    16c8:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    16ca:	ce 01       	movw	r24, r28
    16cc:	8e 5a       	subi	r24, 0xAE	; 174
    16ce:	9e 4f       	sbci	r25, 0xFE	; 254
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	fc 01       	movw	r30, r24
    16d8:	f1 88       	ldd	r15, Z+17	; 0x11
    16da:	00 e0       	ldi	r16, 0x00	; 0
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	4c c0       	rjmp	.+152    	; 0x1778 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    16e0:	1a 82       	std	Y+2, r1	; 0x02
    16e2:	19 82       	std	Y+1, r1	; 0x01
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	80 35       	cpi	r24, 0x50	; 80
    16ea:	91 05       	cpc	r25, r1
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <_ZN3DHT4readEb+0x2b2>
    16ee:	42 c0       	rjmp	.+132    	; 0x1774 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    16f0:	ce 01       	movw	r24, r28
    16f2:	8e 5a       	subi	r24, 0xAE	; 174
    16f4:	9e 4f       	sbci	r25, 0xFE	; 254
    16f6:	fc 01       	movw	r30, r24
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	63 d1       	rcall	.+710    	; 0x19c6 <_ZN3DHT11expectPulseEb>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	29 81       	ldd	r18, Y+1	; 0x01
    1706:	3a 81       	ldd	r19, Y+2	; 0x02
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	ae 01       	movw	r20, r28
    1712:	4f 5f       	subi	r20, 0xFF	; 255
    1714:	5f 4f       	sbci	r21, 0xFF	; 255
    1716:	24 0f       	add	r18, r20
    1718:	35 1f       	adc	r19, r21
    171a:	20 5f       	subi	r18, 0xF0	; 240
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	f9 01       	movw	r30, r18
    1720:	80 83       	st	Z, r24
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	a2 83       	std	Z+2, r26	; 0x02
    1726:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	8c 01       	movw	r16, r24
    172e:	0f 5f       	subi	r16, 0xFF	; 255
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	ce 01       	movw	r24, r28
    1734:	8e 5a       	subi	r24, 0xAE	; 174
    1736:	9e 4f       	sbci	r25, 0xFE	; 254
    1738:	fc 01       	movw	r30, r24
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	42 d1       	rcall	.+644    	; 0x19c6 <_ZN3DHT11expectPulseEb>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	98 01       	movw	r18, r16
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	22 0f       	add	r18, r18
    174e:	33 1f       	adc	r19, r19
    1750:	ae 01       	movw	r20, r28
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	24 0f       	add	r18, r20
    1758:	35 1f       	adc	r19, r21
    175a:	20 5f       	subi	r18, 0xF0	; 240
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	f9 01       	movw	r30, r18
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	02 96       	adiw	r24, 0x02	; 2
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	b8 cf       	rjmp	.-144    	; 0x16e4 <_ZN3DHT4readEb+0x2a6>
    1774:	01 e0       	ldi	r16, 0x01	; 1
    1776:	10 e0       	ldi	r17, 0x00	; 0
    1778:	ce 01       	movw	r24, r28
    177a:	8f 5a       	subi	r24, 0xAF	; 175
    177c:	9e 4f       	sbci	r25, 0xFE	; 254
    177e:	9f db       	rcall	.-2242   	; 0xebe <_ZN13InterruptLockD1Ev>
    1780:	01 30       	cpi	r16, 0x01	; 1
    1782:	11 05       	cpc	r17, r1
    1784:	09 f0       	breq	.+2      	; 0x1788 <_ZN3DHT4readEb+0x34a>
    1786:	0d c1       	rjmp	.+538    	; 0x19a2 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1788:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    178a:	1c 82       	std	Y+4, r1	; 0x04
    178c:	1b 82       	std	Y+3, r1	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	88 97       	sbiw	r24, 0x28	; 40
    1794:	0c f0       	brlt	.+2      	; 0x1798 <_ZN3DHT4readEb+0x35a>
    1796:	a7 c0       	rjmp	.+334    	; 0x18e6 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	9e 01       	movw	r18, r28
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	82 0f       	add	r24, r18
    17b0:	93 1f       	adc	r25, r19
    17b2:	40 96       	adiw	r24, 0x10	; 16
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	a2 81       	ldd	r26, Z+2	; 0x02
    17bc:	b3 81       	ldd	r27, Z+3	; 0x03
    17be:	89 87       	std	Y+9, r24	; 0x09
    17c0:	9a 87       	std	Y+10, r25	; 0x0a
    17c2:	ab 87       	std	Y+11, r26	; 0x0b
    17c4:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	9e 01       	movw	r18, r28
    17da:	2f 5f       	subi	r18, 0xFF	; 255
    17dc:	3f 4f       	sbci	r19, 0xFF	; 255
    17de:	82 0f       	add	r24, r18
    17e0:	93 1f       	adc	r25, r19
    17e2:	40 96       	adiw	r24, 0x10	; 16
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	a2 81       	ldd	r26, Z+2	; 0x02
    17ec:	b3 81       	ldd	r27, Z+3	; 0x03
    17ee:	8d 87       	std	Y+13, r24	; 0x0d
    17f0:	9e 87       	std	Y+14, r25	; 0x0e
    17f2:	af 87       	std	Y+15, r26	; 0x0f
    17f4:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    17fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    17fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	af 4f       	sbci	r26, 0xFF	; 255
    1804:	bf 4f       	sbci	r27, 0xFF	; 255
    1806:	49 f0       	breq	.+18     	; 0x181a <_ZN3DHT4readEb+0x3dc>
    1808:	8d 85       	ldd	r24, Y+13	; 0x0d
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	af 85       	ldd	r26, Y+15	; 0x0f
    180e:	b8 89       	ldd	r27, Y+16	; 0x10
    1810:	8f 3f       	cpi	r24, 0xFF	; 255
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	af 4f       	sbci	r26, 0xFF	; 255
    1816:	bf 4f       	sbci	r27, 0xFF	; 255
    1818:	89 f4       	brne	.+34     	; 0x183c <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    181a:	ce 01       	movw	r24, r28
    181c:	8e 5a       	subi	r24, 0xAE	; 174
    181e:	9e 4f       	sbci	r25, 0xFE	; 254
    1820:	fc 01       	movw	r30, r24
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	fc 01       	movw	r30, r24
    1828:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    182a:	ce 01       	movw	r24, r28
    182c:	8e 5a       	subi	r24, 0xAE	; 174
    182e:	9e 4f       	sbci	r25, 0xFE	; 254
    1830:	fc 01       	movw	r30, r24
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	fc 01       	movw	r30, r24
    1838:	f1 88       	ldd	r15, Z+17	; 0x11
    183a:	b3 c0       	rjmp	.+358    	; 0x19a2 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	99 23       	and	r25, r25
    1842:	0c f4       	brge	.+2      	; 0x1846 <_ZN3DHT4readEb+0x408>
    1844:	07 96       	adiw	r24, 0x07	; 7
    1846:	95 95       	asr	r25
    1848:	87 95       	ror	r24
    184a:	95 95       	asr	r25
    184c:	87 95       	ror	r24
    184e:	95 95       	asr	r25
    1850:	87 95       	ror	r24
    1852:	9e 01       	movw	r18, r28
    1854:	2e 5a       	subi	r18, 0xAE	; 174
    1856:	3e 4f       	sbci	r19, 0xFE	; 254
    1858:	f9 01       	movw	r30, r18
    185a:	20 81       	ld	r18, Z
    185c:	31 81       	ldd	r19, Z+1	; 0x01
    185e:	28 0f       	add	r18, r24
    1860:	39 1f       	adc	r19, r25
    1862:	f9 01       	movw	r30, r18
    1864:	20 81       	ld	r18, Z
    1866:	42 2f       	mov	r20, r18
    1868:	44 0f       	add	r20, r20
    186a:	9e 01       	movw	r18, r28
    186c:	2e 5a       	subi	r18, 0xAE	; 174
    186e:	3e 4f       	sbci	r19, 0xFE	; 254
    1870:	f9 01       	movw	r30, r18
    1872:	20 81       	ld	r18, Z
    1874:	31 81       	ldd	r19, Z+1	; 0x01
    1876:	82 0f       	add	r24, r18
    1878:	93 1f       	adc	r25, r19
    187a:	fc 01       	movw	r30, r24
    187c:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    187e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1880:	3e 85       	ldd	r19, Y+14	; 0x0e
    1882:	4f 85       	ldd	r20, Y+15	; 0x0f
    1884:	58 89       	ldd	r21, Y+16	; 0x10
    1886:	89 85       	ldd	r24, Y+9	; 0x09
    1888:	9a 85       	ldd	r25, Y+10	; 0x0a
    188a:	ab 85       	ldd	r26, Y+11	; 0x0b
    188c:	bc 85       	ldd	r27, Y+12	; 0x0c
    188e:	82 17       	cp	r24, r18
    1890:	93 07       	cpc	r25, r19
    1892:	a4 07       	cpc	r26, r20
    1894:	b5 07       	cpc	r27, r21
    1896:	08 f5       	brcc	.+66     	; 0x18da <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	99 23       	and	r25, r25
    189e:	0c f4       	brge	.+2      	; 0x18a2 <_ZN3DHT4readEb+0x464>
    18a0:	07 96       	adiw	r24, 0x07	; 7
    18a2:	95 95       	asr	r25
    18a4:	87 95       	ror	r24
    18a6:	95 95       	asr	r25
    18a8:	87 95       	ror	r24
    18aa:	95 95       	asr	r25
    18ac:	87 95       	ror	r24
    18ae:	9e 01       	movw	r18, r28
    18b0:	2e 5a       	subi	r18, 0xAE	; 174
    18b2:	3e 4f       	sbci	r19, 0xFE	; 254
    18b4:	f9 01       	movw	r30, r18
    18b6:	20 81       	ld	r18, Z
    18b8:	31 81       	ldd	r19, Z+1	; 0x01
    18ba:	28 0f       	add	r18, r24
    18bc:	39 1f       	adc	r19, r25
    18be:	f9 01       	movw	r30, r18
    18c0:	20 81       	ld	r18, Z
    18c2:	42 2f       	mov	r20, r18
    18c4:	41 60       	ori	r20, 0x01	; 1
    18c6:	9e 01       	movw	r18, r28
    18c8:	2e 5a       	subi	r18, 0xAE	; 174
    18ca:	3e 4f       	sbci	r19, 0xFE	; 254
    18cc:	f9 01       	movw	r30, r18
    18ce:	20 81       	ld	r18, Z
    18d0:	31 81       	ldd	r19, Z+1	; 0x01
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	fc 01       	movw	r30, r24
    18d8:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
    18e4:	54 cf       	rjmp	.-344    	; 0x178e <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    18e6:	ce 01       	movw	r24, r28
    18e8:	8e 5a       	subi	r24, 0xAE	; 174
    18ea:	9e 4f       	sbci	r25, 0xFE	; 254
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	fc 01       	movw	r30, r24
    18f4:	84 81       	ldd	r24, Z+4	; 0x04
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	ce 01       	movw	r24, r28
    18fc:	8e 5a       	subi	r24, 0xAE	; 174
    18fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ce 01       	movw	r24, r28
    1910:	8e 5a       	subi	r24, 0xAE	; 174
    1912:	9e 4f       	sbci	r25, 0xFE	; 254
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	fc 01       	movw	r30, r24
    191c:	81 81       	ldd	r24, Z+1	; 0x01
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	48 0f       	add	r20, r24
    1924:	59 1f       	adc	r21, r25
    1926:	ce 01       	movw	r24, r28
    1928:	8e 5a       	subi	r24, 0xAE	; 174
    192a:	9e 4f       	sbci	r25, 0xFE	; 254
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	fc 01       	movw	r30, r24
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	48 0f       	add	r20, r24
    193c:	59 1f       	adc	r21, r25
    193e:	ce 01       	movw	r24, r28
    1940:	8e 5a       	subi	r24, 0xAE	; 174
    1942:	9e 4f       	sbci	r25, 0xFE	; 254
    1944:	fc 01       	movw	r30, r24
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	fc 01       	movw	r30, r24
    194c:	83 81       	ldd	r24, Z+3	; 0x03
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	84 0f       	add	r24, r20
    1954:	95 1f       	adc	r25, r21
    1956:	99 27       	eor	r25, r25
    1958:	28 17       	cp	r18, r24
    195a:	39 07       	cpc	r19, r25
    195c:	91 f4       	brne	.+36     	; 0x1982 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    195e:	ce 01       	movw	r24, r28
    1960:	8e 5a       	subi	r24, 0xAE	; 174
    1962:	9e 4f       	sbci	r25, 0xFE	; 254
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	21 e0       	ldi	r18, 0x01	; 1
    196c:	fc 01       	movw	r30, r24
    196e:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1970:	ce 01       	movw	r24, r28
    1972:	8e 5a       	subi	r24, 0xAE	; 174
    1974:	9e 4f       	sbci	r25, 0xFE	; 254
    1976:	fc 01       	movw	r30, r24
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	fc 01       	movw	r30, r24
    197e:	f1 88       	ldd	r15, Z+17	; 0x11
    1980:	10 c0       	rjmp	.+32     	; 0x19a2 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1982:	ce 01       	movw	r24, r28
    1984:	8e 5a       	subi	r24, 0xAE	; 174
    1986:	9e 4f       	sbci	r25, 0xFE	; 254
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	fc 01       	movw	r30, r24
    1990:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1992:	ce 01       	movw	r24, r28
    1994:	8e 5a       	subi	r24, 0xAE	; 174
    1996:	9e 4f       	sbci	r25, 0xFE	; 254
    1998:	fc 01       	movw	r30, r24
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	fc 01       	movw	r30, r24
    19a0:	f1 88       	ldd	r15, Z+17	; 0x11
    19a2:	8f 2d       	mov	r24, r15
  }
}
    19a4:	cc 5a       	subi	r28, 0xAC	; 172
    19a6:	de 4f       	sbci	r29, 0xFE	; 254
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	df 90       	pop	r13
    19be:	cf 90       	pop	r12
    19c0:	bf 90       	pop	r11
    19c2:	af 90       	pop	r10
    19c4:	08 95       	ret

000019c6 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	2a 97       	sbiw	r28, 0x0a	; 10
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	99 87       	std	Y+9, r25	; 0x09
    19dc:	88 87       	std	Y+8, r24	; 0x08
    19de:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    19e0:	1a 82       	std	Y+2, r1	; 0x02
    19e2:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    19e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e6:	88 23       	and	r24, r24
    19e8:	29 f0       	breq	.+10     	; 0x19f4 <_ZN3DHT11expectPulseEb+0x2e>
    19ea:	88 85       	ldd	r24, Y+8	; 0x08
    19ec:	99 85       	ldd	r25, Y+9	; 0x09
    19ee:	fc 01       	movw	r30, r24
    19f0:	87 81       	ldd	r24, Z+7	; 0x07
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <_ZN3DHT11expectPulseEb+0x30>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    19f8:	88 85       	ldd	r24, Y+8	; 0x08
    19fa:	99 85       	ldd	r25, Y+9	; 0x09
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 85       	ldd	r24, Z+8	; 0x08
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	86 52       	subi	r24, 0x26	; 38
    1a0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a0c:	9d 83       	std	Y+5, r25	; 0x05
    1a0e:	8c 83       	std	Y+4, r24	; 0x04
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	fc 01       	movw	r30, r24
    1a16:	25 91       	lpm	r18, Z+
    1a18:	34 91       	lpm	r19, Z
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	3f 83       	std	Y+7, r19	; 0x07
    1a1e:	2e 83       	std	Y+6, r18	; 0x06
    1a20:	9d 83       	std	Y+5, r25	; 0x05
    1a22:	8c 83       	std	Y+4, r24	; 0x04
    1a24:	8e 81       	ldd	r24, Y+6	; 0x06
    1a26:	9f 81       	ldd	r25, Y+7	; 0x07
    1a28:	fc 01       	movw	r30, r24
    1a2a:	20 81       	ld	r18, Z
    1a2c:	88 85       	ldd	r24, Y+8	; 0x08
    1a2e:	99 85       	ldd	r25, Y+9	; 0x09
    1a30:	fc 01       	movw	r30, r24
    1a32:	87 81       	ldd	r24, Z+7	; 0x07
    1a34:	28 23       	and	r18, r24
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3a:	29 17       	cp	r18, r25
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <_ZN3DHT11expectPulseEb+0x7a>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	88 23       	and	r24, r24
    1a42:	f9 f0       	breq	.+62     	; 0x1a82 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	9c 01       	movw	r18, r24
    1a4a:	2f 5f       	subi	r18, 0xFF	; 255
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	3a 83       	std	Y+2, r19	; 0x02
    1a50:	29 83       	std	Y+1, r18	; 0x01
    1a52:	9c 01       	movw	r18, r24
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	88 85       	ldd	r24, Y+8	; 0x08
    1a5a:	99 85       	ldd	r25, Y+9	; 0x09
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	85 85       	ldd	r24, Z+13	; 0x0d
    1a60:	96 85       	ldd	r25, Z+14	; 0x0e
    1a62:	a7 85       	ldd	r26, Z+15	; 0x0f
    1a64:	b0 89       	ldd	r27, Z+16	; 0x10
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	28 17       	cp	r18, r24
    1a6a:	39 07       	cpc	r19, r25
    1a6c:	4a 07       	cpc	r20, r26
    1a6e:	5b 07       	cpc	r21, r27
    1a70:	08 f4       	brcc	.+2      	; 0x1a74 <_ZN3DHT11expectPulseEb+0xae>
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	66 23       	and	r22, r22
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <_ZN3DHT11expectPulseEb+0xb4>
    1a78:	bf cf       	rjmp	.-130    	; 0x19f8 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	dc 01       	movw	r26, r24
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	cc 01       	movw	r24, r24
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
}
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	2a 96       	adiw	r28, 0x0a	; 10
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	1f 92       	push	r1
    1aa8:	1f 92       	push	r1
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	2b e8       	ldi	r18, 0x8B	; 139
    1ab4:	32 e0       	ldi	r19, 0x02	; 2
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	fc 01       	movw	r30, r24
    1abc:	31 83       	std	Z+1, r19	; 0x01
    1abe:	20 83       	st	Z, r18
    1ac0:	00 00       	nop
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	2d 97       	sbiw	r28, 0x0d	; 13
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	6b 83       	std	Y+3, r22	; 0x03
    1af6:	4c 83       	std	Y+4, r20	; 0x04
    1af8:	2d 83       	std	Y+5, r18	; 0x05
    1afa:	ee 82       	std	Y+6, r14	; 0x06
    1afc:	ff 82       	std	Y+7, r15	; 0x07
    1afe:	08 87       	std	Y+8, r16	; 0x08
    1b00:	19 87       	std	Y+9, r17	; 0x09
    1b02:	aa 86       	std	Y+10, r10	; 0x0a
    1b04:	bb 86       	std	Y+11, r11	; 0x0b
    1b06:	cc 86       	std	Y+12, r12	; 0x0c
    1b08:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b10:	4c 81       	ldd	r20, Y+4	; 0x04
    1b12:	6b 81       	ldd	r22, Y+3	; 0x03
    1b14:	e3 d9       	rcall	.-3130   	; 0xedc <_ZN3DHTC1Ehhh>
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	23 8b       	std	Z+19, r18	; 0x13
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	fc 01       	movw	r30, r24
    1b26:	74 96       	adiw	r30, 0x14	; 20
    1b28:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2c:	a8 85       	ldd	r26, Y+8	; 0x08
    1b2e:	b9 85       	ldd	r27, Y+9	; 0x09
    1b30:	69 81       	ldd	r22, Y+1	; 0x01
    1b32:	7a 81       	ldd	r23, Y+2	; 0x02
    1b34:	9c 01       	movw	r18, r24
    1b36:	ad 01       	movw	r20, r26
    1b38:	cf 01       	movw	r24, r30
    1b3a:	f6 d0       	rcall	.+492    	; 0x1d28 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	fc 01       	movw	r30, r24
    1b42:	7d 96       	adiw	r30, 0x1d	; 29
    1b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b48:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b4a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b4c:	69 81       	ldd	r22, Y+1	; 0x01
    1b4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b50:	9c 01       	movw	r18, r24
    1b52:	ad 01       	movw	r20, r26
    1b54:	cf 01       	movw	r24, r30
    1b56:	7e d2       	rcall	.+1276   	; 0x2054 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1b58:	00 00       	nop
    1b5a:	2d 96       	adiw	r28, 0x0d	; 13
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	df 90       	pop	r13
    1b74:	cf 90       	pop	r12
    1b76:	bf 90       	pop	r11
    1b78:	af 90       	pop	r10
    1b7a:	08 95       	ret

00001b7c <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	1f 92       	push	r1
    1b82:	1f 92       	push	r1
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	67 e3       	ldi	r22, 0x37	; 55
    1b92:	f4 d9       	rcall	.-3096   	; 0xf7c <_ZN3DHT5beginEh>
    1b94:	00 00       	nop
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1ba6:	1f 92       	push	r1
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	7c 83       	std	Y+4, r23	; 0x04
    1bb2:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	fc 01       	movw	r30, r24
    1bba:	83 89       	ldd	r24, Z+19	; 0x13
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	8c 30       	cpi	r24, 0x0C	; 12
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	b1 f0       	breq	.+44     	; 0x1bf2 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1bc6:	8d 30       	cpi	r24, 0x0D	; 13
    1bc8:	91 05       	cpc	r25, r1
    1bca:	1c f4       	brge	.+6      	; 0x1bd2 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1bcc:	0b 97       	sbiw	r24, 0x0b	; 11
    1bce:	39 f0       	breq	.+14     	; 0x1bde <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1bd0:	2e c0       	rjmp	.+92     	; 0x1c2e <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1bd2:	85 31       	cpi	r24, 0x15	; 21
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	b9 f0       	breq	.+46     	; 0x1c06 <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1bd8:	46 97       	sbiw	r24, 0x16	; 22
    1bda:	f9 f0       	breq	.+62     	; 0x1c1a <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1bdc:	28 c0       	rjmp	.+80     	; 0x1c2e <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1bde:	2b e0       	ldi	r18, 0x0B	; 11
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	a9 01       	movw	r20, r18
    1be8:	6a e6       	ldi	r22, 0x6A	; 106
    1bea:	72 e0       	ldi	r23, 0x02	; 2
    1bec:	0e 94 46 31 	call	0x628c	; 0x628c <strncpy>
    break;
    1bf0:	28 c0       	rjmp	.+80     	; 0x1c42 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1bf2:	2b e0       	ldi	r18, 0x0B	; 11
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	60 e7       	ldi	r22, 0x70	; 112
    1bfe:	72 e0       	ldi	r23, 0x02	; 2
    1c00:	0e 94 46 31 	call	0x628c	; 0x628c <strncpy>
    break;
    1c04:	1e c0       	rjmp	.+60     	; 0x1c42 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1c06:	2b e0       	ldi	r18, 0x0B	; 11
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	a9 01       	movw	r20, r18
    1c10:	66 e7       	ldi	r22, 0x76	; 118
    1c12:	72 e0       	ldi	r23, 0x02	; 2
    1c14:	0e 94 46 31 	call	0x628c	; 0x628c <strncpy>
    break;
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1c1a:	2b e0       	ldi	r18, 0x0B	; 11
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	a9 01       	movw	r20, r18
    1c24:	6c e7       	ldi	r22, 0x7C	; 124
    1c26:	72 e0       	ldi	r23, 0x02	; 2
    1c28:	0e 94 46 31 	call	0x628c	; 0x628c <strncpy>
    break;
    1c2c:	0a c0       	rjmp	.+20     	; 0x1c42 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1c2e:	2b e0       	ldi	r18, 0x0B	; 11
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	a9 01       	movw	r20, r18
    1c38:	62 e8       	ldi	r22, 0x82	; 130
    1c3a:	72 e0       	ldi	r23, 0x02	; 2
    1c3c:	0e 94 46 31 	call	0x628c	; 0x628c <strncpy>
    break;
    1c40:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1c42:	8b e0       	ldi	r24, 0x0B	; 11
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	fc 01       	movw	r30, r24
    1c50:	10 82       	st	Z, r1
}
    1c52:	00 00       	nop
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1c68:	1f 92       	push	r1
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	7c 83       	std	Y+4, r23	; 0x04
    1c74:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	83 89       	ldd	r24, Z+19	; 0x13
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	8c 30       	cpi	r24, 0x0C	; 12
    1c84:	91 05       	cpc	r25, r1
    1c86:	c1 f0       	breq	.+48     	; 0x1cb8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1c88:	8d 30       	cpi	r24, 0x0D	; 13
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	1c f4       	brge	.+6      	; 0x1c94 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1c8e:	0b 97       	sbiw	r24, 0x0b	; 11
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1c92:	36 c0       	rjmp	.+108    	; 0x1d00 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1c94:	85 31       	cpi	r24, 0x15	; 21
    1c96:	91 05       	cpc	r25, r1
    1c98:	d9 f0       	breq	.+54     	; 0x1cd0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1c9a:	46 97       	sbiw	r24, 0x16	; 22
    1c9c:	29 f1       	breq	.+74     	; 0x1ce8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1c9e:	30 c0       	rjmp	.+96     	; 0x1d00 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca4:	80 e4       	ldi	r24, 0x40	; 64
    1ca6:	92 e4       	ldi	r25, 0x42	; 66
    1ca8:	af e0       	ldi	r26, 0x0F	; 15
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	f9 01       	movw	r30, r18
    1cae:	84 a3       	std	Z+36, r24	; 0x24
    1cb0:	95 a3       	std	Z+37, r25	; 0x25
    1cb2:	a6 a3       	std	Z+38, r26	; 0x26
    1cb4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1cb6:	30 c0       	rjmp	.+96     	; 0x1d18 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cba:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbc:	80 e8       	ldi	r24, 0x80	; 128
    1cbe:	94 e8       	ldi	r25, 0x84	; 132
    1cc0:	ae e1       	ldi	r26, 0x1E	; 30
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	84 a3       	std	Z+36, r24	; 0x24
    1cc8:	95 a3       	std	Z+37, r25	; 0x25
    1cca:	a6 a3       	std	Z+38, r26	; 0x26
    1ccc:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1cce:	24 c0       	rjmp	.+72     	; 0x1d18 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	80 e8       	ldi	r24, 0x80	; 128
    1cd6:	94 e8       	ldi	r25, 0x84	; 132
    1cd8:	ae e1       	ldi	r26, 0x1E	; 30
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	f9 01       	movw	r30, r18
    1cde:	84 a3       	std	Z+36, r24	; 0x24
    1ce0:	95 a3       	std	Z+37, r25	; 0x25
    1ce2:	a6 a3       	std	Z+38, r26	; 0x26
    1ce4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1ce6:	18 c0       	rjmp	.+48     	; 0x1d18 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cea:	3c 81       	ldd	r19, Y+4	; 0x04
    1cec:	80 e8       	ldi	r24, 0x80	; 128
    1cee:	94 e8       	ldi	r25, 0x84	; 132
    1cf0:	ae e1       	ldi	r26, 0x1E	; 30
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	84 a3       	std	Z+36, r24	; 0x24
    1cf8:	95 a3       	std	Z+37, r25	; 0x25
    1cfa:	a6 a3       	std	Z+38, r26	; 0x26
    1cfc:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1cfe:	0c c0       	rjmp	.+24     	; 0x1d18 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	80 e8       	ldi	r24, 0x80	; 128
    1d06:	94 e8       	ldi	r25, 0x84	; 132
    1d08:	ae e1       	ldi	r26, 0x1E	; 30
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	84 a3       	std	Z+36, r24	; 0x24
    1d10:	95 a3       	std	Z+37, r25	; 0x25
    1d12:	a6 a3       	std	Z+38, r26	; 0x26
    1d14:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d16:	00 00       	nop
  }
}
    1d18:	00 00       	nop
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	08 95       	ret

00001d28 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	28 97       	sbiw	r28, 0x08	; 8
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	7c 83       	std	Y+4, r23	; 0x04
    1d42:	6b 83       	std	Y+3, r22	; 0x03
    1d44:	2d 83       	std	Y+5, r18	; 0x05
    1d46:	3e 83       	std	Y+6, r19	; 0x06
    1d48:	4f 83       	std	Y+7, r20	; 0x07
    1d4a:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	a8 de       	rcall	.-688    	; 0x1aa2 <_ZN15Adafruit_SensorC1Ev>
    1d52:	27 ea       	ldi	r18, 0xA7	; 167
    1d54:	32 e0       	ldi	r19, 0x02	; 2
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	31 83       	std	Z+1, r19	; 0x01
    1d5e:	20 83       	st	Z, r18
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	2b 81       	ldd	r18, Y+3	; 0x03
    1d66:	3c 81       	ldd	r19, Y+4	; 0x04
    1d68:	fc 01       	movw	r30, r24
    1d6a:	34 83       	std	Z+4, r19	; 0x04
    1d6c:	23 83       	std	Z+3, r18	; 0x03
    1d6e:	29 81       	ldd	r18, Y+1	; 0x01
    1d70:	3a 81       	ldd	r19, Y+2	; 0x02
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	af 81       	ldd	r26, Y+7	; 0x07
    1d78:	b8 85       	ldd	r27, Y+8	; 0x08
    1d7a:	f9 01       	movw	r30, r18
    1d7c:	85 83       	std	Z+5, r24	; 0x05
    1d7e:	96 83       	std	Z+6, r25	; 0x06
    1d80:	a7 83       	std	Z+7, r26	; 0x07
    1d82:	b0 87       	std	Z+8, r27	; 0x08
    1d84:	00 00       	nop
    1d86:	28 96       	adiw	r28, 0x08	; 8
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	08 95       	ret

00001d98 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1d9e:	1f 92       	push	r1
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	7c 83       	std	Y+4, r23	; 0x04
    1daa:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	44 e2       	ldi	r20, 0x24	; 36
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	0e 94 26 31 	call	0x624c	; 0x624c <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1dbc:	84 e2       	ldi	r24, 0x24	; 36
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	f9 01       	movw	r30, r18
    1dca:	80 83       	st	Z, r24
    1dcc:	91 83       	std	Z+1, r25	; 0x01
    1dce:	a2 83       	std	Z+2, r26	; 0x02
    1dd0:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	85 81       	ldd	r24, Z+5	; 0x05
    1dda:	96 81       	ldd	r25, Z+6	; 0x06
    1ddc:	a7 81       	ldd	r26, Z+7	; 0x07
    1dde:	b0 85       	ldd	r27, Z+8	; 0x08
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	f9 01       	movw	r30, r18
    1de6:	84 83       	std	Z+4, r24	; 0x04
    1de8:	95 83       	std	Z+5, r25	; 0x05
    1dea:	a6 83       	std	Z+6, r26	; 0x06
    1dec:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	8d e0       	ldi	r24, 0x0D	; 13
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e0       	ldi	r26, 0x00	; 0
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	80 87       	std	Z+8, r24	; 0x08
    1dfe:	91 87       	std	Z+9, r25	; 0x09
    1e00:	a2 87       	std	Z+10, r26	; 0x0a
    1e02:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1e04:	0e 94 21 2b 	call	0x5642	; 0x5642 <millis>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e10:	f9 01       	movw	r30, r18
    1e12:	80 8b       	std	Z+16, r24	; 0x10
    1e14:	91 8b       	std	Z+17, r25	; 0x11
    1e16:	a2 8b       	std	Z+18, r26	; 0x12
    1e18:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	fc 01       	movw	r30, r24
    1e20:	83 81       	ldd	r24, Z+3	; 0x03
    1e22:	94 81       	ldd	r25, Z+4	; 0x04
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	d3 d8       	rcall	.-3674   	; 0xfd0 <_ZN3DHT15readTemperatureEbb>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e30:	3c 81       	ldd	r19, Y+4	; 0x04
    1e32:	f9 01       	movw	r30, r18
    1e34:	84 8b       	std	Z+20, r24	; 0x14
    1e36:	95 8b       	std	Z+21, r25	; 0x15
    1e38:	a6 8b       	std	Z+22, r26	; 0x16
    1e3a:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1e52:	1f 92       	push	r1
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	7c 83       	std	Y+4, r23	; 0x04
    1e5e:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	48 e2       	ldi	r20, 0x28	; 40
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	0e 94 26 31 	call	0x624c	; 0x624c <memset>
  // Set sensor name.
  _parent->setName(sensor);
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	fc 01       	movw	r30, r24
    1e76:	83 81       	ldd	r24, Z+3	; 0x03
    1e78:	94 81       	ldd	r25, Z+4	; 0x04
    1e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7e:	b9 01       	movw	r22, r18
    1e80:	8f de       	rcall	.-738    	; 0x1ba0 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	f9 01       	movw	r30, r18
    1e90:	84 87       	std	Z+12, r24	; 0x0c
    1e92:	95 87       	std	Z+13, r25	; 0x0d
    1e94:	a6 87       	std	Z+14, r26	; 0x0e
    1e96:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	85 81       	ldd	r24, Z+5	; 0x05
    1ea0:	96 81       	ldd	r25, Z+6	; 0x06
    1ea2:	a7 81       	ldd	r26, Z+7	; 0x07
    1ea4:	b0 85       	ldd	r27, Z+8	; 0x08
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	f9 01       	movw	r30, r18
    1eac:	80 8b       	std	Z+16, r24	; 0x10
    1eae:	91 8b       	std	Z+17, r25	; 0x11
    1eb0:	a2 8b       	std	Z+18, r26	; 0x12
    1eb2:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e0       	ldi	r26, 0x00	; 0
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	84 8b       	std	Z+20, r24	; 0x14
    1ec4:	95 8b       	std	Z+21, r25	; 0x15
    1ec6:	a6 8b       	std	Z+22, r26	; 0x16
    1ec8:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	fc 01       	movw	r30, r24
    1ed0:	83 81       	ldd	r24, Z+3	; 0x03
    1ed2:	94 81       	ldd	r25, Z+4	; 0x04
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	b9 01       	movw	r22, r18
    1eda:	c3 de       	rcall	.-634    	; 0x1c62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	83 81       	ldd	r24, Z+3	; 0x03
    1ee4:	94 81       	ldd	r25, Z+4	; 0x04
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	83 89       	ldd	r24, Z+19	; 0x13
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	8c 30       	cpi	r24, 0x0C	; 12
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	61 f1       	breq	.+88     	; 0x1f4c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    1ef4:	8d 30       	cpi	r24, 0x0D	; 13
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	1c f4       	brge	.+6      	; 0x1f00 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    1efa:	0b 97       	sbiw	r24, 0x0b	; 11
    1efc:	49 f0       	breq	.+18     	; 0x1f10 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    1efe:	8c c0       	rjmp	.+280    	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1f00:	85 31       	cpi	r24, 0x15	; 21
    1f02:	91 05       	cpc	r25, r1
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    1f06:	44 c0       	rjmp	.+136    	; 0x1f90 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x144>
    1f08:	46 97       	sbiw	r24, 0x16	; 22
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    1f0c:	63 c0       	rjmp	.+198    	; 0x1fd4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x188>
    1f0e:	84 c0       	rjmp	.+264    	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
  case DHT11:
    sensor->max_value = 50.0F;
    1f10:	2b 81       	ldd	r18, Y+3	; 0x03
    1f12:	3c 81       	ldd	r19, Y+4	; 0x04
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a8 e4       	ldi	r26, 0x48	; 72
    1f1a:	b2 e4       	ldi	r27, 0x42	; 66
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	80 8f       	std	Z+24, r24	; 0x18
    1f20:	91 8f       	std	Z+25, r25	; 0x19
    1f22:	a2 8f       	std	Z+26, r26	; 0x1a
    1f24:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	14 8e       	std	Z+28, r1	; 0x1c
    1f2e:	15 8e       	std	Z+29, r1	; 0x1d
    1f30:	16 8e       	std	Z+30, r1	; 0x1e
    1f32:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e0       	ldi	r26, 0x00	; 0
    1f3e:	b0 e4       	ldi	r27, 0x40	; 64
    1f40:	f9 01       	movw	r30, r18
    1f42:	80 a3       	std	Z+32, r24	; 0x20
    1f44:	91 a3       	std	Z+33, r25	; 0x21
    1f46:	a2 a3       	std	Z+34, r26	; 0x22
    1f48:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1f4a:	7c c0       	rjmp	.+248    	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
  case DHT12:
    sensor->max_value = 60.0F;
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e7       	ldi	r26, 0x70	; 112
    1f56:	b2 e4       	ldi	r27, 0x42	; 66
    1f58:	f9 01       	movw	r30, r18
    1f5a:	80 8f       	std	Z+24, r24	; 0x18
    1f5c:	91 8f       	std	Z+25, r25	; 0x19
    1f5e:	a2 8f       	std	Z+26, r26	; 0x1a
    1f60:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    1f62:	2b 81       	ldd	r18, Y+3	; 0x03
    1f64:	3c 81       	ldd	r19, Y+4	; 0x04
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 ea       	ldi	r26, 0xA0	; 160
    1f6c:	b1 ec       	ldi	r27, 0xC1	; 193
    1f6e:	f9 01       	movw	r30, r18
    1f70:	84 8f       	std	Z+28, r24	; 0x1c
    1f72:	95 8f       	std	Z+29, r25	; 0x1d
    1f74:	a6 8f       	std	Z+30, r26	; 0x1e
    1f76:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    1f78:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	bf e3       	ldi	r27, 0x3F	; 63
    1f84:	f9 01       	movw	r30, r18
    1f86:	80 a3       	std	Z+32, r24	; 0x20
    1f88:	91 a3       	std	Z+33, r25	; 0x21
    1f8a:	a2 a3       	std	Z+34, r26	; 0x22
    1f8c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1f8e:	5a c0       	rjmp	.+180    	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
  case DHT21:
    sensor->max_value = 80.0F;
    1f90:	2b 81       	ldd	r18, Y+3	; 0x03
    1f92:	3c 81       	ldd	r19, Y+4	; 0x04
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 ea       	ldi	r26, 0xA0	; 160
    1f9a:	b2 e4       	ldi	r27, 0x42	; 66
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	80 8f       	std	Z+24, r24	; 0x18
    1fa0:	91 8f       	std	Z+25, r25	; 0x19
    1fa2:	a2 8f       	std	Z+26, r26	; 0x1a
    1fa4:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e2       	ldi	r26, 0x20	; 32
    1fb0:	b2 ec       	ldi	r27, 0xC2	; 194
    1fb2:	f9 01       	movw	r30, r18
    1fb4:	84 8f       	std	Z+28, r24	; 0x1c
    1fb6:	95 8f       	std	Z+29, r25	; 0x1d
    1fb8:	a6 8f       	std	Z+30, r26	; 0x1e
    1fba:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    1fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc0:	8d ec       	ldi	r24, 0xCD	; 205
    1fc2:	9c ec       	ldi	r25, 0xCC	; 204
    1fc4:	ac ec       	ldi	r26, 0xCC	; 204
    1fc6:	bd e3       	ldi	r27, 0x3D	; 61
    1fc8:	f9 01       	movw	r30, r18
    1fca:	80 a3       	std	Z+32, r24	; 0x20
    1fcc:	91 a3       	std	Z+33, r25	; 0x21
    1fce:	a2 a3       	std	Z+34, r26	; 0x22
    1fd0:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1fd2:	38 c0       	rjmp	.+112    	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
  case DHT22:
    sensor->max_value = 125.0F;
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	aa ef       	ldi	r26, 0xFA	; 250
    1fde:	b2 e4       	ldi	r27, 0x42	; 66
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	80 8f       	std	Z+24, r24	; 0x18
    1fe4:	91 8f       	std	Z+25, r25	; 0x19
    1fe6:	a2 8f       	std	Z+26, r26	; 0x1a
    1fe8:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    1fea:	2b 81       	ldd	r18, Y+3	; 0x03
    1fec:	3c 81       	ldd	r19, Y+4	; 0x04
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e2       	ldi	r26, 0x20	; 32
    1ff4:	b2 ec       	ldi	r27, 0xC2	; 194
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	84 8f       	std	Z+28, r24	; 0x1c
    1ffa:	95 8f       	std	Z+29, r25	; 0x1d
    1ffc:	a6 8f       	std	Z+30, r26	; 0x1e
    1ffe:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    2000:	2b 81       	ldd	r18, Y+3	; 0x03
    2002:	3c 81       	ldd	r19, Y+4	; 0x04
    2004:	8d ec       	ldi	r24, 0xCD	; 205
    2006:	9c ec       	ldi	r25, 0xCC	; 204
    2008:	ac ec       	ldi	r26, 0xCC	; 204
    200a:	bd e3       	ldi	r27, 0x3D	; 61
    200c:	f9 01       	movw	r30, r18
    200e:	80 a3       	std	Z+32, r24	; 0x20
    2010:	91 a3       	std	Z+33, r25	; 0x21
    2012:	a2 a3       	std	Z+34, r26	; 0x22
    2014:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2016:	16 c0       	rjmp	.+44     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	fc 01       	movw	r30, r24
    201e:	10 8e       	std	Z+24, r1	; 0x18
    2020:	11 8e       	std	Z+25, r1	; 0x19
    2022:	12 8e       	std	Z+26, r1	; 0x1a
    2024:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	14 8e       	std	Z+28, r1	; 0x1c
    202e:	15 8e       	std	Z+29, r1	; 0x1d
    2030:	16 8e       	std	Z+30, r1	; 0x1e
    2032:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	fc 01       	movw	r30, r24
    203a:	10 a2       	std	Z+32, r1	; 0x20
    203c:	11 a2       	std	Z+33, r1	; 0x21
    203e:	12 a2       	std	Z+34, r1	; 0x22
    2040:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2042:	00 00       	nop
  }
}
    2044:	00 00       	nop
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	28 97       	sbiw	r28, 0x08	; 8
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	7c 83       	std	Y+4, r23	; 0x04
    206e:	6b 83       	std	Y+3, r22	; 0x03
    2070:	2d 83       	std	Y+5, r18	; 0x05
    2072:	3e 83       	std	Y+6, r19	; 0x06
    2074:	4f 83       	std	Y+7, r20	; 0x07
    2076:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	12 dd       	rcall	.-1500   	; 0x1aa2 <_ZN15Adafruit_SensorC1Ev>
    207e:	29 e9       	ldi	r18, 0x99	; 153
    2080:	32 e0       	ldi	r19, 0x02	; 2
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	fc 01       	movw	r30, r24
    2088:	31 83       	std	Z+1, r19	; 0x01
    208a:	20 83       	st	Z, r18
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	2b 81       	ldd	r18, Y+3	; 0x03
    2092:	3c 81       	ldd	r19, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	34 83       	std	Z+4, r19	; 0x04
    2098:	23 83       	std	Z+3, r18	; 0x03
    209a:	29 81       	ldd	r18, Y+1	; 0x01
    209c:	3a 81       	ldd	r19, Y+2	; 0x02
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	af 81       	ldd	r26, Y+7	; 0x07
    20a4:	b8 85       	ldd	r27, Y+8	; 0x08
    20a6:	f9 01       	movw	r30, r18
    20a8:	85 83       	std	Z+5, r24	; 0x05
    20aa:	96 83       	std	Z+6, r25	; 0x06
    20ac:	a7 83       	std	Z+7, r26	; 0x07
    20ae:	b0 87       	std	Z+8, r27	; 0x08
    20b0:	00 00       	nop
    20b2:	28 96       	adiw	r28, 0x08	; 8
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    20ca:	1f 92       	push	r1
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	7c 83       	std	Y+4, r23	; 0x04
    20d6:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	44 e2       	ldi	r20, 0x24	; 36
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	0e 94 26 31 	call	0x624c	; 0x624c <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    20e8:	84 e2       	ldi	r24, 0x24	; 36
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e0       	ldi	r26, 0x00	; 0
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	f9 01       	movw	r30, r18
    20f6:	80 83       	st	Z, r24
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	a2 83       	std	Z+2, r26	; 0x02
    20fc:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	fc 01       	movw	r30, r24
    2104:	85 81       	ldd	r24, Z+5	; 0x05
    2106:	96 81       	ldd	r25, Z+6	; 0x06
    2108:	a7 81       	ldd	r26, Z+7	; 0x07
    210a:	b0 85       	ldd	r27, Z+8	; 0x08
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	f9 01       	movw	r30, r18
    2112:	84 83       	std	Z+4, r24	; 0x04
    2114:	95 83       	std	Z+5, r25	; 0x05
    2116:	a6 83       	std	Z+6, r26	; 0x06
    2118:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    211a:	2b 81       	ldd	r18, Y+3	; 0x03
    211c:	3c 81       	ldd	r19, Y+4	; 0x04
    211e:	8c e0       	ldi	r24, 0x0C	; 12
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	f9 01       	movw	r30, r18
    2128:	80 87       	std	Z+8, r24	; 0x08
    212a:	91 87       	std	Z+9, r25	; 0x09
    212c:	a2 87       	std	Z+10, r26	; 0x0a
    212e:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2130:	0e 94 21 2b 	call	0x5642	; 0x5642 <millis>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	2b 81       	ldd	r18, Y+3	; 0x03
    213a:	3c 81       	ldd	r19, Y+4	; 0x04
    213c:	f9 01       	movw	r30, r18
    213e:	80 8b       	std	Z+16, r24	; 0x10
    2140:	91 8b       	std	Z+17, r25	; 0x11
    2142:	a2 8b       	std	Z+18, r26	; 0x12
    2144:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	fc 01       	movw	r30, r24
    214c:	83 81       	ldd	r24, Z+3	; 0x03
    214e:	94 81       	ldd	r25, Z+4	; 0x04
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	cb d8       	rcall	.-3690   	; 0x12ea <_ZN3DHT12readHumidityEb>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	2b 81       	ldd	r18, Y+3	; 0x03
    215a:	3c 81       	ldd	r19, Y+4	; 0x04
    215c:	f9 01       	movw	r30, r18
    215e:	84 8b       	std	Z+20, r24	; 0x14
    2160:	95 8b       	std	Z+21, r25	; 0x15
    2162:	a6 8b       	std	Z+22, r26	; 0x16
    2164:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2166:	81 e0       	ldi	r24, 0x01	; 1
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	08 95       	ret

00002176 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	00 d0       	rcall	.+0      	; 0x217c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    217c:	1f 92       	push	r1
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	7c 83       	std	Y+4, r23	; 0x04
    2188:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	48 e2       	ldi	r20, 0x28	; 40
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 26 31 	call	0x624c	; 0x624c <memset>
  // Set sensor name.
  _parent->setName(sensor);
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	fc 01       	movw	r30, r24
    21a0:	83 81       	ldd	r24, Z+3	; 0x03
    21a2:	94 81       	ldd	r25, Z+4	; 0x04
    21a4:	2b 81       	ldd	r18, Y+3	; 0x03
    21a6:	3c 81       	ldd	r19, Y+4	; 0x04
    21a8:	b9 01       	movw	r22, r18
    21aa:	fa dc       	rcall	.-1548   	; 0x1ba0 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	f9 01       	movw	r30, r18
    21ba:	84 87       	std	Z+12, r24	; 0x0c
    21bc:	95 87       	std	Z+13, r25	; 0x0d
    21be:	a6 87       	std	Z+14, r26	; 0x0e
    21c0:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	fc 01       	movw	r30, r24
    21c8:	85 81       	ldd	r24, Z+5	; 0x05
    21ca:	96 81       	ldd	r25, Z+6	; 0x06
    21cc:	a7 81       	ldd	r26, Z+7	; 0x07
    21ce:	b0 85       	ldd	r27, Z+8	; 0x08
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	f9 01       	movw	r30, r18
    21d6:	80 8b       	std	Z+16, r24	; 0x10
    21d8:	91 8b       	std	Z+17, r25	; 0x11
    21da:	a2 8b       	std	Z+18, r26	; 0x12
    21dc:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    21de:	2b 81       	ldd	r18, Y+3	; 0x03
    21e0:	3c 81       	ldd	r19, Y+4	; 0x04
    21e2:	8c e0       	ldi	r24, 0x0C	; 12
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e0       	ldi	r26, 0x00	; 0
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	f9 01       	movw	r30, r18
    21ec:	84 8b       	std	Z+20, r24	; 0x14
    21ee:	95 8b       	std	Z+21, r25	; 0x15
    21f0:	a6 8b       	std	Z+22, r26	; 0x16
    21f2:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	fc 01       	movw	r30, r24
    21fa:	83 81       	ldd	r24, Z+3	; 0x03
    21fc:	94 81       	ldd	r25, Z+4	; 0x04
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	b9 01       	movw	r22, r18
    2204:	2e dd       	rcall	.-1444   	; 0x1c62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	fc 01       	movw	r30, r24
    220c:	83 81       	ldd	r24, Z+3	; 0x03
    220e:	94 81       	ldd	r25, Z+4	; 0x04
    2210:	fc 01       	movw	r30, r24
    2212:	83 89       	ldd	r24, Z+19	; 0x13
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	8c 30       	cpi	r24, 0x0C	; 12
    221a:	91 05       	cpc	r25, r1
    221c:	81 f1       	breq	.+96     	; 0x227e <__stack+0x7f>
    221e:	8d 30       	cpi	r24, 0x0D	; 13
    2220:	91 05       	cpc	r25, r1
    2222:	1c f4       	brge	.+6      	; 0x222a <__stack+0x2b>
    2224:	0b 97       	sbiw	r24, 0x0b	; 11
    2226:	49 f0       	breq	.+18     	; 0x223a <__stack+0x3b>
    2228:	88 c0       	rjmp	.+272    	; 0x233a <__stack+0x13b>
    222a:	85 31       	cpi	r24, 0x15	; 21
    222c:	91 05       	cpc	r25, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <__stack+0x33>
    2230:	48 c0       	rjmp	.+144    	; 0x22c2 <__stack+0xc3>
    2232:	46 97       	sbiw	r24, 0x16	; 22
    2234:	09 f4       	brne	.+2      	; 0x2238 <__stack+0x39>
    2236:	63 c0       	rjmp	.+198    	; 0x22fe <__stack+0xff>
    2238:	80 c0       	rjmp	.+256    	; 0x233a <__stack+0x13b>
  case DHT11:
    sensor->max_value = 80.0F;
    223a:	2b 81       	ldd	r18, Y+3	; 0x03
    223c:	3c 81       	ldd	r19, Y+4	; 0x04
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 ea       	ldi	r26, 0xA0	; 160
    2244:	b2 e4       	ldi	r27, 0x42	; 66
    2246:	f9 01       	movw	r30, r18
    2248:	80 8f       	std	Z+24, r24	; 0x18
    224a:	91 8f       	std	Z+25, r25	; 0x19
    224c:	a2 8f       	std	Z+26, r26	; 0x1a
    224e:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	3c 81       	ldd	r19, Y+4	; 0x04
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 ea       	ldi	r26, 0xA0	; 160
    225a:	b1 e4       	ldi	r27, 0x41	; 65
    225c:	f9 01       	movw	r30, r18
    225e:	84 8f       	std	Z+28, r24	; 0x1c
    2260:	95 8f       	std	Z+29, r25	; 0x1d
    2262:	a6 8f       	std	Z+30, r26	; 0x1e
    2264:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 ea       	ldi	r26, 0xA0	; 160
    2270:	b0 e4       	ldi	r27, 0x40	; 64
    2272:	f9 01       	movw	r30, r18
    2274:	80 a3       	std	Z+32, r24	; 0x20
    2276:	91 a3       	std	Z+33, r25	; 0x21
    2278:	a2 a3       	std	Z+34, r26	; 0x22
    227a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    227c:	74 c0       	rjmp	.+232    	; 0x2366 <__stack+0x167>
  case DHT12:
    sensor->max_value = 95.0F;
    227e:	2b 81       	ldd	r18, Y+3	; 0x03
    2280:	3c 81       	ldd	r19, Y+4	; 0x04
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	ae eb       	ldi	r26, 0xBE	; 190
    2288:	b2 e4       	ldi	r27, 0x42	; 66
    228a:	f9 01       	movw	r30, r18
    228c:	80 8f       	std	Z+24, r24	; 0x18
    228e:	91 8f       	std	Z+25, r25	; 0x19
    2290:	a2 8f       	std	Z+26, r26	; 0x1a
    2292:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2294:	2b 81       	ldd	r18, Y+3	; 0x03
    2296:	3c 81       	ldd	r19, Y+4	; 0x04
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 ea       	ldi	r26, 0xA0	; 160
    229e:	b1 e4       	ldi	r27, 0x41	; 65
    22a0:	f9 01       	movw	r30, r18
    22a2:	84 8f       	std	Z+28, r24	; 0x1c
    22a4:	95 8f       	std	Z+29, r25	; 0x1d
    22a6:	a6 8f       	std	Z+30, r26	; 0x1e
    22a8:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    22aa:	2b 81       	ldd	r18, Y+3	; 0x03
    22ac:	3c 81       	ldd	r19, Y+4	; 0x04
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 ea       	ldi	r26, 0xA0	; 160
    22b4:	b0 e4       	ldi	r27, 0x40	; 64
    22b6:	f9 01       	movw	r30, r18
    22b8:	80 a3       	std	Z+32, r24	; 0x20
    22ba:	91 a3       	std	Z+33, r25	; 0x21
    22bc:	a2 a3       	std	Z+34, r26	; 0x22
    22be:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    22c0:	52 c0       	rjmp	.+164    	; 0x2366 <__stack+0x167>
  case DHT21:
    sensor->max_value = 100.0F;
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a8 ec       	ldi	r26, 0xC8	; 200
    22cc:	b2 e4       	ldi	r27, 0x42	; 66
    22ce:	f9 01       	movw	r30, r18
    22d0:	80 8f       	std	Z+24, r24	; 0x18
    22d2:	91 8f       	std	Z+25, r25	; 0x19
    22d4:	a2 8f       	std	Z+26, r26	; 0x1a
    22d6:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	fc 01       	movw	r30, r24
    22de:	14 8e       	std	Z+28, r1	; 0x1c
    22e0:	15 8e       	std	Z+29, r1	; 0x1d
    22e2:	16 8e       	std	Z+30, r1	; 0x1e
    22e4:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    22e6:	2b 81       	ldd	r18, Y+3	; 0x03
    22e8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ea:	8d ec       	ldi	r24, 0xCD	; 205
    22ec:	9c ec       	ldi	r25, 0xCC	; 204
    22ee:	ac ec       	ldi	r26, 0xCC	; 204
    22f0:	bd e3       	ldi	r27, 0x3D	; 61
    22f2:	f9 01       	movw	r30, r18
    22f4:	80 a3       	std	Z+32, r24	; 0x20
    22f6:	91 a3       	std	Z+33, r25	; 0x21
    22f8:	a2 a3       	std	Z+34, r26	; 0x22
    22fa:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    22fc:	34 c0       	rjmp	.+104    	; 0x2366 <__stack+0x167>
  case DHT22:
    sensor->max_value = 100.0F;
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a8 ec       	ldi	r26, 0xC8	; 200
    2308:	b2 e4       	ldi	r27, 0x42	; 66
    230a:	f9 01       	movw	r30, r18
    230c:	80 8f       	std	Z+24, r24	; 0x18
    230e:	91 8f       	std	Z+25, r25	; 0x19
    2310:	a2 8f       	std	Z+26, r26	; 0x1a
    2312:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	fc 01       	movw	r30, r24
    231a:	14 8e       	std	Z+28, r1	; 0x1c
    231c:	15 8e       	std	Z+29, r1	; 0x1d
    231e:	16 8e       	std	Z+30, r1	; 0x1e
    2320:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    2322:	2b 81       	ldd	r18, Y+3	; 0x03
    2324:	3c 81       	ldd	r19, Y+4	; 0x04
    2326:	8d ec       	ldi	r24, 0xCD	; 205
    2328:	9c ec       	ldi	r25, 0xCC	; 204
    232a:	ac ec       	ldi	r26, 0xCC	; 204
    232c:	bd e3       	ldi	r27, 0x3D	; 61
    232e:	f9 01       	movw	r30, r18
    2330:	80 a3       	std	Z+32, r24	; 0x20
    2332:	91 a3       	std	Z+33, r25	; 0x21
    2334:	a2 a3       	std	Z+34, r26	; 0x22
    2336:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2338:	16 c0       	rjmp	.+44     	; 0x2366 <__stack+0x167>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	fc 01       	movw	r30, r24
    2340:	10 8e       	std	Z+24, r1	; 0x18
    2342:	11 8e       	std	Z+25, r1	; 0x19
    2344:	12 8e       	std	Z+26, r1	; 0x1a
    2346:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	fc 01       	movw	r30, r24
    234e:	14 8e       	std	Z+28, r1	; 0x1c
    2350:	15 8e       	std	Z+29, r1	; 0x1d
    2352:	16 8e       	std	Z+30, r1	; 0x1e
    2354:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	fc 01       	movw	r30, r24
    235c:	10 a2       	std	Z+32, r1	; 0x20
    235e:	11 a2       	std	Z+33, r1	; 0x21
    2360:	12 a2       	std	Z+34, r1	; 0x22
    2362:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2364:	00 00       	nop
  }
}
    2366:	00 00       	nop
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	08 95       	ret

00002376 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2376:	0f 93       	push	r16
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	28 97       	sbiw	r28, 0x08	; 8
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	4b 83       	std	Y+3, r20	; 0x03
    2392:	5c 83       	std	Y+4, r21	; 0x04
    2394:	6d 83       	std	Y+5, r22	; 0x05
    2396:	7e 83       	std	Y+6, r23	; 0x06
    2398:	2f 83       	std	Y+7, r18	; 0x07
    239a:	08 87       	std	Y+8, r16	; 0x08
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	ad 81       	ldd	r26, Y+5	; 0x05
    23a2:	be 81       	ldd	r27, Y+6	; 0x06
    23a4:	e9 81       	ldd	r30, Y+1	; 0x01
    23a6:	fa 81       	ldd	r31, Y+2	; 0x02
    23a8:	08 85       	ldd	r16, Y+8	; 0x08
    23aa:	2f 81       	ldd	r18, Y+7	; 0x07
    23ac:	ac 01       	movw	r20, r24
    23ae:	bd 01       	movw	r22, r26
    23b0:	cf 01       	movw	r24, r30
    23b2:	0b d0       	rcall	.+22     	; 0x23ca <_ZN11SPISettings16init_MightInlineEmhh>
    23b4:	00 00       	nop
    23b6:	28 96       	adiw	r28, 0x08	; 8
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <_ZN11SPISettings16init_MightInlineEmhh>:
    23ca:	0f 93       	push	r16
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	65 97       	sbiw	r28, 0x15	; 21
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	9f 87       	std	Y+15, r25	; 0x0f
    23e2:	8e 87       	std	Y+14, r24	; 0x0e
    23e4:	48 8b       	std	Y+16, r20	; 0x10
    23e6:	59 8b       	std	Y+17, r21	; 0x11
    23e8:	6a 8b       	std	Y+18, r22	; 0x12
    23ea:	7b 8b       	std	Y+19, r23	; 0x13
    23ec:	2c 8b       	std	Y+20, r18	; 0x14
    23ee:	0d 8b       	std	Y+21, r16	; 0x15
    23f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	88 89       	ldd	r24, Y+16	; 0x10
    23fa:	99 89       	ldd	r25, Y+17	; 0x11
    23fc:	aa 89       	ldd	r26, Y+18	; 0x12
    23fe:	bb 89       	ldd	r27, Y+19	; 0x13
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	ad 83       	std	Y+5, r26	; 0x05
    2406:	be 83       	std	Y+6, r27	; 0x06
    2408:	8c 89       	ldd	r24, Y+20	; 0x14
    240a:	8f 83       	std	Y+7, r24	; 0x07
    240c:	8d 89       	ldd	r24, Y+21	; 0x15
    240e:	88 87       	std	Y+8, r24	; 0x08
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	92 e1       	ldi	r25, 0x12	; 18
    2414:	aa e7       	ldi	r26, 0x7A	; 122
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	89 87       	std	Y+9, r24	; 0x09
    241a:	9a 87       	std	Y+10, r25	; 0x0a
    241c:	ab 87       	std	Y+11, r26	; 0x0b
    241e:	bc 87       	std	Y+12, r27	; 0x0c
    2420:	1d 86       	std	Y+13, r1	; 0x0d
    2422:	8d 85       	ldd	r24, Y+13	; 0x0d
    2424:	86 30       	cpi	r24, 0x06	; 6
    2426:	e8 f4       	brcc	.+58     	; 0x2462 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2428:	2b 81       	ldd	r18, Y+3	; 0x03
    242a:	3c 81       	ldd	r19, Y+4	; 0x04
    242c:	4d 81       	ldd	r20, Y+5	; 0x05
    242e:	5e 81       	ldd	r21, Y+6	; 0x06
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	ab 85       	ldd	r26, Y+11	; 0x0b
    2436:	bc 85       	ldd	r27, Y+12	; 0x0c
    2438:	28 17       	cp	r18, r24
    243a:	39 07       	cpc	r19, r25
    243c:	4a 07       	cpc	r20, r26
    243e:	5b 07       	cpc	r21, r27
    2440:	80 f4       	brcc	.+32     	; 0x2462 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	ab 85       	ldd	r26, Y+11	; 0x0b
    2448:	bc 85       	ldd	r27, Y+12	; 0x0c
    244a:	b6 95       	lsr	r27
    244c:	a7 95       	ror	r26
    244e:	97 95       	ror	r25
    2450:	87 95       	ror	r24
    2452:	89 87       	std	Y+9, r24	; 0x09
    2454:	9a 87       	std	Y+10, r25	; 0x0a
    2456:	ab 87       	std	Y+11, r26	; 0x0b
    2458:	bc 87       	std	Y+12, r27	; 0x0c
    245a:	8d 85       	ldd	r24, Y+13	; 0x0d
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	8d 87       	std	Y+13, r24	; 0x0d
    2460:	e0 cf       	rjmp	.-64     	; 0x2422 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	86 30       	cpi	r24, 0x06	; 6
    2466:	11 f4       	brne	.+4      	; 0x246c <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2468:	87 e0       	ldi	r24, 0x07	; 7
    246a:	8d 87       	std	Y+13, r24	; 0x0d
    246c:	9d 85       	ldd	r25, Y+13	; 0x0d
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	89 27       	eor	r24, r25
    2472:	8d 87       	std	Y+13, r24	; 0x0d
    2474:	8f 81       	ldd	r24, Y+7	; 0x07
    2476:	88 23       	and	r24, r24
    2478:	11 f4       	brne	.+4      	; 0x247e <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    247a:	80 e7       	ldi	r24, 0x70	; 112
    247c:	01 c0       	rjmp	.+2      	; 0x2480 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    247e:	80 e5       	ldi	r24, 0x50	; 80
    2480:	98 85       	ldd	r25, Y+8	; 0x08
    2482:	9c 70       	andi	r25, 0x0C	; 12
    2484:	29 2f       	mov	r18, r25
    2486:	28 2b       	or	r18, r24
    2488:	8d 85       	ldd	r24, Y+13	; 0x0d
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	95 95       	asr	r25
    2490:	87 95       	ror	r24
    2492:	83 70       	andi	r24, 0x03	; 3
    2494:	82 2b       	or	r24, r18
    2496:	28 2f       	mov	r18, r24
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	fc 01       	movw	r30, r24
    249e:	20 83       	st	Z, r18
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	28 2f       	mov	r18, r24
    24a4:	21 70       	andi	r18, 0x01	; 1
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	fc 01       	movw	r30, r24
    24ac:	21 83       	std	Z+1, r18	; 0x01
    24ae:	00 00       	nop
    24b0:	65 96       	adiw	r28, 0x15	; 21
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9b 83       	std	Y+3, r25	; 0x03
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <_ZN8SPIClass13interruptModeE>
    24d6:	88 23       	and	r24, r24
    24d8:	31 f1       	breq	.+76     	; 0x2526 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    24da:	8f e5       	ldi	r24, 0x5F	; 95
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	fc 01       	movw	r30, r24
    24e0:	80 81       	ld	r24, Z
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	f8 94       	cli
    24e6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <_ZN8SPIClass13interruptModeE>
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	c9 f4       	brne	.+50     	; 0x2520 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    24ee:	8d e3       	ldi	r24, 0x3D	; 61
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	fc 01       	movw	r30, r24
    24f4:	80 81       	ld	r24, Z
    24f6:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <_ZN8SPIClass13interruptSaveE>
    24fa:	8d e3       	ldi	r24, 0x3D	; 61
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	2d e3       	ldi	r18, 0x3D	; 61
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	f9 01       	movw	r30, r18
    2504:	20 81       	ld	r18, Z
    2506:	32 2f       	mov	r19, r18
    2508:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <_ZN8SPIClass13interruptMaskE>
    250c:	20 95       	com	r18
    250e:	23 23       	and	r18, r19
    2510:	fc 01       	movw	r30, r24
    2512:	20 83       	st	Z, r18
    2514:	8f e5       	ldi	r24, 0x5F	; 95
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	29 81       	ldd	r18, Y+1	; 0x01
    251a:	fc 01       	movw	r30, r24
    251c:	20 83       	st	Z, r18
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <_ZN8SPIClass13interruptSaveE>
    2526:	8c e4       	ldi	r24, 0x4C	; 76
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	2a 81       	ldd	r18, Y+2	; 0x02
    252c:	fc 01       	movw	r30, r24
    252e:	20 83       	st	Z, r18
    2530:	8d e4       	ldi	r24, 0x4D	; 77
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	2b 81       	ldd	r18, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	20 83       	st	Z, r18
    253a:	00 00       	nop
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <_ZN8SPIClass8transferEh>:
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	1f 92       	push	r1
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	8e e4       	ldi	r24, 0x4E	; 78
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	29 81       	ldd	r18, Y+1	; 0x01
    255a:	fc 01       	movw	r30, r24
    255c:	20 83       	st	Z, r18
    255e:	00 00       	nop
    2560:	8d e4       	ldi	r24, 0x4D	; 77
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	fc 01       	movw	r30, r24
    2566:	80 81       	ld	r24, Z
    2568:	80 95       	com	r24
    256a:	88 1f       	adc	r24, r24
    256c:	88 27       	eor	r24, r24
    256e:	88 1f       	adc	r24, r24
    2570:	88 23       	and	r24, r24
    2572:	09 f0       	breq	.+2      	; 0x2576 <_ZN8SPIClass8transferEh+0x2e>
    2574:	f5 cf       	rjmp	.-22     	; 0x2560 <_ZN8SPIClass8transferEh+0x18>
    2576:	8e e4       	ldi	r24, 0x4E	; 78
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	fc 01       	movw	r30, r24
    257c:	80 81       	ld	r24, Z
    257e:	0f 90       	pop	r0
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	08 95       	ret

00002586 <_ZN8SPIClass14endTransactionEv>:
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <_ZN8SPIClass13interruptModeE>
    2594:	88 23       	and	r24, r24
    2596:	e1 f0       	breq	.+56     	; 0x25d0 <_ZN8SPIClass14endTransactionEv+0x4a>
    2598:	8f e5       	ldi	r24, 0x5F	; 95
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	80 81       	ld	r24, Z
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	f8 94       	cli
    25a4:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <_ZN8SPIClass13interruptModeE>
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	61 f4       	brne	.+24     	; 0x25c4 <_ZN8SPIClass14endTransactionEv+0x3e>
    25ac:	8d e3       	ldi	r24, 0x3D	; 61
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <_ZN8SPIClass13interruptSaveE>
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
    25b8:	8f e5       	ldi	r24, 0x5F	; 95
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	29 81       	ldd	r18, Y+1	; 0x01
    25be:	fc 01       	movw	r30, r24
    25c0:	20 83       	st	Z, r18
    25c2:	06 c0       	rjmp	.+12     	; 0x25d0 <_ZN8SPIClass14endTransactionEv+0x4a>
    25c4:	8f e5       	ldi	r24, 0x5F	; 95
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <_ZN8SPIClass13interruptSaveE>
    25cc:	fc 01       	movw	r30, r24
    25ce:	20 83       	st	Z, r18
    25d0:	00 00       	nop
    25d2:	0f 90       	pop	r0
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	08 95       	ret

000025da <_ZN7MFRC522C1Ehh>:
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <_ZN7MFRC522C1Ehh+0x6>
    25e0:	1f 92       	push	r1
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	6b 83       	std	Y+3, r22	; 0x03
    25ec:	4c 83       	std	Y+4, r20	; 0x04
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	2b 81       	ldd	r18, Y+3	; 0x03
    25f4:	fc 01       	movw	r30, r24
    25f6:	24 87       	std	Z+12, r18	; 0x0c
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	2c 81       	ldd	r18, Y+4	; 0x04
    25fe:	fc 01       	movw	r30, r24
    2600:	25 87       	std	Z+13, r18	; 0x0d
    2602:	00 00       	nop
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    2612:	0f 93       	push	r16
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	00 d0       	rcall	.+0      	; 0x261a <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    261a:	00 d0       	rcall	.+0      	; 0x261c <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	6d 83       	std	Y+5, r22	; 0x05
    2626:	4e 83       	std	Y+6, r20	; 0x06
    2628:	00 e0       	ldi	r16, 0x00	; 0
    262a:	21 e0       	ldi	r18, 0x01	; 1
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	ba 01       	movw	r22, r20
    2632:	ce 01       	movw	r24, r28
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	9f de       	rcall	.-706    	; 0x2376 <_ZN11SPISettingsC1Emhh>
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	43 df       	rcall	.-378    	; 0x24c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	fc 01       	movw	r30, r24
    2644:	84 85       	ldd	r24, Z+12	; 0x0c
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	8e 77       	andi	r24, 0x7E	; 126
    2650:	7b df       	rcall	.-266    	; 0x2548 <_ZN8SPIClass8transferEh>
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	79 df       	rcall	.-270    	; 0x2548 <_ZN8SPIClass8transferEh>
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	fc 01       	movw	r30, r24
    265c:	84 85       	ldd	r24, Z+12	; 0x0c
    265e:	61 e0       	ldi	r22, 0x01	; 1
    2660:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    2664:	90 df       	rcall	.-224    	; 0x2586 <_ZN8SPIClass14endTransactionEv>
    2666:	00 00       	nop
    2668:	26 96       	adiw	r28, 0x06	; 6
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    267c:	0f 93       	push	r16
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	29 97       	sbiw	r28, 0x09	; 9
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
    2696:	6e 83       	std	Y+6, r22	; 0x06
    2698:	4f 83       	std	Y+7, r20	; 0x07
    269a:	39 87       	std	Y+9, r19	; 0x09
    269c:	28 87       	std	Y+8, r18	; 0x08
    269e:	ce 01       	movw	r24, r28
    26a0:	02 96       	adiw	r24, 0x02	; 2
    26a2:	00 e0       	ldi	r16, 0x00	; 0
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	ba 01       	movw	r22, r20
    26ac:	64 de       	rcall	.-824    	; 0x2376 <_ZN11SPISettingsC1Emhh>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	08 df       	rcall	.-496    	; 0x24c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    26b4:	8c 81       	ldd	r24, Y+4	; 0x04
    26b6:	9d 81       	ldd	r25, Y+5	; 0x05
    26b8:	fc 01       	movw	r30, r24
    26ba:	84 85       	ldd	r24, Z+12	; 0x0c
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    26c2:	8e 81       	ldd	r24, Y+6	; 0x06
    26c4:	8e 77       	andi	r24, 0x7E	; 126
    26c6:	40 df       	rcall	.-384    	; 0x2548 <_ZN8SPIClass8transferEh>
    26c8:	19 82       	std	Y+1, r1	; 0x01
    26ca:	99 81       	ldd	r25, Y+1	; 0x01
    26cc:	8f 81       	ldd	r24, Y+7	; 0x07
    26ce:	98 17       	cp	r25, r24
    26d0:	70 f4       	brcc	.+28     	; 0x26ee <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	28 85       	ldd	r18, Y+8	; 0x08
    26da:	39 85       	ldd	r19, Y+9	; 0x09
    26dc:	82 0f       	add	r24, r18
    26de:	93 1f       	adc	r25, r19
    26e0:	fc 01       	movw	r30, r24
    26e2:	80 81       	ld	r24, Z
    26e4:	31 df       	rcall	.-414    	; 0x2548 <_ZN8SPIClass8transferEh>
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	ee cf       	rjmp	.-36     	; 0x26ca <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	9d 81       	ldd	r25, Y+5	; 0x05
    26f2:	fc 01       	movw	r30, r24
    26f4:	84 85       	ldd	r24, Z+12	; 0x0c
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    26fc:	44 df       	rcall	.-376    	; 0x2586 <_ZN8SPIClass14endTransactionEv>
    26fe:	00 00       	nop
    2700:	29 96       	adiw	r28, 0x09	; 9
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	0f 91       	pop	r16
    2712:	08 95       	ret

00002714 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    2714:	0f 93       	push	r16
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	00 d0       	rcall	.+0      	; 0x271c <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    271c:	00 d0       	rcall	.+0      	; 0x271e <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	9d 83       	std	Y+5, r25	; 0x05
    2724:	8c 83       	std	Y+4, r24	; 0x04
    2726:	6e 83       	std	Y+6, r22	; 0x06
    2728:	ce 01       	movw	r24, r28
    272a:	02 96       	adiw	r24, 0x02	; 2
    272c:	00 e0       	ldi	r16, 0x00	; 0
    272e:	21 e0       	ldi	r18, 0x01	; 1
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	ba 01       	movw	r22, r20
    2736:	1f de       	rcall	.-962    	; 0x2376 <_ZN11SPISettingsC1Emhh>
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	c3 de       	rcall	.-634    	; 0x24c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	fc 01       	movw	r30, r24
    2744:	84 85       	ldd	r24, Z+12	; 0x0c
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    274c:	8e 81       	ldd	r24, Y+6	; 0x06
    274e:	8e 77       	andi	r24, 0x7E	; 126
    2750:	80 68       	ori	r24, 0x80	; 128
    2752:	fa de       	rcall	.-524    	; 0x2548 <_ZN8SPIClass8transferEh>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	f8 de       	rcall	.-528    	; 0x2548 <_ZN8SPIClass8transferEh>
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
    275c:	9d 81       	ldd	r25, Y+5	; 0x05
    275e:	fc 01       	movw	r30, r24
    2760:	84 85       	ldd	r24, Z+12	; 0x0c
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    2768:	0e df       	rcall	.-484    	; 0x2586 <_ZN8SPIClass14endTransactionEv>
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	26 96       	adiw	r28, 0x06	; 6
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	0f 91       	pop	r16
    277e:	08 95       	ret

00002780 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2780:	0f 93       	push	r16
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	2e 97       	sbiw	r28, 0x0e	; 14
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	99 87       	std	Y+9, r25	; 0x09
    279a:	88 87       	std	Y+8, r24	; 0x08
    279c:	6a 87       	std	Y+10, r22	; 0x0a
    279e:	4b 87       	std	Y+11, r20	; 0x0b
    27a0:	3d 87       	std	Y+13, r19	; 0x0d
    27a2:	2c 87       	std	Y+12, r18	; 0x0c
    27a4:	0e 87       	std	Y+14, r16	; 0x0e
    27a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    27ac:	7e c0       	rjmp	.+252    	; 0x28aa <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    27ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b0:	8e 77       	andi	r24, 0x7E	; 126
    27b2:	80 68       	ori	r24, 0x80	; 128
    27b4:	8c 83       	std	Y+4, r24	; 0x04
    27b6:	19 82       	std	Y+1, r1	; 0x01
    27b8:	ce 01       	movw	r24, r28
    27ba:	06 96       	adiw	r24, 0x06	; 6
    27bc:	00 e0       	ldi	r16, 0x00	; 0
    27be:	21 e0       	ldi	r18, 0x01	; 1
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	ba 01       	movw	r22, r20
    27c6:	d7 dd       	rcall	.-1106   	; 0x2376 <_ZN11SPISettingsC1Emhh>
    27c8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ca:	9f 81       	ldd	r25, Y+7	; 0x07
    27cc:	7b de       	rcall	.-778    	; 0x24c4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27ce:	88 85       	ldd	r24, Y+8	; 0x08
    27d0:	99 85       	ldd	r25, Y+9	; 0x09
    27d2:	fc 01       	movw	r30, r24
    27d4:	84 85       	ldd	r24, Z+12	; 0x0c
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    27dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	8b 87       	std	Y+11, r24	; 0x0b
    27e2:	8c 81       	ldd	r24, Y+4	; 0x04
    27e4:	b1 de       	rcall	.-670    	; 0x2548 <_ZN8SPIClass8transferEh>
    27e6:	99 81       	ldd	r25, Y+1	; 0x01
    27e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ea:	98 17       	cp	r25, r24
    27ec:	08 f0       	brcs	.+2      	; 0x27f0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    27ee:	48 c0       	rjmp	.+144    	; 0x2880 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	88 23       	and	r24, r24
    27f4:	a9 f5       	brne	.+106    	; 0x2860 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    27f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27f8:	88 23       	and	r24, r24
    27fa:	91 f1       	breq	.+100    	; 0x2860 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    27fc:	1a 82       	std	Y+2, r1	; 0x02
    27fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2800:	8b 83       	std	Y+3, r24	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	88 30       	cpi	r24, 0x08	; 8
    2806:	90 f4       	brcc	.+36     	; 0x282c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	2a 95       	dec	r18
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    281c:	98 2f       	mov	r25, r24
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	89 2b       	or	r24, r25
    2822:	8a 83       	std	Y+2, r24	; 0x02
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	eb cf       	rjmp	.-42     	; 0x2802 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	8c de       	rcall	.-744    	; 0x2548 <_ZN8SPIClass8transferEh>
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	2c 85       	ldd	r18, Y+12	; 0x0c
    283a:	3d 85       	ldd	r19, Y+13	; 0x0d
    283c:	82 0f       	add	r24, r18
    283e:	93 1f       	adc	r25, r19
    2840:	fc 01       	movw	r30, r24
    2842:	80 81       	ld	r24, Z
    2844:	98 2f       	mov	r25, r24
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	80 95       	com	r24
    284a:	89 23       	and	r24, r25
    284c:	2d 81       	ldd	r18, Y+5	; 0x05
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	92 23       	and	r25, r18
    2852:	89 2b       	or	r24, r25
    2854:	28 2f       	mov	r18, r24
    2856:	8c 85       	ldd	r24, Y+12	; 0x0c
    2858:	9d 85       	ldd	r25, Y+13	; 0x0d
    285a:	fc 01       	movw	r30, r24
    285c:	20 83       	st	Z, r18
    285e:	0c c0       	rjmp	.+24     	; 0x2878 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	2c 85       	ldd	r18, Y+12	; 0x0c
    2868:	3d 85       	ldd	r19, Y+13	; 0x0d
    286a:	89 01       	movw	r16, r18
    286c:	08 0f       	add	r16, r24
    286e:	19 1f       	adc	r17, r25
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	6a de       	rcall	.-812    	; 0x2548 <_ZN8SPIClass8transferEh>
    2874:	f8 01       	movw	r30, r16
    2876:	80 83       	st	Z, r24
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	b3 cf       	rjmp	.-154    	; 0x27e6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	2c 85       	ldd	r18, Y+12	; 0x0c
    2888:	3d 85       	ldd	r19, Y+13	; 0x0d
    288a:	89 01       	movw	r16, r18
    288c:	08 0f       	add	r16, r24
    288e:	19 1f       	adc	r17, r25
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	5a de       	rcall	.-844    	; 0x2548 <_ZN8SPIClass8transferEh>
    2894:	f8 01       	movw	r30, r16
    2896:	80 83       	st	Z, r24
    2898:	88 85       	ldd	r24, Y+8	; 0x08
    289a:	99 85       	ldd	r25, Y+9	; 0x09
    289c:	fc 01       	movw	r30, r24
    289e:	84 85       	ldd	r24, Z+12	; 0x0c
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    28a6:	6f de       	rcall	.-802    	; 0x2586 <_ZN8SPIClass14endTransactionEv>
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    28aa:	00 00       	nop
    28ac:	2e 96       	adiw	r28, 0x0e	; 14
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    28c8:	1f 92       	push	r1
    28ca:	1f 92       	push	r1
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	9b 83       	std	Y+3, r25	; 0x03
    28d2:	8a 83       	std	Y+2, r24	; 0x02
    28d4:	6c 83       	std	Y+4, r22	; 0x04
    28d6:	4d 83       	std	Y+5, r20	; 0x05
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	9b 81       	ldd	r25, Y+3	; 0x03
    28dc:	6c 81       	ldd	r22, Y+4	; 0x04
    28de:	1a df       	rcall	.-460    	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	99 81       	ldd	r25, Y+1	; 0x01
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	29 2f       	mov	r18, r25
    28e8:	28 2b       	or	r18, r24
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	42 2f       	mov	r20, r18
    28f0:	6c 81       	ldd	r22, Y+4	; 0x04
    28f2:	8f de       	rcall	.-738    	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    28f4:	00 00       	nop
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	08 95       	ret

00002906 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	00 d0       	rcall	.+0      	; 0x290c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    290c:	1f 92       	push	r1
    290e:	1f 92       	push	r1
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	9b 83       	std	Y+3, r25	; 0x03
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	6c 83       	std	Y+4, r22	; 0x04
    291a:	4d 83       	std	Y+5, r20	; 0x05
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	9b 81       	ldd	r25, Y+3	; 0x03
    2920:	6c 81       	ldd	r22, Y+4	; 0x04
    2922:	f8 de       	rcall	.-528    	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	98 2f       	mov	r25, r24
    292a:	90 95       	com	r25
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	89 23       	and	r24, r25
    2930:	28 2f       	mov	r18, r24
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	42 2f       	mov	r20, r18
    2938:	6c 81       	ldd	r22, Y+4	; 0x04
    293a:	6b de       	rcall	.-810    	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    293c:	00 00       	nop
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	08 95       	ret

0000294e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	2a 97       	sbiw	r28, 0x0a	; 10
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	9d 83       	std	Y+5, r25	; 0x05
    2968:	8c 83       	std	Y+4, r24	; 0x04
    296a:	7f 83       	std	Y+7, r23	; 0x07
    296c:	6e 83       	std	Y+6, r22	; 0x06
    296e:	48 87       	std	Y+8, r20	; 0x08
    2970:	3a 87       	std	Y+10, r19	; 0x0a
    2972:	29 87       	std	Y+9, r18	; 0x09
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	9d 81       	ldd	r25, Y+5	; 0x05
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	62 e0       	ldi	r22, 0x02	; 2
    297c:	4a de       	rcall	.-876    	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	9d 81       	ldd	r25, Y+5	; 0x05
    2982:	44 e0       	ldi	r20, 0x04	; 4
    2984:	6a e0       	ldi	r22, 0x0A	; 10
    2986:	45 de       	rcall	.-886    	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	9d 81       	ldd	r25, Y+5	; 0x05
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	64 e1       	ldi	r22, 0x14	; 20
    2990:	98 df       	rcall	.-208    	; 0x28c2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2992:	2e 81       	ldd	r18, Y+6	; 0x06
    2994:	3f 81       	ldd	r19, Y+7	; 0x07
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	48 85       	ldd	r20, Y+8	; 0x08
    299c:	62 e1       	ldi	r22, 0x12	; 18
    299e:	6e de       	rcall	.-804    	; 0x267c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	9d 81       	ldd	r25, Y+5	; 0x05
    29a4:	43 e0       	ldi	r20, 0x03	; 3
    29a6:	62 e0       	ldi	r22, 0x02	; 2
    29a8:	34 de       	rcall	.-920    	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    29aa:	88 e8       	ldi	r24, 0x88	; 136
    29ac:	93 e1       	ldi	r25, 0x13	; 19
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	6a e0       	ldi	r22, 0x0A	; 10
    29b8:	ad de       	rcall	.-678    	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	84 70       	andi	r24, 0x04	; 4
    29c4:	99 27       	eor	r25, r25
    29c6:	89 2b       	or	r24, r25
    29c8:	79 f4       	brne	.+30     	; 0x29e8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	9a 81       	ldd	r25, Y+2	; 0x02
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	21 e0       	ldi	r18, 0x01	; 1
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	89 2b       	or	r24, r25
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	22 23       	and	r18, r18
    29e2:	39 f3       	breq	.-50     	; 0x29b2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	1b c0       	rjmp	.+54     	; 0x2a1e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    29e8:	00 00       	nop
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	9d 81       	ldd	r25, Y+5	; 0x05
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	62 e0       	ldi	r22, 0x02	; 2
    29f2:	0f de       	rcall	.-994    	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04
    29f6:	9d 81       	ldd	r25, Y+5	; 0x05
    29f8:	64 e4       	ldi	r22, 0x44	; 68
    29fa:	8c de       	rcall	.-744    	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29fc:	28 2f       	mov	r18, r24
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	fc 01       	movw	r30, r24
    2a04:	20 83       	st	Z, r18
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	8c 01       	movw	r16, r24
    2a0c:	0f 5f       	subi	r16, 0xFF	; 255
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	8c 81       	ldd	r24, Y+4	; 0x04
    2a12:	9d 81       	ldd	r25, Y+5	; 0x05
    2a14:	62 e4       	ldi	r22, 0x42	; 66
    2a16:	7e de       	rcall	.-772    	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2a18:	f8 01       	movw	r30, r16
    2a1a:	80 83       	st	Z, r24
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	2a 96       	adiw	r28, 0x0a	; 10
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	08 95       	ret

00002a34 <_ZN7MFRC5228PCD_InitEv>:
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	1f 92       	push	r1
    2a3a:	1f 92       	push	r1
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	fc 01       	movw	r30, r24
    2a4a:	84 85       	ldd	r24, Z+12	; 0x0c
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	fc 01       	movw	r30, r24
    2a58:	84 85       	ldd	r24, Z+12	; 0x0c
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	fc 01       	movw	r30, r24
    2a66:	85 85       	ldd	r24, Z+13	; 0x0d
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	fc 01       	movw	r30, r24
    2a74:	85 85       	ldd	r24, Z+13	; 0x0d
    2a76:	0e 94 b7 2c 	call	0x596e	; 0x596e <digitalRead>
    2a7a:	21 e0       	ldi	r18, 0x01	; 1
    2a7c:	89 2b       	or	r24, r25
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <_ZN7MFRC5228PCD_InitEv+0x4e>
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	22 23       	and	r18, r18
    2a84:	71 f0       	breq	.+28     	; 0x2aa2 <_ZN7MFRC5228PCD_InitEv+0x6e>
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	85 85       	ldd	r24, Z+13	; 0x0d
    2a8e:	61 e0       	ldi	r22, 0x01	; 1
    2a90:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    2a94:	62 e3       	ldi	r22, 0x32	; 50
    2a96:	70 e0       	ldi	r23, 0x00	; 0
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <_ZN7MFRC5228PCD_InitEv+0x74>
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	27 d0       	rcall	.+78     	; 0x2af6 <_ZN7MFRC5229PCD_ResetEv>
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	64 e5       	ldi	r22, 0x54	; 84
    2ab0:	b0 dd       	rcall	.-1184   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	49 ea       	ldi	r20, 0xA9	; 169
    2ab8:	66 e5       	ldi	r22, 0x56	; 86
    2aba:	ab dd       	rcall	.-1194   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	43 e0       	ldi	r20, 0x03	; 3
    2ac2:	68 e5       	ldi	r22, 0x58	; 88
    2ac4:	a6 dd       	rcall	.-1204   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	48 ee       	ldi	r20, 0xE8	; 232
    2acc:	6a e5       	ldi	r22, 0x5A	; 90
    2ace:	a1 dd       	rcall	.-1214   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	40 e4       	ldi	r20, 0x40	; 64
    2ad6:	6a e2       	ldi	r22, 0x2A	; 42
    2ad8:	9c dd       	rcall	.-1224   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	4d e3       	ldi	r20, 0x3D	; 61
    2ae0:	62 e2       	ldi	r22, 0x22	; 34
    2ae2:	97 dd       	rcall	.-1234   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	2e d0       	rcall	.+92     	; 0x2b46 <_ZN7MFRC52213PCD_AntennaOnEv>
    2aea:	00 00       	nop
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	08 95       	ret

00002af6 <_ZN7MFRC5229PCD_ResetEv>:
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	1f 92       	push	r1
    2afc:	1f 92       	push	r1
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9a 83       	std	Y+2, r25	; 0x02
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	4f e0       	ldi	r20, 0x0F	; 15
    2b0c:	62 e0       	ldi	r22, 0x02	; 2
    2b0e:	81 dd       	rcall	.-1278   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b10:	62 e3       	ldi	r22, 0x32	; 50
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <delay>
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	f8 dd       	rcall	.-1040   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	80 71       	andi	r24, 0x10	; 16
    2b2a:	99 27       	eor	r25, r25
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	89 2b       	or	r24, r25
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	22 23       	and	r18, r18
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <_ZN7MFRC5229PCD_ResetEv+0x44>
    2b38:	f1 cf       	rjmp	.-30     	; 0x2b1c <_ZN7MFRC5229PCD_ResetEv+0x26>
    2b3a:	00 00       	nop
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	08 95       	ret

00002b46 <_ZN7MFRC52213PCD_AntennaOnEv>:
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	9b 83       	std	Y+3, r25	; 0x03
    2b52:	8a 83       	std	Y+2, r24	; 0x02
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	9b 81       	ldd	r25, Y+3	; 0x03
    2b58:	68 e2       	ldi	r22, 0x28	; 40
    2b5a:	dc dd       	rcall	.-1096   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	83 70       	andi	r24, 0x03	; 3
    2b66:	99 27       	eor	r25, r25
    2b68:	03 97       	sbiw	r24, 0x03	; 3
    2b6a:	41 f0       	breq	.+16     	; 0x2b7c <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	28 2f       	mov	r18, r24
    2b70:	23 60       	ori	r18, 0x03	; 3
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	9b 81       	ldd	r25, Y+3	; 0x03
    2b76:	42 2f       	mov	r20, r18
    2b78:	68 e2       	ldi	r22, 0x28	; 40
    2b7a:	4b dd       	rcall	.-1386   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b7c:	00 00       	nop
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	08 95       	ret

00002b8a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2b8a:	8f 92       	push	r8
    2b8c:	af 92       	push	r10
    2b8e:	bf 92       	push	r11
    2b90:	cf 92       	push	r12
    2b92:	df 92       	push	r13
    2b94:	ef 92       	push	r14
    2b96:	ff 92       	push	r15
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	7d 83       	std	Y+5, r23	; 0x05
    2bb6:	6c 83       	std	Y+4, r22	; 0x04
    2bb8:	4e 83       	std	Y+6, r20	; 0x06
    2bba:	38 87       	std	Y+8, r19	; 0x08
    2bbc:	2f 83       	std	Y+7, r18	; 0x07
    2bbe:	1a 87       	std	Y+10, r17	; 0x0a
    2bc0:	09 87       	std	Y+9, r16	; 0x09
    2bc2:	fc 86       	std	Y+12, r15	; 0x0c
    2bc4:	eb 86       	std	Y+11, r14	; 0x0b
    2bc6:	cd 86       	std	Y+13, r12	; 0x0d
    2bc8:	ae 86       	std	Y+14, r10	; 0x0e
    2bca:	80 e3       	ldi	r24, 0x30	; 48
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	eb 85       	ldd	r30, Y+11	; 0x0b
    2bd0:	fc 85       	ldd	r31, Y+12	; 0x0c
    2bd2:	69 85       	ldd	r22, Y+9	; 0x09
    2bd4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bd6:	4f 81       	ldd	r20, Y+7	; 0x07
    2bd8:	58 85       	ldd	r21, Y+8	; 0x08
    2bda:	2c 81       	ldd	r18, Y+4	; 0x04
    2bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2be4:	af 93       	push	r26
    2be6:	8d 84       	ldd	r8, Y+13	; 0x0d
    2be8:	5f 01       	movw	r10, r30
    2bea:	6b 01       	movw	r12, r22
    2bec:	7a 01       	movw	r14, r20
    2bee:	0e 81       	ldd	r16, Y+6	; 0x06
    2bf0:	49 81       	ldd	r20, Y+1	; 0x01
    2bf2:	6c e0       	ldi	r22, 0x0C	; 12
    2bf4:	13 d0       	rcall	.+38     	; 0x2c1c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2bf6:	0f 90       	pop	r0
    2bf8:	2e 96       	adiw	r28, 0x0e	; 14
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
    2c14:	bf 90       	pop	r11
    2c16:	af 90       	pop	r10
    2c18:	8f 90       	pop	r8
    2c1a:	08 95       	ret

00002c1c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2c1c:	8f 92       	push	r8
    2c1e:	af 92       	push	r10
    2c20:	bf 92       	push	r11
    2c22:	cf 92       	push	r12
    2c24:	df 92       	push	r13
    2c26:	ef 92       	push	r14
    2c28:	ff 92       	push	r15
    2c2a:	0f 93       	push	r16
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	68 97       	sbiw	r28, 0x18	; 24
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	9c 87       	std	Y+12, r25	; 0x0c
    2c42:	8b 87       	std	Y+11, r24	; 0x0b
    2c44:	6d 87       	std	Y+13, r22	; 0x0d
    2c46:	4e 87       	std	Y+14, r20	; 0x0e
    2c48:	38 8b       	std	Y+16, r19	; 0x10
    2c4a:	2f 87       	std	Y+15, r18	; 0x0f
    2c4c:	09 8b       	std	Y+17, r16	; 0x11
    2c4e:	fb 8a       	std	Y+19, r15	; 0x13
    2c50:	ea 8a       	std	Y+18, r14	; 0x12
    2c52:	dd 8a       	std	Y+21, r13	; 0x15
    2c54:	cc 8a       	std	Y+20, r12	; 0x14
    2c56:	bf 8a       	std	Y+23, r11	; 0x17
    2c58:	ae 8a       	std	Y+22, r10	; 0x16
    2c5a:	88 8e       	std	Y+24, r8	; 0x18
    2c5c:	8e 89       	ldd	r24, Y+22	; 0x16
    2c5e:	9f 89       	ldd	r25, Y+23	; 0x17
    2c60:	89 2b       	or	r24, r25
    2c62:	29 f0       	breq	.+10     	; 0x2c6e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    2c64:	8e 89       	ldd	r24, Y+22	; 0x16
    2c66:	9f 89       	ldd	r25, Y+23	; 0x17
    2c68:	fc 01       	movw	r30, r24
    2c6a:	80 81       	ld	r24, Z
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	8c 83       	std	Y+4, r24	; 0x04
    2c72:	88 8d       	ldd	r24, Y+24	; 0x18
    2c74:	98 2f       	mov	r25, r24
    2c76:	92 95       	swap	r25
    2c78:	90 7f       	andi	r25, 0xF0	; 240
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	89 0f       	add	r24, r25
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c82:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	62 e0       	ldi	r22, 0x02	; 2
    2c88:	c4 dc       	rcall	.-1656   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	68 e0       	ldi	r22, 0x08	; 8
    2c92:	bf dc       	rcall	.-1666   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c94:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c96:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c98:	40 e8       	ldi	r20, 0x80	; 128
    2c9a:	64 e1       	ldi	r22, 0x14	; 20
    2c9c:	12 de       	rcall	.-988    	; 0x28c2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2c9e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ca0:	38 89       	ldd	r19, Y+16	; 0x10
    2ca2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ca4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ca6:	49 89       	ldd	r20, Y+17	; 0x11
    2ca8:	62 e1       	ldi	r22, 0x12	; 18
    2caa:	e8 dc       	rcall	.-1584   	; 0x267c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2cac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cae:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cb0:	4d 81       	ldd	r20, Y+5	; 0x05
    2cb2:	6a e1       	ldi	r22, 0x1A	; 26
    2cb4:	ae dc       	rcall	.-1700   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cba:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cbc:	62 e0       	ldi	r22, 0x02	; 2
    2cbe:	a9 dc       	rcall	.-1710   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc2:	8c 30       	cpi	r24, 0x0C	; 12
    2cc4:	29 f4       	brne	.+10     	; 0x2cd0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2cc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cca:	40 e8       	ldi	r20, 0x80	; 128
    2ccc:	6a e1       	ldi	r22, 0x1A	; 26
    2cce:	f9 dd       	rcall	.-1038   	; 0x28c2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2cd0:	80 ed       	ldi	r24, 0xD0	; 208
    2cd2:	97 e0       	ldi	r25, 0x07	; 7
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
    2cd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cda:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cdc:	68 e0       	ldi	r22, 0x08	; 8
    2cde:	1a dd       	rcall	.-1484   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ce0:	8e 83       	std	Y+6, r24	; 0x06
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ce6:	89 23       	and	r24, r25
    2ce8:	88 23       	and	r24, r24
    2cea:	c1 f4       	brne	.+48     	; 0x2d1c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    2cec:	8e 81       	ldd	r24, Y+6	; 0x06
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	81 70       	andi	r24, 0x01	; 1
    2cf4:	99 27       	eor	r25, r25
    2cf6:	89 2b       	or	r24, r25
    2cf8:	11 f0       	breq	.+4      	; 0x2cfe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	b4 c0       	rjmp	.+360    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	9b 83       	std	Y+3, r25	; 0x03
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	21 e0       	ldi	r18, 0x01	; 1
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0e:	89 2b       	or	r24, r25
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	22 23       	and	r18, r18
    2d16:	01 f3       	breq	.-64     	; 0x2cd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    2d18:	83 e0       	ldi	r24, 0x03	; 3
    2d1a:	a5 c0       	rjmp	.+330    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d1c:	00 00       	nop
    2d1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d20:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d22:	6c e0       	ldi	r22, 0x0C	; 12
    2d24:	f7 dc       	rcall	.-1554   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d26:	8f 83       	std	Y+7, r24	; 0x07
    2d28:	8f 81       	ldd	r24, Y+7	; 0x07
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	83 71       	andi	r24, 0x13	; 19
    2d30:	99 27       	eor	r25, r25
    2d32:	89 2b       	or	r24, r25
    2d34:	11 f0       	breq	.+4      	; 0x2d3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	96 c0       	rjmp	.+300    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d3a:	8a 89       	ldd	r24, Y+18	; 0x12
    2d3c:	9b 89       	ldd	r25, Y+19	; 0x13
    2d3e:	89 2b       	or	r24, r25
    2d40:	71 f1       	breq	.+92     	; 0x2d9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2d42:	8c 89       	ldd	r24, Y+20	; 0x14
    2d44:	9d 89       	ldd	r25, Y+21	; 0x15
    2d46:	89 2b       	or	r24, r25
    2d48:	51 f1       	breq	.+84     	; 0x2d9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2d4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d4e:	64 e1       	ldi	r22, 0x14	; 20
    2d50:	e1 dc       	rcall	.-1598   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d52:	8e 83       	std	Y+6, r24	; 0x06
    2d54:	8c 89       	ldd	r24, Y+20	; 0x14
    2d56:	9d 89       	ldd	r25, Y+21	; 0x15
    2d58:	fc 01       	movw	r30, r24
    2d5a:	90 81       	ld	r25, Z
    2d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5e:	98 17       	cp	r25, r24
    2d60:	10 f4       	brcc	.+4      	; 0x2d66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    2d62:	84 e0       	ldi	r24, 0x04	; 4
    2d64:	80 c0       	rjmp	.+256    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d66:	8c 89       	ldd	r24, Y+20	; 0x14
    2d68:	9d 89       	ldd	r25, Y+21	; 0x15
    2d6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	20 83       	st	Z, r18
    2d70:	2a 89       	ldd	r18, Y+18	; 0x12
    2d72:	3b 89       	ldd	r19, Y+19	; 0x13
    2d74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d78:	08 8d       	ldd	r16, Y+24	; 0x18
    2d7a:	4e 81       	ldd	r20, Y+6	; 0x06
    2d7c:	62 e1       	ldi	r22, 0x12	; 18
    2d7e:	00 dd       	rcall	.-1536   	; 0x2780 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    2d80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d82:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d84:	68 e1       	ldi	r22, 0x18	; 24
    2d86:	c6 dc       	rcall	.-1652   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d88:	87 70       	andi	r24, 0x07	; 7
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	8e 89       	ldd	r24, Y+22	; 0x16
    2d8e:	9f 89       	ldd	r25, Y+23	; 0x17
    2d90:	89 2b       	or	r24, r25
    2d92:	29 f0       	breq	.+10     	; 0x2d9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2d94:	8e 89       	ldd	r24, Y+22	; 0x16
    2d96:	9f 89       	ldd	r25, Y+23	; 0x17
    2d98:	29 81       	ldd	r18, Y+1	; 0x01
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	20 83       	st	Z, r18
    2d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	88 70       	andi	r24, 0x08	; 8
    2da6:	99 27       	eor	r25, r25
    2da8:	89 2b       	or	r24, r25
    2daa:	11 f0       	breq	.+4      	; 0x2db0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	5b c0       	rjmp	.+182    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2db0:	8a 89       	ldd	r24, Y+18	; 0x12
    2db2:	9b 89       	ldd	r25, Y+19	; 0x13
    2db4:	89 2b       	or	r24, r25
    2db6:	09 f4       	brne	.+2      	; 0x2dba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    2db8:	55 c0       	rjmp	.+170    	; 0x2e64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2dba:	8c 89       	ldd	r24, Y+20	; 0x14
    2dbc:	9d 89       	ldd	r25, Y+21	; 0x15
    2dbe:	89 2b       	or	r24, r25
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    2dc2:	50 c0       	rjmp	.+160    	; 0x2e64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2dc4:	8e a1       	ldd	r24, Y+38	; 0x26
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    2dca:	4c c0       	rjmp	.+152    	; 0x2e64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2dcc:	8c 89       	ldd	r24, Y+20	; 0x14
    2dce:	9d 89       	ldd	r25, Y+21	; 0x15
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	80 81       	ld	r24, Z
    2dd4:	81 30       	cpi	r24, 0x01	; 1
    2dd6:	29 f4       	brne	.+10     	; 0x2de2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	84 30       	cpi	r24, 0x04	; 4
    2ddc:	11 f4       	brne	.+4      	; 0x2de2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	42 c0       	rjmp	.+132    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2de2:	8c 89       	ldd	r24, Y+20	; 0x14
    2de4:	9d 89       	ldd	r25, Y+21	; 0x15
    2de6:	fc 01       	movw	r30, r24
    2de8:	80 81       	ld	r24, Z
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	18 f0       	brcs	.+6      	; 0x2df4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	88 23       	and	r24, r24
    2df2:	11 f0       	breq	.+4      	; 0x2df8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    2df4:	87 e0       	ldi	r24, 0x07	; 7
    2df6:	37 c0       	rjmp	.+110    	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2df8:	8c 89       	ldd	r24, Y+20	; 0x14
    2dfa:	9d 89       	ldd	r25, Y+21	; 0x15
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	80 81       	ld	r24, Z
    2e00:	4e ef       	ldi	r20, 0xFE	; 254
    2e02:	48 0f       	add	r20, r24
    2e04:	9e 01       	movw	r18, r28
    2e06:	27 5f       	subi	r18, 0xF7	; 247
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	6a 89       	ldd	r22, Y+18	; 0x12
    2e0c:	7b 89       	ldd	r23, Y+19	; 0x13
    2e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e12:	9d dd       	rcall	.-1222   	; 0x294e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2e14:	88 87       	std	Y+8, r24	; 0x08
    2e16:	88 85       	ldd	r24, Y+8	; 0x08
    2e18:	88 23       	and	r24, r24
    2e1a:	11 f0       	breq	.+4      	; 0x2e20 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    2e1c:	88 85       	ldd	r24, Y+8	; 0x08
    2e1e:	23 c0       	rjmp	.+70     	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e20:	8c 89       	ldd	r24, Y+20	; 0x14
    2e22:	9d 89       	ldd	r25, Y+21	; 0x15
    2e24:	fc 01       	movw	r30, r24
    2e26:	80 81       	ld	r24, Z
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	02 97       	sbiw	r24, 0x02	; 2
    2e2e:	2a 89       	ldd	r18, Y+18	; 0x12
    2e30:	3b 89       	ldd	r19, Y+19	; 0x13
    2e32:	82 0f       	add	r24, r18
    2e34:	93 1f       	adc	r25, r19
    2e36:	fc 01       	movw	r30, r24
    2e38:	90 81       	ld	r25, Z
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	98 17       	cp	r25, r24
    2e3e:	81 f4       	brne	.+32     	; 0x2e60 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    2e40:	8c 89       	ldd	r24, Y+20	; 0x14
    2e42:	9d 89       	ldd	r25, Y+21	; 0x15
    2e44:	fc 01       	movw	r30, r24
    2e46:	80 81       	ld	r24, Z
    2e48:	88 2f       	mov	r24, r24
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	2a 89       	ldd	r18, Y+18	; 0x12
    2e50:	3b 89       	ldd	r19, Y+19	; 0x13
    2e52:	82 0f       	add	r24, r18
    2e54:	93 1f       	adc	r25, r19
    2e56:	fc 01       	movw	r30, r24
    2e58:	90 81       	ld	r25, Z
    2e5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e5c:	98 17       	cp	r25, r24
    2e5e:	11 f0       	breq	.+4      	; 0x2e64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e60:	87 e0       	ldi	r24, 0x07	; 7
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	68 96       	adiw	r28, 0x18	; 24
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
    2e80:	bf 90       	pop	r11
    2e82:	af 90       	pop	r10
    2e84:	8f 90       	pop	r8
    2e86:	08 95       	ret

00002e88 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	9a 83       	std	Y+2, r25	; 0x02
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	7c 83       	std	Y+4, r23	; 0x04
    2e9a:	6b 83       	std	Y+3, r22	; 0x03
    2e9c:	5e 83       	std	Y+6, r21	; 0x06
    2e9e:	4d 83       	std	Y+5, r20	; 0x05
    2ea0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ea2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ea4:	4b 81       	ldd	r20, Y+3	; 0x03
    2ea6:	5c 81       	ldd	r21, Y+4	; 0x04
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	66 e2       	ldi	r22, 0x26	; 38
    2eae:	09 d0       	rcall	.+18     	; 0x2ec2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    2eb0:	26 96       	adiw	r28, 0x06	; 6
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	08 95       	ret

00002ec2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2ec2:	af 92       	push	r10
    2ec4:	cf 92       	push	r12
    2ec6:	ef 92       	push	r14
    2ec8:	ff 92       	push	r15
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	cf 93       	push	r28
    2ed0:	df 93       	push	r29
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	29 97       	sbiw	r28, 0x09	; 9
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	9c 83       	std	Y+4, r25	; 0x04
    2ee4:	8b 83       	std	Y+3, r24	; 0x03
    2ee6:	6d 83       	std	Y+5, r22	; 0x05
    2ee8:	5f 83       	std	Y+7, r21	; 0x07
    2eea:	4e 83       	std	Y+6, r20	; 0x06
    2eec:	39 87       	std	Y+9, r19	; 0x09
    2eee:	28 87       	std	Y+8, r18	; 0x08
    2ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef4:	89 2b       	or	r24, r25
    2ef6:	31 f0       	breq	.+12     	; 0x2f04 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    2ef8:	88 85       	ldd	r24, Y+8	; 0x08
    2efa:	99 85       	ldd	r25, Y+9	; 0x09
    2efc:	fc 01       	movw	r30, r24
    2efe:	80 81       	ld	r24, Z
    2f00:	82 30       	cpi	r24, 0x02	; 2
    2f02:	10 f4       	brcc	.+4      	; 0x2f08 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    2f04:	84 e0       	ldi	r24, 0x04	; 4
    2f06:	2a c0       	rjmp	.+84     	; 0x2f5c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	6c e1       	ldi	r22, 0x1C	; 28
    2f10:	fa dc       	rcall	.-1548   	; 0x2906 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    2f12:	87 e0       	ldi	r24, 0x07	; 7
    2f14:	8a 83       	std	Y+2, r24	; 0x02
    2f16:	fe 01       	movw	r30, r28
    2f18:	32 96       	adiw	r30, 0x02	; 2
    2f1a:	48 85       	ldd	r20, Y+8	; 0x08
    2f1c:	59 85       	ldd	r21, Y+9	; 0x09
    2f1e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f20:	3f 81       	ldd	r19, Y+7	; 0x07
    2f22:	be 01       	movw	r22, r28
    2f24:	6b 5f       	subi	r22, 0xFB	; 251
    2f26:	7f 4f       	sbci	r23, 0xFF	; 255
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2c:	a1 2c       	mov	r10, r1
    2f2e:	c1 2c       	mov	r12, r1
    2f30:	7f 01       	movw	r14, r30
    2f32:	8a 01       	movw	r16, r20
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	29 de       	rcall	.-942    	; 0x2b8a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	88 23       	and	r24, r24
    2f3e:	11 f0       	breq	.+4      	; 0x2f44 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	0c c0       	rjmp	.+24     	; 0x2f5c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2f44:	88 85       	ldd	r24, Y+8	; 0x08
    2f46:	99 85       	ldd	r25, Y+9	; 0x09
    2f48:	fc 01       	movw	r30, r24
    2f4a:	80 81       	ld	r24, Z
    2f4c:	82 30       	cpi	r24, 0x02	; 2
    2f4e:	19 f4       	brne	.+6      	; 0x2f56 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	88 23       	and	r24, r24
    2f54:	11 f0       	breq	.+4      	; 0x2f5a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	01 c0       	rjmp	.+2      	; 0x2f5c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	29 96       	adiw	r28, 0x09	; 9
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	cf 90       	pop	r12
    2f76:	af 90       	pop	r10
    2f78:	08 95       	ret

00002f7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    2f7a:	af 92       	push	r10
    2f7c:	cf 92       	push	r12
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	a1 97       	sbiw	r28, 0x21	; 33
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f9e:	78 a3       	std	Y+32, r23	; 0x20
    2fa0:	6f 8f       	std	Y+31, r22	; 0x1f
    2fa2:	49 a3       	std	Y+33, r20	; 0x21
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	8c 83       	std	Y+4, r24	; 0x04
    2fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2faa:	81 35       	cpi	r24, 0x51	; 81
    2fac:	10 f0       	brcs	.+4      	; 0x2fb2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    2fae:	86 e0       	ldi	r24, 0x06	; 6
    2fb0:	29 c2       	rjmp	.+1106   	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    2fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fb6:	40 e8       	ldi	r20, 0x80	; 128
    2fb8:	6c e1       	ldi	r22, 0x1C	; 28
    2fba:	a5 dc       	rcall	.-1718   	; 0x2906 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    2fbc:	19 82       	std	Y+1, r1	; 0x01
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	88 23       	and	r24, r24
    2fc2:	09 f0       	breq	.+2      	; 0x2fc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    2fc4:	14 c2       	rjmp	.+1064   	; 0x33ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    2fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc8:	88 2f       	mov	r24, r24
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	82 30       	cpi	r24, 0x02	; 2
    2fce:	91 05       	cpc	r25, r1
    2fd0:	b1 f0       	breq	.+44     	; 0x2ffe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    2fd2:	83 30       	cpi	r24, 0x03	; 3
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	29 f1       	breq	.+74     	; 0x3022 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	49 f5       	brne	.+82     	; 0x302e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    2fdc:	83 e9       	ldi	r24, 0x93	; 147
    2fde:	8a 8b       	std	Y+18, r24	; 0x12
    2fe0:	1f 82       	std	Y+7, r1	; 0x07
    2fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe4:	88 23       	and	r24, r24
    2fe6:	41 f0       	breq	.+16     	; 0x2ff8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    2fe8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fea:	98 a1       	ldd	r25, Y+32	; 0x20
    2fec:	fc 01       	movw	r30, r24
    2fee:	80 81       	ld	r24, Z
    2ff0:	85 30       	cpi	r24, 0x05	; 5
    2ff2:	10 f0       	brcs	.+4      	; 0x2ff8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	1a c0       	rjmp	.+52     	; 0x3032 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    2ffe:	85 e9       	ldi	r24, 0x95	; 149
    3000:	8a 8b       	std	Y+18, r24	; 0x12
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	8f 83       	std	Y+7, r24	; 0x07
    3006:	89 a1       	ldd	r24, Y+33	; 0x21
    3008:	88 23       	and	r24, r24
    300a:	41 f0       	breq	.+16     	; 0x301c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    300c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    300e:	98 a1       	ldd	r25, Y+32	; 0x20
    3010:	fc 01       	movw	r30, r24
    3012:	80 81       	ld	r24, Z
    3014:	88 30       	cpi	r24, 0x08	; 8
    3016:	10 f0       	brcs	.+4      	; 0x301c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	01 c0       	rjmp	.+2      	; 0x301e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	8b 83       	std	Y+3, r24	; 0x03
    3020:	08 c0       	rjmp	.+16     	; 0x3032 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3022:	87 e9       	ldi	r24, 0x97	; 151
    3024:	8a 8b       	std	Y+18, r24	; 0x12
    3026:	86 e0       	ldi	r24, 0x06	; 6
    3028:	8f 83       	std	Y+7, r24	; 0x07
    302a:	1b 82       	std	Y+3, r1	; 0x03
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    302e:	85 e0       	ldi	r24, 0x05	; 5
    3030:	e9 c1       	rjmp	.+978    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3032:	8f 81       	ldd	r24, Y+7	; 0x07
    3034:	88 0f       	add	r24, r24
    3036:	88 0f       	add	r24, r24
    3038:	88 0f       	add	r24, r24
    303a:	99 a1       	ldd	r25, Y+33	; 0x21
    303c:	f9 2f       	mov	r31, r25
    303e:	f8 1b       	sub	r31, r24
    3040:	8f 2f       	mov	r24, r31
    3042:	88 87       	std	Y+8, r24	; 0x08
    3044:	88 85       	ldd	r24, Y+8	; 0x08
    3046:	88 23       	and	r24, r24
    3048:	0c f4       	brge	.+2      	; 0x304c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    304a:	18 86       	std	Y+8, r1	; 0x08
    304c:	82 e0       	ldi	r24, 0x02	; 2
    304e:	8e 83       	std	Y+6, r24	; 0x06
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	88 23       	and	r24, r24
    3054:	71 f0       	breq	.+28     	; 0x3072 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    3056:	8e 81       	ldd	r24, Y+6	; 0x06
    3058:	91 e0       	ldi	r25, 0x01	; 1
    305a:	98 0f       	add	r25, r24
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9e 01       	movw	r18, r28
    3064:	2e 5e       	subi	r18, 0xEE	; 238
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	82 0f       	add	r24, r18
    306a:	93 1f       	adc	r25, r19
    306c:	28 e8       	ldi	r18, 0x88	; 136
    306e:	fc 01       	movw	r30, r24
    3070:	20 83       	st	Z, r18
    3072:	88 85       	ldd	r24, Y+8	; 0x08
    3074:	88 23       	and	r24, r24
    3076:	0c f4       	brge	.+2      	; 0x307a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3078:	89 5f       	subi	r24, 0xF9	; 249
    307a:	85 95       	asr	r24
    307c:	85 95       	asr	r24
    307e:	85 95       	asr	r24
    3080:	98 2f       	mov	r25, r24
    3082:	88 85       	ldd	r24, Y+8	; 0x08
    3084:	87 70       	andi	r24, 0x07	; 7
    3086:	88 23       	and	r24, r24
    3088:	11 f0       	breq	.+4      	; 0x308e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	01 c0       	rjmp	.+2      	; 0x3090 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	89 0f       	add	r24, r25
    3092:	8c 87       	std	Y+12, r24	; 0x0c
    3094:	8c 85       	ldd	r24, Y+12	; 0x0c
    3096:	88 23       	and	r24, r24
    3098:	99 f1       	breq	.+102    	; 0x3100 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	88 23       	and	r24, r24
    309e:	11 f0       	breq	.+4      	; 0x30a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    30a0:	83 e0       	ldi	r24, 0x03	; 3
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    30a4:	84 e0       	ldi	r24, 0x04	; 4
    30a6:	8e 87       	std	Y+14, r24	; 0x0e
    30a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    30aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    30ac:	89 17       	cp	r24, r25
    30ae:	10 f4       	brcc	.+4      	; 0x30b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    30b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    30b2:	8c 87       	std	Y+12, r24	; 0x0c
    30b4:	1d 82       	std	Y+5, r1	; 0x05
    30b6:	9d 81       	ldd	r25, Y+5	; 0x05
    30b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    30ba:	98 17       	cp	r25, r24
    30bc:	08 f5       	brcc	.+66     	; 0x3100 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    30be:	8e 81       	ldd	r24, Y+6	; 0x06
    30c0:	91 e0       	ldi	r25, 0x01	; 1
    30c2:	98 0f       	add	r25, r24
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	2f 81       	ldd	r18, Y+7	; 0x07
    30cc:	42 2f       	mov	r20, r18
    30ce:	50 e0       	ldi	r21, 0x00	; 0
    30d0:	2d 81       	ldd	r18, Y+5	; 0x05
    30d2:	22 2f       	mov	r18, r18
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	24 0f       	add	r18, r20
    30d8:	35 1f       	adc	r19, r21
    30da:	4f 8d       	ldd	r20, Y+31	; 0x1f
    30dc:	58 a1       	ldd	r21, Y+32	; 0x20
    30de:	24 0f       	add	r18, r20
    30e0:	35 1f       	adc	r19, r21
    30e2:	2f 5f       	subi	r18, 0xFF	; 255
    30e4:	3f 4f       	sbci	r19, 0xFF	; 255
    30e6:	f9 01       	movw	r30, r18
    30e8:	40 81       	ld	r20, Z
    30ea:	9e 01       	movw	r18, r28
    30ec:	2e 5e       	subi	r18, 0xEE	; 238
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	82 0f       	add	r24, r18
    30f2:	93 1f       	adc	r25, r19
    30f4:	fc 01       	movw	r30, r24
    30f6:	40 83       	st	Z, r20
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	8f 5f       	subi	r24, 0xFF	; 255
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	db cf       	rjmp	.-74     	; 0x30b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	88 23       	and	r24, r24
    3104:	19 f0       	breq	.+6      	; 0x310c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    3106:	88 85       	ldd	r24, Y+8	; 0x08
    3108:	88 5f       	subi	r24, 0xF8	; 248
    310a:	88 87       	std	Y+8, r24	; 0x08
    310c:	1a 82       	std	Y+2, r1	; 0x02
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	88 23       	and	r24, r24
    3112:	09 f0       	breq	.+2      	; 0x3116 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    3114:	f5 c0       	rjmp	.+490    	; 0x3300 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    3116:	88 85       	ldd	r24, Y+8	; 0x08
    3118:	80 32       	cpi	r24, 0x20	; 32
    311a:	3c f1       	brlt	.+78     	; 0x316a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    311c:	80 e7       	ldi	r24, 0x70	; 112
    311e:	8b 8b       	std	Y+19, r24	; 0x13
    3120:	9c 89       	ldd	r25, Y+20	; 0x14
    3122:	8d 89       	ldd	r24, Y+21	; 0x15
    3124:	98 27       	eor	r25, r24
    3126:	8e 89       	ldd	r24, Y+22	; 0x16
    3128:	98 27       	eor	r25, r24
    312a:	8f 89       	ldd	r24, Y+23	; 0x17
    312c:	89 27       	eor	r24, r25
    312e:	88 8f       	std	Y+24, r24	; 0x18
    3130:	ce 01       	movw	r24, r28
    3132:	42 96       	adiw	r24, 0x12	; 18
    3134:	9c 01       	movw	r18, r24
    3136:	29 5f       	subi	r18, 0xF9	; 249
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
    313a:	be 01       	movw	r22, r28
    313c:	6e 5e       	subi	r22, 0xEE	; 238
    313e:	7f 4f       	sbci	r23, 0xFF	; 255
    3140:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3142:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3144:	47 e0       	ldi	r20, 0x07	; 7
    3146:	03 dc       	rcall	.-2042   	; 0x294e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3148:	8f 87       	std	Y+15, r24	; 0x0f
    314a:	8f 85       	ldd	r24, Y+15	; 0x0f
    314c:	88 23       	and	r24, r24
    314e:	11 f0       	breq	.+4      	; 0x3154 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    3150:	8f 85       	ldd	r24, Y+15	; 0x0f
    3152:	58 c1       	rjmp	.+688    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3154:	1b 8e       	std	Y+27, r1	; 0x1b
    3156:	89 e0       	ldi	r24, 0x09	; 9
    3158:	89 87       	std	Y+9, r24	; 0x09
    315a:	ce 01       	movw	r24, r28
    315c:	42 96       	adiw	r24, 0x12	; 18
    315e:	06 96       	adiw	r24, 0x06	; 6
    3160:	9b 87       	std	Y+11, r25	; 0x0b
    3162:	8a 87       	std	Y+10, r24	; 0x0a
    3164:	83 e0       	ldi	r24, 0x03	; 3
    3166:	8c 8f       	std	Y+28, r24	; 0x1c
    3168:	33 c0       	rjmp	.+102    	; 0x31d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    316a:	88 85       	ldd	r24, Y+8	; 0x08
    316c:	87 78       	andi	r24, 0x87	; 135
    316e:	88 23       	and	r24, r24
    3170:	1c f4       	brge	.+6      	; 0x3178 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3172:	81 50       	subi	r24, 0x01	; 1
    3174:	88 6f       	ori	r24, 0xF8	; 248
    3176:	8f 5f       	subi	r24, 0xFF	; 255
    3178:	8b 8f       	std	Y+27, r24	; 0x1b
    317a:	88 85       	ldd	r24, Y+8	; 0x08
    317c:	88 23       	and	r24, r24
    317e:	0c f4       	brge	.+2      	; 0x3182 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    3180:	89 5f       	subi	r24, 0xF9	; 249
    3182:	85 95       	asr	r24
    3184:	85 95       	asr	r24
    3186:	85 95       	asr	r24
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	8e 5f       	subi	r24, 0xFE	; 254
    318e:	8e 83       	std	Y+6, r24	; 0x06
    3190:	8e 81       	ldd	r24, Y+6	; 0x06
    3192:	98 2f       	mov	r25, r24
    3194:	92 95       	swap	r25
    3196:	90 7f       	andi	r25, 0xF0	; 240
    3198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    319a:	89 0f       	add	r24, r25
    319c:	8b 8b       	std	Y+19, r24	; 0x13
    319e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a0:	88 23       	and	r24, r24
    31a2:	11 f0       	breq	.+4      	; 0x31a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	01 c0       	rjmp	.+2      	; 0x31aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	9e 81       	ldd	r25, Y+6	; 0x06
    31ac:	89 0f       	add	r24, r25
    31ae:	89 87       	std	Y+9, r24	; 0x09
    31b0:	8e 81       	ldd	r24, Y+6	; 0x06
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	9e 01       	movw	r18, r28
    31b8:	2e 5e       	subi	r18, 0xEE	; 238
    31ba:	3f 4f       	sbci	r19, 0xFF	; 255
    31bc:	82 0f       	add	r24, r18
    31be:	93 1f       	adc	r25, r19
    31c0:	9b 87       	std	Y+11, r25	; 0x0b
    31c2:	8a 87       	std	Y+10, r24	; 0x0a
    31c4:	99 e0       	ldi	r25, 0x09	; 9
    31c6:	8e 81       	ldd	r24, Y+6	; 0x06
    31c8:	f9 2f       	mov	r31, r25
    31ca:	f8 1b       	sub	r31, r24
    31cc:	8f 2f       	mov	r24, r31
    31ce:	8c 8f       	std	Y+28, r24	; 0x1c
    31d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d2:	88 8b       	std	Y+16, r24	; 0x10
    31d4:	88 89       	ldd	r24, Y+16	; 0x10
    31d6:	98 2f       	mov	r25, r24
    31d8:	92 95       	swap	r25
    31da:	90 7f       	andi	r25, 0xF0	; 240
    31dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31de:	29 2f       	mov	r18, r25
    31e0:	28 0f       	add	r18, r24
    31e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31e6:	42 2f       	mov	r20, r18
    31e8:	6a e1       	ldi	r22, 0x1A	; 26
    31ea:	13 da       	rcall	.-3034   	; 0x2612 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31ec:	fe 01       	movw	r30, r28
    31ee:	7b 96       	adiw	r30, 0x1b	; 27
    31f0:	ae 01       	movw	r20, r28
    31f2:	44 5e       	subi	r20, 0xE4	; 228
    31f4:	5f 4f       	sbci	r21, 0xFF	; 255
    31f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    31f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    31fa:	be 01       	movw	r22, r28
    31fc:	6e 5e       	subi	r22, 0xEE	; 238
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3204:	a1 2c       	mov	r10, r1
    3206:	c8 88       	ldd	r12, Y+16	; 0x10
    3208:	7f 01       	movw	r14, r30
    320a:	8a 01       	movw	r16, r20
    320c:	49 85       	ldd	r20, Y+9	; 0x09
    320e:	bd dc       	rcall	.-1670   	; 0x2b8a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3210:	8f 87       	std	Y+15, r24	; 0x0f
    3212:	8f 85       	ldd	r24, Y+15	; 0x0f
    3214:	82 30       	cpi	r24, 0x02	; 2
    3216:	09 f0       	breq	.+2      	; 0x321a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    3218:	65 c0       	rjmp	.+202    	; 0x32e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    321a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    321c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    321e:	6c e1       	ldi	r22, 0x1C	; 28
    3220:	79 da       	rcall	.-2830   	; 0x2714 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3222:	89 8b       	std	Y+17, r24	; 0x11
    3224:	89 89       	ldd	r24, Y+17	; 0x11
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	80 72       	andi	r24, 0x20	; 32
    322c:	99 27       	eor	r25, r25
    322e:	89 2b       	or	r24, r25
    3230:	11 f0       	breq	.+4      	; 0x3236 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	e7 c0       	rjmp	.+462    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3236:	89 89       	ldd	r24, Y+17	; 0x11
    3238:	8f 71       	andi	r24, 0x1F	; 31
    323a:	8d 87       	std	Y+13, r24	; 0x0d
    323c:	8d 85       	ldd	r24, Y+13	; 0x0d
    323e:	88 23       	and	r24, r24
    3240:	11 f4       	brne	.+4      	; 0x3246 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3242:	80 e2       	ldi	r24, 0x20	; 32
    3244:	8d 87       	std	Y+13, r24	; 0x0d
    3246:	8d 85       	ldd	r24, Y+13	; 0x0d
    3248:	28 2f       	mov	r18, r24
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	88 85       	ldd	r24, Y+8	; 0x08
    324e:	08 2e       	mov	r0, r24
    3250:	00 0c       	add	r0, r0
    3252:	99 0b       	sbc	r25, r25
    3254:	82 17       	cp	r24, r18
    3256:	93 07       	cpc	r25, r19
    3258:	14 f0       	brlt	.+4      	; 0x325e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    325a:	85 e0       	ldi	r24, 0x05	; 5
    325c:	d3 c0       	rjmp	.+422    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    325e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3260:	88 87       	std	Y+8, r24	; 0x08
    3262:	88 85       	ldd	r24, Y+8	; 0x08
    3264:	08 2e       	mov	r0, r24
    3266:	00 0c       	add	r0, r0
    3268:	99 0b       	sbc	r25, r25
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	87 70       	andi	r24, 0x07	; 7
    326e:	90 78       	andi	r25, 0x80	; 128
    3270:	99 23       	and	r25, r25
    3272:	24 f4       	brge	.+8      	; 0x327c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	88 6f       	ori	r24, 0xF8	; 248
    3278:	9f 6f       	ori	r25, 0xFF	; 255
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	8d 83       	std	Y+5, r24	; 0x05
    327e:	88 85       	ldd	r24, Y+8	; 0x08
    3280:	88 23       	and	r24, r24
    3282:	0c f4       	brge	.+2      	; 0x3286 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3284:	89 5f       	subi	r24, 0xF9	; 249
    3286:	85 95       	asr	r24
    3288:	85 95       	asr	r24
    328a:	85 95       	asr	r24
    328c:	98 2f       	mov	r25, r24
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	88 23       	and	r24, r24
    3292:	11 f0       	breq	.+4      	; 0x3298 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	01 c0       	rjmp	.+2      	; 0x329a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	89 0f       	add	r24, r25
    329c:	8f 5f       	subi	r24, 0xFF	; 255
    329e:	8e 83       	std	Y+6, r24	; 0x06
    32a0:	8e 81       	ldd	r24, Y+6	; 0x06
    32a2:	88 2f       	mov	r24, r24
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	2e 81       	ldd	r18, Y+6	; 0x06
    32a8:	22 2f       	mov	r18, r18
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	ae 01       	movw	r20, r28
    32ae:	4e 5e       	subi	r20, 0xEE	; 238
    32b0:	5f 4f       	sbci	r21, 0xFF	; 255
    32b2:	24 0f       	add	r18, r20
    32b4:	35 1f       	adc	r19, r21
    32b6:	f9 01       	movw	r30, r18
    32b8:	20 81       	ld	r18, Z
    32ba:	62 2f       	mov	r22, r18
    32bc:	2d 81       	ldd	r18, Y+5	; 0x05
    32be:	42 2f       	mov	r20, r18
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	21 e0       	ldi	r18, 0x01	; 1
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	4a 95       	dec	r20
    32ce:	e2 f7       	brpl	.-8      	; 0x32c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    32d0:	26 2b       	or	r18, r22
    32d2:	42 2f       	mov	r20, r18
    32d4:	9e 01       	movw	r18, r28
    32d6:	2e 5e       	subi	r18, 0xEE	; 238
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	82 0f       	add	r24, r18
    32dc:	93 1f       	adc	r25, r19
    32de:	fc 01       	movw	r30, r24
    32e0:	40 83       	st	Z, r20
    32e2:	15 cf       	rjmp	.-470    	; 0x310e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    32e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e6:	88 23       	and	r24, r24
    32e8:	11 f0       	breq	.+4      	; 0x32ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    32ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ec:	8b c0       	rjmp	.+278    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    32ee:	88 85       	ldd	r24, Y+8	; 0x08
    32f0:	80 32       	cpi	r24, 0x20	; 32
    32f2:	1c f0       	brlt	.+6      	; 0x32fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	8a 83       	std	Y+2, r24	; 0x02
    32f8:	0a cf       	rjmp	.-492    	; 0x310e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    32fa:	80 e2       	ldi	r24, 0x20	; 32
    32fc:	88 87       	std	Y+8, r24	; 0x08
    32fe:	07 cf       	rjmp	.-498    	; 0x310e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3300:	8c 89       	ldd	r24, Y+20	; 0x14
    3302:	88 38       	cpi	r24, 0x88	; 136
    3304:	11 f4       	brne	.+4      	; 0x330a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    3306:	83 e0       	ldi	r24, 0x03	; 3
    3308:	01 c0       	rjmp	.+2      	; 0x330c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	8e 83       	std	Y+6, r24	; 0x06
    330e:	8c 89       	ldd	r24, Y+20	; 0x14
    3310:	88 38       	cpi	r24, 0x88	; 136
    3312:	11 f4       	brne	.+4      	; 0x3318 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    3314:	83 e0       	ldi	r24, 0x03	; 3
    3316:	01 c0       	rjmp	.+2      	; 0x331a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    3318:	84 e0       	ldi	r24, 0x04	; 4
    331a:	8c 87       	std	Y+12, r24	; 0x0c
    331c:	1d 82       	std	Y+5, r1	; 0x05
    331e:	9d 81       	ldd	r25, Y+5	; 0x05
    3320:	8c 85       	ldd	r24, Y+12	; 0x0c
    3322:	98 17       	cp	r25, r24
    3324:	00 f5       	brcc	.+64     	; 0x3366 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    3326:	8f 81       	ldd	r24, Y+7	; 0x07
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	82 0f       	add	r24, r18
    3334:	93 1f       	adc	r25, r19
    3336:	2e 81       	ldd	r18, Y+6	; 0x06
    3338:	31 e0       	ldi	r19, 0x01	; 1
    333a:	32 0f       	add	r19, r18
    333c:	3e 83       	std	Y+6, r19	; 0x06
    333e:	22 2f       	mov	r18, r18
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	ae 01       	movw	r20, r28
    3344:	4e 5e       	subi	r20, 0xEE	; 238
    3346:	5f 4f       	sbci	r21, 0xFF	; 255
    3348:	24 0f       	add	r18, r20
    334a:	35 1f       	adc	r19, r21
    334c:	f9 01       	movw	r30, r18
    334e:	40 81       	ld	r20, Z
    3350:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3352:	38 a1       	ldd	r19, Y+32	; 0x20
    3354:	82 0f       	add	r24, r18
    3356:	93 1f       	adc	r25, r19
    3358:	01 96       	adiw	r24, 0x01	; 1
    335a:	fc 01       	movw	r30, r24
    335c:	40 83       	st	Z, r20
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	8f 5f       	subi	r24, 0xFF	; 255
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	dc cf       	rjmp	.-72     	; 0x331e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3366:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3368:	83 30       	cpi	r24, 0x03	; 3
    336a:	19 f4       	brne	.+6      	; 0x3372 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    336c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336e:	88 23       	and	r24, r24
    3370:	11 f0       	breq	.+4      	; 0x3376 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	47 c0       	rjmp	.+142    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3376:	ce 01       	movw	r24, r28
    3378:	42 96       	adiw	r24, 0x12	; 18
    337a:	9c 01       	movw	r18, r24
    337c:	2e 5f       	subi	r18, 0xFE	; 254
    337e:	3f 4f       	sbci	r19, 0xFF	; 255
    3380:	6a 85       	ldd	r22, Y+10	; 0x0a
    3382:	7b 85       	ldd	r23, Y+11	; 0x0b
    3384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	e1 da       	rcall	.-2622   	; 0x294e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    338c:	8f 87       	std	Y+15, r24	; 0x0f
    338e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3390:	88 23       	and	r24, r24
    3392:	11 f0       	breq	.+4      	; 0x3398 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3394:	8f 85       	ldd	r24, Y+15	; 0x0f
    3396:	36 c0       	rjmp	.+108    	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3398:	2c 89       	ldd	r18, Y+20	; 0x14
    339a:	8a 85       	ldd	r24, Y+10	; 0x0a
    339c:	9b 85       	ldd	r25, Y+11	; 0x0b
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	fc 01       	movw	r30, r24
    33a2:	80 81       	ld	r24, Z
    33a4:	28 17       	cp	r18, r24
    33a6:	41 f4       	brne	.+16     	; 0x33b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    33a8:	2d 89       	ldd	r18, Y+21	; 0x15
    33aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ae:	02 96       	adiw	r24, 0x02	; 2
    33b0:	fc 01       	movw	r30, r24
    33b2:	80 81       	ld	r24, Z
    33b4:	28 17       	cp	r18, r24
    33b6:	11 f0       	breq	.+4      	; 0x33bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    33b8:	87 e0       	ldi	r24, 0x07	; 7
    33ba:	24 c0       	rjmp	.+72     	; 0x3404 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33be:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c0:	fc 01       	movw	r30, r24
    33c2:	80 81       	ld	r24, Z
    33c4:	88 2f       	mov	r24, r24
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	84 70       	andi	r24, 0x04	; 4
    33ca:	99 27       	eor	r25, r25
    33cc:	89 2b       	or	r24, r25
    33ce:	21 f0       	breq	.+8      	; 0x33d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    33d0:	8c 81       	ldd	r24, Y+4	; 0x04
    33d2:	8f 5f       	subi	r24, 0xFF	; 255
    33d4:	8c 83       	std	Y+4, r24	; 0x04
    33d6:	f3 cd       	rjmp	.-1050   	; 0x2fbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	89 83       	std	Y+1, r24	; 0x01
    33dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33de:	9b 85       	ldd	r25, Y+11	; 0x0b
    33e0:	fc 01       	movw	r30, r24
    33e2:	20 81       	ld	r18, Z
    33e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e6:	98 a1       	ldd	r25, Y+32	; 0x20
    33e8:	fc 01       	movw	r30, r24
    33ea:	23 87       	std	Z+11, r18	; 0x0b
    33ec:	e8 cd       	rjmp	.-1072   	; 0x2fbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	89 2f       	mov	r24, r25
    33f2:	88 0f       	add	r24, r24
    33f4:	89 0f       	add	r24, r25
    33f6:	21 e0       	ldi	r18, 0x01	; 1
    33f8:	28 0f       	add	r18, r24
    33fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33fc:	98 a1       	ldd	r25, Y+32	; 0x20
    33fe:	fc 01       	movw	r30, r24
    3400:	20 83       	st	Z, r18
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	a1 96       	adiw	r28, 0x21	; 33
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	cf 90       	pop	r12
    341e:	af 90       	pop	r10
    3420:	08 95       	ret

00003422 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	00 d0       	rcall	.+0      	; 0x3428 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    3428:	00 d0       	rcall	.+0      	; 0x342a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3432:	82 e0       	ldi	r24, 0x02	; 2
    3434:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    3436:	ae 01       	movw	r20, r28
    3438:	4c 5f       	subi	r20, 0xFC	; 252
    343a:	5f 4f       	sbci	r21, 0xFF	; 255
    343c:	9e 01       	movw	r18, r28
    343e:	2e 5f       	subi	r18, 0xFE	; 254
    3440:	3f 4f       	sbci	r19, 0xFF	; 255
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	b9 01       	movw	r22, r18
    3448:	1f dd       	rcall	.-1474   	; 0x2e88 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    344a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	88 23       	and	r24, r24
    3450:	19 f0       	breq	.+6      	; 0x3458 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	82 30       	cpi	r24, 0x02	; 2
    3456:	11 f4       	brne	.+4      	; 0x345c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	01 c0       	rjmp	.+2      	; 0x345e <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    345c:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    345e:	26 96       	adiw	r28, 0x06	; 6
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	08 95       	ret

00003470 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	00 d0       	rcall	.+0      	; 0x3476 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	9b 83       	std	Y+3, r25	; 0x03
    347c:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    347e:	2a 81       	ldd	r18, Y+2	; 0x02
    3480:	3b 81       	ldd	r19, Y+3	; 0x03
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	9b 81       	ldd	r25, Y+3	; 0x03
    3486:	40 e0       	ldi	r20, 0x00	; 0
    3488:	b9 01       	movw	r22, r18
    348a:	77 dd       	rcall	.-1298   	; 0x2f7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    348c:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	99 81       	ldd	r25, Y+1	; 0x01
    3492:	99 23       	and	r25, r25
    3494:	09 f0       	breq	.+2      	; 0x3498 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3496:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	08 95       	ret

000034a4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    34aa:	1f 92       	push	r1
    34ac:	1f 92       	push	r1
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	7b 83       	std	Y+3, r23	; 0x03
    34b6:	6a 83       	std	Y+2, r22	; 0x02
    34b8:	5d 83       	std	Y+5, r21	; 0x05
    34ba:	4c 83       	std	Y+4, r20	; 0x04
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	83 52       	subi	r24, 0x23	; 35
    34c4:	9c 4f       	sbci	r25, 0xFC	; 252
    34c6:	fc 01       	movw	r30, r24
    34c8:	80 81       	ld	r24, Z
    34ca:	88 1f       	adc	r24, r24
    34cc:	88 27       	eor	r24, r24
    34ce:	88 1f       	adc	r24, r24
    34d0:	88 23       	and	r24, r24
    34d2:	31 f0       	breq	.+12     	; 0x34e0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	fc 01       	movw	r30, r24
    34da:	11 82       	std	Z+1, r1	; 0x01
    34dc:	10 82       	st	Z, r1
    34de:	72 c0       	rjmp	.+228    	; 0x35c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	c9 01       	movw	r24, r18
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	82 0f       	add	r24, r18
    34ee:	93 1f       	adc	r25, r19
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	9c 01       	movw	r18, r24
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	88 2f       	mov	r24, r24
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	83 52       	subi	r24, 0x23	; 35
    3502:	9c 4f       	sbci	r25, 0xFC	; 252
    3504:	fc 01       	movw	r30, r24
    3506:	80 81       	ld	r24, Z
    3508:	08 2e       	mov	r0, r24
    350a:	00 0c       	add	r0, r0
    350c:	99 0b       	sbc	r25, r25
    350e:	28 0f       	add	r18, r24
    3510:	39 1f       	adc	r19, r25
    3512:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <ServoCount>
    3516:	88 2f       	mov	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	28 17       	cp	r18, r24
    351c:	39 07       	cpc	r19, r25
    351e:	4c f5       	brge	.+82     	; 0x3572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	c9 01       	movw	r24, r18
    3528:	88 0f       	add	r24, r24
    352a:	99 1f       	adc	r25, r25
    352c:	82 0f       	add	r24, r18
    352e:	93 1f       	adc	r25, r19
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	9c 01       	movw	r18, r24
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	83 52       	subi	r24, 0x23	; 35
    3542:	9c 4f       	sbci	r25, 0xFC	; 252
    3544:	fc 01       	movw	r30, r24
    3546:	80 81       	ld	r24, Z
    3548:	08 2e       	mov	r0, r24
    354a:	00 0c       	add	r0, r0
    354c:	99 0b       	sbc	r25, r25
    354e:	28 0f       	add	r18, r24
    3550:	39 1f       	adc	r19, r25
    3552:	c9 01       	movw	r24, r18
    3554:	88 0f       	add	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	82 0f       	add	r24, r18
    355a:	93 1f       	adc	r25, r19
    355c:	83 5b       	subi	r24, 0xB3	; 179
    355e:	9c 4f       	sbci	r25, 0xFC	; 252
    3560:	fc 01       	movw	r30, r24
    3562:	80 81       	ld	r24, Z
    3564:	86 fb       	bst	r24, 6
    3566:	88 27       	eor	r24, r24
    3568:	80 f9       	bld	r24, 0
    356a:	81 30       	cpi	r24, 0x01	; 1
    356c:	11 f4       	brne	.+4      	; 0x3572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	88 23       	and	r24, r24
    3576:	31 f1       	breq	.+76     	; 0x35c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	28 2f       	mov	r18, r24
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	c9 01       	movw	r24, r18
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	82 0f       	add	r24, r18
    3586:	93 1f       	adc	r25, r19
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	9c 01       	movw	r18, r24
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	88 2f       	mov	r24, r24
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	83 52       	subi	r24, 0x23	; 35
    359a:	9c 4f       	sbci	r25, 0xFC	; 252
    359c:	fc 01       	movw	r30, r24
    359e:	80 81       	ld	r24, Z
    35a0:	08 2e       	mov	r0, r24
    35a2:	00 0c       	add	r0, r0
    35a4:	99 0b       	sbc	r25, r25
    35a6:	28 0f       	add	r18, r24
    35a8:	39 1f       	adc	r19, r25
    35aa:	c9 01       	movw	r24, r18
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	82 0f       	add	r24, r18
    35b2:	93 1f       	adc	r25, r19
    35b4:	83 5b       	subi	r24, 0xB3	; 179
    35b6:	9c 4f       	sbci	r25, 0xFC	; 252
    35b8:	fc 01       	movw	r30, r24
    35ba:	80 81       	ld	r24, Z
    35bc:	8f 73       	andi	r24, 0x3F	; 63
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	88 2f       	mov	r24, r24
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	9c 01       	movw	r18, r24
    35cc:	23 52       	subi	r18, 0x23	; 35
    35ce:	3c 4f       	sbci	r19, 0xFC	; 252
    35d0:	f9 01       	movw	r30, r18
    35d2:	20 81       	ld	r18, Z
    35d4:	2f 5f       	subi	r18, 0xFF	; 255
    35d6:	83 52       	subi	r24, 0x23	; 35
    35d8:	9c 4f       	sbci	r25, 0xFC	; 252
    35da:	fc 01       	movw	r30, r24
    35dc:	20 83       	st	Z, r18
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	c9 01       	movw	r24, r18
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	82 0f       	add	r24, r18
    35ec:	93 1f       	adc	r25, r19
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	9c 01       	movw	r18, r24
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	88 2f       	mov	r24, r24
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	83 52       	subi	r24, 0x23	; 35
    3600:	9c 4f       	sbci	r25, 0xFC	; 252
    3602:	fc 01       	movw	r30, r24
    3604:	80 81       	ld	r24, Z
    3606:	08 2e       	mov	r0, r24
    3608:	00 0c       	add	r0, r0
    360a:	99 0b       	sbc	r25, r25
    360c:	28 0f       	add	r18, r24
    360e:	39 1f       	adc	r19, r25
    3610:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <ServoCount>
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	28 17       	cp	r18, r24
    361a:	39 07       	cpc	r19, r25
    361c:	5c f4       	brge	.+22     	; 0x3634 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	88 2f       	mov	r24, r24
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	83 52       	subi	r24, 0x23	; 35
    3626:	9c 4f       	sbci	r25, 0xFC	; 252
    3628:	fc 01       	movw	r30, r24
    362a:	80 81       	ld	r24, Z
    362c:	8c 30       	cpi	r24, 0x0C	; 12
    362e:	14 f4       	brge	.+4      	; 0x3634 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	01 c0       	rjmp	.+2      	; 0x3636 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	88 23       	and	r24, r24
    3638:	09 f4       	brne	.+2      	; 0x363c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    363a:	7f c0       	rjmp	.+254    	; 0x373a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	9b 81       	ldd	r25, Y+3	; 0x03
    3640:	fc 01       	movw	r30, r24
    3642:	40 81       	ld	r20, Z
    3644:	51 81       	ldd	r21, Z+1	; 0x01
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	c9 01       	movw	r24, r18
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	82 0f       	add	r24, r18
    3654:	93 1f       	adc	r25, r19
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	9c 01       	movw	r18, r24
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	88 2f       	mov	r24, r24
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	83 52       	subi	r24, 0x23	; 35
    3668:	9c 4f       	sbci	r25, 0xFC	; 252
    366a:	fc 01       	movw	r30, r24
    366c:	80 81       	ld	r24, Z
    366e:	08 2e       	mov	r0, r24
    3670:	00 0c       	add	r0, r0
    3672:	99 0b       	sbc	r25, r25
    3674:	28 0f       	add	r18, r24
    3676:	39 1f       	adc	r19, r25
    3678:	c9 01       	movw	r24, r18
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	82 0f       	add	r24, r18
    3680:	93 1f       	adc	r25, r19
    3682:	82 5b       	subi	r24, 0xB2	; 178
    3684:	9c 4f       	sbci	r25, 0xFC	; 252
    3686:	fc 01       	movw	r30, r24
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	9a 01       	movw	r18, r20
    368e:	28 0f       	add	r18, r24
    3690:	39 1f       	adc	r19, r25
    3692:	8c 81       	ldd	r24, Y+4	; 0x04
    3694:	9d 81       	ldd	r25, Y+5	; 0x05
    3696:	fc 01       	movw	r30, r24
    3698:	31 83       	std	Z+1, r19	; 0x01
    369a:	20 83       	st	Z, r18
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	c9 01       	movw	r24, r18
    36a4:	88 0f       	add	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	82 0f       	add	r24, r18
    36aa:	93 1f       	adc	r25, r19
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	9c 01       	movw	r18, r24
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	88 2f       	mov	r24, r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	83 52       	subi	r24, 0x23	; 35
    36be:	9c 4f       	sbci	r25, 0xFC	; 252
    36c0:	fc 01       	movw	r30, r24
    36c2:	80 81       	ld	r24, Z
    36c4:	08 2e       	mov	r0, r24
    36c6:	00 0c       	add	r0, r0
    36c8:	99 0b       	sbc	r25, r25
    36ca:	28 0f       	add	r18, r24
    36cc:	39 1f       	adc	r19, r25
    36ce:	c9 01       	movw	r24, r18
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	82 0f       	add	r24, r18
    36d6:	93 1f       	adc	r25, r19
    36d8:	83 5b       	subi	r24, 0xB3	; 179
    36da:	9c 4f       	sbci	r25, 0xFC	; 252
    36dc:	fc 01       	movw	r30, r24
    36de:	80 81       	ld	r24, Z
    36e0:	86 fb       	bst	r24, 6
    36e2:	88 27       	eor	r24, r24
    36e4:	80 f9       	bld	r24, 0
    36e6:	88 23       	and	r24, r24
    36e8:	09 f4       	brne	.+2      	; 0x36ec <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    36ea:	51 c0       	rjmp	.+162    	; 0x378e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	c9 01       	movw	r24, r18
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	82 0f       	add	r24, r18
    36fa:	93 1f       	adc	r25, r19
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	88 0f       	add	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	9c 01       	movw	r18, r24
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	83 52       	subi	r24, 0x23	; 35
    370e:	9c 4f       	sbci	r25, 0xFC	; 252
    3710:	fc 01       	movw	r30, r24
    3712:	80 81       	ld	r24, Z
    3714:	08 2e       	mov	r0, r24
    3716:	00 0c       	add	r0, r0
    3718:	99 0b       	sbc	r25, r25
    371a:	28 0f       	add	r18, r24
    371c:	39 1f       	adc	r19, r25
    371e:	c9 01       	movw	r24, r18
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	82 0f       	add	r24, r18
    3726:	93 1f       	adc	r25, r19
    3728:	83 5b       	subi	r24, 0xB3	; 179
    372a:	9c 4f       	sbci	r25, 0xFC	; 252
    372c:	fc 01       	movw	r30, r24
    372e:	80 81       	ld	r24, Z
    3730:	8f 73       	andi	r24, 0x3F	; 63
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    3738:	2a c0       	rjmp	.+84     	; 0x378e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	fc 01       	movw	r30, r24
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	04 96       	adiw	r24, 0x04	; 4
    3746:	21 e0       	ldi	r18, 0x01	; 1
    3748:	80 34       	cpi	r24, 0x40	; 64
    374a:	9c 49       	sbci	r25, 0x9C	; 156
    374c:	08 f0       	brcs	.+2      	; 0x3750 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	22 23       	and	r18, r18
    3752:	41 f0       	breq	.+16     	; 0x3764 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3754:	8c 81       	ldd	r24, Y+4	; 0x04
    3756:	9d 81       	ldd	r25, Y+5	; 0x05
    3758:	20 e4       	ldi	r18, 0x40	; 64
    375a:	3c e9       	ldi	r19, 0x9C	; 156
    375c:	fc 01       	movw	r30, r24
    375e:	31 83       	std	Z+1, r19	; 0x01
    3760:	20 83       	st	Z, r18
    3762:	0d c0       	rjmp	.+26     	; 0x377e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	9b 81       	ldd	r25, Y+3	; 0x03
    3768:	fc 01       	movw	r30, r24
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	9c 01       	movw	r18, r24
    3770:	2c 5f       	subi	r18, 0xFC	; 252
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
    3774:	8c 81       	ldd	r24, Y+4	; 0x04
    3776:	9d 81       	ldd	r25, Y+5	; 0x05
    3778:	fc 01       	movw	r30, r24
    377a:	31 83       	std	Z+1, r19	; 0x01
    377c:	20 83       	st	Z, r18
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	88 2f       	mov	r24, r24
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	83 52       	subi	r24, 0x23	; 35
    3786:	9c 4f       	sbci	r25, 0xFC	; 252
    3788:	2f ef       	ldi	r18, 0xFF	; 255
    378a:	fc 01       	movw	r30, r24
    378c:	20 83       	st	Z, r18
    378e:	00 00       	nop
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	08 95       	ret

000037a0 <__vector_17>:
    37a0:	1f 92       	push	r1
    37a2:	0f 92       	push	r0
    37a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    37a8:	0f 92       	push	r0
    37aa:	11 24       	eor	r1, r1
    37ac:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    37b0:	0f 92       	push	r0
    37b2:	2f 93       	push	r18
    37b4:	3f 93       	push	r19
    37b6:	4f 93       	push	r20
    37b8:	5f 93       	push	r21
    37ba:	6f 93       	push	r22
    37bc:	7f 93       	push	r23
    37be:	8f 93       	push	r24
    37c0:	9f 93       	push	r25
    37c2:	af 93       	push	r26
    37c4:	bf 93       	push	r27
    37c6:	ef 93       	push	r30
    37c8:	ff 93       	push	r31
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	48 e8       	ldi	r20, 0x88	; 136
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	64 e8       	ldi	r22, 0x84	; 132
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	63 de       	rcall	.-826    	; 0x34a4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    37de:	00 00       	nop
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	ff 91       	pop	r31
    37e6:	ef 91       	pop	r30
    37e8:	bf 91       	pop	r27
    37ea:	af 91       	pop	r26
    37ec:	9f 91       	pop	r25
    37ee:	8f 91       	pop	r24
    37f0:	7f 91       	pop	r23
    37f2:	6f 91       	pop	r22
    37f4:	5f 91       	pop	r21
    37f6:	4f 91       	pop	r20
    37f8:	3f 91       	pop	r19
    37fa:	2f 91       	pop	r18
    37fc:	0f 90       	pop	r0
    37fe:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3802:	0f 90       	pop	r0
    3804:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3808:	0f 90       	pop	r0
    380a:	1f 90       	pop	r1
    380c:	18 95       	reti

0000380e <__vector_32>:
    380e:	1f 92       	push	r1
    3810:	0f 92       	push	r0
    3812:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3816:	0f 92       	push	r0
    3818:	11 24       	eor	r1, r1
    381a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    381e:	0f 92       	push	r0
    3820:	2f 93       	push	r18
    3822:	3f 93       	push	r19
    3824:	4f 93       	push	r20
    3826:	5f 93       	push	r21
    3828:	6f 93       	push	r22
    382a:	7f 93       	push	r23
    382c:	8f 93       	push	r24
    382e:	9f 93       	push	r25
    3830:	af 93       	push	r26
    3832:	bf 93       	push	r27
    3834:	ef 93       	push	r30
    3836:	ff 93       	push	r31
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	48 e9       	ldi	r20, 0x98	; 152
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	64 e9       	ldi	r22, 0x94	; 148
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	2c de       	rcall	.-936    	; 0x34a4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    384c:	00 00       	nop
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	ff 91       	pop	r31
    3854:	ef 91       	pop	r30
    3856:	bf 91       	pop	r27
    3858:	af 91       	pop	r26
    385a:	9f 91       	pop	r25
    385c:	8f 91       	pop	r24
    385e:	7f 91       	pop	r23
    3860:	6f 91       	pop	r22
    3862:	5f 91       	pop	r21
    3864:	4f 91       	pop	r20
    3866:	3f 91       	pop	r19
    3868:	2f 91       	pop	r18
    386a:	0f 90       	pop	r0
    386c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3870:	0f 90       	pop	r0
    3872:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3876:	0f 90       	pop	r0
    3878:	1f 90       	pop	r1
    387a:	18 95       	reti

0000387c <__vector_42>:
    387c:	1f 92       	push	r1
    387e:	0f 92       	push	r0
    3880:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3884:	0f 92       	push	r0
    3886:	11 24       	eor	r1, r1
    3888:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    388c:	0f 92       	push	r0
    388e:	2f 93       	push	r18
    3890:	3f 93       	push	r19
    3892:	4f 93       	push	r20
    3894:	5f 93       	push	r21
    3896:	6f 93       	push	r22
    3898:	7f 93       	push	r23
    389a:	8f 93       	push	r24
    389c:	9f 93       	push	r25
    389e:	af 93       	push	r26
    38a0:	bf 93       	push	r27
    38a2:	ef 93       	push	r30
    38a4:	ff 93       	push	r31
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	48 ea       	ldi	r20, 0xA8	; 168
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	64 ea       	ldi	r22, 0xA4	; 164
    38b4:	70 e0       	ldi	r23, 0x00	; 0
    38b6:	83 e0       	ldi	r24, 0x03	; 3
    38b8:	f5 dd       	rcall	.-1046   	; 0x34a4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    38ba:	00 00       	nop
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	ff 91       	pop	r31
    38c2:	ef 91       	pop	r30
    38c4:	bf 91       	pop	r27
    38c6:	af 91       	pop	r26
    38c8:	9f 91       	pop	r25
    38ca:	8f 91       	pop	r24
    38cc:	7f 91       	pop	r23
    38ce:	6f 91       	pop	r22
    38d0:	5f 91       	pop	r21
    38d2:	4f 91       	pop	r20
    38d4:	3f 91       	pop	r19
    38d6:	2f 91       	pop	r18
    38d8:	0f 90       	pop	r0
    38da:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38de:	0f 90       	pop	r0
    38e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38e4:	0f 90       	pop	r0
    38e6:	1f 90       	pop	r1
    38e8:	18 95       	reti

000038ea <__vector_47>:
    38ea:	1f 92       	push	r1
    38ec:	0f 92       	push	r0
    38ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38f2:	0f 92       	push	r0
    38f4:	11 24       	eor	r1, r1
    38f6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38fa:	0f 92       	push	r0
    38fc:	2f 93       	push	r18
    38fe:	3f 93       	push	r19
    3900:	4f 93       	push	r20
    3902:	5f 93       	push	r21
    3904:	6f 93       	push	r22
    3906:	7f 93       	push	r23
    3908:	8f 93       	push	r24
    390a:	9f 93       	push	r25
    390c:	af 93       	push	r26
    390e:	bf 93       	push	r27
    3910:	ef 93       	push	r30
    3912:	ff 93       	push	r31
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	48 e2       	ldi	r20, 0x28	; 40
    391e:	51 e0       	ldi	r21, 0x01	; 1
    3920:	64 e2       	ldi	r22, 0x24	; 36
    3922:	71 e0       	ldi	r23, 0x01	; 1
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	be dd       	rcall	.-1156   	; 0x34a4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3928:	00 00       	nop
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	ff 91       	pop	r31
    3930:	ef 91       	pop	r30
    3932:	bf 91       	pop	r27
    3934:	af 91       	pop	r26
    3936:	9f 91       	pop	r25
    3938:	8f 91       	pop	r24
    393a:	7f 91       	pop	r23
    393c:	6f 91       	pop	r22
    393e:	5f 91       	pop	r21
    3940:	4f 91       	pop	r20
    3942:	3f 91       	pop	r19
    3944:	2f 91       	pop	r18
    3946:	0f 90       	pop	r0
    3948:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    394c:	0f 90       	pop	r0
    394e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3952:	0f 90       	pop	r0
    3954:	1f 90       	pop	r1
    3956:	18 95       	reti

00003958 <_ZL7initISR18timer16_Sequence_t>:
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	1f 92       	push	r1
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	81 30       	cpi	r24, 0x01	; 1
    3968:	01 f5       	brne	.+64     	; 0x39aa <_ZL7initISR18timer16_Sequence_t+0x52>
    396a:	80 e8       	ldi	r24, 0x80	; 128
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	fc 01       	movw	r30, r24
    3970:	10 82       	st	Z, r1
    3972:	81 e8       	ldi	r24, 0x81	; 129
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	22 e0       	ldi	r18, 0x02	; 2
    3978:	fc 01       	movw	r30, r24
    397a:	20 83       	st	Z, r18
    397c:	84 e8       	ldi	r24, 0x84	; 132
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	fc 01       	movw	r30, r24
    3982:	11 82       	std	Z+1, r1	; 0x01
    3984:	10 82       	st	Z, r1
    3986:	86 e3       	ldi	r24, 0x36	; 54
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	26 e3       	ldi	r18, 0x36	; 54
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	f9 01       	movw	r30, r18
    3990:	20 81       	ld	r18, Z
    3992:	22 60       	ori	r18, 0x02	; 2
    3994:	fc 01       	movw	r30, r24
    3996:	20 83       	st	Z, r18
    3998:	8f e6       	ldi	r24, 0x6F	; 111
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	2f e6       	ldi	r18, 0x6F	; 111
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	f9 01       	movw	r30, r18
    39a2:	20 81       	ld	r18, Z
    39a4:	22 60       	ori	r18, 0x02	; 2
    39a6:	fc 01       	movw	r30, r24
    39a8:	20 83       	st	Z, r18
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	82 30       	cpi	r24, 0x02	; 2
    39ae:	c1 f4       	brne	.+48     	; 0x39e0 <_ZL7initISR18timer16_Sequence_t+0x88>
    39b0:	80 e9       	ldi	r24, 0x90	; 144
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	fc 01       	movw	r30, r24
    39b6:	10 82       	st	Z, r1
    39b8:	81 e9       	ldi	r24, 0x91	; 145
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	22 e0       	ldi	r18, 0x02	; 2
    39be:	fc 01       	movw	r30, r24
    39c0:	20 83       	st	Z, r18
    39c2:	84 e9       	ldi	r24, 0x94	; 148
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	fc 01       	movw	r30, r24
    39c8:	11 82       	std	Z+1, r1	; 0x01
    39ca:	10 82       	st	Z, r1
    39cc:	88 e3       	ldi	r24, 0x38	; 56
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	22 e0       	ldi	r18, 0x02	; 2
    39d2:	fc 01       	movw	r30, r24
    39d4:	20 83       	st	Z, r18
    39d6:	81 e7       	ldi	r24, 0x71	; 113
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	22 e0       	ldi	r18, 0x02	; 2
    39dc:	fc 01       	movw	r30, r24
    39de:	20 83       	st	Z, r18
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	83 30       	cpi	r24, 0x03	; 3
    39e4:	c1 f4       	brne	.+48     	; 0x3a16 <_ZL7initISR18timer16_Sequence_t+0xbe>
    39e6:	80 ea       	ldi	r24, 0xA0	; 160
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	fc 01       	movw	r30, r24
    39ec:	10 82       	st	Z, r1
    39ee:	81 ea       	ldi	r24, 0xA1	; 161
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	22 e0       	ldi	r18, 0x02	; 2
    39f4:	fc 01       	movw	r30, r24
    39f6:	20 83       	st	Z, r18
    39f8:	84 ea       	ldi	r24, 0xA4	; 164
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	fc 01       	movw	r30, r24
    39fe:	11 82       	std	Z+1, r1	; 0x01
    3a00:	10 82       	st	Z, r1
    3a02:	89 e3       	ldi	r24, 0x39	; 57
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	22 e0       	ldi	r18, 0x02	; 2
    3a08:	fc 01       	movw	r30, r24
    3a0a:	20 83       	st	Z, r18
    3a0c:	82 e7       	ldi	r24, 0x72	; 114
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	22 e0       	ldi	r18, 0x02	; 2
    3a12:	fc 01       	movw	r30, r24
    3a14:	20 83       	st	Z, r18
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	88 23       	and	r24, r24
    3a1a:	c1 f4       	brne	.+48     	; 0x3a4c <_ZL7initISR18timer16_Sequence_t+0xf4>
    3a1c:	80 e2       	ldi	r24, 0x20	; 32
    3a1e:	91 e0       	ldi	r25, 0x01	; 1
    3a20:	fc 01       	movw	r30, r24
    3a22:	10 82       	st	Z, r1
    3a24:	81 e2       	ldi	r24, 0x21	; 33
    3a26:	91 e0       	ldi	r25, 0x01	; 1
    3a28:	22 e0       	ldi	r18, 0x02	; 2
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	20 83       	st	Z, r18
    3a2e:	84 e2       	ldi	r24, 0x24	; 36
    3a30:	91 e0       	ldi	r25, 0x01	; 1
    3a32:	fc 01       	movw	r30, r24
    3a34:	11 82       	std	Z+1, r1	; 0x01
    3a36:	10 82       	st	Z, r1
    3a38:	8a e3       	ldi	r24, 0x3A	; 58
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	22 e0       	ldi	r18, 0x02	; 2
    3a3e:	fc 01       	movw	r30, r24
    3a40:	20 83       	st	Z, r18
    3a42:	83 e7       	ldi	r24, 0x73	; 115
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	22 e0       	ldi	r18, 0x02	; 2
    3a48:	fc 01       	movw	r30, r24
    3a4a:	20 83       	st	Z, r18
    3a4c:	00 00       	nop
    3a4e:	0f 90       	pop	r0
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	08 95       	ret

00003a56 <_ZL13isTimerActive18timer16_Sequence_t>:
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	1f 92       	push	r1
    3a5c:	1f 92       	push	r1
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	8a 83       	std	Y+2, r24	; 0x02
    3a64:	19 82       	std	Y+1, r1	; 0x01
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	8c 30       	cpi	r24, 0x0C	; 12
    3a6a:	30 f5       	brcc	.+76     	; 0x3ab8 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	28 2f       	mov	r18, r24
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	c9 01       	movw	r24, r18
    3a74:	88 0f       	add	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	82 0f       	add	r24, r18
    3a7a:	93 1f       	adc	r25, r19
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	9c 01       	movw	r18, r24
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	88 2f       	mov	r24, r24
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	28 0f       	add	r18, r24
    3a8e:	39 1f       	adc	r19, r25
    3a90:	c9 01       	movw	r24, r18
    3a92:	88 0f       	add	r24, r24
    3a94:	99 1f       	adc	r25, r25
    3a96:	82 0f       	add	r24, r18
    3a98:	93 1f       	adc	r25, r19
    3a9a:	83 5b       	subi	r24, 0xB3	; 179
    3a9c:	9c 4f       	sbci	r25, 0xFC	; 252
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	80 81       	ld	r24, Z
    3aa2:	86 fb       	bst	r24, 6
    3aa4:	88 27       	eor	r24, r24
    3aa6:	80 f9       	bld	r24, 0
    3aa8:	81 30       	cpi	r24, 0x01	; 1
    3aaa:	11 f4       	brne	.+4      	; 0x3ab0 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	05 c0       	rjmp	.+10     	; 0x3aba <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	8f 5f       	subi	r24, 0xFF	; 255
    3ab4:	89 83       	std	Y+1, r24	; 0x01
    3ab6:	d7 cf       	rjmp	.-82     	; 0x3a66 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	08 95       	ret

00003ac4 <_ZN5ServoC1Ev>:
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	1f 92       	push	r1
    3aca:	1f 92       	push	r1
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	89 83       	std	Y+1, r24	; 0x01
    3ad4:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <ServoCount>
    3ad8:	80 33       	cpi	r24, 0x30	; 48
    3ada:	e8 f4       	brcc	.+58     	; 0x3b16 <_ZN5ServoC1Ev+0x52>
    3adc:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <ServoCount>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	82 0f       	add	r24, r18
    3ae4:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <ServoCount>
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	9a 81       	ldd	r25, Y+2	; 0x02
    3aec:	fc 01       	movw	r30, r24
    3aee:	20 83       	st	Z, r18
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	9a 81       	ldd	r25, Y+2	; 0x02
    3af4:	fc 01       	movw	r30, r24
    3af6:	80 81       	ld	r24, Z
    3af8:	28 2f       	mov	r18, r24
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	c9 01       	movw	r24, r18
    3afe:	88 0f       	add	r24, r24
    3b00:	99 1f       	adc	r25, r25
    3b02:	82 0f       	add	r24, r18
    3b04:	93 1f       	adc	r25, r19
    3b06:	82 5b       	subi	r24, 0xB2	; 178
    3b08:	9c 4f       	sbci	r25, 0xFC	; 252
    3b0a:	28 eb       	ldi	r18, 0xB8	; 184
    3b0c:	3b e0       	ldi	r19, 0x0B	; 11
    3b0e:	fc 01       	movw	r30, r24
    3b10:	31 83       	std	Z+1, r19	; 0x01
    3b12:	20 83       	st	Z, r18
    3b14:	05 c0       	rjmp	.+10     	; 0x3b20 <_ZN5ServoC1Ev+0x5c>
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	2f ef       	ldi	r18, 0xFF	; 255
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	20 83       	st	Z, r18
    3b20:	00 00       	nop
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret

00003b2c <_ZN5Servo6attachEi>:
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <_ZN5Servo6attachEi+0x6>
    3b32:	1f 92       	push	r1
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	9a 83       	std	Y+2, r25	; 0x02
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    3b3c:	7c 83       	std	Y+4, r23	; 0x04
    3b3e:	6b 83       	std	Y+3, r22	; 0x03
    3b40:	6b 81       	ldd	r22, Y+3	; 0x03
    3b42:	7c 81       	ldd	r23, Y+4	; 0x04
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	9a 81       	ldd	r25, Y+2	; 0x02
    3b48:	20 e6       	ldi	r18, 0x60	; 96
    3b4a:	39 e0       	ldi	r19, 0x09	; 9
    3b4c:	40 e2       	ldi	r20, 0x20	; 32
    3b4e:	52 e0       	ldi	r21, 0x02	; 2
    3b50:	07 d0       	rcall	.+14     	; 0x3b60 <_ZN5Servo6attachEiii>
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	08 95       	ret

00003b60 <_ZN5Servo6attachEiii>:
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	29 97       	sbiw	r28, 0x09	; 9
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	9b 83       	std	Y+3, r25	; 0x03
    3b76:	8a 83       	std	Y+2, r24	; 0x02
    3b78:	7d 83       	std	Y+5, r23	; 0x05
    3b7a:	6c 83       	std	Y+4, r22	; 0x04
    3b7c:	5f 83       	std	Y+7, r21	; 0x07
    3b7e:	4e 83       	std	Y+6, r20	; 0x06
    3b80:	39 87       	std	Y+9, r19	; 0x09
    3b82:	28 87       	std	Y+8, r18	; 0x08
    3b84:	8a 81       	ldd	r24, Y+2	; 0x02
    3b86:	9b 81       	ldd	r25, Y+3	; 0x03
    3b88:	fc 01       	movw	r30, r24
    3b8a:	80 81       	ld	r24, Z
    3b8c:	80 33       	cpi	r24, 0x30	; 48
    3b8e:	08 f0       	brcs	.+2      	; 0x3b92 <_ZN5Servo6attachEiii+0x32>
    3b90:	6b c0       	rjmp	.+214    	; 0x3c68 <_ZN5Servo6attachEiii+0x108>
    3b92:	8c 81       	ldd	r24, Y+4	; 0x04
    3b94:	61 e0       	ldi	r22, 0x01	; 1
    3b96:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	80 81       	ld	r24, Z
    3ba2:	28 2f       	mov	r18, r24
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba8:	48 2f       	mov	r20, r24
    3baa:	4f 73       	andi	r20, 0x3F	; 63
    3bac:	c9 01       	movw	r24, r18
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	82 0f       	add	r24, r18
    3bb4:	93 1f       	adc	r25, r19
    3bb6:	83 5b       	subi	r24, 0xB3	; 179
    3bb8:	9c 4f       	sbci	r25, 0xFC	; 252
    3bba:	24 2f       	mov	r18, r20
    3bbc:	2f 73       	andi	r18, 0x3F	; 63
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	30 81       	ld	r19, Z
    3bc2:	30 7c       	andi	r19, 0xC0	; 192
    3bc4:	23 2b       	or	r18, r19
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	20 83       	st	Z, r18
    3bca:	20 e2       	ldi	r18, 0x20	; 32
    3bcc:	32 e0       	ldi	r19, 0x02	; 2
    3bce:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd0:	9f 81       	ldd	r25, Y+7	; 0x07
    3bd2:	a9 01       	movw	r20, r18
    3bd4:	48 1b       	sub	r20, r24
    3bd6:	59 0b       	sbc	r21, r25
    3bd8:	ca 01       	movw	r24, r20
    3bda:	99 23       	and	r25, r25
    3bdc:	0c f4       	brge	.+2      	; 0x3be0 <_ZN5Servo6attachEiii+0x80>
    3bde:	03 96       	adiw	r24, 0x03	; 3
    3be0:	95 95       	asr	r25
    3be2:	87 95       	ror	r24
    3be4:	95 95       	asr	r25
    3be6:	87 95       	ror	r24
    3be8:	28 2f       	mov	r18, r24
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	9b 81       	ldd	r25, Y+3	; 0x03
    3bee:	fc 01       	movw	r30, r24
    3bf0:	21 83       	std	Z+1, r18	; 0x01
    3bf2:	20 e6       	ldi	r18, 0x60	; 96
    3bf4:	39 e0       	ldi	r19, 0x09	; 9
    3bf6:	88 85       	ldd	r24, Y+8	; 0x08
    3bf8:	99 85       	ldd	r25, Y+9	; 0x09
    3bfa:	a9 01       	movw	r20, r18
    3bfc:	48 1b       	sub	r20, r24
    3bfe:	59 0b       	sbc	r21, r25
    3c00:	ca 01       	movw	r24, r20
    3c02:	99 23       	and	r25, r25
    3c04:	0c f4       	brge	.+2      	; 0x3c08 <_ZN5Servo6attachEiii+0xa8>
    3c06:	03 96       	adiw	r24, 0x03	; 3
    3c08:	95 95       	asr	r25
    3c0a:	87 95       	ror	r24
    3c0c:	95 95       	asr	r25
    3c0e:	87 95       	ror	r24
    3c10:	28 2f       	mov	r18, r24
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	9b 81       	ldd	r25, Y+3	; 0x03
    3c16:	fc 01       	movw	r30, r24
    3c18:	22 83       	std	Z+2, r18	; 0x02
    3c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1e:	fc 01       	movw	r30, r24
    3c20:	90 81       	ld	r25, Z
    3c22:	8b ea       	ldi	r24, 0xAB	; 171
    3c24:	98 9f       	mul	r25, r24
    3c26:	81 2d       	mov	r24, r1
    3c28:	11 24       	eor	r1, r1
    3c2a:	86 95       	lsr	r24
    3c2c:	86 95       	lsr	r24
    3c2e:	86 95       	lsr	r24
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	10 df       	rcall	.-480    	; 0x3a56 <_ZL13isTimerActive18timer16_Sequence_t>
    3c36:	98 2f       	mov	r25, r24
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	89 27       	eor	r24, r25
    3c3c:	88 23       	and	r24, r24
    3c3e:	11 f0       	breq	.+4      	; 0x3c44 <_ZN5Servo6attachEiii+0xe4>
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	8a de       	rcall	.-748    	; 0x3958 <_ZL7initISR18timer16_Sequence_t>
    3c44:	8a 81       	ldd	r24, Y+2	; 0x02
    3c46:	9b 81       	ldd	r25, Y+3	; 0x03
    3c48:	fc 01       	movw	r30, r24
    3c4a:	80 81       	ld	r24, Z
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	c9 01       	movw	r24, r18
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	82 0f       	add	r24, r18
    3c58:	93 1f       	adc	r25, r19
    3c5a:	83 5b       	subi	r24, 0xB3	; 179
    3c5c:	9c 4f       	sbci	r25, 0xFC	; 252
    3c5e:	fc 01       	movw	r30, r24
    3c60:	20 81       	ld	r18, Z
    3c62:	20 64       	ori	r18, 0x40	; 64
    3c64:	fc 01       	movw	r30, r24
    3c66:	20 83       	st	Z, r18
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	80 81       	ld	r24, Z
    3c70:	29 96       	adiw	r28, 0x09	; 9
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	08 95       	ret

00003c82 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    3c82:	6f 92       	push	r6
    3c84:	7f 92       	push	r7
    3c86:	8f 92       	push	r8
    3c88:	9f 92       	push	r9
    3c8a:	af 92       	push	r10
    3c8c:	bf 92       	push	r11
    3c8e:	cf 92       	push	r12
    3c90:	df 92       	push	r13
    3c92:	ef 92       	push	r14
    3c94:	ff 92       	push	r15
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <_ZN5Servo5writeEi+0x1e>
    3ca0:	1f 92       	push	r1
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	9a 83       	std	Y+2, r25	; 0x02
    3ca8:	89 83       	std	Y+1, r24	; 0x01
    3caa:	7c 83       	std	Y+4, r23	; 0x04
    3cac:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    3cae:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb2:	80 32       	cpi	r24, 0x20	; 32
    3cb4:	92 40       	sbci	r25, 0x02	; 2
    3cb6:	0c f0       	brlt	.+2      	; 0x3cba <_ZN5Servo5writeEi+0x38>
    3cb8:	5c c0       	rjmp	.+184    	; 0x3d72 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    3cba:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbe:	99 23       	and	r25, r25
    3cc0:	14 f4       	brge	.+4      	; 0x3cc6 <_ZN5Servo5writeEi+0x44>
    3cc2:	1c 82       	std	Y+4, r1	; 0x04
    3cc4:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	85 3b       	cpi	r24, 0xB5	; 181
    3ccc:	91 05       	cpc	r25, r1
    3cce:	24 f0       	brlt	.+8      	; 0x3cd8 <_ZN5Servo5writeEi+0x56>
    3cd0:	84 eb       	ldi	r24, 0xB4	; 180
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	9c 83       	std	Y+4, r25	; 0x04
    3cd6:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	fc 01       	movw	r30, r24
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	08 2e       	mov	r0, r24
    3ce2:	00 0c       	add	r0, r0
    3ce4:	99 0b       	sbc	r25, r25
    3ce6:	28 e5       	ldi	r18, 0x58	; 88
    3ce8:	32 e0       	ldi	r19, 0x02	; 2
    3cea:	a9 01       	movw	r20, r18
    3cec:	48 1b       	sub	r20, r24
    3cee:	59 0b       	sbc	r21, r25
    3cf0:	ca 01       	movw	r24, r20
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	09 2e       	mov	r0, r25
    3cfc:	00 0c       	add	r0, r0
    3cfe:	aa 0b       	sbc	r26, r26
    3d00:	bb 0b       	sbc	r27, r27
    3d02:	29 81       	ldd	r18, Y+1	; 0x01
    3d04:	3a 81       	ldd	r19, Y+2	; 0x02
    3d06:	f9 01       	movw	r30, r18
    3d08:	21 81       	ldd	r18, Z+1	; 0x01
    3d0a:	02 2e       	mov	r0, r18
    3d0c:	00 0c       	add	r0, r0
    3d0e:	33 0b       	sbc	r19, r19
    3d10:	48 e8       	ldi	r20, 0x88	; 136
    3d12:	50 e0       	ldi	r21, 0x00	; 0
    3d14:	ba 01       	movw	r22, r20
    3d16:	62 1b       	sub	r22, r18
    3d18:	73 0b       	sbc	r23, r19
    3d1a:	9b 01       	movw	r18, r22
    3d1c:	22 0f       	add	r18, r18
    3d1e:	33 1f       	adc	r19, r19
    3d20:	22 0f       	add	r18, r18
    3d22:	33 1f       	adc	r19, r19
    3d24:	03 2e       	mov	r0, r19
    3d26:	00 0c       	add	r0, r0
    3d28:	44 0b       	sbc	r20, r20
    3d2a:	55 0b       	sbc	r21, r21
    3d2c:	6b 81       	ldd	r22, Y+3	; 0x03
    3d2e:	7c 81       	ldd	r23, Y+4	; 0x04
    3d30:	3b 01       	movw	r6, r22
    3d32:	77 0f       	add	r23, r23
    3d34:	88 08       	sbc	r8, r8
    3d36:	99 08       	sbc	r9, r9
    3d38:	6b 2f       	mov	r22, r27
    3d3a:	6f 93       	push	r22
    3d3c:	6a 2f       	mov	r22, r26
    3d3e:	6f 93       	push	r22
    3d40:	69 2f       	mov	r22, r25
    3d42:	6f 93       	push	r22
    3d44:	8f 93       	push	r24
    3d46:	59 01       	movw	r10, r18
    3d48:	6a 01       	movw	r12, r20
    3d4a:	14 eb       	ldi	r17, 0xB4	; 180
    3d4c:	e1 2e       	mov	r14, r17
    3d4e:	f1 2c       	mov	r15, r1
    3d50:	00 e0       	ldi	r16, 0x00	; 0
    3d52:	10 e0       	ldi	r17, 0x00	; 0
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	a9 01       	movw	r20, r18
    3d5a:	c4 01       	movw	r24, r8
    3d5c:	b3 01       	movw	r22, r6
    3d5e:	0e 94 df 2c 	call	0x59be	; 0x59be <_Z3maplllll>
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	9c 83       	std	Y+4, r25	; 0x04
    3d70:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    3d72:	2b 81       	ldd	r18, Y+3	; 0x03
    3d74:	3c 81       	ldd	r19, Y+4	; 0x04
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7a:	b9 01       	movw	r22, r18
    3d7c:	14 d0       	rcall	.+40     	; 0x3da6 <_ZN5Servo17writeMicrosecondsEi>
}
    3d7e:	00 00       	nop
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	ef 90       	pop	r14
    3d94:	df 90       	pop	r13
    3d96:	cf 90       	pop	r12
    3d98:	bf 90       	pop	r11
    3d9a:	af 90       	pop	r10
    3d9c:	9f 90       	pop	r9
    3d9e:	8f 90       	pop	r8
    3da0:	7f 90       	pop	r7
    3da2:	6f 90       	pop	r6
    3da4:	08 95       	ret

00003da6 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	00 d0       	rcall	.+0      	; 0x3dac <_ZN5Servo17writeMicrosecondsEi+0x6>
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <_ZN5Servo17writeMicrosecondsEi+0x8>
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	9c 83       	std	Y+4, r25	; 0x04
    3db4:	8b 83       	std	Y+3, r24	; 0x03
    3db6:	7e 83       	std	Y+6, r23	; 0x06
    3db8:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3dba:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	80 81       	ld	r24, Z
    3dc2:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	80 33       	cpi	r24, 0x30	; 48
    3dc8:	08 f0       	brcs	.+2      	; 0x3dcc <_ZN5Servo17writeMicrosecondsEi+0x26>
    3dca:	99 c0       	rjmp	.+306    	; 0x3efe <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	81 81       	ldd	r24, Z+1	; 0x01
    3dd4:	08 2e       	mov	r0, r24
    3dd6:	00 0c       	add	r0, r0
    3dd8:	99 0b       	sbc	r25, r25
    3dda:	28 e8       	ldi	r18, 0x88	; 136
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	a9 01       	movw	r20, r18
    3de0:	48 1b       	sub	r20, r24
    3de2:	59 0b       	sbc	r21, r25
    3de4:	ca 01       	movw	r24, r20
    3de6:	9c 01       	movw	r18, r24
    3de8:	22 0f       	add	r18, r18
    3dea:	33 1f       	adc	r19, r19
    3dec:	22 0f       	add	r18, r18
    3dee:	33 1f       	adc	r19, r19
    3df0:	8d 81       	ldd	r24, Y+5	; 0x05
    3df2:	9e 81       	ldd	r25, Y+6	; 0x06
    3df4:	82 17       	cp	r24, r18
    3df6:	93 07       	cpc	r25, r19
    3df8:	a4 f4       	brge	.+40     	; 0x3e22 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	fc 01       	movw	r30, r24
    3e00:	81 81       	ldd	r24, Z+1	; 0x01
    3e02:	08 2e       	mov	r0, r24
    3e04:	00 0c       	add	r0, r0
    3e06:	99 0b       	sbc	r25, r25
    3e08:	28 e8       	ldi	r18, 0x88	; 136
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	a9 01       	movw	r20, r18
    3e0e:	48 1b       	sub	r20, r24
    3e10:	59 0b       	sbc	r21, r25
    3e12:	ca 01       	movw	r24, r20
    3e14:	88 0f       	add	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	2a c0       	rjmp	.+84     	; 0x3e76 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	9c 81       	ldd	r25, Y+4	; 0x04
    3e26:	fc 01       	movw	r30, r24
    3e28:	82 81       	ldd	r24, Z+2	; 0x02
    3e2a:	08 2e       	mov	r0, r24
    3e2c:	00 0c       	add	r0, r0
    3e2e:	99 0b       	sbc	r25, r25
    3e30:	28 e5       	ldi	r18, 0x58	; 88
    3e32:	32 e0       	ldi	r19, 0x02	; 2
    3e34:	a9 01       	movw	r20, r18
    3e36:	48 1b       	sub	r20, r24
    3e38:	59 0b       	sbc	r21, r25
    3e3a:	ca 01       	movw	r24, r20
    3e3c:	9c 01       	movw	r18, r24
    3e3e:	22 0f       	add	r18, r18
    3e40:	33 1f       	adc	r19, r19
    3e42:	22 0f       	add	r18, r18
    3e44:	33 1f       	adc	r19, r19
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4a:	28 17       	cp	r18, r24
    3e4c:	39 07       	cpc	r19, r25
    3e4e:	9c f4       	brge	.+38     	; 0x3e76 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    3e50:	8b 81       	ldd	r24, Y+3	; 0x03
    3e52:	9c 81       	ldd	r25, Y+4	; 0x04
    3e54:	fc 01       	movw	r30, r24
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	08 2e       	mov	r0, r24
    3e5a:	00 0c       	add	r0, r0
    3e5c:	99 0b       	sbc	r25, r25
    3e5e:	28 e5       	ldi	r18, 0x58	; 88
    3e60:	32 e0       	ldi	r19, 0x02	; 2
    3e62:	a9 01       	movw	r20, r18
    3e64:	48 1b       	sub	r20, r24
    3e66:	59 0b       	sbc	r21, r25
    3e68:	ca 01       	movw	r24, r20
    3e6a:	88 0f       	add	r24, r24
    3e6c:	99 1f       	adc	r25, r25
    3e6e:	88 0f       	add	r24, r24
    3e70:	99 1f       	adc	r25, r25
    3e72:	9e 83       	std	Y+6, r25	; 0x06
    3e74:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    3e76:	8d 81       	ldd	r24, Y+5	; 0x05
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	02 97       	sbiw	r24, 0x02	; 2
    3e7c:	9e 83       	std	Y+6, r25	; 0x06
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3e80:	8d 81       	ldd	r24, Y+5	; 0x05
    3e82:	9e 81       	ldd	r25, Y+6	; 0x06
    3e84:	09 2e       	mov	r0, r25
    3e86:	00 0c       	add	r0, r0
    3e88:	aa 0b       	sbc	r26, r26
    3e8a:	bb 0b       	sbc	r27, r27
    3e8c:	88 0f       	add	r24, r24
    3e8e:	99 1f       	adc	r25, r25
    3e90:	aa 1f       	adc	r26, r26
    3e92:	bb 1f       	adc	r27, r27
    3e94:	88 0f       	add	r24, r24
    3e96:	99 1f       	adc	r25, r25
    3e98:	aa 1f       	adc	r26, r26
    3e9a:	bb 1f       	adc	r27, r27
    3e9c:	88 0f       	add	r24, r24
    3e9e:	99 1f       	adc	r25, r25
    3ea0:	aa 1f       	adc	r26, r26
    3ea2:	bb 1f       	adc	r27, r27
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	aa 1f       	adc	r26, r26
    3eaa:	bb 1f       	adc	r27, r27
    3eac:	bb 23       	and	r27, r27
    3eae:	1c f4       	brge	.+6      	; 0x3eb6 <_ZN5Servo17writeMicrosecondsEi+0x110>
    3eb0:	07 96       	adiw	r24, 0x07	; 7
    3eb2:	a1 1d       	adc	r26, r1
    3eb4:	b1 1d       	adc	r27, r1
    3eb6:	68 94       	set
    3eb8:	12 f8       	bld	r1, 2
    3eba:	b5 95       	asr	r27
    3ebc:	a7 95       	ror	r26
    3ebe:	97 95       	ror	r25
    3ec0:	87 95       	ror	r24
    3ec2:	16 94       	lsr	r1
    3ec4:	d1 f7       	brne	.-12     	; 0x3eba <_ZN5Servo17writeMicrosecondsEi+0x114>
    3ec6:	9e 83       	std	Y+6, r25	; 0x06
    3ec8:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    3eca:	8f e5       	ldi	r24, 0x5F	; 95
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	fc 01       	movw	r30, r24
    3ed0:	80 81       	ld	r24, Z
    3ed2:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    3ed4:	f8 94       	cli
    servos[channel].ticks = value;
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	4d 81       	ldd	r20, Y+5	; 0x05
    3ede:	5e 81       	ldd	r21, Y+6	; 0x06
    3ee0:	c9 01       	movw	r24, r18
    3ee2:	88 0f       	add	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	82 0f       	add	r24, r18
    3ee8:	93 1f       	adc	r25, r19
    3eea:	82 5b       	subi	r24, 0xB2	; 178
    3eec:	9c 4f       	sbci	r25, 0xFC	; 252
    3eee:	fc 01       	movw	r30, r24
    3ef0:	51 83       	std	Z+1, r21	; 0x01
    3ef2:	40 83       	st	Z, r20
    SREG = oldSREG;
    3ef4:	8f e5       	ldi	r24, 0x5F	; 95
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	2a 81       	ldd	r18, Y+2	; 0x02
    3efa:	fc 01       	movw	r30, r24
    3efc:	20 83       	st	Z, r18
  }
}
    3efe:	00 00       	nop
    3f00:	26 96       	adiw	r28, 0x06	; 6
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	08 95       	ret

00003f12 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    3f12:	2f 92       	push	r2
    3f14:	3f 92       	push	r3
    3f16:	4f 92       	push	r4
    3f18:	5f 92       	push	r5
    3f1a:	6f 92       	push	r6
    3f1c:	7f 92       	push	r7
    3f1e:	8f 92       	push	r8
    3f20:	9f 92       	push	r9
    3f22:	af 92       	push	r10
    3f24:	bf 92       	push	r11
    3f26:	cf 92       	push	r12
    3f28:	df 92       	push	r13
    3f2a:	ef 92       	push	r14
    3f2c:	ff 92       	push	r15
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	1f 92       	push	r1
    3f38:	1f 92       	push	r1
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	9a 81       	ldd	r25, Y+2	; 0x02
    3f46:	fc 01       	movw	r30, r24
    3f48:	82 81       	ldd	r24, Z+2	; 0x02
    3f4a:	08 2e       	mov	r0, r24
    3f4c:	00 0c       	add	r0, r0
    3f4e:	99 0b       	sbc	r25, r25
    3f50:	28 e5       	ldi	r18, 0x58	; 88
    3f52:	32 e0       	ldi	r19, 0x02	; 2
    3f54:	a9 01       	movw	r20, r18
    3f56:	48 1b       	sub	r20, r24
    3f58:	59 0b       	sbc	r21, r25
    3f5a:	ca 01       	movw	r24, r20
    3f5c:	88 0f       	add	r24, r24
    3f5e:	99 1f       	adc	r25, r25
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	1c 01       	movw	r2, r24
    3f66:	99 0f       	add	r25, r25
    3f68:	44 08       	sbc	r4, r4
    3f6a:	55 08       	sbc	r5, r5
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	fc 01       	movw	r30, r24
    3f72:	81 81       	ldd	r24, Z+1	; 0x01
    3f74:	08 2e       	mov	r0, r24
    3f76:	00 0c       	add	r0, r0
    3f78:	99 0b       	sbc	r25, r25
    3f7a:	28 e8       	ldi	r18, 0x88	; 136
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	a9 01       	movw	r20, r18
    3f80:	48 1b       	sub	r20, r24
    3f82:	59 0b       	sbc	r21, r25
    3f84:	ca 01       	movw	r24, r20
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	3c 01       	movw	r6, r24
    3f90:	99 0f       	add	r25, r25
    3f92:	88 08       	sbc	r8, r8
    3f94:	99 08       	sbc	r9, r9
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9a:	30 d0       	rcall	.+96     	; 0x3ffc <_ZN5Servo16readMicrosecondsEv>
    3f9c:	01 96       	adiw	r24, 0x01	; 1
    3f9e:	09 2e       	mov	r0, r25
    3fa0:	00 0c       	add	r0, r0
    3fa2:	aa 0b       	sbc	r26, r26
    3fa4:	bb 0b       	sbc	r27, r27
    3fa6:	1f 92       	push	r1
    3fa8:	1f 92       	push	r1
    3faa:	1f 92       	push	r1
    3fac:	24 eb       	ldi	r18, 0xB4	; 180
    3fae:	2f 93       	push	r18
    3fb0:	a1 2c       	mov	r10, r1
    3fb2:	b1 2c       	mov	r11, r1
    3fb4:	65 01       	movw	r12, r10
    3fb6:	82 01       	movw	r16, r4
    3fb8:	71 01       	movw	r14, r2
    3fba:	a4 01       	movw	r20, r8
    3fbc:	93 01       	movw	r18, r6
    3fbe:	bc 01       	movw	r22, r24
    3fc0:	cd 01       	movw	r24, r26
    3fc2:	0e 94 df 2c 	call	0x59be	; 0x59be <_Z3maplllll>
    3fc6:	0f 90       	pop	r0
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
}
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	ef 90       	pop	r14
    3fe2:	df 90       	pop	r13
    3fe4:	cf 90       	pop	r12
    3fe6:	bf 90       	pop	r11
    3fe8:	af 90       	pop	r10
    3fea:	9f 90       	pop	r9
    3fec:	8f 90       	pop	r8
    3fee:	7f 90       	pop	r7
    3ff0:	6f 90       	pop	r6
    3ff2:	5f 90       	pop	r5
    3ff4:	4f 90       	pop	r4
    3ff6:	3f 90       	pop	r3
    3ff8:	2f 90       	pop	r2
    3ffa:	08 95       	ret

00003ffc <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    3ffc:	cf 93       	push	r28
    3ffe:	df 93       	push	r29
    4000:	00 d0       	rcall	.+0      	; 0x4002 <_ZN5Servo16readMicrosecondsEv+0x6>
    4002:	1f 92       	push	r1
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	9c 83       	std	Y+4, r25	; 0x04
    400a:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    400c:	8b 81       	ldd	r24, Y+3	; 0x03
    400e:	9c 81       	ldd	r25, Y+4	; 0x04
    4010:	fc 01       	movw	r30, r24
    4012:	80 81       	ld	r24, Z
    4014:	8f 3f       	cpi	r24, 0xFF	; 255
    4016:	01 f1       	breq	.+64     	; 0x4058 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    4018:	8b 81       	ldd	r24, Y+3	; 0x03
    401a:	9c 81       	ldd	r25, Y+4	; 0x04
    401c:	fc 01       	movw	r30, r24
    401e:	80 81       	ld	r24, Z
    4020:	28 2f       	mov	r18, r24
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	c9 01       	movw	r24, r18
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	82 0f       	add	r24, r18
    402c:	93 1f       	adc	r25, r19
    402e:	82 5b       	subi	r24, 0xB2	; 178
    4030:	9c 4f       	sbci	r25, 0xFC	; 252
    4032:	fc 01       	movw	r30, r24
    4034:	80 81       	ld	r24, Z
    4036:	91 81       	ldd	r25, Z+1	; 0x01
    4038:	88 0f       	add	r24, r24
    403a:	99 1f       	adc	r25, r25
    403c:	88 0f       	add	r24, r24
    403e:	99 1f       	adc	r25, r25
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	92 95       	swap	r25
    4046:	82 95       	swap	r24
    4048:	8f 70       	andi	r24, 0x0F	; 15
    404a:	89 27       	eor	r24, r25
    404c:	9f 70       	andi	r25, 0x0F	; 15
    404e:	89 27       	eor	r24, r25
    4050:	02 96       	adiw	r24, 0x02	; 2
    4052:	9a 83       	std	Y+2, r25	; 0x02
    4054:	89 83       	std	Y+1, r24	; 0x01
    4056:	02 c0       	rjmp	.+4      	; 0x405c <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    4058:	1a 82       	std	Y+2, r1	; 0x02
    405a:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	0f 90       	pop	r0
    4066:	0f 90       	pop	r0
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

0000406e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	2f 97       	sbiw	r28, 0x0f	; 15
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4082:	8f e5       	ldi	r24, 0x5F	; 95
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	fc 01       	movw	r30, r24
    4088:	80 81       	ld	r24, Z
    408a:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    408c:	f8 94       	cli
  if (!initialized) {
    408e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <_ZN8SPIClass11initializedE>
    4092:	88 23       	and	r24, r24
    4094:	09 f0       	breq	.+2      	; 0x4098 <_ZN8SPIClass5beginEv+0x2a>
    4096:	5b c0       	rjmp	.+182    	; 0x414e <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4098:	89 ec       	ldi	r24, 0xC9	; 201
    409a:	91 e0       	ldi	r25, 0x01	; 1
    409c:	9b 83       	std	Y+3, r25	; 0x03
    409e:	8a 83       	std	Y+2, r24	; 0x02
    40a0:	8a 81       	ldd	r24, Y+2	; 0x02
    40a2:	9b 81       	ldd	r25, Y+3	; 0x03
    40a4:	fc 01       	movw	r30, r24
    40a6:	84 91       	lpm	r24, Z
    40a8:	8c 83       	std	Y+4, r24	; 0x04
    40aa:	8c 81       	ldd	r24, Y+4	; 0x04
    40ac:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    40ae:	83 e8       	ldi	r24, 0x83	; 131
    40b0:	91 e0       	ldi	r25, 0x01	; 1
    40b2:	9f 83       	std	Y+7, r25	; 0x07
    40b4:	8e 83       	std	Y+6, r24	; 0x06
    40b6:	8e 81       	ldd	r24, Y+6	; 0x06
    40b8:	9f 81       	ldd	r25, Y+7	; 0x07
    40ba:	fc 01       	movw	r30, r24
    40bc:	84 91       	lpm	r24, Z
    40be:	88 87       	std	Y+8, r24	; 0x08
    40c0:	88 85       	ldd	r24, Y+8	; 0x08
    40c2:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    40c4:	8d 81       	ldd	r24, Y+5	; 0x05
    40c6:	88 2f       	mov	r24, r24
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	88 0f       	add	r24, r24
    40cc:	99 1f       	adc	r25, r25
    40ce:	82 5f       	subi	r24, 0xF2	; 242
    40d0:	9d 4f       	sbci	r25, 0xFD	; 253
    40d2:	9b 87       	std	Y+11, r25	; 0x0b
    40d4:	8a 87       	std	Y+10, r24	; 0x0a
    40d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    40da:	fc 01       	movw	r30, r24
    40dc:	25 91       	lpm	r18, Z+
    40de:	34 91       	lpm	r19, Z
    40e0:	cf 01       	movw	r24, r30
    40e2:	3d 87       	std	Y+13, r19	; 0x0d
    40e4:	2c 87       	std	Y+12, r18	; 0x0c
    40e6:	9b 87       	std	Y+11, r25	; 0x0b
    40e8:	8a 87       	std	Y+10, r24	; 0x0a
    40ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    40ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    40ee:	9f 87       	std	Y+15, r25	; 0x0f
    40f0:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    40f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    40f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    40f6:	fc 01       	movw	r30, r24
    40f8:	90 81       	ld	r25, Z
    40fa:	89 85       	ldd	r24, Y+9	; 0x09
    40fc:	98 23       	and	r25, r24
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	99 23       	and	r25, r25
    4102:	09 f0       	breq	.+2      	; 0x4106 <_ZN8SPIClass5beginEv+0x98>
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	88 23       	and	r24, r24
    4108:	21 f0       	breq	.+8      	; 0x4112 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    410a:	61 e0       	ldi	r22, 0x01	; 1
    410c:	85 e3       	ldi	r24, 0x35	; 53
    410e:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4112:	61 e0       	ldi	r22, 0x01	; 1
    4114:	85 e3       	ldi	r24, 0x35	; 53
    4116:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    411a:	8c e4       	ldi	r24, 0x4C	; 76
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	2c e4       	ldi	r18, 0x4C	; 76
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	f9 01       	movw	r30, r18
    4124:	20 81       	ld	r18, Z
    4126:	20 61       	ori	r18, 0x10	; 16
    4128:	fc 01       	movw	r30, r24
    412a:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    412c:	8c e4       	ldi	r24, 0x4C	; 76
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	2c e4       	ldi	r18, 0x4C	; 76
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	f9 01       	movw	r30, r18
    4136:	20 81       	ld	r18, Z
    4138:	20 64       	ori	r18, 0x40	; 64
    413a:	fc 01       	movw	r30, r24
    413c:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    413e:	61 e0       	ldi	r22, 0x01	; 1
    4140:	84 e3       	ldi	r24, 0x34	; 52
    4142:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
    pinMode(MOSI, OUTPUT);
    4146:	61 e0       	ldi	r22, 0x01	; 1
    4148:	83 e3       	ldi	r24, 0x33	; 51
    414a:	0e 94 4d 2c 	call	0x589a	; 0x589a <pinMode>
  }
  initialized++; // reference count
    414e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <_ZN8SPIClass11initializedE>
    4152:	8f 5f       	subi	r24, 0xFF	; 255
    4154:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4158:	8f e5       	ldi	r24, 0x5F	; 95
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	29 81       	ldd	r18, Y+1	; 0x01
    415e:	fc 01       	movw	r30, r24
    4160:	20 83       	st	Z, r18
}
    4162:	00 00       	nop
    4164:	2f 96       	adiw	r28, 0x0f	; 15
    4166:	0f b6       	in	r0, 0x3f	; 63
    4168:	f8 94       	cli
    416a:	de bf       	out	0x3e, r29	; 62
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	08 95       	ret

00004176 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4176:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_state>
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <twi_sendStop>
    4180:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <twi_inRepStart>
    4184:	61 e0       	ldi	r22, 0x01	; 1
    4186:	84 e1       	ldi	r24, 0x14	; 20
    4188:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    418c:	61 e0       	ldi	r22, 0x01	; 1
    418e:	85 e1       	ldi	r24, 0x15	; 21
    4190:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    4194:	e9 eb       	ldi	r30, 0xB9	; 185
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	80 81       	ld	r24, Z
    419a:	8e 7f       	andi	r24, 0xFE	; 254
    419c:	80 83       	st	Z, r24
    419e:	80 81       	ld	r24, Z
    41a0:	8d 7f       	andi	r24, 0xFD	; 253
    41a2:	80 83       	st	Z, r24
    41a4:	88 e4       	ldi	r24, 0x48	; 72
    41a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    41aa:	85 e4       	ldi	r24, 0x45	; 69
    41ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    41b0:	08 95       	ret

000041b2 <twi_disable>:
    41b2:	ec eb       	ldi	r30, 0xBC	; 188
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	8a 7b       	andi	r24, 0xBA	; 186
    41ba:	80 83       	st	Z, r24
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	84 e1       	ldi	r24, 0x14	; 20
    41c0:	0e 94 89 2c 	call	0x5912	; 0x5912 <digitalWrite>
    41c4:	60 e0       	ldi	r22, 0x00	; 0
    41c6:	85 e1       	ldi	r24, 0x15	; 21
    41c8:	0c 94 89 2c 	jmp	0x5912	; 0x5912 <digitalWrite>

000041cc <twi_transmit>:
    41cc:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <twi_txBufferLength>
    41d0:	26 2f       	mov	r18, r22
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	24 0f       	add	r18, r20
    41d6:	31 1d       	adc	r19, r1
    41d8:	21 32       	cpi	r18, 0x21	; 33
    41da:	31 05       	cpc	r19, r1
    41dc:	dc f4       	brge	.+54     	; 0x4214 <twi_transmit+0x48>
    41de:	20 91 59 04 	lds	r18, 0x0459	; 0x800459 <twi_state>
    41e2:	24 30       	cpi	r18, 0x04	; 4
    41e4:	c9 f4       	brne	.+50     	; 0x4218 <twi_transmit+0x4c>
    41e6:	fc 01       	movw	r30, r24
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	86 17       	cp	r24, r22
    41ee:	58 f4       	brcc	.+22     	; 0x4206 <twi_transmit+0x3a>
    41f0:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <twi_txBufferLength>
    41f4:	21 91       	ld	r18, Z+
    41f6:	dc 01       	movw	r26, r24
    41f8:	a6 5f       	subi	r26, 0xF6	; 246
    41fa:	bb 4f       	sbci	r27, 0xFB	; 251
    41fc:	a3 0f       	add	r26, r19
    41fe:	b1 1d       	adc	r27, r1
    4200:	2c 93       	st	X, r18
    4202:	01 96       	adiw	r24, 0x01	; 1
    4204:	f3 cf       	rjmp	.-26     	; 0x41ec <twi_transmit+0x20>
    4206:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_txBufferLength>
    420a:	68 0f       	add	r22, r24
    420c:	60 93 08 04 	sts	0x0408, r22	; 0x800408 <twi_txBufferLength>
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	08 95       	ret
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	08 95       	ret
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	08 95       	ret

0000421c <twi_attachSlaveRxEvent>:
    421c:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <twi_onSlaveReceive+0x1>
    4220:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <twi_onSlaveReceive>
    4224:	08 95       	ret

00004226 <twi_attachSlaveTxEvent>:
    4226:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <twi_onSlaveTransmit+0x1>
    422a:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <twi_onSlaveTransmit>
    422e:	08 95       	ret

00004230 <twi_releaseBus>:
    4230:	85 ec       	ldi	r24, 0xC5	; 197
    4232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4236:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_state>
    423a:	08 95       	ret

0000423c <twi_handleTimeout>:
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
    4240:	91 e0       	ldi	r25, 0x01	; 1
    4242:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <twi_timed_out_flag>
    4246:	88 23       	and	r24, r24
    4248:	51 f0       	breq	.+20     	; 0x425e <twi_handleTimeout+0x22>
    424a:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    424e:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4252:	af df       	rcall	.-162    	; 0x41b2 <twi_disable>
    4254:	90 df       	rcall	.-224    	; 0x4176 <twi_init>
    4256:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    425a:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	08 95       	ret

00004264 <twi_writeTo>:
    4264:	4f 92       	push	r4
    4266:	5f 92       	push	r5
    4268:	6f 92       	push	r6
    426a:	7f 92       	push	r7
    426c:	8f 92       	push	r8
    426e:	9f 92       	push	r9
    4270:	af 92       	push	r10
    4272:	bf 92       	push	r11
    4274:	cf 92       	push	r12
    4276:	df 92       	push	r13
    4278:	ef 92       	push	r14
    427a:	ff 92       	push	r15
    427c:	0f 93       	push	r16
    427e:	1f 93       	push	r17
    4280:	cf 93       	push	r28
    4282:	df 93       	push	r29
    4284:	41 32       	cpi	r20, 0x21	; 33
    4286:	08 f0       	brcs	.+2      	; 0x428a <twi_writeTo+0x26>
    4288:	c5 c0       	rjmp	.+394    	; 0x4414 <twi_writeTo+0x1b0>
    428a:	12 2f       	mov	r17, r18
    428c:	f4 2e       	mov	r15, r20
    428e:	d7 2e       	mov	r13, r23
    4290:	e6 2e       	mov	r14, r22
    4292:	d8 2f       	mov	r29, r24
    4294:	0e 94 2d 2b 	call	0x565a	; 0x565a <micros>
    4298:	4b 01       	movw	r8, r22
    429a:	5c 01       	movw	r10, r24
    429c:	c0 91 59 04 	lds	r28, 0x0459	; 0x800459 <twi_state>
    42a0:	cc 23       	and	r28, r28
    42a2:	11 f1       	breq	.+68     	; 0x42e8 <twi_writeTo+0x84>
    42a4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_timeout_us>
    42a8:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    42ac:	a0 91 54 04 	lds	r26, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    42b0:	b0 91 55 04 	lds	r27, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    42b4:	89 2b       	or	r24, r25
    42b6:	8a 2b       	or	r24, r26
    42b8:	8b 2b       	or	r24, r27
    42ba:	81 f3       	breq	.-32     	; 0x429c <twi_writeTo+0x38>
    42bc:	0e 94 2d 2b 	call	0x565a	; 0x565a <micros>
    42c0:	40 90 52 04 	lds	r4, 0x0452	; 0x800452 <twi_timeout_us>
    42c4:	50 90 53 04 	lds	r5, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    42c8:	60 90 54 04 	lds	r6, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    42cc:	70 90 55 04 	lds	r7, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	88 19       	sub	r24, r8
    42d6:	99 09       	sbc	r25, r9
    42d8:	aa 09       	sbc	r26, r10
    42da:	bb 09       	sbc	r27, r11
    42dc:	48 16       	cp	r4, r24
    42de:	59 06       	cpc	r5, r25
    42e0:	6a 06       	cpc	r6, r26
    42e2:	7b 06       	cpc	r7, r27
    42e4:	d8 f6       	brcc	.-74     	; 0x429c <twi_writeTo+0x38>
    42e6:	83 c0       	rjmp	.+262    	; 0x43ee <twi_writeTo+0x18a>
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <twi_state>
    42ee:	00 93 57 04 	sts	0x0457, r16	; 0x800457 <twi_sendStop>
    42f2:	8f ef       	ldi	r24, 0xFF	; 255
    42f4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_error>
    42f8:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <twi_masterBufferIndex>
    42fc:	f0 92 2a 04 	sts	0x042A, r15	; 0x80042a <twi_masterBufferLength>
    4300:	9e 2d       	mov	r25, r14
    4302:	ac e2       	ldi	r26, 0x2C	; 44
    4304:	b4 e0       	ldi	r27, 0x04	; 4
    4306:	ee 2d       	mov	r30, r14
    4308:	fd 2d       	mov	r31, r13
    430a:	8e 2f       	mov	r24, r30
    430c:	89 1b       	sub	r24, r25
    430e:	8f 15       	cp	r24, r15
    4310:	18 f4       	brcc	.+6      	; 0x4318 <twi_writeTo+0xb4>
    4312:	81 91       	ld	r24, Z+
    4314:	8d 93       	st	X+, r24
    4316:	f9 cf       	rjmp	.-14     	; 0x430a <twi_writeTo+0xa6>
    4318:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <twi_slarw>
    431c:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <twi_slarw>
    4320:	dd 0f       	add	r29, r29
    4322:	d9 2b       	or	r29, r25
    4324:	d0 93 58 04 	sts	0x0458, r29	; 0x800458 <twi_slarw>
    4328:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <twi_inRepStart>
    432c:	81 30       	cpi	r24, 0x01	; 1
    432e:	89 f5       	brne	.+98     	; 0x4392 <twi_writeTo+0x12e>
    4330:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <twi_inRepStart>
    4334:	0e 94 2d 2b 	call	0x565a	; 0x565a <micros>
    4338:	6b 01       	movw	r12, r22
    433a:	7c 01       	movw	r14, r24
    433c:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_slarw>
    4340:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4344:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_timeout_us>
    4348:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    434c:	a0 91 54 04 	lds	r26, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    4350:	b0 91 55 04 	lds	r27, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    4354:	89 2b       	or	r24, r25
    4356:	8a 2b       	or	r24, r26
    4358:	8b 2b       	or	r24, r27
    435a:	a9 f0       	breq	.+42     	; 0x4386 <twi_writeTo+0x122>
    435c:	0e 94 2d 2b 	call	0x565a	; 0x565a <micros>
    4360:	80 90 52 04 	lds	r8, 0x0452	; 0x800452 <twi_timeout_us>
    4364:	90 90 53 04 	lds	r9, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    4368:	a0 90 54 04 	lds	r10, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    436c:	b0 90 55 04 	lds	r11, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	8c 19       	sub	r24, r12
    4376:	9d 09       	sbc	r25, r13
    4378:	ae 09       	sbc	r26, r14
    437a:	bf 09       	sbc	r27, r15
    437c:	88 16       	cp	r8, r24
    437e:	99 06       	cpc	r9, r25
    4380:	aa 06       	cpc	r10, r26
    4382:	bb 06       	cpc	r11, r27
    4384:	a0 f1       	brcs	.+104    	; 0x43ee <twi_writeTo+0x18a>
    4386:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    438a:	83 fd       	sbrc	r24, 3
    438c:	d7 cf       	rjmp	.-82     	; 0x433c <twi_writeTo+0xd8>
    438e:	85 ec       	ldi	r24, 0xC5	; 197
    4390:	01 c0       	rjmp	.+2      	; 0x4394 <twi_writeTo+0x130>
    4392:	85 ee       	ldi	r24, 0xE5	; 229
    4394:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4398:	0e 94 2d 2b 	call	0x565a	; 0x565a <micros>
    439c:	6b 01       	movw	r12, r22
    439e:	7c 01       	movw	r14, r24
    43a0:	11 23       	and	r17, r17
    43a2:	51 f1       	breq	.+84     	; 0x43f8 <twi_writeTo+0x194>
    43a4:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_state>
    43a8:	82 30       	cpi	r24, 0x02	; 2
    43aa:	31 f5       	brne	.+76     	; 0x43f8 <twi_writeTo+0x194>
    43ac:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_timeout_us>
    43b0:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    43b4:	a0 91 54 04 	lds	r26, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    43b8:	b0 91 55 04 	lds	r27, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    43bc:	89 2b       	or	r24, r25
    43be:	8a 2b       	or	r24, r26
    43c0:	8b 2b       	or	r24, r27
    43c2:	71 f3       	breq	.-36     	; 0x43a0 <twi_writeTo+0x13c>
    43c4:	0e 94 2d 2b 	call	0x565a	; 0x565a <micros>
    43c8:	80 90 52 04 	lds	r8, 0x0452	; 0x800452 <twi_timeout_us>
    43cc:	90 90 53 04 	lds	r9, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    43d0:	a0 90 54 04 	lds	r10, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    43d4:	b0 90 55 04 	lds	r11, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    43d8:	dc 01       	movw	r26, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	8c 19       	sub	r24, r12
    43de:	9d 09       	sbc	r25, r13
    43e0:	ae 09       	sbc	r26, r14
    43e2:	bf 09       	sbc	r27, r15
    43e4:	88 16       	cp	r8, r24
    43e6:	99 06       	cpc	r9, r25
    43e8:	aa 06       	cpc	r10, r26
    43ea:	bb 06       	cpc	r11, r27
    43ec:	c8 f6       	brcc	.-78     	; 0x43a0 <twi_writeTo+0x13c>
    43ee:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_do_reset_on_timeout>
    43f2:	24 df       	rcall	.-440    	; 0x423c <twi_handleTimeout>
    43f4:	c5 e0       	ldi	r28, 0x05	; 5
    43f6:	13 c0       	rjmp	.+38     	; 0x441e <twi_writeTo+0x1ba>
    43f8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_error>
    43fc:	8f 3f       	cpi	r24, 0xFF	; 255
    43fe:	79 f0       	breq	.+30     	; 0x441e <twi_writeTo+0x1ba>
    4400:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_error>
    4404:	80 32       	cpi	r24, 0x20	; 32
    4406:	41 f0       	breq	.+16     	; 0x4418 <twi_writeTo+0x1b4>
    4408:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_error>
    440c:	80 33       	cpi	r24, 0x30	; 48
    440e:	31 f0       	breq	.+12     	; 0x441c <twi_writeTo+0x1b8>
    4410:	c4 e0       	ldi	r28, 0x04	; 4
    4412:	05 c0       	rjmp	.+10     	; 0x441e <twi_writeTo+0x1ba>
    4414:	c1 e0       	ldi	r28, 0x01	; 1
    4416:	03 c0       	rjmp	.+6      	; 0x441e <twi_writeTo+0x1ba>
    4418:	c2 e0       	ldi	r28, 0x02	; 2
    441a:	01 c0       	rjmp	.+2      	; 0x441e <twi_writeTo+0x1ba>
    441c:	c3 e0       	ldi	r28, 0x03	; 3
    441e:	8c 2f       	mov	r24, r28
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	ff 90       	pop	r15
    442a:	ef 90       	pop	r14
    442c:	df 90       	pop	r13
    442e:	cf 90       	pop	r12
    4430:	bf 90       	pop	r11
    4432:	af 90       	pop	r10
    4434:	9f 90       	pop	r9
    4436:	8f 90       	pop	r8
    4438:	7f 90       	pop	r7
    443a:	6f 90       	pop	r6
    443c:	5f 90       	pop	r5
    443e:	4f 90       	pop	r4
    4440:	08 95       	ret

00004442 <twi_stop>:
    4442:	85 ed       	ldi	r24, 0xD5	; 213
    4444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4448:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_timeout_us>
    444c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    4450:	a0 91 54 04 	lds	r26, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    4454:	b0 91 55 04 	lds	r27, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    4458:	07 96       	adiw	r24, 0x07	; 7
    445a:	a1 1d       	adc	r26, r1
    445c:	b1 1d       	adc	r27, r1
    445e:	23 e0       	ldi	r18, 0x03	; 3
    4460:	b6 95       	lsr	r27
    4462:	a7 95       	ror	r26
    4464:	97 95       	ror	r25
    4466:	87 95       	ror	r24
    4468:	2a 95       	dec	r18
    446a:	d1 f7       	brne	.-12     	; 0x4460 <twi_stop+0x1e>
    446c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4470:	24 ff       	sbrs	r18, 4
    4472:	1b c0       	rjmp	.+54     	; 0x44aa <twi_stop+0x68>
    4474:	40 91 52 04 	lds	r20, 0x0452	; 0x800452 <twi_timeout_us>
    4478:	50 91 53 04 	lds	r21, 0x0453	; 0x800453 <twi_timeout_us+0x1>
    447c:	60 91 54 04 	lds	r22, 0x0454	; 0x800454 <twi_timeout_us+0x2>
    4480:	70 91 55 04 	lds	r23, 0x0455	; 0x800455 <twi_timeout_us+0x3>
    4484:	45 2b       	or	r20, r21
    4486:	46 2b       	or	r20, r22
    4488:	47 2b       	or	r20, r23
    448a:	81 f3       	breq	.-32     	; 0x446c <twi_stop+0x2a>
    448c:	00 97       	sbiw	r24, 0x00	; 0
    448e:	a1 05       	cpc	r26, r1
    4490:	b1 05       	cpc	r27, r1
    4492:	41 f0       	breq	.+16     	; 0x44a4 <twi_stop+0x62>
    4494:	25 e3       	ldi	r18, 0x35	; 53
    4496:	2a 95       	dec	r18
    4498:	f1 f7       	brne	.-4      	; 0x4496 <twi_stop+0x54>
    449a:	00 00       	nop
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	a1 09       	sbc	r26, r1
    44a0:	b1 09       	sbc	r27, r1
    44a2:	e4 cf       	rjmp	.-56     	; 0x446c <twi_stop+0x2a>
    44a4:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_do_reset_on_timeout>
    44a8:	c9 ce       	rjmp	.-622    	; 0x423c <twi_handleTimeout>
    44aa:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_state>
    44ae:	08 95       	ret

000044b0 <__vector_39>:

ISR(TWI_vect)
{
    44b0:	1f 92       	push	r1
    44b2:	0f 92       	push	r0
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	0f 92       	push	r0
    44b8:	11 24       	eor	r1, r1
    44ba:	0b b6       	in	r0, 0x3b	; 59
    44bc:	0f 92       	push	r0
    44be:	2f 93       	push	r18
    44c0:	3f 93       	push	r19
    44c2:	4f 93       	push	r20
    44c4:	5f 93       	push	r21
    44c6:	6f 93       	push	r22
    44c8:	7f 93       	push	r23
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	af 93       	push	r26
    44d0:	bf 93       	push	r27
    44d2:	ef 93       	push	r30
    44d4:	ff 93       	push	r31
  switch(TW_STATUS){
    44d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    44da:	88 7f       	andi	r24, 0xF8	; 248
    44dc:	80 36       	cpi	r24, 0x60	; 96
    44de:	09 f4       	brne	.+2      	; 0x44e2 <__vector_39+0x32>
    44e0:	9d c0       	rjmp	.+314    	; 0x461c <__vector_39+0x16c>
    44e2:	70 f5       	brcc	.+92     	; 0x4540 <__vector_39+0x90>
    44e4:	88 32       	cpi	r24, 0x28	; 40
    44e6:	09 f4       	brne	.+2      	; 0x44ea <__vector_39+0x3a>
    44e8:	5c c0       	rjmp	.+184    	; 0x45a2 <__vector_39+0xf2>
    44ea:	90 f4       	brcc	.+36     	; 0x4510 <__vector_39+0x60>
    44ec:	80 31       	cpi	r24, 0x10	; 16
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <__vector_39+0x42>
    44f0:	55 c0       	rjmp	.+170    	; 0x459c <__vector_39+0xec>
    44f2:	38 f4       	brcc	.+14     	; 0x4502 <__vector_39+0x52>
    44f4:	88 23       	and	r24, r24
    44f6:	09 f4       	brne	.+2      	; 0x44fa <__vector_39+0x4a>
    44f8:	f3 c0       	rjmp	.+486    	; 0x46e0 <__vector_39+0x230>
    44fa:	88 30       	cpi	r24, 0x08	; 8
    44fc:	09 f4       	brne	.+2      	; 0x4500 <__vector_39+0x50>
    44fe:	4e c0       	rjmp	.+156    	; 0x459c <__vector_39+0xec>
    4500:	f2 c0       	rjmp	.+484    	; 0x46e6 <__vector_39+0x236>
    4502:	88 31       	cpi	r24, 0x18	; 24
    4504:	09 f4       	brne	.+2      	; 0x4508 <__vector_39+0x58>
    4506:	4d c0       	rjmp	.+154    	; 0x45a2 <__vector_39+0xf2>
    4508:	80 32       	cpi	r24, 0x20	; 32
    450a:	09 f4       	brne	.+2      	; 0x450e <__vector_39+0x5e>
    450c:	5e c0       	rjmp	.+188    	; 0x45ca <__vector_39+0x11a>
    450e:	eb c0       	rjmp	.+470    	; 0x46e6 <__vector_39+0x236>
    4510:	80 34       	cpi	r24, 0x40	; 64
    4512:	09 f4       	brne	.+2      	; 0x4516 <__vector_39+0x66>
    4514:	69 c0       	rjmp	.+210    	; 0x45e8 <__vector_39+0x138>
    4516:	50 f4       	brcc	.+20     	; 0x452c <__vector_39+0x7c>
    4518:	80 33       	cpi	r24, 0x30	; 48
    451a:	09 f4       	brne	.+2      	; 0x451e <__vector_39+0x6e>
    451c:	56 c0       	rjmp	.+172    	; 0x45ca <__vector_39+0x11a>
    451e:	88 33       	cpi	r24, 0x38	; 56
    4520:	09 f0       	breq	.+2      	; 0x4524 <__vector_39+0x74>
    4522:	e1 c0       	rjmp	.+450    	; 0x46e6 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4524:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_error>
      twi_releaseBus();
    4528:	83 de       	rcall	.-762    	; 0x4230 <twi_releaseBus>
      break;
    452a:	dd c0       	rjmp	.+442    	; 0x46e6 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    452c:	80 35       	cpi	r24, 0x50	; 80
    452e:	09 f4       	brne	.+2      	; 0x4532 <__vector_39+0x82>
    4530:	4f c0       	rjmp	.+158    	; 0x45d0 <__vector_39+0x120>
    4532:	88 35       	cpi	r24, 0x58	; 88
    4534:	09 f4       	brne	.+2      	; 0x4538 <__vector_39+0x88>
    4536:	5d c0       	rjmp	.+186    	; 0x45f2 <__vector_39+0x142>
    4538:	88 34       	cpi	r24, 0x48	; 72
    453a:	09 f0       	breq	.+2      	; 0x453e <__vector_39+0x8e>
    453c:	d4 c0       	rjmp	.+424    	; 0x46e6 <__vector_39+0x236>
    453e:	d2 c0       	rjmp	.+420    	; 0x46e4 <__vector_39+0x234>
    4540:	88 39       	cpi	r24, 0x98	; 152
    4542:	09 f4       	brne	.+2      	; 0x4546 <__vector_39+0x96>
    4544:	c3 c0       	rjmp	.+390    	; 0x46cc <__vector_39+0x21c>
    4546:	a8 f4       	brcc	.+42     	; 0x4572 <__vector_39+0xc2>
    4548:	88 37       	cpi	r24, 0x78	; 120
    454a:	09 f4       	brne	.+2      	; 0x454e <__vector_39+0x9e>
    454c:	67 c0       	rjmp	.+206    	; 0x461c <__vector_39+0x16c>
    454e:	38 f4       	brcc	.+14     	; 0x455e <__vector_39+0xae>
    4550:	88 36       	cpi	r24, 0x68	; 104
    4552:	09 f4       	brne	.+2      	; 0x4556 <__vector_39+0xa6>
    4554:	63 c0       	rjmp	.+198    	; 0x461c <__vector_39+0x16c>
    4556:	80 37       	cpi	r24, 0x70	; 112
    4558:	09 f4       	brne	.+2      	; 0x455c <__vector_39+0xac>
    455a:	60 c0       	rjmp	.+192    	; 0x461c <__vector_39+0x16c>
    455c:	c4 c0       	rjmp	.+392    	; 0x46e6 <__vector_39+0x236>
    455e:	88 38       	cpi	r24, 0x88	; 136
    4560:	09 f4       	brne	.+2      	; 0x4564 <__vector_39+0xb4>
    4562:	b4 c0       	rjmp	.+360    	; 0x46cc <__vector_39+0x21c>
    4564:	80 39       	cpi	r24, 0x90	; 144
    4566:	09 f4       	brne	.+2      	; 0x456a <__vector_39+0xba>
    4568:	5f c0       	rjmp	.+190    	; 0x4628 <__vector_39+0x178>
    456a:	80 38       	cpi	r24, 0x80	; 128
    456c:	09 f0       	breq	.+2      	; 0x4570 <__vector_39+0xc0>
    456e:	bb c0       	rjmp	.+374    	; 0x46e6 <__vector_39+0x236>
    4570:	5b c0       	rjmp	.+182    	; 0x4628 <__vector_39+0x178>
    4572:	80 3b       	cpi	r24, 0xB0	; 176
    4574:	09 f4       	brne	.+2      	; 0x4578 <__vector_39+0xc8>
    4576:	82 c0       	rjmp	.+260    	; 0x467c <__vector_39+0x1cc>
    4578:	38 f4       	brcc	.+14     	; 0x4588 <__vector_39+0xd8>
    457a:	80 3a       	cpi	r24, 0xA0	; 160
    457c:	09 f4       	brne	.+2      	; 0x4580 <__vector_39+0xd0>
    457e:	66 c0       	rjmp	.+204    	; 0x464c <__vector_39+0x19c>
    4580:	88 3a       	cpi	r24, 0xA8	; 168
    4582:	09 f4       	brne	.+2      	; 0x4586 <__vector_39+0xd6>
    4584:	7b c0       	rjmp	.+246    	; 0x467c <__vector_39+0x1cc>
    4586:	af c0       	rjmp	.+350    	; 0x46e6 <__vector_39+0x236>
    4588:	80 3c       	cpi	r24, 0xC0	; 192
    458a:	09 f4       	brne	.+2      	; 0x458e <__vector_39+0xde>
    458c:	a3 c0       	rjmp	.+326    	; 0x46d4 <__vector_39+0x224>
    458e:	88 3c       	cpi	r24, 0xC8	; 200
    4590:	09 f4       	brne	.+2      	; 0x4594 <__vector_39+0xe4>
    4592:	a0 c0       	rjmp	.+320    	; 0x46d4 <__vector_39+0x224>
    4594:	88 3b       	cpi	r24, 0xB8	; 184
    4596:	09 f4       	brne	.+2      	; 0x459a <__vector_39+0xea>
    4598:	86 c0       	rjmp	.+268    	; 0x46a6 <__vector_39+0x1f6>
    459a:	a5 c0       	rjmp	.+330    	; 0x46e6 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    459c:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_slarw>
    45a0:	10 c0       	rjmp	.+32     	; 0x45c2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    45a2:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <twi_masterBufferIndex>
    45a6:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_masterBufferLength>
    45aa:	98 17       	cp	r25, r24
    45ac:	70 f5       	brcc	.+92     	; 0x460a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    45ae:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_masterBufferIndex>
    45b2:	81 e0       	ldi	r24, 0x01	; 1
    45b4:	8e 0f       	add	r24, r30
    45b6:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <twi_masterBufferIndex>
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	e4 5d       	subi	r30, 0xD4	; 212
    45be:	fb 4f       	sbci	r31, 0xFB	; 251
    45c0:	80 81       	ld	r24, Z
    45c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    45c6:	85 ec       	ldi	r24, 0xC5	; 197
    45c8:	82 c0       	rjmp	.+260    	; 0x46ce <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    45ca:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_error>
    45ce:	8a c0       	rjmp	.+276    	; 0x46e4 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    45d0:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_masterBufferIndex>
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	8e 0f       	add	r24, r30
    45d8:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <twi_masterBufferIndex>
    45dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	e4 5d       	subi	r30, 0xD4	; 212
    45e4:	fb 4f       	sbci	r31, 0xFB	; 251
    45e6:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    45e8:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <twi_masterBufferIndex>
    45ec:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_masterBufferLength>
    45f0:	6a c0       	rjmp	.+212    	; 0x46c6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    45f2:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_masterBufferIndex>
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	8e 0f       	add	r24, r30
    45fa:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <twi_masterBufferIndex>
    45fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	e4 5d       	subi	r30, 0xD4	; 212
    4606:	fb 4f       	sbci	r31, 0xFB	; 251
    4608:	80 83       	st	Z, r24
      if (twi_sendStop){
    460a:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <twi_sendStop>
    460e:	81 11       	cpse	r24, r1
    4610:	69 c0       	rjmp	.+210    	; 0x46e4 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4618:	84 ea       	ldi	r24, 0xA4	; 164
    461a:	5d c0       	rjmp	.+186    	; 0x46d6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    461c:	83 e0       	ldi	r24, 0x03	; 3
    461e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4622:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_rxBufferIndex>
    4626:	cf cf       	rjmp	.-98     	; 0x45c6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4628:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    462c:	80 32       	cpi	r24, 0x20	; 32
    462e:	08 f0       	brcs	.+2      	; 0x4632 <__vector_39+0x182>
    4630:	4d c0       	rjmp	.+154    	; 0x46cc <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4632:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	8e 0f       	add	r24, r30
    463a:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_rxBufferIndex>
    463e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	e8 51       	subi	r30, 0x18	; 24
    4646:	fc 4f       	sbci	r31, 0xFC	; 252
    4648:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    464a:	bd cf       	rjmp	.-134    	; 0x45c6 <__vector_39+0x116>
    464c:	f1 dd       	rcall	.-1054   	; 0x4230 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    464e:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4652:	80 32       	cpi	r24, 0x20	; 32
    4654:	30 f4       	brcc	.+12     	; 0x4662 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4656:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    465a:	f0 e0       	ldi	r31, 0x00	; 0
    465c:	e8 51       	subi	r30, 0x18	; 24
    465e:	fc 4f       	sbci	r31, 0xFC	; 252
    4660:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4662:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <twi_rxBufferIndex>
    4666:	70 e0       	ldi	r23, 0x00	; 0
    4668:	e0 91 4c 04 	lds	r30, 0x044C	; 0x80044c <twi_onSlaveReceive>
    466c:	f0 91 4d 04 	lds	r31, 0x044D	; 0x80044d <twi_onSlaveReceive+0x1>
    4670:	88 ee       	ldi	r24, 0xE8	; 232
    4672:	93 e0       	ldi	r25, 0x03	; 3
    4674:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4676:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_rxBufferIndex>
      break;
    467a:	35 c0       	rjmp	.+106    	; 0x46e6 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    467c:	84 e0       	ldi	r24, 0x04	; 4
    467e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4682:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4686:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    468a:	e0 91 4e 04 	lds	r30, 0x044E	; 0x80044e <twi_onSlaveTransmit>
    468e:	f0 91 4f 04 	lds	r31, 0x044F	; 0x80044f <twi_onSlaveTransmit+0x1>
    4692:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4694:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_txBufferLength>
    4698:	81 11       	cpse	r24, r1
    469a:	05 c0       	rjmp	.+10     	; 0x46a6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    46a2:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    46a6:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <twi_txBufferIndex>
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	8e 0f       	add	r24, r30
    46ae:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <twi_txBufferIndex>
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	e6 5f       	subi	r30, 0xF6	; 246
    46b6:	fb 4f       	sbci	r31, 0xFB	; 251
    46b8:	80 81       	ld	r24, Z
    46ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    46be:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <twi_txBufferIndex>
    46c2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_txBufferLength>
    46c6:	98 17       	cp	r25, r24
    46c8:	08 f4       	brcc	.+2      	; 0x46cc <__vector_39+0x21c>
    46ca:	7d cf       	rjmp	.-262    	; 0x45c6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    46cc:	85 e8       	ldi	r24, 0x85	; 133
    46ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46d2:	09 c0       	rjmp	.+18     	; 0x46e6 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    46d4:	85 ec       	ldi	r24, 0xC5	; 197
    46d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    46da:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_state>
      break;
    46de:	03 c0       	rjmp	.+6      	; 0x46e6 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    46e0:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <twi_error>
      twi_stop();
    46e4:	ae de       	rcall	.-676    	; 0x4442 <twi_stop>
      break;
  }
}
    46e6:	ff 91       	pop	r31
    46e8:	ef 91       	pop	r30
    46ea:	bf 91       	pop	r27
    46ec:	af 91       	pop	r26
    46ee:	9f 91       	pop	r25
    46f0:	8f 91       	pop	r24
    46f2:	7f 91       	pop	r23
    46f4:	6f 91       	pop	r22
    46f6:	5f 91       	pop	r21
    46f8:	4f 91       	pop	r20
    46fa:	3f 91       	pop	r19
    46fc:	2f 91       	pop	r18
    46fe:	0f 90       	pop	r0
    4700:	0b be       	out	0x3b, r0	; 59
    4702:	0f 90       	pop	r0
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	0f 90       	pop	r0
    4708:	1f 90       	pop	r1
    470a:	18 95       	reti

0000470c <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	00 d0       	rcall	.+0      	; 0x4712 <_ZN5Print13setWriteErrorEi+0x6>
    4712:	1f 92       	push	r1
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	9a 83       	std	Y+2, r25	; 0x02
    471a:	89 83       	std	Y+1, r24	; 0x01
    471c:	7c 83       	std	Y+4, r23	; 0x04
    471e:	6b 83       	std	Y+3, r22	; 0x03
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	9a 81       	ldd	r25, Y+2	; 0x02
    4724:	2b 81       	ldd	r18, Y+3	; 0x03
    4726:	3c 81       	ldd	r19, Y+4	; 0x04
    4728:	fc 01       	movw	r30, r24
    472a:	33 83       	std	Z+3, r19	; 0x03
    472c:	22 83       	std	Z+2, r18	; 0x02
    472e:	00 00       	nop
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	0f 90       	pop	r0
    4736:	0f 90       	pop	r0
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	08 95       	ret

0000473e <_ZN5PrintC1Ev>:
    473e:	cf 93       	push	r28
    4740:	df 93       	push	r29
    4742:	1f 92       	push	r1
    4744:	1f 92       	push	r1
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	9a 83       	std	Y+2, r25	; 0x02
    474c:	89 83       	std	Y+1, r24	; 0x01
    474e:	2a ef       	ldi	r18, 0xFA	; 250
    4750:	32 e0       	ldi	r19, 0x02	; 2
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	9a 81       	ldd	r25, Y+2	; 0x02
    4756:	fc 01       	movw	r30, r24
    4758:	31 83       	std	Z+1, r19	; 0x01
    475a:	20 83       	st	Z, r18
    475c:	89 81       	ldd	r24, Y+1	; 0x01
    475e:	9a 81       	ldd	r25, Y+2	; 0x02
    4760:	fc 01       	movw	r30, r24
    4762:	13 82       	std	Z+3, r1	; 0x03
    4764:	12 82       	std	Z+2, r1	; 0x02
    4766:	00 00       	nop
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	08 95       	ret

00004772 <_ZN5Print17availableForWriteEv>:
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	1f 92       	push	r1
    4778:	1f 92       	push	r1
    477a:	cd b7       	in	r28, 0x3d	; 61
    477c:	de b7       	in	r29, 0x3e	; 62
    477e:	9a 83       	std	Y+2, r25	; 0x02
    4780:	89 83       	std	Y+1, r24	; 0x01
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	08 95       	ret

00004790 <_ZN5Print5flushEv>:
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	1f 92       	push	r1
    4796:	1f 92       	push	r1
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	9a 83       	std	Y+2, r25	; 0x02
    479e:	89 83       	std	Y+1, r24	; 0x01
    47a0:	00 00       	nop
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	df 91       	pop	r29
    47a8:	cf 91       	pop	r28
    47aa:	08 95       	ret

000047ac <_ZN6StreamC1Ev>:
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	1f 92       	push	r1
    47b2:	1f 92       	push	r1
    47b4:	cd b7       	in	r28, 0x3d	; 61
    47b6:	de b7       	in	r29, 0x3e	; 62
    47b8:	9a 83       	std	Y+2, r25	; 0x02
    47ba:	89 83       	std	Y+1, r24	; 0x01
    47bc:	89 81       	ldd	r24, Y+1	; 0x01
    47be:	9a 81       	ldd	r25, Y+2	; 0x02
    47c0:	be df       	rcall	.-132    	; 0x473e <_ZN5PrintC1Ev>
    47c2:	27 ec       	ldi	r18, 0xC7	; 199
    47c4:	32 e0       	ldi	r19, 0x02	; 2
    47c6:	89 81       	ldd	r24, Y+1	; 0x01
    47c8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ca:	fc 01       	movw	r30, r24
    47cc:	31 83       	std	Z+1, r19	; 0x01
    47ce:	20 83       	st	Z, r18
    47d0:	29 81       	ldd	r18, Y+1	; 0x01
    47d2:	3a 81       	ldd	r19, Y+2	; 0x02
    47d4:	88 ee       	ldi	r24, 0xE8	; 232
    47d6:	93 e0       	ldi	r25, 0x03	; 3
    47d8:	a0 e0       	ldi	r26, 0x00	; 0
    47da:	b0 e0       	ldi	r27, 0x00	; 0
    47dc:	f9 01       	movw	r30, r18
    47de:	84 83       	std	Z+4, r24	; 0x04
    47e0:	95 83       	std	Z+5, r25	; 0x05
    47e2:	a6 83       	std	Z+6, r26	; 0x06
    47e4:	b7 83       	std	Z+7, r27	; 0x07
    47e6:	00 00       	nop
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	08 95       	ret

000047f2 <_ZN7TwoWireC1Ev>:
    47f2:	cf 93       	push	r28
    47f4:	df 93       	push	r29
    47f6:	1f 92       	push	r1
    47f8:	1f 92       	push	r1
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
    47fe:	9a 83       	std	Y+2, r25	; 0x02
    4800:	89 83       	std	Y+1, r24	; 0x01
    4802:	89 81       	ldd	r24, Y+1	; 0x01
    4804:	9a 81       	ldd	r25, Y+2	; 0x02
    4806:	d2 df       	rcall	.-92     	; 0x47ac <_ZN6StreamC1Ev>
    4808:	25 eb       	ldi	r18, 0xB5	; 181
    480a:	32 e0       	ldi	r19, 0x02	; 2
    480c:	89 81       	ldd	r24, Y+1	; 0x01
    480e:	9a 81       	ldd	r25, Y+2	; 0x02
    4810:	fc 01       	movw	r30, r24
    4812:	31 83       	std	Z+1, r19	; 0x01
    4814:	20 83       	st	Z, r18
    4816:	00 00       	nop
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	08 95       	ret

00004822 <_ZN7TwoWire5beginEv>:
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
    4826:	1f 92       	push	r1
    4828:	1f 92       	push	r1
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	9a 83       	std	Y+2, r25	; 0x02
    4830:	89 83       	std	Y+1, r24	; 0x01
    4832:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4836:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <_ZN7TwoWire14rxBufferLengthE>
    483a:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    483e:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    4842:	99 dc       	rcall	.-1742   	; 0x4176 <twi_init>
    4844:	89 ed       	ldi	r24, 0xD9	; 217
    4846:	95 e2       	ldi	r25, 0x25	; 37
    4848:	ee dc       	rcall	.-1572   	; 0x4226 <twi_attachSlaveTxEvent>
    484a:	8c e8       	ldi	r24, 0x8C	; 140
    484c:	95 e2       	ldi	r25, 0x25	; 37
    484e:	e6 dc       	rcall	.-1588   	; 0x421c <twi_attachSlaveRxEvent>
    4850:	00 00       	nop
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret

0000485c <_ZN7TwoWire17beginTransmissionEh>:
    485c:	cf 93       	push	r28
    485e:	df 93       	push	r29
    4860:	00 d0       	rcall	.+0      	; 0x4862 <_ZN7TwoWire17beginTransmissionEh+0x6>
    4862:	cd b7       	in	r28, 0x3d	; 61
    4864:	de b7       	in	r29, 0x3e	; 62
    4866:	9a 83       	std	Y+2, r25	; 0x02
    4868:	89 83       	std	Y+1, r24	; 0x01
    486a:	6b 83       	std	Y+3, r22	; 0x03
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZN7TwoWire12transmittingE>
    4872:	8b 81       	ldd	r24, Y+3	; 0x03
    4874:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZN7TwoWire9txAddressE>
    4878:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    487c:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    4880:	00 00       	nop
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	08 95       	ret

0000488e <_ZN7TwoWire17beginTransmissionEi>:
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	00 d0       	rcall	.+0      	; 0x4894 <_ZN7TwoWire17beginTransmissionEi+0x6>
    4894:	1f 92       	push	r1
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	9a 83       	std	Y+2, r25	; 0x02
    489c:	89 83       	std	Y+1, r24	; 0x01
    489e:	7c 83       	std	Y+4, r23	; 0x04
    48a0:	6b 83       	std	Y+3, r22	; 0x03
    48a2:	2b 81       	ldd	r18, Y+3	; 0x03
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
    48a6:	9a 81       	ldd	r25, Y+2	; 0x02
    48a8:	62 2f       	mov	r22, r18
    48aa:	d8 df       	rcall	.-80     	; 0x485c <_ZN7TwoWire17beginTransmissionEh>
    48ac:	00 00       	nop
    48ae:	0f 90       	pop	r0
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	08 95       	ret

000048bc <_ZN7TwoWire15endTransmissionEh>:
    48bc:	0f 93       	push	r16
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    48c2:	00 d0       	rcall	.+0      	; 0x48c4 <_ZN7TwoWire15endTransmissionEh+0x8>
    48c4:	1f 92       	push	r1
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	9b 83       	std	Y+3, r25	; 0x03
    48cc:	8a 83       	std	Y+2, r24	; 0x02
    48ce:	6c 83       	std	Y+4, r22	; 0x04
    48d0:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    48d4:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZN7TwoWire9txAddressE>
    48d8:	0c 81       	ldd	r16, Y+4	; 0x04
    48da:	21 e0       	ldi	r18, 0x01	; 1
    48dc:	49 2f       	mov	r20, r25
    48de:	6d e7       	ldi	r22, 0x7D	; 125
    48e0:	74 e0       	ldi	r23, 0x04	; 4
    48e2:	c0 dc       	rcall	.-1664   	; 0x4264 <twi_writeTo>
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    48ea:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    48ee:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZN7TwoWire12transmittingE>
    48f2:	89 81       	ldd	r24, Y+1	; 0x01
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	0f 90       	pop	r0
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	0f 91       	pop	r16
    4902:	08 95       	ret

00004904 <_ZN7TwoWire15endTransmissionEv>:
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	1f 92       	push	r1
    490a:	1f 92       	push	r1
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	9a 83       	std	Y+2, r25	; 0x02
    4912:	89 83       	std	Y+1, r24	; 0x01
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	9a 81       	ldd	r25, Y+2	; 0x02
    4918:	61 e0       	ldi	r22, 0x01	; 1
    491a:	d0 df       	rcall	.-96     	; 0x48bc <_ZN7TwoWire15endTransmissionEh>
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	08 95       	ret

00004926 <_ZN7TwoWire5writeEh>:
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	00 d0       	rcall	.+0      	; 0x492c <_ZN7TwoWire5writeEh+0x6>
    492c:	cd b7       	in	r28, 0x3d	; 61
    492e:	de b7       	in	r29, 0x3e	; 62
    4930:	9a 83       	std	Y+2, r25	; 0x02
    4932:	89 83       	std	Y+1, r24	; 0x01
    4934:	6b 83       	std	Y+3, r22	; 0x03
    4936:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZN7TwoWire12transmittingE>
    493a:	88 23       	and	r24, r24
    493c:	f9 f0       	breq	.+62     	; 0x497c <_ZN7TwoWire5writeEh+0x56>
    493e:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    4942:	80 32       	cpi	r24, 0x20	; 32
    4944:	40 f0       	brcs	.+16     	; 0x4956 <_ZN7TwoWire5writeEh+0x30>
    4946:	89 81       	ldd	r24, Y+1	; 0x01
    4948:	9a 81       	ldd	r25, Y+2	; 0x02
    494a:	61 e0       	ldi	r22, 0x01	; 1
    494c:	70 e0       	ldi	r23, 0x00	; 0
    494e:	de de       	rcall	.-580    	; 0x470c <_ZN5Print13setWriteErrorEi>
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	19 c0       	rjmp	.+50     	; 0x4988 <_ZN7TwoWire5writeEh+0x62>
    4956:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    495a:	88 2f       	mov	r24, r24
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	2b 81       	ldd	r18, Y+3	; 0x03
    4960:	83 58       	subi	r24, 0x83	; 131
    4962:	9b 4f       	sbci	r25, 0xFB	; 251
    4964:	fc 01       	movw	r30, r24
    4966:	20 83       	st	Z, r18
    4968:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    496c:	8f 5f       	subi	r24, 0xFF	; 255
    496e:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    4972:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    4976:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    497a:	04 c0       	rjmp	.+8      	; 0x4984 <_ZN7TwoWire5writeEh+0x5e>
    497c:	ce 01       	movw	r24, r28
    497e:	03 96       	adiw	r24, 0x03	; 3
    4980:	61 e0       	ldi	r22, 0x01	; 1
    4982:	24 dc       	rcall	.-1976   	; 0x41cc <twi_transmit>
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	0f 90       	pop	r0
    498a:	0f 90       	pop	r0
    498c:	0f 90       	pop	r0
    498e:	df 91       	pop	r29
    4990:	cf 91       	pop	r28
    4992:	08 95       	ret

00004994 <_ZN7TwoWire5writeEPKhj>:
    4994:	cf 93       	push	r28
    4996:	df 93       	push	r29
    4998:	cd b7       	in	r28, 0x3d	; 61
    499a:	de b7       	in	r29, 0x3e	; 62
    499c:	28 97       	sbiw	r28, 0x08	; 8
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	f8 94       	cli
    49a2:	de bf       	out	0x3e, r29	; 62
    49a4:	0f be       	out	0x3f, r0	; 63
    49a6:	cd bf       	out	0x3d, r28	; 61
    49a8:	9c 83       	std	Y+4, r25	; 0x04
    49aa:	8b 83       	std	Y+3, r24	; 0x03
    49ac:	7e 83       	std	Y+6, r23	; 0x06
    49ae:	6d 83       	std	Y+5, r22	; 0x05
    49b0:	58 87       	std	Y+8, r21	; 0x08
    49b2:	4f 83       	std	Y+7, r20	; 0x07
    49b4:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZN7TwoWire12transmittingE>
    49b8:	88 23       	and	r24, r24
    49ba:	21 f1       	breq	.+72     	; 0x4a04 <_ZN7TwoWire5writeEPKhj+0x70>
    49bc:	1a 82       	std	Y+2, r1	; 0x02
    49be:	19 82       	std	Y+1, r1	; 0x01
    49c0:	29 81       	ldd	r18, Y+1	; 0x01
    49c2:	3a 81       	ldd	r19, Y+2	; 0x02
    49c4:	8f 81       	ldd	r24, Y+7	; 0x07
    49c6:	98 85       	ldd	r25, Y+8	; 0x08
    49c8:	28 17       	cp	r18, r24
    49ca:	39 07       	cpc	r19, r25
    49cc:	00 f5       	brcc	.+64     	; 0x4a0e <_ZN7TwoWire5writeEPKhj+0x7a>
    49ce:	8b 81       	ldd	r24, Y+3	; 0x03
    49d0:	9c 81       	ldd	r25, Y+4	; 0x04
    49d2:	fc 01       	movw	r30, r24
    49d4:	80 81       	ld	r24, Z
    49d6:	91 81       	ldd	r25, Z+1	; 0x01
    49d8:	fc 01       	movw	r30, r24
    49da:	20 81       	ld	r18, Z
    49dc:	31 81       	ldd	r19, Z+1	; 0x01
    49de:	4d 81       	ldd	r20, Y+5	; 0x05
    49e0:	5e 81       	ldd	r21, Y+6	; 0x06
    49e2:	89 81       	ldd	r24, Y+1	; 0x01
    49e4:	9a 81       	ldd	r25, Y+2	; 0x02
    49e6:	84 0f       	add	r24, r20
    49e8:	95 1f       	adc	r25, r21
    49ea:	fc 01       	movw	r30, r24
    49ec:	40 81       	ld	r20, Z
    49ee:	8b 81       	ldd	r24, Y+3	; 0x03
    49f0:	9c 81       	ldd	r25, Y+4	; 0x04
    49f2:	64 2f       	mov	r22, r20
    49f4:	f9 01       	movw	r30, r18
    49f6:	19 95       	eicall
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	9a 81       	ldd	r25, Y+2	; 0x02
    49fc:	01 96       	adiw	r24, 0x01	; 1
    49fe:	9a 83       	std	Y+2, r25	; 0x02
    4a00:	89 83       	std	Y+1, r24	; 0x01
    4a02:	de cf       	rjmp	.-68     	; 0x49c0 <_ZN7TwoWire5writeEPKhj+0x2c>
    4a04:	2f 81       	ldd	r18, Y+7	; 0x07
    4a06:	8d 81       	ldd	r24, Y+5	; 0x05
    4a08:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0a:	62 2f       	mov	r22, r18
    4a0c:	df db       	rcall	.-2114   	; 0x41cc <twi_transmit>
    4a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a10:	98 85       	ldd	r25, Y+8	; 0x08
    4a12:	28 96       	adiw	r28, 0x08	; 8
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	de bf       	out	0x3e, r29	; 62
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	cd bf       	out	0x3d, r28	; 61
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	08 95       	ret

00004a24 <_ZN7TwoWire9availableEv>:
    4a24:	cf 93       	push	r28
    4a26:	df 93       	push	r29
    4a28:	1f 92       	push	r1
    4a2a:	1f 92       	push	r1
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	9a 83       	std	Y+2, r25	; 0x02
    4a32:	89 83       	std	Y+1, r24	; 0x01
    4a34:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZN7TwoWire14rxBufferLengthE>
    4a38:	28 2f       	mov	r18, r24
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4a40:	88 2f       	mov	r24, r24
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	a9 01       	movw	r20, r18
    4a46:	48 1b       	sub	r20, r24
    4a48:	59 0b       	sbc	r21, r25
    4a4a:	ca 01       	movw	r24, r20
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	08 95       	ret

00004a56 <_ZN7TwoWire4readEv>:
    4a56:	cf 93       	push	r28
    4a58:	df 93       	push	r29
    4a5a:	00 d0       	rcall	.+0      	; 0x4a5c <_ZN7TwoWire4readEv+0x6>
    4a5c:	1f 92       	push	r1
    4a5e:	cd b7       	in	r28, 0x3d	; 61
    4a60:	de b7       	in	r29, 0x3e	; 62
    4a62:	9c 83       	std	Y+4, r25	; 0x04
    4a64:	8b 83       	std	Y+3, r24	; 0x03
    4a66:	8f ef       	ldi	r24, 0xFF	; 255
    4a68:	9f ef       	ldi	r25, 0xFF	; 255
    4a6a:	9a 83       	std	Y+2, r25	; 0x02
    4a6c:	89 83       	std	Y+1, r24	; 0x01
    4a6e:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4a72:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZN7TwoWire14rxBufferLengthE>
    4a76:	98 17       	cp	r25, r24
    4a78:	88 f4       	brcc	.+34     	; 0x4a9c <_ZN7TwoWire4readEv+0x46>
    4a7a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4a7e:	88 2f       	mov	r24, r24
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	86 5a       	subi	r24, 0xA6	; 166
    4a84:	9b 4f       	sbci	r25, 0xFB	; 251
    4a86:	fc 01       	movw	r30, r24
    4a88:	80 81       	ld	r24, Z
    4a8a:	88 2f       	mov	r24, r24
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9a 83       	std	Y+2, r25	; 0x02
    4a90:	89 83       	std	Y+1, r24	; 0x01
    4a92:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4a96:	8f 5f       	subi	r24, 0xFF	; 255
    4a98:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4a9c:	89 81       	ldd	r24, Y+1	; 0x01
    4a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa0:	0f 90       	pop	r0
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	08 95       	ret

00004aae <_ZN7TwoWire4peekEv>:
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	00 d0       	rcall	.+0      	; 0x4ab4 <_ZN7TwoWire4peekEv+0x6>
    4ab4:	1f 92       	push	r1
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	9c 83       	std	Y+4, r25	; 0x04
    4abc:	8b 83       	std	Y+3, r24	; 0x03
    4abe:	8f ef       	ldi	r24, 0xFF	; 255
    4ac0:	9f ef       	ldi	r25, 0xFF	; 255
    4ac2:	9a 83       	std	Y+2, r25	; 0x02
    4ac4:	89 83       	std	Y+1, r24	; 0x01
    4ac6:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4aca:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZN7TwoWire14rxBufferLengthE>
    4ace:	98 17       	cp	r25, r24
    4ad0:	60 f4       	brcc	.+24     	; 0x4aea <_ZN7TwoWire4peekEv+0x3c>
    4ad2:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4ad6:	88 2f       	mov	r24, r24
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	86 5a       	subi	r24, 0xA6	; 166
    4adc:	9b 4f       	sbci	r25, 0xFB	; 251
    4ade:	fc 01       	movw	r30, r24
    4ae0:	80 81       	ld	r24, Z
    4ae2:	88 2f       	mov	r24, r24
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	9a 83       	std	Y+2, r25	; 0x02
    4ae8:	89 83       	std	Y+1, r24	; 0x01
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	9a 81       	ldd	r25, Y+2	; 0x02
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	08 95       	ret

00004afc <_ZN7TwoWire5flushEv>:
    4afc:	cf 93       	push	r28
    4afe:	df 93       	push	r29
    4b00:	1f 92       	push	r1
    4b02:	1f 92       	push	r1
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	9a 83       	std	Y+2, r25	; 0x02
    4b0a:	89 83       	std	Y+1, r24	; 0x01
    4b0c:	00 00       	nop
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	df 91       	pop	r29
    4b14:	cf 91       	pop	r28
    4b16:	08 95       	ret

00004b18 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4b18:	cf 93       	push	r28
    4b1a:	df 93       	push	r29
    4b1c:	00 d0       	rcall	.+0      	; 0x4b1e <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    4b1e:	1f 92       	push	r1
    4b20:	1f 92       	push	r1
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	9b 83       	std	Y+3, r25	; 0x03
    4b28:	8a 83       	std	Y+2, r24	; 0x02
    4b2a:	7d 83       	std	Y+5, r23	; 0x05
    4b2c:	6c 83       	std	Y+4, r22	; 0x04
    4b2e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <_ZN7TwoWire14user_onReceiveE>
    4b32:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <_ZN7TwoWire14user_onReceiveE+0x1>
    4b36:	89 2b       	or	r24, r25
    4b38:	89 f1       	breq	.+98     	; 0x4b9c <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    4b3a:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4b3e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZN7TwoWire14rxBufferLengthE>
    4b42:	98 17       	cp	r25, r24
    4b44:	68 f1       	brcs	.+90     	; 0x4ba0 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    4b46:	19 82       	std	Y+1, r1	; 0x01
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	28 2f       	mov	r18, r24
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b50:	9d 81       	ldd	r25, Y+5	; 0x05
    4b52:	28 17       	cp	r18, r24
    4b54:	39 07       	cpc	r19, r25
    4b56:	a4 f4       	brge	.+40     	; 0x4b80 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    4b58:	89 81       	ldd	r24, Y+1	; 0x01
    4b5a:	88 2f       	mov	r24, r24
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	29 81       	ldd	r18, Y+1	; 0x01
    4b60:	22 2f       	mov	r18, r18
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	4a 81       	ldd	r20, Y+2	; 0x02
    4b66:	5b 81       	ldd	r21, Y+3	; 0x03
    4b68:	24 0f       	add	r18, r20
    4b6a:	35 1f       	adc	r19, r21
    4b6c:	f9 01       	movw	r30, r18
    4b6e:	20 81       	ld	r18, Z
    4b70:	86 5a       	subi	r24, 0xA6	; 166
    4b72:	9b 4f       	sbci	r25, 0xFB	; 251
    4b74:	fc 01       	movw	r30, r24
    4b76:	20 83       	st	Z, r18
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	8f 5f       	subi	r24, 0xFF	; 255
    4b7c:	89 83       	std	Y+1, r24	; 0x01
    4b7e:	e4 cf       	rjmp	.-56     	; 0x4b48 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    4b80:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZN7TwoWire13rxBufferIndexE>
    4b84:	8c 81       	ldd	r24, Y+4	; 0x04
    4b86:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <_ZN7TwoWire14rxBufferLengthE>
    4b8a:	20 91 a2 04 	lds	r18, 0x04A2	; 0x8004a2 <_ZN7TwoWire14user_onReceiveE>
    4b8e:	30 91 a3 04 	lds	r19, 0x04A3	; 0x8004a3 <_ZN7TwoWire14user_onReceiveE+0x1>
    4b92:	8c 81       	ldd	r24, Y+4	; 0x04
    4b94:	9d 81       	ldd	r25, Y+5	; 0x05
    4b96:	f9 01       	movw	r30, r18
    4b98:	19 95       	eicall
    4b9a:	03 c0       	rjmp	.+6      	; 0x4ba2 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4b9c:	00 00       	nop
    4b9e:	01 c0       	rjmp	.+2      	; 0x4ba2 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4ba0:	00 00       	nop
    4ba2:	0f 90       	pop	r0
    4ba4:	0f 90       	pop	r0
    4ba6:	0f 90       	pop	r0
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	df 91       	pop	r29
    4bae:	cf 91       	pop	r28
    4bb0:	08 95       	ret

00004bb2 <_ZN7TwoWire16onRequestServiceEv>:
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	cd b7       	in	r28, 0x3d	; 61
    4bb8:	de b7       	in	r29, 0x3e	; 62
    4bba:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZN7TwoWire14user_onRequestE>
    4bbe:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <_ZN7TwoWire14user_onRequestE+0x1>
    4bc2:	89 2b       	or	r24, r25
    4bc4:	59 f0       	breq	.+22     	; 0x4bdc <_ZN7TwoWire16onRequestServiceEv+0x2a>
    4bc6:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZN7TwoWire13txBufferIndexE>
    4bca:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZN7TwoWire14txBufferLengthE>
    4bce:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZN7TwoWire14user_onRequestE>
    4bd2:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <_ZN7TwoWire14user_onRequestE+0x1>
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	19 95       	eicall
    4bda:	01 c0       	rjmp	.+2      	; 0x4bde <_ZN7TwoWire16onRequestServiceEv+0x2c>
    4bdc:	00 00       	nop
    4bde:	df 91       	pop	r29
    4be0:	cf 91       	pop	r28
    4be2:	08 95       	ret

00004be4 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4be4:	cf 93       	push	r28
    4be6:	df 93       	push	r29
    4be8:	00 d0       	rcall	.+0      	; 0x4bea <_Z41__static_initialization_and_destruction_0ii+0x6>
    4bea:	1f 92       	push	r1
    4bec:	cd b7       	in	r28, 0x3d	; 61
    4bee:	de b7       	in	r29, 0x3e	; 62
    4bf0:	9a 83       	std	Y+2, r25	; 0x02
    4bf2:	89 83       	std	Y+1, r24	; 0x01
    4bf4:	7c 83       	std	Y+4, r23	; 0x04
    4bf6:	6b 83       	std	Y+3, r22	; 0x03
    4bf8:	89 81       	ldd	r24, Y+1	; 0x01
    4bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	39 f4       	brne	.+14     	; 0x4c0e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    4c00:	8b 81       	ldd	r24, Y+3	; 0x03
    4c02:	9c 81       	ldd	r25, Y+4	; 0x04
    4c04:	01 96       	adiw	r24, 0x01	; 1
    4c06:	19 f4       	brne	.+6      	; 0x4c0e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    4c08:	84 ea       	ldi	r24, 0xA4	; 164
    4c0a:	94 e0       	ldi	r25, 0x04	; 4
    4c0c:	f2 dd       	rcall	.-1052   	; 0x47f2 <_ZN7TwoWireC1Ev>
    4c0e:	00 00       	nop
    4c10:	0f 90       	pop	r0
    4c12:	0f 90       	pop	r0
    4c14:	0f 90       	pop	r0
    4c16:	0f 90       	pop	r0
    4c18:	df 91       	pop	r29
    4c1a:	cf 91       	pop	r28
    4c1c:	08 95       	ret

00004c1e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    4c1e:	cf 93       	push	r28
    4c20:	df 93       	push	r29
    4c22:	cd b7       	in	r28, 0x3d	; 61
    4c24:	de b7       	in	r29, 0x3e	; 62
    4c26:	6f ef       	ldi	r22, 0xFF	; 255
    4c28:	7f ef       	ldi	r23, 0xFF	; 255
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	da df       	rcall	.-76     	; 0x4be4 <_Z41__static_initialization_and_destruction_0ii>
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	08 95       	ret

00004c36 <__subsf3>:
    4c36:	50 58       	subi	r21, 0x80	; 128

00004c38 <__addsf3>:
    4c38:	bb 27       	eor	r27, r27
    4c3a:	aa 27       	eor	r26, r26
    4c3c:	0e d0       	rcall	.+28     	; 0x4c5a <__addsf3x>
    4c3e:	09 c1       	rjmp	.+530    	; 0x4e52 <__fp_round>
    4c40:	fa d0       	rcall	.+500    	; 0x4e36 <__fp_pscA>
    4c42:	30 f0       	brcs	.+12     	; 0x4c50 <__addsf3+0x18>
    4c44:	ff d0       	rcall	.+510    	; 0x4e44 <__fp_pscB>
    4c46:	20 f0       	brcs	.+8      	; 0x4c50 <__addsf3+0x18>
    4c48:	31 f4       	brne	.+12     	; 0x4c56 <__addsf3+0x1e>
    4c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    4c4c:	11 f4       	brne	.+4      	; 0x4c52 <__addsf3+0x1a>
    4c4e:	1e f4       	brtc	.+6      	; 0x4c56 <__addsf3+0x1e>
    4c50:	ef c0       	rjmp	.+478    	; 0x4e30 <__fp_nan>
    4c52:	0e f4       	brtc	.+2      	; 0x4c56 <__addsf3+0x1e>
    4c54:	e0 95       	com	r30
    4c56:	e7 fb       	bst	r30, 7
    4c58:	e5 c0       	rjmp	.+458    	; 0x4e24 <__fp_inf>

00004c5a <__addsf3x>:
    4c5a:	e9 2f       	mov	r30, r25
    4c5c:	0b d1       	rcall	.+534    	; 0x4e74 <__fp_split3>
    4c5e:	80 f3       	brcs	.-32     	; 0x4c40 <__addsf3+0x8>
    4c60:	ba 17       	cp	r27, r26
    4c62:	62 07       	cpc	r22, r18
    4c64:	73 07       	cpc	r23, r19
    4c66:	84 07       	cpc	r24, r20
    4c68:	95 07       	cpc	r25, r21
    4c6a:	18 f0       	brcs	.+6      	; 0x4c72 <__addsf3x+0x18>
    4c6c:	71 f4       	brne	.+28     	; 0x4c8a <__addsf3x+0x30>
    4c6e:	9e f5       	brtc	.+102    	; 0x4cd6 <__addsf3x+0x7c>
    4c70:	23 c1       	rjmp	.+582    	; 0x4eb8 <__fp_zero>
    4c72:	0e f4       	brtc	.+2      	; 0x4c76 <__addsf3x+0x1c>
    4c74:	e0 95       	com	r30
    4c76:	0b 2e       	mov	r0, r27
    4c78:	ba 2f       	mov	r27, r26
    4c7a:	a0 2d       	mov	r26, r0
    4c7c:	0b 01       	movw	r0, r22
    4c7e:	b9 01       	movw	r22, r18
    4c80:	90 01       	movw	r18, r0
    4c82:	0c 01       	movw	r0, r24
    4c84:	ca 01       	movw	r24, r20
    4c86:	a0 01       	movw	r20, r0
    4c88:	11 24       	eor	r1, r1
    4c8a:	ff 27       	eor	r31, r31
    4c8c:	59 1b       	sub	r21, r25
    4c8e:	99 f0       	breq	.+38     	; 0x4cb6 <__addsf3x+0x5c>
    4c90:	59 3f       	cpi	r21, 0xF9	; 249
    4c92:	50 f4       	brcc	.+20     	; 0x4ca8 <__addsf3x+0x4e>
    4c94:	50 3e       	cpi	r21, 0xE0	; 224
    4c96:	68 f1       	brcs	.+90     	; 0x4cf2 <__addsf3x+0x98>
    4c98:	1a 16       	cp	r1, r26
    4c9a:	f0 40       	sbci	r31, 0x00	; 0
    4c9c:	a2 2f       	mov	r26, r18
    4c9e:	23 2f       	mov	r18, r19
    4ca0:	34 2f       	mov	r19, r20
    4ca2:	44 27       	eor	r20, r20
    4ca4:	58 5f       	subi	r21, 0xF8	; 248
    4ca6:	f3 cf       	rjmp	.-26     	; 0x4c8e <__addsf3x+0x34>
    4ca8:	46 95       	lsr	r20
    4caa:	37 95       	ror	r19
    4cac:	27 95       	ror	r18
    4cae:	a7 95       	ror	r26
    4cb0:	f0 40       	sbci	r31, 0x00	; 0
    4cb2:	53 95       	inc	r21
    4cb4:	c9 f7       	brne	.-14     	; 0x4ca8 <__addsf3x+0x4e>
    4cb6:	7e f4       	brtc	.+30     	; 0x4cd6 <__addsf3x+0x7c>
    4cb8:	1f 16       	cp	r1, r31
    4cba:	ba 0b       	sbc	r27, r26
    4cbc:	62 0b       	sbc	r22, r18
    4cbe:	73 0b       	sbc	r23, r19
    4cc0:	84 0b       	sbc	r24, r20
    4cc2:	ba f0       	brmi	.+46     	; 0x4cf2 <__addsf3x+0x98>
    4cc4:	91 50       	subi	r25, 0x01	; 1
    4cc6:	a1 f0       	breq	.+40     	; 0x4cf0 <__addsf3x+0x96>
    4cc8:	ff 0f       	add	r31, r31
    4cca:	bb 1f       	adc	r27, r27
    4ccc:	66 1f       	adc	r22, r22
    4cce:	77 1f       	adc	r23, r23
    4cd0:	88 1f       	adc	r24, r24
    4cd2:	c2 f7       	brpl	.-16     	; 0x4cc4 <__addsf3x+0x6a>
    4cd4:	0e c0       	rjmp	.+28     	; 0x4cf2 <__addsf3x+0x98>
    4cd6:	ba 0f       	add	r27, r26
    4cd8:	62 1f       	adc	r22, r18
    4cda:	73 1f       	adc	r23, r19
    4cdc:	84 1f       	adc	r24, r20
    4cde:	48 f4       	brcc	.+18     	; 0x4cf2 <__addsf3x+0x98>
    4ce0:	87 95       	ror	r24
    4ce2:	77 95       	ror	r23
    4ce4:	67 95       	ror	r22
    4ce6:	b7 95       	ror	r27
    4ce8:	f7 95       	ror	r31
    4cea:	9e 3f       	cpi	r25, 0xFE	; 254
    4cec:	08 f0       	brcs	.+2      	; 0x4cf0 <__addsf3x+0x96>
    4cee:	b3 cf       	rjmp	.-154    	; 0x4c56 <__addsf3+0x1e>
    4cf0:	93 95       	inc	r25
    4cf2:	88 0f       	add	r24, r24
    4cf4:	08 f0       	brcs	.+2      	; 0x4cf8 <__addsf3x+0x9e>
    4cf6:	99 27       	eor	r25, r25
    4cf8:	ee 0f       	add	r30, r30
    4cfa:	97 95       	ror	r25
    4cfc:	87 95       	ror	r24
    4cfe:	08 95       	ret

00004d00 <__fixsfsi>:
    4d00:	04 d0       	rcall	.+8      	; 0x4d0a <__fixunssfsi>
    4d02:	68 94       	set
    4d04:	b1 11       	cpse	r27, r1
    4d06:	d9 c0       	rjmp	.+434    	; 0x4eba <__fp_szero>
    4d08:	08 95       	ret

00004d0a <__fixunssfsi>:
    4d0a:	bc d0       	rcall	.+376    	; 0x4e84 <__fp_splitA>
    4d0c:	88 f0       	brcs	.+34     	; 0x4d30 <__fixunssfsi+0x26>
    4d0e:	9f 57       	subi	r25, 0x7F	; 127
    4d10:	90 f0       	brcs	.+36     	; 0x4d36 <__fixunssfsi+0x2c>
    4d12:	b9 2f       	mov	r27, r25
    4d14:	99 27       	eor	r25, r25
    4d16:	b7 51       	subi	r27, 0x17	; 23
    4d18:	a0 f0       	brcs	.+40     	; 0x4d42 <__fixunssfsi+0x38>
    4d1a:	d1 f0       	breq	.+52     	; 0x4d50 <__fixunssfsi+0x46>
    4d1c:	66 0f       	add	r22, r22
    4d1e:	77 1f       	adc	r23, r23
    4d20:	88 1f       	adc	r24, r24
    4d22:	99 1f       	adc	r25, r25
    4d24:	1a f0       	brmi	.+6      	; 0x4d2c <__fixunssfsi+0x22>
    4d26:	ba 95       	dec	r27
    4d28:	c9 f7       	brne	.-14     	; 0x4d1c <__fixunssfsi+0x12>
    4d2a:	12 c0       	rjmp	.+36     	; 0x4d50 <__fixunssfsi+0x46>
    4d2c:	b1 30       	cpi	r27, 0x01	; 1
    4d2e:	81 f0       	breq	.+32     	; 0x4d50 <__fixunssfsi+0x46>
    4d30:	c3 d0       	rcall	.+390    	; 0x4eb8 <__fp_zero>
    4d32:	b1 e0       	ldi	r27, 0x01	; 1
    4d34:	08 95       	ret
    4d36:	c0 c0       	rjmp	.+384    	; 0x4eb8 <__fp_zero>
    4d38:	67 2f       	mov	r22, r23
    4d3a:	78 2f       	mov	r23, r24
    4d3c:	88 27       	eor	r24, r24
    4d3e:	b8 5f       	subi	r27, 0xF8	; 248
    4d40:	39 f0       	breq	.+14     	; 0x4d50 <__fixunssfsi+0x46>
    4d42:	b9 3f       	cpi	r27, 0xF9	; 249
    4d44:	cc f3       	brlt	.-14     	; 0x4d38 <__fixunssfsi+0x2e>
    4d46:	86 95       	lsr	r24
    4d48:	77 95       	ror	r23
    4d4a:	67 95       	ror	r22
    4d4c:	b3 95       	inc	r27
    4d4e:	d9 f7       	brne	.-10     	; 0x4d46 <__fixunssfsi+0x3c>
    4d50:	3e f4       	brtc	.+14     	; 0x4d60 <__fixunssfsi+0x56>
    4d52:	90 95       	com	r25
    4d54:	80 95       	com	r24
    4d56:	70 95       	com	r23
    4d58:	61 95       	neg	r22
    4d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d60:	08 95       	ret

00004d62 <__floatunsisf>:
    4d62:	e8 94       	clt
    4d64:	09 c0       	rjmp	.+18     	; 0x4d78 <__floatsisf+0x12>

00004d66 <__floatsisf>:
    4d66:	97 fb       	bst	r25, 7
    4d68:	3e f4       	brtc	.+14     	; 0x4d78 <__floatsisf+0x12>
    4d6a:	90 95       	com	r25
    4d6c:	80 95       	com	r24
    4d6e:	70 95       	com	r23
    4d70:	61 95       	neg	r22
    4d72:	7f 4f       	sbci	r23, 0xFF	; 255
    4d74:	8f 4f       	sbci	r24, 0xFF	; 255
    4d76:	9f 4f       	sbci	r25, 0xFF	; 255
    4d78:	99 23       	and	r25, r25
    4d7a:	a9 f0       	breq	.+42     	; 0x4da6 <__floatsisf+0x40>
    4d7c:	f9 2f       	mov	r31, r25
    4d7e:	96 e9       	ldi	r25, 0x96	; 150
    4d80:	bb 27       	eor	r27, r27
    4d82:	93 95       	inc	r25
    4d84:	f6 95       	lsr	r31
    4d86:	87 95       	ror	r24
    4d88:	77 95       	ror	r23
    4d8a:	67 95       	ror	r22
    4d8c:	b7 95       	ror	r27
    4d8e:	f1 11       	cpse	r31, r1
    4d90:	f8 cf       	rjmp	.-16     	; 0x4d82 <__floatsisf+0x1c>
    4d92:	fa f4       	brpl	.+62     	; 0x4dd2 <__floatsisf+0x6c>
    4d94:	bb 0f       	add	r27, r27
    4d96:	11 f4       	brne	.+4      	; 0x4d9c <__floatsisf+0x36>
    4d98:	60 ff       	sbrs	r22, 0
    4d9a:	1b c0       	rjmp	.+54     	; 0x4dd2 <__floatsisf+0x6c>
    4d9c:	6f 5f       	subi	r22, 0xFF	; 255
    4d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4da0:	8f 4f       	sbci	r24, 0xFF	; 255
    4da2:	9f 4f       	sbci	r25, 0xFF	; 255
    4da4:	16 c0       	rjmp	.+44     	; 0x4dd2 <__floatsisf+0x6c>
    4da6:	88 23       	and	r24, r24
    4da8:	11 f0       	breq	.+4      	; 0x4dae <__floatsisf+0x48>
    4daa:	96 e9       	ldi	r25, 0x96	; 150
    4dac:	11 c0       	rjmp	.+34     	; 0x4dd0 <__floatsisf+0x6a>
    4dae:	77 23       	and	r23, r23
    4db0:	21 f0       	breq	.+8      	; 0x4dba <__floatsisf+0x54>
    4db2:	9e e8       	ldi	r25, 0x8E	; 142
    4db4:	87 2f       	mov	r24, r23
    4db6:	76 2f       	mov	r23, r22
    4db8:	05 c0       	rjmp	.+10     	; 0x4dc4 <__floatsisf+0x5e>
    4dba:	66 23       	and	r22, r22
    4dbc:	71 f0       	breq	.+28     	; 0x4dda <__floatsisf+0x74>
    4dbe:	96 e8       	ldi	r25, 0x86	; 134
    4dc0:	86 2f       	mov	r24, r22
    4dc2:	70 e0       	ldi	r23, 0x00	; 0
    4dc4:	60 e0       	ldi	r22, 0x00	; 0
    4dc6:	2a f0       	brmi	.+10     	; 0x4dd2 <__floatsisf+0x6c>
    4dc8:	9a 95       	dec	r25
    4dca:	66 0f       	add	r22, r22
    4dcc:	77 1f       	adc	r23, r23
    4dce:	88 1f       	adc	r24, r24
    4dd0:	da f7       	brpl	.-10     	; 0x4dc8 <__floatsisf+0x62>
    4dd2:	88 0f       	add	r24, r24
    4dd4:	96 95       	lsr	r25
    4dd6:	87 95       	ror	r24
    4dd8:	97 f9       	bld	r25, 7
    4dda:	08 95       	ret

00004ddc <__fp_cmp>:
    4ddc:	99 0f       	add	r25, r25
    4dde:	00 08       	sbc	r0, r0
    4de0:	55 0f       	add	r21, r21
    4de2:	aa 0b       	sbc	r26, r26
    4de4:	e0 e8       	ldi	r30, 0x80	; 128
    4de6:	fe ef       	ldi	r31, 0xFE	; 254
    4de8:	16 16       	cp	r1, r22
    4dea:	17 06       	cpc	r1, r23
    4dec:	e8 07       	cpc	r30, r24
    4dee:	f9 07       	cpc	r31, r25
    4df0:	c0 f0       	brcs	.+48     	; 0x4e22 <__fp_cmp+0x46>
    4df2:	12 16       	cp	r1, r18
    4df4:	13 06       	cpc	r1, r19
    4df6:	e4 07       	cpc	r30, r20
    4df8:	f5 07       	cpc	r31, r21
    4dfa:	98 f0       	brcs	.+38     	; 0x4e22 <__fp_cmp+0x46>
    4dfc:	62 1b       	sub	r22, r18
    4dfe:	73 0b       	sbc	r23, r19
    4e00:	84 0b       	sbc	r24, r20
    4e02:	95 0b       	sbc	r25, r21
    4e04:	39 f4       	brne	.+14     	; 0x4e14 <__fp_cmp+0x38>
    4e06:	0a 26       	eor	r0, r26
    4e08:	61 f0       	breq	.+24     	; 0x4e22 <__fp_cmp+0x46>
    4e0a:	23 2b       	or	r18, r19
    4e0c:	24 2b       	or	r18, r20
    4e0e:	25 2b       	or	r18, r21
    4e10:	21 f4       	brne	.+8      	; 0x4e1a <__fp_cmp+0x3e>
    4e12:	08 95       	ret
    4e14:	0a 26       	eor	r0, r26
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <__fp_cmp+0x3e>
    4e18:	a1 40       	sbci	r26, 0x01	; 1
    4e1a:	a6 95       	lsr	r26
    4e1c:	8f ef       	ldi	r24, 0xFF	; 255
    4e1e:	81 1d       	adc	r24, r1
    4e20:	81 1d       	adc	r24, r1
    4e22:	08 95       	ret

00004e24 <__fp_inf>:
    4e24:	97 f9       	bld	r25, 7
    4e26:	9f 67       	ori	r25, 0x7F	; 127
    4e28:	80 e8       	ldi	r24, 0x80	; 128
    4e2a:	70 e0       	ldi	r23, 0x00	; 0
    4e2c:	60 e0       	ldi	r22, 0x00	; 0
    4e2e:	08 95       	ret

00004e30 <__fp_nan>:
    4e30:	9f ef       	ldi	r25, 0xFF	; 255
    4e32:	80 ec       	ldi	r24, 0xC0	; 192
    4e34:	08 95       	ret

00004e36 <__fp_pscA>:
    4e36:	00 24       	eor	r0, r0
    4e38:	0a 94       	dec	r0
    4e3a:	16 16       	cp	r1, r22
    4e3c:	17 06       	cpc	r1, r23
    4e3e:	18 06       	cpc	r1, r24
    4e40:	09 06       	cpc	r0, r25
    4e42:	08 95       	ret

00004e44 <__fp_pscB>:
    4e44:	00 24       	eor	r0, r0
    4e46:	0a 94       	dec	r0
    4e48:	12 16       	cp	r1, r18
    4e4a:	13 06       	cpc	r1, r19
    4e4c:	14 06       	cpc	r1, r20
    4e4e:	05 06       	cpc	r0, r21
    4e50:	08 95       	ret

00004e52 <__fp_round>:
    4e52:	09 2e       	mov	r0, r25
    4e54:	03 94       	inc	r0
    4e56:	00 0c       	add	r0, r0
    4e58:	11 f4       	brne	.+4      	; 0x4e5e <__fp_round+0xc>
    4e5a:	88 23       	and	r24, r24
    4e5c:	52 f0       	brmi	.+20     	; 0x4e72 <__fp_round+0x20>
    4e5e:	bb 0f       	add	r27, r27
    4e60:	40 f4       	brcc	.+16     	; 0x4e72 <__fp_round+0x20>
    4e62:	bf 2b       	or	r27, r31
    4e64:	11 f4       	brne	.+4      	; 0x4e6a <__fp_round+0x18>
    4e66:	60 ff       	sbrs	r22, 0
    4e68:	04 c0       	rjmp	.+8      	; 0x4e72 <__fp_round+0x20>
    4e6a:	6f 5f       	subi	r22, 0xFF	; 255
    4e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e70:	9f 4f       	sbci	r25, 0xFF	; 255
    4e72:	08 95       	ret

00004e74 <__fp_split3>:
    4e74:	57 fd       	sbrc	r21, 7
    4e76:	90 58       	subi	r25, 0x80	; 128
    4e78:	44 0f       	add	r20, r20
    4e7a:	55 1f       	adc	r21, r21
    4e7c:	59 f0       	breq	.+22     	; 0x4e94 <__fp_splitA+0x10>
    4e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    4e80:	71 f0       	breq	.+28     	; 0x4e9e <__fp_splitA+0x1a>
    4e82:	47 95       	ror	r20

00004e84 <__fp_splitA>:
    4e84:	88 0f       	add	r24, r24
    4e86:	97 fb       	bst	r25, 7
    4e88:	99 1f       	adc	r25, r25
    4e8a:	61 f0       	breq	.+24     	; 0x4ea4 <__fp_splitA+0x20>
    4e8c:	9f 3f       	cpi	r25, 0xFF	; 255
    4e8e:	79 f0       	breq	.+30     	; 0x4eae <__fp_splitA+0x2a>
    4e90:	87 95       	ror	r24
    4e92:	08 95       	ret
    4e94:	12 16       	cp	r1, r18
    4e96:	13 06       	cpc	r1, r19
    4e98:	14 06       	cpc	r1, r20
    4e9a:	55 1f       	adc	r21, r21
    4e9c:	f2 cf       	rjmp	.-28     	; 0x4e82 <__fp_split3+0xe>
    4e9e:	46 95       	lsr	r20
    4ea0:	f1 df       	rcall	.-30     	; 0x4e84 <__fp_splitA>
    4ea2:	08 c0       	rjmp	.+16     	; 0x4eb4 <__fp_splitA+0x30>
    4ea4:	16 16       	cp	r1, r22
    4ea6:	17 06       	cpc	r1, r23
    4ea8:	18 06       	cpc	r1, r24
    4eaa:	99 1f       	adc	r25, r25
    4eac:	f1 cf       	rjmp	.-30     	; 0x4e90 <__fp_splitA+0xc>
    4eae:	86 95       	lsr	r24
    4eb0:	71 05       	cpc	r23, r1
    4eb2:	61 05       	cpc	r22, r1
    4eb4:	08 94       	sec
    4eb6:	08 95       	ret

00004eb8 <__fp_zero>:
    4eb8:	e8 94       	clt

00004eba <__fp_szero>:
    4eba:	bb 27       	eor	r27, r27
    4ebc:	66 27       	eor	r22, r22
    4ebe:	77 27       	eor	r23, r23
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	97 f9       	bld	r25, 7
    4ec4:	08 95       	ret

00004ec6 <__mulsf3>:
    4ec6:	0b d0       	rcall	.+22     	; 0x4ede <__mulsf3x>
    4ec8:	c4 cf       	rjmp	.-120    	; 0x4e52 <__fp_round>
    4eca:	b5 df       	rcall	.-150    	; 0x4e36 <__fp_pscA>
    4ecc:	28 f0       	brcs	.+10     	; 0x4ed8 <__mulsf3+0x12>
    4ece:	ba df       	rcall	.-140    	; 0x4e44 <__fp_pscB>
    4ed0:	18 f0       	brcs	.+6      	; 0x4ed8 <__mulsf3+0x12>
    4ed2:	95 23       	and	r25, r21
    4ed4:	09 f0       	breq	.+2      	; 0x4ed8 <__mulsf3+0x12>
    4ed6:	a6 cf       	rjmp	.-180    	; 0x4e24 <__fp_inf>
    4ed8:	ab cf       	rjmp	.-170    	; 0x4e30 <__fp_nan>
    4eda:	11 24       	eor	r1, r1
    4edc:	ee cf       	rjmp	.-36     	; 0x4eba <__fp_szero>

00004ede <__mulsf3x>:
    4ede:	ca df       	rcall	.-108    	; 0x4e74 <__fp_split3>
    4ee0:	a0 f3       	brcs	.-24     	; 0x4eca <__mulsf3+0x4>

00004ee2 <__mulsf3_pse>:
    4ee2:	95 9f       	mul	r25, r21
    4ee4:	d1 f3       	breq	.-12     	; 0x4eda <__mulsf3+0x14>
    4ee6:	95 0f       	add	r25, r21
    4ee8:	50 e0       	ldi	r21, 0x00	; 0
    4eea:	55 1f       	adc	r21, r21
    4eec:	62 9f       	mul	r22, r18
    4eee:	f0 01       	movw	r30, r0
    4ef0:	72 9f       	mul	r23, r18
    4ef2:	bb 27       	eor	r27, r27
    4ef4:	f0 0d       	add	r31, r0
    4ef6:	b1 1d       	adc	r27, r1
    4ef8:	63 9f       	mul	r22, r19
    4efa:	aa 27       	eor	r26, r26
    4efc:	f0 0d       	add	r31, r0
    4efe:	b1 1d       	adc	r27, r1
    4f00:	aa 1f       	adc	r26, r26
    4f02:	64 9f       	mul	r22, r20
    4f04:	66 27       	eor	r22, r22
    4f06:	b0 0d       	add	r27, r0
    4f08:	a1 1d       	adc	r26, r1
    4f0a:	66 1f       	adc	r22, r22
    4f0c:	82 9f       	mul	r24, r18
    4f0e:	22 27       	eor	r18, r18
    4f10:	b0 0d       	add	r27, r0
    4f12:	a1 1d       	adc	r26, r1
    4f14:	62 1f       	adc	r22, r18
    4f16:	73 9f       	mul	r23, r19
    4f18:	b0 0d       	add	r27, r0
    4f1a:	a1 1d       	adc	r26, r1
    4f1c:	62 1f       	adc	r22, r18
    4f1e:	83 9f       	mul	r24, r19
    4f20:	a0 0d       	add	r26, r0
    4f22:	61 1d       	adc	r22, r1
    4f24:	22 1f       	adc	r18, r18
    4f26:	74 9f       	mul	r23, r20
    4f28:	33 27       	eor	r19, r19
    4f2a:	a0 0d       	add	r26, r0
    4f2c:	61 1d       	adc	r22, r1
    4f2e:	23 1f       	adc	r18, r19
    4f30:	84 9f       	mul	r24, r20
    4f32:	60 0d       	add	r22, r0
    4f34:	21 1d       	adc	r18, r1
    4f36:	82 2f       	mov	r24, r18
    4f38:	76 2f       	mov	r23, r22
    4f3a:	6a 2f       	mov	r22, r26
    4f3c:	11 24       	eor	r1, r1
    4f3e:	9f 57       	subi	r25, 0x7F	; 127
    4f40:	50 40       	sbci	r21, 0x00	; 0
    4f42:	8a f0       	brmi	.+34     	; 0x4f66 <__mulsf3_pse+0x84>
    4f44:	e1 f0       	breq	.+56     	; 0x4f7e <__mulsf3_pse+0x9c>
    4f46:	88 23       	and	r24, r24
    4f48:	4a f0       	brmi	.+18     	; 0x4f5c <__mulsf3_pse+0x7a>
    4f4a:	ee 0f       	add	r30, r30
    4f4c:	ff 1f       	adc	r31, r31
    4f4e:	bb 1f       	adc	r27, r27
    4f50:	66 1f       	adc	r22, r22
    4f52:	77 1f       	adc	r23, r23
    4f54:	88 1f       	adc	r24, r24
    4f56:	91 50       	subi	r25, 0x01	; 1
    4f58:	50 40       	sbci	r21, 0x00	; 0
    4f5a:	a9 f7       	brne	.-22     	; 0x4f46 <__mulsf3_pse+0x64>
    4f5c:	9e 3f       	cpi	r25, 0xFE	; 254
    4f5e:	51 05       	cpc	r21, r1
    4f60:	70 f0       	brcs	.+28     	; 0x4f7e <__mulsf3_pse+0x9c>
    4f62:	60 cf       	rjmp	.-320    	; 0x4e24 <__fp_inf>
    4f64:	aa cf       	rjmp	.-172    	; 0x4eba <__fp_szero>
    4f66:	5f 3f       	cpi	r21, 0xFF	; 255
    4f68:	ec f3       	brlt	.-6      	; 0x4f64 <__mulsf3_pse+0x82>
    4f6a:	98 3e       	cpi	r25, 0xE8	; 232
    4f6c:	dc f3       	brlt	.-10     	; 0x4f64 <__mulsf3_pse+0x82>
    4f6e:	86 95       	lsr	r24
    4f70:	77 95       	ror	r23
    4f72:	67 95       	ror	r22
    4f74:	b7 95       	ror	r27
    4f76:	f7 95       	ror	r31
    4f78:	e7 95       	ror	r30
    4f7a:	9f 5f       	subi	r25, 0xFF	; 255
    4f7c:	c1 f7       	brne	.-16     	; 0x4f6e <__mulsf3_pse+0x8c>
    4f7e:	fe 2b       	or	r31, r30
    4f80:	88 0f       	add	r24, r24
    4f82:	91 1d       	adc	r25, r1
    4f84:	96 95       	lsr	r25
    4f86:	87 95       	ror	r24
    4f88:	97 f9       	bld	r25, 7
    4f8a:	08 95       	ret

00004f8c <__unordsf2>:
    4f8c:	27 df       	rcall	.-434    	; 0x4ddc <__fp_cmp>
    4f8e:	88 0b       	sbc	r24, r24
    4f90:	99 0b       	sbc	r25, r25
    4f92:	08 95       	ret

00004f94 <__cxa_pure_virtual>:
    4f94:	0e 94 11 31 	call	0x6222	; 0x6222 <abort>

00004f98 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4f98:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4f9a:	91 8d       	ldd	r25, Z+25	; 0x19
    4f9c:	22 8d       	ldd	r18, Z+26	; 0x1a
    4f9e:	89 2f       	mov	r24, r25
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	80 5c       	subi	r24, 0xC0	; 192
    4fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    4fa6:	82 1b       	sub	r24, r18
    4fa8:	91 09       	sbc	r25, r1
}
    4faa:	8f 73       	andi	r24, 0x3F	; 63
    4fac:	99 27       	eor	r25, r25
    4fae:	08 95       	ret

00004fb0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4fb0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4fb2:	91 8d       	ldd	r25, Z+25	; 0x19
    4fb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fb6:	98 17       	cp	r25, r24
    4fb8:	31 f0       	breq	.+12     	; 0x4fc6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4fba:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fbc:	e8 0f       	add	r30, r24
    4fbe:	f1 1d       	adc	r31, r1
    4fc0:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4fc6:	8f ef       	ldi	r24, 0xFF	; 255
    4fc8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4fca:	08 95       	ret

00004fcc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4fcc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4fce:	91 8d       	ldd	r25, Z+25	; 0x19
    4fd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fd2:	98 17       	cp	r25, r24
    4fd4:	61 f0       	breq	.+24     	; 0x4fee <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4fd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fd8:	df 01       	movw	r26, r30
    4fda:	a8 0f       	add	r26, r24
    4fdc:	b1 1d       	adc	r27, r1
    4fde:	5d 96       	adiw	r26, 0x1d	; 29
    4fe0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4fe2:	92 8d       	ldd	r25, Z+26	; 0x1a
    4fe4:	9f 5f       	subi	r25, 0xFF	; 255
    4fe6:	9f 73       	andi	r25, 0x3F	; 63
    4fe8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4fee:	8f ef       	ldi	r24, 0xFF	; 255
    4ff0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4ff2:	08 95       	ret

00004ff4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    4ff8:	44 8d       	ldd	r20, Z+28	; 0x1c
    4ffa:	25 2f       	mov	r18, r21
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	84 2f       	mov	r24, r20
    5000:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5002:	82 1b       	sub	r24, r18
    5004:	93 0b       	sbc	r25, r19
    5006:	54 17       	cp	r21, r20
    5008:	10 f0       	brcs	.+4      	; 0x500e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    500a:	cf 96       	adiw	r24, 0x3f	; 63
    500c:	08 95       	ret
  return tail - head - 1;
    500e:	01 97       	sbiw	r24, 0x01	; 1
}
    5010:	08 95       	ret

00005012 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5012:	86 e9       	ldi	r24, 0x96	; 150
    5014:	99 e2       	ldi	r25, 0x29	; 41
    5016:	89 2b       	or	r24, r25
    5018:	39 f0       	breq	.+14     	; 0x5028 <_Z14serialEventRunv+0x16>
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	89 2b       	or	r24, r25
    5020:	19 f0       	breq	.+6      	; 0x5028 <_Z14serialEventRunv+0x16>
    5022:	84 d1       	rcall	.+776    	; 0x532c <_Z17Serial0_availablev>
    5024:	81 11       	cpse	r24, r1
    5026:	25 c0       	rjmp	.+74     	; 0x5072 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5028:	80 e0       	ldi	r24, 0x00	; 0
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	89 2b       	or	r24, r25
    502e:	41 f0       	breq	.+16     	; 0x5040 <_Z14serialEventRunv+0x2e>
    5030:	80 e0       	ldi	r24, 0x00	; 0
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	89 2b       	or	r24, r25
    5036:	21 f0       	breq	.+8      	; 0x5040 <_Z14serialEventRunv+0x2e>
    5038:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    503c:	81 11       	cpse	r24, r1
    503e:	1c c0       	rjmp	.+56     	; 0x5078 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	89 2b       	or	r24, r25
    5046:	41 f0       	breq	.+16     	; 0x5058 <_Z14serialEventRunv+0x46>
    5048:	80 e0       	ldi	r24, 0x00	; 0
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	89 2b       	or	r24, r25
    504e:	21 f0       	breq	.+8      	; 0x5058 <_Z14serialEventRunv+0x46>
    5050:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5054:	81 11       	cpse	r24, r1
    5056:	13 c0       	rjmp	.+38     	; 0x507e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	89 2b       	or	r24, r25
    505e:	a1 f0       	breq	.+40     	; 0x5088 <_Z14serialEventRunv+0x76>
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	89 2b       	or	r24, r25
    5066:	81 f0       	breq	.+32     	; 0x5088 <_Z14serialEventRunv+0x76>
    5068:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    506c:	81 11       	cpse	r24, r1
    506e:	0a c0       	rjmp	.+20     	; 0x5084 <_Z14serialEventRunv+0x72>
    5070:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5072:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5076:	d8 cf       	rjmp	.-80     	; 0x5028 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5078:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    507c:	e1 cf       	rjmp	.-62     	; 0x5040 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    507e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5082:	ea cf       	rjmp	.-44     	; 0x5058 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5084:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5088:	08 95       	ret

0000508a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    508a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    508c:	84 8d       	ldd	r24, Z+28	; 0x1c
    508e:	df 01       	movw	r26, r30
    5090:	a8 0f       	add	r26, r24
    5092:	b1 1d       	adc	r27, r1
    5094:	a3 5a       	subi	r26, 0xA3	; 163
    5096:	bf 4f       	sbci	r27, 0xFF	; 255
    5098:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    509a:	84 8d       	ldd	r24, Z+28	; 0x1c
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	01 96       	adiw	r24, 0x01	; 1
    50a0:	8f 73       	andi	r24, 0x3F	; 63
    50a2:	99 27       	eor	r25, r25
    50a4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    50a6:	a6 89       	ldd	r26, Z+22	; 0x16
    50a8:	b7 89       	ldd	r27, Z+23	; 0x17
    50aa:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    50ac:	a0 89       	ldd	r26, Z+16	; 0x10
    50ae:	b1 89       	ldd	r27, Z+17	; 0x11
    50b0:	8c 91       	ld	r24, X
    50b2:	83 70       	andi	r24, 0x03	; 3
    50b4:	80 64       	ori	r24, 0x40	; 64
    50b6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    50b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    50ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    50bc:	98 13       	cpse	r25, r24
    50be:	06 c0       	rjmp	.+12     	; 0x50cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    50c0:	02 88       	ldd	r0, Z+18	; 0x12
    50c2:	f3 89       	ldd	r31, Z+19	; 0x13
    50c4:	e0 2d       	mov	r30, r0
    50c6:	80 81       	ld	r24, Z
    50c8:	8f 7d       	andi	r24, 0xDF	; 223
    50ca:	80 83       	st	Z, r24
    50cc:	08 95       	ret

000050ce <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    50ce:	ef 92       	push	r14
    50d0:	ff 92       	push	r15
    50d2:	0f 93       	push	r16
    50d4:	1f 93       	push	r17
    50d6:	cf 93       	push	r28
    50d8:	df 93       	push	r29
    50da:	ec 01       	movw	r28, r24
  _written = true;
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    50e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    50e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    50e4:	98 13       	cpse	r25, r24
    50e6:	05 c0       	rjmp	.+10     	; 0x50f2 <_ZN14HardwareSerial5writeEh+0x24>
    50e8:	e8 89       	ldd	r30, Y+16	; 0x10
    50ea:	f9 89       	ldd	r31, Y+17	; 0x11
    50ec:	80 81       	ld	r24, Z
    50ee:	85 fd       	sbrc	r24, 5
    50f0:	25 c0       	rjmp	.+74     	; 0x513c <_ZN14HardwareSerial5writeEh+0x6e>
    50f2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    50f4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    50f6:	10 e0       	ldi	r17, 0x00	; 0
    50f8:	0f 5f       	subi	r16, 0xFF	; 255
    50fa:	1f 4f       	sbci	r17, 0xFF	; 255
    50fc:	0f 73       	andi	r16, 0x3F	; 63
    50fe:	11 27       	eor	r17, r17
    5100:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5102:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5104:	e8 12       	cpse	r14, r24
    5106:	0b c0       	rjmp	.+22     	; 0x511e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	07 fc       	sbrc	r0, 7
    510c:	fa cf       	rjmp	.-12     	; 0x5102 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    510e:	e8 89       	ldd	r30, Y+16	; 0x10
    5110:	f9 89       	ldd	r31, Y+17	; 0x11
    5112:	80 81       	ld	r24, Z
    5114:	85 ff       	sbrs	r24, 5
    5116:	f5 cf       	rjmp	.-22     	; 0x5102 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5118:	ce 01       	movw	r24, r28
    511a:	b7 df       	rcall	.-146    	; 0x508a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    511c:	f2 cf       	rjmp	.-28     	; 0x5102 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    511e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5120:	fe 01       	movw	r30, r28
    5122:	e8 0f       	add	r30, r24
    5124:	f1 1d       	adc	r31, r1
    5126:	e3 5a       	subi	r30, 0xA3	; 163
    5128:	ff 4f       	sbci	r31, 0xFF	; 255
    512a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    512c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    512e:	f8 94       	cli
    _tx_buffer_head = i;
    5130:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5132:	ea 89       	ldd	r30, Y+18	; 0x12
    5134:	fb 89       	ldd	r31, Y+19	; 0x13
    5136:	80 81       	ld	r24, Z
    5138:	80 62       	ori	r24, 0x20	; 32
    513a:	0a c0       	rjmp	.+20     	; 0x5150 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    513c:	9f b7       	in	r25, 0x3f	; 63
    513e:	f8 94       	cli
      *_udr = c;
    5140:	ee 89       	ldd	r30, Y+22	; 0x16
    5142:	ff 89       	ldd	r31, Y+23	; 0x17
    5144:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5146:	e8 89       	ldd	r30, Y+16	; 0x10
    5148:	f9 89       	ldd	r31, Y+17	; 0x11
    514a:	80 81       	ld	r24, Z
    514c:	83 70       	andi	r24, 0x03	; 3
    514e:	80 64       	ori	r24, 0x40	; 64
    5150:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5152:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	1f 91       	pop	r17
    515e:	0f 91       	pop	r16
    5160:	ff 90       	pop	r15
    5162:	ef 90       	pop	r14
    5164:	08 95       	ret

00005166 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    516c:	88 8d       	ldd	r24, Y+24	; 0x18
    516e:	88 23       	and	r24, r24
    5170:	c1 f0       	breq	.+48     	; 0x51a2 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5172:	ea 89       	ldd	r30, Y+18	; 0x12
    5174:	fb 89       	ldd	r31, Y+19	; 0x13
    5176:	80 81       	ld	r24, Z
    5178:	85 fd       	sbrc	r24, 5
    517a:	05 c0       	rjmp	.+10     	; 0x5186 <_ZN14HardwareSerial5flushEv+0x20>
    517c:	a8 89       	ldd	r26, Y+16	; 0x10
    517e:	b9 89       	ldd	r27, Y+17	; 0x11
    5180:	8c 91       	ld	r24, X
    5182:	86 fd       	sbrc	r24, 6
    5184:	0e c0       	rjmp	.+28     	; 0x51a2 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5186:	0f b6       	in	r0, 0x3f	; 63
    5188:	07 fc       	sbrc	r0, 7
    518a:	f5 cf       	rjmp	.-22     	; 0x5176 <_ZN14HardwareSerial5flushEv+0x10>
    518c:	80 81       	ld	r24, Z
    518e:	85 ff       	sbrs	r24, 5
    5190:	f2 cf       	rjmp	.-28     	; 0x5176 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5192:	a8 89       	ldd	r26, Y+16	; 0x10
    5194:	b9 89       	ldd	r27, Y+17	; 0x11
    5196:	8c 91       	ld	r24, X
    5198:	85 ff       	sbrs	r24, 5
    519a:	ed cf       	rjmp	.-38     	; 0x5176 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    519c:	ce 01       	movw	r24, r28
    519e:	75 df       	rcall	.-278    	; 0x508a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    51a0:	e8 cf       	rjmp	.-48     	; 0x5172 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	08 95       	ret

000051a8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    51a8:	cf 92       	push	r12
    51aa:	df 92       	push	r13
    51ac:	ef 92       	push	r14
    51ae:	ff 92       	push	r15
    51b0:	1f 93       	push	r17
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	ec 01       	movw	r28, r24
    51b8:	6a 01       	movw	r12, r20
    51ba:	7b 01       	movw	r14, r22
    51bc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    51be:	e8 89       	ldd	r30, Y+16	; 0x10
    51c0:	f9 89       	ldd	r31, Y+17	; 0x11
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    51c6:	41 15       	cp	r20, r1
    51c8:	51 4e       	sbci	r21, 0xE1	; 225
    51ca:	61 05       	cpc	r22, r1
    51cc:	71 05       	cpc	r23, r1
    51ce:	a9 f0       	breq	.+42     	; 0x51fa <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    51d0:	60 e0       	ldi	r22, 0x00	; 0
    51d2:	79 e0       	ldi	r23, 0x09	; 9
    51d4:	8d e3       	ldi	r24, 0x3D	; 61
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	a7 01       	movw	r20, r14
    51da:	96 01       	movw	r18, r12
    51dc:	c2 d5       	rcall	.+2948   	; 0x5d62 <__udivmodsi4>
    51de:	da 01       	movw	r26, r20
    51e0:	c9 01       	movw	r24, r18
    51e2:	01 97       	sbiw	r24, 0x01	; 1
    51e4:	a1 09       	sbc	r26, r1
    51e6:	b1 09       	sbc	r27, r1
    51e8:	b6 95       	lsr	r27
    51ea:	a7 95       	ror	r26
    51ec:	97 95       	ror	r25
    51ee:	87 95       	ror	r24
    51f0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    51f2:	21 15       	cp	r18, r1
    51f4:	80 e1       	ldi	r24, 0x10	; 16
    51f6:	38 07       	cpc	r19, r24
    51f8:	a0 f0       	brcs	.+40     	; 0x5222 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    51fa:	e8 89       	ldd	r30, Y+16	; 0x10
    51fc:	f9 89       	ldd	r31, Y+17	; 0x11
    51fe:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5200:	60 e8       	ldi	r22, 0x80	; 128
    5202:	74 e8       	ldi	r23, 0x84	; 132
    5204:	8e e1       	ldi	r24, 0x1E	; 30
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	a7 01       	movw	r20, r14
    520a:	96 01       	movw	r18, r12
    520c:	aa d5       	rcall	.+2900   	; 0x5d62 <__udivmodsi4>
    520e:	da 01       	movw	r26, r20
    5210:	c9 01       	movw	r24, r18
    5212:	01 97       	sbiw	r24, 0x01	; 1
    5214:	a1 09       	sbc	r26, r1
    5216:	b1 09       	sbc	r27, r1
    5218:	b6 95       	lsr	r27
    521a:	a7 95       	ror	r26
    521c:	97 95       	ror	r25
    521e:	87 95       	ror	r24
    5220:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5222:	ec 85       	ldd	r30, Y+12	; 0x0c
    5224:	fd 85       	ldd	r31, Y+13	; 0x0d
    5226:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5228:	ee 85       	ldd	r30, Y+14	; 0x0e
    522a:	ff 85       	ldd	r31, Y+15	; 0x0f
    522c:	20 83       	st	Z, r18

  _written = false;
    522e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5230:	ec 89       	ldd	r30, Y+20	; 0x14
    5232:	fd 89       	ldd	r31, Y+21	; 0x15
    5234:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5236:	ea 89       	ldd	r30, Y+18	; 0x12
    5238:	fb 89       	ldd	r31, Y+19	; 0x13
    523a:	80 81       	ld	r24, Z
    523c:	80 61       	ori	r24, 0x10	; 16
    523e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5240:	ea 89       	ldd	r30, Y+18	; 0x12
    5242:	fb 89       	ldd	r31, Y+19	; 0x13
    5244:	80 81       	ld	r24, Z
    5246:	88 60       	ori	r24, 0x08	; 8
    5248:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    524a:	ea 89       	ldd	r30, Y+18	; 0x12
    524c:	fb 89       	ldd	r31, Y+19	; 0x13
    524e:	80 81       	ld	r24, Z
    5250:	80 68       	ori	r24, 0x80	; 128
    5252:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5254:	ea 89       	ldd	r30, Y+18	; 0x12
    5256:	fb 89       	ldd	r31, Y+19	; 0x13
    5258:	80 81       	ld	r24, Z
    525a:	8f 7d       	andi	r24, 0xDF	; 223
    525c:	80 83       	st	Z, r24
}
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	1f 91       	pop	r17
    5264:	ff 90       	pop	r15
    5266:	ef 90       	pop	r14
    5268:	df 90       	pop	r13
    526a:	cf 90       	pop	r12
    526c:	08 95       	ret

0000526e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    526e:	1f 92       	push	r1
    5270:	0f 92       	push	r0
    5272:	0f b6       	in	r0, 0x3f	; 63
    5274:	0f 92       	push	r0
    5276:	11 24       	eor	r1, r1
    5278:	0b b6       	in	r0, 0x3b	; 59
    527a:	0f 92       	push	r0
    527c:	2f 93       	push	r18
    527e:	8f 93       	push	r24
    5280:	9f 93       	push	r25
    5282:	ef 93       	push	r30
    5284:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5286:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <Serial+0x10>
    528a:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <Serial+0x11>
    528e:	80 81       	ld	r24, Z
    5290:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <Serial+0x16>
    5294:	f0 91 c7 04 	lds	r31, 0x04C7	; 0x8004c7 <Serial+0x17>
    5298:	82 fd       	sbrc	r24, 2
    529a:	12 c0       	rjmp	.+36     	; 0x52c0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    529c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    529e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <Serial+0x19>
    52a2:	8f 5f       	subi	r24, 0xFF	; 255
    52a4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    52a6:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <Serial+0x1a>
    52aa:	82 17       	cp	r24, r18
    52ac:	51 f0       	breq	.+20     	; 0x52c2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    52ae:	e0 91 c9 04 	lds	r30, 0x04C9	; 0x8004c9 <Serial+0x19>
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	e0 55       	subi	r30, 0x50	; 80
    52b6:	fb 4f       	sbci	r31, 0xFB	; 251
    52b8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    52ba:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <Serial+0x19>
    52be:	01 c0       	rjmp	.+2      	; 0x52c2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    52c0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    52c2:	ff 91       	pop	r31
    52c4:	ef 91       	pop	r30
    52c6:	9f 91       	pop	r25
    52c8:	8f 91       	pop	r24
    52ca:	2f 91       	pop	r18
    52cc:	0f 90       	pop	r0
    52ce:	0b be       	out	0x3b, r0	; 59
    52d0:	0f 90       	pop	r0
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	0f 90       	pop	r0
    52d6:	1f 90       	pop	r1
    52d8:	18 95       	reti

000052da <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    52da:	1f 92       	push	r1
    52dc:	0f 92       	push	r0
    52de:	0f b6       	in	r0, 0x3f	; 63
    52e0:	0f 92       	push	r0
    52e2:	11 24       	eor	r1, r1
    52e4:	0b b6       	in	r0, 0x3b	; 59
    52e6:	0f 92       	push	r0
    52e8:	2f 93       	push	r18
    52ea:	3f 93       	push	r19
    52ec:	4f 93       	push	r20
    52ee:	5f 93       	push	r21
    52f0:	6f 93       	push	r22
    52f2:	7f 93       	push	r23
    52f4:	8f 93       	push	r24
    52f6:	9f 93       	push	r25
    52f8:	af 93       	push	r26
    52fa:	bf 93       	push	r27
    52fc:	ef 93       	push	r30
    52fe:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5300:	80 eb       	ldi	r24, 0xB0	; 176
    5302:	94 e0       	ldi	r25, 0x04	; 4
    5304:	c2 de       	rcall	.-636    	; 0x508a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5306:	ff 91       	pop	r31
    5308:	ef 91       	pop	r30
    530a:	bf 91       	pop	r27
    530c:	af 91       	pop	r26
    530e:	9f 91       	pop	r25
    5310:	8f 91       	pop	r24
    5312:	7f 91       	pop	r23
    5314:	6f 91       	pop	r22
    5316:	5f 91       	pop	r21
    5318:	4f 91       	pop	r20
    531a:	3f 91       	pop	r19
    531c:	2f 91       	pop	r18
    531e:	0f 90       	pop	r0
    5320:	0b be       	out	0x3b, r0	; 59
    5322:	0f 90       	pop	r0
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	0f 90       	pop	r0
    5328:	1f 90       	pop	r1
    532a:	18 95       	reti

0000532c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    532c:	80 eb       	ldi	r24, 0xB0	; 176
    532e:	94 e0       	ldi	r25, 0x04	; 4
    5330:	33 de       	rcall	.-922    	; 0x4f98 <_ZN14HardwareSerial9availableEv>
    5332:	21 e0       	ldi	r18, 0x01	; 1
    5334:	89 2b       	or	r24, r25
    5336:	09 f4       	brne	.+2      	; 0x533a <_Z17Serial0_availablev+0xe>
    5338:	20 e0       	ldi	r18, 0x00	; 0
}
    533a:	82 2f       	mov	r24, r18
    533c:	08 95       	ret

0000533e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    533e:	e0 eb       	ldi	r30, 0xB0	; 176
    5340:	f4 e0       	ldi	r31, 0x04	; 4
    5342:	13 82       	std	Z+3, r1	; 0x03
    5344:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5346:	88 ee       	ldi	r24, 0xE8	; 232
    5348:	93 e0       	ldi	r25, 0x03	; 3
    534a:	a0 e0       	ldi	r26, 0x00	; 0
    534c:	b0 e0       	ldi	r27, 0x00	; 0
    534e:	84 83       	std	Z+4, r24	; 0x04
    5350:	95 83       	std	Z+5, r25	; 0x05
    5352:	a6 83       	std	Z+6, r26	; 0x06
    5354:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5356:	89 ed       	ldi	r24, 0xD9	; 217
    5358:	92 e0       	ldi	r25, 0x02	; 2
    535a:	91 83       	std	Z+1, r25	; 0x01
    535c:	80 83       	st	Z, r24
    535e:	85 ec       	ldi	r24, 0xC5	; 197
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	95 87       	std	Z+13, r25	; 0x0d
    5364:	84 87       	std	Z+12, r24	; 0x0c
    5366:	84 ec       	ldi	r24, 0xC4	; 196
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	97 87       	std	Z+15, r25	; 0x0f
    536c:	86 87       	std	Z+14, r24	; 0x0e
    536e:	80 ec       	ldi	r24, 0xC0	; 192
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	91 8b       	std	Z+17, r25	; 0x11
    5374:	80 8b       	std	Z+16, r24	; 0x10
    5376:	81 ec       	ldi	r24, 0xC1	; 193
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	93 8b       	std	Z+19, r25	; 0x13
    537c:	82 8b       	std	Z+18, r24	; 0x12
    537e:	82 ec       	ldi	r24, 0xC2	; 194
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	95 8b       	std	Z+21, r25	; 0x15
    5384:	84 8b       	std	Z+20, r24	; 0x14
    5386:	86 ec       	ldi	r24, 0xC6	; 198
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	97 8b       	std	Z+23, r25	; 0x17
    538c:	86 8b       	std	Z+22, r24	; 0x16
    538e:	11 8e       	std	Z+25, r1	; 0x19
    5390:	12 8e       	std	Z+26, r1	; 0x1a
    5392:	13 8e       	std	Z+27, r1	; 0x1b
    5394:	14 8e       	std	Z+28, r1	; 0x1c
    5396:	08 95       	ret

00005398 <initVariant>:
    5398:	08 95       	ret

0000539a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    539a:	c8 d1       	rcall	.+912    	; 0x572c <init>

	initVariant();
    539c:	fd df       	rcall	.-6      	; 0x5398 <initVariant>
    539e:	0e 94 0c 03 	call	0x618	; 0x618 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    53a2:	c9 e0       	ldi	r28, 0x09	; 9
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    53a4:	d8 e2       	ldi	r29, 0x28	; 40
    53a6:	0e 94 b7 03 	call	0x76e	; 0x76e <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    53aa:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    53ac:	e1 f3       	breq	.-8      	; 0x53a6 <main+0xc>
    53ae:	31 de       	rcall	.-926    	; 0x5012 <_Z14serialEventRunv>
    53b0:	fa cf       	rjmp	.-12     	; 0x53a6 <main+0xc>

000053b2 <_ZdlPv>:
    53b2:	ce c5       	rjmp	.+2972   	; 0x5f50 <free>

000053b4 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    53b4:	cf 92       	push	r12
    53b6:	df 92       	push	r13
    53b8:	ef 92       	push	r14
    53ba:	ff 92       	push	r15
    53bc:	0f 93       	push	r16
    53be:	1f 93       	push	r17
    53c0:	cf 93       	push	r28
    53c2:	df 93       	push	r29
    53c4:	6c 01       	movw	r12, r24
    53c6:	7a 01       	movw	r14, r20
    53c8:	8b 01       	movw	r16, r22
    53ca:	c0 e0       	ldi	r28, 0x00	; 0
    53cc:	d0 e0       	ldi	r29, 0x00	; 0
    53ce:	ce 15       	cp	r28, r14
    53d0:	df 05       	cpc	r29, r15
    53d2:	81 f0       	breq	.+32     	; 0x53f4 <_ZN5Print5writeEPKhj+0x40>
    53d4:	d8 01       	movw	r26, r16
    53d6:	6d 91       	ld	r22, X+
    53d8:	8d 01       	movw	r16, r26
    53da:	d6 01       	movw	r26, r12
    53dc:	ed 91       	ld	r30, X+
    53de:	fc 91       	ld	r31, X
    53e0:	01 90       	ld	r0, Z+
    53e2:	f0 81       	ld	r31, Z
    53e4:	e0 2d       	mov	r30, r0
    53e6:	c6 01       	movw	r24, r12
    53e8:	19 95       	eicall
    53ea:	89 2b       	or	r24, r25
    53ec:	11 f0       	breq	.+4      	; 0x53f2 <_ZN5Print5writeEPKhj+0x3e>
    53ee:	21 96       	adiw	r28, 0x01	; 1
    53f0:	ee cf       	rjmp	.-36     	; 0x53ce <_ZN5Print5writeEPKhj+0x1a>
    53f2:	7e 01       	movw	r14, r28
    53f4:	c7 01       	movw	r24, r14
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	1f 91       	pop	r17
    53fc:	0f 91       	pop	r16
    53fe:	ff 90       	pop	r15
    5400:	ef 90       	pop	r14
    5402:	df 90       	pop	r13
    5404:	cf 90       	pop	r12
    5406:	08 95       	ret

00005408 <_ZN5Print5printEPKc>:
    5408:	0c 94 86 01 	jmp	0x30c	; 0x30c <_ZN5Print5writeEPKc>

0000540c <_ZN5Print5printEc>:
    540c:	dc 01       	movw	r26, r24
    540e:	ed 91       	ld	r30, X+
    5410:	fc 91       	ld	r31, X
    5412:	01 90       	ld	r0, Z+
    5414:	f0 81       	ld	r31, Z
    5416:	e0 2d       	mov	r30, r0
    5418:	19 94       	eijmp

0000541a <_ZN5Print7printlnEv>:
    541a:	67 ee       	ldi	r22, 0xE7	; 231
    541c:	72 e0       	ldi	r23, 0x02	; 2
    541e:	0c 94 86 01 	jmp	0x30c	; 0x30c <_ZN5Print5writeEPKc>

00005422 <_ZN5Print7printlnEPKc>:
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	ec 01       	movw	r28, r24
    542c:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN5Print5writeEPKc>
    5430:	8c 01       	movw	r16, r24
    5432:	ce 01       	movw	r24, r28
    5434:	f2 df       	rcall	.-28     	; 0x541a <_ZN5Print7printlnEv>
    5436:	80 0f       	add	r24, r16
    5438:	91 1f       	adc	r25, r17
    543a:	df 91       	pop	r29
    543c:	cf 91       	pop	r28
    543e:	1f 91       	pop	r17
    5440:	0f 91       	pop	r16
    5442:	08 95       	ret

00005444 <_ZN5Print11printNumberEmh>:
    5444:	8f 92       	push	r8
    5446:	9f 92       	push	r9
    5448:	af 92       	push	r10
    544a:	bf 92       	push	r11
    544c:	ef 92       	push	r14
    544e:	ff 92       	push	r15
    5450:	0f 93       	push	r16
    5452:	1f 93       	push	r17
    5454:	cf 93       	push	r28
    5456:	df 93       	push	r29
    5458:	cd b7       	in	r28, 0x3d	; 61
    545a:	de b7       	in	r29, 0x3e	; 62
    545c:	a1 97       	sbiw	r28, 0x21	; 33
    545e:	0f b6       	in	r0, 0x3f	; 63
    5460:	f8 94       	cli
    5462:	de bf       	out	0x3e, r29	; 62
    5464:	0f be       	out	0x3f, r0	; 63
    5466:	cd bf       	out	0x3d, r28	; 61
    5468:	7c 01       	movw	r14, r24
    546a:	fa 01       	movw	r30, r20
    546c:	cb 01       	movw	r24, r22
    546e:	19 a2       	std	Y+33, r1	; 0x21
    5470:	22 30       	cpi	r18, 0x02	; 2
    5472:	08 f4       	brcc	.+2      	; 0x5476 <_ZN5Print11printNumberEmh+0x32>
    5474:	2a e0       	ldi	r18, 0x0A	; 10
    5476:	8e 01       	movw	r16, r28
    5478:	0f 5d       	subi	r16, 0xDF	; 223
    547a:	1f 4f       	sbci	r17, 0xFF	; 255
    547c:	82 2e       	mov	r8, r18
    547e:	91 2c       	mov	r9, r1
    5480:	a1 2c       	mov	r10, r1
    5482:	b1 2c       	mov	r11, r1
    5484:	bf 01       	movw	r22, r30
    5486:	a5 01       	movw	r20, r10
    5488:	94 01       	movw	r18, r8
    548a:	6b d4       	rcall	.+2262   	; 0x5d62 <__udivmodsi4>
    548c:	f9 01       	movw	r30, r18
    548e:	ca 01       	movw	r24, r20
    5490:	01 50       	subi	r16, 0x01	; 1
    5492:	11 09       	sbc	r17, r1
    5494:	6a 30       	cpi	r22, 0x0A	; 10
    5496:	10 f4       	brcc	.+4      	; 0x549c <_ZN5Print11printNumberEmh+0x58>
    5498:	60 5d       	subi	r22, 0xD0	; 208
    549a:	01 c0       	rjmp	.+2      	; 0x549e <_ZN5Print11printNumberEmh+0x5a>
    549c:	69 5c       	subi	r22, 0xC9	; 201
    549e:	d8 01       	movw	r26, r16
    54a0:	6c 93       	st	X, r22
    54a2:	23 2b       	or	r18, r19
    54a4:	24 2b       	or	r18, r20
    54a6:	25 2b       	or	r18, r21
    54a8:	69 f7       	brne	.-38     	; 0x5484 <_ZN5Print11printNumberEmh+0x40>
    54aa:	b8 01       	movw	r22, r16
    54ac:	c7 01       	movw	r24, r14
    54ae:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN5Print5writeEPKc>
    54b2:	a1 96       	adiw	r28, 0x21	; 33
    54b4:	0f b6       	in	r0, 0x3f	; 63
    54b6:	f8 94       	cli
    54b8:	de bf       	out	0x3e, r29	; 62
    54ba:	0f be       	out	0x3f, r0	; 63
    54bc:	cd bf       	out	0x3d, r28	; 61
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	1f 91       	pop	r17
    54c4:	0f 91       	pop	r16
    54c6:	ff 90       	pop	r15
    54c8:	ef 90       	pop	r14
    54ca:	bf 90       	pop	r11
    54cc:	af 90       	pop	r10
    54ce:	9f 90       	pop	r9
    54d0:	8f 90       	pop	r8
    54d2:	08 95       	ret

000054d4 <_ZN5Print5printEmi>:
    54d4:	21 15       	cp	r18, r1
    54d6:	31 05       	cpc	r19, r1
    54d8:	41 f4       	brne	.+16     	; 0x54ea <_ZN5Print5printEmi+0x16>
    54da:	dc 01       	movw	r26, r24
    54dc:	ed 91       	ld	r30, X+
    54de:	fc 91       	ld	r31, X
    54e0:	01 90       	ld	r0, Z+
    54e2:	f0 81       	ld	r31, Z
    54e4:	e0 2d       	mov	r30, r0
    54e6:	64 2f       	mov	r22, r20
    54e8:	19 94       	eijmp
    54ea:	ac cf       	rjmp	.-168    	; 0x5444 <_ZN5Print11printNumberEmh>

000054ec <_ZN5Print5printEhi>:
    54ec:	9a 01       	movw	r18, r20
    54ee:	46 2f       	mov	r20, r22
    54f0:	50 e0       	ldi	r21, 0x00	; 0
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	ee cf       	rjmp	.-36     	; 0x54d4 <_ZN5Print5printEmi>

000054f8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    54f8:	cf 92       	push	r12
    54fa:	df 92       	push	r13
    54fc:	ef 92       	push	r14
    54fe:	ff 92       	push	r15
    5500:	0f 93       	push	r16
    5502:	1f 93       	push	r17
    5504:	cf 93       	push	r28
    5506:	df 93       	push	r29
  if (base == 0) {
    5508:	21 15       	cp	r18, r1
    550a:	31 05       	cpc	r19, r1
    550c:	81 f4       	brne	.+32     	; 0x552e <_ZN5Print5printEli+0x36>
    return write(n);
    550e:	dc 01       	movw	r26, r24
    5510:	ed 91       	ld	r30, X+
    5512:	fc 91       	ld	r31, X
    5514:	01 90       	ld	r0, Z+
    5516:	f0 81       	ld	r31, Z
    5518:	e0 2d       	mov	r30, r0
    551a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    551c:	df 91       	pop	r29
    551e:	cf 91       	pop	r28
    5520:	1f 91       	pop	r17
    5522:	0f 91       	pop	r16
    5524:	ff 90       	pop	r15
    5526:	ef 90       	pop	r14
    5528:	df 90       	pop	r13
    552a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    552c:	19 94       	eijmp
  } else if (base == 10) {
    552e:	2a 30       	cpi	r18, 0x0A	; 10
    5530:	31 05       	cpc	r19, r1
    5532:	f1 f4       	brne	.+60     	; 0x5570 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    5534:	77 ff       	sbrs	r23, 7
    5536:	1b c0       	rjmp	.+54     	; 0x556e <_ZN5Print5printEli+0x76>
    5538:	6a 01       	movw	r12, r20
    553a:	7b 01       	movw	r14, r22
    553c:	ec 01       	movw	r28, r24
      int t = print('-');
    553e:	6d e2       	ldi	r22, 0x2D	; 45
    5540:	65 df       	rcall	.-310    	; 0x540c <_ZN5Print5printEc>
    5542:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    5544:	44 27       	eor	r20, r20
    5546:	55 27       	eor	r21, r21
    5548:	ba 01       	movw	r22, r20
    554a:	4c 19       	sub	r20, r12
    554c:	5d 09       	sbc	r21, r13
    554e:	6e 09       	sbc	r22, r14
    5550:	7f 09       	sbc	r23, r15
    5552:	2a e0       	ldi	r18, 0x0A	; 10
    5554:	ce 01       	movw	r24, r28
    5556:	76 df       	rcall	.-276    	; 0x5444 <_ZN5Print11printNumberEmh>
    5558:	80 0f       	add	r24, r16
    555a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    555c:	df 91       	pop	r29
    555e:	cf 91       	pop	r28
    5560:	1f 91       	pop	r17
    5562:	0f 91       	pop	r16
    5564:	ff 90       	pop	r15
    5566:	ef 90       	pop	r14
    5568:	df 90       	pop	r13
    556a:	cf 90       	pop	r12
    556c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    556e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	1f 91       	pop	r17
    5576:	0f 91       	pop	r16
    5578:	ff 90       	pop	r15
    557a:	ef 90       	pop	r14
    557c:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    557e:	cf 90       	pop	r12
    5580:	61 cf       	rjmp	.-318    	; 0x5444 <_ZN5Print11printNumberEmh>

00005582 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    5582:	9a 01       	movw	r18, r20
  return print((long) n, base);
    5584:	ab 01       	movw	r20, r22
    5586:	77 0f       	add	r23, r23
    5588:	66 0b       	sbc	r22, r22
    558a:	77 0b       	sbc	r23, r23
    558c:	b5 cf       	rjmp	.-150    	; 0x54f8 <_ZN5Print5printEli>

0000558e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    558e:	0f 93       	push	r16
    5590:	1f 93       	push	r17
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    5598:	f4 df       	rcall	.-24     	; 0x5582 <_ZN5Print5printEii>
    559a:	8c 01       	movw	r16, r24
  n += println();
    559c:	ce 01       	movw	r24, r28
    559e:	3d df       	rcall	.-390    	; 0x541a <_ZN5Print7printlnEv>
  return n;
}
    55a0:	80 0f       	add	r24, r16
    55a2:	91 1f       	adc	r25, r17
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	08 95       	ret

000055ae <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    55ae:	1f 92       	push	r1
    55b0:	0f 92       	push	r0
    55b2:	0f b6       	in	r0, 0x3f	; 63
    55b4:	0f 92       	push	r0
    55b6:	11 24       	eor	r1, r1
    55b8:	2f 93       	push	r18
    55ba:	3f 93       	push	r19
    55bc:	8f 93       	push	r24
    55be:	9f 93       	push	r25
    55c0:	af 93       	push	r26
    55c2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    55c4:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <timer0_millis>
    55c8:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <timer0_millis+0x1>
    55cc:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <timer0_millis+0x2>
    55d0:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    55d4:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    55d8:	23 e0       	ldi	r18, 0x03	; 3
    55da:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    55dc:	2d 37       	cpi	r18, 0x7D	; 125
    55de:	20 f4       	brcc	.+8      	; 0x55e8 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    55e0:	01 96       	adiw	r24, 0x01	; 1
    55e2:	a1 1d       	adc	r26, r1
    55e4:	b1 1d       	adc	r27, r1
    55e6:	05 c0       	rjmp	.+10     	; 0x55f2 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    55e8:	26 e8       	ldi	r18, 0x86	; 134
    55ea:	23 0f       	add	r18, r19
		m += 1;
    55ec:	02 96       	adiw	r24, 0x02	; 2
    55ee:	a1 1d       	adc	r26, r1
    55f0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    55f2:	20 93 4d 05 	sts	0x054D, r18	; 0x80054d <timer0_fract>
	timer0_millis = m;
    55f6:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <timer0_millis>
    55fa:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <timer0_millis+0x1>
    55fe:	a0 93 50 05 	sts	0x0550, r26	; 0x800550 <timer0_millis+0x2>
    5602:	b0 93 51 05 	sts	0x0551, r27	; 0x800551 <timer0_millis+0x3>
	timer0_overflow_count++;
    5606:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <timer0_overflow_count>
    560a:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <timer0_overflow_count+0x1>
    560e:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <timer0_overflow_count+0x2>
    5612:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <timer0_overflow_count+0x3>
    5616:	01 96       	adiw	r24, 0x01	; 1
    5618:	a1 1d       	adc	r26, r1
    561a:	b1 1d       	adc	r27, r1
    561c:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <timer0_overflow_count>
    5620:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <timer0_overflow_count+0x1>
    5624:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <timer0_overflow_count+0x2>
    5628:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <timer0_overflow_count+0x3>
}
    562c:	bf 91       	pop	r27
    562e:	af 91       	pop	r26
    5630:	9f 91       	pop	r25
    5632:	8f 91       	pop	r24
    5634:	3f 91       	pop	r19
    5636:	2f 91       	pop	r18
    5638:	0f 90       	pop	r0
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	0f 90       	pop	r0
    563e:	1f 90       	pop	r1
    5640:	18 95       	reti

00005642 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5642:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5644:	f8 94       	cli
	m = timer0_millis;
    5646:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <timer0_millis>
    564a:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <timer0_millis+0x1>
    564e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <timer0_millis+0x2>
    5652:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <timer0_millis+0x3>
	SREG = oldSREG;
    5656:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5658:	08 95       	ret

0000565a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    565a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    565c:	f8 94       	cli
	m = timer0_overflow_count;
    565e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <timer0_overflow_count>
    5662:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <timer0_overflow_count+0x1>
    5666:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <timer0_overflow_count+0x2>
    566a:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    566e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5670:	a8 9b       	sbis	0x15, 0	; 21
    5672:	05 c0       	rjmp	.+10     	; 0x567e <micros+0x24>
    5674:	2f 3f       	cpi	r18, 0xFF	; 255
    5676:	19 f0       	breq	.+6      	; 0x567e <micros+0x24>
		m++;
    5678:	01 96       	adiw	r24, 0x01	; 1
    567a:	a1 1d       	adc	r26, r1
    567c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    567e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5680:	ba 2f       	mov	r27, r26
    5682:	a9 2f       	mov	r26, r25
    5684:	98 2f       	mov	r25, r24
    5686:	88 27       	eor	r24, r24
    5688:	82 0f       	add	r24, r18
    568a:	91 1d       	adc	r25, r1
    568c:	a1 1d       	adc	r26, r1
    568e:	b1 1d       	adc	r27, r1
    5690:	bc 01       	movw	r22, r24
    5692:	cd 01       	movw	r24, r26
    5694:	42 e0       	ldi	r20, 0x02	; 2
    5696:	66 0f       	add	r22, r22
    5698:	77 1f       	adc	r23, r23
    569a:	88 1f       	adc	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	4a 95       	dec	r20
    56a0:	d1 f7       	brne	.-12     	; 0x5696 <micros+0x3c>
}
    56a2:	08 95       	ret

000056a4 <delay>:

void delay(unsigned long ms)
{
    56a4:	8f 92       	push	r8
    56a6:	9f 92       	push	r9
    56a8:	af 92       	push	r10
    56aa:	bf 92       	push	r11
    56ac:	cf 92       	push	r12
    56ae:	df 92       	push	r13
    56b0:	ef 92       	push	r14
    56b2:	ff 92       	push	r15
    56b4:	6b 01       	movw	r12, r22
    56b6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    56b8:	d0 df       	rcall	.-96     	; 0x565a <micros>
    56ba:	4b 01       	movw	r8, r22
    56bc:	5c 01       	movw	r10, r24

	while (ms > 0) {
    56be:	c1 14       	cp	r12, r1
    56c0:	d1 04       	cpc	r13, r1
    56c2:	e1 04       	cpc	r14, r1
    56c4:	f1 04       	cpc	r15, r1
		yield();
    56c6:	f1 f0       	breq	.+60     	; 0x5704 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    56c8:	3c d3       	rcall	.+1656   	; 0x5d42 <yield>
    56ca:	c7 df       	rcall	.-114    	; 0x565a <micros>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	88 19       	sub	r24, r8
    56d2:	99 09       	sbc	r25, r9
    56d4:	aa 09       	sbc	r26, r10
    56d6:	bb 09       	sbc	r27, r11
    56d8:	88 3e       	cpi	r24, 0xE8	; 232
    56da:	93 40       	sbci	r25, 0x03	; 3
    56dc:	a1 05       	cpc	r26, r1
    56de:	b1 05       	cpc	r27, r1
    56e0:	70 f3       	brcs	.-36     	; 0x56be <delay+0x1a>
			ms--;
    56e2:	21 e0       	ldi	r18, 0x01	; 1
    56e4:	c2 1a       	sub	r12, r18
    56e6:	d1 08       	sbc	r13, r1
    56e8:	e1 08       	sbc	r14, r1
    56ea:	f1 08       	sbc	r15, r1
			start += 1000;
    56ec:	88 ee       	ldi	r24, 0xE8	; 232
    56ee:	88 0e       	add	r8, r24
    56f0:	83 e0       	ldi	r24, 0x03	; 3
    56f2:	98 1e       	adc	r9, r24
    56f4:	a1 1c       	adc	r10, r1
    56f6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    56f8:	c1 14       	cp	r12, r1
    56fa:	d1 04       	cpc	r13, r1
    56fc:	e1 04       	cpc	r14, r1
    56fe:	f1 04       	cpc	r15, r1
    5700:	21 f7       	brne	.-56     	; 0x56ca <delay+0x26>
    5702:	dd cf       	rjmp	.-70     	; 0x56be <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5704:	ff 90       	pop	r15
    5706:	ef 90       	pop	r14
    5708:	df 90       	pop	r13
    570a:	cf 90       	pop	r12
    570c:	bf 90       	pop	r11
    570e:	af 90       	pop	r10
    5710:	9f 90       	pop	r9
    5712:	8f 90       	pop	r8
    5714:	08 95       	ret

00005716 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5716:	82 30       	cpi	r24, 0x02	; 2
    5718:	91 05       	cpc	r25, r1
    571a:	38 f0       	brcs	.+14     	; 0x572a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    571c:	88 0f       	add	r24, r24
    571e:	99 1f       	adc	r25, r25
    5720:	88 0f       	add	r24, r24
    5722:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5724:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5726:	01 97       	sbiw	r24, 0x01	; 1
    5728:	f1 f7       	brne	.-4      	; 0x5726 <delayMicroseconds+0x10>
    572a:	08 95       	ret

0000572c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    572c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    572e:	84 b5       	in	r24, 0x24	; 36
    5730:	82 60       	ori	r24, 0x02	; 2
    5732:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5734:	84 b5       	in	r24, 0x24	; 36
    5736:	81 60       	ori	r24, 0x01	; 1
    5738:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    573a:	85 b5       	in	r24, 0x25	; 37
    573c:	82 60       	ori	r24, 0x02	; 2
    573e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5740:	85 b5       	in	r24, 0x25	; 37
    5742:	81 60       	ori	r24, 0x01	; 1
    5744:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5746:	ee e6       	ldi	r30, 0x6E	; 110
    5748:	f0 e0       	ldi	r31, 0x00	; 0
    574a:	80 81       	ld	r24, Z
    574c:	81 60       	ori	r24, 0x01	; 1
    574e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5750:	e1 e8       	ldi	r30, 0x81	; 129
    5752:	f0 e0       	ldi	r31, 0x00	; 0
    5754:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5756:	80 81       	ld	r24, Z
    5758:	82 60       	ori	r24, 0x02	; 2
    575a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    575c:	80 81       	ld	r24, Z
    575e:	81 60       	ori	r24, 0x01	; 1
    5760:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5762:	e0 e8       	ldi	r30, 0x80	; 128
    5764:	f0 e0       	ldi	r31, 0x00	; 0
    5766:	80 81       	ld	r24, Z
    5768:	81 60       	ori	r24, 0x01	; 1
    576a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    576c:	e1 eb       	ldi	r30, 0xB1	; 177
    576e:	f0 e0       	ldi	r31, 0x00	; 0
    5770:	80 81       	ld	r24, Z
    5772:	84 60       	ori	r24, 0x04	; 4
    5774:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5776:	e0 eb       	ldi	r30, 0xB0	; 176
    5778:	f0 e0       	ldi	r31, 0x00	; 0
    577a:	80 81       	ld	r24, Z
    577c:	81 60       	ori	r24, 0x01	; 1
    577e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5780:	e1 e9       	ldi	r30, 0x91	; 145
    5782:	f0 e0       	ldi	r31, 0x00	; 0
    5784:	80 81       	ld	r24, Z
    5786:	82 60       	ori	r24, 0x02	; 2
    5788:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    578a:	80 81       	ld	r24, Z
    578c:	81 60       	ori	r24, 0x01	; 1
    578e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5790:	e0 e9       	ldi	r30, 0x90	; 144
    5792:	f0 e0       	ldi	r31, 0x00	; 0
    5794:	80 81       	ld	r24, Z
    5796:	81 60       	ori	r24, 0x01	; 1
    5798:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    579a:	e1 ea       	ldi	r30, 0xA1	; 161
    579c:	f0 e0       	ldi	r31, 0x00	; 0
    579e:	80 81       	ld	r24, Z
    57a0:	82 60       	ori	r24, 0x02	; 2
    57a2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    57a4:	80 81       	ld	r24, Z
    57a6:	81 60       	ori	r24, 0x01	; 1
    57a8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    57aa:	e0 ea       	ldi	r30, 0xA0	; 160
    57ac:	f0 e0       	ldi	r31, 0x00	; 0
    57ae:	80 81       	ld	r24, Z
    57b0:	81 60       	ori	r24, 0x01	; 1
    57b2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    57b4:	e1 e2       	ldi	r30, 0x21	; 33
    57b6:	f1 e0       	ldi	r31, 0x01	; 1
    57b8:	80 81       	ld	r24, Z
    57ba:	82 60       	ori	r24, 0x02	; 2
    57bc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    57be:	80 81       	ld	r24, Z
    57c0:	81 60       	ori	r24, 0x01	; 1
    57c2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    57c4:	e0 e2       	ldi	r30, 0x20	; 32
    57c6:	f1 e0       	ldi	r31, 0x01	; 1
    57c8:	80 81       	ld	r24, Z
    57ca:	81 60       	ori	r24, 0x01	; 1
    57cc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    57ce:	ea e7       	ldi	r30, 0x7A	; 122
    57d0:	f0 e0       	ldi	r31, 0x00	; 0
    57d2:	80 81       	ld	r24, Z
    57d4:	84 60       	ori	r24, 0x04	; 4
    57d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    57d8:	80 81       	ld	r24, Z
    57da:	82 60       	ori	r24, 0x02	; 2
    57dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    57de:	80 81       	ld	r24, Z
    57e0:	81 60       	ori	r24, 0x01	; 1
    57e2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    57e4:	80 81       	ld	r24, Z
    57e6:	80 68       	ori	r24, 0x80	; 128
    57e8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    57ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    57ee:	08 95       	ret

000057f0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	fc 01       	movw	r30, r24
    57f4:	31 97       	sbiw	r30, 0x01	; 1
    57f6:	e2 31       	cpi	r30, 0x12	; 18
    57f8:	f1 05       	cpc	r31, r1
    57fa:	08 f0       	brcs	.+2      	; 0x57fe <turnOffPWM+0xe>
    57fc:	4d c0       	rjmp	.+154    	; 0x5898 <turnOffPWM+0xa8>
    57fe:	88 27       	eor	r24, r24
    5800:	ee 58       	subi	r30, 0x8E	; 142
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	8f 4f       	sbci	r24, 0xFF	; 255
    5806:	eb c2       	rjmp	.+1494   	; 0x5dde <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5808:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    580c:	8f 77       	andi	r24, 0x7F	; 127
    580e:	03 c0       	rjmp	.+6      	; 0x5816 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5810:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5814:	8f 7d       	andi	r24, 0xDF	; 223
    5816:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    581a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    581c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5820:	87 7f       	andi	r24, 0xF7	; 247
    5822:	f9 cf       	rjmp	.-14     	; 0x5816 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5824:	84 b5       	in	r24, 0x24	; 36
    5826:	8f 77       	andi	r24, 0x7F	; 127
    5828:	02 c0       	rjmp	.+4      	; 0x582e <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    582a:	84 b5       	in	r24, 0x24	; 36
    582c:	8f 7d       	andi	r24, 0xDF	; 223
    582e:	84 bd       	out	0x24, r24	; 36
    5830:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5832:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5836:	8f 77       	andi	r24, 0x7F	; 127
    5838:	03 c0       	rjmp	.+6      	; 0x5840 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    583a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    583e:	8f 7d       	andi	r24, 0xDF	; 223
    5840:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5844:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5846:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    584a:	8f 77       	andi	r24, 0x7F	; 127
    584c:	07 c0       	rjmp	.+14     	; 0x585c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    584e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5852:	8f 7d       	andi	r24, 0xDF	; 223
    5854:	03 c0       	rjmp	.+6      	; 0x585c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5856:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    585a:	87 7f       	andi	r24, 0xF7	; 247
    585c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5860:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5862:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5866:	8f 77       	andi	r24, 0x7F	; 127
    5868:	07 c0       	rjmp	.+14     	; 0x5878 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    586a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    586e:	8f 7d       	andi	r24, 0xDF	; 223
    5870:	03 c0       	rjmp	.+6      	; 0x5878 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5872:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5876:	87 7f       	andi	r24, 0xF7	; 247
    5878:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    587c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    587e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5882:	8f 77       	andi	r24, 0x7F	; 127
    5884:	07 c0       	rjmp	.+14     	; 0x5894 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5886:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    588a:	8f 7d       	andi	r24, 0xDF	; 223
    588c:	03 c0       	rjmp	.+6      	; 0x5894 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    588e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5892:	87 7f       	andi	r24, 0xF7	; 247
    5894:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5898:	08 95       	ret

0000589a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	fc 01       	movw	r30, r24
    58a2:	e2 5b       	subi	r30, 0xB2	; 178
    58a4:	fe 4f       	sbci	r31, 0xFE	; 254
    58a6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    58a8:	fc 01       	movw	r30, r24
    58aa:	ec 56       	subi	r30, 0x6C	; 108
    58ac:	fe 4f       	sbci	r31, 0xFE	; 254
    58ae:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    58b0:	88 23       	and	r24, r24
    58b2:	61 f1       	breq	.+88     	; 0x590c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	88 0f       	add	r24, r24
    58b8:	99 1f       	adc	r25, r25
    58ba:	fc 01       	movw	r30, r24
    58bc:	e2 5f       	subi	r30, 0xF2	; 242
    58be:	fd 4f       	sbci	r31, 0xFD	; 253
    58c0:	c5 91       	lpm	r28, Z+
    58c2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    58c4:	fc 01       	movw	r30, r24
    58c6:	ec 50       	subi	r30, 0x0C	; 12
    58c8:	fe 4f       	sbci	r31, 0xFE	; 254
    58ca:	a5 91       	lpm	r26, Z+
    58cc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    58ce:	61 11       	cpse	r22, r1
    58d0:	09 c0       	rjmp	.+18     	; 0x58e4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    58d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    58d4:	f8 94       	cli
		*reg &= ~bit;
    58d6:	88 81       	ld	r24, Y
    58d8:	20 95       	com	r18
    58da:	82 23       	and	r24, r18
    58dc:	88 83       	st	Y, r24
		*out &= ~bit;
    58de:	ec 91       	ld	r30, X
    58e0:	2e 23       	and	r18, r30
    58e2:	0b c0       	rjmp	.+22     	; 0x58fa <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    58e4:	62 30       	cpi	r22, 0x02	; 2
    58e6:	61 f4       	brne	.+24     	; 0x5900 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    58e8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    58ea:	f8 94       	cli
		*reg &= ~bit;
    58ec:	88 81       	ld	r24, Y
    58ee:	32 2f       	mov	r19, r18
    58f0:	30 95       	com	r19
    58f2:	83 23       	and	r24, r19
    58f4:	88 83       	st	Y, r24
		*out |= bit;
    58f6:	ec 91       	ld	r30, X
    58f8:	2e 2b       	or	r18, r30
    58fa:	2c 93       	st	X, r18
		SREG = oldSREG;
    58fc:	9f bf       	out	0x3f, r25	; 63
    58fe:	06 c0       	rjmp	.+12     	; 0x590c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5900:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5902:	f8 94       	cli
		*reg |= bit;
    5904:	e8 81       	ld	r30, Y
    5906:	2e 2b       	or	r18, r30
    5908:	28 83       	st	Y, r18
		SREG = oldSREG;
    590a:	8f bf       	out	0x3f, r24	; 63
	}
}
    590c:	df 91       	pop	r29
    590e:	cf 91       	pop	r28
    5910:	08 95       	ret

00005912 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
    5916:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5918:	28 2f       	mov	r18, r24
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	f9 01       	movw	r30, r18
    591e:	e8 5f       	subi	r30, 0xF8	; 248
    5920:	fe 4f       	sbci	r31, 0xFE	; 254
    5922:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5924:	f9 01       	movw	r30, r18
    5926:	e2 5b       	subi	r30, 0xB2	; 178
    5928:	fe 4f       	sbci	r31, 0xFE	; 254
    592a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    592c:	f9 01       	movw	r30, r18
    592e:	ec 56       	subi	r30, 0x6C	; 108
    5930:	fe 4f       	sbci	r31, 0xFE	; 254
    5932:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5934:	cc 23       	and	r28, r28
    5936:	b9 f0       	breq	.+46     	; 0x5966 <digitalWrite+0x54>
    5938:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    593a:	81 11       	cpse	r24, r1
    593c:	59 df       	rcall	.-334    	; 0x57f0 <turnOffPWM>

	out = portOutputRegister(port);
    593e:	ec 2f       	mov	r30, r28
    5940:	f0 e0       	ldi	r31, 0x00	; 0
    5942:	ee 0f       	add	r30, r30
    5944:	ff 1f       	adc	r31, r31
    5946:	ec 50       	subi	r30, 0x0C	; 12
    5948:	fe 4f       	sbci	r31, 0xFE	; 254
    594a:	a5 91       	lpm	r26, Z+
    594c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    594e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5950:	f8 94       	cli

	if (val == LOW) {
    5952:	11 11       	cpse	r17, r1
    5954:	04 c0       	rjmp	.+8      	; 0x595e <digitalWrite+0x4c>
		*out &= ~bit;
    5956:	8c 91       	ld	r24, X
    5958:	d0 95       	com	r29
    595a:	d8 23       	and	r29, r24
    595c:	02 c0       	rjmp	.+4      	; 0x5962 <digitalWrite+0x50>
	} else {
		*out |= bit;
    595e:	ec 91       	ld	r30, X
    5960:	de 2b       	or	r29, r30
    5962:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5964:	9f bf       	out	0x3f, r25	; 63
}
    5966:	df 91       	pop	r29
    5968:	cf 91       	pop	r28
    596a:	1f 91       	pop	r17
    596c:	08 95       	ret

0000596e <digitalRead>:

int digitalRead(uint8_t pin)
{
    596e:	cf 93       	push	r28
    5970:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5972:	28 2f       	mov	r18, r24
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	f9 01       	movw	r30, r18
    5978:	e8 5f       	subi	r30, 0xF8	; 248
    597a:	fe 4f       	sbci	r31, 0xFE	; 254
    597c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    597e:	f9 01       	movw	r30, r18
    5980:	e2 5b       	subi	r30, 0xB2	; 178
    5982:	fe 4f       	sbci	r31, 0xFE	; 254
    5984:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5986:	f9 01       	movw	r30, r18
    5988:	ec 56       	subi	r30, 0x6C	; 108
    598a:	fe 4f       	sbci	r31, 0xFE	; 254
    598c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    598e:	cc 23       	and	r28, r28
    5990:	89 f0       	breq	.+34     	; 0x59b4 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5992:	81 11       	cpse	r24, r1
    5994:	2d df       	rcall	.-422    	; 0x57f0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5996:	ec 2f       	mov	r30, r28
    5998:	f0 e0       	ldi	r31, 0x00	; 0
    599a:	ee 0f       	add	r30, r30
    599c:	ff 1f       	adc	r31, r31
    599e:	e6 52       	subi	r30, 0x26	; 38
    59a0:	fe 4f       	sbci	r31, 0xFE	; 254
    59a2:	a5 91       	lpm	r26, Z+
    59a4:	b4 91       	lpm	r27, Z
    59a6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    59a8:	ed 23       	and	r30, r29
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	21 f4       	brne	.+8      	; 0x59b8 <digitalRead+0x4a>
    59b0:	80 e0       	ldi	r24, 0x00	; 0
    59b2:	02 c0       	rjmp	.+4      	; 0x59b8 <digitalRead+0x4a>
    59b4:	80 e0       	ldi	r24, 0x00	; 0
    59b6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    59b8:	df 91       	pop	r29
    59ba:	cf 91       	pop	r28
    59bc:	08 95       	ret

000059be <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    59be:	4f 92       	push	r4
    59c0:	5f 92       	push	r5
    59c2:	6f 92       	push	r6
    59c4:	7f 92       	push	r7
    59c6:	af 92       	push	r10
    59c8:	bf 92       	push	r11
    59ca:	cf 92       	push	r12
    59cc:	df 92       	push	r13
    59ce:	ef 92       	push	r14
    59d0:	ff 92       	push	r15
    59d2:	0f 93       	push	r16
    59d4:	1f 93       	push	r17
    59d6:	cf 93       	push	r28
    59d8:	df 93       	push	r29
    59da:	cd b7       	in	r28, 0x3d	; 61
    59dc:	de b7       	in	r29, 0x3e	; 62
    59de:	29 01       	movw	r4, r18
    59e0:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    59e2:	9b 01       	movw	r18, r22
    59e4:	ac 01       	movw	r20, r24
    59e6:	24 19       	sub	r18, r4
    59e8:	35 09       	sbc	r19, r5
    59ea:	46 09       	sbc	r20, r6
    59ec:	57 09       	sbc	r21, r7
    59ee:	8a 89       	ldd	r24, Y+18	; 0x12
    59f0:	9b 89       	ldd	r25, Y+19	; 0x13
    59f2:	ac 89       	ldd	r26, Y+20	; 0x14
    59f4:	bd 89       	ldd	r27, Y+21	; 0x15
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	6a 19       	sub	r22, r10
    59fc:	7b 09       	sbc	r23, r11
    59fe:	8c 09       	sbc	r24, r12
    5a00:	9d 09       	sbc	r25, r13
    5a02:	a0 d1       	rcall	.+832    	; 0x5d44 <__mulsi3>
    5a04:	a8 01       	movw	r20, r16
    5a06:	97 01       	movw	r18, r14
    5a08:	24 19       	sub	r18, r4
    5a0a:	35 09       	sbc	r19, r5
    5a0c:	46 09       	sbc	r20, r6
    5a0e:	57 09       	sbc	r21, r7
    5a10:	ca d1       	rcall	.+916    	; 0x5da6 <__divmodsi4>
    5a12:	ca 01       	movw	r24, r20
    5a14:	b9 01       	movw	r22, r18
    5a16:	6a 0d       	add	r22, r10
    5a18:	7b 1d       	adc	r23, r11
    5a1a:	8c 1d       	adc	r24, r12
    5a1c:	9d 1d       	adc	r25, r13
}
    5a1e:	df 91       	pop	r29
    5a20:	cf 91       	pop	r28
    5a22:	1f 91       	pop	r17
    5a24:	0f 91       	pop	r16
    5a26:	ff 90       	pop	r15
    5a28:	ef 90       	pop	r14
    5a2a:	df 90       	pop	r13
    5a2c:	cf 90       	pop	r12
    5a2e:	bf 90       	pop	r11
    5a30:	af 90       	pop	r10
    5a32:	7f 90       	pop	r7
    5a34:	6f 90       	pop	r6
    5a36:	5f 90       	pop	r5
    5a38:	4f 90       	pop	r4
    5a3a:	08 95       	ret

00005a3c <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	00 97       	sbiw	r24, 0x00	; 0
    5a44:	09 f0       	breq	.+2      	; 0x5a48 <_ZN6StringD1Ev+0xc>
    5a46:	84 c2       	rjmp	.+1288   	; 0x5f50 <free>
    5a48:	08 95       	ret

00005a4a <_ZN6String10invalidateEv>:
    5a4a:	cf 93       	push	r28
    5a4c:	df 93       	push	r29
    5a4e:	ec 01       	movw	r28, r24
    5a50:	88 81       	ld	r24, Y
    5a52:	99 81       	ldd	r25, Y+1	; 0x01
    5a54:	00 97       	sbiw	r24, 0x00	; 0
    5a56:	09 f0       	breq	.+2      	; 0x5a5a <_ZN6String10invalidateEv+0x10>
    5a58:	7b d2       	rcall	.+1270   	; 0x5f50 <free>
    5a5a:	19 82       	std	Y+1, r1	; 0x01
    5a5c:	18 82       	st	Y, r1
    5a5e:	1d 82       	std	Y+5, r1	; 0x05
    5a60:	1c 82       	std	Y+4, r1	; 0x04
    5a62:	1b 82       	std	Y+3, r1	; 0x03
    5a64:	1a 82       	std	Y+2, r1	; 0x02
    5a66:	df 91       	pop	r29
    5a68:	cf 91       	pop	r28
    5a6a:	08 95       	ret

00005a6c <_ZN6String12changeBufferEj>:
    5a6c:	0f 93       	push	r16
    5a6e:	1f 93       	push	r17
    5a70:	cf 93       	push	r28
    5a72:	df 93       	push	r29
    5a74:	ec 01       	movw	r28, r24
    5a76:	8b 01       	movw	r16, r22
    5a78:	6f 5f       	subi	r22, 0xFF	; 255
    5a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a7c:	88 81       	ld	r24, Y
    5a7e:	99 81       	ldd	r25, Y+1	; 0x01
    5a80:	f0 d2       	rcall	.+1504   	; 0x6062 <realloc>
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	31 f0       	breq	.+12     	; 0x5a92 <_ZN6String12changeBufferEj+0x26>
    5a86:	99 83       	std	Y+1, r25	; 0x01
    5a88:	88 83       	st	Y, r24
    5a8a:	1b 83       	std	Y+3, r17	; 0x03
    5a8c:	0a 83       	std	Y+2, r16	; 0x02
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	01 c0       	rjmp	.+2      	; 0x5a94 <_ZN6String12changeBufferEj+0x28>
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	df 91       	pop	r29
    5a96:	cf 91       	pop	r28
    5a98:	1f 91       	pop	r17
    5a9a:	0f 91       	pop	r16
    5a9c:	08 95       	ret

00005a9e <_ZN6String7reserveEj>:
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
    5aa2:	ec 01       	movw	r28, r24
    5aa4:	88 81       	ld	r24, Y
    5aa6:	99 81       	ldd	r25, Y+1	; 0x01
    5aa8:	89 2b       	or	r24, r25
    5aaa:	29 f0       	breq	.+10     	; 0x5ab6 <_ZN6String7reserveEj+0x18>
    5aac:	8a 81       	ldd	r24, Y+2	; 0x02
    5aae:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab0:	86 17       	cp	r24, r22
    5ab2:	97 07       	cpc	r25, r23
    5ab4:	58 f4       	brcc	.+22     	; 0x5acc <_ZN6String7reserveEj+0x2e>
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	d9 df       	rcall	.-78     	; 0x5a6c <_ZN6String12changeBufferEj>
    5aba:	88 23       	and	r24, r24
    5abc:	41 f0       	breq	.+16     	; 0x5ace <_ZN6String7reserveEj+0x30>
    5abe:	8c 81       	ldd	r24, Y+4	; 0x04
    5ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    5ac2:	89 2b       	or	r24, r25
    5ac4:	19 f4       	brne	.+6      	; 0x5acc <_ZN6String7reserveEj+0x2e>
    5ac6:	e8 81       	ld	r30, Y
    5ac8:	f9 81       	ldd	r31, Y+1	; 0x01
    5aca:	10 82       	st	Z, r1
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	08 95       	ret

00005ad4 <_ZN6String4copyEPKcj>:
    5ad4:	ef 92       	push	r14
    5ad6:	ff 92       	push	r15
    5ad8:	0f 93       	push	r16
    5ada:	1f 93       	push	r17
    5adc:	cf 93       	push	r28
    5ade:	df 93       	push	r29
    5ae0:	ec 01       	movw	r28, r24
    5ae2:	7b 01       	movw	r14, r22
    5ae4:	8a 01       	movw	r16, r20
    5ae6:	ba 01       	movw	r22, r20
    5ae8:	da df       	rcall	.-76     	; 0x5a9e <_ZN6String7reserveEj>
    5aea:	81 11       	cpse	r24, r1
    5aec:	03 c0       	rjmp	.+6      	; 0x5af4 <_ZN6String4copyEPKcj+0x20>
    5aee:	ce 01       	movw	r24, r28
    5af0:	ac df       	rcall	.-168    	; 0x5a4a <_ZN6String10invalidateEv>
    5af2:	06 c0       	rjmp	.+12     	; 0x5b00 <_ZN6String4copyEPKcj+0x2c>
    5af4:	1d 83       	std	Y+5, r17	; 0x05
    5af6:	0c 83       	std	Y+4, r16	; 0x04
    5af8:	b7 01       	movw	r22, r14
    5afa:	88 81       	ld	r24, Y
    5afc:	99 81       	ldd	r25, Y+1	; 0x01
    5afe:	b6 d3       	rcall	.+1900   	; 0x626c <strcpy>
    5b00:	ce 01       	movw	r24, r28
    5b02:	df 91       	pop	r29
    5b04:	cf 91       	pop	r28
    5b06:	1f 91       	pop	r17
    5b08:	0f 91       	pop	r16
    5b0a:	ff 90       	pop	r15
    5b0c:	ef 90       	pop	r14
    5b0e:	08 95       	ret

00005b10 <_ZN6StringC1EPKc>:
    5b10:	fc 01       	movw	r30, r24
    5b12:	11 82       	std	Z+1, r1	; 0x01
    5b14:	10 82       	st	Z, r1
    5b16:	13 82       	std	Z+3, r1	; 0x03
    5b18:	12 82       	std	Z+2, r1	; 0x02
    5b1a:	15 82       	std	Z+5, r1	; 0x05
    5b1c:	14 82       	std	Z+4, r1	; 0x04
    5b1e:	61 15       	cp	r22, r1
    5b20:	71 05       	cpc	r23, r1
    5b22:	49 f0       	breq	.+18     	; 0x5b36 <_ZN6StringC1EPKc+0x26>
    5b24:	fb 01       	movw	r30, r22
    5b26:	01 90       	ld	r0, Z+
    5b28:	00 20       	and	r0, r0
    5b2a:	e9 f7       	brne	.-6      	; 0x5b26 <_ZN6StringC1EPKc+0x16>
    5b2c:	31 97       	sbiw	r30, 0x01	; 1
    5b2e:	af 01       	movw	r20, r30
    5b30:	46 1b       	sub	r20, r22
    5b32:	57 0b       	sbc	r21, r23
    5b34:	cf cf       	rjmp	.-98     	; 0x5ad4 <_ZN6String4copyEPKcj>
    5b36:	08 95       	ret

00005b38 <_ZN6StringaSEPKc>:
    5b38:	cf 93       	push	r28
    5b3a:	df 93       	push	r29
    5b3c:	ec 01       	movw	r28, r24
    5b3e:	61 15       	cp	r22, r1
    5b40:	71 05       	cpc	r23, r1
    5b42:	51 f0       	breq	.+20     	; 0x5b58 <_ZN6StringaSEPKc+0x20>
    5b44:	fb 01       	movw	r30, r22
    5b46:	01 90       	ld	r0, Z+
    5b48:	00 20       	and	r0, r0
    5b4a:	e9 f7       	brne	.-6      	; 0x5b46 <_ZN6StringaSEPKc+0xe>
    5b4c:	31 97       	sbiw	r30, 0x01	; 1
    5b4e:	af 01       	movw	r20, r30
    5b50:	46 1b       	sub	r20, r22
    5b52:	57 0b       	sbc	r21, r23
    5b54:	bf df       	rcall	.-130    	; 0x5ad4 <_ZN6String4copyEPKcj>
    5b56:	01 c0       	rjmp	.+2      	; 0x5b5a <_ZN6StringaSEPKc+0x22>
    5b58:	78 df       	rcall	.-272    	; 0x5a4a <_ZN6String10invalidateEv>
    5b5a:	ce 01       	movw	r24, r28
    5b5c:	df 91       	pop	r29
    5b5e:	cf 91       	pop	r28
    5b60:	08 95       	ret

00005b62 <_ZN6StringC1Ehh>:
    5b62:	0f 93       	push	r16
    5b64:	1f 93       	push	r17
    5b66:	cf 93       	push	r28
    5b68:	df 93       	push	r29
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
    5b6e:	29 97       	sbiw	r28, 0x09	; 9
    5b70:	0f b6       	in	r0, 0x3f	; 63
    5b72:	f8 94       	cli
    5b74:	de bf       	out	0x3e, r29	; 62
    5b76:	0f be       	out	0x3f, r0	; 63
    5b78:	cd bf       	out	0x3d, r28	; 61
    5b7a:	8c 01       	movw	r16, r24
    5b7c:	86 2f       	mov	r24, r22
    5b7e:	f8 01       	movw	r30, r16
    5b80:	11 82       	std	Z+1, r1	; 0x01
    5b82:	10 82       	st	Z, r1
    5b84:	13 82       	std	Z+3, r1	; 0x03
    5b86:	12 82       	std	Z+2, r1	; 0x02
    5b88:	15 82       	std	Z+5, r1	; 0x05
    5b8a:	14 82       	std	Z+4, r1	; 0x04
    5b8c:	50 e0       	ldi	r21, 0x00	; 0
    5b8e:	be 01       	movw	r22, r28
    5b90:	6f 5f       	subi	r22, 0xFF	; 255
    5b92:	7f 4f       	sbci	r23, 0xFF	; 255
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	89 d3       	rcall	.+1810   	; 0x62aa <utoa>
    5b98:	be 01       	movw	r22, r28
    5b9a:	6f 5f       	subi	r22, 0xFF	; 255
    5b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b9e:	c8 01       	movw	r24, r16
    5ba0:	cb df       	rcall	.-106    	; 0x5b38 <_ZN6StringaSEPKc>
    5ba2:	29 96       	adiw	r28, 0x09	; 9
    5ba4:	0f b6       	in	r0, 0x3f	; 63
    5ba6:	f8 94       	cli
    5ba8:	de bf       	out	0x3e, r29	; 62
    5baa:	0f be       	out	0x3f, r0	; 63
    5bac:	cd bf       	out	0x3d, r28	; 61
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	1f 91       	pop	r17
    5bb4:	0f 91       	pop	r16
    5bb6:	08 95       	ret

00005bb8 <_ZN6String6concatEPKcj>:
    5bb8:	ef 92       	push	r14
    5bba:	ff 92       	push	r15
    5bbc:	0f 93       	push	r16
    5bbe:	1f 93       	push	r17
    5bc0:	cf 93       	push	r28
    5bc2:	df 93       	push	r29
    5bc4:	61 15       	cp	r22, r1
    5bc6:	71 05       	cpc	r23, r1
    5bc8:	11 f4       	brne	.+4      	; 0x5bce <_ZN6String6concatEPKcj+0x16>
    5bca:	80 e0       	ldi	r24, 0x00	; 0
    5bcc:	1a c0       	rjmp	.+52     	; 0x5c02 <_ZN6String6concatEPKcj+0x4a>
    5bce:	41 15       	cp	r20, r1
    5bd0:	51 05       	cpc	r21, r1
    5bd2:	b1 f0       	breq	.+44     	; 0x5c00 <_ZN6String6concatEPKcj+0x48>
    5bd4:	7b 01       	movw	r14, r22
    5bd6:	ec 01       	movw	r28, r24
    5bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    5bda:	9d 81       	ldd	r25, Y+5	; 0x05
    5bdc:	8a 01       	movw	r16, r20
    5bde:	08 0f       	add	r16, r24
    5be0:	19 1f       	adc	r17, r25
    5be2:	b8 01       	movw	r22, r16
    5be4:	ce 01       	movw	r24, r28
    5be6:	5b df       	rcall	.-330    	; 0x5a9e <_ZN6String7reserveEj>
    5be8:	88 23       	and	r24, r24
    5bea:	79 f3       	breq	.-34     	; 0x5bca <_ZN6String6concatEPKcj+0x12>
    5bec:	28 81       	ld	r18, Y
    5bee:	39 81       	ldd	r19, Y+1	; 0x01
    5bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    5bf4:	b7 01       	movw	r22, r14
    5bf6:	82 0f       	add	r24, r18
    5bf8:	93 1f       	adc	r25, r19
    5bfa:	38 d3       	rcall	.+1648   	; 0x626c <strcpy>
    5bfc:	1d 83       	std	Y+5, r17	; 0x05
    5bfe:	0c 83       	std	Y+4, r16	; 0x04
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	df 91       	pop	r29
    5c04:	cf 91       	pop	r28
    5c06:	1f 91       	pop	r17
    5c08:	0f 91       	pop	r16
    5c0a:	ff 90       	pop	r15
    5c0c:	ef 90       	pop	r14
    5c0e:	08 95       	ret

00005c10 <_ZN6String6concatERKS_>:
    5c10:	fb 01       	movw	r30, r22
    5c12:	44 81       	ldd	r20, Z+4	; 0x04
    5c14:	55 81       	ldd	r21, Z+5	; 0x05
    5c16:	60 81       	ld	r22, Z
    5c18:	71 81       	ldd	r23, Z+1	; 0x01
    5c1a:	ce cf       	rjmp	.-100    	; 0x5bb8 <_ZN6String6concatEPKcj>

00005c1c <_ZNK6String9compareToERKS_>:
    5c1c:	cf 93       	push	r28
    5c1e:	df 93       	push	r29
    5c20:	dc 01       	movw	r26, r24
    5c22:	ed 91       	ld	r30, X+
    5c24:	fc 91       	ld	r31, X
    5c26:	eb 01       	movw	r28, r22
    5c28:	a8 81       	ld	r26, Y
    5c2a:	b9 81       	ldd	r27, Y+1	; 0x01
    5c2c:	30 97       	sbiw	r30, 0x00	; 0
    5c2e:	11 f0       	breq	.+4      	; 0x5c34 <_ZNK6String9compareToERKS_+0x18>
    5c30:	10 97       	sbiw	r26, 0x00	; 0
    5c32:	c9 f4       	brne	.+50     	; 0x5c66 <_ZNK6String9compareToERKS_+0x4a>
    5c34:	10 97       	sbiw	r26, 0x00	; 0
    5c36:	59 f0       	breq	.+22     	; 0x5c4e <_ZNK6String9compareToERKS_+0x32>
    5c38:	eb 01       	movw	r28, r22
    5c3a:	2c 81       	ldd	r18, Y+4	; 0x04
    5c3c:	3d 81       	ldd	r19, Y+5	; 0x05
    5c3e:	23 2b       	or	r18, r19
    5c40:	31 f0       	breq	.+12     	; 0x5c4e <_ZNK6String9compareToERKS_+0x32>
    5c42:	8c 91       	ld	r24, X
    5c44:	90 e0       	ldi	r25, 0x00	; 0
    5c46:	91 95       	neg	r25
    5c48:	81 95       	neg	r24
    5c4a:	91 09       	sbc	r25, r1
    5c4c:	13 c0       	rjmp	.+38     	; 0x5c74 <_ZNK6String9compareToERKS_+0x58>
    5c4e:	30 97       	sbiw	r30, 0x00	; 0
    5c50:	79 f0       	breq	.+30     	; 0x5c70 <_ZNK6String9compareToERKS_+0x54>
    5c52:	dc 01       	movw	r26, r24
    5c54:	14 96       	adiw	r26, 0x04	; 4
    5c56:	8d 91       	ld	r24, X+
    5c58:	9c 91       	ld	r25, X
    5c5a:	15 97       	sbiw	r26, 0x05	; 5
    5c5c:	89 2b       	or	r24, r25
    5c5e:	41 f0       	breq	.+16     	; 0x5c70 <_ZNK6String9compareToERKS_+0x54>
    5c60:	80 81       	ld	r24, Z
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	07 c0       	rjmp	.+14     	; 0x5c74 <_ZNK6String9compareToERKS_+0x58>
    5c66:	bd 01       	movw	r22, r26
    5c68:	cf 01       	movw	r24, r30
    5c6a:	df 91       	pop	r29
    5c6c:	cf 91       	pop	r28
    5c6e:	f5 c2       	rjmp	.+1514   	; 0x625a <strcmp>
    5c70:	80 e0       	ldi	r24, 0x00	; 0
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	08 95       	ret

00005c7a <_ZNK6String6equalsERKS_>:
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	44 81       	ldd	r20, Z+4	; 0x04
    5c7e:	55 81       	ldd	r21, Z+5	; 0x05
    5c80:	fb 01       	movw	r30, r22
    5c82:	24 81       	ldd	r18, Z+4	; 0x04
    5c84:	35 81       	ldd	r19, Z+5	; 0x05
    5c86:	42 17       	cp	r20, r18
    5c88:	53 07       	cpc	r21, r19
    5c8a:	21 f4       	brne	.+8      	; 0x5c94 <_ZNK6String6equalsERKS_+0x1a>
    5c8c:	c7 df       	rcall	.-114    	; 0x5c1c <_ZNK6String9compareToERKS_>
    5c8e:	21 e0       	ldi	r18, 0x01	; 1
    5c90:	89 2b       	or	r24, r25
    5c92:	09 f0       	breq	.+2      	; 0x5c96 <_ZNK6String6equalsERKS_+0x1c>
    5c94:	20 e0       	ldi	r18, 0x00	; 0
    5c96:	82 2f       	mov	r24, r18
    5c98:	08 95       	ret

00005c9a <_ZNK6String9substringEjj>:
    5c9a:	bf 92       	push	r11
    5c9c:	cf 92       	push	r12
    5c9e:	df 92       	push	r13
    5ca0:	ef 92       	push	r14
    5ca2:	ff 92       	push	r15
    5ca4:	0f 93       	push	r16
    5ca6:	1f 93       	push	r17
    5ca8:	cf 93       	push	r28
    5caa:	df 93       	push	r29
    5cac:	7c 01       	movw	r14, r24
    5cae:	6b 01       	movw	r12, r22
    5cb0:	8a 01       	movw	r16, r20
    5cb2:	e9 01       	movw	r28, r18
    5cb4:	24 17       	cp	r18, r20
    5cb6:	35 07       	cpc	r19, r21
    5cb8:	20 f4       	brcc	.+8      	; 0x5cc2 <_ZNK6String9substringEjj+0x28>
    5cba:	81 2f       	mov	r24, r17
    5cbc:	89 01       	movw	r16, r18
    5cbe:	c4 2f       	mov	r28, r20
    5cc0:	d8 2f       	mov	r29, r24
    5cc2:	69 ee       	ldi	r22, 0xE9	; 233
    5cc4:	72 e0       	ldi	r23, 0x02	; 2
    5cc6:	c7 01       	movw	r24, r14
    5cc8:	23 df       	rcall	.-442    	; 0x5b10 <_ZN6StringC1EPKc>
    5cca:	d6 01       	movw	r26, r12
    5ccc:	14 96       	adiw	r26, 0x04	; 4
    5cce:	8d 91       	ld	r24, X+
    5cd0:	9c 91       	ld	r25, X
    5cd2:	15 97       	sbiw	r26, 0x05	; 5
    5cd4:	08 17       	cp	r16, r24
    5cd6:	19 07       	cpc	r17, r25
    5cd8:	c0 f4       	brcc	.+48     	; 0x5d0a <_ZNK6String9substringEjj+0x70>
    5cda:	8c 17       	cp	r24, r28
    5cdc:	9d 07       	cpc	r25, r29
    5cde:	08 f4       	brcc	.+2      	; 0x5ce2 <_ZNK6String9substringEjj+0x48>
    5ce0:	ec 01       	movw	r28, r24
    5ce2:	d6 01       	movw	r26, r12
    5ce4:	ed 91       	ld	r30, X+
    5ce6:	fc 91       	ld	r31, X
    5ce8:	11 97       	sbiw	r26, 0x01	; 1
    5cea:	ec 0f       	add	r30, r28
    5cec:	fd 1f       	adc	r31, r29
    5cee:	b0 80       	ld	r11, Z
    5cf0:	10 82       	st	Z, r1
    5cf2:	6d 91       	ld	r22, X+
    5cf4:	7c 91       	ld	r23, X
    5cf6:	60 0f       	add	r22, r16
    5cf8:	71 1f       	adc	r23, r17
    5cfa:	c7 01       	movw	r24, r14
    5cfc:	1d df       	rcall	.-454    	; 0x5b38 <_ZN6StringaSEPKc>
    5cfe:	d6 01       	movw	r26, r12
    5d00:	ed 91       	ld	r30, X+
    5d02:	fc 91       	ld	r31, X
    5d04:	ec 0f       	add	r30, r28
    5d06:	fd 1f       	adc	r31, r29
    5d08:	b0 82       	st	Z, r11
    5d0a:	c7 01       	movw	r24, r14
    5d0c:	df 91       	pop	r29
    5d0e:	cf 91       	pop	r28
    5d10:	1f 91       	pop	r17
    5d12:	0f 91       	pop	r16
    5d14:	ff 90       	pop	r15
    5d16:	ef 90       	pop	r14
    5d18:	df 90       	pop	r13
    5d1a:	cf 90       	pop	r12
    5d1c:	bf 90       	pop	r11
    5d1e:	08 95       	ret

00005d20 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    5d20:	cf 93       	push	r28
    5d22:	df 93       	push	r29
	if (!buffer) return;
    5d24:	fc 01       	movw	r30, r24
    5d26:	c0 81       	ld	r28, Z
    5d28:	d1 81       	ldd	r29, Z+1	; 0x01
    5d2a:	20 97       	sbiw	r28, 0x00	; 0
    5d2c:	39 f0       	breq	.+14     	; 0x5d3c <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    5d2e:	88 81       	ld	r24, Y
    5d30:	88 23       	and	r24, r24
    5d32:	21 f0       	breq	.+8      	; 0x5d3c <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	79 d2       	rcall	.+1266   	; 0x622a <toupper>
    5d38:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    5d3a:	f9 cf       	rjmp	.-14     	; 0x5d2e <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	08 95       	ret

00005d42 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5d42:	08 95       	ret

00005d44 <__mulsi3>:
    5d44:	db 01       	movw	r26, r22
    5d46:	8f 93       	push	r24
    5d48:	9f 93       	push	r25
    5d4a:	51 d0       	rcall	.+162    	; 0x5dee <__muluhisi3>
    5d4c:	bf 91       	pop	r27
    5d4e:	af 91       	pop	r26
    5d50:	a2 9f       	mul	r26, r18
    5d52:	80 0d       	add	r24, r0
    5d54:	91 1d       	adc	r25, r1
    5d56:	a3 9f       	mul	r26, r19
    5d58:	90 0d       	add	r25, r0
    5d5a:	b2 9f       	mul	r27, r18
    5d5c:	90 0d       	add	r25, r0
    5d5e:	11 24       	eor	r1, r1
    5d60:	08 95       	ret

00005d62 <__udivmodsi4>:
    5d62:	a1 e2       	ldi	r26, 0x21	; 33
    5d64:	1a 2e       	mov	r1, r26
    5d66:	aa 1b       	sub	r26, r26
    5d68:	bb 1b       	sub	r27, r27
    5d6a:	fd 01       	movw	r30, r26
    5d6c:	0d c0       	rjmp	.+26     	; 0x5d88 <__udivmodsi4_ep>

00005d6e <__udivmodsi4_loop>:
    5d6e:	aa 1f       	adc	r26, r26
    5d70:	bb 1f       	adc	r27, r27
    5d72:	ee 1f       	adc	r30, r30
    5d74:	ff 1f       	adc	r31, r31
    5d76:	a2 17       	cp	r26, r18
    5d78:	b3 07       	cpc	r27, r19
    5d7a:	e4 07       	cpc	r30, r20
    5d7c:	f5 07       	cpc	r31, r21
    5d7e:	20 f0       	brcs	.+8      	; 0x5d88 <__udivmodsi4_ep>
    5d80:	a2 1b       	sub	r26, r18
    5d82:	b3 0b       	sbc	r27, r19
    5d84:	e4 0b       	sbc	r30, r20
    5d86:	f5 0b       	sbc	r31, r21

00005d88 <__udivmodsi4_ep>:
    5d88:	66 1f       	adc	r22, r22
    5d8a:	77 1f       	adc	r23, r23
    5d8c:	88 1f       	adc	r24, r24
    5d8e:	99 1f       	adc	r25, r25
    5d90:	1a 94       	dec	r1
    5d92:	69 f7       	brne	.-38     	; 0x5d6e <__udivmodsi4_loop>
    5d94:	60 95       	com	r22
    5d96:	70 95       	com	r23
    5d98:	80 95       	com	r24
    5d9a:	90 95       	com	r25
    5d9c:	9b 01       	movw	r18, r22
    5d9e:	ac 01       	movw	r20, r24
    5da0:	bd 01       	movw	r22, r26
    5da2:	cf 01       	movw	r24, r30
    5da4:	08 95       	ret

00005da6 <__divmodsi4>:
    5da6:	05 2e       	mov	r0, r21
    5da8:	97 fb       	bst	r25, 7
    5daa:	16 f4       	brtc	.+4      	; 0x5db0 <__divmodsi4+0xa>
    5dac:	00 94       	com	r0
    5dae:	0f d0       	rcall	.+30     	; 0x5dce <__negsi2>
    5db0:	57 fd       	sbrc	r21, 7
    5db2:	05 d0       	rcall	.+10     	; 0x5dbe <__divmodsi4_neg2>
    5db4:	d6 df       	rcall	.-84     	; 0x5d62 <__udivmodsi4>
    5db6:	07 fc       	sbrc	r0, 7
    5db8:	02 d0       	rcall	.+4      	; 0x5dbe <__divmodsi4_neg2>
    5dba:	46 f4       	brtc	.+16     	; 0x5dcc <__divmodsi4_exit>
    5dbc:	08 c0       	rjmp	.+16     	; 0x5dce <__negsi2>

00005dbe <__divmodsi4_neg2>:
    5dbe:	50 95       	com	r21
    5dc0:	40 95       	com	r20
    5dc2:	30 95       	com	r19
    5dc4:	21 95       	neg	r18
    5dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc8:	4f 4f       	sbci	r20, 0xFF	; 255
    5dca:	5f 4f       	sbci	r21, 0xFF	; 255

00005dcc <__divmodsi4_exit>:
    5dcc:	08 95       	ret

00005dce <__negsi2>:
    5dce:	90 95       	com	r25
    5dd0:	80 95       	com	r24
    5dd2:	70 95       	com	r23
    5dd4:	61 95       	neg	r22
    5dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    5dda:	9f 4f       	sbci	r25, 0xFF	; 255
    5ddc:	08 95       	ret

00005dde <__tablejump2__>:
    5dde:	ee 0f       	add	r30, r30
    5de0:	ff 1f       	adc	r31, r31
    5de2:	88 1f       	adc	r24, r24
    5de4:	8b bf       	out	0x3b, r24	; 59
    5de6:	07 90       	elpm	r0, Z+
    5de8:	f6 91       	elpm	r31, Z
    5dea:	e0 2d       	mov	r30, r0
    5dec:	19 94       	eijmp

00005dee <__muluhisi3>:
    5dee:	09 d0       	rcall	.+18     	; 0x5e02 <__umulhisi3>
    5df0:	a5 9f       	mul	r26, r21
    5df2:	90 0d       	add	r25, r0
    5df4:	b4 9f       	mul	r27, r20
    5df6:	90 0d       	add	r25, r0
    5df8:	a4 9f       	mul	r26, r20
    5dfa:	80 0d       	add	r24, r0
    5dfc:	91 1d       	adc	r25, r1
    5dfe:	11 24       	eor	r1, r1
    5e00:	08 95       	ret

00005e02 <__umulhisi3>:
    5e02:	a2 9f       	mul	r26, r18
    5e04:	b0 01       	movw	r22, r0
    5e06:	b3 9f       	mul	r27, r19
    5e08:	c0 01       	movw	r24, r0
    5e0a:	a3 9f       	mul	r26, r19
    5e0c:	70 0d       	add	r23, r0
    5e0e:	81 1d       	adc	r24, r1
    5e10:	11 24       	eor	r1, r1
    5e12:	91 1d       	adc	r25, r1
    5e14:	b2 9f       	mul	r27, r18
    5e16:	70 0d       	add	r23, r0
    5e18:	81 1d       	adc	r24, r1
    5e1a:	11 24       	eor	r1, r1
    5e1c:	91 1d       	adc	r25, r1
    5e1e:	08 95       	ret

00005e20 <malloc>:
    5e20:	0f 93       	push	r16
    5e22:	1f 93       	push	r17
    5e24:	cf 93       	push	r28
    5e26:	df 93       	push	r29
    5e28:	82 30       	cpi	r24, 0x02	; 2
    5e2a:	91 05       	cpc	r25, r1
    5e2c:	10 f4       	brcc	.+4      	; 0x5e32 <malloc+0x12>
    5e2e:	82 e0       	ldi	r24, 0x02	; 2
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <__flp>
    5e36:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <__flp+0x1>
    5e3a:	20 e0       	ldi	r18, 0x00	; 0
    5e3c:	30 e0       	ldi	r19, 0x00	; 0
    5e3e:	a0 e0       	ldi	r26, 0x00	; 0
    5e40:	b0 e0       	ldi	r27, 0x00	; 0
    5e42:	30 97       	sbiw	r30, 0x00	; 0
    5e44:	19 f1       	breq	.+70     	; 0x5e8c <malloc+0x6c>
    5e46:	40 81       	ld	r20, Z
    5e48:	51 81       	ldd	r21, Z+1	; 0x01
    5e4a:	02 81       	ldd	r16, Z+2	; 0x02
    5e4c:	13 81       	ldd	r17, Z+3	; 0x03
    5e4e:	48 17       	cp	r20, r24
    5e50:	59 07       	cpc	r21, r25
    5e52:	c8 f0       	brcs	.+50     	; 0x5e86 <malloc+0x66>
    5e54:	84 17       	cp	r24, r20
    5e56:	95 07       	cpc	r25, r21
    5e58:	69 f4       	brne	.+26     	; 0x5e74 <malloc+0x54>
    5e5a:	10 97       	sbiw	r26, 0x00	; 0
    5e5c:	31 f0       	breq	.+12     	; 0x5e6a <malloc+0x4a>
    5e5e:	12 96       	adiw	r26, 0x02	; 2
    5e60:	0c 93       	st	X, r16
    5e62:	12 97       	sbiw	r26, 0x02	; 2
    5e64:	13 96       	adiw	r26, 0x03	; 3
    5e66:	1c 93       	st	X, r17
    5e68:	27 c0       	rjmp	.+78     	; 0x5eb8 <malloc+0x98>
    5e6a:	00 93 58 05 	sts	0x0558, r16	; 0x800558 <__flp>
    5e6e:	10 93 59 05 	sts	0x0559, r17	; 0x800559 <__flp+0x1>
    5e72:	22 c0       	rjmp	.+68     	; 0x5eb8 <malloc+0x98>
    5e74:	21 15       	cp	r18, r1
    5e76:	31 05       	cpc	r19, r1
    5e78:	19 f0       	breq	.+6      	; 0x5e80 <malloc+0x60>
    5e7a:	42 17       	cp	r20, r18
    5e7c:	53 07       	cpc	r21, r19
    5e7e:	18 f4       	brcc	.+6      	; 0x5e86 <malloc+0x66>
    5e80:	9a 01       	movw	r18, r20
    5e82:	bd 01       	movw	r22, r26
    5e84:	ef 01       	movw	r28, r30
    5e86:	df 01       	movw	r26, r30
    5e88:	f8 01       	movw	r30, r16
    5e8a:	db cf       	rjmp	.-74     	; 0x5e42 <malloc+0x22>
    5e8c:	21 15       	cp	r18, r1
    5e8e:	31 05       	cpc	r19, r1
    5e90:	f9 f0       	breq	.+62     	; 0x5ed0 <malloc+0xb0>
    5e92:	28 1b       	sub	r18, r24
    5e94:	39 0b       	sbc	r19, r25
    5e96:	24 30       	cpi	r18, 0x04	; 4
    5e98:	31 05       	cpc	r19, r1
    5e9a:	80 f4       	brcc	.+32     	; 0x5ebc <malloc+0x9c>
    5e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    5ea0:	61 15       	cp	r22, r1
    5ea2:	71 05       	cpc	r23, r1
    5ea4:	21 f0       	breq	.+8      	; 0x5eae <malloc+0x8e>
    5ea6:	fb 01       	movw	r30, r22
    5ea8:	93 83       	std	Z+3, r25	; 0x03
    5eaa:	82 83       	std	Z+2, r24	; 0x02
    5eac:	04 c0       	rjmp	.+8      	; 0x5eb6 <malloc+0x96>
    5eae:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <__flp+0x1>
    5eb2:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <__flp>
    5eb6:	fe 01       	movw	r30, r28
    5eb8:	32 96       	adiw	r30, 0x02	; 2
    5eba:	44 c0       	rjmp	.+136    	; 0x5f44 <malloc+0x124>
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	e2 0f       	add	r30, r18
    5ec0:	f3 1f       	adc	r31, r19
    5ec2:	81 93       	st	Z+, r24
    5ec4:	91 93       	st	Z+, r25
    5ec6:	22 50       	subi	r18, 0x02	; 2
    5ec8:	31 09       	sbc	r19, r1
    5eca:	39 83       	std	Y+1, r19	; 0x01
    5ecc:	28 83       	st	Y, r18
    5ece:	3a c0       	rjmp	.+116    	; 0x5f44 <malloc+0x124>
    5ed0:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <__brkval>
    5ed4:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <__brkval+0x1>
    5ed8:	23 2b       	or	r18, r19
    5eda:	41 f4       	brne	.+16     	; 0x5eec <malloc+0xcc>
    5edc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5ee0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5ee4:	30 93 57 05 	sts	0x0557, r19	; 0x800557 <__brkval+0x1>
    5ee8:	20 93 56 05 	sts	0x0556, r18	; 0x800556 <__brkval>
    5eec:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5ef0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5ef4:	21 15       	cp	r18, r1
    5ef6:	31 05       	cpc	r19, r1
    5ef8:	41 f4       	brne	.+16     	; 0x5f0a <malloc+0xea>
    5efa:	2d b7       	in	r18, 0x3d	; 61
    5efc:	3e b7       	in	r19, 0x3e	; 62
    5efe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5f02:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5f06:	24 1b       	sub	r18, r20
    5f08:	35 0b       	sbc	r19, r21
    5f0a:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <__brkval>
    5f0e:	f0 91 57 05 	lds	r31, 0x0557	; 0x800557 <__brkval+0x1>
    5f12:	e2 17       	cp	r30, r18
    5f14:	f3 07       	cpc	r31, r19
    5f16:	a0 f4       	brcc	.+40     	; 0x5f40 <malloc+0x120>
    5f18:	2e 1b       	sub	r18, r30
    5f1a:	3f 0b       	sbc	r19, r31
    5f1c:	28 17       	cp	r18, r24
    5f1e:	39 07       	cpc	r19, r25
    5f20:	78 f0       	brcs	.+30     	; 0x5f40 <malloc+0x120>
    5f22:	ac 01       	movw	r20, r24
    5f24:	4e 5f       	subi	r20, 0xFE	; 254
    5f26:	5f 4f       	sbci	r21, 0xFF	; 255
    5f28:	24 17       	cp	r18, r20
    5f2a:	35 07       	cpc	r19, r21
    5f2c:	48 f0       	brcs	.+18     	; 0x5f40 <malloc+0x120>
    5f2e:	4e 0f       	add	r20, r30
    5f30:	5f 1f       	adc	r21, r31
    5f32:	50 93 57 05 	sts	0x0557, r21	; 0x800557 <__brkval+0x1>
    5f36:	40 93 56 05 	sts	0x0556, r20	; 0x800556 <__brkval>
    5f3a:	81 93       	st	Z+, r24
    5f3c:	91 93       	st	Z+, r25
    5f3e:	02 c0       	rjmp	.+4      	; 0x5f44 <malloc+0x124>
    5f40:	e0 e0       	ldi	r30, 0x00	; 0
    5f42:	f0 e0       	ldi	r31, 0x00	; 0
    5f44:	cf 01       	movw	r24, r30
    5f46:	df 91       	pop	r29
    5f48:	cf 91       	pop	r28
    5f4a:	1f 91       	pop	r17
    5f4c:	0f 91       	pop	r16
    5f4e:	08 95       	ret

00005f50 <free>:
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	00 97       	sbiw	r24, 0x00	; 0
    5f56:	09 f4       	brne	.+2      	; 0x5f5a <free+0xa>
    5f58:	81 c0       	rjmp	.+258    	; 0x605c <free+0x10c>
    5f5a:	fc 01       	movw	r30, r24
    5f5c:	32 97       	sbiw	r30, 0x02	; 2
    5f5e:	13 82       	std	Z+3, r1	; 0x03
    5f60:	12 82       	std	Z+2, r1	; 0x02
    5f62:	a0 91 58 05 	lds	r26, 0x0558	; 0x800558 <__flp>
    5f66:	b0 91 59 05 	lds	r27, 0x0559	; 0x800559 <__flp+0x1>
    5f6a:	10 97       	sbiw	r26, 0x00	; 0
    5f6c:	81 f4       	brne	.+32     	; 0x5f8e <free+0x3e>
    5f6e:	20 81       	ld	r18, Z
    5f70:	31 81       	ldd	r19, Z+1	; 0x01
    5f72:	82 0f       	add	r24, r18
    5f74:	93 1f       	adc	r25, r19
    5f76:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <__brkval>
    5f7a:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <__brkval+0x1>
    5f7e:	28 17       	cp	r18, r24
    5f80:	39 07       	cpc	r19, r25
    5f82:	51 f5       	brne	.+84     	; 0x5fd8 <free+0x88>
    5f84:	f0 93 57 05 	sts	0x0557, r31	; 0x800557 <__brkval+0x1>
    5f88:	e0 93 56 05 	sts	0x0556, r30	; 0x800556 <__brkval>
    5f8c:	67 c0       	rjmp	.+206    	; 0x605c <free+0x10c>
    5f8e:	ed 01       	movw	r28, r26
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	ce 17       	cp	r28, r30
    5f96:	df 07       	cpc	r29, r31
    5f98:	40 f4       	brcc	.+16     	; 0x5faa <free+0x5a>
    5f9a:	4a 81       	ldd	r20, Y+2	; 0x02
    5f9c:	5b 81       	ldd	r21, Y+3	; 0x03
    5f9e:	9e 01       	movw	r18, r28
    5fa0:	41 15       	cp	r20, r1
    5fa2:	51 05       	cpc	r21, r1
    5fa4:	f1 f0       	breq	.+60     	; 0x5fe2 <free+0x92>
    5fa6:	ea 01       	movw	r28, r20
    5fa8:	f5 cf       	rjmp	.-22     	; 0x5f94 <free+0x44>
    5faa:	d3 83       	std	Z+3, r29	; 0x03
    5fac:	c2 83       	std	Z+2, r28	; 0x02
    5fae:	40 81       	ld	r20, Z
    5fb0:	51 81       	ldd	r21, Z+1	; 0x01
    5fb2:	84 0f       	add	r24, r20
    5fb4:	95 1f       	adc	r25, r21
    5fb6:	c8 17       	cp	r28, r24
    5fb8:	d9 07       	cpc	r29, r25
    5fba:	59 f4       	brne	.+22     	; 0x5fd2 <free+0x82>
    5fbc:	88 81       	ld	r24, Y
    5fbe:	99 81       	ldd	r25, Y+1	; 0x01
    5fc0:	84 0f       	add	r24, r20
    5fc2:	95 1f       	adc	r25, r21
    5fc4:	02 96       	adiw	r24, 0x02	; 2
    5fc6:	91 83       	std	Z+1, r25	; 0x01
    5fc8:	80 83       	st	Z, r24
    5fca:	8a 81       	ldd	r24, Y+2	; 0x02
    5fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    5fce:	93 83       	std	Z+3, r25	; 0x03
    5fd0:	82 83       	std	Z+2, r24	; 0x02
    5fd2:	21 15       	cp	r18, r1
    5fd4:	31 05       	cpc	r19, r1
    5fd6:	29 f4       	brne	.+10     	; 0x5fe2 <free+0x92>
    5fd8:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <__flp+0x1>
    5fdc:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <__flp>
    5fe0:	3d c0       	rjmp	.+122    	; 0x605c <free+0x10c>
    5fe2:	e9 01       	movw	r28, r18
    5fe4:	fb 83       	std	Y+3, r31	; 0x03
    5fe6:	ea 83       	std	Y+2, r30	; 0x02
    5fe8:	49 91       	ld	r20, Y+
    5fea:	59 91       	ld	r21, Y+
    5fec:	c4 0f       	add	r28, r20
    5fee:	d5 1f       	adc	r29, r21
    5ff0:	ec 17       	cp	r30, r28
    5ff2:	fd 07       	cpc	r31, r29
    5ff4:	61 f4       	brne	.+24     	; 0x600e <free+0xbe>
    5ff6:	80 81       	ld	r24, Z
    5ff8:	91 81       	ldd	r25, Z+1	; 0x01
    5ffa:	84 0f       	add	r24, r20
    5ffc:	95 1f       	adc	r25, r21
    5ffe:	02 96       	adiw	r24, 0x02	; 2
    6000:	e9 01       	movw	r28, r18
    6002:	99 83       	std	Y+1, r25	; 0x01
    6004:	88 83       	st	Y, r24
    6006:	82 81       	ldd	r24, Z+2	; 0x02
    6008:	93 81       	ldd	r25, Z+3	; 0x03
    600a:	9b 83       	std	Y+3, r25	; 0x03
    600c:	8a 83       	std	Y+2, r24	; 0x02
    600e:	e0 e0       	ldi	r30, 0x00	; 0
    6010:	f0 e0       	ldi	r31, 0x00	; 0
    6012:	12 96       	adiw	r26, 0x02	; 2
    6014:	8d 91       	ld	r24, X+
    6016:	9c 91       	ld	r25, X
    6018:	13 97       	sbiw	r26, 0x03	; 3
    601a:	00 97       	sbiw	r24, 0x00	; 0
    601c:	19 f0       	breq	.+6      	; 0x6024 <free+0xd4>
    601e:	fd 01       	movw	r30, r26
    6020:	dc 01       	movw	r26, r24
    6022:	f7 cf       	rjmp	.-18     	; 0x6012 <free+0xc2>
    6024:	8d 91       	ld	r24, X+
    6026:	9c 91       	ld	r25, X
    6028:	11 97       	sbiw	r26, 0x01	; 1
    602a:	9d 01       	movw	r18, r26
    602c:	2e 5f       	subi	r18, 0xFE	; 254
    602e:	3f 4f       	sbci	r19, 0xFF	; 255
    6030:	82 0f       	add	r24, r18
    6032:	93 1f       	adc	r25, r19
    6034:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <__brkval>
    6038:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <__brkval+0x1>
    603c:	28 17       	cp	r18, r24
    603e:	39 07       	cpc	r19, r25
    6040:	69 f4       	brne	.+26     	; 0x605c <free+0x10c>
    6042:	30 97       	sbiw	r30, 0x00	; 0
    6044:	29 f4       	brne	.+10     	; 0x6050 <free+0x100>
    6046:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <__flp+0x1>
    604a:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <__flp>
    604e:	02 c0       	rjmp	.+4      	; 0x6054 <free+0x104>
    6050:	13 82       	std	Z+3, r1	; 0x03
    6052:	12 82       	std	Z+2, r1	; 0x02
    6054:	b0 93 57 05 	sts	0x0557, r27	; 0x800557 <__brkval+0x1>
    6058:	a0 93 56 05 	sts	0x0556, r26	; 0x800556 <__brkval>
    605c:	df 91       	pop	r29
    605e:	cf 91       	pop	r28
    6060:	08 95       	ret

00006062 <realloc>:
    6062:	6f 92       	push	r6
    6064:	7f 92       	push	r7
    6066:	8f 92       	push	r8
    6068:	9f 92       	push	r9
    606a:	af 92       	push	r10
    606c:	bf 92       	push	r11
    606e:	cf 92       	push	r12
    6070:	df 92       	push	r13
    6072:	ef 92       	push	r14
    6074:	ff 92       	push	r15
    6076:	0f 93       	push	r16
    6078:	1f 93       	push	r17
    607a:	cf 93       	push	r28
    607c:	df 93       	push	r29
    607e:	00 97       	sbiw	r24, 0x00	; 0
    6080:	81 f4       	brne	.+32     	; 0x60a2 <realloc+0x40>
    6082:	cb 01       	movw	r24, r22
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	1f 91       	pop	r17
    608a:	0f 91       	pop	r16
    608c:	ff 90       	pop	r15
    608e:	ef 90       	pop	r14
    6090:	df 90       	pop	r13
    6092:	cf 90       	pop	r12
    6094:	bf 90       	pop	r11
    6096:	af 90       	pop	r10
    6098:	9f 90       	pop	r9
    609a:	8f 90       	pop	r8
    609c:	7f 90       	pop	r7
    609e:	6f 90       	pop	r6
    60a0:	bf ce       	rjmp	.-642    	; 0x5e20 <malloc>
    60a2:	fc 01       	movw	r30, r24
    60a4:	e6 0f       	add	r30, r22
    60a6:	f7 1f       	adc	r31, r23
    60a8:	9c 01       	movw	r18, r24
    60aa:	22 50       	subi	r18, 0x02	; 2
    60ac:	31 09       	sbc	r19, r1
    60ae:	e2 17       	cp	r30, r18
    60b0:	f3 07       	cpc	r31, r19
    60b2:	08 f4       	brcc	.+2      	; 0x60b6 <realloc+0x54>
    60b4:	a5 c0       	rjmp	.+330    	; 0x6200 <realloc+0x19e>
    60b6:	ec 01       	movw	r28, r24
    60b8:	d9 01       	movw	r26, r18
    60ba:	0d 91       	ld	r16, X+
    60bc:	1c 91       	ld	r17, X
    60be:	11 97       	sbiw	r26, 0x01	; 1
    60c0:	06 17       	cp	r16, r22
    60c2:	17 07       	cpc	r17, r23
    60c4:	a8 f0       	brcs	.+42     	; 0x60f0 <realloc+0x8e>
    60c6:	05 30       	cpi	r16, 0x05	; 5
    60c8:	11 05       	cpc	r17, r1
    60ca:	08 f4       	brcc	.+2      	; 0x60ce <realloc+0x6c>
    60cc:	97 c0       	rjmp	.+302    	; 0x61fc <realloc+0x19a>
    60ce:	c8 01       	movw	r24, r16
    60d0:	04 97       	sbiw	r24, 0x04	; 4
    60d2:	86 17       	cp	r24, r22
    60d4:	97 07       	cpc	r25, r23
    60d6:	08 f4       	brcc	.+2      	; 0x60da <realloc+0x78>
    60d8:	91 c0       	rjmp	.+290    	; 0x61fc <realloc+0x19a>
    60da:	02 50       	subi	r16, 0x02	; 2
    60dc:	11 09       	sbc	r17, r1
    60de:	06 1b       	sub	r16, r22
    60e0:	17 0b       	sbc	r17, r23
    60e2:	01 93       	st	Z+, r16
    60e4:	11 93       	st	Z+, r17
    60e6:	6d 93       	st	X+, r22
    60e8:	7c 93       	st	X, r23
    60ea:	cf 01       	movw	r24, r30
    60ec:	31 df       	rcall	.-414    	; 0x5f50 <free>
    60ee:	86 c0       	rjmp	.+268    	; 0x61fc <realloc+0x19a>
    60f0:	5b 01       	movw	r10, r22
    60f2:	a0 1a       	sub	r10, r16
    60f4:	b1 0a       	sbc	r11, r17
    60f6:	4c 01       	movw	r8, r24
    60f8:	80 0e       	add	r8, r16
    60fa:	91 1e       	adc	r9, r17
    60fc:	a0 91 58 05 	lds	r26, 0x0558	; 0x800558 <__flp>
    6100:	b0 91 59 05 	lds	r27, 0x0559	; 0x800559 <__flp+0x1>
    6104:	61 2c       	mov	r6, r1
    6106:	71 2c       	mov	r7, r1
    6108:	e1 2c       	mov	r14, r1
    610a:	f1 2c       	mov	r15, r1
    610c:	10 97       	sbiw	r26, 0x00	; 0
    610e:	09 f4       	brne	.+2      	; 0x6112 <realloc+0xb0>
    6110:	46 c0       	rjmp	.+140    	; 0x619e <realloc+0x13c>
    6112:	8d 91       	ld	r24, X+
    6114:	9c 91       	ld	r25, X
    6116:	11 97       	sbiw	r26, 0x01	; 1
    6118:	a8 15       	cp	r26, r8
    611a:	b9 05       	cpc	r27, r9
    611c:	b1 f5       	brne	.+108    	; 0x618a <realloc+0x128>
    611e:	6c 01       	movw	r12, r24
    6120:	42 e0       	ldi	r20, 0x02	; 2
    6122:	c4 0e       	add	r12, r20
    6124:	d1 1c       	adc	r13, r1
    6126:	ca 14       	cp	r12, r10
    6128:	db 04       	cpc	r13, r11
    612a:	78 f1       	brcs	.+94     	; 0x618a <realloc+0x128>
    612c:	4c 01       	movw	r8, r24
    612e:	8a 18       	sub	r8, r10
    6130:	9b 08       	sbc	r9, r11
    6132:	64 01       	movw	r12, r8
    6134:	42 e0       	ldi	r20, 0x02	; 2
    6136:	c4 0e       	add	r12, r20
    6138:	d1 1c       	adc	r13, r1
    613a:	12 96       	adiw	r26, 0x02	; 2
    613c:	bc 90       	ld	r11, X
    613e:	12 97       	sbiw	r26, 0x02	; 2
    6140:	13 96       	adiw	r26, 0x03	; 3
    6142:	ac 91       	ld	r26, X
    6144:	b5 e0       	ldi	r27, 0x05	; 5
    6146:	cb 16       	cp	r12, r27
    6148:	d1 04       	cpc	r13, r1
    614a:	40 f0       	brcs	.+16     	; 0x615c <realloc+0xfa>
    614c:	b2 82       	std	Z+2, r11	; 0x02
    614e:	a3 83       	std	Z+3, r26	; 0x03
    6150:	91 82       	std	Z+1, r9	; 0x01
    6152:	80 82       	st	Z, r8
    6154:	d9 01       	movw	r26, r18
    6156:	6d 93       	st	X+, r22
    6158:	7c 93       	st	X, r23
    615a:	09 c0       	rjmp	.+18     	; 0x616e <realloc+0x10c>
    615c:	0e 5f       	subi	r16, 0xFE	; 254
    615e:	1f 4f       	sbci	r17, 0xFF	; 255
    6160:	80 0f       	add	r24, r16
    6162:	91 1f       	adc	r25, r17
    6164:	f9 01       	movw	r30, r18
    6166:	91 83       	std	Z+1, r25	; 0x01
    6168:	80 83       	st	Z, r24
    616a:	eb 2d       	mov	r30, r11
    616c:	fa 2f       	mov	r31, r26
    616e:	e1 14       	cp	r14, r1
    6170:	f1 04       	cpc	r15, r1
    6172:	31 f0       	breq	.+12     	; 0x6180 <realloc+0x11e>
    6174:	d7 01       	movw	r26, r14
    6176:	13 96       	adiw	r26, 0x03	; 3
    6178:	fc 93       	st	X, r31
    617a:	ee 93       	st	-X, r30
    617c:	12 97       	sbiw	r26, 0x02	; 2
    617e:	3e c0       	rjmp	.+124    	; 0x61fc <realloc+0x19a>
    6180:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <__flp+0x1>
    6184:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <__flp>
    6188:	39 c0       	rjmp	.+114    	; 0x61fc <realloc+0x19a>
    618a:	68 16       	cp	r6, r24
    618c:	79 06       	cpc	r7, r25
    618e:	08 f4       	brcc	.+2      	; 0x6192 <realloc+0x130>
    6190:	3c 01       	movw	r6, r24
    6192:	7d 01       	movw	r14, r26
    6194:	12 96       	adiw	r26, 0x02	; 2
    6196:	0d 90       	ld	r0, X+
    6198:	bc 91       	ld	r27, X
    619a:	a0 2d       	mov	r26, r0
    619c:	b7 cf       	rjmp	.-146    	; 0x610c <realloc+0xaa>
    619e:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <__brkval>
    61a2:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <__brkval+0x1>
    61a6:	88 16       	cp	r8, r24
    61a8:	99 06       	cpc	r9, r25
    61aa:	e1 f4       	brne	.+56     	; 0x61e4 <realloc+0x182>
    61ac:	66 16       	cp	r6, r22
    61ae:	77 06       	cpc	r7, r23
    61b0:	c8 f4       	brcc	.+50     	; 0x61e4 <realloc+0x182>
    61b2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    61b6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    61ba:	00 97       	sbiw	r24, 0x00	; 0
    61bc:	41 f4       	brne	.+16     	; 0x61ce <realloc+0x16c>
    61be:	8d b7       	in	r24, 0x3d	; 61
    61c0:	9e b7       	in	r25, 0x3e	; 62
    61c2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    61c6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    61ca:	84 1b       	sub	r24, r20
    61cc:	95 0b       	sbc	r25, r21
    61ce:	e8 17       	cp	r30, r24
    61d0:	f9 07       	cpc	r31, r25
    61d2:	b0 f4       	brcc	.+44     	; 0x6200 <realloc+0x19e>
    61d4:	f0 93 57 05 	sts	0x0557, r31	; 0x800557 <__brkval+0x1>
    61d8:	e0 93 56 05 	sts	0x0556, r30	; 0x800556 <__brkval>
    61dc:	f9 01       	movw	r30, r18
    61de:	71 83       	std	Z+1, r23	; 0x01
    61e0:	60 83       	st	Z, r22
    61e2:	0c c0       	rjmp	.+24     	; 0x61fc <realloc+0x19a>
    61e4:	cb 01       	movw	r24, r22
    61e6:	1c de       	rcall	.-968    	; 0x5e20 <malloc>
    61e8:	7c 01       	movw	r14, r24
    61ea:	00 97       	sbiw	r24, 0x00	; 0
    61ec:	49 f0       	breq	.+18     	; 0x6200 <realloc+0x19e>
    61ee:	a8 01       	movw	r20, r16
    61f0:	be 01       	movw	r22, r28
    61f2:	23 d0       	rcall	.+70     	; 0x623a <memcpy>
    61f4:	ce 01       	movw	r24, r28
    61f6:	ac de       	rcall	.-680    	; 0x5f50 <free>
    61f8:	c7 01       	movw	r24, r14
    61fa:	04 c0       	rjmp	.+8      	; 0x6204 <realloc+0x1a2>
    61fc:	ce 01       	movw	r24, r28
    61fe:	02 c0       	rjmp	.+4      	; 0x6204 <realloc+0x1a2>
    6200:	80 e0       	ldi	r24, 0x00	; 0
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	df 91       	pop	r29
    6206:	cf 91       	pop	r28
    6208:	1f 91       	pop	r17
    620a:	0f 91       	pop	r16
    620c:	ff 90       	pop	r15
    620e:	ef 90       	pop	r14
    6210:	df 90       	pop	r13
    6212:	cf 90       	pop	r12
    6214:	bf 90       	pop	r11
    6216:	af 90       	pop	r10
    6218:	9f 90       	pop	r9
    621a:	8f 90       	pop	r8
    621c:	7f 90       	pop	r7
    621e:	6f 90       	pop	r6
    6220:	08 95       	ret

00006222 <abort>:
    6222:	81 e0       	ldi	r24, 0x01	; 1
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	f8 94       	cli
    6228:	73 c0       	rjmp	.+230    	; 0x6310 <__do_global_dtors>

0000622a <toupper>:
    622a:	91 11       	cpse	r25, r1
    622c:	08 95       	ret
    622e:	81 56       	subi	r24, 0x61	; 97
    6230:	8a 51       	subi	r24, 0x1A	; 26
    6232:	08 f4       	brcc	.+2      	; 0x6236 <toupper+0xc>
    6234:	80 52       	subi	r24, 0x20	; 32
    6236:	85 58       	subi	r24, 0x85	; 133
    6238:	08 95       	ret

0000623a <memcpy>:
    623a:	fb 01       	movw	r30, r22
    623c:	dc 01       	movw	r26, r24
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <memcpy+0xa>
    6240:	01 90       	ld	r0, Z+
    6242:	0d 92       	st	X+, r0
    6244:	41 50       	subi	r20, 0x01	; 1
    6246:	50 40       	sbci	r21, 0x00	; 0
    6248:	d8 f7       	brcc	.-10     	; 0x6240 <memcpy+0x6>
    624a:	08 95       	ret

0000624c <memset>:
    624c:	dc 01       	movw	r26, r24
    624e:	01 c0       	rjmp	.+2      	; 0x6252 <memset+0x6>
    6250:	6d 93       	st	X+, r22
    6252:	41 50       	subi	r20, 0x01	; 1
    6254:	50 40       	sbci	r21, 0x00	; 0
    6256:	e0 f7       	brcc	.-8      	; 0x6250 <memset+0x4>
    6258:	08 95       	ret

0000625a <strcmp>:
    625a:	fb 01       	movw	r30, r22
    625c:	dc 01       	movw	r26, r24
    625e:	8d 91       	ld	r24, X+
    6260:	01 90       	ld	r0, Z+
    6262:	80 19       	sub	r24, r0
    6264:	01 10       	cpse	r0, r1
    6266:	d9 f3       	breq	.-10     	; 0x625e <strcmp+0x4>
    6268:	99 0b       	sbc	r25, r25
    626a:	08 95       	ret

0000626c <strcpy>:
    626c:	fb 01       	movw	r30, r22
    626e:	dc 01       	movw	r26, r24
    6270:	01 90       	ld	r0, Z+
    6272:	0d 92       	st	X+, r0
    6274:	00 20       	and	r0, r0
    6276:	e1 f7       	brne	.-8      	; 0x6270 <strcpy+0x4>
    6278:	08 95       	ret

0000627a <strlen>:
    627a:	fc 01       	movw	r30, r24
    627c:	01 90       	ld	r0, Z+
    627e:	00 20       	and	r0, r0
    6280:	e9 f7       	brne	.-6      	; 0x627c <strlen+0x2>
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	8e 0f       	add	r24, r30
    6288:	9f 1f       	adc	r25, r31
    628a:	08 95       	ret

0000628c <strncpy>:
    628c:	fb 01       	movw	r30, r22
    628e:	dc 01       	movw	r26, r24
    6290:	41 50       	subi	r20, 0x01	; 1
    6292:	50 40       	sbci	r21, 0x00	; 0
    6294:	48 f0       	brcs	.+18     	; 0x62a8 <strncpy+0x1c>
    6296:	01 90       	ld	r0, Z+
    6298:	0d 92       	st	X+, r0
    629a:	00 20       	and	r0, r0
    629c:	c9 f7       	brne	.-14     	; 0x6290 <strncpy+0x4>
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <strncpy+0x16>
    62a0:	1d 92       	st	X+, r1
    62a2:	41 50       	subi	r20, 0x01	; 1
    62a4:	50 40       	sbci	r21, 0x00	; 0
    62a6:	e0 f7       	brcc	.-8      	; 0x62a0 <strncpy+0x14>
    62a8:	08 95       	ret

000062aa <utoa>:
    62aa:	45 32       	cpi	r20, 0x25	; 37
    62ac:	51 05       	cpc	r21, r1
    62ae:	18 f4       	brcc	.+6      	; 0x62b6 <utoa+0xc>
    62b0:	42 30       	cpi	r20, 0x02	; 2
    62b2:	08 f0       	brcs	.+2      	; 0x62b6 <utoa+0xc>
    62b4:	04 c0       	rjmp	.+8      	; 0x62be <__utoa_ncheck>
    62b6:	fb 01       	movw	r30, r22
    62b8:	10 82       	st	Z, r1
    62ba:	cb 01       	movw	r24, r22
    62bc:	08 95       	ret

000062be <__utoa_ncheck>:
    62be:	bb 27       	eor	r27, r27

000062c0 <__utoa_common>:
    62c0:	fb 01       	movw	r30, r22
    62c2:	55 27       	eor	r21, r21
    62c4:	aa 27       	eor	r26, r26
    62c6:	88 0f       	add	r24, r24
    62c8:	99 1f       	adc	r25, r25
    62ca:	aa 1f       	adc	r26, r26
    62cc:	a4 17       	cp	r26, r20
    62ce:	10 f0       	brcs	.+4      	; 0x62d4 <__utoa_common+0x14>
    62d0:	a4 1b       	sub	r26, r20
    62d2:	83 95       	inc	r24
    62d4:	50 51       	subi	r21, 0x10	; 16
    62d6:	b9 f7       	brne	.-18     	; 0x62c6 <__utoa_common+0x6>
    62d8:	a0 5d       	subi	r26, 0xD0	; 208
    62da:	aa 33       	cpi	r26, 0x3A	; 58
    62dc:	08 f0       	brcs	.+2      	; 0x62e0 <__utoa_common+0x20>
    62de:	a9 5d       	subi	r26, 0xD9	; 217
    62e0:	a1 93       	st	Z+, r26
    62e2:	00 97       	sbiw	r24, 0x00	; 0
    62e4:	79 f7       	brne	.-34     	; 0x62c4 <__utoa_common+0x4>
    62e6:	b1 11       	cpse	r27, r1
    62e8:	b1 93       	st	Z+, r27
    62ea:	11 92       	st	Z+, r1
    62ec:	cb 01       	movw	r24, r22
    62ee:	00 c0       	rjmp	.+0      	; 0x62f0 <strrev>

000062f0 <strrev>:
    62f0:	dc 01       	movw	r26, r24
    62f2:	fc 01       	movw	r30, r24
    62f4:	67 2f       	mov	r22, r23
    62f6:	71 91       	ld	r23, Z+
    62f8:	77 23       	and	r23, r23
    62fa:	e1 f7       	brne	.-8      	; 0x62f4 <strrev+0x4>
    62fc:	32 97       	sbiw	r30, 0x02	; 2
    62fe:	04 c0       	rjmp	.+8      	; 0x6308 <strrev+0x18>
    6300:	7c 91       	ld	r23, X
    6302:	6d 93       	st	X+, r22
    6304:	70 83       	st	Z, r23
    6306:	62 91       	ld	r22, -Z
    6308:	ae 17       	cp	r26, r30
    630a:	bf 07       	cpc	r27, r31
    630c:	c8 f3       	brcs	.-14     	; 0x6300 <strrev+0x10>
    630e:	08 95       	ret

00006310 <__do_global_dtors>:
    6310:	11 e0       	ldi	r17, 0x01	; 1
    6312:	c7 e1       	ldi	r28, 0x17	; 23
    6314:	d1 e0       	ldi	r29, 0x01	; 1
    6316:	00 e0       	ldi	r16, 0x00	; 0
    6318:	05 c0       	rjmp	.+10     	; 0x6324 <__do_global_dtors+0x14>
    631a:	80 2f       	mov	r24, r16
    631c:	fe 01       	movw	r30, r28
    631e:	5f dd       	rcall	.-1346   	; 0x5dde <__tablejump2__>
    6320:	21 96       	adiw	r28, 0x01	; 1
    6322:	01 1d       	adc	r16, r1
    6324:	c8 31       	cpi	r28, 0x18	; 24
    6326:	d1 07       	cpc	r29, r17
    6328:	80 e0       	ldi	r24, 0x00	; 0
    632a:	08 07       	cpc	r16, r24
    632c:	b1 f7       	brne	.-20     	; 0x631a <__do_global_dtors+0xa>
    632e:	f8 94       	cli

00006330 <__stop_program>:
    6330:	ff cf       	rjmp	.-2      	; 0x6330 <__stop_program>
