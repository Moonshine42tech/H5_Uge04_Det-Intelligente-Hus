
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800200  000066b0  00006744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  008002ec  008002ec  00006830  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006830  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c88  00000000  00000000  000068a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018a0a  00000000  00000000  00007528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004114  00000000  00000000  0001ff32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000777d  00000000  00000000  00024046  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003094  00000000  00000000  0002b7c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058ed  00000000  00000000  0002e858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b6bb  00000000  00000000  00034145  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c08  00000000  00000000  0003f800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1e 2c 	jmp	0x583c	; 0x583c <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3c 2b 	jmp	0x5678	; 0x5678 <__vector_25>
      68:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	59 2d       	mov	r21, r9
      e6:	5c 2d       	mov	r21, r12
      e8:	4b 2d       	mov	r20, r11
      ea:	4f 2d       	mov	r20, r15
      ec:	55 2d       	mov	r21, r5
      ee:	93 2d       	mov	r25, r3
      f0:	60 2d       	mov	r22, r0
      f2:	64 2d       	mov	r22, r4
      f4:	6a 2d       	mov	r22, r10
      f6:	6e 2d       	mov	r22, r14
      f8:	72 2d       	mov	r23, r2
      fa:	78 2d       	mov	r23, r8
      fc:	7c 2d       	mov	r23, r12
      fe:	80 2d       	mov	r24, r0
     100:	93 2d       	mov	r25, r3
     102:	86 2d       	mov	r24, r6
     104:	8a 2d       	mov	r24, r10
     106:	8e 2d       	mov	r24, r14

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	9f 07       	cpc	r25, r31
     22a:	14 28       	or	r1, r4
     22c:	a4 2b       	or	r26, r20

0000022e <__ctors_end>:
     22e:	ab 07       	cpc	r26, r27

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	12 e0       	ldi	r17, 0x02	; 2
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e0 eb       	ldi	r30, 0xB0	; 176
     248:	f6 e6       	ldi	r31, 0x66	; 102
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ac 3e       	cpi	r26, 0xEC	; 236
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	ac ee       	ldi	r26, 0xEC	; 236
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a6 34       	cpi	r26, 0x46	; 70
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 ae 30 	call	0x615c	; 0x615c <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <main>
     28e:	0c 94 47 33 	jmp	0x668e	; 0x668e <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	1f 92       	push	r1
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	fc 01       	movw	r30, r24
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <_ZN6StringpLEc+0x6>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	6b 81       	ldd	r22, Y+3	; 0x03
     2ce:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6String6concatEc>
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZNK6StringeqERKS_+0x6>
     2e8:	1f 92       	push	r1
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	7c 83       	std	Y+4, r23	; 0x04
     2f4:	6b 83       	std	Y+3, r22	; 0x03
     2f6:	2b 81       	ldd	r18, Y+3	; 0x03
     2f8:	3c 81       	ldd	r19, Y+4	; 0x04
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	b9 01       	movw	r22, r18
     300:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <_ZNK6String6equalsERKS_>
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <_ZNK6StringeqEPKc>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <_ZNK6StringeqEPKc+0x6>
     318:	1f 92       	push	r1
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	7c 83       	std	Y+4, r23	; 0x04
     324:	6b 83       	std	Y+3, r22	; 0x03
     326:	2b 81       	ldd	r18, Y+3	; 0x03
     328:	3c 81       	ldd	r19, Y+4	; 0x04
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	b9 01       	movw	r22, r18
     330:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_ZNK6String6equalsEPKc>
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	00 d0       	rcall	.+0      	; 0x348 <_ZNK6String9substringEj+0x6>
     348:	00 d0       	rcall	.+0      	; 0x34a <_ZNK6String9substringEj+0x8>
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	7c 83       	std	Y+4, r23	; 0x04
     354:	6b 83       	std	Y+3, r22	; 0x03
     356:	5e 83       	std	Y+6, r21	; 0x06
     358:	4d 83       	std	Y+5, r20	; 0x05
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	fc 01       	movw	r30, r24
     360:	24 81       	ldd	r18, Z+4	; 0x04
     362:	35 81       	ldd	r19, Z+5	; 0x05
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	4d 81       	ldd	r20, Y+5	; 0x05
     36a:	5e 81       	ldd	r21, Y+6	; 0x06
     36c:	6b 81       	ldd	r22, Y+3	; 0x03
     36e:	7c 81       	ldd	r23, Y+4	; 0x04
     370:	0e 94 0c 30 	call	0x6018	; 0x6018 <_ZNK6String9substringEjj>
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	26 96       	adiw	r28, 0x06	; 6
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <_ZN5Print5writeEPKc+0xa>
     394:	1f 92       	push	r1
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	7c 83       	std	Y+4, r23	; 0x04
     3a0:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	9c 81       	ldd	r25, Y+4	; 0x04
     3a6:	89 2b       	or	r24, r25
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <_ZN5Print5writeEPKc+0x26>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	15 c0       	rjmp	.+42     	; 0x3da <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	02 96       	adiw	r24, 0x02	; 2
     3bc:	fc 01       	movw	r30, r24
     3be:	00 81       	ld	r16, Z
     3c0:	11 81       	ldd	r17, Z+1	; 0x01
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <strlen>
     3ca:	ac 01       	movw	r20, r24
     3cc:	2b 81       	ldd	r18, Y+3	; 0x03
     3ce:	3c 81       	ldd	r19, Y+4	; 0x04
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	b9 01       	movw	r22, r18
     3d6:	f8 01       	movw	r30, r16
     3d8:	19 95       	eicall
    }
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <_ZN14HardwareSerial5beginEm+0x6>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <_ZN14HardwareSerial5beginEm+0x8>
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	4b 83       	std	Y+3, r20	; 0x03
     3fe:	5c 83       	std	Y+4, r21	; 0x04
     400:	6d 83       	std	Y+5, r22	; 0x05
     402:	7e 83       	std	Y+6, r23	; 0x06
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	9c 81       	ldd	r25, Y+4	; 0x04
     408:	ad 81       	ldd	r26, Y+5	; 0x05
     40a:	be 81       	ldd	r27, Y+6	; 0x06
     40c:	e9 81       	ldd	r30, Y+1	; 0x01
     40e:	fa 81       	ldd	r31, Y+2	; 0x02
     410:	26 e0       	ldi	r18, 0x06	; 6
     412:	ac 01       	movw	r20, r24
     414:	bd 01       	movw	r22, r26
     416:	cf 01       	movw	r24, r30
     418:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <_ZN14HardwareSerial5beginEmh>
     41c:	00 00       	nop
     41e:	26 96       	adiw	r28, 0x06	; 6
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	1f 92       	push	r1
     436:	1f 92       	push	r1
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	1f 92       	push	r1
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	25 e7       	ldi	r18, 0x75	; 117
     45e:	32 e0       	ldi	r19, 0x02	; 2
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	fc 01       	movw	r30, r24
     466:	31 83       	std	Z+1, r19	; 0x01
     468:	20 83       	st	Z, r18
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	89 2b       	or	r24, r25
     470:	21 f0       	breq	.+8      	; 0x47a <_ZN15Adafruit_SensorD1Ev+0x2e>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZdlPv>
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <_ZN15Adafruit_SensorD0Ev>:
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	1f 92       	push	r1
     48a:	1f 92       	push	r1
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	d9 df       	rcall	.-78     	; 0x44c <_ZN15Adafruit_SensorD1Ev>
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZdlPv>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	9a 83       	std	Y+2, r25	; 0x02
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     4bc:	00 00       	nop
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	9a 83       	std	Y+2, r25	; 0x02
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	7c 83       	std	Y+4, r23	; 0x04
     4dc:	6b 83       	std	Y+3, r22	; 0x03
     4de:	25 e7       	ldi	r18, 0x75	; 117
     4e0:	32 e0       	ldi	r19, 0x02	; 2
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	fc 01       	movw	r30, r24
     4e8:	31 83       	std	Z+1, r19	; 0x01
     4ea:	20 83       	st	Z, r18
     4ec:	8b 81       	ldd	r24, Y+3	; 0x03
     4ee:	9c 81       	ldd	r25, Y+4	; 0x04
     4f0:	fc 01       	movw	r30, r24
     4f2:	22 81       	ldd	r18, Z+2	; 0x02
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	9a 81       	ldd	r25, Y+2	; 0x02
     4f8:	fc 01       	movw	r30, r24
     4fa:	22 83       	std	Z+2, r18	; 0x02
     4fc:	00 00       	nop
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	00 d0       	rcall	.+0      	; 0x512 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     512:	1f 92       	push	r1
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	7c 83       	std	Y+4, r23	; 0x04
     51e:	6b 83       	std	Y+3, r22	; 0x03
     520:	2b 81       	ldd	r18, Y+3	; 0x03
     522:	3c 81       	ldd	r19, Y+4	; 0x04
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	b9 01       	movw	r22, r18
     52a:	cf df       	rcall	.-98     	; 0x4ca <_ZN15Adafruit_SensorC1ERKS_>
     52c:	21 e9       	ldi	r18, 0x91	; 145
     52e:	32 e0       	ldi	r19, 0x02	; 2
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	31 83       	std	Z+1, r19	; 0x01
     538:	20 83       	st	Z, r18
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	fc 01       	movw	r30, r24
     540:	23 81       	ldd	r18, Z+3	; 0x03
     542:	34 81       	ldd	r19, Z+4	; 0x04
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	fc 01       	movw	r30, r24
     54a:	34 83       	std	Z+4, r19	; 0x04
     54c:	23 83       	std	Z+3, r18	; 0x03
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	9c 81       	ldd	r25, Y+4	; 0x04
     552:	fc 01       	movw	r30, r24
     554:	85 81       	ldd	r24, Z+5	; 0x05
     556:	96 81       	ldd	r25, Z+6	; 0x06
     558:	a7 81       	ldd	r26, Z+7	; 0x07
     55a:	b0 85       	ldd	r27, Z+8	; 0x08
     55c:	29 81       	ldd	r18, Y+1	; 0x01
     55e:	3a 81       	ldd	r19, Y+2	; 0x02
     560:	f9 01       	movw	r30, r18
     562:	85 83       	std	Z+5, r24	; 0x05
     564:	96 83       	std	Z+6, r25	; 0x06
     566:	a7 83       	std	Z+7, r26	; 0x07
     568:	b0 87       	std	Z+8, r27	; 0x08
     56a:	00 00       	nop
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	00 d0       	rcall	.+0      	; 0x580 <_ZN11DHT_Unified11temperatureEv+0x6>
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	7c 83       	std	Y+4, r23	; 0x04
     58c:	6b 83       	std	Y+3, r22	; 0x03
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	9c 81       	ldd	r25, Y+4	; 0x04
     592:	9c 01       	movw	r18, r24
     594:	2c 5e       	subi	r18, 0xEC	; 236
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	b9 01       	movw	r22, r18
     59e:	b6 df       	rcall	.-148    	; 0x50c <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	7c 83       	std	Y+4, r23	; 0x04
     5c4:	6b 83       	std	Y+3, r22	; 0x03
     5c6:	2b 81       	ldd	r18, Y+3	; 0x03
     5c8:	3c 81       	ldd	r19, Y+4	; 0x04
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	b9 01       	movw	r22, r18
     5d0:	7c df       	rcall	.-264    	; 0x4ca <_ZN15Adafruit_SensorC1ERKS_>
     5d2:	23 e8       	ldi	r18, 0x83	; 131
     5d4:	32 e0       	ldi	r19, 0x02	; 2
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	31 83       	std	Z+1, r19	; 0x01
     5de:	20 83       	st	Z, r18
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	fc 01       	movw	r30, r24
     5e6:	23 81       	ldd	r18, Z+3	; 0x03
     5e8:	34 81       	ldd	r19, Z+4	; 0x04
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	fc 01       	movw	r30, r24
     5f0:	34 83       	std	Z+4, r19	; 0x04
     5f2:	23 83       	std	Z+3, r18	; 0x03
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	fc 01       	movw	r30, r24
     5fa:	85 81       	ldd	r24, Z+5	; 0x05
     5fc:	96 81       	ldd	r25, Z+6	; 0x06
     5fe:	a7 81       	ldd	r26, Z+7	; 0x07
     600:	b0 85       	ldd	r27, Z+8	; 0x08
     602:	29 81       	ldd	r18, Y+1	; 0x01
     604:	3a 81       	ldd	r19, Y+2	; 0x02
     606:	f9 01       	movw	r30, r18
     608:	85 83       	std	Z+5, r24	; 0x05
     60a:	96 83       	std	Z+6, r25	; 0x06
     60c:	a7 83       	std	Z+7, r26	; 0x07
     60e:	b0 87       	std	Z+8, r27	; 0x08
     610:	00 00       	nop
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	00 d0       	rcall	.+0      	; 0x626 <_ZN11DHT_Unified8humidityEv+0x6>
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	7c 83       	std	Y+4, r23	; 0x04
     632:	6b 83       	std	Y+3, r22	; 0x03
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	9c 81       	ldd	r25, Y+4	; 0x04
     638:	9c 01       	movw	r18, r24
     63a:	23 5e       	subi	r18, 0xE3	; 227
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	b9 01       	movw	r22, r18
     644:	b6 df       	rcall	.-148    	; 0x5b2 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	9a 81       	ldd	r25, Y+2	; 0x02
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <_ZN7TwoWire5writeEi+0x6>
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	7c 83       	std	Y+4, r23	; 0x04
     66a:	6b 83       	std	Y+3, r22	; 0x03
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	fc 01       	movw	r30, r24
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	fc 01       	movw	r30, r24
     678:	20 81       	ld	r18, Z
     67a:	31 81       	ldd	r19, Z+1	; 0x01
     67c:	4b 81       	ldd	r20, Y+3	; 0x03
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	64 2f       	mov	r22, r20
     684:	f9 01       	movw	r30, r18
     686:	19 95       	eicall
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	eb 97       	sbiw	r28, 0x3b	; 59
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	55 e2       	ldi	r21, 0x25	; 37
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	8c e9       	ldi	r24, 0x9C	; 156
     6b4:	94 e0       	ldi	r25, 0x04	; 4
     6b6:	9a de       	rcall	.-716    	; 0x3ec <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     6b8:	80 e9       	ldi	r24, 0x90	; 144
     6ba:	94 e0       	ldi	r25, 0x04	; 4
     6bc:	0e 94 5f 25 	call	0x4abe	; 0x4abe <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     6c0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6c4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     6ce:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6d2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     6dc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     6e0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     6ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     6ee:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	65 d2       	rcall	.+1226   	; 0xbc6 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     6fc:	8c ee       	ldi	r24, 0xEC	; 236
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     704:	ce 01       	movw	r24, r28
     706:	0b 96       	adiw	r24, 0x0b	; 11
     708:	6c ee       	ldi	r22, 0xEC	; 236
     70a:	72 e0       	ldi	r23, 0x02	; 2
     70c:	36 df       	rcall	.-404    	; 0x57a <_ZN11DHT_Unified11temperatureEv>
     70e:	9e 01       	movw	r18, r28
     710:	2c 5e       	subi	r18, 0xEC	; 236
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	ce 01       	movw	r24, r28
     716:	0b 96       	adiw	r24, 0x0b	; 11
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     71e:	ce 01       	movw	r24, r28
     720:	0b 96       	adiw	r24, 0x0b	; 11
     722:	a7 d3       	rcall	.+1870   	; 0xe72 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     724:	ce 01       	movw	r24, r28
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	6c ee       	ldi	r22, 0xEC	; 236
     72a:	72 e0       	ldi	r23, 0x02	; 2
     72c:	79 df       	rcall	.-270    	; 0x620 <_ZN11DHT_Unified8humidityEv>
     72e:	9e 01       	movw	r18, r28
     730:	2c 5e       	subi	r18, 0xEC	; 236
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	ce 01       	movw	r24, r28
     736:	02 96       	adiw	r24, 0x02	; 2
     738:	b9 01       	movw	r22, r18
     73a:	0e 94 22 11 	call	0x2244	; 0x2244 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     73e:	ce 01       	movw	r24, r28
     740:	02 96       	adiw	r24, 0x02	; 2
     742:	ca d3       	rcall	.+1940   	; 0xed8 <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     744:	88 ad       	ldd	r24, Y+56	; 0x38
     746:	99 ad       	ldd	r25, Y+57	; 0x39
     748:	aa ad       	ldd	r26, Y+58	; 0x3a
     74a:	bb ad       	ldd	r27, Y+59	; 0x3b
     74c:	28 ee       	ldi	r18, 0xE8	; 232
     74e:	33 e0       	ldi	r19, 0x03	; 3
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	bc 01       	movw	r22, r24
     756:	cd 01       	movw	r24, r26
     758:	0e 94 92 30 	call	0x6124	; 0x6124 <__divmodsi4>
     75c:	da 01       	movw	r26, r20
     75e:	c9 01       	movw	r24, r18
     760:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <delayMS>
     764:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <delayMS+0x1>
     768:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <delayMS+0x2>
     76c:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     770:	8c e9       	ldi	r24, 0x9C	; 156
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	5d de       	rcall	.-838    	; 0x430 <_ZN14HardwareSerialcvbEv>
     776:	98 2f       	mov	r25, r24
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	89 27       	eor	r24, r25
     77c:	88 23       	and	r24, r24
     77e:	09 f0       	breq	.+2      	; 0x782 <setup+0xec>
     780:	f7 cf       	rjmp	.-18     	; 0x770 <setup+0xda>
  SPI.begin();         // Init SPI bus
     782:	0e 94 9e 20 	call	0x413c	; 0x413c <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     786:	8c e1       	ldi	r24, 0x1C	; 28
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     78e:	19 82       	std	Y+1, r1	; 0x01
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	86 30       	cpi	r24, 0x06	; 6
     794:	60 f4       	brcc	.+24     	; 0x7ae <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	86 5d       	subi	r24, 0xD6	; 214
     79e:	9c 4f       	sbci	r25, 0xFC	; 252
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	f1 cf       	rjmp	.-30     	; 0x790 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     7ae:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     7b2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     7b6:	bc 01       	movw	r22, r24
     7b8:	86 e3       	ldi	r24, 0x36	; 54
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	86 e3       	ldi	r24, 0x36	; 54
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN5Servo5writeEi>

#pragma endregion Servo Motor
 
}
     7cc:	00 00       	nop
     7ce:	eb 96       	adiw	r28, 0x3b	; 59
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <loop>:

void loop()
{
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	c3 54       	subi	r28, 0x43	; 67
     7ec:	d1 09       	sbc	r29, r1
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     7f8:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <delayMS>
     7fc:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <delayMS+0x1>
     800:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <delayMS+0x2>
     804:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <delayMS+0x3>
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     810:	ce 01       	movw	r24, r28
     812:	41 96       	adiw	r24, 0x11	; 17
     814:	6c ee       	ldi	r22, 0xEC	; 236
     816:	72 e0       	ldi	r23, 0x02	; 2
     818:	b0 de       	rcall	.-672    	; 0x57a <_ZN11DHT_Unified11temperatureEv>
     81a:	9e 01       	movw	r18, r28
     81c:	26 5e       	subi	r18, 0xE6	; 230
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	41 96       	adiw	r24, 0x11	; 17
     824:	b9 01       	movw	r22, r18
     826:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     82a:	ce 01       	movw	r24, r28
     82c:	41 96       	adiw	r24, 0x11	; 17
     82e:	21 d3       	rcall	.+1602   	; 0xe72 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     830:	8e a5       	ldd	r24, Y+46	; 0x2e
     832:	9f a5       	ldd	r25, Y+47	; 0x2f
     834:	a8 a9       	ldd	r26, Y+48	; 0x30
     836:	b9 a9       	ldd	r27, Y+49	; 0x31
     838:	11 e0       	ldi	r17, 0x01	; 1
     83a:	9c 01       	movw	r18, r24
     83c:	ad 01       	movw	r20, r26
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0e 94 cb 29 	call	0x5396	; 0x5396 <__unordsf2>
     846:	88 23       	and	r24, r24
     848:	09 f4       	brne	.+2      	; 0x84c <loop+0x6c>
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	11 23       	and	r17, r17
     84e:	39 f0       	breq	.+14     	; 0x85e <loop+0x7e>
	{
		DhtSencorTemp = 420;
     850:	84 ea       	ldi	r24, 0xA4	; 164
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <DhtSencorTemp+0x1>
     858:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <DhtSencorTemp>
     85c:	0e c0       	rjmp	.+28     	; 0x87a <loop+0x9a>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     85e:	8e a5       	ldd	r24, Y+46	; 0x2e
     860:	9f a5       	ldd	r25, Y+47	; 0x2f
     862:	a8 a9       	ldd	r26, Y+48	; 0x30
     864:	b9 a9       	ldd	r27, Y+49	; 0x31
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <DhtSencorTemp+0x1>
     876:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     87a:	ce 01       	movw	r24, r28
     87c:	08 96       	adiw	r24, 0x08	; 8
     87e:	6c ee       	ldi	r22, 0xEC	; 236
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	ce de       	rcall	.-612    	; 0x620 <_ZN11DHT_Unified8humidityEv>
     884:	9e 01       	movw	r18, r28
     886:	26 5e       	subi	r18, 0xE6	; 230
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	ce 01       	movw	r24, r28
     88c:	08 96       	adiw	r24, 0x08	; 8
     88e:	b9 01       	movw	r22, r18
     890:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     894:	ce 01       	movw	r24, r28
     896:	08 96       	adiw	r24, 0x08	; 8
     898:	1f d3       	rcall	.+1598   	; 0xed8 <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     89a:	8e a5       	ldd	r24, Y+46	; 0x2e
     89c:	9f a5       	ldd	r25, Y+47	; 0x2f
     89e:	a8 a9       	ldd	r26, Y+48	; 0x30
     8a0:	b9 a9       	ldd	r27, Y+49	; 0x31
     8a2:	11 e0       	ldi	r17, 0x01	; 1
     8a4:	9c 01       	movw	r18, r24
     8a6:	ad 01       	movw	r20, r26
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 cb 29 	call	0x5396	; 0x5396 <__unordsf2>
     8b0:	88 23       	and	r24, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <loop+0xd6>
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	11 23       	and	r17, r17
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <loop+0xe8>
	{
		DhtSencorHum = 360;
     8ba:	88 e6       	ldi	r24, 0x68	; 104
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <DhtSencorHum+0x1>
     8c2:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <DhtSencorHum>
     8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <loop+0x104>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     8c8:	8e a5       	ldd	r24, Y+46	; 0x2e
     8ca:	9f a5       	ldd	r25, Y+47	; 0x2f
     8cc:	a8 a9       	ldd	r26, Y+48	; 0x30
     8ce:	b9 a9       	ldd	r27, Y+49	; 0x31
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <DhtSencorHum+0x1>
     8e0:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <DhtSencorHum>
	//Serial.print("Temp: ");
	//Serial.println(DhtSencorTemp);
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);
  
  Wire.beginTransmission(4);		// transmit to device #4
     8e4:	64 e0       	ldi	r22, 0x04	; 4
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e9       	ldi	r24, 0x90	; 144
     8ea:	94 e0       	ldi	r25, 0x04	; 4
     8ec:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     8f0:	6e e0       	ldi	r22, 0x0E	; 14
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	80 e9       	ldi	r24, 0x90	; 144
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	48 dd       	rcall	.-1392   	; 0x38a <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     8fa:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <DhtSencorTemp>
     8fe:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <DhtSencorTemp+0x1>
     902:	bc 01       	movw	r22, r24
     904:	80 e9       	ldi	r24, 0x90	; 144
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	a7 de       	rcall	.-690    	; 0x658 <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     90a:	80 e9       	ldi	r24, 0x90	; 144
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     912:	64 e0       	ldi	r22, 0x04	; 4
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e9       	ldi	r24, 0x90	; 144
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");				// sends some bytes
     91e:	65 e1       	ldi	r22, 0x15	; 21
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	80 e9       	ldi	r24, 0x90	; 144
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	31 dd       	rcall	.-1438   	; 0x38a <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorHum);		    // sends some bytes
     928:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <DhtSencorHum>
     92c:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <DhtSencorHum+0x1>
     930:	bc 01       	movw	r22, r24
     932:	80 e9       	ldi	r24, 0x90	; 144
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	90 de       	rcall	.-736    	; 0x658 <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     938:	80 e9       	ldi	r24, 0x90	; 144
     93a:	94 e0       	ldi	r25, 0x04	; 4
     93c:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4
     940:	47 e0       	ldi	r20, 0x07	; 7
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e9       	ldi	r24, 0x90	; 144
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <_ZN7TwoWire11requestFromEii>

	String keyword =  "";
     950:	ce 01       	movw	r24, r28
     952:	ce 96       	adiw	r24, 0x3e	; 62
     954:	6b e1       	ldi	r22, 0x1B	; 27
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6StringC1EPKc>
	// slave may send less than requested
	while (Wire.available()) 
     95c:	80 e9       	ldi	r24, 0x90	; 144
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <_ZN7TwoWire9availableEv>
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	89 2b       	or	r24, r25
     968:	09 f4       	brne	.+2      	; 0x96c <loop+0x18c>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	22 23       	and	r18, r18
     96e:	51 f0       	breq	.+20     	; 0x984 <loop+0x1a4>
	{ 
		char request_c = Wire.read();		// receive a byte as character
     970:	80 e9       	ldi	r24, 0x90	; 144
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 30 27 	call	0x4e60	; 0x4e60 <_ZN7TwoWire4readEv>
		keyword += request_c;
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	ce 01       	movw	r24, r28
     97c:	ce 96       	adiw	r24, 0x3e	; 62
     97e:	69 81       	ldd	r22, Y+1	; 0x01
     980:	9b dc       	rcall	.-1738   	; 0x2b8 <_ZN6StringpLEc>
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
	// slave may send less than requested
	while (Wire.available()) 
     982:	ec cf       	rjmp	.-40     	; 0x95c <loop+0x17c>
		char request_c = Wire.read();		// receive a byte as character
		keyword += request_c;
	}
	
	// Removes the last char in the received string
	 keyword = keyword.substring(0, keyword.length() - 1);
     984:	ce 01       	movw	r24, r28
     986:	ce 96       	adiw	r24, 0x3e	; 62
     988:	85 dc       	rcall	.-1782   	; 0x294 <_ZNK6String6lengthEv>
     98a:	9c 01       	movw	r18, r24
     98c:	21 50       	subi	r18, 0x01	; 1
     98e:	31 09       	sbc	r19, r1
     990:	ce 01       	movw	r24, r28
     992:	02 96       	adiw	r24, 0x02	; 2
     994:	be 01       	movw	r22, r28
     996:	62 5c       	subi	r22, 0xC2	; 194
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	0e 94 0c 30 	call	0x6018	; 0x6018 <_ZNK6String9substringEjj>
     9a2:	9e 01       	movw	r18, r28
     9a4:	2e 5f       	subi	r18, 0xFE	; 254
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	ce 01       	movw	r24, r28
     9aa:	ce 96       	adiw	r24, 0x3e	; 62
     9ac:	b9 01       	movw	r22, r18
     9ae:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <_ZN6StringaSEOS_>
     9b2:	ce 01       	movw	r24, r28
     9b4:	02 96       	adiw	r24, 0x02	; 2
     9b6:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
	 
	// Verify incoming data
	if (keyword == "TOGGLE")
     9ba:	ce 01       	movw	r24, r28
     9bc:	ce 96       	adiw	r24, 0x3e	; 62
     9be:	6c e1       	ldi	r22, 0x1C	; 28
     9c0:	72 e0       	ldi	r23, 0x02	; 2
     9c2:	a7 dc       	rcall	.-1714   	; 0x312 <_ZNK6StringeqEPKc>
     9c4:	98 2f       	mov	r25, r24
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	99 23       	and	r25, r25
     9ca:	09 f4       	brne	.+2      	; 0x9ce <loop+0x1ee>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	88 23       	and	r24, r24
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <loop+0x1f4>
	{
		// toggle servo position
		moveServo();
     9d2:	2e d1       	rcall	.+604    	; 0xc30 <_Z9moveServov>
     9d4:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <isCardValid+0x1>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     9d8:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <isCardValid>
     9dc:	8c e1       	ldi	r24, 0x1C	; 28

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     9e4:	98 2f       	mov	r25, r24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	89 27       	eor	r24, r25
     9ea:	88 23       	and	r24, r24
     9ec:	49 f4       	brne	.+18     	; 0xa00 <loop+0x220>
     9ee:	8c e1       	ldi	r24, 0x1C	; 28
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	0e 94 9f 1a 	call	0x353e	; 0x353e <_ZN7MFRC52219PICC_ReadCardSerialEv>
     9f6:	98 2f       	mov	r25, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	89 27       	eor	r24, r25
     9fc:	88 23       	and	r24, r24
     9fe:	11 f0       	breq	.+4      	; 0xa04 <loop+0x224>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <loop+0x226>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	88 23       	and	r24, r24
     a08:	59 f0       	breq	.+22     	; 0xa20 <loop+0x240>
	{
		delay(50);
     a0a:	62 e3       	ldi	r22, 0x32	; 50
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
		isCardValid = 0;
     a16:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <isCardValid+0x1>
     a1a:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <isCardValid>
     a1e:	19 c0       	rjmp	.+50     	; 0xa52 <loop+0x272>
	}
	else 
	{
		isCardValid = RfidValidater();
     a20:	2e d0       	rcall	.+92     	; 0xa7e <_Z13RfidValidaterv>
     a22:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <isCardValid+0x1>
     a26:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <isCardValid>

		// if card/chip is valid
		if (isCardValid == 1)
     a2a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <isCardValid>
     a2e:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <isCardValid+0x1>
     a32:	01 97       	sbiw	r24, 0x01	; 1
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     a34:	29 f4       	brne	.+10     	; 0xa40 <loop+0x260>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
				
			// Move servo
			moveServo();
     a3a:	4a d1       	rcall	.+660    	; 0xcd0 <_Z12makeBipSoundi>
     a3c:	f9 d0       	rcall	.+498    	; 0xc30 <_Z9moveServov>
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <loop+0x272>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     a40:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <isCardValid>
     a44:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <isCardValid+0x1>
     a48:	02 97       	sbiw	r24, 0x02	; 2
     a4a:	19 f4       	brne	.+6      	; 0xa52 <loop+0x272>
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	3f d1       	rcall	.+638    	; 0xcd0 <_Z12makeBipSoundi>
     a52:	68 ee       	ldi	r22, 0xE8	; 232
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     a54:	73 e0       	ldi	r23, 0x03	; 3
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
     a5e:	ce 01       	movw	r24, r28
	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
     a60:	ce 96       	adiw	r24, 0x3e	; 62
     a62:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
     a66:	00 00       	nop
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
}
     a68:	cd 5b       	subi	r28, 0xBD	; 189
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	08 95       	ret

00000a7e <_Z13RfidValidaterv>:
     a7e:	0f 93       	push	r16

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	69 97       	sbiw	r28, 0x19	; 25
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     a96:	ce 01       	movw	r24, r28
     a98:	44 96       	adiw	r24, 0x14	; 20
     a9a:	6b e1       	ldi	r22, 0x1B	; 27
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     aa2:	19 82       	std	Y+1, r1	; 0x01
     aa4:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <mfrc522>
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	89 17       	cp	r24, r25
     aac:	08 f0       	brcs	.+2      	; 0xab0 <_Z13RfidValidaterv+0x32>
     aae:	3e c0       	rjmp	.+124    	; 0xb2c <_Z13RfidValidaterv+0xae>
	{
		//Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
		//Serial.print(mfrc522.uid.uidByte[i], HEX);
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	83 5e       	subi	r24, 0xE3	; 227
     ab8:	9c 4f       	sbci	r25, 0xFC	; 252
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	80 31       	cpi	r24, 0x10	; 16
     ac0:	18 f4       	brcc	.+6      	; 0xac8 <_Z13RfidValidaterv+0x4a>
     ac2:	83 e2       	ldi	r24, 0x23	; 35
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <_Z13RfidValidaterv+0x4e>
     ac8:	86 e2       	ldi	r24, 0x26	; 38
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9e 01       	movw	r18, r28
     ace:	22 5f       	subi	r18, 0xF2	; 242
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	bc 01       	movw	r22, r24
     ad4:	c9 01       	movw	r24, r18
     ad6:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6StringC1EPKc>
     ada:	9e 01       	movw	r18, r28
     adc:	22 5f       	subi	r18, 0xF2	; 242
     ade:	3f 4f       	sbci	r19, 0xFF	; 255
     ae0:	ce 01       	movw	r24, r28
     ae2:	44 96       	adiw	r24, 0x14	; 20
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <_ZN6String6concatERKS_>
     aea:	ce 01       	movw	r24, r28
     aec:	0e 96       	adiw	r24, 0x0e	; 14
     aee:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	83 5e       	subi	r24, 0xE3	; 227
     afa:	9c 4f       	sbci	r25, 0xFC	; 252
     afc:	fc 01       	movw	r30, r24
     afe:	20 81       	ld	r18, Z
     b00:	ce 01       	movw	r24, r28
     b02:	08 96       	adiw	r24, 0x08	; 8
     b04:	40 e1       	ldi	r20, 0x10	; 16
     b06:	62 2f       	mov	r22, r18
     b08:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <_ZN6StringC1Ehh>
     b0c:	9e 01       	movw	r18, r28
     b0e:	28 5f       	subi	r18, 0xF8	; 248
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	ce 01       	movw	r24, r28
     b14:	44 96       	adiw	r24, 0x14	; 20
     b16:	b9 01       	movw	r22, r18
     b18:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <_ZN6String6concatERKS_>
     b1c:	ce 01       	movw	r24, r28
     b1e:	08 96       	adiw	r24, 0x08	; 8
     b20:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	bc cf       	rjmp	.-136    	; 0xaa4 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     b2c:	ce 01       	movw	r24, r28
     b2e:	44 96       	adiw	r24, 0x14	; 20
     b30:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     b34:	ce 01       	movw	r24, r28
     b36:	02 96       	adiw	r24, 0x02	; 2
     b38:	9e 01       	movw	r18, r28
     b3a:	2c 5e       	subi	r18, 0xEC	; 236
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	b9 01       	movw	r22, r18
     b44:	fe db       	rcall	.-2052   	; 0x342 <_ZNK6String9substringEj>
     b46:	ce 01       	movw	r24, r28
     b48:	02 96       	adiw	r24, 0x02	; 2
     b4a:	60 e3       	ldi	r22, 0x30	; 48
     b4c:	73 e0       	ldi	r23, 0x03	; 3
     b4e:	c9 db       	rcall	.-2158   	; 0x2e2 <_ZNK6StringeqERKS_>
     b50:	11 e0       	ldi	r17, 0x01	; 1
     b52:	88 23       	and	r24, r24
     b54:	09 f4       	brne	.+2      	; 0xb58 <_Z13RfidValidaterv+0xda>
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	ce 01       	movw	r24, r28
     b5a:	02 96       	adiw	r24, 0x02	; 2
     b5c:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
     b60:	11 23       	and	r17, r17
     b62:	89 f0       	breq	.+34     	; 0xb86 <_Z13RfidValidaterv+0x108>
	{
		Serial.println();
     b64:	8c e9       	ldi	r24, 0x9C	; 156
     b66:	94 e0       	ldi	r25, 0x04	; 4
     b68:	0e 94 09 2c 	call	0x5812	; 0x5812 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     b6c:	68 e2       	ldi	r22, 0x28	; 40
     b6e:	72 e0       	ldi	r23, 0x02	; 2
     b70:	8c e9       	ldi	r24, 0x9C	; 156
     b72:	94 e0       	ldi	r25, 0x04	; 4
     b74:	0e 94 0d 2c 	call	0x581a	; 0x581a <_ZN5Print7printlnEPKc>
		Serial.println();
     b78:	8c e9       	ldi	r24, 0x9C	; 156
     b7a:	94 e0       	ldi	r25, 0x04	; 4
     b7c:	0e 94 09 2c 	call	0x5812	; 0x5812 <_ZN5Print7printlnEv>
		return 1;
     b80:	01 e0       	ldi	r16, 0x01	; 1
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	10 c0       	rjmp	.+32     	; 0xba6 <_Z13RfidValidaterv+0x128>
	}
	else
	{
		Serial.println();
     b86:	8c e9       	ldi	r24, 0x9C	; 156
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	0e 94 09 2c 	call	0x5812	; 0x5812 <_ZN5Print7printlnEv>
		Serial.println("Access denied");
     b8e:	6a e3       	ldi	r22, 0x3A	; 58
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	8c e9       	ldi	r24, 0x9C	; 156
     b94:	94 e0       	ldi	r25, 0x04	; 4
     b96:	0e 94 0d 2c 	call	0x581a	; 0x581a <_ZN5Print7printlnEPKc>
		Serial.println();
     b9a:	8c e9       	ldi	r24, 0x9C	; 156
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	0e 94 09 2c 	call	0x5812	; 0x5812 <_ZN5Print7printlnEv>
		return 2;
     ba2:	02 e0       	ldi	r16, 0x02	; 2
     ba4:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     ba6:	ce 01       	movw	r24, r28
     ba8:	44 96       	adiw	r24, 0x14	; 20
     baa:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
     bae:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     bb0:	69 96       	adiw	r28, 0x19	; 25
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	1f 92       	push	r1
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     bd2:	99 81       	ldd	r25, Y+1	; 0x01
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	89 27       	eor	r24, r25
     bd8:	88 23       	and	r24, r24
     bda:	71 f0       	breq	.+28     	; 0xbf8 <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     bdc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     be0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     bea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     bee:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
	}
	if (status == true)
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	88 23       	and	r24, r24
     bfc:	71 f0       	breq	.+28     	; 0xc1a <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     bfe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     c02:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     c0c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     c10:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
	}
	delay(100);
     c1a:	64 e6       	ldi	r22, 0x64	; 100
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
}
     c26:	00 00       	nop
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     c38:	86 e3       	ldi	r24, 0x36	; 54
     c3a:	93 e0       	ldi	r25, 0x03	; 3
     c3c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Servo4readEv>
     c40:	21 e0       	ldi	r18, 0x01	; 1
     c42:	84 3b       	cpi	r24, 0xB4	; 180
     c44:	91 05       	cpc	r25, r1
     c46:	09 f0       	breq	.+2      	; 0xc4a <_Z9moveServov+0x1a>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	22 23       	and	r18, r18
     c4c:	81 f0       	breq	.+32     	; 0xc6e <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     c4e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c52:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
		servo.write(0);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	86 e3       	ldi	r24, 0x36	; 54
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	ad df       	rcall	.-166    	; 0xbc6 <_Z11SetRfidLedsb>
     c6c:	27 c0       	rjmp	.+78     	; 0xcbc <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     c6e:	86 e3       	ldi	r24, 0x36	; 54
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Servo4readEv>
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	89 2b       	or	r24, r25
     c7a:	09 f0       	breq	.+2      	; 0xc7e <_Z9moveServov+0x4e>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	22 23       	and	r18, r18
     c80:	81 f0       	breq	.+32     	; 0xca2 <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     c82:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c86:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
		servo.write(180);
     c90:	64 eb       	ldi	r22, 0xB4	; 180
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	86 e3       	ldi	r24, 0x36	; 54
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	93 df       	rcall	.-218    	; 0xbc6 <_Z11SetRfidLedsb>
     ca0:	0d c0       	rjmp	.+26     	; 0xcbc <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     ca2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     ca6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
		servo.write(180);
     cb0:	64 eb       	ldi	r22, 0xB4	; 180
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	86 e3       	ldi	r24, 0x36	; 54
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN5Servo5writeEi>
	}
	delay(100);
     cbc:	64 e6       	ldi	r22, 0x64	; 100
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
}
     cc8:	00 00       	nop
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <_Z12makeBipSoundi+0x6>
     cd6:	1f 92       	push	r1
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9c 83       	std	Y+4, r25	; 0x04
     cde:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	a9 f4       	brne	.+42     	; 0xd12 <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     ce8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     cec:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
		delay(100);
     cf6:	64 e6       	ldi	r22, 0x64	; 100
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     d02:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d06:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
     d10:	35 c0       	rjmp	.+106    	; 0xd7c <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	02 97       	sbiw	r24, 0x02	; 2
     d18:	31 f5       	brne	.+76     	; 0xd66 <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d1a:	1a 82       	std	Y+2, r1	; 0x02
     d1c:	19 82       	std	Y+1, r1	; 0x01
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	03 97       	sbiw	r24, 0x03	; 3
     d24:	5c f5       	brge	.+86     	; 0xd7c <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     d26:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d2a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
			delay(100);						// tone length
     d34:	64 e6       	ldi	r22, 0x64	; 100
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     d40:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d44:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
			delay(50);						// Interval between tones
     d4e:	62 e3       	ldi	r22, 0x32	; 50
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	dc cf       	rjmp	.-72     	; 0xd1e <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	03 97       	sbiw	r24, 0x03	; 3
     d6c:	39 f4       	brne	.+14     	; 0xd7c <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     d6e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d72:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
	}
	delay(100);
     d7c:	64 e6       	ldi	r22, 0x64	; 100
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
     d88:	00 00       	nop
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	1f 92       	push	r1
     d9e:	1f 92       	push	r1
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	4d 96       	adiw	r24, 0x1d	; 29
     dae:	94 d0       	rcall	.+296    	; 0xed8 <_ZN11DHT_Unified8HumidityD1Ev>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	44 96       	adiw	r24, 0x14	; 20
     db6:	5d d0       	rcall	.+186    	; 0xe72 <_ZN11DHT_Unified11TemperatureD1Ev>
     db8:	00 00       	nop
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <_Z41__static_initialization_and_destruction_0ii>:
     dc4:	af 92       	push	r10
     dc6:	bf 92       	push	r11
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <_Z41__static_initialization_and_destruction_0ii+0x16>
     dda:	1f 92       	push	r1
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	7c 83       	std	Y+4, r23	; 0x04
     de6:	6b 83       	std	Y+3, r22	; 0x03
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	11 f5       	brne	.+68     	; 0xe34 <_Z41__static_initialization_and_destruction_0ii+0x70>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	f1 f4       	brne	.+60     	; 0xe34 <_Z41__static_initialization_and_destruction_0ii+0x70>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     df8:	aa 24       	eor	r10, r10
     dfa:	aa 94       	dec	r10
     dfc:	ba 2c       	mov	r11, r10
     dfe:	65 01       	movw	r12, r10
     e00:	ee 24       	eor	r14, r14
     e02:	ea 94       	dec	r14
     e04:	fe 2c       	mov	r15, r14
     e06:	87 01       	movw	r16, r14
     e08:	26 e0       	ldi	r18, 0x06	; 6
     e0a:	4b e0       	ldi	r20, 0x0B	; 11
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	8c ee       	ldi	r24, 0xEC	; 236
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	c3 d6       	rcall	.+3462   	; 0x1b9a <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     e14:	45 e0       	ldi	r20, 0x05	; 5
     e16:	65 e3       	ldi	r22, 0x35	; 53
     e18:	8c e1       	ldi	r24, 0x1C	; 28
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e20:	68 e4       	ldi	r22, 0x48	; 72
     e22:	72 e0       	ldi	r23, 0x02	; 2
     e24:	80 e3       	ldi	r24, 0x30	; 48
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     e2c:	86 e3       	ldi	r24, 0x36	; 54
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <_ZN5ServoC1Ev>
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	89 2b       	or	r24, r25
     e3a:	59 f4       	brne	.+22     	; 0xe52 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	39 f4       	brne	.+14     	; 0xe52 <_Z41__static_initialization_and_destruction_0ii+0x8e>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e44:	80 e3       	ldi	r24, 0x30	; 48
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     e4c:	8c ee       	ldi	r24, 0xEC	; 236
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	a3 df       	rcall	.-186    	; 0xd98 <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     e52:	00 00       	nop
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	08 95       	ret

00000e72 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	1f 92       	push	r1
     e78:	1f 92       	push	r1
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	21 e9       	ldi	r18, 0x91	; 145
     e84:	32 e0       	ldi	r19, 0x02	; 2
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	fc 01       	movw	r30, r24
     e8c:	31 83       	std	Z+1, r19	; 0x01
     e8e:	20 83       	st	Z, r18
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	db da       	rcall	.-2634   	; 0x44c <_ZN15Adafruit_SensorD1Ev>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	89 2b       	or	r24, r25
     e9c:	21 f0       	breq	.+8      	; 0xea6 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZdlPv>
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <_ZN11DHT_Unified11TemperatureD0Ev>:
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	1f 92       	push	r1
     eb6:	1f 92       	push	r1
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	d6 df       	rcall	.-84     	; 0xe72 <_ZN11DHT_Unified11TemperatureD1Ev>
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZdlPv>
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	1f 92       	push	r1
     ede:	1f 92       	push	r1
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	23 e8       	ldi	r18, 0x83	; 131
     eea:	32 e0       	ldi	r19, 0x02	; 2
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	fc 01       	movw	r30, r24
     ef2:	31 83       	std	Z+1, r19	; 0x01
     ef4:	20 83       	st	Z, r18
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	a8 da       	rcall	.-2736   	; 0x44c <_ZN15Adafruit_SensorD1Ev>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	89 2b       	or	r24, r25
     f02:	21 f0       	breq	.+8      	; 0xf0c <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZdlPv>
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <_ZN11DHT_Unified8HumidityD0Ev>:
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	1f 92       	push	r1
     f1c:	1f 92       	push	r1
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	d6 df       	rcall	.-84     	; 0xed8 <_ZN11DHT_Unified8HumidityD1Ev>
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZdlPv>
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <_GLOBAL__sub_I_x>:
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	6f ef       	ldi	r22, 0xFF	; 255
     f48:	7f ef       	ldi	r23, 0xFF	; 255
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	3a df       	rcall	.-396    	; 0xdc4 <_Z41__static_initialization_and_destruction_0ii>
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <_GLOBAL__sub_D_x>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	6f ef       	ldi	r22, 0xFF	; 255
     f60:	7f ef       	ldi	r23, 0xFF	; 255
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	2e df       	rcall	.-420    	; 0xdc4 <_Z41__static_initialization_and_destruction_0ii>
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	1f 92       	push	r1
     f74:	1f 92       	push	r1
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	f8 94       	cli
     f80:	00 00       	nop
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <_ZN13InterruptLockD1Ev>:
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	1f 92       	push	r1
     f92:	1f 92       	push	r1
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	78 94       	sei
     f9e:	00 00       	nop
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_ZN3DHTC1Ehhh>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	2b 97       	sbiw	r28, 0x0b	; 11
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	98 87       	std	Y+8, r25	; 0x08
     fc0:	8f 83       	std	Y+7, r24	; 0x07
     fc2:	69 87       	std	Y+9, r22	; 0x09
     fc4:	4a 87       	std	Y+10, r20	; 0x0a
     fc6:	2b 87       	std	Y+11, r18	; 0x0b
     fc8:	8f 81       	ldd	r24, Y+7	; 0x07
     fca:	98 85       	ldd	r25, Y+8	; 0x08
     fcc:	29 85       	ldd	r18, Y+9	; 0x09
     fce:	fc 01       	movw	r30, r24
     fd0:	25 83       	std	Z+5, r18	; 0x05
     fd2:	8f 81       	ldd	r24, Y+7	; 0x07
     fd4:	98 85       	ldd	r25, Y+8	; 0x08
     fd6:	2a 85       	ldd	r18, Y+10	; 0x0a
     fd8:	fc 01       	movw	r30, r24
     fda:	26 83       	std	Z+6, r18	; 0x06
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	82 5b       	subi	r24, 0xB2	; 178
     fe4:	9e 4f       	sbci	r25, 0xFE	; 254
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	fc 01       	movw	r30, r24
     ff0:	84 91       	lpm	r24, Z
     ff2:	8b 83       	std	Y+3, r24	; 0x03
     ff4:	8f 81       	ldd	r24, Y+7	; 0x07
     ff6:	98 85       	ldd	r25, Y+8	; 0x08
     ff8:	2b 81       	ldd	r18, Y+3	; 0x03
     ffa:	fc 01       	movw	r30, r24
     ffc:	27 83       	std	Z+7, r18	; 0x07
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	8c 56       	subi	r24, 0x6C	; 108
    1006:	9e 4f       	sbci	r25, 0xFE	; 254
    1008:	9d 83       	std	Y+5, r25	; 0x05
    100a:	8c 83       	std	Y+4, r24	; 0x04
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	fc 01       	movw	r30, r24
    1012:	84 91       	lpm	r24, Z
    1014:	8e 83       	std	Y+6, r24	; 0x06
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 85       	ldd	r25, Y+8	; 0x08
    101a:	2e 81       	ldd	r18, Y+6	; 0x06
    101c:	fc 01       	movw	r30, r24
    101e:	20 87       	std	Z+8, r18	; 0x08
    1020:	2f 81       	ldd	r18, Y+7	; 0x07
    1022:	38 85       	ldd	r19, Y+8	; 0x08
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	9e e3       	ldi	r25, 0x3E	; 62
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	f9 01       	movw	r30, r18
    102e:	85 87       	std	Z+13, r24	; 0x0d
    1030:	96 87       	std	Z+14, r25	; 0x0e
    1032:	a7 87       	std	Z+15, r26	; 0x0f
    1034:	b0 8b       	std	Z+16, r27	; 0x10
    1036:	00 00       	nop
    1038:	2b 96       	adiw	r28, 0x0b	; 11
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <_ZN3DHT5beginEh>:
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	00 d0       	rcall	.+0      	; 0x1050 <_ZN3DHT5beginEh+0x6>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	6b 83       	std	Y+3, r22	; 0x03
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	fc 01       	movw	r30, r24
    1060:	85 81       	ldd	r24, Z+5	; 0x05
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
    1068:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <millis>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	80 5d       	subi	r24, 0xD0	; 208
    1072:	97 40       	sbci	r25, 0x07	; 7
    1074:	a1 09       	sbc	r26, r1
    1076:	b1 09       	sbc	r27, r1
    1078:	29 81       	ldd	r18, Y+1	; 0x01
    107a:	3a 81       	ldd	r19, Y+2	; 0x02
    107c:	f9 01       	movw	r30, r18
    107e:	81 87       	std	Z+9, r24	; 0x09
    1080:	92 87       	std	Z+10, r25	; 0x0a
    1082:	a3 87       	std	Z+11, r26	; 0x0b
    1084:	b4 87       	std	Z+12, r27	; 0x0c
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	fc 01       	movw	r30, r24
    108e:	22 8b       	std	Z+18, r18	; 0x12
    1090:	00 00       	nop
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <_ZN3DHT15readTemperatureEbb>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	28 97       	sbiw	r28, 0x08	; 8
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
    10b6:	6f 83       	std	Y+7, r22	; 0x07
    10b8:	48 87       	std	Y+8, r20	; 0x08
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 ec       	ldi	r26, 0xC0	; 192
    10c0:	bf e7       	ldi	r27, 0x7F	; 127
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	ab 83       	std	Y+3, r26	; 0x03
    10c8:	bc 83       	std	Y+4, r27	; 0x04
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	68 85       	ldd	r22, Y+8	; 0x08
    10d0:	1d d2       	rcall	.+1082   	; 0x150c <_ZN3DHT4readEb>
    10d2:	88 23       	and	r24, r24
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <_ZN3DHT15readTemperatureEbb+0x3a>
    10d6:	34 c1       	rjmp	.+616    	; 0x1340 <_ZN3DHT15readTemperatureEbb+0x2a2>
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	fc 01       	movw	r30, r24
    10de:	86 81       	ldd	r24, Z+6	; 0x06
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	8c 30       	cpi	r24, 0x0C	; 12
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <_ZN3DHT15readTemperatureEbb+0x4e>
    10ea:	72 c0       	rjmp	.+228    	; 0x11d0 <_ZN3DHT15readTemperatureEbb+0x132>
    10ec:	8d 30       	cpi	r24, 0x0D	; 13
    10ee:	91 05       	cpc	r25, r1
    10f0:	1c f4       	brge	.+6      	; 0x10f8 <_ZN3DHT15readTemperatureEbb+0x5a>
    10f2:	0b 97       	sbiw	r24, 0x0b	; 11
    10f4:	31 f0       	breq	.+12     	; 0x1102 <_ZN3DHT15readTemperatureEbb+0x64>
    10f6:	24 c1       	rjmp	.+584    	; 0x1340 <_ZN3DHT15readTemperatureEbb+0x2a2>
    10f8:	45 97       	sbiw	r24, 0x15	; 21
    10fa:	02 97       	sbiw	r24, 0x02	; 2
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <_ZN3DHT15readTemperatureEbb+0x62>
    10fe:	20 c1       	rjmp	.+576    	; 0x1340 <_ZN3DHT15readTemperatureEbb+0x2a2>
    1100:	c7 c0       	rjmp	.+398    	; 0x1290 <_ZN3DHT15readTemperatureEbb+0x1f2>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	fc 01       	movw	r30, r24
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	ab 83       	std	Y+3, r26	; 0x03
    1124:	bc 83       	std	Y+4, r27	; 0x04
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	fc 01       	movw	r30, r24
    112c:	83 81       	ldd	r24, Z+3	; 0x03
    112e:	88 23       	and	r24, r24
    1130:	84 f4       	brge	.+32     	; 0x1152 <_ZN3DHT15readTemperatureEbb+0xb4>
    1132:	29 81       	ldd	r18, Y+1	; 0x01
    1134:	3a 81       	ldd	r19, Y+2	; 0x02
    1136:	4b 81       	ldd	r20, Y+3	; 0x03
    1138:	5c 81       	ldd	r21, Y+4	; 0x04
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	9f eb       	ldi	r25, 0xBF	; 191
    1142:	0e 94 20 28 	call	0x5040	; 0x5040 <__subsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	ab 83       	std	Y+3, r26	; 0x03
    1150:	bc 83       	std	Y+4, r27	; 0x04
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	fc 01       	movw	r30, r24
    1158:	83 81       	ldd	r24, Z+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	8f 70       	andi	r24, 0x0F	; 15
    1160:	99 27       	eor	r25, r25
    1162:	09 2e       	mov	r0, r25
    1164:	00 0c       	add	r0, r0
    1166:	aa 0b       	sbc	r26, r26
    1168:	bb 0b       	sbc	r27, r27
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	2d ec       	ldi	r18, 0xCD	; 205
    1178:	3c ec       	ldi	r19, 0xCC	; 204
    117a:	4c ec       	ldi	r20, 0xCC	; 204
    117c:	5d e3       	ldi	r21, 0x3D	; 61
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9c 01       	movw	r18, r24
    118c:	ad 01       	movw	r20, r26
    118e:	69 81       	ldd	r22, Y+1	; 0x01
    1190:	7a 81       	ldd	r23, Y+2	; 0x02
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	0e 94 21 28 	call	0x5042	; 0x5042 <__addsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	ab 83       	std	Y+3, r26	; 0x03
    11a4:	bc 83       	std	Y+4, r27	; 0x04
    11a6:	8f 81       	ldd	r24, Y+7	; 0x07
    11a8:	88 23       	and	r24, r24
    11aa:	09 f4       	brne	.+2      	; 0x11ae <_ZN3DHT15readTemperatureEbb+0x110>
    11ac:	c4 c0       	rjmp	.+392    	; 0x1336 <_ZN3DHT15readTemperatureEbb+0x298>
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	ab 81       	ldd	r26, Y+3	; 0x03
    11b4:	bc 81       	ldd	r27, Y+4	; 0x04
    11b6:	2d 81       	ldd	r18, Y+5	; 0x05
    11b8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ba:	ac 01       	movw	r20, r24
    11bc:	bd 01       	movw	r22, r26
    11be:	c9 01       	movw	r24, r18
    11c0:	ce d0       	rcall	.+412    	; 0x135e <_ZN3DHT11convertCtoFEf>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	ab 83       	std	Y+3, r26	; 0x03
    11cc:	bc 83       	std	Y+4, r27	; 0x04
    11ce:	b3 c0       	rjmp	.+358    	; 0x1336 <_ZN3DHT15readTemperatureEbb+0x298>
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	fc 01       	movw	r30, r24
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	ab 83       	std	Y+3, r26	; 0x03
    11f2:	bc 83       	std	Y+4, r27	; 0x04
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	fc 01       	movw	r30, r24
    11fa:	83 81       	ldd	r24, Z+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	8f 70       	andi	r24, 0x0F	; 15
    1202:	99 27       	eor	r25, r25
    1204:	09 2e       	mov	r0, r25
    1206:	00 0c       	add	r0, r0
    1208:	aa 0b       	sbc	r26, r26
    120a:	bb 0b       	sbc	r27, r27
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	2d ec       	ldi	r18, 0xCD	; 205
    121a:	3c ec       	ldi	r19, 0xCC	; 204
    121c:	4c ec       	ldi	r20, 0xCC	; 204
    121e:	5d e3       	ldi	r21, 0x3D	; 61
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9c 01       	movw	r18, r24
    122e:	ad 01       	movw	r20, r26
    1230:	69 81       	ldd	r22, Y+1	; 0x01
    1232:	7a 81       	ldd	r23, Y+2	; 0x02
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	0e 94 21 28 	call	0x5042	; 0x5042 <__addsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	ab 83       	std	Y+3, r26	; 0x03
    1246:	bc 83       	std	Y+4, r27	; 0x04
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	fc 01       	movw	r30, r24
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	88 23       	and	r24, r24
    1252:	4c f4       	brge	.+18     	; 0x1266 <_ZN3DHT15readTemperatureEbb+0x1c8>
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	ab 81       	ldd	r26, Y+3	; 0x03
    125a:	bc 81       	ldd	r27, Y+4	; 0x04
    125c:	b0 58       	subi	r27, 0x80	; 128
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	ab 83       	std	Y+3, r26	; 0x03
    1264:	bc 83       	std	Y+4, r27	; 0x04
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	88 23       	and	r24, r24
    126a:	09 f4       	brne	.+2      	; 0x126e <_ZN3DHT15readTemperatureEbb+0x1d0>
    126c:	66 c0       	rjmp	.+204    	; 0x133a <_ZN3DHT15readTemperatureEbb+0x29c>
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	ab 81       	ldd	r26, Y+3	; 0x03
    1274:	bc 81       	ldd	r27, Y+4	; 0x04
    1276:	2d 81       	ldd	r18, Y+5	; 0x05
    1278:	3e 81       	ldd	r19, Y+6	; 0x06
    127a:	ac 01       	movw	r20, r24
    127c:	bd 01       	movw	r22, r26
    127e:	c9 01       	movw	r24, r18
    1280:	6e d0       	rcall	.+220    	; 0x135e <_ZN3DHT11convertCtoFEf>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	ab 83       	std	Y+3, r26	; 0x03
    128c:	bc 83       	std	Y+4, r27	; 0x04
    128e:	55 c0       	rjmp	.+170    	; 0x133a <_ZN3DHT15readTemperatureEbb+0x29c>
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	fc 01       	movw	r30, r24
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	99 27       	eor	r25, r25
    12a0:	38 2f       	mov	r19, r24
    12a2:	22 27       	eor	r18, r18
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	fc 01       	movw	r30, r24
    12aa:	83 81       	ldd	r24, Z+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	82 2b       	or	r24, r18
    12b2:	93 2b       	or	r25, r19
    12b4:	cc 01       	movw	r24, r24
    12b6:	a0 e0       	ldi	r26, 0x00	; 0
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	ab 83       	std	Y+3, r26	; 0x03
    12cc:	bc 83       	std	Y+4, r27	; 0x04
    12ce:	2d ec       	ldi	r18, 0xCD	; 205
    12d0:	3c ec       	ldi	r19, 0xCC	; 204
    12d2:	4c ec       	ldi	r20, 0xCC	; 204
    12d4:	5d e3       	ldi	r21, 0x3D	; 61
    12d6:	69 81       	ldd	r22, Y+1	; 0x01
    12d8:	7a 81       	ldd	r23, Y+2	; 0x02
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	ab 83       	std	Y+3, r26	; 0x03
    12ec:	bc 83       	std	Y+4, r27	; 0x04
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	fc 01       	movw	r30, r24
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	88 23       	and	r24, r24
    12f8:	4c f4       	brge	.+18     	; 0x130c <_ZN3DHT15readTemperatureEbb+0x26e>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1300:	bc 81       	ldd	r27, Y+4	; 0x04
    1302:	b0 58       	subi	r27, 0x80	; 128
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	ab 83       	std	Y+3, r26	; 0x03
    130a:	bc 83       	std	Y+4, r27	; 0x04
    130c:	8f 81       	ldd	r24, Y+7	; 0x07
    130e:	88 23       	and	r24, r24
    1310:	b1 f0       	breq	.+44     	; 0x133e <_ZN3DHT15readTemperatureEbb+0x2a0>
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	ab 81       	ldd	r26, Y+3	; 0x03
    1318:	bc 81       	ldd	r27, Y+4	; 0x04
    131a:	2d 81       	ldd	r18, Y+5	; 0x05
    131c:	3e 81       	ldd	r19, Y+6	; 0x06
    131e:	ac 01       	movw	r20, r24
    1320:	bd 01       	movw	r22, r26
    1322:	c9 01       	movw	r24, r18
    1324:	1c d0       	rcall	.+56     	; 0x135e <_ZN3DHT11convertCtoFEf>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	ab 83       	std	Y+3, r26	; 0x03
    1330:	bc 83       	std	Y+4, r27	; 0x04
    1332:	00 00       	nop
    1334:	04 c0       	rjmp	.+8      	; 0x133e <_ZN3DHT15readTemperatureEbb+0x2a0>
    1336:	00 00       	nop
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <_ZN3DHT15readTemperatureEbb+0x2a2>
    133a:	00 00       	nop
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <_ZN3DHT15readTemperatureEbb+0x2a2>
    133e:	00 00       	nop
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	ab 81       	ldd	r26, Y+3	; 0x03
    1346:	bc 81       	ldd	r27, Y+4	; 0x04
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	28 96       	adiw	r28, 0x08	; 8
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <_ZN3DHT11convertCtoFEf>:
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	00 d0       	rcall	.+0      	; 0x1364 <_ZN3DHT11convertCtoFEf+0x6>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <_ZN3DHT11convertCtoFEf+0x8>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	4b 83       	std	Y+3, r20	; 0x03
    1370:	5c 83       	std	Y+4, r21	; 0x04
    1372:	6d 83       	std	Y+5, r22	; 0x05
    1374:	7e 83       	std	Y+6, r23	; 0x06
    1376:	26 e6       	ldi	r18, 0x66	; 102
    1378:	36 e6       	ldi	r19, 0x66	; 102
    137a:	46 ee       	ldi	r20, 0xE6	; 230
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	6b 81       	ldd	r22, Y+3	; 0x03
    1380:	7c 81       	ldd	r23, Y+4	; 0x04
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	52 e4       	ldi	r21, 0x42	; 66
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 21 28 	call	0x5042	; 0x5042 <__addsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	26 96       	adiw	r28, 0x06	; 6
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <_ZN3DHT12readHumidityEb>:
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	27 97       	sbiw	r28, 0x07	; 7
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	6f 83       	std	Y+7, r22	; 0x07
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a0 ec       	ldi	r26, 0xC0	; 192
    13e0:	bf e7       	ldi	r27, 0x7F	; 127
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	ab 83       	std	Y+3, r26	; 0x03
    13e8:	bc 83       	std	Y+4, r27	; 0x04
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	8d d0       	rcall	.+282    	; 0x150c <_ZN3DHT4readEb>
    13f2:	88 23       	and	r24, r24
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <_ZN3DHT12readHumidityEb+0x40>
    13f6:	77 c0       	rjmp	.+238    	; 0x14e6 <_ZN3DHT12readHumidityEb+0x12e>
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	fc 01       	movw	r30, r24
    13fe:	86 81       	ldd	r24, Z+6	; 0x06
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	8b 30       	cpi	r24, 0x0B	; 11
    1406:	91 05       	cpc	r25, r1
    1408:	0c f4       	brge	.+2      	; 0x140c <_ZN3DHT12readHumidityEb+0x54>
    140a:	6d c0       	rjmp	.+218    	; 0x14e6 <_ZN3DHT12readHumidityEb+0x12e>
    140c:	8d 30       	cpi	r24, 0x0D	; 13
    140e:	91 05       	cpc	r25, r1
    1410:	2c f0       	brlt	.+10     	; 0x141c <_ZN3DHT12readHumidityEb+0x64>
    1412:	45 97       	sbiw	r24, 0x15	; 21
    1414:	02 97       	sbiw	r24, 0x02	; 2
    1416:	08 f0       	brcs	.+2      	; 0x141a <_ZN3DHT12readHumidityEb+0x62>
    1418:	66 c0       	rjmp	.+204    	; 0x14e6 <_ZN3DHT12readHumidityEb+0x12e>
    141a:	37 c0       	rjmp	.+110    	; 0x148a <_ZN3DHT12readHumidityEb+0xd2>
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	fc 01       	movw	r30, r24
    1422:	80 81       	ld	r24, Z
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	09 2e       	mov	r0, r25
    142a:	00 0c       	add	r0, r0
    142c:	aa 0b       	sbc	r26, r26
    142e:	bb 0b       	sbc	r27, r27
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1438:	6b 01       	movw	r12, r22
    143a:	7c 01       	movw	r14, r24
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	fc 01       	movw	r30, r24
    1442:	81 81       	ldd	r24, Z+1	; 0x01
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	09 2e       	mov	r0, r25
    144a:	00 0c       	add	r0, r0
    144c:	aa 0b       	sbc	r26, r26
    144e:	bb 0b       	sbc	r27, r27
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	2d ec       	ldi	r18, 0xCD	; 205
    145e:	3c ec       	ldi	r19, 0xCC	; 204
    1460:	4c ec       	ldi	r20, 0xCC	; 204
    1462:	5d e3       	ldi	r21, 0x3D	; 61
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	9c 01       	movw	r18, r24
    1472:	ad 01       	movw	r20, r26
    1474:	c7 01       	movw	r24, r14
    1476:	b6 01       	movw	r22, r12
    1478:	0e 94 21 28 	call	0x5042	; 0x5042 <__addsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	ab 83       	std	Y+3, r26	; 0x03
    1486:	bc 83       	std	Y+4, r27	; 0x04
    1488:	2e c0       	rjmp	.+92     	; 0x14e6 <_ZN3DHT12readHumidityEb+0x12e>
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	fc 01       	movw	r30, r24
    1490:	80 81       	ld	r24, Z
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	38 2f       	mov	r19, r24
    1498:	22 27       	eor	r18, r18
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	fc 01       	movw	r30, r24
    14a0:	81 81       	ldd	r24, Z+1	; 0x01
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	82 2b       	or	r24, r18
    14a8:	93 2b       	or	r25, r19
    14aa:	cc 01       	movw	r24, r24
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	ab 83       	std	Y+3, r26	; 0x03
    14c2:	bc 83       	std	Y+4, r27	; 0x04
    14c4:	2d ec       	ldi	r18, 0xCD	; 205
    14c6:	3c ec       	ldi	r19, 0xCC	; 204
    14c8:	4c ec       	ldi	r20, 0xCC	; 204
    14ca:	5d e3       	ldi	r21, 0x3D	; 61
    14cc:	69 81       	ldd	r22, Y+1	; 0x01
    14ce:	7a 81       	ldd	r23, Y+2	; 0x02
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	0e 94 68 29 	call	0x52d0	; 0x52d0 <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	ab 83       	std	Y+3, r26	; 0x03
    14e2:	bc 83       	std	Y+4, r27	; 0x04
    14e4:	00 00       	nop
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	ab 81       	ldd	r26, Y+3	; 0x03
    14ec:	bc 81       	ldd	r27, Y+4	; 0x04
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	27 96       	adiw	r28, 0x07	; 7
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	08 95       	ret

0000150c <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	c4 55       	subi	r28, 0x54	; 84
    1524:	d1 40       	sbci	r29, 0x01	; 1
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	9e 01       	movw	r18, r28
    1532:	2e 5a       	subi	r18, 0xAE	; 174
    1534:	3e 4f       	sbci	r19, 0xFE	; 254
    1536:	f9 01       	movw	r30, r18
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
    153c:	ce 01       	movw	r24, r28
    153e:	8c 5a       	subi	r24, 0xAC	; 172
    1540:	9e 4f       	sbci	r25, 0xFE	; 254
    1542:	fc 01       	movw	r30, r24
    1544:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1546:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <millis>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	af 83       	std	Y+7, r26	; 0x07
    1554:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1556:	ce 01       	movw	r24, r28
    1558:	8c 5a       	subi	r24, 0xAC	; 172
    155a:	9e 4f       	sbci	r25, 0xFE	; 254
    155c:	fc 01       	movw	r30, r24
    155e:	90 81       	ld	r25, Z
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 27       	eor	r24, r25
    1564:	88 23       	and	r24, r24
    1566:	29 f1       	breq	.+74     	; 0x15b2 <_ZN3DHT4readEb+0xa6>
    1568:	ce 01       	movw	r24, r28
    156a:	8e 5a       	subi	r24, 0xAE	; 174
    156c:	9e 4f       	sbci	r25, 0xFE	; 254
    156e:	fc 01       	movw	r30, r24
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	fc 01       	movw	r30, r24
    1576:	81 85       	ldd	r24, Z+9	; 0x09
    1578:	92 85       	ldd	r25, Z+10	; 0x0a
    157a:	a3 85       	ldd	r26, Z+11	; 0x0b
    157c:	b4 85       	ldd	r27, Z+12	; 0x0c
    157e:	2d 81       	ldd	r18, Y+5	; 0x05
    1580:	3e 81       	ldd	r19, Y+6	; 0x06
    1582:	4f 81       	ldd	r20, Y+7	; 0x07
    1584:	58 85       	ldd	r21, Y+8	; 0x08
    1586:	59 01       	movw	r10, r18
    1588:	6a 01       	movw	r12, r20
    158a:	a8 1a       	sub	r10, r24
    158c:	b9 0a       	sbc	r11, r25
    158e:	ca 0a       	sbc	r12, r26
    1590:	db 0a       	sbc	r13, r27
    1592:	d6 01       	movw	r26, r12
    1594:	c5 01       	movw	r24, r10
    1596:	80 3d       	cpi	r24, 0xD0	; 208
    1598:	97 40       	sbci	r25, 0x07	; 7
    159a:	a1 05       	cpc	r26, r1
    159c:	b1 05       	cpc	r27, r1
    159e:	48 f4       	brcc	.+18     	; 0x15b2 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    15a0:	ce 01       	movw	r24, r28
    15a2:	8e 5a       	subi	r24, 0xAE	; 174
    15a4:	9e 4f       	sbci	r25, 0xFE	; 254
    15a6:	fc 01       	movw	r30, r24
    15a8:	80 81       	ld	r24, Z
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
    15ac:	fc 01       	movw	r30, r24
    15ae:	f1 88       	ldd	r15, Z+17	; 0x11
    15b0:	5f c2       	rjmp	.+1214   	; 0x1a70 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    15b2:	ce 01       	movw	r24, r28
    15b4:	8e 5a       	subi	r24, 0xAE	; 174
    15b6:	9e 4f       	sbci	r25, 0xFE	; 254
    15b8:	fc 01       	movw	r30, r24
    15ba:	20 81       	ld	r18, Z
    15bc:	31 81       	ldd	r19, Z+1	; 0x01
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	af 81       	ldd	r26, Y+7	; 0x07
    15c4:	b8 85       	ldd	r27, Y+8	; 0x08
    15c6:	f9 01       	movw	r30, r18
    15c8:	81 87       	std	Z+9, r24	; 0x09
    15ca:	92 87       	std	Z+10, r25	; 0x0a
    15cc:	a3 87       	std	Z+11, r26	; 0x0b
    15ce:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    15d0:	ce 01       	movw	r24, r28
    15d2:	8e 5a       	subi	r24, 0xAE	; 174
    15d4:	9e 4f       	sbci	r25, 0xFE	; 254
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	fc 01       	movw	r30, r24
    15de:	14 82       	std	Z+4, r1	; 0x04
    15e0:	ce 01       	movw	r24, r28
    15e2:	8e 5a       	subi	r24, 0xAE	; 174
    15e4:	9e 4f       	sbci	r25, 0xFE	; 254
    15e6:	fc 01       	movw	r30, r24
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	fc 01       	movw	r30, r24
    15ee:	24 81       	ldd	r18, Z+4	; 0x04
    15f0:	ce 01       	movw	r24, r28
    15f2:	8e 5a       	subi	r24, 0xAE	; 174
    15f4:	9e 4f       	sbci	r25, 0xFE	; 254
    15f6:	fc 01       	movw	r30, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	fc 01       	movw	r30, r24
    15fe:	23 83       	std	Z+3, r18	; 0x03
    1600:	ce 01       	movw	r24, r28
    1602:	8e 5a       	subi	r24, 0xAE	; 174
    1604:	9e 4f       	sbci	r25, 0xFE	; 254
    1606:	fc 01       	movw	r30, r24
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	fc 01       	movw	r30, r24
    160e:	23 81       	ldd	r18, Z+3	; 0x03
    1610:	ce 01       	movw	r24, r28
    1612:	8e 5a       	subi	r24, 0xAE	; 174
    1614:	9e 4f       	sbci	r25, 0xFE	; 254
    1616:	fc 01       	movw	r30, r24
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	fc 01       	movw	r30, r24
    161e:	22 83       	std	Z+2, r18	; 0x02
    1620:	ce 01       	movw	r24, r28
    1622:	8e 5a       	subi	r24, 0xAE	; 174
    1624:	9e 4f       	sbci	r25, 0xFE	; 254
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	fc 01       	movw	r30, r24
    162e:	22 81       	ldd	r18, Z+2	; 0x02
    1630:	ce 01       	movw	r24, r28
    1632:	8e 5a       	subi	r24, 0xAE	; 174
    1634:	9e 4f       	sbci	r25, 0xFE	; 254
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	fc 01       	movw	r30, r24
    163e:	21 83       	std	Z+1, r18	; 0x01
    1640:	ce 01       	movw	r24, r28
    1642:	8e 5a       	subi	r24, 0xAE	; 174
    1644:	9e 4f       	sbci	r25, 0xFE	; 254
    1646:	fc 01       	movw	r30, r24
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	fc 01       	movw	r30, r24
    164e:	21 81       	ldd	r18, Z+1	; 0x01
    1650:	ce 01       	movw	r24, r28
    1652:	8e 5a       	subi	r24, 0xAE	; 174
    1654:	9e 4f       	sbci	r25, 0xFE	; 254
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	fc 01       	movw	r30, r24
    165e:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1660:	ce 01       	movw	r24, r28
    1662:	8e 5a       	subi	r24, 0xAE	; 174
    1664:	9e 4f       	sbci	r25, 0xFE	; 254
    1666:	fc 01       	movw	r30, r24
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	fc 01       	movw	r30, r24
    166e:	85 81       	ldd	r24, Z+5	; 0x05
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
  delay(1);
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    1682:	ce 01       	movw	r24, r28
    1684:	8e 5a       	subi	r24, 0xAE	; 174
    1686:	9e 4f       	sbci	r25, 0xFE	; 254
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	fc 01       	movw	r30, r24
    1690:	85 81       	ldd	r24, Z+5	; 0x05
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
  digitalWrite(_pin, LOW);
    1698:	ce 01       	movw	r24, r28
    169a:	8e 5a       	subi	r24, 0xAE	; 174
    169c:	9e 4f       	sbci	r25, 0xFE	; 254
    169e:	fc 01       	movw	r30, r24
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	fc 01       	movw	r30, r24
    16a6:	85 81       	ldd	r24, Z+5	; 0x05
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
  switch (_type) {
    16ae:	ce 01       	movw	r24, r28
    16b0:	8e 5a       	subi	r24, 0xAE	; 174
    16b2:	9e 4f       	sbci	r25, 0xFE	; 254
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	fc 01       	movw	r30, r24
    16bc:	86 81       	ldd	r24, Z+6	; 0x06
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	45 97       	sbiw	r24, 0x15	; 21
    16c4:	02 97       	sbiw	r24, 0x02	; 2
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    16c8:	8c e4       	ldi	r24, 0x4C	; 76
    16ca:	94 e0       	ldi	r25, 0x04	; 4
    16cc:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <delayMicroseconds>
    break;
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    16d2:	64 e1       	ldi	r22, 0x14	; 20
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
    break;
    16de:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    16e0:	ce 01       	movw	r24, r28
    16e2:	8e 5a       	subi	r24, 0xAE	; 174
    16e4:	9e 4f       	sbci	r25, 0xFE	; 254
    16e6:	fc 01       	movw	r30, r24
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	fc 01       	movw	r30, r24
    16ee:	85 81       	ldd	r24, Z+5	; 0x05
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    16f6:	ce 01       	movw	r24, r28
    16f8:	8e 5a       	subi	r24, 0xAE	; 174
    16fa:	9e 4f       	sbci	r25, 0xFE	; 254
    16fc:	fc 01       	movw	r30, r24
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	fc 01       	movw	r30, r24
    1704:	82 89       	ldd	r24, Z+18	; 0x12
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    170e:	ce 01       	movw	r24, r28
    1710:	8f 5a       	subi	r24, 0xAF	; 175
    1712:	9e 4f       	sbci	r25, 0xFE	; 254
    1714:	2c dc       	rcall	.-1960   	; 0xf6e <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1716:	ce 01       	movw	r24, r28
    1718:	8e 5a       	subi	r24, 0xAE	; 174
    171a:	9e 4f       	sbci	r25, 0xFE	; 254
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	b7 d1       	rcall	.+878    	; 0x1a94 <_ZN3DHT11expectPulseEb>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	21 e0       	ldi	r18, 0x01	; 1
    172c:	8f 3f       	cpi	r24, 0xFF	; 255
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	af 4f       	sbci	r26, 0xFF	; 255
    1732:	bf 4f       	sbci	r27, 0xFF	; 255
    1734:	09 f0       	breq	.+2      	; 0x1738 <_ZN3DHT4readEb+0x22c>
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	22 23       	and	r18, r18
    173a:	99 f0       	breq	.+38     	; 0x1762 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    173c:	ce 01       	movw	r24, r28
    173e:	8e 5a       	subi	r24, 0xAE	; 174
    1740:	9e 4f       	sbci	r25, 0xFE	; 254
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	fc 01       	movw	r30, r24
    174a:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    174c:	ce 01       	movw	r24, r28
    174e:	8e 5a       	subi	r24, 0xAE	; 174
    1750:	9e 4f       	sbci	r25, 0xFE	; 254
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	fc 01       	movw	r30, r24
    175a:	f1 88       	ldd	r15, Z+17	; 0x11
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	72 c0       	rjmp	.+228    	; 0x1846 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1762:	ce 01       	movw	r24, r28
    1764:	8e 5a       	subi	r24, 0xAE	; 174
    1766:	9e 4f       	sbci	r25, 0xFE	; 254
    1768:	fc 01       	movw	r30, r24
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	91 d1       	rcall	.+802    	; 0x1a94 <_ZN3DHT11expectPulseEb>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	21 e0       	ldi	r18, 0x01	; 1
    1778:	8f 3f       	cpi	r24, 0xFF	; 255
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	af 4f       	sbci	r26, 0xFF	; 255
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	09 f0       	breq	.+2      	; 0x1784 <_ZN3DHT4readEb+0x278>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	22 23       	and	r18, r18
    1786:	99 f0       	breq	.+38     	; 0x17ae <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    1788:	ce 01       	movw	r24, r28
    178a:	8e 5a       	subi	r24, 0xAE	; 174
    178c:	9e 4f       	sbci	r25, 0xFE	; 254
    178e:	fc 01       	movw	r30, r24
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	fc 01       	movw	r30, r24
    1796:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1798:	ce 01       	movw	r24, r28
    179a:	8e 5a       	subi	r24, 0xAE	; 174
    179c:	9e 4f       	sbci	r25, 0xFE	; 254
    179e:	fc 01       	movw	r30, r24
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	fc 01       	movw	r30, r24
    17a6:	f1 88       	ldd	r15, Z+17	; 0x11
    17a8:	00 e0       	ldi	r16, 0x00	; 0
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	4c c0       	rjmp	.+152    	; 0x1846 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    17ae:	1a 82       	std	Y+2, r1	; 0x02
    17b0:	19 82       	std	Y+1, r1	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	80 35       	cpi	r24, 0x50	; 80
    17b8:	91 05       	cpc	r25, r1
    17ba:	0c f0       	brlt	.+2      	; 0x17be <_ZN3DHT4readEb+0x2b2>
    17bc:	42 c0       	rjmp	.+132    	; 0x1842 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    17be:	ce 01       	movw	r24, r28
    17c0:	8e 5a       	subi	r24, 0xAE	; 174
    17c2:	9e 4f       	sbci	r25, 0xFE	; 254
    17c4:	fc 01       	movw	r30, r24
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	63 d1       	rcall	.+710    	; 0x1a94 <_ZN3DHT11expectPulseEb>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	29 81       	ldd	r18, Y+1	; 0x01
    17d4:	3a 81       	ldd	r19, Y+2	; 0x02
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	22 0f       	add	r18, r18
    17dc:	33 1f       	adc	r19, r19
    17de:	ae 01       	movw	r20, r28
    17e0:	4f 5f       	subi	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255
    17e4:	24 0f       	add	r18, r20
    17e6:	35 1f       	adc	r19, r21
    17e8:	20 5f       	subi	r18, 0xF0	; 240
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	f9 01       	movw	r30, r18
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	8c 01       	movw	r16, r24
    17fc:	0f 5f       	subi	r16, 0xFF	; 255
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	ce 01       	movw	r24, r28
    1802:	8e 5a       	subi	r24, 0xAE	; 174
    1804:	9e 4f       	sbci	r25, 0xFE	; 254
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	42 d1       	rcall	.+644    	; 0x1a94 <_ZN3DHT11expectPulseEb>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	98 01       	movw	r18, r16
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	22 0f       	add	r18, r18
    181c:	33 1f       	adc	r19, r19
    181e:	ae 01       	movw	r20, r28
    1820:	4f 5f       	subi	r20, 0xFF	; 255
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	24 0f       	add	r18, r20
    1826:	35 1f       	adc	r19, r21
    1828:	20 5f       	subi	r18, 0xF0	; 240
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	f9 01       	movw	r30, r18
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	02 96       	adiw	r24, 0x02	; 2
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	b8 cf       	rjmp	.-144    	; 0x17b2 <_ZN3DHT4readEb+0x2a6>
    1842:	01 e0       	ldi	r16, 0x01	; 1
    1844:	10 e0       	ldi	r17, 0x00	; 0
    1846:	ce 01       	movw	r24, r28
    1848:	8f 5a       	subi	r24, 0xAF	; 175
    184a:	9e 4f       	sbci	r25, 0xFE	; 254
    184c:	9f db       	rcall	.-2242   	; 0xf8c <_ZN13InterruptLockD1Ev>
    184e:	01 30       	cpi	r16, 0x01	; 1
    1850:	11 05       	cpc	r17, r1
    1852:	09 f0       	breq	.+2      	; 0x1856 <_ZN3DHT4readEb+0x34a>
    1854:	0d c1       	rjmp	.+538    	; 0x1a70 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1856:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1858:	1c 82       	std	Y+4, r1	; 0x04
    185a:	1b 82       	std	Y+3, r1	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	88 97       	sbiw	r24, 0x28	; 40
    1862:	0c f0       	brlt	.+2      	; 0x1866 <_ZN3DHT4readEb+0x35a>
    1864:	a7 c0       	rjmp	.+334    	; 0x19b4 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	9e 01       	movw	r18, r28
    1878:	2f 5f       	subi	r18, 0xFF	; 255
    187a:	3f 4f       	sbci	r19, 0xFF	; 255
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	40 96       	adiw	r24, 0x10	; 16
    1882:	fc 01       	movw	r30, r24
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	a2 81       	ldd	r26, Z+2	; 0x02
    188a:	b3 81       	ldd	r27, Z+3	; 0x03
    188c:	89 87       	std	Y+9, r24	; 0x09
    188e:	9a 87       	std	Y+10, r25	; 0x0a
    1890:	ab 87       	std	Y+11, r26	; 0x0b
    1892:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	9e 01       	movw	r18, r28
    18a8:	2f 5f       	subi	r18, 0xFF	; 255
    18aa:	3f 4f       	sbci	r19, 0xFF	; 255
    18ac:	82 0f       	add	r24, r18
    18ae:	93 1f       	adc	r25, r19
    18b0:	40 96       	adiw	r24, 0x10	; 16
    18b2:	fc 01       	movw	r30, r24
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	a2 81       	ldd	r26, Z+2	; 0x02
    18ba:	b3 81       	ldd	r27, Z+3	; 0x03
    18bc:	8d 87       	std	Y+13, r24	; 0x0d
    18be:	9e 87       	std	Y+14, r25	; 0x0e
    18c0:	af 87       	std	Y+15, r26	; 0x0f
    18c2:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    18ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    18cc:	8f 3f       	cpi	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	af 4f       	sbci	r26, 0xFF	; 255
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	49 f0       	breq	.+18     	; 0x18e8 <_ZN3DHT4readEb+0x3dc>
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	af 85       	ldd	r26, Y+15	; 0x0f
    18dc:	b8 89       	ldd	r27, Y+16	; 0x10
    18de:	8f 3f       	cpi	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	af 4f       	sbci	r26, 0xFF	; 255
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	89 f4       	brne	.+34     	; 0x190a <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    18e8:	ce 01       	movw	r24, r28
    18ea:	8e 5a       	subi	r24, 0xAE	; 174
    18ec:	9e 4f       	sbci	r25, 0xFE	; 254
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	fc 01       	movw	r30, r24
    18f6:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    18f8:	ce 01       	movw	r24, r28
    18fa:	8e 5a       	subi	r24, 0xAE	; 174
    18fc:	9e 4f       	sbci	r25, 0xFE	; 254
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	fc 01       	movw	r30, r24
    1906:	f1 88       	ldd	r15, Z+17	; 0x11
    1908:	b3 c0       	rjmp	.+358    	; 0x1a70 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	99 23       	and	r25, r25
    1910:	0c f4       	brge	.+2      	; 0x1914 <_ZN3DHT4readEb+0x408>
    1912:	07 96       	adiw	r24, 0x07	; 7
    1914:	95 95       	asr	r25
    1916:	87 95       	ror	r24
    1918:	95 95       	asr	r25
    191a:	87 95       	ror	r24
    191c:	95 95       	asr	r25
    191e:	87 95       	ror	r24
    1920:	9e 01       	movw	r18, r28
    1922:	2e 5a       	subi	r18, 0xAE	; 174
    1924:	3e 4f       	sbci	r19, 0xFE	; 254
    1926:	f9 01       	movw	r30, r18
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	28 0f       	add	r18, r24
    192e:	39 1f       	adc	r19, r25
    1930:	f9 01       	movw	r30, r18
    1932:	20 81       	ld	r18, Z
    1934:	42 2f       	mov	r20, r18
    1936:	44 0f       	add	r20, r20
    1938:	9e 01       	movw	r18, r28
    193a:	2e 5a       	subi	r18, 0xAE	; 174
    193c:	3e 4f       	sbci	r19, 0xFE	; 254
    193e:	f9 01       	movw	r30, r18
    1940:	20 81       	ld	r18, Z
    1942:	31 81       	ldd	r19, Z+1	; 0x01
    1944:	82 0f       	add	r24, r18
    1946:	93 1f       	adc	r25, r19
    1948:	fc 01       	movw	r30, r24
    194a:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    194c:	2d 85       	ldd	r18, Y+13	; 0x0d
    194e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1950:	4f 85       	ldd	r20, Y+15	; 0x0f
    1952:	58 89       	ldd	r21, Y+16	; 0x10
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	ab 85       	ldd	r26, Y+11	; 0x0b
    195a:	bc 85       	ldd	r27, Y+12	; 0x0c
    195c:	82 17       	cp	r24, r18
    195e:	93 07       	cpc	r25, r19
    1960:	a4 07       	cpc	r26, r20
    1962:	b5 07       	cpc	r27, r21
    1964:	08 f5       	brcc	.+66     	; 0x19a8 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	99 23       	and	r25, r25
    196c:	0c f4       	brge	.+2      	; 0x1970 <_ZN3DHT4readEb+0x464>
    196e:	07 96       	adiw	r24, 0x07	; 7
    1970:	95 95       	asr	r25
    1972:	87 95       	ror	r24
    1974:	95 95       	asr	r25
    1976:	87 95       	ror	r24
    1978:	95 95       	asr	r25
    197a:	87 95       	ror	r24
    197c:	9e 01       	movw	r18, r28
    197e:	2e 5a       	subi	r18, 0xAE	; 174
    1980:	3e 4f       	sbci	r19, 0xFE	; 254
    1982:	f9 01       	movw	r30, r18
    1984:	20 81       	ld	r18, Z
    1986:	31 81       	ldd	r19, Z+1	; 0x01
    1988:	28 0f       	add	r18, r24
    198a:	39 1f       	adc	r19, r25
    198c:	f9 01       	movw	r30, r18
    198e:	20 81       	ld	r18, Z
    1990:	42 2f       	mov	r20, r18
    1992:	41 60       	ori	r20, 0x01	; 1
    1994:	9e 01       	movw	r18, r28
    1996:	2e 5a       	subi	r18, 0xAE	; 174
    1998:	3e 4f       	sbci	r19, 0xFE	; 254
    199a:	f9 01       	movw	r30, r18
    199c:	20 81       	ld	r18, Z
    199e:	31 81       	ldd	r19, Z+1	; 0x01
    19a0:	82 0f       	add	r24, r18
    19a2:	93 1f       	adc	r25, r19
    19a4:	fc 01       	movw	r30, r24
    19a6:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	9c 83       	std	Y+4, r25	; 0x04
    19b0:	8b 83       	std	Y+3, r24	; 0x03
    19b2:	54 cf       	rjmp	.-344    	; 0x185c <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    19b4:	ce 01       	movw	r24, r28
    19b6:	8e 5a       	subi	r24, 0xAE	; 174
    19b8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ba:	fc 01       	movw	r30, r24
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	fc 01       	movw	r30, r24
    19c2:	84 81       	ldd	r24, Z+4	; 0x04
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	ce 01       	movw	r24, r28
    19ca:	8e 5a       	subi	r24, 0xAE	; 174
    19cc:	9e 4f       	sbci	r25, 0xFE	; 254
    19ce:	fc 01       	movw	r30, r24
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	fc 01       	movw	r30, r24
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	ce 01       	movw	r24, r28
    19de:	8e 5a       	subi	r24, 0xAE	; 174
    19e0:	9e 4f       	sbci	r25, 0xFE	; 254
    19e2:	fc 01       	movw	r30, r24
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	fc 01       	movw	r30, r24
    19ea:	81 81       	ldd	r24, Z+1	; 0x01
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	48 0f       	add	r20, r24
    19f2:	59 1f       	adc	r21, r25
    19f4:	ce 01       	movw	r24, r28
    19f6:	8e 5a       	subi	r24, 0xAE	; 174
    19f8:	9e 4f       	sbci	r25, 0xFE	; 254
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	fc 01       	movw	r30, r24
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	48 0f       	add	r20, r24
    1a0a:	59 1f       	adc	r21, r25
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	8e 5a       	subi	r24, 0xAE	; 174
    1a10:	9e 4f       	sbci	r25, 0xFE	; 254
    1a12:	fc 01       	movw	r30, r24
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	fc 01       	movw	r30, r24
    1a1a:	83 81       	ldd	r24, Z+3	; 0x03
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	84 0f       	add	r24, r20
    1a22:	95 1f       	adc	r25, r21
    1a24:	99 27       	eor	r25, r25
    1a26:	28 17       	cp	r18, r24
    1a28:	39 07       	cpc	r19, r25
    1a2a:	91 f4       	brne	.+36     	; 0x1a50 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	8e 5a       	subi	r24, 0xAE	; 174
    1a30:	9e 4f       	sbci	r25, 0xFE	; 254
    1a32:	fc 01       	movw	r30, r24
    1a34:	80 81       	ld	r24, Z
    1a36:	91 81       	ldd	r25, Z+1	; 0x01
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1a3e:	ce 01       	movw	r24, r28
    1a40:	8e 5a       	subi	r24, 0xAE	; 174
    1a42:	9e 4f       	sbci	r25, 0xFE	; 254
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	f1 88       	ldd	r15, Z+17	; 0x11
    1a4e:	10 c0       	rjmp	.+32     	; 0x1a70 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1a50:	ce 01       	movw	r24, r28
    1a52:	8e 5a       	subi	r24, 0xAE	; 174
    1a54:	9e 4f       	sbci	r25, 0xFE	; 254
    1a56:	fc 01       	movw	r30, r24
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1a60:	ce 01       	movw	r24, r28
    1a62:	8e 5a       	subi	r24, 0xAE	; 174
    1a64:	9e 4f       	sbci	r25, 0xFE	; 254
    1a66:	fc 01       	movw	r30, r24
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	f1 88       	ldd	r15, Z+17	; 0x11
    1a70:	8f 2d       	mov	r24, r15
  }
}
    1a72:	cc 5a       	subi	r28, 0xAC	; 172
    1a74:	de 4f       	sbci	r29, 0xFE	; 254
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	08 95       	ret

00001a94 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	99 87       	std	Y+9, r25	; 0x09
    1aaa:	88 87       	std	Y+8, r24	; 0x08
    1aac:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1aae:	1a 82       	std	Y+2, r1	; 0x02
    1ab0:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab4:	88 23       	and	r24, r24
    1ab6:	29 f0       	breq	.+10     	; 0x1ac2 <_ZN3DHT11expectPulseEb+0x2e>
    1ab8:	88 85       	ldd	r24, Y+8	; 0x08
    1aba:	99 85       	ldd	r25, Y+9	; 0x09
    1abc:	fc 01       	movw	r30, r24
    1abe:	87 81       	ldd	r24, Z+7	; 0x07
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <_ZN3DHT11expectPulseEb+0x30>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1ac6:	88 85       	ldd	r24, Y+8	; 0x08
    1ac8:	99 85       	ldd	r25, Y+9	; 0x09
    1aca:	fc 01       	movw	r30, r24
    1acc:	80 85       	ldd	r24, Z+8	; 0x08
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	86 52       	subi	r24, 0x26	; 38
    1ad8:	9e 4f       	sbci	r25, 0xFE	; 254
    1ada:	9d 83       	std	Y+5, r25	; 0x05
    1adc:	8c 83       	std	Y+4, r24	; 0x04
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	25 91       	lpm	r18, Z+
    1ae6:	34 91       	lpm	r19, Z
    1ae8:	cf 01       	movw	r24, r30
    1aea:	3f 83       	std	Y+7, r19	; 0x07
    1aec:	2e 83       	std	Y+6, r18	; 0x06
    1aee:	9d 83       	std	Y+5, r25	; 0x05
    1af0:	8c 83       	std	Y+4, r24	; 0x04
    1af2:	8e 81       	ldd	r24, Y+6	; 0x06
    1af4:	9f 81       	ldd	r25, Y+7	; 0x07
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 81       	ld	r18, Z
    1afa:	88 85       	ldd	r24, Y+8	; 0x08
    1afc:	99 85       	ldd	r25, Y+9	; 0x09
    1afe:	fc 01       	movw	r30, r24
    1b00:	87 81       	ldd	r24, Z+7	; 0x07
    1b02:	28 23       	and	r18, r24
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	9b 81       	ldd	r25, Y+3	; 0x03
    1b08:	29 17       	cp	r18, r25
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <_ZN3DHT11expectPulseEb+0x7a>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	88 23       	and	r24, r24
    1b10:	f9 f0       	breq	.+62     	; 0x1b50 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	9c 01       	movw	r18, r24
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	3a 83       	std	Y+2, r19	; 0x02
    1b1e:	29 83       	std	Y+1, r18	; 0x01
    1b20:	9c 01       	movw	r18, r24
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	88 85       	ldd	r24, Y+8	; 0x08
    1b28:	99 85       	ldd	r25, Y+9	; 0x09
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b2e:	96 85       	ldd	r25, Z+14	; 0x0e
    1b30:	a7 85       	ldd	r26, Z+15	; 0x0f
    1b32:	b0 89       	ldd	r27, Z+16	; 0x10
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	28 17       	cp	r18, r24
    1b38:	39 07       	cpc	r19, r25
    1b3a:	4a 07       	cpc	r20, r26
    1b3c:	5b 07       	cpc	r21, r27
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <_ZN3DHT11expectPulseEb+0xae>
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	66 23       	and	r22, r22
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <_ZN3DHT11expectPulseEb+0xb4>
    1b46:	bf cf       	rjmp	.-130    	; 0x1ac6 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	9f ef       	ldi	r25, 0xFF	; 255
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	cc 01       	movw	r24, r24
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
}
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	2a 96       	adiw	r28, 0x0a	; 10
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	1f 92       	push	r1
    1b76:	1f 92       	push	r1
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	25 e7       	ldi	r18, 0x75	; 117
    1b82:	32 e0       	ldi	r19, 0x02	; 2
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	fc 01       	movw	r30, r24
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	20 83       	st	Z, r18
    1b8e:	00 00       	nop
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	2d 97       	sbiw	r28, 0x0d	; 13
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	6b 83       	std	Y+3, r22	; 0x03
    1bc4:	4c 83       	std	Y+4, r20	; 0x04
    1bc6:	2d 83       	std	Y+5, r18	; 0x05
    1bc8:	ee 82       	std	Y+6, r14	; 0x06
    1bca:	ff 82       	std	Y+7, r15	; 0x07
    1bcc:	08 87       	std	Y+8, r16	; 0x08
    1bce:	19 87       	std	Y+9, r17	; 0x09
    1bd0:	aa 86       	std	Y+10, r10	; 0x0a
    1bd2:	bb 86       	std	Y+11, r11	; 0x0b
    1bd4:	cc 86       	std	Y+12, r12	; 0x0c
    1bd6:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bde:	4c 81       	ldd	r20, Y+4	; 0x04
    1be0:	6b 81       	ldd	r22, Y+3	; 0x03
    1be2:	e3 d9       	rcall	.-3130   	; 0xfaa <_ZN3DHTC1Ehhh>
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bea:	fc 01       	movw	r30, r24
    1bec:	23 8b       	std	Z+19, r18	; 0x13
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	74 96       	adiw	r30, 0x14	; 20
    1bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfa:	a8 85       	ldd	r26, Y+8	; 0x08
    1bfc:	b9 85       	ldd	r27, Y+9	; 0x09
    1bfe:	69 81       	ldd	r22, Y+1	; 0x01
    1c00:	7a 81       	ldd	r23, Y+2	; 0x02
    1c02:	9c 01       	movw	r18, r24
    1c04:	ad 01       	movw	r20, r26
    1c06:	cf 01       	movw	r24, r30
    1c08:	f6 d0       	rcall	.+492    	; 0x1df6 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	fc 01       	movw	r30, r24
    1c10:	7d 96       	adiw	r30, 0x1d	; 29
    1c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c16:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c18:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c1a:	69 81       	ldd	r22, Y+1	; 0x01
    1c1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1e:	9c 01       	movw	r18, r24
    1c20:	ad 01       	movw	r20, r26
    1c22:	cf 01       	movw	r24, r30
    1c24:	7e d2       	rcall	.+1276   	; 0x2122 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1c26:	00 00       	nop
    1c28:	2d 96       	adiw	r28, 0x0d	; 13
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	bf 90       	pop	r11
    1c46:	af 90       	pop	r10
    1c48:	08 95       	ret

00001c4a <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	1f 92       	push	r1
    1c50:	1f 92       	push	r1
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	67 e3       	ldi	r22, 0x37	; 55
    1c60:	f4 d9       	rcall	.-3096   	; 0x104a <_ZN3DHT5beginEh>
    1c62:	00 00       	nop
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1c74:	1f 92       	push	r1
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	7c 83       	std	Y+4, r23	; 0x04
    1c80:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	fc 01       	movw	r30, r24
    1c88:	83 89       	ldd	r24, Z+19	; 0x13
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	8c 30       	cpi	r24, 0x0C	; 12
    1c90:	91 05       	cpc	r25, r1
    1c92:	b1 f0       	breq	.+44     	; 0x1cc0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1c94:	8d 30       	cpi	r24, 0x0D	; 13
    1c96:	91 05       	cpc	r25, r1
    1c98:	1c f4       	brge	.+6      	; 0x1ca0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1c9a:	0b 97       	sbiw	r24, 0x0b	; 11
    1c9c:	39 f0       	breq	.+14     	; 0x1cac <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1c9e:	2e c0       	rjmp	.+92     	; 0x1cfc <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1ca0:	85 31       	cpi	r24, 0x15	; 21
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	b9 f0       	breq	.+46     	; 0x1cd4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1ca6:	46 97       	sbiw	r24, 0x16	; 22
    1ca8:	f9 f0       	breq	.+62     	; 0x1ce8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1caa:	28 c0       	rjmp	.+80     	; 0x1cfc <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1cac:	2b e0       	ldi	r18, 0x0B	; 11
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	64 e5       	ldi	r22, 0x54	; 84
    1cb8:	72 e0       	ldi	r23, 0x02	; 2
    1cba:	0e 94 05 33 	call	0x660a	; 0x660a <strncpy>
    break;
    1cbe:	28 c0       	rjmp	.+80     	; 0x1d10 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1cc0:	2b e0       	ldi	r18, 0x0B	; 11
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	a9 01       	movw	r20, r18
    1cca:	6a e5       	ldi	r22, 0x5A	; 90
    1ccc:	72 e0       	ldi	r23, 0x02	; 2
    1cce:	0e 94 05 33 	call	0x660a	; 0x660a <strncpy>
    break;
    1cd2:	1e c0       	rjmp	.+60     	; 0x1d10 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1cd4:	2b e0       	ldi	r18, 0x0B	; 11
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	a9 01       	movw	r20, r18
    1cde:	60 e6       	ldi	r22, 0x60	; 96
    1ce0:	72 e0       	ldi	r23, 0x02	; 2
    1ce2:	0e 94 05 33 	call	0x660a	; 0x660a <strncpy>
    break;
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1ce8:	2b e0       	ldi	r18, 0x0B	; 11
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	a9 01       	movw	r20, r18
    1cf2:	66 e6       	ldi	r22, 0x66	; 102
    1cf4:	72 e0       	ldi	r23, 0x02	; 2
    1cf6:	0e 94 05 33 	call	0x660a	; 0x660a <strncpy>
    break;
    1cfa:	0a c0       	rjmp	.+20     	; 0x1d10 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1cfc:	2b e0       	ldi	r18, 0x0B	; 11
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	a9 01       	movw	r20, r18
    1d06:	6c e6       	ldi	r22, 0x6C	; 108
    1d08:	72 e0       	ldi	r23, 0x02	; 2
    1d0a:	0e 94 05 33 	call	0x660a	; 0x660a <strncpy>
    break;
    1d0e:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1d10:	8b e0       	ldi	r24, 0x0B	; 11
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	82 0f       	add	r24, r18
    1d1a:	93 1f       	adc	r25, r19
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	10 82       	st	Z, r1
}
    1d20:	00 00       	nop
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1d36:	1f 92       	push	r1
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	7c 83       	std	Y+4, r23	; 0x04
    1d42:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	fc 01       	movw	r30, r24
    1d4a:	83 89       	ldd	r24, Z+19	; 0x13
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	8c 30       	cpi	r24, 0x0C	; 12
    1d52:	91 05       	cpc	r25, r1
    1d54:	c1 f0       	breq	.+48     	; 0x1d86 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1d56:	8d 30       	cpi	r24, 0x0D	; 13
    1d58:	91 05       	cpc	r25, r1
    1d5a:	1c f4       	brge	.+6      	; 0x1d62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1d5c:	0b 97       	sbiw	r24, 0x0b	; 11
    1d5e:	39 f0       	breq	.+14     	; 0x1d6e <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1d60:	36 c0       	rjmp	.+108    	; 0x1dce <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1d62:	85 31       	cpi	r24, 0x15	; 21
    1d64:	91 05       	cpc	r25, r1
    1d66:	d9 f0       	breq	.+54     	; 0x1d9e <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1d68:	46 97       	sbiw	r24, 0x16	; 22
    1d6a:	29 f1       	breq	.+74     	; 0x1db6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1d6c:	30 c0       	rjmp	.+96     	; 0x1dce <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	80 e4       	ldi	r24, 0x40	; 64
    1d74:	92 e4       	ldi	r25, 0x42	; 66
    1d76:	af e0       	ldi	r26, 0x0F	; 15
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	f9 01       	movw	r30, r18
    1d7c:	84 a3       	std	Z+36, r24	; 0x24
    1d7e:	95 a3       	std	Z+37, r25	; 0x25
    1d80:	a6 a3       	std	Z+38, r26	; 0x26
    1d82:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d84:	30 c0       	rjmp	.+96     	; 0x1de6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1d86:	2b 81       	ldd	r18, Y+3	; 0x03
    1d88:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8a:	80 e8       	ldi	r24, 0x80	; 128
    1d8c:	94 e8       	ldi	r25, 0x84	; 132
    1d8e:	ae e1       	ldi	r26, 0x1E	; 30
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	f9 01       	movw	r30, r18
    1d94:	84 a3       	std	Z+36, r24	; 0x24
    1d96:	95 a3       	std	Z+37, r25	; 0x25
    1d98:	a6 a3       	std	Z+38, r26	; 0x26
    1d9a:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d9c:	24 c0       	rjmp	.+72     	; 0x1de6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	94 e8       	ldi	r25, 0x84	; 132
    1da6:	ae e1       	ldi	r26, 0x1E	; 30
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	f9 01       	movw	r30, r18
    1dac:	84 a3       	std	Z+36, r24	; 0x24
    1dae:	95 a3       	std	Z+37, r25	; 0x25
    1db0:	a6 a3       	std	Z+38, r26	; 0x26
    1db2:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1db4:	18 c0       	rjmp	.+48     	; 0x1de6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1db6:	2b 81       	ldd	r18, Y+3	; 0x03
    1db8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dba:	80 e8       	ldi	r24, 0x80	; 128
    1dbc:	94 e8       	ldi	r25, 0x84	; 132
    1dbe:	ae e1       	ldi	r26, 0x1E	; 30
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	84 a3       	std	Z+36, r24	; 0x24
    1dc6:	95 a3       	std	Z+37, r25	; 0x25
    1dc8:	a6 a3       	std	Z+38, r26	; 0x26
    1dca:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1dcc:	0c c0       	rjmp	.+24     	; 0x1de6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	80 e8       	ldi	r24, 0x80	; 128
    1dd4:	94 e8       	ldi	r25, 0x84	; 132
    1dd6:	ae e1       	ldi	r26, 0x1E	; 30
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	f9 01       	movw	r30, r18
    1ddc:	84 a3       	std	Z+36, r24	; 0x24
    1dde:	95 a3       	std	Z+37, r25	; 0x25
    1de0:	a6 a3       	std	Z+38, r26	; 0x26
    1de2:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1de4:	00 00       	nop
  }
}
    1de6:	00 00       	nop
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	28 97       	sbiw	r28, 0x08	; 8
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	7c 83       	std	Y+4, r23	; 0x04
    1e10:	6b 83       	std	Y+3, r22	; 0x03
    1e12:	2d 83       	std	Y+5, r18	; 0x05
    1e14:	3e 83       	std	Y+6, r19	; 0x06
    1e16:	4f 83       	std	Y+7, r20	; 0x07
    1e18:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	a8 de       	rcall	.-688    	; 0x1b70 <_ZN15Adafruit_SensorC1Ev>
    1e20:	21 e9       	ldi	r18, 0x91	; 145
    1e22:	32 e0       	ldi	r19, 0x02	; 2
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	fc 01       	movw	r30, r24
    1e2a:	31 83       	std	Z+1, r19	; 0x01
    1e2c:	20 83       	st	Z, r18
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	fc 01       	movw	r30, r24
    1e38:	34 83       	std	Z+4, r19	; 0x04
    1e3a:	23 83       	std	Z+3, r18	; 0x03
    1e3c:	29 81       	ldd	r18, Y+1	; 0x01
    1e3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	af 81       	ldd	r26, Y+7	; 0x07
    1e46:	b8 85       	ldd	r27, Y+8	; 0x08
    1e48:	f9 01       	movw	r30, r18
    1e4a:	85 83       	std	Z+5, r24	; 0x05
    1e4c:	96 83       	std	Z+6, r25	; 0x06
    1e4e:	a7 83       	std	Z+7, r26	; 0x07
    1e50:	b0 87       	std	Z+8, r27	; 0x08
    1e52:	00 00       	nop
    1e54:	28 96       	adiw	r28, 0x08	; 8
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1e6c:	1f 92       	push	r1
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	7c 83       	std	Y+4, r23	; 0x04
    1e78:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	44 e2       	ldi	r20, 0x24	; 36
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	0e 94 e5 32 	call	0x65ca	; 0x65ca <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1e8a:	84 e2       	ldi	r24, 0x24	; 36
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	2b 81       	ldd	r18, Y+3	; 0x03
    1e94:	3c 81       	ldd	r19, Y+4	; 0x04
    1e96:	f9 01       	movw	r30, r18
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	85 81       	ldd	r24, Z+5	; 0x05
    1ea8:	96 81       	ldd	r25, Z+6	; 0x06
    1eaa:	a7 81       	ldd	r26, Z+7	; 0x07
    1eac:	b0 85       	ldd	r27, Z+8	; 0x08
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	84 83       	std	Z+4, r24	; 0x04
    1eb6:	95 83       	std	Z+5, r25	; 0x05
    1eb8:	a6 83       	std	Z+6, r26	; 0x06
    1eba:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec0:	8d e0       	ldi	r24, 0x0D	; 13
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e0       	ldi	r26, 0x00	; 0
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	f9 01       	movw	r30, r18
    1eca:	80 87       	std	Z+8, r24	; 0x08
    1ecc:	91 87       	std	Z+9, r25	; 0x09
    1ece:	a2 87       	std	Z+10, r26	; 0x0a
    1ed0:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1ed2:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <millis>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	2b 81       	ldd	r18, Y+3	; 0x03
    1edc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ede:	f9 01       	movw	r30, r18
    1ee0:	80 8b       	std	Z+16, r24	; 0x10
    1ee2:	91 8b       	std	Z+17, r25	; 0x11
    1ee4:	a2 8b       	std	Z+18, r26	; 0x12
    1ee6:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	fc 01       	movw	r30, r24
    1eee:	83 81       	ldd	r24, Z+3	; 0x03
    1ef0:	94 81       	ldd	r25, Z+4	; 0x04
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	d3 d8       	rcall	.-3674   	; 0x109e <_ZN3DHT15readTemperatureEbb>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	f9 01       	movw	r30, r18
    1f02:	84 8b       	std	Z+20, r24	; 0x14
    1f04:	95 8b       	std	Z+21, r25	; 0x15
    1f06:	a6 8b       	std	Z+22, r26	; 0x16
    1f08:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1f20:	1f 92       	push	r1
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	7c 83       	std	Y+4, r23	; 0x04
    1f2c:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	48 e2       	ldi	r20, 0x28	; 40
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	0e 94 e5 32 	call	0x65ca	; 0x65ca <memset>
  // Set sensor name.
  _parent->setName(sensor);
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	fc 01       	movw	r30, r24
    1f44:	83 81       	ldd	r24, Z+3	; 0x03
    1f46:	94 81       	ldd	r25, Z+4	; 0x04
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	8f de       	rcall	.-738    	; 0x1c6e <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1f50:	2b 81       	ldd	r18, Y+3	; 0x03
    1f52:	3c 81       	ldd	r19, Y+4	; 0x04
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	84 87       	std	Z+12, r24	; 0x0c
    1f60:	95 87       	std	Z+13, r25	; 0x0d
    1f62:	a6 87       	std	Z+14, r26	; 0x0e
    1f64:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	85 81       	ldd	r24, Z+5	; 0x05
    1f6e:	96 81       	ldd	r25, Z+6	; 0x06
    1f70:	a7 81       	ldd	r26, Z+7	; 0x07
    1f72:	b0 85       	ldd	r27, Z+8	; 0x08
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	f9 01       	movw	r30, r18
    1f7a:	80 8b       	std	Z+16, r24	; 0x10
    1f7c:	91 8b       	std	Z+17, r25	; 0x11
    1f7e:	a2 8b       	std	Z+18, r26	; 0x12
    1f80:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1f82:	2b 81       	ldd	r18, Y+3	; 0x03
    1f84:	3c 81       	ldd	r19, Y+4	; 0x04
    1f86:	8d e0       	ldi	r24, 0x0D	; 13
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e0       	ldi	r26, 0x00	; 0
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	f9 01       	movw	r30, r18
    1f90:	84 8b       	std	Z+20, r24	; 0x14
    1f92:	95 8b       	std	Z+21, r25	; 0x15
    1f94:	a6 8b       	std	Z+22, r26	; 0x16
    1f96:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	83 81       	ldd	r24, Z+3	; 0x03
    1fa0:	94 81       	ldd	r25, Z+4	; 0x04
    1fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	c3 de       	rcall	.-634    	; 0x1d30 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	fc 01       	movw	r30, r24
    1fb0:	83 81       	ldd	r24, Z+3	; 0x03
    1fb2:	94 81       	ldd	r25, Z+4	; 0x04
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	83 89       	ldd	r24, Z+19	; 0x13
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	8c 30       	cpi	r24, 0x0C	; 12
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	61 f1       	breq	.+88     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1fc2:	8d 30       	cpi	r24, 0x0D	; 13
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	1c f4       	brge	.+6      	; 0x1fce <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    1fc8:	0b 97       	sbiw	r24, 0x0b	; 11
    1fca:	49 f0       	breq	.+18     	; 0x1fde <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    1fcc:	8c c0       	rjmp	.+280    	; 0x20e6 <__DATA_REGION_LENGTH__+0xe6>
    1fce:	85 31       	cpi	r24, 0x15	; 21
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    1fd4:	44 c0       	rjmp	.+136    	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    1fd6:	46 97       	sbiw	r24, 0x16	; 22
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    1fda:	63 c0       	rjmp	.+198    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    1fdc:	84 c0       	rjmp	.+264    	; 0x20e6 <__DATA_REGION_LENGTH__+0xe6>
  case DHT11:
    sensor->max_value = 50.0F;
    1fde:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a8 e4       	ldi	r26, 0x48	; 72
    1fe8:	b2 e4       	ldi	r27, 0x42	; 66
    1fea:	f9 01       	movw	r30, r18
    1fec:	80 8f       	std	Z+24, r24	; 0x18
    1fee:	91 8f       	std	Z+25, r25	; 0x19
    1ff0:	a2 8f       	std	Z+26, r26	; 0x1a
    1ff2:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	14 8e       	std	Z+28, r1	; 0x1c
    1ffc:	15 8e       	std	Z+29, r1	; 0x1d
    1ffe:	16 8e       	std	Z+30, r1	; 0x1e
    2000:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e4       	ldi	r27, 0x40	; 64
    200e:	f9 01       	movw	r30, r18
    2010:	80 a3       	std	Z+32, r24	; 0x20
    2012:	91 a3       	std	Z+33, r25	; 0x21
    2014:	a2 a3       	std	Z+34, r26	; 0x22
    2016:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2018:	7c c0       	rjmp	.+248    	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
  case DHT12:
    sensor->max_value = 60.0F;
    201a:	2b 81       	ldd	r18, Y+3	; 0x03
    201c:	3c 81       	ldd	r19, Y+4	; 0x04
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e7       	ldi	r26, 0x70	; 112
    2024:	b2 e4       	ldi	r27, 0x42	; 66
    2026:	f9 01       	movw	r30, r18
    2028:	80 8f       	std	Z+24, r24	; 0x18
    202a:	91 8f       	std	Z+25, r25	; 0x19
    202c:	a2 8f       	std	Z+26, r26	; 0x1a
    202e:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    2030:	2b 81       	ldd	r18, Y+3	; 0x03
    2032:	3c 81       	ldd	r19, Y+4	; 0x04
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 ea       	ldi	r26, 0xA0	; 160
    203a:	b1 ec       	ldi	r27, 0xC1	; 193
    203c:	f9 01       	movw	r30, r18
    203e:	84 8f       	std	Z+28, r24	; 0x1c
    2040:	95 8f       	std	Z+29, r25	; 0x1d
    2042:	a6 8f       	std	Z+30, r26	; 0x1e
    2044:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	3c 81       	ldd	r19, Y+4	; 0x04
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e0       	ldi	r26, 0x00	; 0
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	f9 01       	movw	r30, r18
    2054:	80 a3       	std	Z+32, r24	; 0x20
    2056:	91 a3       	std	Z+33, r25	; 0x21
    2058:	a2 a3       	std	Z+34, r26	; 0x22
    205a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    205c:	5a c0       	rjmp	.+180    	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
  case DHT21:
    sensor->max_value = 80.0F;
    205e:	2b 81       	ldd	r18, Y+3	; 0x03
    2060:	3c 81       	ldd	r19, Y+4	; 0x04
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 ea       	ldi	r26, 0xA0	; 160
    2068:	b2 e4       	ldi	r27, 0x42	; 66
    206a:	f9 01       	movw	r30, r18
    206c:	80 8f       	std	Z+24, r24	; 0x18
    206e:	91 8f       	std	Z+25, r25	; 0x19
    2070:	a2 8f       	std	Z+26, r26	; 0x1a
    2072:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e2       	ldi	r26, 0x20	; 32
    207e:	b2 ec       	ldi	r27, 0xC2	; 194
    2080:	f9 01       	movw	r30, r18
    2082:	84 8f       	std	Z+28, r24	; 0x1c
    2084:	95 8f       	std	Z+29, r25	; 0x1d
    2086:	a6 8f       	std	Z+30, r26	; 0x1e
    2088:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	3c 81       	ldd	r19, Y+4	; 0x04
    208e:	8d ec       	ldi	r24, 0xCD	; 205
    2090:	9c ec       	ldi	r25, 0xCC	; 204
    2092:	ac ec       	ldi	r26, 0xCC	; 204
    2094:	bd e3       	ldi	r27, 0x3D	; 61
    2096:	f9 01       	movw	r30, r18
    2098:	80 a3       	std	Z+32, r24	; 0x20
    209a:	91 a3       	std	Z+33, r25	; 0x21
    209c:	a2 a3       	std	Z+34, r26	; 0x22
    209e:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    20a0:	38 c0       	rjmp	.+112    	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
  case DHT22:
    sensor->max_value = 125.0F;
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	aa ef       	ldi	r26, 0xFA	; 250
    20ac:	b2 e4       	ldi	r27, 0x42	; 66
    20ae:	f9 01       	movw	r30, r18
    20b0:	80 8f       	std	Z+24, r24	; 0x18
    20b2:	91 8f       	std	Z+25, r25	; 0x19
    20b4:	a2 8f       	std	Z+26, r26	; 0x1a
    20b6:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    20b8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ba:	3c 81       	ldd	r19, Y+4	; 0x04
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e2       	ldi	r26, 0x20	; 32
    20c2:	b2 ec       	ldi	r27, 0xC2	; 194
    20c4:	f9 01       	movw	r30, r18
    20c6:	84 8f       	std	Z+28, r24	; 0x1c
    20c8:	95 8f       	std	Z+29, r25	; 0x1d
    20ca:	a6 8f       	std	Z+30, r26	; 0x1e
    20cc:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    20ce:	2b 81       	ldd	r18, Y+3	; 0x03
    20d0:	3c 81       	ldd	r19, Y+4	; 0x04
    20d2:	8d ec       	ldi	r24, 0xCD	; 205
    20d4:	9c ec       	ldi	r25, 0xCC	; 204
    20d6:	ac ec       	ldi	r26, 0xCC	; 204
    20d8:	bd e3       	ldi	r27, 0x3D	; 61
    20da:	f9 01       	movw	r30, r18
    20dc:	80 a3       	std	Z+32, r24	; 0x20
    20de:	91 a3       	std	Z+33, r25	; 0x21
    20e0:	a2 a3       	std	Z+34, r26	; 0x22
    20e2:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <__DATA_REGION_LENGTH__+0x112>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	fc 01       	movw	r30, r24
    20ec:	10 8e       	std	Z+24, r1	; 0x18
    20ee:	11 8e       	std	Z+25, r1	; 0x19
    20f0:	12 8e       	std	Z+26, r1	; 0x1a
    20f2:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	fc 01       	movw	r30, r24
    20fa:	14 8e       	std	Z+28, r1	; 0x1c
    20fc:	15 8e       	std	Z+29, r1	; 0x1d
    20fe:	16 8e       	std	Z+30, r1	; 0x1e
    2100:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	fc 01       	movw	r30, r24
    2108:	10 a2       	std	Z+32, r1	; 0x20
    210a:	11 a2       	std	Z+33, r1	; 0x21
    210c:	12 a2       	std	Z+34, r1	; 0x22
    210e:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2110:	00 00       	nop
  }
}
    2112:	00 00       	nop
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	28 97       	sbiw	r28, 0x08	; 8
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	7c 83       	std	Y+4, r23	; 0x04
    213c:	6b 83       	std	Y+3, r22	; 0x03
    213e:	2d 83       	std	Y+5, r18	; 0x05
    2140:	3e 83       	std	Y+6, r19	; 0x06
    2142:	4f 83       	std	Y+7, r20	; 0x07
    2144:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	12 dd       	rcall	.-1500   	; 0x1b70 <_ZN15Adafruit_SensorC1Ev>
    214c:	23 e8       	ldi	r18, 0x83	; 131
    214e:	32 e0       	ldi	r19, 0x02	; 2
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	fc 01       	movw	r30, r24
    2156:	31 83       	std	Z+1, r19	; 0x01
    2158:	20 83       	st	Z, r18
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	2b 81       	ldd	r18, Y+3	; 0x03
    2160:	3c 81       	ldd	r19, Y+4	; 0x04
    2162:	fc 01       	movw	r30, r24
    2164:	34 83       	std	Z+4, r19	; 0x04
    2166:	23 83       	std	Z+3, r18	; 0x03
    2168:	29 81       	ldd	r18, Y+1	; 0x01
    216a:	3a 81       	ldd	r19, Y+2	; 0x02
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	af 81       	ldd	r26, Y+7	; 0x07
    2172:	b8 85       	ldd	r27, Y+8	; 0x08
    2174:	f9 01       	movw	r30, r18
    2176:	85 83       	std	Z+5, r24	; 0x05
    2178:	96 83       	std	Z+6, r25	; 0x06
    217a:	a7 83       	std	Z+7, r26	; 0x07
    217c:	b0 87       	std	Z+8, r27	; 0x08
    217e:	00 00       	nop
    2180:	28 96       	adiw	r28, 0x08	; 8
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	00 d0       	rcall	.+0      	; 0x2198 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    2198:	1f 92       	push	r1
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	7c 83       	std	Y+4, r23	; 0x04
    21a4:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	44 e2       	ldi	r20, 0x24	; 36
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	0e 94 e5 32 	call	0x65ca	; 0x65ca <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    21b6:	84 e2       	ldi	r24, 0x24	; 36
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	3c 81       	ldd	r19, Y+4	; 0x04
    21c2:	f9 01       	movw	r30, r18
    21c4:	80 83       	st	Z, r24
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	a2 83       	std	Z+2, r26	; 0x02
    21ca:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	fc 01       	movw	r30, r24
    21d2:	85 81       	ldd	r24, Z+5	; 0x05
    21d4:	96 81       	ldd	r25, Z+6	; 0x06
    21d6:	a7 81       	ldd	r26, Z+7	; 0x07
    21d8:	b0 85       	ldd	r27, Z+8	; 0x08
    21da:	2b 81       	ldd	r18, Y+3	; 0x03
    21dc:	3c 81       	ldd	r19, Y+4	; 0x04
    21de:	f9 01       	movw	r30, r18
    21e0:	84 83       	std	Z+4, r24	; 0x04
    21e2:	95 83       	std	Z+5, r25	; 0x05
    21e4:	a6 83       	std	Z+6, r26	; 0x06
    21e6:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	3c 81       	ldd	r19, Y+4	; 0x04
    21ec:	8c e0       	ldi	r24, 0x0C	; 12
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e0       	ldi	r26, 0x00	; 0
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	f9 01       	movw	r30, r18
    21f6:	80 87       	std	Z+8, r24	; 0x08
    21f8:	91 87       	std	Z+9, r25	; 0x09
    21fa:	a2 87       	std	Z+10, r26	; 0x0a
    21fc:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    21fe:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <millis>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	2b 81       	ldd	r18, Y+3	; 0x03
    2208:	3c 81       	ldd	r19, Y+4	; 0x04
    220a:	f9 01       	movw	r30, r18
    220c:	80 8b       	std	Z+16, r24	; 0x10
    220e:	91 8b       	std	Z+17, r25	; 0x11
    2210:	a2 8b       	std	Z+18, r26	; 0x12
    2212:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	fc 01       	movw	r30, r24
    221a:	83 81       	ldd	r24, Z+3	; 0x03
    221c:	94 81       	ldd	r25, Z+4	; 0x04
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	cb d8       	rcall	.-3690   	; 0x13b8 <_ZN3DHT12readHumidityEb>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	2b 81       	ldd	r18, Y+3	; 0x03
    2228:	3c 81       	ldd	r19, Y+4	; 0x04
    222a:	f9 01       	movw	r30, r18
    222c:	84 8b       	std	Z+20, r24	; 0x14
    222e:	95 8b       	std	Z+21, r25	; 0x15
    2230:	a6 8b       	std	Z+22, r26	; 0x16
    2232:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2234:	81 e0       	ldi	r24, 0x01	; 1
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	00 d0       	rcall	.+0      	; 0x224a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    224a:	1f 92       	push	r1
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	7c 83       	std	Y+4, r23	; 0x04
    2256:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	48 e2       	ldi	r20, 0x28	; 40
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	0e 94 e5 32 	call	0x65ca	; 0x65ca <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	fc 01       	movw	r30, r24
    226e:	83 81       	ldd	r24, Z+3	; 0x03
    2270:	94 81       	ldd	r25, Z+4	; 0x04
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	b9 01       	movw	r22, r18
    2278:	fa dc       	rcall	.-1548   	; 0x1c6e <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	3c 81       	ldd	r19, Y+4	; 0x04
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	f9 01       	movw	r30, r18
    2288:	84 87       	std	Z+12, r24	; 0x0c
    228a:	95 87       	std	Z+13, r25	; 0x0d
    228c:	a6 87       	std	Z+14, r26	; 0x0e
    228e:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	fc 01       	movw	r30, r24
    2296:	85 81       	ldd	r24, Z+5	; 0x05
    2298:	96 81       	ldd	r25, Z+6	; 0x06
    229a:	a7 81       	ldd	r26, Z+7	; 0x07
    229c:	b0 85       	ldd	r27, Z+8	; 0x08
    229e:	2b 81       	ldd	r18, Y+3	; 0x03
    22a0:	3c 81       	ldd	r19, Y+4	; 0x04
    22a2:	f9 01       	movw	r30, r18
    22a4:	80 8b       	std	Z+16, r24	; 0x10
    22a6:	91 8b       	std	Z+17, r25	; 0x11
    22a8:	a2 8b       	std	Z+18, r26	; 0x12
    22aa:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	8c e0       	ldi	r24, 0x0C	; 12
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e0       	ldi	r26, 0x00	; 0
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	f9 01       	movw	r30, r18
    22ba:	84 8b       	std	Z+20, r24	; 0x14
    22bc:	95 8b       	std	Z+21, r25	; 0x15
    22be:	a6 8b       	std	Z+22, r26	; 0x16
    22c0:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	fc 01       	movw	r30, r24
    22c8:	83 81       	ldd	r24, Z+3	; 0x03
    22ca:	94 81       	ldd	r25, Z+4	; 0x04
    22cc:	2b 81       	ldd	r18, Y+3	; 0x03
    22ce:	3c 81       	ldd	r19, Y+4	; 0x04
    22d0:	b9 01       	movw	r22, r18
    22d2:	2e dd       	rcall	.-1444   	; 0x1d30 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	fc 01       	movw	r30, r24
    22da:	83 81       	ldd	r24, Z+3	; 0x03
    22dc:	94 81       	ldd	r25, Z+4	; 0x04
    22de:	fc 01       	movw	r30, r24
    22e0:	83 89       	ldd	r24, Z+19	; 0x13
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	8c 30       	cpi	r24, 0x0C	; 12
    22e8:	91 05       	cpc	r25, r1
    22ea:	81 f1       	breq	.+96     	; 0x234c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    22ec:	8d 30       	cpi	r24, 0x0D	; 13
    22ee:	91 05       	cpc	r25, r1
    22f0:	1c f4       	brge	.+6      	; 0x22f8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    22f2:	0b 97       	sbiw	r24, 0x0b	; 11
    22f4:	49 f0       	breq	.+18     	; 0x2308 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    22f6:	88 c0       	rjmp	.+272    	; 0x2408 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    22f8:	85 31       	cpi	r24, 0x15	; 21
    22fa:	91 05       	cpc	r25, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    22fe:	48 c0       	rjmp	.+144    	; 0x2390 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    2300:	46 97       	sbiw	r24, 0x16	; 22
    2302:	09 f4       	brne	.+2      	; 0x2306 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    2304:	63 c0       	rjmp	.+198    	; 0x23cc <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    2306:	80 c0       	rjmp	.+256    	; 0x2408 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 ea       	ldi	r26, 0xA0	; 160
    2312:	b2 e4       	ldi	r27, 0x42	; 66
    2314:	f9 01       	movw	r30, r18
    2316:	80 8f       	std	Z+24, r24	; 0x18
    2318:	91 8f       	std	Z+25, r25	; 0x19
    231a:	a2 8f       	std	Z+26, r26	; 0x1a
    231c:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    231e:	2b 81       	ldd	r18, Y+3	; 0x03
    2320:	3c 81       	ldd	r19, Y+4	; 0x04
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 ea       	ldi	r26, 0xA0	; 160
    2328:	b1 e4       	ldi	r27, 0x41	; 65
    232a:	f9 01       	movw	r30, r18
    232c:	84 8f       	std	Z+28, r24	; 0x1c
    232e:	95 8f       	std	Z+29, r25	; 0x1d
    2330:	a6 8f       	std	Z+30, r26	; 0x1e
    2332:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2334:	2b 81       	ldd	r18, Y+3	; 0x03
    2336:	3c 81       	ldd	r19, Y+4	; 0x04
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 ea       	ldi	r26, 0xA0	; 160
    233e:	b0 e4       	ldi	r27, 0x40	; 64
    2340:	f9 01       	movw	r30, r18
    2342:	80 a3       	std	Z+32, r24	; 0x20
    2344:	91 a3       	std	Z+33, r25	; 0x21
    2346:	a2 a3       	std	Z+34, r26	; 0x22
    2348:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    234a:	74 c0       	rjmp	.+232    	; 0x2434 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    234c:	2b 81       	ldd	r18, Y+3	; 0x03
    234e:	3c 81       	ldd	r19, Y+4	; 0x04
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	ae eb       	ldi	r26, 0xBE	; 190
    2356:	b2 e4       	ldi	r27, 0x42	; 66
    2358:	f9 01       	movw	r30, r18
    235a:	80 8f       	std	Z+24, r24	; 0x18
    235c:	91 8f       	std	Z+25, r25	; 0x19
    235e:	a2 8f       	std	Z+26, r26	; 0x1a
    2360:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2362:	2b 81       	ldd	r18, Y+3	; 0x03
    2364:	3c 81       	ldd	r19, Y+4	; 0x04
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a0 ea       	ldi	r26, 0xA0	; 160
    236c:	b1 e4       	ldi	r27, 0x41	; 65
    236e:	f9 01       	movw	r30, r18
    2370:	84 8f       	std	Z+28, r24	; 0x1c
    2372:	95 8f       	std	Z+29, r25	; 0x1d
    2374:	a6 8f       	std	Z+30, r26	; 0x1e
    2376:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a0 ea       	ldi	r26, 0xA0	; 160
    2382:	b0 e4       	ldi	r27, 0x40	; 64
    2384:	f9 01       	movw	r30, r18
    2386:	80 a3       	std	Z+32, r24	; 0x20
    2388:	91 a3       	std	Z+33, r25	; 0x21
    238a:	a2 a3       	std	Z+34, r26	; 0x22
    238c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    238e:	52 c0       	rjmp	.+164    	; 0x2434 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    2390:	2b 81       	ldd	r18, Y+3	; 0x03
    2392:	3c 81       	ldd	r19, Y+4	; 0x04
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a8 ec       	ldi	r26, 0xC8	; 200
    239a:	b2 e4       	ldi	r27, 0x42	; 66
    239c:	f9 01       	movw	r30, r18
    239e:	80 8f       	std	Z+24, r24	; 0x18
    23a0:	91 8f       	std	Z+25, r25	; 0x19
    23a2:	a2 8f       	std	Z+26, r26	; 0x1a
    23a4:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	fc 01       	movw	r30, r24
    23ac:	14 8e       	std	Z+28, r1	; 0x1c
    23ae:	15 8e       	std	Z+29, r1	; 0x1d
    23b0:	16 8e       	std	Z+30, r1	; 0x1e
    23b2:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    23b4:	2b 81       	ldd	r18, Y+3	; 0x03
    23b6:	3c 81       	ldd	r19, Y+4	; 0x04
    23b8:	8d ec       	ldi	r24, 0xCD	; 205
    23ba:	9c ec       	ldi	r25, 0xCC	; 204
    23bc:	ac ec       	ldi	r26, 0xCC	; 204
    23be:	bd e3       	ldi	r27, 0x3D	; 61
    23c0:	f9 01       	movw	r30, r18
    23c2:	80 a3       	std	Z+32, r24	; 0x20
    23c4:	91 a3       	std	Z+33, r25	; 0x21
    23c6:	a2 a3       	std	Z+34, r26	; 0x22
    23c8:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    23ca:	34 c0       	rjmp	.+104    	; 0x2434 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a8 ec       	ldi	r26, 0xC8	; 200
    23d6:	b2 e4       	ldi	r27, 0x42	; 66
    23d8:	f9 01       	movw	r30, r18
    23da:	80 8f       	std	Z+24, r24	; 0x18
    23dc:	91 8f       	std	Z+25, r25	; 0x19
    23de:	a2 8f       	std	Z+26, r26	; 0x1a
    23e0:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	fc 01       	movw	r30, r24
    23e8:	14 8e       	std	Z+28, r1	; 0x1c
    23ea:	15 8e       	std	Z+29, r1	; 0x1d
    23ec:	16 8e       	std	Z+30, r1	; 0x1e
    23ee:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    23f0:	2b 81       	ldd	r18, Y+3	; 0x03
    23f2:	3c 81       	ldd	r19, Y+4	; 0x04
    23f4:	8d ec       	ldi	r24, 0xCD	; 205
    23f6:	9c ec       	ldi	r25, 0xCC	; 204
    23f8:	ac ec       	ldi	r26, 0xCC	; 204
    23fa:	bd e3       	ldi	r27, 0x3D	; 61
    23fc:	f9 01       	movw	r30, r18
    23fe:	80 a3       	std	Z+32, r24	; 0x20
    2400:	91 a3       	std	Z+33, r25	; 0x21
    2402:	a2 a3       	std	Z+34, r26	; 0x22
    2404:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2406:	16 c0       	rjmp	.+44     	; 0x2434 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	fc 01       	movw	r30, r24
    240e:	10 8e       	std	Z+24, r1	; 0x18
    2410:	11 8e       	std	Z+25, r1	; 0x19
    2412:	12 8e       	std	Z+26, r1	; 0x1a
    2414:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	fc 01       	movw	r30, r24
    241c:	14 8e       	std	Z+28, r1	; 0x1c
    241e:	15 8e       	std	Z+29, r1	; 0x1d
    2420:	16 8e       	std	Z+30, r1	; 0x1e
    2422:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	fc 01       	movw	r30, r24
    242a:	10 a2       	std	Z+32, r1	; 0x20
    242c:	11 a2       	std	Z+33, r1	; 0x21
    242e:	12 a2       	std	Z+34, r1	; 0x22
    2430:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2432:	00 00       	nop
  }
}
    2434:	00 00       	nop
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	08 95       	ret

00002444 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2444:	0f 93       	push	r16
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	28 97       	sbiw	r28, 0x08	; 8
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	4b 83       	std	Y+3, r20	; 0x03
    2460:	5c 83       	std	Y+4, r21	; 0x04
    2462:	6d 83       	std	Y+5, r22	; 0x05
    2464:	7e 83       	std	Y+6, r23	; 0x06
    2466:	2f 83       	std	Y+7, r18	; 0x07
    2468:	08 87       	std	Y+8, r16	; 0x08
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	ad 81       	ldd	r26, Y+5	; 0x05
    2470:	be 81       	ldd	r27, Y+6	; 0x06
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	08 85       	ldd	r16, Y+8	; 0x08
    2478:	2f 81       	ldd	r18, Y+7	; 0x07
    247a:	ac 01       	movw	r20, r24
    247c:	bd 01       	movw	r22, r26
    247e:	cf 01       	movw	r24, r30
    2480:	0b d0       	rcall	.+22     	; 0x2498 <_ZN11SPISettings16init_MightInlineEmhh>
    2482:	00 00       	nop
    2484:	28 96       	adiw	r28, 0x08	; 8
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <_ZN11SPISettings16init_MightInlineEmhh>:
    2498:	0f 93       	push	r16
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	65 97       	sbiw	r28, 0x15	; 21
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	9f 87       	std	Y+15, r25	; 0x0f
    24b0:	8e 87       	std	Y+14, r24	; 0x0e
    24b2:	48 8b       	std	Y+16, r20	; 0x10
    24b4:	59 8b       	std	Y+17, r21	; 0x11
    24b6:	6a 8b       	std	Y+18, r22	; 0x12
    24b8:	7b 8b       	std	Y+19, r23	; 0x13
    24ba:	2c 8b       	std	Y+20, r18	; 0x14
    24bc:	0d 8b       	std	Y+21, r16	; 0x15
    24be:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	88 89       	ldd	r24, Y+16	; 0x10
    24c8:	99 89       	ldd	r25, Y+17	; 0x11
    24ca:	aa 89       	ldd	r26, Y+18	; 0x12
    24cc:	bb 89       	ldd	r27, Y+19	; 0x13
    24ce:	8b 83       	std	Y+3, r24	; 0x03
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	ad 83       	std	Y+5, r26	; 0x05
    24d4:	be 83       	std	Y+6, r27	; 0x06
    24d6:	8c 89       	ldd	r24, Y+20	; 0x14
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	8d 89       	ldd	r24, Y+21	; 0x15
    24dc:	88 87       	std	Y+8, r24	; 0x08
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	92 e1       	ldi	r25, 0x12	; 18
    24e2:	aa e7       	ldi	r26, 0x7A	; 122
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	89 87       	std	Y+9, r24	; 0x09
    24e8:	9a 87       	std	Y+10, r25	; 0x0a
    24ea:	ab 87       	std	Y+11, r26	; 0x0b
    24ec:	bc 87       	std	Y+12, r27	; 0x0c
    24ee:	1d 86       	std	Y+13, r1	; 0x0d
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	86 30       	cpi	r24, 0x06	; 6
    24f4:	e8 f4       	brcc	.+58     	; 0x2530 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	3c 81       	ldd	r19, Y+4	; 0x04
    24fa:	4d 81       	ldd	r20, Y+5	; 0x05
    24fc:	5e 81       	ldd	r21, Y+6	; 0x06
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	ab 85       	ldd	r26, Y+11	; 0x0b
    2504:	bc 85       	ldd	r27, Y+12	; 0x0c
    2506:	28 17       	cp	r18, r24
    2508:	39 07       	cpc	r19, r25
    250a:	4a 07       	cpc	r20, r26
    250c:	5b 07       	cpc	r21, r27
    250e:	80 f4       	brcc	.+32     	; 0x2530 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	ab 85       	ldd	r26, Y+11	; 0x0b
    2516:	bc 85       	ldd	r27, Y+12	; 0x0c
    2518:	b6 95       	lsr	r27
    251a:	a7 95       	ror	r26
    251c:	97 95       	ror	r25
    251e:	87 95       	ror	r24
    2520:	89 87       	std	Y+9, r24	; 0x09
    2522:	9a 87       	std	Y+10, r25	; 0x0a
    2524:	ab 87       	std	Y+11, r26	; 0x0b
    2526:	bc 87       	std	Y+12, r27	; 0x0c
    2528:	8d 85       	ldd	r24, Y+13	; 0x0d
    252a:	8f 5f       	subi	r24, 0xFF	; 255
    252c:	8d 87       	std	Y+13, r24	; 0x0d
    252e:	e0 cf       	rjmp	.-64     	; 0x24f0 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2530:	8d 85       	ldd	r24, Y+13	; 0x0d
    2532:	86 30       	cpi	r24, 0x06	; 6
    2534:	11 f4       	brne	.+4      	; 0x253a <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2536:	87 e0       	ldi	r24, 0x07	; 7
    2538:	8d 87       	std	Y+13, r24	; 0x0d
    253a:	9d 85       	ldd	r25, Y+13	; 0x0d
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	89 27       	eor	r24, r25
    2540:	8d 87       	std	Y+13, r24	; 0x0d
    2542:	8f 81       	ldd	r24, Y+7	; 0x07
    2544:	88 23       	and	r24, r24
    2546:	11 f4       	brne	.+4      	; 0x254c <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    2548:	80 e7       	ldi	r24, 0x70	; 112
    254a:	01 c0       	rjmp	.+2      	; 0x254e <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    254c:	80 e5       	ldi	r24, 0x50	; 80
    254e:	98 85       	ldd	r25, Y+8	; 0x08
    2550:	9c 70       	andi	r25, 0x0C	; 12
    2552:	29 2f       	mov	r18, r25
    2554:	28 2b       	or	r18, r24
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	95 95       	asr	r25
    255e:	87 95       	ror	r24
    2560:	83 70       	andi	r24, 0x03	; 3
    2562:	82 2b       	or	r24, r18
    2564:	28 2f       	mov	r18, r24
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	fc 01       	movw	r30, r24
    256c:	20 83       	st	Z, r18
    256e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2570:	28 2f       	mov	r18, r24
    2572:	21 70       	andi	r18, 0x01	; 1
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	fc 01       	movw	r30, r24
    257a:	21 83       	std	Z+1, r18	; 0x01
    257c:	00 00       	nop
    257e:	65 96       	adiw	r28, 0x15	; 21
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	0f 91       	pop	r16
    2590:	08 95       	ret

00002592 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	00 d0       	rcall	.+0      	; 0x2598 <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	9b 83       	std	Y+3, r25	; 0x03
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN8SPIClass13interruptModeE>
    25a4:	88 23       	and	r24, r24
    25a6:	31 f1       	breq	.+76     	; 0x25f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    25a8:	8f e5       	ldi	r24, 0x5F	; 95
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	fc 01       	movw	r30, r24
    25ae:	80 81       	ld	r24, Z
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	f8 94       	cli
    25b4:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN8SPIClass13interruptModeE>
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	c9 f4       	brne	.+50     	; 0x25ee <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    25bc:	8d e3       	ldi	r24, 0x3D	; 61
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	fc 01       	movw	r30, r24
    25c2:	80 81       	ld	r24, Z
    25c4:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <_ZN8SPIClass13interruptSaveE>
    25c8:	8d e3       	ldi	r24, 0x3D	; 61
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	2d e3       	ldi	r18, 0x3D	; 61
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	f9 01       	movw	r30, r18
    25d2:	20 81       	ld	r18, Z
    25d4:	32 2f       	mov	r19, r18
    25d6:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <_ZN8SPIClass13interruptMaskE>
    25da:	20 95       	com	r18
    25dc:	23 23       	and	r18, r19
    25de:	fc 01       	movw	r30, r24
    25e0:	20 83       	st	Z, r18
    25e2:	8f e5       	ldi	r24, 0x5F	; 95
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	29 81       	ldd	r18, Y+1	; 0x01
    25e8:	fc 01       	movw	r30, r24
    25ea:	20 83       	st	Z, r18
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <_ZN8SPIClass13interruptSaveE>
    25f4:	8c e4       	ldi	r24, 0x4C	; 76
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	2a 81       	ldd	r18, Y+2	; 0x02
    25fa:	fc 01       	movw	r30, r24
    25fc:	20 83       	st	Z, r18
    25fe:	8d e4       	ldi	r24, 0x4D	; 77
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	2b 81       	ldd	r18, Y+3	; 0x03
    2604:	fc 01       	movw	r30, r24
    2606:	20 83       	st	Z, r18
    2608:	00 00       	nop
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	08 95       	ret

00002616 <_ZN8SPIClass8transferEh>:
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	1f 92       	push	r1
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	8e e4       	ldi	r24, 0x4E	; 78
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	29 81       	ldd	r18, Y+1	; 0x01
    2628:	fc 01       	movw	r30, r24
    262a:	20 83       	st	Z, r18
    262c:	00 00       	nop
    262e:	8d e4       	ldi	r24, 0x4D	; 77
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	fc 01       	movw	r30, r24
    2634:	80 81       	ld	r24, Z
    2636:	80 95       	com	r24
    2638:	88 1f       	adc	r24, r24
    263a:	88 27       	eor	r24, r24
    263c:	88 1f       	adc	r24, r24
    263e:	88 23       	and	r24, r24
    2640:	09 f0       	breq	.+2      	; 0x2644 <_ZN8SPIClass8transferEh+0x2e>
    2642:	f5 cf       	rjmp	.-22     	; 0x262e <_ZN8SPIClass8transferEh+0x18>
    2644:	8e e4       	ldi	r24, 0x4E	; 78
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
    264c:	0f 90       	pop	r0
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	08 95       	ret

00002654 <_ZN8SPIClass14endTransactionEv>:
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	1f 92       	push	r1
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN8SPIClass13interruptModeE>
    2662:	88 23       	and	r24, r24
    2664:	e1 f0       	breq	.+56     	; 0x269e <_ZN8SPIClass14endTransactionEv+0x4a>
    2666:	8f e5       	ldi	r24, 0x5F	; 95
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	fc 01       	movw	r30, r24
    266c:	80 81       	ld	r24, Z
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	f8 94       	cli
    2672:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN8SPIClass13interruptModeE>
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	61 f4       	brne	.+24     	; 0x2692 <_ZN8SPIClass14endTransactionEv+0x3e>
    267a:	8d e3       	ldi	r24, 0x3D	; 61
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	20 91 d1 03 	lds	r18, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptSaveE>
    2682:	fc 01       	movw	r30, r24
    2684:	20 83       	st	Z, r18
    2686:	8f e5       	ldi	r24, 0x5F	; 95
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	29 81       	ldd	r18, Y+1	; 0x01
    268c:	fc 01       	movw	r30, r24
    268e:	20 83       	st	Z, r18
    2690:	06 c0       	rjmp	.+12     	; 0x269e <_ZN8SPIClass14endTransactionEv+0x4a>
    2692:	8f e5       	ldi	r24, 0x5F	; 95
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	20 91 d1 03 	lds	r18, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptSaveE>
    269a:	fc 01       	movw	r30, r24
    269c:	20 83       	st	Z, r18
    269e:	00 00       	nop
    26a0:	0f 90       	pop	r0
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	08 95       	ret

000026a8 <_ZN7MFRC522C1Ehh>:
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <_ZN7MFRC522C1Ehh+0x6>
    26ae:	1f 92       	push	r1
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	6b 83       	std	Y+3, r22	; 0x03
    26ba:	4c 83       	std	Y+4, r20	; 0x04
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	2b 81       	ldd	r18, Y+3	; 0x03
    26c2:	fc 01       	movw	r30, r24
    26c4:	24 87       	std	Z+12, r18	; 0x0c
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	2c 81       	ldd	r18, Y+4	; 0x04
    26cc:	fc 01       	movw	r30, r24
    26ce:	25 87       	std	Z+13, r18	; 0x0d
    26d0:	00 00       	nop
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    26e0:	0f 93       	push	r16
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
    26f2:	6d 83       	std	Y+5, r22	; 0x05
    26f4:	4e 83       	std	Y+6, r20	; 0x06
    26f6:	00 e0       	ldi	r16, 0x00	; 0
    26f8:	21 e0       	ldi	r18, 0x01	; 1
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	ba 01       	movw	r22, r20
    2700:	ce 01       	movw	r24, r28
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	9f de       	rcall	.-706    	; 0x2444 <_ZN11SPISettingsC1Emhh>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	43 df       	rcall	.-378    	; 0x2592 <_ZN8SPIClass16beginTransactionE11SPISettings>
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	fc 01       	movw	r30, r24
    2712:	84 85       	ldd	r24, Z+12	; 0x0c
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	8e 77       	andi	r24, 0x7E	; 126
    271e:	7b df       	rcall	.-266    	; 0x2616 <_ZN8SPIClass8transferEh>
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	79 df       	rcall	.-270    	; 0x2616 <_ZN8SPIClass8transferEh>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	fc 01       	movw	r30, r24
    272a:	84 85       	ldd	r24, Z+12	; 0x0c
    272c:	61 e0       	ldi	r22, 0x01	; 1
    272e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    2732:	90 df       	rcall	.-224    	; 0x2654 <_ZN8SPIClass14endTransactionEv>
    2734:	00 00       	nop
    2736:	26 96       	adiw	r28, 0x06	; 6
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	0f 91       	pop	r16
    2748:	08 95       	ret

0000274a <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    274a:	0f 93       	push	r16
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	29 97       	sbiw	r28, 0x09	; 9
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	9d 83       	std	Y+5, r25	; 0x05
    2762:	8c 83       	std	Y+4, r24	; 0x04
    2764:	6e 83       	std	Y+6, r22	; 0x06
    2766:	4f 83       	std	Y+7, r20	; 0x07
    2768:	39 87       	std	Y+9, r19	; 0x09
    276a:	28 87       	std	Y+8, r18	; 0x08
    276c:	ce 01       	movw	r24, r28
    276e:	02 96       	adiw	r24, 0x02	; 2
    2770:	00 e0       	ldi	r16, 0x00	; 0
    2772:	21 e0       	ldi	r18, 0x01	; 1
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	ba 01       	movw	r22, r20
    277a:	64 de       	rcall	.-824    	; 0x2444 <_ZN11SPISettingsC1Emhh>
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	08 df       	rcall	.-496    	; 0x2592 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2782:	8c 81       	ldd	r24, Y+4	; 0x04
    2784:	9d 81       	ldd	r25, Y+5	; 0x05
    2786:	fc 01       	movw	r30, r24
    2788:	84 85       	ldd	r24, Z+12	; 0x0c
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    2790:	8e 81       	ldd	r24, Y+6	; 0x06
    2792:	8e 77       	andi	r24, 0x7E	; 126
    2794:	40 df       	rcall	.-384    	; 0x2616 <_ZN8SPIClass8transferEh>
    2796:	19 82       	std	Y+1, r1	; 0x01
    2798:	99 81       	ldd	r25, Y+1	; 0x01
    279a:	8f 81       	ldd	r24, Y+7	; 0x07
    279c:	98 17       	cp	r25, r24
    279e:	70 f4       	brcc	.+28     	; 0x27bc <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	28 85       	ldd	r18, Y+8	; 0x08
    27a8:	39 85       	ldd	r19, Y+9	; 0x09
    27aa:	82 0f       	add	r24, r18
    27ac:	93 1f       	adc	r25, r19
    27ae:	fc 01       	movw	r30, r24
    27b0:	80 81       	ld	r24, Z
    27b2:	31 df       	rcall	.-414    	; 0x2616 <_ZN8SPIClass8transferEh>
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	ee cf       	rjmp	.-36     	; 0x2798 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	fc 01       	movw	r30, r24
    27c2:	84 85       	ldd	r24, Z+12	; 0x0c
    27c4:	61 e0       	ldi	r22, 0x01	; 1
    27c6:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    27ca:	44 df       	rcall	.-376    	; 0x2654 <_ZN8SPIClass14endTransactionEv>
    27cc:	00 00       	nop
    27ce:	29 96       	adiw	r28, 0x09	; 9
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    27e2:	0f 93       	push	r16
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	9d 83       	std	Y+5, r25	; 0x05
    27f2:	8c 83       	std	Y+4, r24	; 0x04
    27f4:	6e 83       	std	Y+6, r22	; 0x06
    27f6:	ce 01       	movw	r24, r28
    27f8:	02 96       	adiw	r24, 0x02	; 2
    27fa:	00 e0       	ldi	r16, 0x00	; 0
    27fc:	21 e0       	ldi	r18, 0x01	; 1
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	ba 01       	movw	r22, r20
    2804:	1f de       	rcall	.-962    	; 0x2444 <_ZN11SPISettingsC1Emhh>
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	c3 de       	rcall	.-634    	; 0x2592 <_ZN8SPIClass16beginTransactionE11SPISettings>
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	9d 81       	ldd	r25, Y+5	; 0x05
    2810:	fc 01       	movw	r30, r24
    2812:	84 85       	ldd	r24, Z+12	; 0x0c
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    281a:	8e 81       	ldd	r24, Y+6	; 0x06
    281c:	8e 77       	andi	r24, 0x7E	; 126
    281e:	80 68       	ori	r24, 0x80	; 128
    2820:	fa de       	rcall	.-524    	; 0x2616 <_ZN8SPIClass8transferEh>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	f8 de       	rcall	.-528    	; 0x2616 <_ZN8SPIClass8transferEh>
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	9d 81       	ldd	r25, Y+5	; 0x05
    282c:	fc 01       	movw	r30, r24
    282e:	84 85       	ldd	r24, Z+12	; 0x0c
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    2836:	0e df       	rcall	.-484    	; 0x2654 <_ZN8SPIClass14endTransactionEv>
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	26 96       	adiw	r28, 0x06	; 6
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	0f 91       	pop	r16
    284c:	08 95       	ret

0000284e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	2e 97       	sbiw	r28, 0x0e	; 14
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	99 87       	std	Y+9, r25	; 0x09
    2868:	88 87       	std	Y+8, r24	; 0x08
    286a:	6a 87       	std	Y+10, r22	; 0x0a
    286c:	4b 87       	std	Y+11, r20	; 0x0b
    286e:	3d 87       	std	Y+13, r19	; 0x0d
    2870:	2c 87       	std	Y+12, r18	; 0x0c
    2872:	0e 87       	std	Y+14, r16	; 0x0e
    2874:	8b 85       	ldd	r24, Y+11	; 0x0b
    2876:	88 23       	and	r24, r24
    2878:	09 f4       	brne	.+2      	; 0x287c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    287a:	7e c0       	rjmp	.+252    	; 0x2978 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    287c:	8a 85       	ldd	r24, Y+10	; 0x0a
    287e:	8e 77       	andi	r24, 0x7E	; 126
    2880:	80 68       	ori	r24, 0x80	; 128
    2882:	8c 83       	std	Y+4, r24	; 0x04
    2884:	19 82       	std	Y+1, r1	; 0x01
    2886:	ce 01       	movw	r24, r28
    2888:	06 96       	adiw	r24, 0x06	; 6
    288a:	00 e0       	ldi	r16, 0x00	; 0
    288c:	21 e0       	ldi	r18, 0x01	; 1
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	ba 01       	movw	r22, r20
    2894:	d7 dd       	rcall	.-1106   	; 0x2444 <_ZN11SPISettingsC1Emhh>
    2896:	8e 81       	ldd	r24, Y+6	; 0x06
    2898:	9f 81       	ldd	r25, Y+7	; 0x07
    289a:	7b de       	rcall	.-778    	; 0x2592 <_ZN8SPIClass16beginTransactionE11SPISettings>
    289c:	88 85       	ldd	r24, Y+8	; 0x08
    289e:	99 85       	ldd	r25, Y+9	; 0x09
    28a0:	fc 01       	movw	r30, r24
    28a2:	84 85       	ldd	r24, Z+12	; 0x0c
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    28aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ac:	81 50       	subi	r24, 0x01	; 1
    28ae:	8b 87       	std	Y+11, r24	; 0x0b
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	b1 de       	rcall	.-670    	; 0x2616 <_ZN8SPIClass8transferEh>
    28b4:	99 81       	ldd	r25, Y+1	; 0x01
    28b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28b8:	98 17       	cp	r25, r24
    28ba:	08 f0       	brcs	.+2      	; 0x28be <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    28bc:	48 c0       	rjmp	.+144    	; 0x294e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 23       	and	r24, r24
    28c2:	a9 f5       	brne	.+106    	; 0x292e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    28c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    28c6:	88 23       	and	r24, r24
    28c8:	91 f1       	breq	.+100    	; 0x292e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    28ca:	1a 82       	std	Y+2, r1	; 0x02
    28cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	88 30       	cpi	r24, 0x08	; 8
    28d4:	90 f4       	brcc	.+36     	; 0x28fa <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	2a 95       	dec	r18
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    28ea:	98 2f       	mov	r25, r24
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	89 2b       	or	r24, r25
    28f0:	8a 83       	std	Y+2, r24	; 0x02
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	8b 83       	std	Y+3, r24	; 0x03
    28f8:	eb cf       	rjmp	.-42     	; 0x28d0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    28fa:	8c 81       	ldd	r24, Y+4	; 0x04
    28fc:	8c de       	rcall	.-744    	; 0x2616 <_ZN8SPIClass8transferEh>
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	2c 85       	ldd	r18, Y+12	; 0x0c
    2908:	3d 85       	ldd	r19, Y+13	; 0x0d
    290a:	82 0f       	add	r24, r18
    290c:	93 1f       	adc	r25, r19
    290e:	fc 01       	movw	r30, r24
    2910:	80 81       	ld	r24, Z
    2912:	98 2f       	mov	r25, r24
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	80 95       	com	r24
    2918:	89 23       	and	r24, r25
    291a:	2d 81       	ldd	r18, Y+5	; 0x05
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	92 23       	and	r25, r18
    2920:	89 2b       	or	r24, r25
    2922:	28 2f       	mov	r18, r24
    2924:	8c 85       	ldd	r24, Y+12	; 0x0c
    2926:	9d 85       	ldd	r25, Y+13	; 0x0d
    2928:	fc 01       	movw	r30, r24
    292a:	20 83       	st	Z, r18
    292c:	0c c0       	rjmp	.+24     	; 0x2946 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	2c 85       	ldd	r18, Y+12	; 0x0c
    2936:	3d 85       	ldd	r19, Y+13	; 0x0d
    2938:	89 01       	movw	r16, r18
    293a:	08 0f       	add	r16, r24
    293c:	19 1f       	adc	r17, r25
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	6a de       	rcall	.-812    	; 0x2616 <_ZN8SPIClass8transferEh>
    2942:	f8 01       	movw	r30, r16
    2944:	80 83       	st	Z, r24
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	b3 cf       	rjmp	.-154    	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	2c 85       	ldd	r18, Y+12	; 0x0c
    2956:	3d 85       	ldd	r19, Y+13	; 0x0d
    2958:	89 01       	movw	r16, r18
    295a:	08 0f       	add	r16, r24
    295c:	19 1f       	adc	r17, r25
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	5a de       	rcall	.-844    	; 0x2616 <_ZN8SPIClass8transferEh>
    2962:	f8 01       	movw	r30, r16
    2964:	80 83       	st	Z, r24
    2966:	88 85       	ldd	r24, Y+8	; 0x08
    2968:	99 85       	ldd	r25, Y+9	; 0x09
    296a:	fc 01       	movw	r30, r24
    296c:	84 85       	ldd	r24, Z+12	; 0x0c
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    2974:	6f de       	rcall	.-802    	; 0x2654 <_ZN8SPIClass14endTransactionEv>
    2976:	01 c0       	rjmp	.+2      	; 0x297a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    2978:	00 00       	nop
    297a:	2e 96       	adiw	r28, 0x0e	; 14
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	00 d0       	rcall	.+0      	; 0x2996 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    2996:	1f 92       	push	r1
    2998:	1f 92       	push	r1
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	9b 83       	std	Y+3, r25	; 0x03
    29a0:	8a 83       	std	Y+2, r24	; 0x02
    29a2:	6c 83       	std	Y+4, r22	; 0x04
    29a4:	4d 83       	std	Y+5, r20	; 0x05
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	6c 81       	ldd	r22, Y+4	; 0x04
    29ac:	1a df       	rcall	.-460    	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	99 81       	ldd	r25, Y+1	; 0x01
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	29 2f       	mov	r18, r25
    29b6:	28 2b       	or	r18, r24
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	9b 81       	ldd	r25, Y+3	; 0x03
    29bc:	42 2f       	mov	r20, r18
    29be:	6c 81       	ldd	r22, Y+4	; 0x04
    29c0:	8f de       	rcall	.-738    	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    29c2:	00 00       	nop
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	00 d0       	rcall	.+0      	; 0x29da <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    29da:	1f 92       	push	r1
    29dc:	1f 92       	push	r1
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	6c 83       	std	Y+4, r22	; 0x04
    29e8:	4d 83       	std	Y+5, r20	; 0x05
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	9b 81       	ldd	r25, Y+3	; 0x03
    29ee:	6c 81       	ldd	r22, Y+4	; 0x04
    29f0:	f8 de       	rcall	.-528    	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	98 2f       	mov	r25, r24
    29f8:	90 95       	com	r25
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	89 23       	and	r24, r25
    29fe:	28 2f       	mov	r18, r24
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	42 2f       	mov	r20, r18
    2a06:	6c 81       	ldd	r22, Y+4	; 0x04
    2a08:	6b de       	rcall	.-810    	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a0a:	00 00       	nop
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	08 95       	ret

00002a1c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	2a 97       	sbiw	r28, 0x0a	; 10
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	9d 83       	std	Y+5, r25	; 0x05
    2a36:	8c 83       	std	Y+4, r24	; 0x04
    2a38:	7f 83       	std	Y+7, r23	; 0x07
    2a3a:	6e 83       	std	Y+6, r22	; 0x06
    2a3c:	48 87       	std	Y+8, r20	; 0x08
    2a3e:	3a 87       	std	Y+10, r19	; 0x0a
    2a40:	29 87       	std	Y+9, r18	; 0x09
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	9d 81       	ldd	r25, Y+5	; 0x05
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	62 e0       	ldi	r22, 0x02	; 2
    2a4a:	4a de       	rcall	.-876    	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	44 e0       	ldi	r20, 0x04	; 4
    2a52:	6a e0       	ldi	r22, 0x0A	; 10
    2a54:	45 de       	rcall	.-886    	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a56:	8c 81       	ldd	r24, Y+4	; 0x04
    2a58:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	64 e1       	ldi	r22, 0x14	; 20
    2a5e:	98 df       	rcall	.-208    	; 0x2990 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2a60:	2e 81       	ldd	r18, Y+6	; 0x06
    2a62:	3f 81       	ldd	r19, Y+7	; 0x07
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	9d 81       	ldd	r25, Y+5	; 0x05
    2a68:	48 85       	ldd	r20, Y+8	; 0x08
    2a6a:	62 e1       	ldi	r22, 0x12	; 18
    2a6c:	6e de       	rcall	.-804    	; 0x274a <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a70:	9d 81       	ldd	r25, Y+5	; 0x05
    2a72:	43 e0       	ldi	r20, 0x03	; 3
    2a74:	62 e0       	ldi	r22, 0x02	; 2
    2a76:	34 de       	rcall	.-920    	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a78:	88 e8       	ldi	r24, 0x88	; 136
    2a7a:	93 e1       	ldi	r25, 0x13	; 19
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	9d 81       	ldd	r25, Y+5	; 0x05
    2a84:	6a e0       	ldi	r22, 0x0A	; 10
    2a86:	ad de       	rcall	.-678    	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2a88:	8b 83       	std	Y+3, r24	; 0x03
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	88 2f       	mov	r24, r24
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	84 70       	andi	r24, 0x04	; 4
    2a92:	99 27       	eor	r25, r25
    2a94:	89 2b       	or	r24, r25
    2a96:	79 f4       	brne	.+30     	; 0x2ab6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	21 e0       	ldi	r18, 0x01	; 1
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	89 2b       	or	r24, r25
    2aaa:	09 f0       	breq	.+2      	; 0x2aae <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	22 23       	and	r18, r18
    2ab0:	39 f3       	breq	.-50     	; 0x2a80 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	1b c0       	rjmp	.+54     	; 0x2aec <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    2ab6:	00 00       	nop
    2ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aba:	9d 81       	ldd	r25, Y+5	; 0x05
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	0f de       	rcall	.-994    	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	64 e4       	ldi	r22, 0x44	; 68
    2ac8:	8c de       	rcall	.-744    	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2aca:	28 2f       	mov	r18, r24
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	20 83       	st	Z, r18
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	8c 01       	movw	r16, r24
    2ada:	0f 5f       	subi	r16, 0xFF	; 255
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae2:	62 e4       	ldi	r22, 0x42	; 66
    2ae4:	7e de       	rcall	.-772    	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	80 83       	st	Z, r24
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	2a 96       	adiw	r28, 0x0a	; 10
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <_ZN7MFRC5228PCD_InitEv>:
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	1f 92       	push	r1
    2b08:	1f 92       	push	r1
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	fc 01       	movw	r30, r24
    2b18:	84 85       	ldd	r24, Z+12	; 0x0c
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	fc 01       	movw	r30, r24
    2b26:	84 85       	ldd	r24, Z+12	; 0x0c
    2b28:	61 e0       	ldi	r22, 0x01	; 1
    2b2a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	fc 01       	movw	r30, r24
    2b34:	85 85       	ldd	r24, Z+13	; 0x0d
    2b36:	61 e0       	ldi	r22, 0x01	; 1
    2b38:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	fc 01       	movw	r30, r24
    2b42:	85 85       	ldd	r24, Z+13	; 0x0d
    2b44:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <digitalRead>
    2b48:	21 e0       	ldi	r18, 0x01	; 1
    2b4a:	89 2b       	or	r24, r25
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <_ZN7MFRC5228PCD_InitEv+0x4e>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	22 23       	and	r18, r18
    2b52:	71 f0       	breq	.+28     	; 0x2b70 <_ZN7MFRC5228PCD_InitEv+0x6e>
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	fc 01       	movw	r30, r24
    2b5a:	85 85       	ldd	r24, Z+13	; 0x0d
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    2b62:	62 e3       	ldi	r22, 0x32	; 50
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <_ZN7MFRC5228PCD_InitEv+0x74>
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	27 d0       	rcall	.+78     	; 0x2bc4 <_ZN7MFRC5229PCD_ResetEv>
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	40 e8       	ldi	r20, 0x80	; 128
    2b7c:	64 e5       	ldi	r22, 0x54	; 84
    2b7e:	b0 dd       	rcall	.-1184   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	49 ea       	ldi	r20, 0xA9	; 169
    2b86:	66 e5       	ldi	r22, 0x56	; 86
    2b88:	ab dd       	rcall	.-1194   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	43 e0       	ldi	r20, 0x03	; 3
    2b90:	68 e5       	ldi	r22, 0x58	; 88
    2b92:	a6 dd       	rcall	.-1204   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	9a 81       	ldd	r25, Y+2	; 0x02
    2b98:	48 ee       	ldi	r20, 0xE8	; 232
    2b9a:	6a e5       	ldi	r22, 0x5A	; 90
    2b9c:	a1 dd       	rcall	.-1214   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	40 e4       	ldi	r20, 0x40	; 64
    2ba4:	6a e2       	ldi	r22, 0x2A	; 42
    2ba6:	9c dd       	rcall	.-1224   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	4d e3       	ldi	r20, 0x3D	; 61
    2bae:	62 e2       	ldi	r22, 0x22	; 34
    2bb0:	97 dd       	rcall	.-1234   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	2e d0       	rcall	.+92     	; 0x2c14 <_ZN7MFRC52213PCD_AntennaOnEv>
    2bb8:	00 00       	nop
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	08 95       	ret

00002bc4 <_ZN7MFRC5229PCD_ResetEv>:
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	1f 92       	push	r1
    2bca:	1f 92       	push	r1
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	4f e0       	ldi	r20, 0x0F	; 15
    2bda:	62 e0       	ldi	r22, 0x02	; 2
    2bdc:	81 dd       	rcall	.-1278   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bde:	62 e3       	ldi	r22, 0x32	; 50
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 99 2c 	call	0x5932	; 0x5932 <delay>
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	62 e0       	ldi	r22, 0x02	; 2
    2bf0:	f8 dd       	rcall	.-1040   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	80 71       	andi	r24, 0x10	; 16
    2bf8:	99 27       	eor	r25, r25
    2bfa:	21 e0       	ldi	r18, 0x01	; 1
    2bfc:	89 2b       	or	r24, r25
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	22 23       	and	r18, r18
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <_ZN7MFRC5229PCD_ResetEv+0x44>
    2c06:	f1 cf       	rjmp	.-30     	; 0x2bea <_ZN7MFRC5229PCD_ResetEv+0x26>
    2c08:	00 00       	nop
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	08 95       	ret

00002c14 <_ZN7MFRC52213PCD_AntennaOnEv>:
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	9b 83       	std	Y+3, r25	; 0x03
    2c20:	8a 83       	std	Y+2, r24	; 0x02
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	9b 81       	ldd	r25, Y+3	; 0x03
    2c26:	68 e2       	ldi	r22, 0x28	; 40
    2c28:	dc dd       	rcall	.-1096   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	88 2f       	mov	r24, r24
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	83 70       	andi	r24, 0x03	; 3
    2c34:	99 27       	eor	r25, r25
    2c36:	03 97       	sbiw	r24, 0x03	; 3
    2c38:	41 f0       	breq	.+16     	; 0x2c4a <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	23 60       	ori	r18, 0x03	; 3
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	9b 81       	ldd	r25, Y+3	; 0x03
    2c44:	42 2f       	mov	r20, r18
    2c46:	68 e2       	ldi	r22, 0x28	; 40
    2c48:	4b dd       	rcall	.-1386   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c4a:	00 00       	nop
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	08 95       	ret

00002c58 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2c58:	8f 92       	push	r8
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	2e 97       	sbiw	r28, 0x0e	; 14
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	9b 83       	std	Y+3, r25	; 0x03
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	7d 83       	std	Y+5, r23	; 0x05
    2c84:	6c 83       	std	Y+4, r22	; 0x04
    2c86:	4e 83       	std	Y+6, r20	; 0x06
    2c88:	38 87       	std	Y+8, r19	; 0x08
    2c8a:	2f 83       	std	Y+7, r18	; 0x07
    2c8c:	1a 87       	std	Y+10, r17	; 0x0a
    2c8e:	09 87       	std	Y+9, r16	; 0x09
    2c90:	fc 86       	std	Y+12, r15	; 0x0c
    2c92:	eb 86       	std	Y+11, r14	; 0x0b
    2c94:	cd 86       	std	Y+13, r12	; 0x0d
    2c96:	ae 86       	std	Y+14, r10	; 0x0e
    2c98:	80 e3       	ldi	r24, 0x30	; 48
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ca0:	69 85       	ldd	r22, Y+9	; 0x09
    2ca2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ca4:	4f 81       	ldd	r20, Y+7	; 0x07
    2ca6:	58 85       	ldd	r21, Y+8	; 0x08
    2ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    2caa:	3d 81       	ldd	r19, Y+5	; 0x05
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb0:	ae 85       	ldd	r26, Y+14	; 0x0e
    2cb2:	af 93       	push	r26
    2cb4:	8d 84       	ldd	r8, Y+13	; 0x0d
    2cb6:	5f 01       	movw	r10, r30
    2cb8:	6b 01       	movw	r12, r22
    2cba:	7a 01       	movw	r14, r20
    2cbc:	0e 81       	ldd	r16, Y+6	; 0x06
    2cbe:	49 81       	ldd	r20, Y+1	; 0x01
    2cc0:	6c e0       	ldi	r22, 0x0C	; 12
    2cc2:	13 d0       	rcall	.+38     	; 0x2cea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2cc4:	0f 90       	pop	r0
    2cc6:	2e 96       	adiw	r28, 0x0e	; 14
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	bf 90       	pop	r11
    2ce4:	af 90       	pop	r10
    2ce6:	8f 90       	pop	r8
    2ce8:	08 95       	ret

00002cea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2cea:	8f 92       	push	r8
    2cec:	af 92       	push	r10
    2cee:	bf 92       	push	r11
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	68 97       	sbiw	r28, 0x18	; 24
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	9c 87       	std	Y+12, r25	; 0x0c
    2d10:	8b 87       	std	Y+11, r24	; 0x0b
    2d12:	6d 87       	std	Y+13, r22	; 0x0d
    2d14:	4e 87       	std	Y+14, r20	; 0x0e
    2d16:	38 8b       	std	Y+16, r19	; 0x10
    2d18:	2f 87       	std	Y+15, r18	; 0x0f
    2d1a:	09 8b       	std	Y+17, r16	; 0x11
    2d1c:	fb 8a       	std	Y+19, r15	; 0x13
    2d1e:	ea 8a       	std	Y+18, r14	; 0x12
    2d20:	dd 8a       	std	Y+21, r13	; 0x15
    2d22:	cc 8a       	std	Y+20, r12	; 0x14
    2d24:	bf 8a       	std	Y+23, r11	; 0x17
    2d26:	ae 8a       	std	Y+22, r10	; 0x16
    2d28:	88 8e       	std	Y+24, r8	; 0x18
    2d2a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d2c:	9f 89       	ldd	r25, Y+23	; 0x17
    2d2e:	89 2b       	or	r24, r25
    2d30:	29 f0       	breq	.+10     	; 0x2d3c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    2d32:	8e 89       	ldd	r24, Y+22	; 0x16
    2d34:	9f 89       	ldd	r25, Y+23	; 0x17
    2d36:	fc 01       	movw	r30, r24
    2d38:	80 81       	ld	r24, Z
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	8c 83       	std	Y+4, r24	; 0x04
    2d40:	88 8d       	ldd	r24, Y+24	; 0x18
    2d42:	98 2f       	mov	r25, r24
    2d44:	92 95       	swap	r25
    2d46:	90 7f       	andi	r25, 0xF0	; 240
    2d48:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4a:	89 0f       	add	r24, r25
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d50:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	62 e0       	ldi	r22, 0x02	; 2
    2d56:	c4 dc       	rcall	.-1656   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	68 e0       	ldi	r22, 0x08	; 8
    2d60:	bf dc       	rcall	.-1666   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d66:	40 e8       	ldi	r20, 0x80	; 128
    2d68:	64 e1       	ldi	r22, 0x14	; 20
    2d6a:	12 de       	rcall	.-988    	; 0x2990 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2d6c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d6e:	38 89       	ldd	r19, Y+16	; 0x10
    2d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d74:	49 89       	ldd	r20, Y+17	; 0x11
    2d76:	62 e1       	ldi	r22, 0x12	; 18
    2d78:	e8 dc       	rcall	.-1584   	; 0x274a <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d7e:	4d 81       	ldd	r20, Y+5	; 0x05
    2d80:	6a e1       	ldi	r22, 0x1A	; 26
    2d82:	ae dc       	rcall	.-1700   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d84:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d86:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d88:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	a9 dc       	rcall	.-1710   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d90:	8c 30       	cpi	r24, 0x0C	; 12
    2d92:	29 f4       	brne	.+10     	; 0x2d9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2d94:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d96:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	6a e1       	ldi	r22, 0x1A	; 26
    2d9c:	f9 dd       	rcall	.-1038   	; 0x2990 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2d9e:	80 ed       	ldi	r24, 0xD0	; 208
    2da0:	97 e0       	ldi	r25, 0x07	; 7
    2da2:	9b 83       	std	Y+3, r25	; 0x03
    2da4:	8a 83       	std	Y+2, r24	; 0x02
    2da6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2daa:	68 e0       	ldi	r22, 0x08	; 8
    2dac:	1a dd       	rcall	.-1484   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2dae:	8e 83       	std	Y+6, r24	; 0x06
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2db4:	89 23       	and	r24, r25
    2db6:	88 23       	and	r24, r24
    2db8:	c1 f4       	brne	.+48     	; 0x2dea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    2dba:	8e 81       	ldd	r24, Y+6	; 0x06
    2dbc:	88 2f       	mov	r24, r24
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	81 70       	andi	r24, 0x01	; 1
    2dc2:	99 27       	eor	r25, r25
    2dc4:	89 2b       	or	r24, r25
    2dc6:	11 f0       	breq	.+4      	; 0x2dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2dc8:	83 e0       	ldi	r24, 0x03	; 3
    2dca:	b4 c0       	rjmp	.+360    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	9b 83       	std	Y+3, r25	; 0x03
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
    2dd6:	21 e0       	ldi	r18, 0x01	; 1
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	9b 81       	ldd	r25, Y+3	; 0x03
    2ddc:	89 2b       	or	r24, r25
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	22 23       	and	r18, r18
    2de4:	01 f3       	breq	.-64     	; 0x2da6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    2de6:	83 e0       	ldi	r24, 0x03	; 3
    2de8:	a5 c0       	rjmp	.+330    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2dea:	00 00       	nop
    2dec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dee:	9c 85       	ldd	r25, Y+12	; 0x0c
    2df0:	6c e0       	ldi	r22, 0x0C	; 12
    2df2:	f7 dc       	rcall	.-1554   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2df4:	8f 83       	std	Y+7, r24	; 0x07
    2df6:	8f 81       	ldd	r24, Y+7	; 0x07
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	83 71       	andi	r24, 0x13	; 19
    2dfe:	99 27       	eor	r25, r25
    2e00:	89 2b       	or	r24, r25
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	96 c0       	rjmp	.+300    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e08:	8a 89       	ldd	r24, Y+18	; 0x12
    2e0a:	9b 89       	ldd	r25, Y+19	; 0x13
    2e0c:	89 2b       	or	r24, r25
    2e0e:	71 f1       	breq	.+92     	; 0x2e6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e10:	8c 89       	ldd	r24, Y+20	; 0x14
    2e12:	9d 89       	ldd	r25, Y+21	; 0x15
    2e14:	89 2b       	or	r24, r25
    2e16:	51 f1       	breq	.+84     	; 0x2e6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e1c:	64 e1       	ldi	r22, 0x14	; 20
    2e1e:	e1 dc       	rcall	.-1598   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e20:	8e 83       	std	Y+6, r24	; 0x06
    2e22:	8c 89       	ldd	r24, Y+20	; 0x14
    2e24:	9d 89       	ldd	r25, Y+21	; 0x15
    2e26:	fc 01       	movw	r30, r24
    2e28:	90 81       	ld	r25, Z
    2e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2c:	98 17       	cp	r25, r24
    2e2e:	10 f4       	brcc	.+4      	; 0x2e34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	80 c0       	rjmp	.+256    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e34:	8c 89       	ldd	r24, Y+20	; 0x14
    2e36:	9d 89       	ldd	r25, Y+21	; 0x15
    2e38:	2e 81       	ldd	r18, Y+6	; 0x06
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	20 83       	st	Z, r18
    2e3e:	2a 89       	ldd	r18, Y+18	; 0x12
    2e40:	3b 89       	ldd	r19, Y+19	; 0x13
    2e42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e46:	08 8d       	ldd	r16, Y+24	; 0x18
    2e48:	4e 81       	ldd	r20, Y+6	; 0x06
    2e4a:	62 e1       	ldi	r22, 0x12	; 18
    2e4c:	00 dd       	rcall	.-1536   	; 0x284e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    2e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e52:	68 e1       	ldi	r22, 0x18	; 24
    2e54:	c6 dc       	rcall	.-1652   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e56:	87 70       	andi	r24, 0x07	; 7
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e5c:	9f 89       	ldd	r25, Y+23	; 0x17
    2e5e:	89 2b       	or	r24, r25
    2e60:	29 f0       	breq	.+10     	; 0x2e6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e62:	8e 89       	ldd	r24, Y+22	; 0x16
    2e64:	9f 89       	ldd	r25, Y+23	; 0x17
    2e66:	29 81       	ldd	r18, Y+1	; 0x01
    2e68:	fc 01       	movw	r30, r24
    2e6a:	20 83       	st	Z, r18
    2e6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	88 70       	andi	r24, 0x08	; 8
    2e74:	99 27       	eor	r25, r25
    2e76:	89 2b       	or	r24, r25
    2e78:	11 f0       	breq	.+4      	; 0x2e7e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	5b c0       	rjmp	.+182    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e7e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e80:	9b 89       	ldd	r25, Y+19	; 0x13
    2e82:	89 2b       	or	r24, r25
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    2e86:	55 c0       	rjmp	.+170    	; 0x2f32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e88:	8c 89       	ldd	r24, Y+20	; 0x14
    2e8a:	9d 89       	ldd	r25, Y+21	; 0x15
    2e8c:	89 2b       	or	r24, r25
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    2e90:	50 c0       	rjmp	.+160    	; 0x2f32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e92:	8e a1       	ldd	r24, Y+38	; 0x26
    2e94:	88 23       	and	r24, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    2e98:	4c c0       	rjmp	.+152    	; 0x2f32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e9c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	80 81       	ld	r24, Z
    2ea2:	81 30       	cpi	r24, 0x01	; 1
    2ea4:	29 f4       	brne	.+10     	; 0x2eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	84 30       	cpi	r24, 0x04	; 4
    2eaa:	11 f4       	brne	.+4      	; 0x2eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2eac:	8f ef       	ldi	r24, 0xFF	; 255
    2eae:	42 c0       	rjmp	.+132    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2eb0:	8c 89       	ldd	r24, Y+20	; 0x14
    2eb2:	9d 89       	ldd	r25, Y+21	; 0x15
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	80 81       	ld	r24, Z
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	18 f0       	brcs	.+6      	; 0x2ec2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 23       	and	r24, r24
    2ec0:	11 f0       	breq	.+4      	; 0x2ec6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    2ec2:	87 e0       	ldi	r24, 0x07	; 7
    2ec4:	37 c0       	rjmp	.+110    	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ec6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ec8:	9d 89       	ldd	r25, Y+21	; 0x15
    2eca:	fc 01       	movw	r30, r24
    2ecc:	80 81       	ld	r24, Z
    2ece:	4e ef       	ldi	r20, 0xFE	; 254
    2ed0:	48 0f       	add	r20, r24
    2ed2:	9e 01       	movw	r18, r28
    2ed4:	27 5f       	subi	r18, 0xF7	; 247
    2ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed8:	6a 89       	ldd	r22, Y+18	; 0x12
    2eda:	7b 89       	ldd	r23, Y+19	; 0x13
    2edc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ede:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee0:	9d dd       	rcall	.-1222   	; 0x2a1c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2ee2:	88 87       	std	Y+8, r24	; 0x08
    2ee4:	88 85       	ldd	r24, Y+8	; 0x08
    2ee6:	88 23       	and	r24, r24
    2ee8:	11 f0       	breq	.+4      	; 0x2eee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    2eea:	88 85       	ldd	r24, Y+8	; 0x08
    2eec:	23 c0       	rjmp	.+70     	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2eee:	8c 89       	ldd	r24, Y+20	; 0x14
    2ef0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	80 81       	ld	r24, Z
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	02 97       	sbiw	r24, 0x02	; 2
    2efc:	2a 89       	ldd	r18, Y+18	; 0x12
    2efe:	3b 89       	ldd	r19, Y+19	; 0x13
    2f00:	82 0f       	add	r24, r18
    2f02:	93 1f       	adc	r25, r19
    2f04:	fc 01       	movw	r30, r24
    2f06:	90 81       	ld	r25, Z
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	98 17       	cp	r25, r24
    2f0c:	81 f4       	brne	.+32     	; 0x2f2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    2f0e:	8c 89       	ldd	r24, Y+20	; 0x14
    2f10:	9d 89       	ldd	r25, Y+21	; 0x15
    2f12:	fc 01       	movw	r30, r24
    2f14:	80 81       	ld	r24, Z
    2f16:	88 2f       	mov	r24, r24
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	2a 89       	ldd	r18, Y+18	; 0x12
    2f1e:	3b 89       	ldd	r19, Y+19	; 0x13
    2f20:	82 0f       	add	r24, r18
    2f22:	93 1f       	adc	r25, r19
    2f24:	fc 01       	movw	r30, r24
    2f26:	90 81       	ld	r25, Z
    2f28:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2a:	98 17       	cp	r25, r24
    2f2c:	11 f0       	breq	.+4      	; 0x2f32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2f2e:	87 e0       	ldi	r24, 0x07	; 7
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	68 96       	adiw	r28, 0x18	; 24
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	cf 90       	pop	r12
    2f4e:	bf 90       	pop	r11
    2f50:	af 90       	pop	r10
    2f52:	8f 90       	pop	r8
    2f54:	08 95       	ret

00002f56 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	7c 83       	std	Y+4, r23	; 0x04
    2f68:	6b 83       	std	Y+3, r22	; 0x03
    2f6a:	5e 83       	std	Y+6, r21	; 0x06
    2f6c:	4d 83       	std	Y+5, r20	; 0x05
    2f6e:	2d 81       	ldd	r18, Y+5	; 0x05
    2f70:	3e 81       	ldd	r19, Y+6	; 0x06
    2f72:	4b 81       	ldd	r20, Y+3	; 0x03
    2f74:	5c 81       	ldd	r21, Y+4	; 0x04
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	66 e2       	ldi	r22, 0x26	; 38
    2f7c:	09 d0       	rcall	.+18     	; 0x2f90 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    2f7e:	26 96       	adiw	r28, 0x06	; 6
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	08 95       	ret

00002f90 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2f90:	af 92       	push	r10
    2f92:	cf 92       	push	r12
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	29 97       	sbiw	r28, 0x09	; 9
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	8b 83       	std	Y+3, r24	; 0x03
    2fb4:	6d 83       	std	Y+5, r22	; 0x05
    2fb6:	5f 83       	std	Y+7, r21	; 0x07
    2fb8:	4e 83       	std	Y+6, r20	; 0x06
    2fba:	39 87       	std	Y+9, r19	; 0x09
    2fbc:	28 87       	std	Y+8, r18	; 0x08
    2fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc2:	89 2b       	or	r24, r25
    2fc4:	31 f0       	breq	.+12     	; 0x2fd2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    2fc6:	88 85       	ldd	r24, Y+8	; 0x08
    2fc8:	99 85       	ldd	r25, Y+9	; 0x09
    2fca:	fc 01       	movw	r30, r24
    2fcc:	80 81       	ld	r24, Z
    2fce:	82 30       	cpi	r24, 0x02	; 2
    2fd0:	10 f4       	brcc	.+4      	; 0x2fd6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    2fd2:	84 e0       	ldi	r24, 0x04	; 4
    2fd4:	2a c0       	rjmp	.+84     	; 0x302a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	6c e1       	ldi	r22, 0x1C	; 28
    2fde:	fa dc       	rcall	.-1548   	; 0x29d4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    2fe0:	87 e0       	ldi	r24, 0x07	; 7
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	32 96       	adiw	r30, 0x02	; 2
    2fe8:	48 85       	ldd	r20, Y+8	; 0x08
    2fea:	59 85       	ldd	r21, Y+9	; 0x09
    2fec:	2e 81       	ldd	r18, Y+6	; 0x06
    2fee:	3f 81       	ldd	r19, Y+7	; 0x07
    2ff0:	be 01       	movw	r22, r28
    2ff2:	6b 5f       	subi	r22, 0xFB	; 251
    2ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffa:	a1 2c       	mov	r10, r1
    2ffc:	c1 2c       	mov	r12, r1
    2ffe:	7f 01       	movw	r14, r30
    3000:	8a 01       	movw	r16, r20
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	29 de       	rcall	.-942    	; 0x2c58 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	88 23       	and	r24, r24
    300c:	11 f0       	breq	.+4      	; 0x3012 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	0c c0       	rjmp	.+24     	; 0x302a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3012:	88 85       	ldd	r24, Y+8	; 0x08
    3014:	99 85       	ldd	r25, Y+9	; 0x09
    3016:	fc 01       	movw	r30, r24
    3018:	80 81       	ld	r24, Z
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	19 f4       	brne	.+6      	; 0x3024 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	88 23       	and	r24, r24
    3022:	11 f0       	breq	.+4      	; 0x3028 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	01 c0       	rjmp	.+2      	; 0x302a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	29 96       	adiw	r28, 0x09	; 9
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	ff 90       	pop	r15
    3040:	ef 90       	pop	r14
    3042:	cf 90       	pop	r12
    3044:	af 90       	pop	r10
    3046:	08 95       	ret

00003048 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    3048:	af 92       	push	r10
    304a:	cf 92       	push	r12
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	a1 97       	sbiw	r28, 0x21	; 33
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	9e 8f       	std	Y+30, r25	; 0x1e
    306a:	8d 8f       	std	Y+29, r24	; 0x1d
    306c:	78 a3       	std	Y+32, r23	; 0x20
    306e:	6f 8f       	std	Y+31, r22	; 0x1f
    3070:	49 a3       	std	Y+33, r20	; 0x21
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	8c 83       	std	Y+4, r24	; 0x04
    3076:	89 a1       	ldd	r24, Y+33	; 0x21
    3078:	81 35       	cpi	r24, 0x51	; 81
    307a:	10 f0       	brcs	.+4      	; 0x3080 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    307c:	86 e0       	ldi	r24, 0x06	; 6
    307e:	29 c2       	rjmp	.+1106   	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3082:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3084:	40 e8       	ldi	r20, 0x80	; 128
    3086:	6c e1       	ldi	r22, 0x1C	; 28
    3088:	a5 dc       	rcall	.-1718   	; 0x29d4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    308a:	19 82       	std	Y+1, r1	; 0x01
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	88 23       	and	r24, r24
    3090:	09 f0       	breq	.+2      	; 0x3094 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    3092:	14 c2       	rjmp	.+1064   	; 0x34bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	88 2f       	mov	r24, r24
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	82 30       	cpi	r24, 0x02	; 2
    309c:	91 05       	cpc	r25, r1
    309e:	b1 f0       	breq	.+44     	; 0x30cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    30a0:	83 30       	cpi	r24, 0x03	; 3
    30a2:	91 05       	cpc	r25, r1
    30a4:	29 f1       	breq	.+74     	; 0x30f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	49 f5       	brne	.+82     	; 0x30fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    30aa:	83 e9       	ldi	r24, 0x93	; 147
    30ac:	8a 8b       	std	Y+18, r24	; 0x12
    30ae:	1f 82       	std	Y+7, r1	; 0x07
    30b0:	89 a1       	ldd	r24, Y+33	; 0x21
    30b2:	88 23       	and	r24, r24
    30b4:	41 f0       	breq	.+16     	; 0x30c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    30b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30b8:	98 a1       	ldd	r25, Y+32	; 0x20
    30ba:	fc 01       	movw	r30, r24
    30bc:	80 81       	ld	r24, Z
    30be:	85 30       	cpi	r24, 0x05	; 5
    30c0:	10 f0       	brcs	.+4      	; 0x30c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	8b 83       	std	Y+3, r24	; 0x03
    30ca:	1a c0       	rjmp	.+52     	; 0x3100 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    30cc:	85 e9       	ldi	r24, 0x95	; 149
    30ce:	8a 8b       	std	Y+18, r24	; 0x12
    30d0:	83 e0       	ldi	r24, 0x03	; 3
    30d2:	8f 83       	std	Y+7, r24	; 0x07
    30d4:	89 a1       	ldd	r24, Y+33	; 0x21
    30d6:	88 23       	and	r24, r24
    30d8:	41 f0       	breq	.+16     	; 0x30ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    30da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30dc:	98 a1       	ldd	r25, Y+32	; 0x20
    30de:	fc 01       	movw	r30, r24
    30e0:	80 81       	ld	r24, Z
    30e2:	88 30       	cpi	r24, 0x08	; 8
    30e4:	10 f0       	brcs	.+4      	; 0x30ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	01 c0       	rjmp	.+2      	; 0x30ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	8b 83       	std	Y+3, r24	; 0x03
    30ee:	08 c0       	rjmp	.+16     	; 0x3100 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    30f0:	87 e9       	ldi	r24, 0x97	; 151
    30f2:	8a 8b       	std	Y+18, r24	; 0x12
    30f4:	86 e0       	ldi	r24, 0x06	; 6
    30f6:	8f 83       	std	Y+7, r24	; 0x07
    30f8:	1b 82       	std	Y+3, r1	; 0x03
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    30fc:	85 e0       	ldi	r24, 0x05	; 5
    30fe:	e9 c1       	rjmp	.+978    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3100:	8f 81       	ldd	r24, Y+7	; 0x07
    3102:	88 0f       	add	r24, r24
    3104:	88 0f       	add	r24, r24
    3106:	88 0f       	add	r24, r24
    3108:	99 a1       	ldd	r25, Y+33	; 0x21
    310a:	f9 2f       	mov	r31, r25
    310c:	f8 1b       	sub	r31, r24
    310e:	8f 2f       	mov	r24, r31
    3110:	88 87       	std	Y+8, r24	; 0x08
    3112:	88 85       	ldd	r24, Y+8	; 0x08
    3114:	88 23       	and	r24, r24
    3116:	0c f4       	brge	.+2      	; 0x311a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    3118:	18 86       	std	Y+8, r1	; 0x08
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	8e 83       	std	Y+6, r24	; 0x06
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	88 23       	and	r24, r24
    3122:	71 f0       	breq	.+28     	; 0x3140 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    3124:	8e 81       	ldd	r24, Y+6	; 0x06
    3126:	91 e0       	ldi	r25, 0x01	; 1
    3128:	98 0f       	add	r25, r24
    312a:	9e 83       	std	Y+6, r25	; 0x06
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	9e 01       	movw	r18, r28
    3132:	2e 5e       	subi	r18, 0xEE	; 238
    3134:	3f 4f       	sbci	r19, 0xFF	; 255
    3136:	82 0f       	add	r24, r18
    3138:	93 1f       	adc	r25, r19
    313a:	28 e8       	ldi	r18, 0x88	; 136
    313c:	fc 01       	movw	r30, r24
    313e:	20 83       	st	Z, r18
    3140:	88 85       	ldd	r24, Y+8	; 0x08
    3142:	88 23       	and	r24, r24
    3144:	0c f4       	brge	.+2      	; 0x3148 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3146:	89 5f       	subi	r24, 0xF9	; 249
    3148:	85 95       	asr	r24
    314a:	85 95       	asr	r24
    314c:	85 95       	asr	r24
    314e:	98 2f       	mov	r25, r24
    3150:	88 85       	ldd	r24, Y+8	; 0x08
    3152:	87 70       	andi	r24, 0x07	; 7
    3154:	88 23       	and	r24, r24
    3156:	11 f0       	breq	.+4      	; 0x315c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	01 c0       	rjmp	.+2      	; 0x315e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	89 0f       	add	r24, r25
    3160:	8c 87       	std	Y+12, r24	; 0x0c
    3162:	8c 85       	ldd	r24, Y+12	; 0x0c
    3164:	88 23       	and	r24, r24
    3166:	99 f1       	breq	.+102    	; 0x31ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	88 23       	and	r24, r24
    316c:	11 f0       	breq	.+4      	; 0x3172 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    316e:	83 e0       	ldi	r24, 0x03	; 3
    3170:	01 c0       	rjmp	.+2      	; 0x3174 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    3172:	84 e0       	ldi	r24, 0x04	; 4
    3174:	8e 87       	std	Y+14, r24	; 0x0e
    3176:	9c 85       	ldd	r25, Y+12	; 0x0c
    3178:	8e 85       	ldd	r24, Y+14	; 0x0e
    317a:	89 17       	cp	r24, r25
    317c:	10 f4       	brcc	.+4      	; 0x3182 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    317e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3180:	8c 87       	std	Y+12, r24	; 0x0c
    3182:	1d 82       	std	Y+5, r1	; 0x05
    3184:	9d 81       	ldd	r25, Y+5	; 0x05
    3186:	8c 85       	ldd	r24, Y+12	; 0x0c
    3188:	98 17       	cp	r25, r24
    318a:	08 f5       	brcc	.+66     	; 0x31ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    318c:	8e 81       	ldd	r24, Y+6	; 0x06
    318e:	91 e0       	ldi	r25, 0x01	; 1
    3190:	98 0f       	add	r25, r24
    3192:	9e 83       	std	Y+6, r25	; 0x06
    3194:	88 2f       	mov	r24, r24
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	2f 81       	ldd	r18, Y+7	; 0x07
    319a:	42 2f       	mov	r20, r18
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	2d 81       	ldd	r18, Y+5	; 0x05
    31a0:	22 2f       	mov	r18, r18
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	24 0f       	add	r18, r20
    31a6:	35 1f       	adc	r19, r21
    31a8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    31aa:	58 a1       	ldd	r21, Y+32	; 0x20
    31ac:	24 0f       	add	r18, r20
    31ae:	35 1f       	adc	r19, r21
    31b0:	2f 5f       	subi	r18, 0xFF	; 255
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	f9 01       	movw	r30, r18
    31b6:	40 81       	ld	r20, Z
    31b8:	9e 01       	movw	r18, r28
    31ba:	2e 5e       	subi	r18, 0xEE	; 238
    31bc:	3f 4f       	sbci	r19, 0xFF	; 255
    31be:	82 0f       	add	r24, r18
    31c0:	93 1f       	adc	r25, r19
    31c2:	fc 01       	movw	r30, r24
    31c4:	40 83       	st	Z, r20
    31c6:	8d 81       	ldd	r24, Y+5	; 0x05
    31c8:	8f 5f       	subi	r24, 0xFF	; 255
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	db cf       	rjmp	.-74     	; 0x3184 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	88 23       	and	r24, r24
    31d2:	19 f0       	breq	.+6      	; 0x31da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    31d4:	88 85       	ldd	r24, Y+8	; 0x08
    31d6:	88 5f       	subi	r24, 0xF8	; 248
    31d8:	88 87       	std	Y+8, r24	; 0x08
    31da:	1a 82       	std	Y+2, r1	; 0x02
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	88 23       	and	r24, r24
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    31e2:	f5 c0       	rjmp	.+490    	; 0x33ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    31e4:	88 85       	ldd	r24, Y+8	; 0x08
    31e6:	80 32       	cpi	r24, 0x20	; 32
    31e8:	3c f1       	brlt	.+78     	; 0x3238 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    31ea:	80 e7       	ldi	r24, 0x70	; 112
    31ec:	8b 8b       	std	Y+19, r24	; 0x13
    31ee:	9c 89       	ldd	r25, Y+20	; 0x14
    31f0:	8d 89       	ldd	r24, Y+21	; 0x15
    31f2:	98 27       	eor	r25, r24
    31f4:	8e 89       	ldd	r24, Y+22	; 0x16
    31f6:	98 27       	eor	r25, r24
    31f8:	8f 89       	ldd	r24, Y+23	; 0x17
    31fa:	89 27       	eor	r24, r25
    31fc:	88 8f       	std	Y+24, r24	; 0x18
    31fe:	ce 01       	movw	r24, r28
    3200:	42 96       	adiw	r24, 0x12	; 18
    3202:	9c 01       	movw	r18, r24
    3204:	29 5f       	subi	r18, 0xF9	; 249
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	be 01       	movw	r22, r28
    320a:	6e 5e       	subi	r22, 0xEE	; 238
    320c:	7f 4f       	sbci	r23, 0xFF	; 255
    320e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3212:	47 e0       	ldi	r20, 0x07	; 7
    3214:	03 dc       	rcall	.-2042   	; 0x2a1c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3216:	8f 87       	std	Y+15, r24	; 0x0f
    3218:	8f 85       	ldd	r24, Y+15	; 0x0f
    321a:	88 23       	and	r24, r24
    321c:	11 f0       	breq	.+4      	; 0x3222 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    321e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3220:	58 c1       	rjmp	.+688    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3222:	1b 8e       	std	Y+27, r1	; 0x1b
    3224:	89 e0       	ldi	r24, 0x09	; 9
    3226:	89 87       	std	Y+9, r24	; 0x09
    3228:	ce 01       	movw	r24, r28
    322a:	42 96       	adiw	r24, 0x12	; 18
    322c:	06 96       	adiw	r24, 0x06	; 6
    322e:	9b 87       	std	Y+11, r25	; 0x0b
    3230:	8a 87       	std	Y+10, r24	; 0x0a
    3232:	83 e0       	ldi	r24, 0x03	; 3
    3234:	8c 8f       	std	Y+28, r24	; 0x1c
    3236:	33 c0       	rjmp	.+102    	; 0x329e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    3238:	88 85       	ldd	r24, Y+8	; 0x08
    323a:	87 78       	andi	r24, 0x87	; 135
    323c:	88 23       	and	r24, r24
    323e:	1c f4       	brge	.+6      	; 0x3246 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3240:	81 50       	subi	r24, 0x01	; 1
    3242:	88 6f       	ori	r24, 0xF8	; 248
    3244:	8f 5f       	subi	r24, 0xFF	; 255
    3246:	8b 8f       	std	Y+27, r24	; 0x1b
    3248:	88 85       	ldd	r24, Y+8	; 0x08
    324a:	88 23       	and	r24, r24
    324c:	0c f4       	brge	.+2      	; 0x3250 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    324e:	89 5f       	subi	r24, 0xF9	; 249
    3250:	85 95       	asr	r24
    3252:	85 95       	asr	r24
    3254:	85 95       	asr	r24
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	8e 5f       	subi	r24, 0xFE	; 254
    325c:	8e 83       	std	Y+6, r24	; 0x06
    325e:	8e 81       	ldd	r24, Y+6	; 0x06
    3260:	98 2f       	mov	r25, r24
    3262:	92 95       	swap	r25
    3264:	90 7f       	andi	r25, 0xF0	; 240
    3266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3268:	89 0f       	add	r24, r25
    326a:	8b 8b       	std	Y+19, r24	; 0x13
    326c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    326e:	88 23       	and	r24, r24
    3270:	11 f0       	breq	.+4      	; 0x3276 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	89 0f       	add	r24, r25
    327c:	89 87       	std	Y+9, r24	; 0x09
    327e:	8e 81       	ldd	r24, Y+6	; 0x06
    3280:	88 2f       	mov	r24, r24
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	9e 01       	movw	r18, r28
    3286:	2e 5e       	subi	r18, 0xEE	; 238
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	82 0f       	add	r24, r18
    328c:	93 1f       	adc	r25, r19
    328e:	9b 87       	std	Y+11, r25	; 0x0b
    3290:	8a 87       	std	Y+10, r24	; 0x0a
    3292:	99 e0       	ldi	r25, 0x09	; 9
    3294:	8e 81       	ldd	r24, Y+6	; 0x06
    3296:	f9 2f       	mov	r31, r25
    3298:	f8 1b       	sub	r31, r24
    329a:	8f 2f       	mov	r24, r31
    329c:	8c 8f       	std	Y+28, r24	; 0x1c
    329e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a0:	88 8b       	std	Y+16, r24	; 0x10
    32a2:	88 89       	ldd	r24, Y+16	; 0x10
    32a4:	98 2f       	mov	r25, r24
    32a6:	92 95       	swap	r25
    32a8:	90 7f       	andi	r25, 0xF0	; 240
    32aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ac:	29 2f       	mov	r18, r25
    32ae:	28 0f       	add	r18, r24
    32b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32b4:	42 2f       	mov	r20, r18
    32b6:	6a e1       	ldi	r22, 0x1A	; 26
    32b8:	13 da       	rcall	.-3034   	; 0x26e0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    32ba:	fe 01       	movw	r30, r28
    32bc:	7b 96       	adiw	r30, 0x1b	; 27
    32be:	ae 01       	movw	r20, r28
    32c0:	44 5e       	subi	r20, 0xE4	; 228
    32c2:	5f 4f       	sbci	r21, 0xFF	; 255
    32c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    32c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    32c8:	be 01       	movw	r22, r28
    32ca:	6e 5e       	subi	r22, 0xEE	; 238
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32d2:	a1 2c       	mov	r10, r1
    32d4:	c8 88       	ldd	r12, Y+16	; 0x10
    32d6:	7f 01       	movw	r14, r30
    32d8:	8a 01       	movw	r16, r20
    32da:	49 85       	ldd	r20, Y+9	; 0x09
    32dc:	bd dc       	rcall	.-1670   	; 0x2c58 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    32de:	8f 87       	std	Y+15, r24	; 0x0f
    32e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e2:	82 30       	cpi	r24, 0x02	; 2
    32e4:	09 f0       	breq	.+2      	; 0x32e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    32e6:	65 c0       	rjmp	.+202    	; 0x33b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    32e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32ec:	6c e1       	ldi	r22, 0x1C	; 28
    32ee:	79 da       	rcall	.-2830   	; 0x27e2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    32f0:	89 8b       	std	Y+17, r24	; 0x11
    32f2:	89 89       	ldd	r24, Y+17	; 0x11
    32f4:	88 2f       	mov	r24, r24
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	80 72       	andi	r24, 0x20	; 32
    32fa:	99 27       	eor	r25, r25
    32fc:	89 2b       	or	r24, r25
    32fe:	11 f0       	breq	.+4      	; 0x3304 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	e7 c0       	rjmp	.+462    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3304:	89 89       	ldd	r24, Y+17	; 0x11
    3306:	8f 71       	andi	r24, 0x1F	; 31
    3308:	8d 87       	std	Y+13, r24	; 0x0d
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	88 23       	and	r24, r24
    330e:	11 f4       	brne	.+4      	; 0x3314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3310:	80 e2       	ldi	r24, 0x20	; 32
    3312:	8d 87       	std	Y+13, r24	; 0x0d
    3314:	8d 85       	ldd	r24, Y+13	; 0x0d
    3316:	28 2f       	mov	r18, r24
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	88 85       	ldd	r24, Y+8	; 0x08
    331c:	08 2e       	mov	r0, r24
    331e:	00 0c       	add	r0, r0
    3320:	99 0b       	sbc	r25, r25
    3322:	82 17       	cp	r24, r18
    3324:	93 07       	cpc	r25, r19
    3326:	14 f0       	brlt	.+4      	; 0x332c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    3328:	85 e0       	ldi	r24, 0x05	; 5
    332a:	d3 c0       	rjmp	.+422    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    332c:	8d 85       	ldd	r24, Y+13	; 0x0d
    332e:	88 87       	std	Y+8, r24	; 0x08
    3330:	88 85       	ldd	r24, Y+8	; 0x08
    3332:	08 2e       	mov	r0, r24
    3334:	00 0c       	add	r0, r0
    3336:	99 0b       	sbc	r25, r25
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	87 70       	andi	r24, 0x07	; 7
    333c:	90 78       	andi	r25, 0x80	; 128
    333e:	99 23       	and	r25, r25
    3340:	24 f4       	brge	.+8      	; 0x334a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	88 6f       	ori	r24, 0xF8	; 248
    3346:	9f 6f       	ori	r25, 0xFF	; 255
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	88 85       	ldd	r24, Y+8	; 0x08
    334e:	88 23       	and	r24, r24
    3350:	0c f4       	brge	.+2      	; 0x3354 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3352:	89 5f       	subi	r24, 0xF9	; 249
    3354:	85 95       	asr	r24
    3356:	85 95       	asr	r24
    3358:	85 95       	asr	r24
    335a:	98 2f       	mov	r25, r24
    335c:	8d 81       	ldd	r24, Y+5	; 0x05
    335e:	88 23       	and	r24, r24
    3360:	11 f0       	breq	.+4      	; 0x3366 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	89 0f       	add	r24, r25
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	8e 83       	std	Y+6, r24	; 0x06
    336e:	8e 81       	ldd	r24, Y+6	; 0x06
    3370:	88 2f       	mov	r24, r24
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	2e 81       	ldd	r18, Y+6	; 0x06
    3376:	22 2f       	mov	r18, r18
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	ae 01       	movw	r20, r28
    337c:	4e 5e       	subi	r20, 0xEE	; 238
    337e:	5f 4f       	sbci	r21, 0xFF	; 255
    3380:	24 0f       	add	r18, r20
    3382:	35 1f       	adc	r19, r21
    3384:	f9 01       	movw	r30, r18
    3386:	20 81       	ld	r18, Z
    3388:	62 2f       	mov	r22, r18
    338a:	2d 81       	ldd	r18, Y+5	; 0x05
    338c:	42 2f       	mov	r20, r18
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	21 e0       	ldi	r18, 0x01	; 1
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	02 c0       	rjmp	.+4      	; 0x339a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    3396:	22 0f       	add	r18, r18
    3398:	33 1f       	adc	r19, r19
    339a:	4a 95       	dec	r20
    339c:	e2 f7       	brpl	.-8      	; 0x3396 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    339e:	26 2b       	or	r18, r22
    33a0:	42 2f       	mov	r20, r18
    33a2:	9e 01       	movw	r18, r28
    33a4:	2e 5e       	subi	r18, 0xEE	; 238
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	82 0f       	add	r24, r18
    33aa:	93 1f       	adc	r25, r19
    33ac:	fc 01       	movw	r30, r24
    33ae:	40 83       	st	Z, r20
    33b0:	15 cf       	rjmp	.-470    	; 0x31dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b4:	88 23       	and	r24, r24
    33b6:	11 f0       	breq	.+4      	; 0x33bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    33b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ba:	8b c0       	rjmp	.+278    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33bc:	88 85       	ldd	r24, Y+8	; 0x08
    33be:	80 32       	cpi	r24, 0x20	; 32
    33c0:	1c f0       	brlt	.+6      	; 0x33c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	8a 83       	std	Y+2, r24	; 0x02
    33c6:	0a cf       	rjmp	.-492    	; 0x31dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33c8:	80 e2       	ldi	r24, 0x20	; 32
    33ca:	88 87       	std	Y+8, r24	; 0x08
    33cc:	07 cf       	rjmp	.-498    	; 0x31dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33ce:	8c 89       	ldd	r24, Y+20	; 0x14
    33d0:	88 38       	cpi	r24, 0x88	; 136
    33d2:	11 f4       	brne	.+4      	; 0x33d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    33d4:	83 e0       	ldi	r24, 0x03	; 3
    33d6:	01 c0       	rjmp	.+2      	; 0x33da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	8e 83       	std	Y+6, r24	; 0x06
    33dc:	8c 89       	ldd	r24, Y+20	; 0x14
    33de:	88 38       	cpi	r24, 0x88	; 136
    33e0:	11 f4       	brne	.+4      	; 0x33e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    33e6:	84 e0       	ldi	r24, 0x04	; 4
    33e8:	8c 87       	std	Y+12, r24	; 0x0c
    33ea:	1d 82       	std	Y+5, r1	; 0x05
    33ec:	9d 81       	ldd	r25, Y+5	; 0x05
    33ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    33f0:	98 17       	cp	r25, r24
    33f2:	00 f5       	brcc	.+64     	; 0x3434 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    33f4:	8f 81       	ldd	r24, Y+7	; 0x07
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	88 2f       	mov	r24, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	82 0f       	add	r24, r18
    3402:	93 1f       	adc	r25, r19
    3404:	2e 81       	ldd	r18, Y+6	; 0x06
    3406:	31 e0       	ldi	r19, 0x01	; 1
    3408:	32 0f       	add	r19, r18
    340a:	3e 83       	std	Y+6, r19	; 0x06
    340c:	22 2f       	mov	r18, r18
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	ae 01       	movw	r20, r28
    3412:	4e 5e       	subi	r20, 0xEE	; 238
    3414:	5f 4f       	sbci	r21, 0xFF	; 255
    3416:	24 0f       	add	r18, r20
    3418:	35 1f       	adc	r19, r21
    341a:	f9 01       	movw	r30, r18
    341c:	40 81       	ld	r20, Z
    341e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3420:	38 a1       	ldd	r19, Y+32	; 0x20
    3422:	82 0f       	add	r24, r18
    3424:	93 1f       	adc	r25, r19
    3426:	01 96       	adiw	r24, 0x01	; 1
    3428:	fc 01       	movw	r30, r24
    342a:	40 83       	st	Z, r20
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	8f 5f       	subi	r24, 0xFF	; 255
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	dc cf       	rjmp	.-72     	; 0x33ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3434:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3436:	83 30       	cpi	r24, 0x03	; 3
    3438:	19 f4       	brne	.+6      	; 0x3440 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    343a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    343c:	88 23       	and	r24, r24
    343e:	11 f0       	breq	.+4      	; 0x3444 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	47 c0       	rjmp	.+142    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3444:	ce 01       	movw	r24, r28
    3446:	42 96       	adiw	r24, 0x12	; 18
    3448:	9c 01       	movw	r18, r24
    344a:	2e 5f       	subi	r18, 0xFE	; 254
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3450:	7b 85       	ldd	r23, Y+11	; 0x0b
    3452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3454:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	e1 da       	rcall	.-2622   	; 0x2a1c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    345a:	8f 87       	std	Y+15, r24	; 0x0f
    345c:	8f 85       	ldd	r24, Y+15	; 0x0f
    345e:	88 23       	and	r24, r24
    3460:	11 f0       	breq	.+4      	; 0x3466 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3462:	8f 85       	ldd	r24, Y+15	; 0x0f
    3464:	36 c0       	rjmp	.+108    	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3466:	2c 89       	ldd	r18, Y+20	; 0x14
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	9b 85       	ldd	r25, Y+11	; 0x0b
    346c:	01 96       	adiw	r24, 0x01	; 1
    346e:	fc 01       	movw	r30, r24
    3470:	80 81       	ld	r24, Z
    3472:	28 17       	cp	r18, r24
    3474:	41 f4       	brne	.+16     	; 0x3486 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    3476:	2d 89       	ldd	r18, Y+21	; 0x15
    3478:	8a 85       	ldd	r24, Y+10	; 0x0a
    347a:	9b 85       	ldd	r25, Y+11	; 0x0b
    347c:	02 96       	adiw	r24, 0x02	; 2
    347e:	fc 01       	movw	r30, r24
    3480:	80 81       	ld	r24, Z
    3482:	28 17       	cp	r18, r24
    3484:	11 f0       	breq	.+4      	; 0x348a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    3486:	87 e0       	ldi	r24, 0x07	; 7
    3488:	24 c0       	rjmp	.+72     	; 0x34d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    348a:	8a 85       	ldd	r24, Y+10	; 0x0a
    348c:	9b 85       	ldd	r25, Y+11	; 0x0b
    348e:	fc 01       	movw	r30, r24
    3490:	80 81       	ld	r24, Z
    3492:	88 2f       	mov	r24, r24
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	84 70       	andi	r24, 0x04	; 4
    3498:	99 27       	eor	r25, r25
    349a:	89 2b       	or	r24, r25
    349c:	21 f0       	breq	.+8      	; 0x34a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    349e:	8c 81       	ldd	r24, Y+4	; 0x04
    34a0:	8f 5f       	subi	r24, 0xFF	; 255
    34a2:	8c 83       	std	Y+4, r24	; 0x04
    34a4:	f3 cd       	rjmp	.-1050   	; 0x308c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    34ae:	fc 01       	movw	r30, r24
    34b0:	20 81       	ld	r18, Z
    34b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34b4:	98 a1       	ldd	r25, Y+32	; 0x20
    34b6:	fc 01       	movw	r30, r24
    34b8:	23 87       	std	Z+11, r18	; 0x0b
    34ba:	e8 cd       	rjmp	.-1072   	; 0x308c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	89 2f       	mov	r24, r25
    34c0:	88 0f       	add	r24, r24
    34c2:	89 0f       	add	r24, r25
    34c4:	21 e0       	ldi	r18, 0x01	; 1
    34c6:	28 0f       	add	r18, r24
    34c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ca:	98 a1       	ldd	r25, Y+32	; 0x20
    34cc:	fc 01       	movw	r30, r24
    34ce:	20 83       	st	Z, r18
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	a1 96       	adiw	r28, 0x21	; 33
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	1f 91       	pop	r17
    34e4:	0f 91       	pop	r16
    34e6:	ff 90       	pop	r15
    34e8:	ef 90       	pop	r14
    34ea:	cf 90       	pop	r12
    34ec:	af 90       	pop	r10
    34ee:	08 95       	ret

000034f0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    34f0:	cf 93       	push	r28
    34f2:	df 93       	push	r29
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    3504:	ae 01       	movw	r20, r28
    3506:	4c 5f       	subi	r20, 0xFC	; 252
    3508:	5f 4f       	sbci	r21, 0xFF	; 255
    350a:	9e 01       	movw	r18, r28
    350c:	2e 5f       	subi	r18, 0xFE	; 254
    350e:	3f 4f       	sbci	r19, 0xFF	; 255
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	9e 81       	ldd	r25, Y+6	; 0x06
    3514:	b9 01       	movw	r22, r18
    3516:	1f dd       	rcall	.-1474   	; 0x2f56 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    3518:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	88 23       	and	r24, r24
    351e:	19 f0       	breq	.+6      	; 0x3526 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	82 30       	cpi	r24, 0x02	; 2
    3524:	11 f4       	brne	.+4      	; 0x352a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	01 c0       	rjmp	.+2      	; 0x352c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    352a:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    352c:	26 96       	adiw	r28, 0x06	; 6
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	0f be       	out	0x3f, r0	; 63
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	08 95       	ret

0000353e <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	00 d0       	rcall	.+0      	; 0x3544 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	9b 83       	std	Y+3, r25	; 0x03
    354a:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    354c:	2a 81       	ldd	r18, Y+2	; 0x02
    354e:	3b 81       	ldd	r19, Y+3	; 0x03
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	9b 81       	ldd	r25, Y+3	; 0x03
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	b9 01       	movw	r22, r18
    3558:	77 dd       	rcall	.-1298   	; 0x3048 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    355a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	99 81       	ldd	r25, Y+1	; 0x01
    3560:	99 23       	and	r25, r25
    3562:	09 f0       	breq	.+2      	; 0x3566 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3564:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	08 95       	ret

00003572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	00 d0       	rcall	.+0      	; 0x3578 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    3578:	1f 92       	push	r1
    357a:	1f 92       	push	r1
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	7b 83       	std	Y+3, r23	; 0x03
    3584:	6a 83       	std	Y+2, r22	; 0x02
    3586:	5d 83       	std	Y+5, r21	; 0x05
    3588:	4c 83       	std	Y+4, r20	; 0x04
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	88 2f       	mov	r24, r24
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	87 53       	subi	r24, 0x37	; 55
    3592:	9c 4f       	sbci	r25, 0xFC	; 252
    3594:	fc 01       	movw	r30, r24
    3596:	80 81       	ld	r24, Z
    3598:	88 1f       	adc	r24, r24
    359a:	88 27       	eor	r24, r24
    359c:	88 1f       	adc	r24, r24
    359e:	88 23       	and	r24, r24
    35a0:	31 f0       	breq	.+12     	; 0x35ae <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	9b 81       	ldd	r25, Y+3	; 0x03
    35a6:	fc 01       	movw	r30, r24
    35a8:	11 82       	std	Z+1, r1	; 0x01
    35aa:	10 82       	st	Z, r1
    35ac:	72 c0       	rjmp	.+228    	; 0x3692 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	c9 01       	movw	r24, r18
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	82 0f       	add	r24, r18
    35bc:	93 1f       	adc	r25, r19
    35be:	88 0f       	add	r24, r24
    35c0:	99 1f       	adc	r25, r25
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	9c 01       	movw	r18, r24
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	88 2f       	mov	r24, r24
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	87 53       	subi	r24, 0x37	; 55
    35d0:	9c 4f       	sbci	r25, 0xFC	; 252
    35d2:	fc 01       	movw	r30, r24
    35d4:	80 81       	ld	r24, Z
    35d6:	08 2e       	mov	r0, r24
    35d8:	00 0c       	add	r0, r0
    35da:	99 0b       	sbc	r25, r25
    35dc:	28 0f       	add	r18, r24
    35de:	39 1f       	adc	r19, r25
    35e0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <ServoCount>
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	28 17       	cp	r18, r24
    35ea:	39 07       	cpc	r19, r25
    35ec:	4c f5       	brge	.+82     	; 0x3640 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	c9 01       	movw	r24, r18
    35f6:	88 0f       	add	r24, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	82 0f       	add	r24, r18
    35fc:	93 1f       	adc	r25, r19
    35fe:	88 0f       	add	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	88 0f       	add	r24, r24
    3604:	99 1f       	adc	r25, r25
    3606:	9c 01       	movw	r18, r24
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	88 2f       	mov	r24, r24
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	87 53       	subi	r24, 0x37	; 55
    3610:	9c 4f       	sbci	r25, 0xFC	; 252
    3612:	fc 01       	movw	r30, r24
    3614:	80 81       	ld	r24, Z
    3616:	08 2e       	mov	r0, r24
    3618:	00 0c       	add	r0, r0
    361a:	99 0b       	sbc	r25, r25
    361c:	28 0f       	add	r18, r24
    361e:	39 1f       	adc	r19, r25
    3620:	c9 01       	movw	r24, r18
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	82 0f       	add	r24, r18
    3628:	93 1f       	adc	r25, r19
    362a:	87 5c       	subi	r24, 0xC7	; 199
    362c:	9c 4f       	sbci	r25, 0xFC	; 252
    362e:	fc 01       	movw	r30, r24
    3630:	80 81       	ld	r24, Z
    3632:	86 fb       	bst	r24, 6
    3634:	88 27       	eor	r24, r24
    3636:	80 f9       	bld	r24, 0
    3638:	81 30       	cpi	r24, 0x01	; 1
    363a:	11 f4       	brne	.+4      	; 0x3640 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	88 23       	and	r24, r24
    3644:	31 f1       	breq	.+76     	; 0x3692 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	c9 01       	movw	r24, r18
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	82 0f       	add	r24, r18
    3654:	93 1f       	adc	r25, r19
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	9c 01       	movw	r18, r24
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	88 2f       	mov	r24, r24
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	87 53       	subi	r24, 0x37	; 55
    3668:	9c 4f       	sbci	r25, 0xFC	; 252
    366a:	fc 01       	movw	r30, r24
    366c:	80 81       	ld	r24, Z
    366e:	08 2e       	mov	r0, r24
    3670:	00 0c       	add	r0, r0
    3672:	99 0b       	sbc	r25, r25
    3674:	28 0f       	add	r18, r24
    3676:	39 1f       	adc	r19, r25
    3678:	c9 01       	movw	r24, r18
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	82 0f       	add	r24, r18
    3680:	93 1f       	adc	r25, r19
    3682:	87 5c       	subi	r24, 0xC7	; 199
    3684:	9c 4f       	sbci	r25, 0xFC	; 252
    3686:	fc 01       	movw	r30, r24
    3688:	80 81       	ld	r24, Z
    368a:	8f 73       	andi	r24, 0x3F	; 63
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	9c 01       	movw	r18, r24
    369a:	27 53       	subi	r18, 0x37	; 55
    369c:	3c 4f       	sbci	r19, 0xFC	; 252
    369e:	f9 01       	movw	r30, r18
    36a0:	20 81       	ld	r18, Z
    36a2:	2f 5f       	subi	r18, 0xFF	; 255
    36a4:	87 53       	subi	r24, 0x37	; 55
    36a6:	9c 4f       	sbci	r25, 0xFC	; 252
    36a8:	fc 01       	movw	r30, r24
    36aa:	20 83       	st	Z, r18
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	c9 01       	movw	r24, r18
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	88 0f       	add	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	9c 01       	movw	r18, r24
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	88 2f       	mov	r24, r24
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	87 53       	subi	r24, 0x37	; 55
    36ce:	9c 4f       	sbci	r25, 0xFC	; 252
    36d0:	fc 01       	movw	r30, r24
    36d2:	80 81       	ld	r24, Z
    36d4:	08 2e       	mov	r0, r24
    36d6:	00 0c       	add	r0, r0
    36d8:	99 0b       	sbc	r25, r25
    36da:	28 0f       	add	r18, r24
    36dc:	39 1f       	adc	r19, r25
    36de:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <ServoCount>
    36e2:	88 2f       	mov	r24, r24
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	28 17       	cp	r18, r24
    36e8:	39 07       	cpc	r19, r25
    36ea:	5c f4       	brge	.+22     	; 0x3702 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	87 53       	subi	r24, 0x37	; 55
    36f4:	9c 4f       	sbci	r25, 0xFC	; 252
    36f6:	fc 01       	movw	r30, r24
    36f8:	80 81       	ld	r24, Z
    36fa:	8c 30       	cpi	r24, 0x0C	; 12
    36fc:	14 f4       	brge	.+4      	; 0x3702 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	88 23       	and	r24, r24
    3706:	09 f4       	brne	.+2      	; 0x370a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    3708:	7f c0       	rjmp	.+254    	; 0x3808 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	9b 81       	ldd	r25, Y+3	; 0x03
    370e:	fc 01       	movw	r30, r24
    3710:	40 81       	ld	r20, Z
    3712:	51 81       	ldd	r21, Z+1	; 0x01
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	c9 01       	movw	r24, r18
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	82 0f       	add	r24, r18
    3722:	93 1f       	adc	r25, r19
    3724:	88 0f       	add	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	9c 01       	movw	r18, r24
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	87 53       	subi	r24, 0x37	; 55
    3736:	9c 4f       	sbci	r25, 0xFC	; 252
    3738:	fc 01       	movw	r30, r24
    373a:	80 81       	ld	r24, Z
    373c:	08 2e       	mov	r0, r24
    373e:	00 0c       	add	r0, r0
    3740:	99 0b       	sbc	r25, r25
    3742:	28 0f       	add	r18, r24
    3744:	39 1f       	adc	r19, r25
    3746:	c9 01       	movw	r24, r18
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	82 0f       	add	r24, r18
    374e:	93 1f       	adc	r25, r19
    3750:	86 5c       	subi	r24, 0xC6	; 198
    3752:	9c 4f       	sbci	r25, 0xFC	; 252
    3754:	fc 01       	movw	r30, r24
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	9a 01       	movw	r18, r20
    375c:	28 0f       	add	r18, r24
    375e:	39 1f       	adc	r19, r25
    3760:	8c 81       	ldd	r24, Y+4	; 0x04
    3762:	9d 81       	ldd	r25, Y+5	; 0x05
    3764:	fc 01       	movw	r30, r24
    3766:	31 83       	std	Z+1, r19	; 0x01
    3768:	20 83       	st	Z, r18
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	c9 01       	movw	r24, r18
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	82 0f       	add	r24, r18
    3778:	93 1f       	adc	r25, r19
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	88 0f       	add	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	9c 01       	movw	r18, r24
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	88 2f       	mov	r24, r24
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	87 53       	subi	r24, 0x37	; 55
    378c:	9c 4f       	sbci	r25, 0xFC	; 252
    378e:	fc 01       	movw	r30, r24
    3790:	80 81       	ld	r24, Z
    3792:	08 2e       	mov	r0, r24
    3794:	00 0c       	add	r0, r0
    3796:	99 0b       	sbc	r25, r25
    3798:	28 0f       	add	r18, r24
    379a:	39 1f       	adc	r19, r25
    379c:	c9 01       	movw	r24, r18
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	82 0f       	add	r24, r18
    37a4:	93 1f       	adc	r25, r19
    37a6:	87 5c       	subi	r24, 0xC7	; 199
    37a8:	9c 4f       	sbci	r25, 0xFC	; 252
    37aa:	fc 01       	movw	r30, r24
    37ac:	80 81       	ld	r24, Z
    37ae:	86 fb       	bst	r24, 6
    37b0:	88 27       	eor	r24, r24
    37b2:	80 f9       	bld	r24, 0
    37b4:	88 23       	and	r24, r24
    37b6:	09 f4       	brne	.+2      	; 0x37ba <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    37b8:	51 c0       	rjmp	.+162    	; 0x385c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	c9 01       	movw	r24, r18
    37c2:	88 0f       	add	r24, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	82 0f       	add	r24, r18
    37c8:	93 1f       	adc	r25, r19
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	9c 01       	movw	r18, r24
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	88 2f       	mov	r24, r24
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	87 53       	subi	r24, 0x37	; 55
    37dc:	9c 4f       	sbci	r25, 0xFC	; 252
    37de:	fc 01       	movw	r30, r24
    37e0:	80 81       	ld	r24, Z
    37e2:	08 2e       	mov	r0, r24
    37e4:	00 0c       	add	r0, r0
    37e6:	99 0b       	sbc	r25, r25
    37e8:	28 0f       	add	r18, r24
    37ea:	39 1f       	adc	r19, r25
    37ec:	c9 01       	movw	r24, r18
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	82 0f       	add	r24, r18
    37f4:	93 1f       	adc	r25, r19
    37f6:	87 5c       	subi	r24, 0xC7	; 199
    37f8:	9c 4f       	sbci	r25, 0xFC	; 252
    37fa:	fc 01       	movw	r30, r24
    37fc:	80 81       	ld	r24, Z
    37fe:	8f 73       	andi	r24, 0x3F	; 63
    3800:	61 e0       	ldi	r22, 0x01	; 1
    3802:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    3806:	2a c0       	rjmp	.+84     	; 0x385c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	9b 81       	ldd	r25, Y+3	; 0x03
    380c:	fc 01       	movw	r30, r24
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	04 96       	adiw	r24, 0x04	; 4
    3814:	21 e0       	ldi	r18, 0x01	; 1
    3816:	80 34       	cpi	r24, 0x40	; 64
    3818:	9c 49       	sbci	r25, 0x9C	; 156
    381a:	08 f0       	brcs	.+2      	; 0x381e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	22 23       	and	r18, r18
    3820:	41 f0       	breq	.+16     	; 0x3832 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3822:	8c 81       	ldd	r24, Y+4	; 0x04
    3824:	9d 81       	ldd	r25, Y+5	; 0x05
    3826:	20 e4       	ldi	r18, 0x40	; 64
    3828:	3c e9       	ldi	r19, 0x9C	; 156
    382a:	fc 01       	movw	r30, r24
    382c:	31 83       	std	Z+1, r19	; 0x01
    382e:	20 83       	st	Z, r18
    3830:	0d c0       	rjmp	.+26     	; 0x384c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3832:	8a 81       	ldd	r24, Y+2	; 0x02
    3834:	9b 81       	ldd	r25, Y+3	; 0x03
    3836:	fc 01       	movw	r30, r24
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	9c 01       	movw	r18, r24
    383e:	2c 5f       	subi	r18, 0xFC	; 252
    3840:	3f 4f       	sbci	r19, 0xFF	; 255
    3842:	8c 81       	ldd	r24, Y+4	; 0x04
    3844:	9d 81       	ldd	r25, Y+5	; 0x05
    3846:	fc 01       	movw	r30, r24
    3848:	31 83       	std	Z+1, r19	; 0x01
    384a:	20 83       	st	Z, r18
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	88 2f       	mov	r24, r24
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	87 53       	subi	r24, 0x37	; 55
    3854:	9c 4f       	sbci	r25, 0xFC	; 252
    3856:	2f ef       	ldi	r18, 0xFF	; 255
    3858:	fc 01       	movw	r30, r24
    385a:	20 83       	st	Z, r18
    385c:	00 00       	nop
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	08 95       	ret

0000386e <__vector_17>:
    386e:	1f 92       	push	r1
    3870:	0f 92       	push	r0
    3872:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3876:	0f 92       	push	r0
    3878:	11 24       	eor	r1, r1
    387a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    387e:	0f 92       	push	r0
    3880:	2f 93       	push	r18
    3882:	3f 93       	push	r19
    3884:	4f 93       	push	r20
    3886:	5f 93       	push	r21
    3888:	6f 93       	push	r22
    388a:	7f 93       	push	r23
    388c:	8f 93       	push	r24
    388e:	9f 93       	push	r25
    3890:	af 93       	push	r26
    3892:	bf 93       	push	r27
    3894:	ef 93       	push	r30
    3896:	ff 93       	push	r31
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	48 e8       	ldi	r20, 0x88	; 136
    38a2:	50 e0       	ldi	r21, 0x00	; 0
    38a4:	64 e8       	ldi	r22, 0x84	; 132
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	63 de       	rcall	.-826    	; 0x3572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    38ac:	00 00       	nop
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	ff 91       	pop	r31
    38b4:	ef 91       	pop	r30
    38b6:	bf 91       	pop	r27
    38b8:	af 91       	pop	r26
    38ba:	9f 91       	pop	r25
    38bc:	8f 91       	pop	r24
    38be:	7f 91       	pop	r23
    38c0:	6f 91       	pop	r22
    38c2:	5f 91       	pop	r21
    38c4:	4f 91       	pop	r20
    38c6:	3f 91       	pop	r19
    38c8:	2f 91       	pop	r18
    38ca:	0f 90       	pop	r0
    38cc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38d0:	0f 90       	pop	r0
    38d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38d6:	0f 90       	pop	r0
    38d8:	1f 90       	pop	r1
    38da:	18 95       	reti

000038dc <__vector_32>:
    38dc:	1f 92       	push	r1
    38de:	0f 92       	push	r0
    38e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38e4:	0f 92       	push	r0
    38e6:	11 24       	eor	r1, r1
    38e8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38ec:	0f 92       	push	r0
    38ee:	2f 93       	push	r18
    38f0:	3f 93       	push	r19
    38f2:	4f 93       	push	r20
    38f4:	5f 93       	push	r21
    38f6:	6f 93       	push	r22
    38f8:	7f 93       	push	r23
    38fa:	8f 93       	push	r24
    38fc:	9f 93       	push	r25
    38fe:	af 93       	push	r26
    3900:	bf 93       	push	r27
    3902:	ef 93       	push	r30
    3904:	ff 93       	push	r31
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
    390e:	48 e9       	ldi	r20, 0x98	; 152
    3910:	50 e0       	ldi	r21, 0x00	; 0
    3912:	64 e9       	ldi	r22, 0x94	; 148
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	82 e0       	ldi	r24, 0x02	; 2
    3918:	2c de       	rcall	.-936    	; 0x3572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    391a:	00 00       	nop
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	ff 91       	pop	r31
    3922:	ef 91       	pop	r30
    3924:	bf 91       	pop	r27
    3926:	af 91       	pop	r26
    3928:	9f 91       	pop	r25
    392a:	8f 91       	pop	r24
    392c:	7f 91       	pop	r23
    392e:	6f 91       	pop	r22
    3930:	5f 91       	pop	r21
    3932:	4f 91       	pop	r20
    3934:	3f 91       	pop	r19
    3936:	2f 91       	pop	r18
    3938:	0f 90       	pop	r0
    393a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    393e:	0f 90       	pop	r0
    3940:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3944:	0f 90       	pop	r0
    3946:	1f 90       	pop	r1
    3948:	18 95       	reti

0000394a <__vector_42>:
    394a:	1f 92       	push	r1
    394c:	0f 92       	push	r0
    394e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3952:	0f 92       	push	r0
    3954:	11 24       	eor	r1, r1
    3956:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    395a:	0f 92       	push	r0
    395c:	2f 93       	push	r18
    395e:	3f 93       	push	r19
    3960:	4f 93       	push	r20
    3962:	5f 93       	push	r21
    3964:	6f 93       	push	r22
    3966:	7f 93       	push	r23
    3968:	8f 93       	push	r24
    396a:	9f 93       	push	r25
    396c:	af 93       	push	r26
    396e:	bf 93       	push	r27
    3970:	ef 93       	push	r30
    3972:	ff 93       	push	r31
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	48 ea       	ldi	r20, 0xA8	; 168
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	64 ea       	ldi	r22, 0xA4	; 164
    3982:	70 e0       	ldi	r23, 0x00	; 0
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	f5 dd       	rcall	.-1046   	; 0x3572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3988:	00 00       	nop
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	ff 91       	pop	r31
    3990:	ef 91       	pop	r30
    3992:	bf 91       	pop	r27
    3994:	af 91       	pop	r26
    3996:	9f 91       	pop	r25
    3998:	8f 91       	pop	r24
    399a:	7f 91       	pop	r23
    399c:	6f 91       	pop	r22
    399e:	5f 91       	pop	r21
    39a0:	4f 91       	pop	r20
    39a2:	3f 91       	pop	r19
    39a4:	2f 91       	pop	r18
    39a6:	0f 90       	pop	r0
    39a8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    39ac:	0f 90       	pop	r0
    39ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39b2:	0f 90       	pop	r0
    39b4:	1f 90       	pop	r1
    39b6:	18 95       	reti

000039b8 <__vector_47>:
    39b8:	1f 92       	push	r1
    39ba:	0f 92       	push	r0
    39bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39c0:	0f 92       	push	r0
    39c2:	11 24       	eor	r1, r1
    39c4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    39c8:	0f 92       	push	r0
    39ca:	2f 93       	push	r18
    39cc:	3f 93       	push	r19
    39ce:	4f 93       	push	r20
    39d0:	5f 93       	push	r21
    39d2:	6f 93       	push	r22
    39d4:	7f 93       	push	r23
    39d6:	8f 93       	push	r24
    39d8:	9f 93       	push	r25
    39da:	af 93       	push	r26
    39dc:	bf 93       	push	r27
    39de:	ef 93       	push	r30
    39e0:	ff 93       	push	r31
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	48 e2       	ldi	r20, 0x28	; 40
    39ec:	51 e0       	ldi	r21, 0x01	; 1
    39ee:	64 e2       	ldi	r22, 0x24	; 36
    39f0:	71 e0       	ldi	r23, 0x01	; 1
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	be dd       	rcall	.-1156   	; 0x3572 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    39f6:	00 00       	nop
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	ff 91       	pop	r31
    39fe:	ef 91       	pop	r30
    3a00:	bf 91       	pop	r27
    3a02:	af 91       	pop	r26
    3a04:	9f 91       	pop	r25
    3a06:	8f 91       	pop	r24
    3a08:	7f 91       	pop	r23
    3a0a:	6f 91       	pop	r22
    3a0c:	5f 91       	pop	r21
    3a0e:	4f 91       	pop	r20
    3a10:	3f 91       	pop	r19
    3a12:	2f 91       	pop	r18
    3a14:	0f 90       	pop	r0
    3a16:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a1a:	0f 90       	pop	r0
    3a1c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a20:	0f 90       	pop	r0
    3a22:	1f 90       	pop	r1
    3a24:	18 95       	reti

00003a26 <_ZL7initISR18timer16_Sequence_t>:
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	1f 92       	push	r1
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	89 83       	std	Y+1, r24	; 0x01
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	81 30       	cpi	r24, 0x01	; 1
    3a36:	01 f5       	brne	.+64     	; 0x3a78 <_ZL7initISR18timer16_Sequence_t+0x52>
    3a38:	80 e8       	ldi	r24, 0x80	; 128
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	10 82       	st	Z, r1
    3a40:	81 e8       	ldi	r24, 0x81	; 129
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	22 e0       	ldi	r18, 0x02	; 2
    3a46:	fc 01       	movw	r30, r24
    3a48:	20 83       	st	Z, r18
    3a4a:	84 e8       	ldi	r24, 0x84	; 132
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	fc 01       	movw	r30, r24
    3a50:	11 82       	std	Z+1, r1	; 0x01
    3a52:	10 82       	st	Z, r1
    3a54:	86 e3       	ldi	r24, 0x36	; 54
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	26 e3       	ldi	r18, 0x36	; 54
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	f9 01       	movw	r30, r18
    3a5e:	20 81       	ld	r18, Z
    3a60:	22 60       	ori	r18, 0x02	; 2
    3a62:	fc 01       	movw	r30, r24
    3a64:	20 83       	st	Z, r18
    3a66:	8f e6       	ldi	r24, 0x6F	; 111
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	2f e6       	ldi	r18, 0x6F	; 111
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	f9 01       	movw	r30, r18
    3a70:	20 81       	ld	r18, Z
    3a72:	22 60       	ori	r18, 0x02	; 2
    3a74:	fc 01       	movw	r30, r24
    3a76:	20 83       	st	Z, r18
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	82 30       	cpi	r24, 0x02	; 2
    3a7c:	c1 f4       	brne	.+48     	; 0x3aae <_ZL7initISR18timer16_Sequence_t+0x88>
    3a7e:	80 e9       	ldi	r24, 0x90	; 144
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	fc 01       	movw	r30, r24
    3a84:	10 82       	st	Z, r1
    3a86:	81 e9       	ldi	r24, 0x91	; 145
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	22 e0       	ldi	r18, 0x02	; 2
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	20 83       	st	Z, r18
    3a90:	84 e9       	ldi	r24, 0x94	; 148
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	fc 01       	movw	r30, r24
    3a96:	11 82       	std	Z+1, r1	; 0x01
    3a98:	10 82       	st	Z, r1
    3a9a:	88 e3       	ldi	r24, 0x38	; 56
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	22 e0       	ldi	r18, 0x02	; 2
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	20 83       	st	Z, r18
    3aa4:	81 e7       	ldi	r24, 0x71	; 113
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	22 e0       	ldi	r18, 0x02	; 2
    3aaa:	fc 01       	movw	r30, r24
    3aac:	20 83       	st	Z, r18
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	83 30       	cpi	r24, 0x03	; 3
    3ab2:	c1 f4       	brne	.+48     	; 0x3ae4 <_ZL7initISR18timer16_Sequence_t+0xbe>
    3ab4:	80 ea       	ldi	r24, 0xA0	; 160
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	fc 01       	movw	r30, r24
    3aba:	10 82       	st	Z, r1
    3abc:	81 ea       	ldi	r24, 0xA1	; 161
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	22 e0       	ldi	r18, 0x02	; 2
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	20 83       	st	Z, r18
    3ac6:	84 ea       	ldi	r24, 0xA4	; 164
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	fc 01       	movw	r30, r24
    3acc:	11 82       	std	Z+1, r1	; 0x01
    3ace:	10 82       	st	Z, r1
    3ad0:	89 e3       	ldi	r24, 0x39	; 57
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	22 e0       	ldi	r18, 0x02	; 2
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	20 83       	st	Z, r18
    3ada:	82 e7       	ldi	r24, 0x72	; 114
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	22 e0       	ldi	r18, 0x02	; 2
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	20 83       	st	Z, r18
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	88 23       	and	r24, r24
    3ae8:	c1 f4       	brne	.+48     	; 0x3b1a <_ZL7initISR18timer16_Sequence_t+0xf4>
    3aea:	80 e2       	ldi	r24, 0x20	; 32
    3aec:	91 e0       	ldi	r25, 0x01	; 1
    3aee:	fc 01       	movw	r30, r24
    3af0:	10 82       	st	Z, r1
    3af2:	81 e2       	ldi	r24, 0x21	; 33
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	22 e0       	ldi	r18, 0x02	; 2
    3af8:	fc 01       	movw	r30, r24
    3afa:	20 83       	st	Z, r18
    3afc:	84 e2       	ldi	r24, 0x24	; 36
    3afe:	91 e0       	ldi	r25, 0x01	; 1
    3b00:	fc 01       	movw	r30, r24
    3b02:	11 82       	std	Z+1, r1	; 0x01
    3b04:	10 82       	st	Z, r1
    3b06:	8a e3       	ldi	r24, 0x3A	; 58
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	22 e0       	ldi	r18, 0x02	; 2
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	20 83       	st	Z, r18
    3b10:	83 e7       	ldi	r24, 0x73	; 115
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	22 e0       	ldi	r18, 0x02	; 2
    3b16:	fc 01       	movw	r30, r24
    3b18:	20 83       	st	Z, r18
    3b1a:	00 00       	nop
    3b1c:	0f 90       	pop	r0
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

00003b24 <_ZL13isTimerActive18timer16_Sequence_t>:
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	1f 92       	push	r1
    3b2a:	1f 92       	push	r1
    3b2c:	cd b7       	in	r28, 0x3d	; 61
    3b2e:	de b7       	in	r29, 0x3e	; 62
    3b30:	8a 83       	std	Y+2, r24	; 0x02
    3b32:	19 82       	std	Y+1, r1	; 0x01
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	8c 30       	cpi	r24, 0x0C	; 12
    3b38:	30 f5       	brcc	.+76     	; 0x3b86 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    3b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	c9 01       	movw	r24, r18
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	82 0f       	add	r24, r18
    3b48:	93 1f       	adc	r25, r19
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	9c 01       	movw	r18, r24
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	88 2f       	mov	r24, r24
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	28 0f       	add	r18, r24
    3b5c:	39 1f       	adc	r19, r25
    3b5e:	c9 01       	movw	r24, r18
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	82 0f       	add	r24, r18
    3b66:	93 1f       	adc	r25, r19
    3b68:	87 5c       	subi	r24, 0xC7	; 199
    3b6a:	9c 4f       	sbci	r25, 0xFC	; 252
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	80 81       	ld	r24, Z
    3b70:	86 fb       	bst	r24, 6
    3b72:	88 27       	eor	r24, r24
    3b74:	80 f9       	bld	r24, 0
    3b76:	81 30       	cpi	r24, 0x01	; 1
    3b78:	11 f4       	brne	.+4      	; 0x3b7e <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	05 c0       	rjmp	.+10     	; 0x3b88 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	8f 5f       	subi	r24, 0xFF	; 255
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	d7 cf       	rjmp	.-82     	; 0x3b34 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	08 95       	ret

00003b92 <_ZN5ServoC1Ev>:
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	1f 92       	push	r1
    3b98:	1f 92       	push	r1
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
    3b9e:	9a 83       	std	Y+2, r25	; 0x02
    3ba0:	89 83       	std	Y+1, r24	; 0x01
    3ba2:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <ServoCount>
    3ba6:	80 33       	cpi	r24, 0x30	; 48
    3ba8:	e8 f4       	brcc	.+58     	; 0x3be4 <_ZN5ServoC1Ev+0x52>
    3baa:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <ServoCount>
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	82 0f       	add	r24, r18
    3bb2:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <ServoCount>
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	fc 01       	movw	r30, r24
    3bbc:	20 83       	st	Z, r18
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	80 81       	ld	r24, Z
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	c9 01       	movw	r24, r18
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	82 0f       	add	r24, r18
    3bd2:	93 1f       	adc	r25, r19
    3bd4:	86 5c       	subi	r24, 0xC6	; 198
    3bd6:	9c 4f       	sbci	r25, 0xFC	; 252
    3bd8:	28 eb       	ldi	r18, 0xB8	; 184
    3bda:	3b e0       	ldi	r19, 0x0B	; 11
    3bdc:	fc 01       	movw	r30, r24
    3bde:	31 83       	std	Z+1, r19	; 0x01
    3be0:	20 83       	st	Z, r18
    3be2:	05 c0       	rjmp	.+10     	; 0x3bee <_ZN5ServoC1Ev+0x5c>
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	9a 81       	ldd	r25, Y+2	; 0x02
    3be8:	2f ef       	ldi	r18, 0xFF	; 255
    3bea:	fc 01       	movw	r30, r24
    3bec:	20 83       	st	Z, r18
    3bee:	00 00       	nop
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	08 95       	ret

00003bfa <_ZN5Servo6attachEi>:
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <_ZN5Servo6attachEi+0x6>
    3c00:	1f 92       	push	r1
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	7c 83       	std	Y+4, r23	; 0x04
    3c0c:	6b 83       	std	Y+3, r22	; 0x03
    3c0e:	6b 81       	ldd	r22, Y+3	; 0x03
    3c10:	7c 81       	ldd	r23, Y+4	; 0x04
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	20 e6       	ldi	r18, 0x60	; 96
    3c18:	39 e0       	ldi	r19, 0x09	; 9
    3c1a:	40 e2       	ldi	r20, 0x20	; 32
    3c1c:	52 e0       	ldi	r21, 0x02	; 2
    3c1e:	07 d0       	rcall	.+14     	; 0x3c2e <_ZN5Servo6attachEiii>
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	08 95       	ret

00003c2e <_ZN5Servo6attachEiii>:
    3c2e:	cf 93       	push	r28
    3c30:	df 93       	push	r29
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	29 97       	sbiw	r28, 0x09	; 9
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	9b 83       	std	Y+3, r25	; 0x03
    3c44:	8a 83       	std	Y+2, r24	; 0x02
    3c46:	7d 83       	std	Y+5, r23	; 0x05
    3c48:	6c 83       	std	Y+4, r22	; 0x04
    3c4a:	5f 83       	std	Y+7, r21	; 0x07
    3c4c:	4e 83       	std	Y+6, r20	; 0x06
    3c4e:	39 87       	std	Y+9, r19	; 0x09
    3c50:	28 87       	std	Y+8, r18	; 0x08
    3c52:	8a 81       	ldd	r24, Y+2	; 0x02
    3c54:	9b 81       	ldd	r25, Y+3	; 0x03
    3c56:	fc 01       	movw	r30, r24
    3c58:	80 81       	ld	r24, Z
    3c5a:	80 33       	cpi	r24, 0x30	; 48
    3c5c:	08 f0       	brcs	.+2      	; 0x3c60 <_ZN5Servo6attachEiii+0x32>
    3c5e:	6b c0       	rjmp	.+214    	; 0x3d36 <_ZN5Servo6attachEiii+0x108>
    3c60:	8c 81       	ldd	r24, Y+4	; 0x04
    3c62:	61 e0       	ldi	r22, 0x01	; 1
    3c64:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	80 81       	ld	r24, Z
    3c70:	28 2f       	mov	r18, r24
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	8c 81       	ldd	r24, Y+4	; 0x04
    3c76:	48 2f       	mov	r20, r24
    3c78:	4f 73       	andi	r20, 0x3F	; 63
    3c7a:	c9 01       	movw	r24, r18
    3c7c:	88 0f       	add	r24, r24
    3c7e:	99 1f       	adc	r25, r25
    3c80:	82 0f       	add	r24, r18
    3c82:	93 1f       	adc	r25, r19
    3c84:	87 5c       	subi	r24, 0xC7	; 199
    3c86:	9c 4f       	sbci	r25, 0xFC	; 252
    3c88:	24 2f       	mov	r18, r20
    3c8a:	2f 73       	andi	r18, 0x3F	; 63
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	30 81       	ld	r19, Z
    3c90:	30 7c       	andi	r19, 0xC0	; 192
    3c92:	23 2b       	or	r18, r19
    3c94:	fc 01       	movw	r30, r24
    3c96:	20 83       	st	Z, r18
    3c98:	20 e2       	ldi	r18, 0x20	; 32
    3c9a:	32 e0       	ldi	r19, 0x02	; 2
    3c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3ca0:	a9 01       	movw	r20, r18
    3ca2:	48 1b       	sub	r20, r24
    3ca4:	59 0b       	sbc	r21, r25
    3ca6:	ca 01       	movw	r24, r20
    3ca8:	99 23       	and	r25, r25
    3caa:	0c f4       	brge	.+2      	; 0x3cae <_ZN5Servo6attachEiii+0x80>
    3cac:	03 96       	adiw	r24, 0x03	; 3
    3cae:	95 95       	asr	r25
    3cb0:	87 95       	ror	r24
    3cb2:	95 95       	asr	r25
    3cb4:	87 95       	ror	r24
    3cb6:	28 2f       	mov	r18, r24
    3cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cba:	9b 81       	ldd	r25, Y+3	; 0x03
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	21 83       	std	Z+1, r18	; 0x01
    3cc0:	20 e6       	ldi	r18, 0x60	; 96
    3cc2:	39 e0       	ldi	r19, 0x09	; 9
    3cc4:	88 85       	ldd	r24, Y+8	; 0x08
    3cc6:	99 85       	ldd	r25, Y+9	; 0x09
    3cc8:	a9 01       	movw	r20, r18
    3cca:	48 1b       	sub	r20, r24
    3ccc:	59 0b       	sbc	r21, r25
    3cce:	ca 01       	movw	r24, r20
    3cd0:	99 23       	and	r25, r25
    3cd2:	0c f4       	brge	.+2      	; 0x3cd6 <_ZN5Servo6attachEiii+0xa8>
    3cd4:	03 96       	adiw	r24, 0x03	; 3
    3cd6:	95 95       	asr	r25
    3cd8:	87 95       	ror	r24
    3cda:	95 95       	asr	r25
    3cdc:	87 95       	ror	r24
    3cde:	28 2f       	mov	r18, r24
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	22 83       	std	Z+2, r18	; 0x02
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	9b 81       	ldd	r25, Y+3	; 0x03
    3cec:	fc 01       	movw	r30, r24
    3cee:	90 81       	ld	r25, Z
    3cf0:	8b ea       	ldi	r24, 0xAB	; 171
    3cf2:	98 9f       	mul	r25, r24
    3cf4:	81 2d       	mov	r24, r1
    3cf6:	11 24       	eor	r1, r1
    3cf8:	86 95       	lsr	r24
    3cfa:	86 95       	lsr	r24
    3cfc:	86 95       	lsr	r24
    3cfe:	89 83       	std	Y+1, r24	; 0x01
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	10 df       	rcall	.-480    	; 0x3b24 <_ZL13isTimerActive18timer16_Sequence_t>
    3d04:	98 2f       	mov	r25, r24
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	89 27       	eor	r24, r25
    3d0a:	88 23       	and	r24, r24
    3d0c:	11 f0       	breq	.+4      	; 0x3d12 <_ZN5Servo6attachEiii+0xe4>
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	8a de       	rcall	.-748    	; 0x3a26 <_ZL7initISR18timer16_Sequence_t>
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	9b 81       	ldd	r25, Y+3	; 0x03
    3d16:	fc 01       	movw	r30, r24
    3d18:	80 81       	ld	r24, Z
    3d1a:	28 2f       	mov	r18, r24
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	c9 01       	movw	r24, r18
    3d20:	88 0f       	add	r24, r24
    3d22:	99 1f       	adc	r25, r25
    3d24:	82 0f       	add	r24, r18
    3d26:	93 1f       	adc	r25, r19
    3d28:	87 5c       	subi	r24, 0xC7	; 199
    3d2a:	9c 4f       	sbci	r25, 0xFC	; 252
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	20 81       	ld	r18, Z
    3d30:	20 64       	ori	r18, 0x40	; 64
    3d32:	fc 01       	movw	r30, r24
    3d34:	20 83       	st	Z, r18
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	80 81       	ld	r24, Z
    3d3e:	29 96       	adiw	r28, 0x09	; 9
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	f8 94       	cli
    3d44:	de bf       	out	0x3e, r29	; 62
    3d46:	0f be       	out	0x3f, r0	; 63
    3d48:	cd bf       	out	0x3d, r28	; 61
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	08 95       	ret

00003d50 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    3d50:	6f 92       	push	r6
    3d52:	7f 92       	push	r7
    3d54:	8f 92       	push	r8
    3d56:	9f 92       	push	r9
    3d58:	af 92       	push	r10
    3d5a:	bf 92       	push	r11
    3d5c:	cf 92       	push	r12
    3d5e:	df 92       	push	r13
    3d60:	ef 92       	push	r14
    3d62:	ff 92       	push	r15
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <_ZN5Servo5writeEi+0x1e>
    3d6e:	1f 92       	push	r1
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	9a 83       	std	Y+2, r25	; 0x02
    3d76:	89 83       	std	Y+1, r24	; 0x01
    3d78:	7c 83       	std	Y+4, r23	; 0x04
    3d7a:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    3d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d80:	80 32       	cpi	r24, 0x20	; 32
    3d82:	92 40       	sbci	r25, 0x02	; 2
    3d84:	0c f0       	brlt	.+2      	; 0x3d88 <_ZN5Servo5writeEi+0x38>
    3d86:	5c c0       	rjmp	.+184    	; 0x3e40 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	99 23       	and	r25, r25
    3d8e:	14 f4       	brge	.+4      	; 0x3d94 <_ZN5Servo5writeEi+0x44>
    3d90:	1c 82       	std	Y+4, r1	; 0x04
    3d92:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    3d94:	8b 81       	ldd	r24, Y+3	; 0x03
    3d96:	9c 81       	ldd	r25, Y+4	; 0x04
    3d98:	85 3b       	cpi	r24, 0xB5	; 181
    3d9a:	91 05       	cpc	r25, r1
    3d9c:	24 f0       	brlt	.+8      	; 0x3da6 <_ZN5Servo5writeEi+0x56>
    3d9e:	84 eb       	ldi	r24, 0xB4	; 180
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	9c 83       	std	Y+4, r25	; 0x04
    3da4:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	9a 81       	ldd	r25, Y+2	; 0x02
    3daa:	fc 01       	movw	r30, r24
    3dac:	82 81       	ldd	r24, Z+2	; 0x02
    3dae:	08 2e       	mov	r0, r24
    3db0:	00 0c       	add	r0, r0
    3db2:	99 0b       	sbc	r25, r25
    3db4:	28 e5       	ldi	r18, 0x58	; 88
    3db6:	32 e0       	ldi	r19, 0x02	; 2
    3db8:	a9 01       	movw	r20, r18
    3dba:	48 1b       	sub	r20, r24
    3dbc:	59 0b       	sbc	r21, r25
    3dbe:	ca 01       	movw	r24, r20
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	88 0f       	add	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	09 2e       	mov	r0, r25
    3dca:	00 0c       	add	r0, r0
    3dcc:	aa 0b       	sbc	r26, r26
    3dce:	bb 0b       	sbc	r27, r27
    3dd0:	29 81       	ldd	r18, Y+1	; 0x01
    3dd2:	3a 81       	ldd	r19, Y+2	; 0x02
    3dd4:	f9 01       	movw	r30, r18
    3dd6:	21 81       	ldd	r18, Z+1	; 0x01
    3dd8:	02 2e       	mov	r0, r18
    3dda:	00 0c       	add	r0, r0
    3ddc:	33 0b       	sbc	r19, r19
    3dde:	48 e8       	ldi	r20, 0x88	; 136
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	ba 01       	movw	r22, r20
    3de4:	62 1b       	sub	r22, r18
    3de6:	73 0b       	sbc	r23, r19
    3de8:	9b 01       	movw	r18, r22
    3dea:	22 0f       	add	r18, r18
    3dec:	33 1f       	adc	r19, r19
    3dee:	22 0f       	add	r18, r18
    3df0:	33 1f       	adc	r19, r19
    3df2:	03 2e       	mov	r0, r19
    3df4:	00 0c       	add	r0, r0
    3df6:	44 0b       	sbc	r20, r20
    3df8:	55 0b       	sbc	r21, r21
    3dfa:	6b 81       	ldd	r22, Y+3	; 0x03
    3dfc:	7c 81       	ldd	r23, Y+4	; 0x04
    3dfe:	3b 01       	movw	r6, r22
    3e00:	77 0f       	add	r23, r23
    3e02:	88 08       	sbc	r8, r8
    3e04:	99 08       	sbc	r9, r9
    3e06:	6b 2f       	mov	r22, r27
    3e08:	6f 93       	push	r22
    3e0a:	6a 2f       	mov	r22, r26
    3e0c:	6f 93       	push	r22
    3e0e:	69 2f       	mov	r22, r25
    3e10:	6f 93       	push	r22
    3e12:	8f 93       	push	r24
    3e14:	59 01       	movw	r10, r18
    3e16:	6a 01       	movw	r12, r20
    3e18:	14 eb       	ldi	r17, 0xB4	; 180
    3e1a:	e1 2e       	mov	r14, r17
    3e1c:	f1 2c       	mov	r15, r1
    3e1e:	00 e0       	ldi	r16, 0x00	; 0
    3e20:	10 e0       	ldi	r17, 0x00	; 0
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	a9 01       	movw	r20, r18
    3e28:	c4 01       	movw	r24, r8
    3e2a:	b3 01       	movw	r22, r6
    3e2c:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_Z3maplllll>
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	9c 83       	std	Y+4, r25	; 0x04
    3e3e:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    3e40:	2b 81       	ldd	r18, Y+3	; 0x03
    3e42:	3c 81       	ldd	r19, Y+4	; 0x04
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	9a 81       	ldd	r25, Y+2	; 0x02
    3e48:	b9 01       	movw	r22, r18
    3e4a:	14 d0       	rcall	.+40     	; 0x3e74 <_ZN5Servo17writeMicrosecondsEi>
}
    3e4c:	00 00       	nop
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	ff 90       	pop	r15
    3e60:	ef 90       	pop	r14
    3e62:	df 90       	pop	r13
    3e64:	cf 90       	pop	r12
    3e66:	bf 90       	pop	r11
    3e68:	af 90       	pop	r10
    3e6a:	9f 90       	pop	r9
    3e6c:	8f 90       	pop	r8
    3e6e:	7f 90       	pop	r7
    3e70:	6f 90       	pop	r6
    3e72:	08 95       	ret

00003e74 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	00 d0       	rcall	.+0      	; 0x3e7a <_ZN5Servo17writeMicrosecondsEi+0x6>
    3e7a:	00 d0       	rcall	.+0      	; 0x3e7c <_ZN5Servo17writeMicrosecondsEi+0x8>
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	9c 83       	std	Y+4, r25	; 0x04
    3e82:	8b 83       	std	Y+3, r24	; 0x03
    3e84:	7e 83       	std	Y+6, r23	; 0x06
    3e86:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	80 81       	ld	r24, Z
    3e90:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	80 33       	cpi	r24, 0x30	; 48
    3e96:	08 f0       	brcs	.+2      	; 0x3e9a <_ZN5Servo17writeMicrosecondsEi+0x26>
    3e98:	99 c0       	rjmp	.+306    	; 0x3fcc <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	81 81       	ldd	r24, Z+1	; 0x01
    3ea2:	08 2e       	mov	r0, r24
    3ea4:	00 0c       	add	r0, r0
    3ea6:	99 0b       	sbc	r25, r25
    3ea8:	28 e8       	ldi	r18, 0x88	; 136
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	a9 01       	movw	r20, r18
    3eae:	48 1b       	sub	r20, r24
    3eb0:	59 0b       	sbc	r21, r25
    3eb2:	ca 01       	movw	r24, r20
    3eb4:	9c 01       	movw	r18, r24
    3eb6:	22 0f       	add	r18, r18
    3eb8:	33 1f       	adc	r19, r19
    3eba:	22 0f       	add	r18, r18
    3ebc:	33 1f       	adc	r19, r19
    3ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec2:	82 17       	cp	r24, r18
    3ec4:	93 07       	cpc	r25, r19
    3ec6:	a4 f4       	brge	.+40     	; 0x3ef0 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    3ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ecc:	fc 01       	movw	r30, r24
    3ece:	81 81       	ldd	r24, Z+1	; 0x01
    3ed0:	08 2e       	mov	r0, r24
    3ed2:	00 0c       	add	r0, r0
    3ed4:	99 0b       	sbc	r25, r25
    3ed6:	28 e8       	ldi	r18, 0x88	; 136
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	a9 01       	movw	r20, r18
    3edc:	48 1b       	sub	r20, r24
    3ede:	59 0b       	sbc	r21, r25
    3ee0:	ca 01       	movw	r24, r20
    3ee2:	88 0f       	add	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	9e 83       	std	Y+6, r25	; 0x06
    3eec:	8d 83       	std	Y+5, r24	; 0x05
    3eee:	2a c0       	rjmp	.+84     	; 0x3f44 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    3ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	08 2e       	mov	r0, r24
    3efa:	00 0c       	add	r0, r0
    3efc:	99 0b       	sbc	r25, r25
    3efe:	28 e5       	ldi	r18, 0x58	; 88
    3f00:	32 e0       	ldi	r19, 0x02	; 2
    3f02:	a9 01       	movw	r20, r18
    3f04:	48 1b       	sub	r20, r24
    3f06:	59 0b       	sbc	r21, r25
    3f08:	ca 01       	movw	r24, r20
    3f0a:	9c 01       	movw	r18, r24
    3f0c:	22 0f       	add	r18, r18
    3f0e:	33 1f       	adc	r19, r19
    3f10:	22 0f       	add	r18, r18
    3f12:	33 1f       	adc	r19, r19
    3f14:	8d 81       	ldd	r24, Y+5	; 0x05
    3f16:	9e 81       	ldd	r25, Y+6	; 0x06
    3f18:	28 17       	cp	r18, r24
    3f1a:	39 07       	cpc	r19, r25
    3f1c:	9c f4       	brge	.+38     	; 0x3f44 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	9c 81       	ldd	r25, Y+4	; 0x04
    3f22:	fc 01       	movw	r30, r24
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	08 2e       	mov	r0, r24
    3f28:	00 0c       	add	r0, r0
    3f2a:	99 0b       	sbc	r25, r25
    3f2c:	28 e5       	ldi	r18, 0x58	; 88
    3f2e:	32 e0       	ldi	r19, 0x02	; 2
    3f30:	a9 01       	movw	r20, r18
    3f32:	48 1b       	sub	r20, r24
    3f34:	59 0b       	sbc	r21, r25
    3f36:	ca 01       	movw	r24, r20
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	9e 83       	std	Y+6, r25	; 0x06
    3f42:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    3f44:	8d 81       	ldd	r24, Y+5	; 0x05
    3f46:	9e 81       	ldd	r25, Y+6	; 0x06
    3f48:	02 97       	sbiw	r24, 0x02	; 2
    3f4a:	9e 83       	std	Y+6, r25	; 0x06
    3f4c:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f50:	9e 81       	ldd	r25, Y+6	; 0x06
    3f52:	09 2e       	mov	r0, r25
    3f54:	00 0c       	add	r0, r0
    3f56:	aa 0b       	sbc	r26, r26
    3f58:	bb 0b       	sbc	r27, r27
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	aa 1f       	adc	r26, r26
    3f60:	bb 1f       	adc	r27, r27
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	aa 1f       	adc	r26, r26
    3f68:	bb 1f       	adc	r27, r27
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	aa 1f       	adc	r26, r26
    3f70:	bb 1f       	adc	r27, r27
    3f72:	88 0f       	add	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	aa 1f       	adc	r26, r26
    3f78:	bb 1f       	adc	r27, r27
    3f7a:	bb 23       	and	r27, r27
    3f7c:	1c f4       	brge	.+6      	; 0x3f84 <_ZN5Servo17writeMicrosecondsEi+0x110>
    3f7e:	07 96       	adiw	r24, 0x07	; 7
    3f80:	a1 1d       	adc	r26, r1
    3f82:	b1 1d       	adc	r27, r1
    3f84:	68 94       	set
    3f86:	12 f8       	bld	r1, 2
    3f88:	b5 95       	asr	r27
    3f8a:	a7 95       	ror	r26
    3f8c:	97 95       	ror	r25
    3f8e:	87 95       	ror	r24
    3f90:	16 94       	lsr	r1
    3f92:	d1 f7       	brne	.-12     	; 0x3f88 <_ZN5Servo17writeMicrosecondsEi+0x114>
    3f94:	9e 83       	std	Y+6, r25	; 0x06
    3f96:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    3f98:	8f e5       	ldi	r24, 0x5F	; 95
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	80 81       	ld	r24, Z
    3fa0:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    3fa2:	f8 94       	cli
    servos[channel].ticks = value;
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	28 2f       	mov	r18, r24
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	4d 81       	ldd	r20, Y+5	; 0x05
    3fac:	5e 81       	ldd	r21, Y+6	; 0x06
    3fae:	c9 01       	movw	r24, r18
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	82 0f       	add	r24, r18
    3fb6:	93 1f       	adc	r25, r19
    3fb8:	86 5c       	subi	r24, 0xC6	; 198
    3fba:	9c 4f       	sbci	r25, 0xFC	; 252
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	51 83       	std	Z+1, r21	; 0x01
    3fc0:	40 83       	st	Z, r20
    SREG = oldSREG;
    3fc2:	8f e5       	ldi	r24, 0x5F	; 95
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3fc8:	fc 01       	movw	r30, r24
    3fca:	20 83       	st	Z, r18
  }
}
    3fcc:	00 00       	nop
    3fce:	26 96       	adiw	r28, 0x06	; 6
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	df 91       	pop	r29
    3fdc:	cf 91       	pop	r28
    3fde:	08 95       	ret

00003fe0 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    3fe0:	2f 92       	push	r2
    3fe2:	3f 92       	push	r3
    3fe4:	4f 92       	push	r4
    3fe6:	5f 92       	push	r5
    3fe8:	6f 92       	push	r6
    3fea:	7f 92       	push	r7
    3fec:	8f 92       	push	r8
    3fee:	9f 92       	push	r9
    3ff0:	af 92       	push	r10
    3ff2:	bf 92       	push	r11
    3ff4:	cf 92       	push	r12
    3ff6:	df 92       	push	r13
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	1f 92       	push	r1
    4006:	1f 92       	push	r1
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	fc 01       	movw	r30, r24
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	08 2e       	mov	r0, r24
    401a:	00 0c       	add	r0, r0
    401c:	99 0b       	sbc	r25, r25
    401e:	28 e5       	ldi	r18, 0x58	; 88
    4020:	32 e0       	ldi	r19, 0x02	; 2
    4022:	a9 01       	movw	r20, r18
    4024:	48 1b       	sub	r20, r24
    4026:	59 0b       	sbc	r21, r25
    4028:	ca 01       	movw	r24, r20
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	88 0f       	add	r24, r24
    4030:	99 1f       	adc	r25, r25
    4032:	1c 01       	movw	r2, r24
    4034:	99 0f       	add	r25, r25
    4036:	44 08       	sbc	r4, r4
    4038:	55 08       	sbc	r5, r5
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	9a 81       	ldd	r25, Y+2	; 0x02
    403e:	fc 01       	movw	r30, r24
    4040:	81 81       	ldd	r24, Z+1	; 0x01
    4042:	08 2e       	mov	r0, r24
    4044:	00 0c       	add	r0, r0
    4046:	99 0b       	sbc	r25, r25
    4048:	28 e8       	ldi	r18, 0x88	; 136
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	a9 01       	movw	r20, r18
    404e:	48 1b       	sub	r20, r24
    4050:	59 0b       	sbc	r21, r25
    4052:	ca 01       	movw	r24, r20
    4054:	88 0f       	add	r24, r24
    4056:	99 1f       	adc	r25, r25
    4058:	88 0f       	add	r24, r24
    405a:	99 1f       	adc	r25, r25
    405c:	3c 01       	movw	r6, r24
    405e:	99 0f       	add	r25, r25
    4060:	88 08       	sbc	r8, r8
    4062:	99 08       	sbc	r9, r9
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	30 d0       	rcall	.+96     	; 0x40ca <_ZN5Servo16readMicrosecondsEv>
    406a:	01 96       	adiw	r24, 0x01	; 1
    406c:	09 2e       	mov	r0, r25
    406e:	00 0c       	add	r0, r0
    4070:	aa 0b       	sbc	r26, r26
    4072:	bb 0b       	sbc	r27, r27
    4074:	1f 92       	push	r1
    4076:	1f 92       	push	r1
    4078:	1f 92       	push	r1
    407a:	24 eb       	ldi	r18, 0xB4	; 180
    407c:	2f 93       	push	r18
    407e:	a1 2c       	mov	r10, r1
    4080:	b1 2c       	mov	r11, r1
    4082:	65 01       	movw	r12, r10
    4084:	82 01       	movw	r16, r4
    4086:	71 01       	movw	r14, r2
    4088:	a4 01       	movw	r20, r8
    408a:	93 01       	movw	r18, r6
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_Z3maplllll>
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
}
    40a0:	0f 90       	pop	r0
    40a2:	0f 90       	pop	r0
    40a4:	df 91       	pop	r29
    40a6:	cf 91       	pop	r28
    40a8:	1f 91       	pop	r17
    40aa:	0f 91       	pop	r16
    40ac:	ff 90       	pop	r15
    40ae:	ef 90       	pop	r14
    40b0:	df 90       	pop	r13
    40b2:	cf 90       	pop	r12
    40b4:	bf 90       	pop	r11
    40b6:	af 90       	pop	r10
    40b8:	9f 90       	pop	r9
    40ba:	8f 90       	pop	r8
    40bc:	7f 90       	pop	r7
    40be:	6f 90       	pop	r6
    40c0:	5f 90       	pop	r5
    40c2:	4f 90       	pop	r4
    40c4:	3f 90       	pop	r3
    40c6:	2f 90       	pop	r2
    40c8:	08 95       	ret

000040ca <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <_ZN5Servo16readMicrosecondsEv+0x6>
    40d0:	1f 92       	push	r1
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	9c 83       	std	Y+4, r25	; 0x04
    40d8:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    40da:	8b 81       	ldd	r24, Y+3	; 0x03
    40dc:	9c 81       	ldd	r25, Y+4	; 0x04
    40de:	fc 01       	movw	r30, r24
    40e0:	80 81       	ld	r24, Z
    40e2:	8f 3f       	cpi	r24, 0xFF	; 255
    40e4:	01 f1       	breq	.+64     	; 0x4126 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ea:	fc 01       	movw	r30, r24
    40ec:	80 81       	ld	r24, Z
    40ee:	28 2f       	mov	r18, r24
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	c9 01       	movw	r24, r18
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	82 0f       	add	r24, r18
    40fa:	93 1f       	adc	r25, r19
    40fc:	86 5c       	subi	r24, 0xC6	; 198
    40fe:	9c 4f       	sbci	r25, 0xFC	; 252
    4100:	fc 01       	movw	r30, r24
    4102:	80 81       	ld	r24, Z
    4104:	91 81       	ldd	r25, Z+1	; 0x01
    4106:	88 0f       	add	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	92 95       	swap	r25
    4114:	82 95       	swap	r24
    4116:	8f 70       	andi	r24, 0x0F	; 15
    4118:	89 27       	eor	r24, r25
    411a:	9f 70       	andi	r25, 0x0F	; 15
    411c:	89 27       	eor	r24, r25
    411e:	02 96       	adiw	r24, 0x02	; 2
    4120:	9a 83       	std	Y+2, r25	; 0x02
    4122:	89 83       	std	Y+1, r24	; 0x01
    4124:	02 c0       	rjmp	.+4      	; 0x412a <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    4126:	1a 82       	std	Y+2, r1	; 0x02
    4128:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	08 95       	ret

0000413c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	2f 97       	sbiw	r28, 0x0f	; 15
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4150:	8f e5       	ldi	r24, 0x5F	; 95
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	fc 01       	movw	r30, r24
    4156:	80 81       	ld	r24, Z
    4158:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    415a:	f8 94       	cli
  if (!initialized) {
    415c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZN8SPIClass11initializedE>
    4160:	88 23       	and	r24, r24
    4162:	09 f0       	breq	.+2      	; 0x4166 <_ZN8SPIClass5beginEv+0x2a>
    4164:	5b c0       	rjmp	.+182    	; 0x421c <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4166:	89 ec       	ldi	r24, 0xC9	; 201
    4168:	91 e0       	ldi	r25, 0x01	; 1
    416a:	9b 83       	std	Y+3, r25	; 0x03
    416c:	8a 83       	std	Y+2, r24	; 0x02
    416e:	8a 81       	ldd	r24, Y+2	; 0x02
    4170:	9b 81       	ldd	r25, Y+3	; 0x03
    4172:	fc 01       	movw	r30, r24
    4174:	84 91       	lpm	r24, Z
    4176:	8c 83       	std	Y+4, r24	; 0x04
    4178:	8c 81       	ldd	r24, Y+4	; 0x04
    417a:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    417c:	83 e8       	ldi	r24, 0x83	; 131
    417e:	91 e0       	ldi	r25, 0x01	; 1
    4180:	9f 83       	std	Y+7, r25	; 0x07
    4182:	8e 83       	std	Y+6, r24	; 0x06
    4184:	8e 81       	ldd	r24, Y+6	; 0x06
    4186:	9f 81       	ldd	r25, Y+7	; 0x07
    4188:	fc 01       	movw	r30, r24
    418a:	84 91       	lpm	r24, Z
    418c:	88 87       	std	Y+8, r24	; 0x08
    418e:	88 85       	ldd	r24, Y+8	; 0x08
    4190:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    4192:	8d 81       	ldd	r24, Y+5	; 0x05
    4194:	88 2f       	mov	r24, r24
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	88 0f       	add	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	82 5f       	subi	r24, 0xF2	; 242
    419e:	9d 4f       	sbci	r25, 0xFD	; 253
    41a0:	9b 87       	std	Y+11, r25	; 0x0b
    41a2:	8a 87       	std	Y+10, r24	; 0x0a
    41a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    41a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    41a8:	fc 01       	movw	r30, r24
    41aa:	25 91       	lpm	r18, Z+
    41ac:	34 91       	lpm	r19, Z
    41ae:	cf 01       	movw	r24, r30
    41b0:	3d 87       	std	Y+13, r19	; 0x0d
    41b2:	2c 87       	std	Y+12, r18	; 0x0c
    41b4:	9b 87       	std	Y+11, r25	; 0x0b
    41b6:	8a 87       	std	Y+10, r24	; 0x0a
    41b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    41ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    41bc:	9f 87       	std	Y+15, r25	; 0x0f
    41be:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    41c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    41c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    41c4:	fc 01       	movw	r30, r24
    41c6:	90 81       	ld	r25, Z
    41c8:	89 85       	ldd	r24, Y+9	; 0x09
    41ca:	98 23       	and	r25, r24
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	99 23       	and	r25, r25
    41d0:	09 f0       	breq	.+2      	; 0x41d4 <_ZN8SPIClass5beginEv+0x98>
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	88 23       	and	r24, r24
    41d6:	21 f0       	breq	.+8      	; 0x41e0 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    41d8:	61 e0       	ldi	r22, 0x01	; 1
    41da:	85 e3       	ldi	r24, 0x35	; 53
    41dc:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    41e0:	61 e0       	ldi	r22, 0x01	; 1
    41e2:	85 e3       	ldi	r24, 0x35	; 53
    41e4:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    41e8:	8c e4       	ldi	r24, 0x4C	; 76
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	2c e4       	ldi	r18, 0x4C	; 76
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	f9 01       	movw	r30, r18
    41f2:	20 81       	ld	r18, Z
    41f4:	20 61       	ori	r18, 0x10	; 16
    41f6:	fc 01       	movw	r30, r24
    41f8:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    41fa:	8c e4       	ldi	r24, 0x4C	; 76
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	2c e4       	ldi	r18, 0x4C	; 76
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	f9 01       	movw	r30, r18
    4204:	20 81       	ld	r18, Z
    4206:	20 64       	ori	r18, 0x40	; 64
    4208:	fc 01       	movw	r30, r24
    420a:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    420c:	61 e0       	ldi	r22, 0x01	; 1
    420e:	84 e3       	ldi	r24, 0x34	; 52
    4210:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
    pinMode(MOSI, OUTPUT);
    4214:	61 e0       	ldi	r22, 0x01	; 1
    4216:	83 e3       	ldi	r24, 0x33	; 51
    4218:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <pinMode>
  }
  initialized++; // reference count
    421c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZN8SPIClass11initializedE>
    4220:	8f 5f       	subi	r24, 0xFF	; 255
    4222:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4226:	8f e5       	ldi	r24, 0x5F	; 95
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	29 81       	ldd	r18, Y+1	; 0x01
    422c:	fc 01       	movw	r30, r24
    422e:	20 83       	st	Z, r18
}
    4230:	00 00       	nop
    4232:	2f 96       	adiw	r28, 0x0f	; 15
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	f8 94       	cli
    4238:	de bf       	out	0x3e, r29	; 62
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	cd bf       	out	0x3d, r28	; 61
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	08 95       	ret

00004244 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4244:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_state>
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <twi_sendStop>
    424e:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_inRepStart>
    4252:	61 e0       	ldi	r22, 0x01	; 1
    4254:	84 e1       	ldi	r24, 0x14	; 20
    4256:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    425a:	61 e0       	ldi	r22, 0x01	; 1
    425c:	85 e1       	ldi	r24, 0x15	; 21
    425e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    4262:	e9 eb       	ldi	r30, 0xB9	; 185
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	80 81       	ld	r24, Z
    4268:	8e 7f       	andi	r24, 0xFE	; 254
    426a:	80 83       	st	Z, r24
    426c:	80 81       	ld	r24, Z
    426e:	8d 7f       	andi	r24, 0xFD	; 253
    4270:	80 83       	st	Z, r24
    4272:	88 e4       	ldi	r24, 0x48	; 72
    4274:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4278:	85 e4       	ldi	r24, 0x45	; 69
    427a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    427e:	08 95       	ret

00004280 <twi_disable>:
    4280:	ec eb       	ldi	r30, 0xBC	; 188
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	80 81       	ld	r24, Z
    4286:	8a 7b       	andi	r24, 0xBA	; 186
    4288:	80 83       	st	Z, r24
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	84 e1       	ldi	r24, 0x14	; 20
    428e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <digitalWrite>
    4292:	60 e0       	ldi	r22, 0x00	; 0
    4294:	85 e1       	ldi	r24, 0x15	; 21
    4296:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <digitalWrite>

0000429a <twi_transmit>:
    429a:	40 91 f4 03 	lds	r20, 0x03F4	; 0x8003f4 <twi_txBufferLength>
    429e:	26 2f       	mov	r18, r22
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	24 0f       	add	r18, r20
    42a4:	31 1d       	adc	r19, r1
    42a6:	21 32       	cpi	r18, 0x21	; 33
    42a8:	31 05       	cpc	r19, r1
    42aa:	dc f4       	brge	.+54     	; 0x42e2 <twi_transmit+0x48>
    42ac:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <twi_state>
    42b0:	24 30       	cpi	r18, 0x04	; 4
    42b2:	c9 f4       	brne	.+50     	; 0x42e6 <twi_transmit+0x4c>
    42b4:	fc 01       	movw	r30, r24
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	86 17       	cp	r24, r22
    42bc:	58 f4       	brcc	.+22     	; 0x42d4 <twi_transmit+0x3a>
    42be:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <twi_txBufferLength>
    42c2:	21 91       	ld	r18, Z+
    42c4:	dc 01       	movw	r26, r24
    42c6:	aa 50       	subi	r26, 0x0A	; 10
    42c8:	bc 4f       	sbci	r27, 0xFC	; 252
    42ca:	a3 0f       	add	r26, r19
    42cc:	b1 1d       	adc	r27, r1
    42ce:	2c 93       	st	X, r18
    42d0:	01 96       	adiw	r24, 0x01	; 1
    42d2:	f3 cf       	rjmp	.-26     	; 0x42ba <twi_transmit+0x20>
    42d4:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <twi_txBufferLength>
    42d8:	68 0f       	add	r22, r24
    42da:	60 93 f4 03 	sts	0x03F4, r22	; 0x8003f4 <twi_txBufferLength>
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	08 95       	ret
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	08 95       	ret
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	08 95       	ret

000042ea <twi_attachSlaveRxEvent>:
    42ea:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <twi_onSlaveReceive+0x1>
    42ee:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <twi_onSlaveReceive>
    42f2:	08 95       	ret

000042f4 <twi_attachSlaveTxEvent>:
    42f4:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <twi_onSlaveTransmit+0x1>
    42f8:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <twi_onSlaveTransmit>
    42fc:	08 95       	ret

000042fe <twi_releaseBus>:
    42fe:	85 ec       	ldi	r24, 0xC5	; 197
    4300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4304:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_state>
    4308:	08 95       	ret

0000430a <twi_handleTimeout>:
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	91 e0       	ldi	r25, 0x01	; 1
    4310:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <twi_timed_out_flag>
    4314:	88 23       	and	r24, r24
    4316:	51 f0       	breq	.+20     	; 0x432c <twi_handleTimeout+0x22>
    4318:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    431c:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4320:	af df       	rcall	.-162    	; 0x4280 <twi_disable>
    4322:	90 df       	rcall	.-224    	; 0x4244 <twi_init>
    4324:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4328:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	08 95       	ret

00004332 <twi_readFrom>:
    4332:	4f 92       	push	r4
    4334:	5f 92       	push	r5
    4336:	6f 92       	push	r6
    4338:	7f 92       	push	r7
    433a:	8f 92       	push	r8
    433c:	9f 92       	push	r9
    433e:	af 92       	push	r10
    4340:	bf 92       	push	r11
    4342:	cf 92       	push	r12
    4344:	df 92       	push	r13
    4346:	ef 92       	push	r14
    4348:	ff 92       	push	r15
    434a:	0f 93       	push	r16
    434c:	1f 93       	push	r17
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
    4352:	f8 2e       	mov	r15, r24
    4354:	16 2f       	mov	r17, r22
    4356:	07 2f       	mov	r16, r23
    4358:	c4 2f       	mov	r28, r20
    435a:	e2 2e       	mov	r14, r18
    435c:	41 32       	cpi	r20, 0x21	; 33
    435e:	08 f0       	brcs	.+2      	; 0x4362 <twi_readFrom+0x30>
    4360:	bc c0       	rjmp	.+376    	; 0x44da <twi_readFrom+0x1a8>
    4362:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    4366:	4b 01       	movw	r8, r22
    4368:	5c 01       	movw	r10, r24
    436a:	d0 91 45 04 	lds	r29, 0x0445	; 0x800445 <twi_state>
    436e:	dd 23       	and	r29, r29
    4370:	29 f1       	breq	.+74     	; 0x43bc <twi_readFrom+0x8a>
    4372:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    4376:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    437a:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    437e:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4382:	89 2b       	or	r24, r25
    4384:	8a 2b       	or	r24, r26
    4386:	8b 2b       	or	r24, r27
    4388:	81 f3       	breq	.-32     	; 0x436a <twi_readFrom+0x38>
    438a:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    438e:	40 90 3e 04 	lds	r4, 0x043E	; 0x80043e <twi_timeout_us>
    4392:	50 90 3f 04 	lds	r5, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4396:	60 90 40 04 	lds	r6, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    439a:	70 90 41 04 	lds	r7, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	88 19       	sub	r24, r8
    43a4:	99 09       	sbc	r25, r9
    43a6:	aa 09       	sbc	r26, r10
    43a8:	bb 09       	sbc	r27, r11
    43aa:	48 16       	cp	r4, r24
    43ac:	59 06       	cpc	r5, r25
    43ae:	6a 06       	cpc	r6, r26
    43b0:	7b 06       	cpc	r7, r27
    43b2:	d8 f6       	brcc	.-74     	; 0x436a <twi_readFrom+0x38>
    43b4:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_do_reset_on_timeout>
    43b8:	a8 df       	rcall	.-176    	; 0x430a <twi_handleTimeout>
    43ba:	8f c0       	rjmp	.+286    	; 0x44da <twi_readFrom+0x1a8>
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_state>
    43c2:	e0 92 43 04 	sts	0x0443, r14	; 0x800443 <twi_sendStop>
    43c6:	9f ef       	ldi	r25, 0xFF	; 255
    43c8:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <twi_error>
    43cc:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <twi_masterBufferIndex>
    43d0:	9c 0f       	add	r25, r28
    43d2:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <twi_masterBufferLength>
    43d6:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_slarw>
    43da:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <twi_slarw>
    43de:	8f 2d       	mov	r24, r15
    43e0:	88 0f       	add	r24, r24
    43e2:	89 2b       	or	r24, r25
    43e4:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_slarw>
    43e8:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_inRepStart>
    43ec:	81 30       	cpi	r24, 0x01	; 1
    43ee:	89 f5       	brne	.+98     	; 0x4452 <twi_readFrom+0x120>
    43f0:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_inRepStart>
    43f4:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    43f8:	6b 01       	movw	r12, r22
    43fa:	7c 01       	movw	r14, r24
    43fc:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_slarw>
    4400:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4404:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    4408:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    440c:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4410:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4414:	89 2b       	or	r24, r25
    4416:	8a 2b       	or	r24, r26
    4418:	8b 2b       	or	r24, r27
    441a:	a9 f0       	breq	.+42     	; 0x4446 <twi_readFrom+0x114>
    441c:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    4420:	80 90 3e 04 	lds	r8, 0x043E	; 0x80043e <twi_timeout_us>
    4424:	90 90 3f 04 	lds	r9, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4428:	a0 90 40 04 	lds	r10, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    442c:	b0 90 41 04 	lds	r11, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	8c 19       	sub	r24, r12
    4436:	9d 09       	sbc	r25, r13
    4438:	ae 09       	sbc	r26, r14
    443a:	bf 09       	sbc	r27, r15
    443c:	88 16       	cp	r8, r24
    443e:	99 06       	cpc	r9, r25
    4440:	aa 06       	cpc	r10, r26
    4442:	bb 06       	cpc	r11, r27
    4444:	90 f1       	brcs	.+100    	; 0x44aa <twi_readFrom+0x178>
    4446:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    444a:	83 fd       	sbrc	r24, 3
    444c:	d7 cf       	rjmp	.-82     	; 0x43fc <twi_readFrom+0xca>
    444e:	85 ec       	ldi	r24, 0xC5	; 197
    4450:	01 c0       	rjmp	.+2      	; 0x4454 <twi_readFrom+0x122>
    4452:	85 ee       	ldi	r24, 0xE5	; 229
    4454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4458:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    445c:	6b 01       	movw	r12, r22
    445e:	7c 01       	movw	r14, r24
    4460:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_state>
    4464:	81 30       	cpi	r24, 0x01	; 1
    4466:	29 f5       	brne	.+74     	; 0x44b2 <twi_readFrom+0x180>
    4468:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    446c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4470:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4474:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4478:	89 2b       	or	r24, r25
    447a:	8a 2b       	or	r24, r26
    447c:	8b 2b       	or	r24, r27
    447e:	81 f3       	breq	.-32     	; 0x4460 <twi_readFrom+0x12e>
    4480:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    4484:	80 90 3e 04 	lds	r8, 0x043E	; 0x80043e <twi_timeout_us>
    4488:	90 90 3f 04 	lds	r9, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    448c:	a0 90 40 04 	lds	r10, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4490:	b0 90 41 04 	lds	r11, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	8c 19       	sub	r24, r12
    449a:	9d 09       	sbc	r25, r13
    449c:	ae 09       	sbc	r26, r14
    449e:	bf 09       	sbc	r27, r15
    44a0:	88 16       	cp	r8, r24
    44a2:	99 06       	cpc	r9, r25
    44a4:	aa 06       	cpc	r10, r26
    44a6:	bb 06       	cpc	r11, r27
    44a8:	d8 f6       	brcc	.-74     	; 0x4460 <twi_readFrom+0x12e>
    44aa:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_do_reset_on_timeout>
    44ae:	2d df       	rcall	.-422    	; 0x430a <twi_handleTimeout>
    44b0:	15 c0       	rjmp	.+42     	; 0x44dc <twi_readFrom+0x1aa>
    44b2:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <twi_masterBufferIndex>
    44b6:	8c 17       	cp	r24, r28
    44b8:	10 f4       	brcc	.+4      	; 0x44be <twi_readFrom+0x18c>
    44ba:	c0 91 17 04 	lds	r28, 0x0417	; 0x800417 <twi_masterBufferIndex>
    44be:	a8 e1       	ldi	r26, 0x18	; 24
    44c0:	b4 e0       	ldi	r27, 0x04	; 4
    44c2:	91 2f       	mov	r25, r17
    44c4:	e1 2f       	mov	r30, r17
    44c6:	f0 2f       	mov	r31, r16
    44c8:	8e 2f       	mov	r24, r30
    44ca:	89 1b       	sub	r24, r25
    44cc:	8c 17       	cp	r24, r28
    44ce:	18 f4       	brcc	.+6      	; 0x44d6 <twi_readFrom+0x1a4>
    44d0:	8d 91       	ld	r24, X+
    44d2:	81 93       	st	Z+, r24
    44d4:	f9 cf       	rjmp	.-14     	; 0x44c8 <twi_readFrom+0x196>
    44d6:	dc 2f       	mov	r29, r28
    44d8:	01 c0       	rjmp	.+2      	; 0x44dc <twi_readFrom+0x1aa>
    44da:	d0 e0       	ldi	r29, 0x00	; 0
    44dc:	8d 2f       	mov	r24, r29
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	1f 91       	pop	r17
    44e4:	0f 91       	pop	r16
    44e6:	ff 90       	pop	r15
    44e8:	ef 90       	pop	r14
    44ea:	df 90       	pop	r13
    44ec:	cf 90       	pop	r12
    44ee:	bf 90       	pop	r11
    44f0:	af 90       	pop	r10
    44f2:	9f 90       	pop	r9
    44f4:	8f 90       	pop	r8
    44f6:	7f 90       	pop	r7
    44f8:	6f 90       	pop	r6
    44fa:	5f 90       	pop	r5
    44fc:	4f 90       	pop	r4
    44fe:	08 95       	ret

00004500 <twi_writeTo>:
    4500:	4f 92       	push	r4
    4502:	5f 92       	push	r5
    4504:	6f 92       	push	r6
    4506:	7f 92       	push	r7
    4508:	8f 92       	push	r8
    450a:	9f 92       	push	r9
    450c:	af 92       	push	r10
    450e:	bf 92       	push	r11
    4510:	cf 92       	push	r12
    4512:	df 92       	push	r13
    4514:	ef 92       	push	r14
    4516:	ff 92       	push	r15
    4518:	0f 93       	push	r16
    451a:	1f 93       	push	r17
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	41 32       	cpi	r20, 0x21	; 33
    4522:	08 f0       	brcs	.+2      	; 0x4526 <twi_writeTo+0x26>
    4524:	c5 c0       	rjmp	.+394    	; 0x46b0 <twi_writeTo+0x1b0>
    4526:	12 2f       	mov	r17, r18
    4528:	f4 2e       	mov	r15, r20
    452a:	d7 2e       	mov	r13, r23
    452c:	e6 2e       	mov	r14, r22
    452e:	d8 2f       	mov	r29, r24
    4530:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    4534:	4b 01       	movw	r8, r22
    4536:	5c 01       	movw	r10, r24
    4538:	c0 91 45 04 	lds	r28, 0x0445	; 0x800445 <twi_state>
    453c:	cc 23       	and	r28, r28
    453e:	11 f1       	breq	.+68     	; 0x4584 <twi_writeTo+0x84>
    4540:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    4544:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4548:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    454c:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4550:	89 2b       	or	r24, r25
    4552:	8a 2b       	or	r24, r26
    4554:	8b 2b       	or	r24, r27
    4556:	81 f3       	breq	.-32     	; 0x4538 <twi_writeTo+0x38>
    4558:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    455c:	40 90 3e 04 	lds	r4, 0x043E	; 0x80043e <twi_timeout_us>
    4560:	50 90 3f 04 	lds	r5, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4564:	60 90 40 04 	lds	r6, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4568:	70 90 41 04 	lds	r7, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    456c:	dc 01       	movw	r26, r24
    456e:	cb 01       	movw	r24, r22
    4570:	88 19       	sub	r24, r8
    4572:	99 09       	sbc	r25, r9
    4574:	aa 09       	sbc	r26, r10
    4576:	bb 09       	sbc	r27, r11
    4578:	48 16       	cp	r4, r24
    457a:	59 06       	cpc	r5, r25
    457c:	6a 06       	cpc	r6, r26
    457e:	7b 06       	cpc	r7, r27
    4580:	d8 f6       	brcc	.-74     	; 0x4538 <twi_writeTo+0x38>
    4582:	83 c0       	rjmp	.+262    	; 0x468a <twi_writeTo+0x18a>
    4584:	82 e0       	ldi	r24, 0x02	; 2
    4586:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_state>
    458a:	00 93 43 04 	sts	0x0443, r16	; 0x800443 <twi_sendStop>
    458e:	8f ef       	ldi	r24, 0xFF	; 255
    4590:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_error>
    4594:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <twi_masterBufferIndex>
    4598:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <twi_masterBufferLength>
    459c:	9e 2d       	mov	r25, r14
    459e:	a8 e1       	ldi	r26, 0x18	; 24
    45a0:	b4 e0       	ldi	r27, 0x04	; 4
    45a2:	ee 2d       	mov	r30, r14
    45a4:	fd 2d       	mov	r31, r13
    45a6:	8e 2f       	mov	r24, r30
    45a8:	89 1b       	sub	r24, r25
    45aa:	8f 15       	cp	r24, r15
    45ac:	18 f4       	brcc	.+6      	; 0x45b4 <twi_writeTo+0xb4>
    45ae:	81 91       	ld	r24, Z+
    45b0:	8d 93       	st	X+, r24
    45b2:	f9 cf       	rjmp	.-14     	; 0x45a6 <twi_writeTo+0xa6>
    45b4:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_slarw>
    45b8:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <twi_slarw>
    45bc:	dd 0f       	add	r29, r29
    45be:	d9 2b       	or	r29, r25
    45c0:	d0 93 44 04 	sts	0x0444, r29	; 0x800444 <twi_slarw>
    45c4:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_inRepStart>
    45c8:	81 30       	cpi	r24, 0x01	; 1
    45ca:	89 f5       	brne	.+98     	; 0x462e <twi_writeTo+0x12e>
    45cc:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_inRepStart>
    45d0:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    45d4:	6b 01       	movw	r12, r22
    45d6:	7c 01       	movw	r14, r24
    45d8:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_slarw>
    45dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    45e0:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    45e4:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    45e8:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    45ec:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    45f0:	89 2b       	or	r24, r25
    45f2:	8a 2b       	or	r24, r26
    45f4:	8b 2b       	or	r24, r27
    45f6:	a9 f0       	breq	.+42     	; 0x4622 <twi_writeTo+0x122>
    45f8:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    45fc:	80 90 3e 04 	lds	r8, 0x043E	; 0x80043e <twi_timeout_us>
    4600:	90 90 3f 04 	lds	r9, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4604:	a0 90 40 04 	lds	r10, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4608:	b0 90 41 04 	lds	r11, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	8c 19       	sub	r24, r12
    4612:	9d 09       	sbc	r25, r13
    4614:	ae 09       	sbc	r26, r14
    4616:	bf 09       	sbc	r27, r15
    4618:	88 16       	cp	r8, r24
    461a:	99 06       	cpc	r9, r25
    461c:	aa 06       	cpc	r10, r26
    461e:	bb 06       	cpc	r11, r27
    4620:	a0 f1       	brcs	.+104    	; 0x468a <twi_writeTo+0x18a>
    4622:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4626:	83 fd       	sbrc	r24, 3
    4628:	d7 cf       	rjmp	.-82     	; 0x45d8 <twi_writeTo+0xd8>
    462a:	85 ec       	ldi	r24, 0xC5	; 197
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <twi_writeTo+0x130>
    462e:	85 ee       	ldi	r24, 0xE5	; 229
    4630:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4634:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    4638:	6b 01       	movw	r12, r22
    463a:	7c 01       	movw	r14, r24
    463c:	11 23       	and	r17, r17
    463e:	51 f1       	breq	.+84     	; 0x4694 <twi_writeTo+0x194>
    4640:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_state>
    4644:	82 30       	cpi	r24, 0x02	; 2
    4646:	31 f5       	brne	.+76     	; 0x4694 <twi_writeTo+0x194>
    4648:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    464c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4650:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4654:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4658:	89 2b       	or	r24, r25
    465a:	8a 2b       	or	r24, r26
    465c:	8b 2b       	or	r24, r27
    465e:	71 f3       	breq	.-36     	; 0x463c <twi_writeTo+0x13c>
    4660:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <micros>
    4664:	80 90 3e 04 	lds	r8, 0x043E	; 0x80043e <twi_timeout_us>
    4668:	90 90 3f 04 	lds	r9, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    466c:	a0 90 40 04 	lds	r10, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    4670:	b0 90 41 04 	lds	r11, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	8c 19       	sub	r24, r12
    467a:	9d 09       	sbc	r25, r13
    467c:	ae 09       	sbc	r26, r14
    467e:	bf 09       	sbc	r27, r15
    4680:	88 16       	cp	r8, r24
    4682:	99 06       	cpc	r9, r25
    4684:	aa 06       	cpc	r10, r26
    4686:	bb 06       	cpc	r11, r27
    4688:	c8 f6       	brcc	.-78     	; 0x463c <twi_writeTo+0x13c>
    468a:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_do_reset_on_timeout>
    468e:	3d de       	rcall	.-902    	; 0x430a <twi_handleTimeout>
    4690:	c5 e0       	ldi	r28, 0x05	; 5
    4692:	13 c0       	rjmp	.+38     	; 0x46ba <twi_writeTo+0x1ba>
    4694:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_error>
    4698:	8f 3f       	cpi	r24, 0xFF	; 255
    469a:	79 f0       	breq	.+30     	; 0x46ba <twi_writeTo+0x1ba>
    469c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_error>
    46a0:	80 32       	cpi	r24, 0x20	; 32
    46a2:	41 f0       	breq	.+16     	; 0x46b4 <twi_writeTo+0x1b4>
    46a4:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_error>
    46a8:	80 33       	cpi	r24, 0x30	; 48
    46aa:	31 f0       	breq	.+12     	; 0x46b8 <twi_writeTo+0x1b8>
    46ac:	c4 e0       	ldi	r28, 0x04	; 4
    46ae:	05 c0       	rjmp	.+10     	; 0x46ba <twi_writeTo+0x1ba>
    46b0:	c1 e0       	ldi	r28, 0x01	; 1
    46b2:	03 c0       	rjmp	.+6      	; 0x46ba <twi_writeTo+0x1ba>
    46b4:	c2 e0       	ldi	r28, 0x02	; 2
    46b6:	01 c0       	rjmp	.+2      	; 0x46ba <twi_writeTo+0x1ba>
    46b8:	c3 e0       	ldi	r28, 0x03	; 3
    46ba:	8c 2f       	mov	r24, r28
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	1f 91       	pop	r17
    46c2:	0f 91       	pop	r16
    46c4:	ff 90       	pop	r15
    46c6:	ef 90       	pop	r14
    46c8:	df 90       	pop	r13
    46ca:	cf 90       	pop	r12
    46cc:	bf 90       	pop	r11
    46ce:	af 90       	pop	r10
    46d0:	9f 90       	pop	r9
    46d2:	8f 90       	pop	r8
    46d4:	7f 90       	pop	r7
    46d6:	6f 90       	pop	r6
    46d8:	5f 90       	pop	r5
    46da:	4f 90       	pop	r4
    46dc:	08 95       	ret

000046de <twi_stop>:
    46de:	85 ed       	ldi	r24, 0xD5	; 213
    46e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46e4:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_timeout_us>
    46e8:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    46ec:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    46f0:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    46f4:	07 96       	adiw	r24, 0x07	; 7
    46f6:	a1 1d       	adc	r26, r1
    46f8:	b1 1d       	adc	r27, r1
    46fa:	23 e0       	ldi	r18, 0x03	; 3
    46fc:	b6 95       	lsr	r27
    46fe:	a7 95       	ror	r26
    4700:	97 95       	ror	r25
    4702:	87 95       	ror	r24
    4704:	2a 95       	dec	r18
    4706:	d1 f7       	brne	.-12     	; 0x46fc <twi_stop+0x1e>
    4708:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    470c:	24 ff       	sbrs	r18, 4
    470e:	1b c0       	rjmp	.+54     	; 0x4746 <twi_stop+0x68>
    4710:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <twi_timeout_us>
    4714:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <twi_timeout_us+0x1>
    4718:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <twi_timeout_us+0x2>
    471c:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <twi_timeout_us+0x3>
    4720:	45 2b       	or	r20, r21
    4722:	46 2b       	or	r20, r22
    4724:	47 2b       	or	r20, r23
    4726:	81 f3       	breq	.-32     	; 0x4708 <twi_stop+0x2a>
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	a1 05       	cpc	r26, r1
    472c:	b1 05       	cpc	r27, r1
    472e:	41 f0       	breq	.+16     	; 0x4740 <twi_stop+0x62>
    4730:	25 e3       	ldi	r18, 0x35	; 53
    4732:	2a 95       	dec	r18
    4734:	f1 f7       	brne	.-4      	; 0x4732 <twi_stop+0x54>
    4736:	00 00       	nop
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	a1 09       	sbc	r26, r1
    473c:	b1 09       	sbc	r27, r1
    473e:	e4 cf       	rjmp	.-56     	; 0x4708 <twi_stop+0x2a>
    4740:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_do_reset_on_timeout>
    4744:	e2 cd       	rjmp	.-1084   	; 0x430a <twi_handleTimeout>
    4746:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_state>
    474a:	08 95       	ret

0000474c <__vector_39>:

ISR(TWI_vect)
{
    474c:	1f 92       	push	r1
    474e:	0f 92       	push	r0
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	0f 92       	push	r0
    4754:	11 24       	eor	r1, r1
    4756:	0b b6       	in	r0, 0x3b	; 59
    4758:	0f 92       	push	r0
    475a:	2f 93       	push	r18
    475c:	3f 93       	push	r19
    475e:	4f 93       	push	r20
    4760:	5f 93       	push	r21
    4762:	6f 93       	push	r22
    4764:	7f 93       	push	r23
    4766:	8f 93       	push	r24
    4768:	9f 93       	push	r25
    476a:	af 93       	push	r26
    476c:	bf 93       	push	r27
    476e:	ef 93       	push	r30
    4770:	ff 93       	push	r31
  switch(TW_STATUS){
    4772:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4776:	88 7f       	andi	r24, 0xF8	; 248
    4778:	80 36       	cpi	r24, 0x60	; 96
    477a:	09 f4       	brne	.+2      	; 0x477e <__vector_39+0x32>
    477c:	9d c0       	rjmp	.+314    	; 0x48b8 <__vector_39+0x16c>
    477e:	70 f5       	brcc	.+92     	; 0x47dc <__vector_39+0x90>
    4780:	88 32       	cpi	r24, 0x28	; 40
    4782:	09 f4       	brne	.+2      	; 0x4786 <__vector_39+0x3a>
    4784:	5c c0       	rjmp	.+184    	; 0x483e <__vector_39+0xf2>
    4786:	90 f4       	brcc	.+36     	; 0x47ac <__vector_39+0x60>
    4788:	80 31       	cpi	r24, 0x10	; 16
    478a:	09 f4       	brne	.+2      	; 0x478e <__vector_39+0x42>
    478c:	55 c0       	rjmp	.+170    	; 0x4838 <__vector_39+0xec>
    478e:	38 f4       	brcc	.+14     	; 0x479e <__vector_39+0x52>
    4790:	88 23       	and	r24, r24
    4792:	09 f4       	brne	.+2      	; 0x4796 <__vector_39+0x4a>
    4794:	f3 c0       	rjmp	.+486    	; 0x497c <__vector_39+0x230>
    4796:	88 30       	cpi	r24, 0x08	; 8
    4798:	09 f4       	brne	.+2      	; 0x479c <__vector_39+0x50>
    479a:	4e c0       	rjmp	.+156    	; 0x4838 <__vector_39+0xec>
    479c:	f2 c0       	rjmp	.+484    	; 0x4982 <__vector_39+0x236>
    479e:	88 31       	cpi	r24, 0x18	; 24
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <__vector_39+0x58>
    47a2:	4d c0       	rjmp	.+154    	; 0x483e <__vector_39+0xf2>
    47a4:	80 32       	cpi	r24, 0x20	; 32
    47a6:	09 f4       	brne	.+2      	; 0x47aa <__vector_39+0x5e>
    47a8:	5e c0       	rjmp	.+188    	; 0x4866 <__vector_39+0x11a>
    47aa:	eb c0       	rjmp	.+470    	; 0x4982 <__vector_39+0x236>
    47ac:	80 34       	cpi	r24, 0x40	; 64
    47ae:	09 f4       	brne	.+2      	; 0x47b2 <__vector_39+0x66>
    47b0:	69 c0       	rjmp	.+210    	; 0x4884 <__vector_39+0x138>
    47b2:	50 f4       	brcc	.+20     	; 0x47c8 <__vector_39+0x7c>
    47b4:	80 33       	cpi	r24, 0x30	; 48
    47b6:	09 f4       	brne	.+2      	; 0x47ba <__vector_39+0x6e>
    47b8:	56 c0       	rjmp	.+172    	; 0x4866 <__vector_39+0x11a>
    47ba:	88 33       	cpi	r24, 0x38	; 56
    47bc:	09 f0       	breq	.+2      	; 0x47c0 <__vector_39+0x74>
    47be:	e1 c0       	rjmp	.+450    	; 0x4982 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    47c0:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_error>
      twi_releaseBus();
    47c4:	9c dd       	rcall	.-1224   	; 0x42fe <twi_releaseBus>
      break;
    47c6:	dd c0       	rjmp	.+442    	; 0x4982 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    47c8:	80 35       	cpi	r24, 0x50	; 80
    47ca:	09 f4       	brne	.+2      	; 0x47ce <__vector_39+0x82>
    47cc:	4f c0       	rjmp	.+158    	; 0x486c <__vector_39+0x120>
    47ce:	88 35       	cpi	r24, 0x58	; 88
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <__vector_39+0x88>
    47d2:	5d c0       	rjmp	.+186    	; 0x488e <__vector_39+0x142>
    47d4:	88 34       	cpi	r24, 0x48	; 72
    47d6:	09 f0       	breq	.+2      	; 0x47da <__vector_39+0x8e>
    47d8:	d4 c0       	rjmp	.+424    	; 0x4982 <__vector_39+0x236>
    47da:	d2 c0       	rjmp	.+420    	; 0x4980 <__vector_39+0x234>
    47dc:	88 39       	cpi	r24, 0x98	; 152
    47de:	09 f4       	brne	.+2      	; 0x47e2 <__vector_39+0x96>
    47e0:	c3 c0       	rjmp	.+390    	; 0x4968 <__vector_39+0x21c>
    47e2:	a8 f4       	brcc	.+42     	; 0x480e <__vector_39+0xc2>
    47e4:	88 37       	cpi	r24, 0x78	; 120
    47e6:	09 f4       	brne	.+2      	; 0x47ea <__vector_39+0x9e>
    47e8:	67 c0       	rjmp	.+206    	; 0x48b8 <__vector_39+0x16c>
    47ea:	38 f4       	brcc	.+14     	; 0x47fa <__vector_39+0xae>
    47ec:	88 36       	cpi	r24, 0x68	; 104
    47ee:	09 f4       	brne	.+2      	; 0x47f2 <__vector_39+0xa6>
    47f0:	63 c0       	rjmp	.+198    	; 0x48b8 <__vector_39+0x16c>
    47f2:	80 37       	cpi	r24, 0x70	; 112
    47f4:	09 f4       	brne	.+2      	; 0x47f8 <__vector_39+0xac>
    47f6:	60 c0       	rjmp	.+192    	; 0x48b8 <__vector_39+0x16c>
    47f8:	c4 c0       	rjmp	.+392    	; 0x4982 <__vector_39+0x236>
    47fa:	88 38       	cpi	r24, 0x88	; 136
    47fc:	09 f4       	brne	.+2      	; 0x4800 <__vector_39+0xb4>
    47fe:	b4 c0       	rjmp	.+360    	; 0x4968 <__vector_39+0x21c>
    4800:	80 39       	cpi	r24, 0x90	; 144
    4802:	09 f4       	brne	.+2      	; 0x4806 <__vector_39+0xba>
    4804:	5f c0       	rjmp	.+190    	; 0x48c4 <__vector_39+0x178>
    4806:	80 38       	cpi	r24, 0x80	; 128
    4808:	09 f0       	breq	.+2      	; 0x480c <__vector_39+0xc0>
    480a:	bb c0       	rjmp	.+374    	; 0x4982 <__vector_39+0x236>
    480c:	5b c0       	rjmp	.+182    	; 0x48c4 <__vector_39+0x178>
    480e:	80 3b       	cpi	r24, 0xB0	; 176
    4810:	09 f4       	brne	.+2      	; 0x4814 <__vector_39+0xc8>
    4812:	82 c0       	rjmp	.+260    	; 0x4918 <__vector_39+0x1cc>
    4814:	38 f4       	brcc	.+14     	; 0x4824 <__vector_39+0xd8>
    4816:	80 3a       	cpi	r24, 0xA0	; 160
    4818:	09 f4       	brne	.+2      	; 0x481c <__vector_39+0xd0>
    481a:	66 c0       	rjmp	.+204    	; 0x48e8 <__vector_39+0x19c>
    481c:	88 3a       	cpi	r24, 0xA8	; 168
    481e:	09 f4       	brne	.+2      	; 0x4822 <__vector_39+0xd6>
    4820:	7b c0       	rjmp	.+246    	; 0x4918 <__vector_39+0x1cc>
    4822:	af c0       	rjmp	.+350    	; 0x4982 <__vector_39+0x236>
    4824:	80 3c       	cpi	r24, 0xC0	; 192
    4826:	09 f4       	brne	.+2      	; 0x482a <__vector_39+0xde>
    4828:	a3 c0       	rjmp	.+326    	; 0x4970 <__vector_39+0x224>
    482a:	88 3c       	cpi	r24, 0xC8	; 200
    482c:	09 f4       	brne	.+2      	; 0x4830 <__vector_39+0xe4>
    482e:	a0 c0       	rjmp	.+320    	; 0x4970 <__vector_39+0x224>
    4830:	88 3b       	cpi	r24, 0xB8	; 184
    4832:	09 f4       	brne	.+2      	; 0x4836 <__vector_39+0xea>
    4834:	86 c0       	rjmp	.+268    	; 0x4942 <__vector_39+0x1f6>
    4836:	a5 c0       	rjmp	.+330    	; 0x4982 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4838:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_slarw>
    483c:	10 c0       	rjmp	.+32     	; 0x485e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    483e:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <twi_masterBufferIndex>
    4842:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <twi_masterBufferLength>
    4846:	98 17       	cp	r25, r24
    4848:	70 f5       	brcc	.+92     	; 0x48a6 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    484a:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <twi_masterBufferIndex>
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	8e 0f       	add	r24, r30
    4852:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <twi_masterBufferIndex>
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	e8 5e       	subi	r30, 0xE8	; 232
    485a:	fb 4f       	sbci	r31, 0xFB	; 251
    485c:	80 81       	ld	r24, Z
    485e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4862:	85 ec       	ldi	r24, 0xC5	; 197
    4864:	82 c0       	rjmp	.+260    	; 0x496a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4866:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_error>
    486a:	8a c0       	rjmp	.+276    	; 0x4980 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    486c:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <twi_masterBufferIndex>
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	8e 0f       	add	r24, r30
    4874:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <twi_masterBufferIndex>
    4878:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	e8 5e       	subi	r30, 0xE8	; 232
    4880:	fb 4f       	sbci	r31, 0xFB	; 251
    4882:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4884:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <twi_masterBufferIndex>
    4888:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <twi_masterBufferLength>
    488c:	6a c0       	rjmp	.+212    	; 0x4962 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    488e:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <twi_masterBufferIndex>
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	8e 0f       	add	r24, r30
    4896:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <twi_masterBufferIndex>
    489a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	e8 5e       	subi	r30, 0xE8	; 232
    48a2:	fb 4f       	sbci	r31, 0xFB	; 251
    48a4:	80 83       	st	Z, r24
      if (twi_sendStop){
    48a6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_sendStop>
    48aa:	81 11       	cpse	r24, r1
    48ac:	69 c0       	rjmp	.+210    	; 0x4980 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    48b4:	84 ea       	ldi	r24, 0xA4	; 164
    48b6:	5d c0       	rjmp	.+186    	; 0x4972 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    48b8:	83 e0       	ldi	r24, 0x03	; 3
    48ba:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    48be:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_rxBufferIndex>
    48c2:	cf cf       	rjmp	.-98     	; 0x4862 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    48c4:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_rxBufferIndex>
    48c8:	80 32       	cpi	r24, 0x20	; 32
    48ca:	08 f0       	brcs	.+2      	; 0x48ce <__vector_39+0x182>
    48cc:	4d c0       	rjmp	.+154    	; 0x4968 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    48ce:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_rxBufferIndex>
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	8e 0f       	add	r24, r30
    48d6:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_rxBufferIndex>
    48da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	ec 52       	subi	r30, 0x2C	; 44
    48e2:	fc 4f       	sbci	r31, 0xFC	; 252
    48e4:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    48e6:	bd cf       	rjmp	.-134    	; 0x4862 <__vector_39+0x116>
    48e8:	0a dd       	rcall	.-1516   	; 0x42fe <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    48ea:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_rxBufferIndex>
    48ee:	80 32       	cpi	r24, 0x20	; 32
    48f0:	30 f4       	brcc	.+12     	; 0x48fe <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    48f2:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_rxBufferIndex>
    48f6:	f0 e0       	ldi	r31, 0x00	; 0
    48f8:	ec 52       	subi	r30, 0x2C	; 44
    48fa:	fc 4f       	sbci	r31, 0xFC	; 252
    48fc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    48fe:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <twi_rxBufferIndex>
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <twi_onSlaveReceive>
    4908:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <twi_onSlaveReceive+0x1>
    490c:	84 ed       	ldi	r24, 0xD4	; 212
    490e:	93 e0       	ldi	r25, 0x03	; 3
    4910:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4912:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_rxBufferIndex>
      break;
    4916:	35 c0       	rjmp	.+106    	; 0x4982 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4918:	84 e0       	ldi	r24, 0x04	; 4
    491a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    491e:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4922:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4926:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <twi_onSlaveTransmit>
    492a:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <twi_onSlaveTransmit+0x1>
    492e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4930:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <twi_txBufferLength>
    4934:	81 11       	cpse	r24, r1
    4936:	05 c0       	rjmp	.+10     	; 0x4942 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    493e:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4942:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <twi_txBufferIndex>
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	8e 0f       	add	r24, r30
    494a:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <twi_txBufferIndex>
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	ea 50       	subi	r30, 0x0A	; 10
    4952:	fc 4f       	sbci	r31, 0xFC	; 252
    4954:	80 81       	ld	r24, Z
    4956:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    495a:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <twi_txBufferIndex>
    495e:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <twi_txBufferLength>
    4962:	98 17       	cp	r25, r24
    4964:	08 f4       	brcc	.+2      	; 0x4968 <__vector_39+0x21c>
    4966:	7d cf       	rjmp	.-262    	; 0x4862 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4968:	85 e8       	ldi	r24, 0x85	; 133
    496a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    496e:	09 c0       	rjmp	.+18     	; 0x4982 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4970:	85 ec       	ldi	r24, 0xC5	; 197
    4972:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4976:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_state>
      break;
    497a:	03 c0       	rjmp	.+6      	; 0x4982 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    497c:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_error>
      twi_stop();
    4980:	ae de       	rcall	.-676    	; 0x46de <twi_stop>
      break;
  }
}
    4982:	ff 91       	pop	r31
    4984:	ef 91       	pop	r30
    4986:	bf 91       	pop	r27
    4988:	af 91       	pop	r26
    498a:	9f 91       	pop	r25
    498c:	8f 91       	pop	r24
    498e:	7f 91       	pop	r23
    4990:	6f 91       	pop	r22
    4992:	5f 91       	pop	r21
    4994:	4f 91       	pop	r20
    4996:	3f 91       	pop	r19
    4998:	2f 91       	pop	r18
    499a:	0f 90       	pop	r0
    499c:	0b be       	out	0x3b, r0	; 59
    499e:	0f 90       	pop	r0
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	0f 90       	pop	r0
    49a4:	1f 90       	pop	r1
    49a6:	18 95       	reti

000049a8 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <_ZN5Print13setWriteErrorEi+0x6>
    49ae:	1f 92       	push	r1
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	9a 83       	std	Y+2, r25	; 0x02
    49b6:	89 83       	std	Y+1, r24	; 0x01
    49b8:	7c 83       	std	Y+4, r23	; 0x04
    49ba:	6b 83       	std	Y+3, r22	; 0x03
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	9a 81       	ldd	r25, Y+2	; 0x02
    49c0:	2b 81       	ldd	r18, Y+3	; 0x03
    49c2:	3c 81       	ldd	r19, Y+4	; 0x04
    49c4:	fc 01       	movw	r30, r24
    49c6:	33 83       	std	Z+3, r19	; 0x03
    49c8:	22 83       	std	Z+2, r18	; 0x02
    49ca:	00 00       	nop
    49cc:	0f 90       	pop	r0
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	df 91       	pop	r29
    49d6:	cf 91       	pop	r28
    49d8:	08 95       	ret

000049da <_ZN5PrintC1Ev>:
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	1f 92       	push	r1
    49e0:	1f 92       	push	r1
    49e2:	cd b7       	in	r28, 0x3d	; 61
    49e4:	de b7       	in	r29, 0x3e	; 62
    49e6:	9a 83       	std	Y+2, r25	; 0x02
    49e8:	89 83       	std	Y+1, r24	; 0x01
    49ea:	24 ee       	ldi	r18, 0xE4	; 228
    49ec:	32 e0       	ldi	r19, 0x02	; 2
    49ee:	89 81       	ldd	r24, Y+1	; 0x01
    49f0:	9a 81       	ldd	r25, Y+2	; 0x02
    49f2:	fc 01       	movw	r30, r24
    49f4:	31 83       	std	Z+1, r19	; 0x01
    49f6:	20 83       	st	Z, r18
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	9a 81       	ldd	r25, Y+2	; 0x02
    49fc:	fc 01       	movw	r30, r24
    49fe:	13 82       	std	Z+3, r1	; 0x03
    4a00:	12 82       	std	Z+2, r1	; 0x02
    4a02:	00 00       	nop
    4a04:	0f 90       	pop	r0
    4a06:	0f 90       	pop	r0
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	08 95       	ret

00004a0e <_ZN5Print17availableForWriteEv>:
    4a0e:	cf 93       	push	r28
    4a10:	df 93       	push	r29
    4a12:	1f 92       	push	r1
    4a14:	1f 92       	push	r1
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	9a 83       	std	Y+2, r25	; 0x02
    4a1c:	89 83       	std	Y+1, r24	; 0x01
    4a1e:	80 e0       	ldi	r24, 0x00	; 0
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	0f 90       	pop	r0
    4a24:	0f 90       	pop	r0
    4a26:	df 91       	pop	r29
    4a28:	cf 91       	pop	r28
    4a2a:	08 95       	ret

00004a2c <_ZN5Print5flushEv>:
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	1f 92       	push	r1
    4a32:	1f 92       	push	r1
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	9a 83       	std	Y+2, r25	; 0x02
    4a3a:	89 83       	std	Y+1, r24	; 0x01
    4a3c:	00 00       	nop
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	df 91       	pop	r29
    4a44:	cf 91       	pop	r28
    4a46:	08 95       	ret

00004a48 <_ZN6StreamC1Ev>:
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	1f 92       	push	r1
    4a4e:	1f 92       	push	r1
    4a50:	cd b7       	in	r28, 0x3d	; 61
    4a52:	de b7       	in	r29, 0x3e	; 62
    4a54:	9a 83       	std	Y+2, r25	; 0x02
    4a56:	89 83       	std	Y+1, r24	; 0x01
    4a58:	89 81       	ldd	r24, Y+1	; 0x01
    4a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5c:	be df       	rcall	.-132    	; 0x49da <_ZN5PrintC1Ev>
    4a5e:	21 eb       	ldi	r18, 0xB1	; 177
    4a60:	32 e0       	ldi	r19, 0x02	; 2
    4a62:	89 81       	ldd	r24, Y+1	; 0x01
    4a64:	9a 81       	ldd	r25, Y+2	; 0x02
    4a66:	fc 01       	movw	r30, r24
    4a68:	31 83       	std	Z+1, r19	; 0x01
    4a6a:	20 83       	st	Z, r18
    4a6c:	29 81       	ldd	r18, Y+1	; 0x01
    4a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a70:	88 ee       	ldi	r24, 0xE8	; 232
    4a72:	93 e0       	ldi	r25, 0x03	; 3
    4a74:	a0 e0       	ldi	r26, 0x00	; 0
    4a76:	b0 e0       	ldi	r27, 0x00	; 0
    4a78:	f9 01       	movw	r30, r18
    4a7a:	84 83       	std	Z+4, r24	; 0x04
    4a7c:	95 83       	std	Z+5, r25	; 0x05
    4a7e:	a6 83       	std	Z+6, r26	; 0x06
    4a80:	b7 83       	std	Z+7, r27	; 0x07
    4a82:	00 00       	nop
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	df 91       	pop	r29
    4a8a:	cf 91       	pop	r28
    4a8c:	08 95       	ret

00004a8e <_ZN7TwoWireC1Ev>:
    4a8e:	cf 93       	push	r28
    4a90:	df 93       	push	r29
    4a92:	1f 92       	push	r1
    4a94:	1f 92       	push	r1
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	9a 83       	std	Y+2, r25	; 0x02
    4a9c:	89 83       	std	Y+1, r24	; 0x01
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	d2 df       	rcall	.-92     	; 0x4a48 <_ZN6StreamC1Ev>
    4aa4:	2f e9       	ldi	r18, 0x9F	; 159
    4aa6:	32 e0       	ldi	r19, 0x02	; 2
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4aac:	fc 01       	movw	r30, r24
    4aae:	31 83       	std	Z+1, r19	; 0x01
    4ab0:	20 83       	st	Z, r18
    4ab2:	00 00       	nop
    4ab4:	0f 90       	pop	r0
    4ab6:	0f 90       	pop	r0
    4ab8:	df 91       	pop	r29
    4aba:	cf 91       	pop	r28
    4abc:	08 95       	ret

00004abe <_ZN7TwoWire5beginEv>:
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	1f 92       	push	r1
    4ac4:	1f 92       	push	r1
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	9a 83       	std	Y+2, r25	; 0x02
    4acc:	89 83       	std	Y+1, r24	; 0x01
    4ace:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4ad2:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4ad6:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4ada:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4ade:	b2 db       	rcall	.-2204   	; 0x4244 <twi_init>
    4ae0:	8e ed       	ldi	r24, 0xDE	; 222
    4ae2:	97 e2       	ldi	r25, 0x27	; 39
    4ae4:	07 dc       	rcall	.-2034   	; 0x42f4 <twi_attachSlaveTxEvent>
    4ae6:	81 e9       	ldi	r24, 0x91	; 145
    4ae8:	97 e2       	ldi	r25, 0x27	; 39
    4aea:	ff db       	rcall	.-2050   	; 0x42ea <twi_attachSlaveRxEvent>
    4aec:	00 00       	nop
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	df 91       	pop	r29
    4af4:	cf 91       	pop	r28
    4af6:	08 95       	ret

00004af8 <_ZN7TwoWire11requestFromEhhmhh>:
    4af8:	cf 92       	push	r12
    4afa:	ef 92       	push	r14
    4afc:	0f 93       	push	r16
    4afe:	1f 93       	push	r17
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	2b 97       	sbiw	r28, 0x0b	; 11
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	de bf       	out	0x3e, r29	; 62
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	9b 83       	std	Y+3, r25	; 0x03
    4b16:	8a 83       	std	Y+2, r24	; 0x02
    4b18:	6c 83       	std	Y+4, r22	; 0x04
    4b1a:	4d 83       	std	Y+5, r20	; 0x05
    4b1c:	0e 83       	std	Y+6, r16	; 0x06
    4b1e:	1f 83       	std	Y+7, r17	; 0x07
    4b20:	28 87       	std	Y+8, r18	; 0x08
    4b22:	39 87       	std	Y+9, r19	; 0x09
    4b24:	ea 86       	std	Y+10, r14	; 0x0a
    4b26:	cb 86       	std	Y+11, r12	; 0x0b
    4b28:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b2a:	88 23       	and	r24, r24
    4b2c:	d9 f1       	breq	.+118    	; 0x4ba4 <_ZN7TwoWire11requestFromEhhmhh+0xac>
    4b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b30:	9b 81       	ldd	r25, Y+3	; 0x03
    4b32:	6c 81       	ldd	r22, Y+4	; 0x04
    4b34:	98 d0       	rcall	.+304    	; 0x4c66 <_ZN7TwoWire17beginTransmissionEh>
    4b36:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b38:	84 30       	cpi	r24, 0x04	; 4
    4b3a:	10 f0       	brcs	.+4      	; 0x4b40 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4b3c:	83 e0       	ldi	r24, 0x03	; 3
    4b3e:	8a 87       	std	Y+10, r24	; 0x0a
    4b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b42:	9f ef       	ldi	r25, 0xFF	; 255
    4b44:	98 0f       	add	r25, r24
    4b46:	9a 87       	std	Y+10, r25	; 0x0a
    4b48:	91 e0       	ldi	r25, 0x01	; 1
    4b4a:	88 23       	and	r24, r24
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	99 23       	and	r25, r25
    4b52:	21 f1       	breq	.+72     	; 0x4b9c <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    4b54:	8a 81       	ldd	r24, Y+2	; 0x02
    4b56:	9b 81       	ldd	r25, Y+3	; 0x03
    4b58:	fc 01       	movw	r30, r24
    4b5a:	80 81       	ld	r24, Z
    4b5c:	91 81       	ldd	r25, Z+1	; 0x01
    4b5e:	fc 01       	movw	r30, r24
    4b60:	20 81       	ld	r18, Z
    4b62:	31 81       	ldd	r19, Z+1	; 0x01
    4b64:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b66:	88 2f       	mov	r24, r24
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	ac 01       	movw	r20, r24
    4b6c:	44 0f       	add	r20, r20
    4b6e:	55 1f       	adc	r21, r21
    4b70:	44 0f       	add	r20, r20
    4b72:	55 1f       	adc	r21, r21
    4b74:	44 0f       	add	r20, r20
    4b76:	55 1f       	adc	r21, r21
    4b78:	8e 81       	ldd	r24, Y+6	; 0x06
    4b7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b7c:	a8 85       	ldd	r26, Y+8	; 0x08
    4b7e:	b9 85       	ldd	r27, Y+9	; 0x09
    4b80:	04 c0       	rjmp	.+8      	; 0x4b8a <_ZN7TwoWire11requestFromEhhmhh+0x92>
    4b82:	b6 95       	lsr	r27
    4b84:	a7 95       	ror	r26
    4b86:	97 95       	ror	r25
    4b88:	87 95       	ror	r24
    4b8a:	4a 95       	dec	r20
    4b8c:	d2 f7       	brpl	.-12     	; 0x4b82 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    4b8e:	48 2f       	mov	r20, r24
    4b90:	8a 81       	ldd	r24, Y+2	; 0x02
    4b92:	9b 81       	ldd	r25, Y+3	; 0x03
    4b94:	64 2f       	mov	r22, r20
    4b96:	f9 01       	movw	r30, r18
    4b98:	19 95       	eicall
    4b9a:	d2 cf       	rjmp	.-92     	; 0x4b40 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4ba0:	60 e0       	ldi	r22, 0x00	; 0
    4ba2:	91 d0       	rcall	.+290    	; 0x4cc6 <_ZN7TwoWire15endTransmissionEh>
    4ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba6:	81 32       	cpi	r24, 0x21	; 33
    4ba8:	10 f0       	brcs	.+4      	; 0x4bae <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    4baa:	80 e2       	ldi	r24, 0x20	; 32
    4bac:	8d 83       	std	Y+5, r24	; 0x05
    4bae:	2b 85       	ldd	r18, Y+11	; 0x0b
    4bb0:	4d 81       	ldd	r20, Y+5	; 0x05
    4bb2:	66 e4       	ldi	r22, 0x46	; 70
    4bb4:	74 e0       	ldi	r23, 0x04	; 4
    4bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    4bb8:	bc db       	rcall	.-2184   	; 0x4332 <twi_readFrom>
    4bba:	89 83       	std	Y+1, r24	; 0x01
    4bbc:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	2b 96       	adiw	r28, 0x0b	; 11
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
    4bd4:	df 91       	pop	r29
    4bd6:	cf 91       	pop	r28
    4bd8:	1f 91       	pop	r17
    4bda:	0f 91       	pop	r16
    4bdc:	ef 90       	pop	r14
    4bde:	cf 90       	pop	r12
    4be0:	08 95       	ret

00004be2 <_ZN7TwoWire11requestFromEhhh>:
    4be2:	cf 92       	push	r12
    4be4:	ef 92       	push	r14
    4be6:	0f 93       	push	r16
    4be8:	1f 93       	push	r17
    4bea:	cf 93       	push	r28
    4bec:	df 93       	push	r29
    4bee:	00 d0       	rcall	.+0      	; 0x4bf0 <_ZN7TwoWire11requestFromEhhh+0xe>
    4bf0:	1f 92       	push	r1
    4bf2:	1f 92       	push	r1
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
    4bf8:	9a 83       	std	Y+2, r25	; 0x02
    4bfa:	89 83       	std	Y+1, r24	; 0x01
    4bfc:	6b 83       	std	Y+3, r22	; 0x03
    4bfe:	4c 83       	std	Y+4, r20	; 0x04
    4c00:	2d 83       	std	Y+5, r18	; 0x05
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	9a 81       	ldd	r25, Y+2	; 0x02
    4c06:	cd 80       	ldd	r12, Y+5	; 0x05
    4c08:	e1 2c       	mov	r14, r1
    4c0a:	00 e0       	ldi	r16, 0x00	; 0
    4c0c:	10 e0       	ldi	r17, 0x00	; 0
    4c0e:	98 01       	movw	r18, r16
    4c10:	4c 81       	ldd	r20, Y+4	; 0x04
    4c12:	6b 81       	ldd	r22, Y+3	; 0x03
    4c14:	71 df       	rcall	.-286    	; 0x4af8 <_ZN7TwoWire11requestFromEhhmhh>
    4c16:	0f 90       	pop	r0
    4c18:	0f 90       	pop	r0
    4c1a:	0f 90       	pop	r0
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	ef 90       	pop	r14
    4c2a:	cf 90       	pop	r12
    4c2c:	08 95       	ret

00004c2e <_ZN7TwoWire11requestFromEii>:
    4c2e:	cf 93       	push	r28
    4c30:	df 93       	push	r29
    4c32:	00 d0       	rcall	.+0      	; 0x4c34 <_ZN7TwoWire11requestFromEii+0x6>
    4c34:	00 d0       	rcall	.+0      	; 0x4c36 <_ZN7TwoWire11requestFromEii+0x8>
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    4c3a:	9a 83       	std	Y+2, r25	; 0x02
    4c3c:	89 83       	std	Y+1, r24	; 0x01
    4c3e:	7c 83       	std	Y+4, r23	; 0x04
    4c40:	6b 83       	std	Y+3, r22	; 0x03
    4c42:	5e 83       	std	Y+6, r21	; 0x06
    4c44:	4d 83       	std	Y+5, r20	; 0x05
    4c46:	4d 81       	ldd	r20, Y+5	; 0x05
    4c48:	3b 81       	ldd	r19, Y+3	; 0x03
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4e:	21 e0       	ldi	r18, 0x01	; 1
    4c50:	63 2f       	mov	r22, r19
    4c52:	c7 df       	rcall	.-114    	; 0x4be2 <_ZN7TwoWire11requestFromEhhh>
    4c54:	26 96       	adiw	r28, 0x06	; 6
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	cd bf       	out	0x3d, r28	; 61
    4c60:	df 91       	pop	r29
    4c62:	cf 91       	pop	r28
    4c64:	08 95       	ret

00004c66 <_ZN7TwoWire17beginTransmissionEh>:
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	00 d0       	rcall	.+0      	; 0x4c6c <_ZN7TwoWire17beginTransmissionEh+0x6>
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	9a 83       	std	Y+2, r25	; 0x02
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	6b 83       	std	Y+3, r22	; 0x03
    4c76:	81 e0       	ldi	r24, 0x01	; 1
    4c78:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZN7TwoWire12transmittingE>
    4c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7e:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <_ZN7TwoWire9txAddressE>
    4c82:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4c86:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4c8a:	00 00       	nop
    4c8c:	0f 90       	pop	r0
    4c8e:	0f 90       	pop	r0
    4c90:	0f 90       	pop	r0
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	08 95       	ret

00004c98 <_ZN7TwoWire17beginTransmissionEi>:
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	00 d0       	rcall	.+0      	; 0x4c9e <_ZN7TwoWire17beginTransmissionEi+0x6>
    4c9e:	1f 92       	push	r1
    4ca0:	cd b7       	in	r28, 0x3d	; 61
    4ca2:	de b7       	in	r29, 0x3e	; 62
    4ca4:	9a 83       	std	Y+2, r25	; 0x02
    4ca6:	89 83       	std	Y+1, r24	; 0x01
    4ca8:	7c 83       	std	Y+4, r23	; 0x04
    4caa:	6b 83       	std	Y+3, r22	; 0x03
    4cac:	2b 81       	ldd	r18, Y+3	; 0x03
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb2:	62 2f       	mov	r22, r18
    4cb4:	d8 df       	rcall	.-80     	; 0x4c66 <_ZN7TwoWire17beginTransmissionEh>
    4cb6:	00 00       	nop
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	df 91       	pop	r29
    4cc2:	cf 91       	pop	r28
    4cc4:	08 95       	ret

00004cc6 <_ZN7TwoWire15endTransmissionEh>:
    4cc6:	0f 93       	push	r16
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	00 d0       	rcall	.+0      	; 0x4cce <_ZN7TwoWire15endTransmissionEh+0x8>
    4cce:	1f 92       	push	r1
    4cd0:	cd b7       	in	r28, 0x3d	; 61
    4cd2:	de b7       	in	r29, 0x3e	; 62
    4cd4:	9b 83       	std	Y+3, r25	; 0x03
    4cd6:	8a 83       	std	Y+2, r24	; 0x02
    4cd8:	6c 83       	std	Y+4, r22	; 0x04
    4cda:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4cde:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire9txAddressE>
    4ce2:	0c 81       	ldd	r16, Y+4	; 0x04
    4ce4:	21 e0       	ldi	r18, 0x01	; 1
    4ce6:	49 2f       	mov	r20, r25
    4ce8:	69 e6       	ldi	r22, 0x69	; 105
    4cea:	74 e0       	ldi	r23, 0x04	; 4
    4cec:	09 dc       	rcall	.-2030   	; 0x4500 <twi_writeTo>
    4cee:	89 83       	std	Y+1, r24	; 0x01
    4cf0:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4cf4:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4cf8:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire12transmittingE>
    4cfc:	89 81       	ldd	r24, Y+1	; 0x01
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	0f 90       	pop	r0
    4d04:	0f 90       	pop	r0
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	0f 91       	pop	r16
    4d0c:	08 95       	ret

00004d0e <_ZN7TwoWire15endTransmissionEv>:
    4d0e:	cf 93       	push	r28
    4d10:	df 93       	push	r29
    4d12:	1f 92       	push	r1
    4d14:	1f 92       	push	r1
    4d16:	cd b7       	in	r28, 0x3d	; 61
    4d18:	de b7       	in	r29, 0x3e	; 62
    4d1a:	9a 83       	std	Y+2, r25	; 0x02
    4d1c:	89 83       	std	Y+1, r24	; 0x01
    4d1e:	89 81       	ldd	r24, Y+1	; 0x01
    4d20:	9a 81       	ldd	r25, Y+2	; 0x02
    4d22:	61 e0       	ldi	r22, 0x01	; 1
    4d24:	d0 df       	rcall	.-96     	; 0x4cc6 <_ZN7TwoWire15endTransmissionEh>
    4d26:	0f 90       	pop	r0
    4d28:	0f 90       	pop	r0
    4d2a:	df 91       	pop	r29
    4d2c:	cf 91       	pop	r28
    4d2e:	08 95       	ret

00004d30 <_ZN7TwoWire5writeEh>:
    4d30:	cf 93       	push	r28
    4d32:	df 93       	push	r29
    4d34:	00 d0       	rcall	.+0      	; 0x4d36 <_ZN7TwoWire5writeEh+0x6>
    4d36:	cd b7       	in	r28, 0x3d	; 61
    4d38:	de b7       	in	r29, 0x3e	; 62
    4d3a:	9a 83       	std	Y+2, r25	; 0x02
    4d3c:	89 83       	std	Y+1, r24	; 0x01
    4d3e:	6b 83       	std	Y+3, r22	; 0x03
    4d40:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire12transmittingE>
    4d44:	88 23       	and	r24, r24
    4d46:	f9 f0       	breq	.+62     	; 0x4d86 <_ZN7TwoWire5writeEh+0x56>
    4d48:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4d4c:	80 32       	cpi	r24, 0x20	; 32
    4d4e:	40 f0       	brcs	.+16     	; 0x4d60 <_ZN7TwoWire5writeEh+0x30>
    4d50:	89 81       	ldd	r24, Y+1	; 0x01
    4d52:	9a 81       	ldd	r25, Y+2	; 0x02
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	27 de       	rcall	.-946    	; 0x49a8 <_ZN5Print13setWriteErrorEi>
    4d5a:	80 e0       	ldi	r24, 0x00	; 0
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	19 c0       	rjmp	.+50     	; 0x4d92 <_ZN7TwoWire5writeEh+0x62>
    4d60:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4d64:	88 2f       	mov	r24, r24
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	2b 81       	ldd	r18, Y+3	; 0x03
    4d6a:	87 59       	subi	r24, 0x97	; 151
    4d6c:	9b 4f       	sbci	r25, 0xFB	; 251
    4d6e:	fc 01       	movw	r30, r24
    4d70:	20 83       	st	Z, r18
    4d72:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4d76:	8f 5f       	subi	r24, 0xFF	; 255
    4d78:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4d7c:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4d80:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4d84:	04 c0       	rjmp	.+8      	; 0x4d8e <_ZN7TwoWire5writeEh+0x5e>
    4d86:	ce 01       	movw	r24, r28
    4d88:	03 96       	adiw	r24, 0x03	; 3
    4d8a:	61 e0       	ldi	r22, 0x01	; 1
    4d8c:	86 da       	rcall	.-2804   	; 0x429a <twi_transmit>
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	0f 90       	pop	r0
    4d98:	df 91       	pop	r29
    4d9a:	cf 91       	pop	r28
    4d9c:	08 95       	ret

00004d9e <_ZN7TwoWire5writeEPKhj>:
    4d9e:	cf 93       	push	r28
    4da0:	df 93       	push	r29
    4da2:	cd b7       	in	r28, 0x3d	; 61
    4da4:	de b7       	in	r29, 0x3e	; 62
    4da6:	28 97       	sbiw	r28, 0x08	; 8
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	f8 94       	cli
    4dac:	de bf       	out	0x3e, r29	; 62
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	cd bf       	out	0x3d, r28	; 61
    4db2:	9c 83       	std	Y+4, r25	; 0x04
    4db4:	8b 83       	std	Y+3, r24	; 0x03
    4db6:	7e 83       	std	Y+6, r23	; 0x06
    4db8:	6d 83       	std	Y+5, r22	; 0x05
    4dba:	58 87       	std	Y+8, r21	; 0x08
    4dbc:	4f 83       	std	Y+7, r20	; 0x07
    4dbe:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire12transmittingE>
    4dc2:	88 23       	and	r24, r24
    4dc4:	21 f1       	breq	.+72     	; 0x4e0e <_ZN7TwoWire5writeEPKhj+0x70>
    4dc6:	1a 82       	std	Y+2, r1	; 0x02
    4dc8:	19 82       	std	Y+1, r1	; 0x01
    4dca:	29 81       	ldd	r18, Y+1	; 0x01
    4dcc:	3a 81       	ldd	r19, Y+2	; 0x02
    4dce:	8f 81       	ldd	r24, Y+7	; 0x07
    4dd0:	98 85       	ldd	r25, Y+8	; 0x08
    4dd2:	28 17       	cp	r18, r24
    4dd4:	39 07       	cpc	r19, r25
    4dd6:	00 f5       	brcc	.+64     	; 0x4e18 <_ZN7TwoWire5writeEPKhj+0x7a>
    4dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dda:	9c 81       	ldd	r25, Y+4	; 0x04
    4ddc:	fc 01       	movw	r30, r24
    4dde:	80 81       	ld	r24, Z
    4de0:	91 81       	ldd	r25, Z+1	; 0x01
    4de2:	fc 01       	movw	r30, r24
    4de4:	20 81       	ld	r18, Z
    4de6:	31 81       	ldd	r19, Z+1	; 0x01
    4de8:	4d 81       	ldd	r20, Y+5	; 0x05
    4dea:	5e 81       	ldd	r21, Y+6	; 0x06
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	9a 81       	ldd	r25, Y+2	; 0x02
    4df0:	84 0f       	add	r24, r20
    4df2:	95 1f       	adc	r25, r21
    4df4:	fc 01       	movw	r30, r24
    4df6:	40 81       	ld	r20, Z
    4df8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    4dfc:	64 2f       	mov	r22, r20
    4dfe:	f9 01       	movw	r30, r18
    4e00:	19 95       	eicall
    4e02:	89 81       	ldd	r24, Y+1	; 0x01
    4e04:	9a 81       	ldd	r25, Y+2	; 0x02
    4e06:	01 96       	adiw	r24, 0x01	; 1
    4e08:	9a 83       	std	Y+2, r25	; 0x02
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	de cf       	rjmp	.-68     	; 0x4dca <_ZN7TwoWire5writeEPKhj+0x2c>
    4e0e:	2f 81       	ldd	r18, Y+7	; 0x07
    4e10:	8d 81       	ldd	r24, Y+5	; 0x05
    4e12:	9e 81       	ldd	r25, Y+6	; 0x06
    4e14:	62 2f       	mov	r22, r18
    4e16:	41 da       	rcall	.-2942   	; 0x429a <twi_transmit>
    4e18:	8f 81       	ldd	r24, Y+7	; 0x07
    4e1a:	98 85       	ldd	r25, Y+8	; 0x08
    4e1c:	28 96       	adiw	r28, 0x08	; 8
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	08 95       	ret

00004e2e <_ZN7TwoWire9availableEv>:
    4e2e:	cf 93       	push	r28
    4e30:	df 93       	push	r29
    4e32:	1f 92       	push	r1
    4e34:	1f 92       	push	r1
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
    4e3a:	9a 83       	std	Y+2, r25	; 0x02
    4e3c:	89 83       	std	Y+1, r24	; 0x01
    4e3e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4e42:	28 2f       	mov	r18, r24
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4e4a:	88 2f       	mov	r24, r24
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	a9 01       	movw	r20, r18
    4e50:	48 1b       	sub	r20, r24
    4e52:	59 0b       	sbc	r21, r25
    4e54:	ca 01       	movw	r24, r20
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	df 91       	pop	r29
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret

00004e60 <_ZN7TwoWire4readEv>:
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	00 d0       	rcall	.+0      	; 0x4e66 <_ZN7TwoWire4readEv+0x6>
    4e66:	1f 92       	push	r1
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62
    4e6c:	9c 83       	std	Y+4, r25	; 0x04
    4e6e:	8b 83       	std	Y+3, r24	; 0x03
    4e70:	8f ef       	ldi	r24, 0xFF	; 255
    4e72:	9f ef       	ldi	r25, 0xFF	; 255
    4e74:	9a 83       	std	Y+2, r25	; 0x02
    4e76:	89 83       	std	Y+1, r24	; 0x01
    4e78:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4e7c:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4e80:	98 17       	cp	r25, r24
    4e82:	88 f4       	brcc	.+34     	; 0x4ea6 <_ZN7TwoWire4readEv+0x46>
    4e84:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	8a 5b       	subi	r24, 0xBA	; 186
    4e8e:	9b 4f       	sbci	r25, 0xFB	; 251
    4e90:	fc 01       	movw	r30, r24
    4e92:	80 81       	ld	r24, Z
    4e94:	88 2f       	mov	r24, r24
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	9a 83       	std	Y+2, r25	; 0x02
    4e9a:	89 83       	std	Y+1, r24	; 0x01
    4e9c:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4ea0:	8f 5f       	subi	r24, 0xFF	; 255
    4ea2:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4ea6:	89 81       	ldd	r24, Y+1	; 0x01
    4ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	0f 90       	pop	r0
    4eb0:	0f 90       	pop	r0
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	08 95       	ret

00004eb8 <_ZN7TwoWire4peekEv>:
    4eb8:	cf 93       	push	r28
    4eba:	df 93       	push	r29
    4ebc:	00 d0       	rcall	.+0      	; 0x4ebe <_ZN7TwoWire4peekEv+0x6>
    4ebe:	1f 92       	push	r1
    4ec0:	cd b7       	in	r28, 0x3d	; 61
    4ec2:	de b7       	in	r29, 0x3e	; 62
    4ec4:	9c 83       	std	Y+4, r25	; 0x04
    4ec6:	8b 83       	std	Y+3, r24	; 0x03
    4ec8:	8f ef       	ldi	r24, 0xFF	; 255
    4eca:	9f ef       	ldi	r25, 0xFF	; 255
    4ecc:	9a 83       	std	Y+2, r25	; 0x02
    4ece:	89 83       	std	Y+1, r24	; 0x01
    4ed0:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4ed4:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4ed8:	98 17       	cp	r25, r24
    4eda:	60 f4       	brcc	.+24     	; 0x4ef4 <_ZN7TwoWire4peekEv+0x3c>
    4edc:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4ee0:	88 2f       	mov	r24, r24
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	8a 5b       	subi	r24, 0xBA	; 186
    4ee6:	9b 4f       	sbci	r25, 0xFB	; 251
    4ee8:	fc 01       	movw	r30, r24
    4eea:	80 81       	ld	r24, Z
    4eec:	88 2f       	mov	r24, r24
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	9a 83       	std	Y+2, r25	; 0x02
    4ef2:	89 83       	std	Y+1, r24	; 0x01
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	df 91       	pop	r29
    4f02:	cf 91       	pop	r28
    4f04:	08 95       	ret

00004f06 <_ZN7TwoWire5flushEv>:
    4f06:	cf 93       	push	r28
    4f08:	df 93       	push	r29
    4f0a:	1f 92       	push	r1
    4f0c:	1f 92       	push	r1
    4f0e:	cd b7       	in	r28, 0x3d	; 61
    4f10:	de b7       	in	r29, 0x3e	; 62
    4f12:	9a 83       	std	Y+2, r25	; 0x02
    4f14:	89 83       	std	Y+1, r24	; 0x01
    4f16:	00 00       	nop
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	08 95       	ret

00004f22 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4f22:	cf 93       	push	r28
    4f24:	df 93       	push	r29
    4f26:	00 d0       	rcall	.+0      	; 0x4f28 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    4f28:	1f 92       	push	r1
    4f2a:	1f 92       	push	r1
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
    4f30:	9b 83       	std	Y+3, r25	; 0x03
    4f32:	8a 83       	std	Y+2, r24	; 0x02
    4f34:	7d 83       	std	Y+5, r23	; 0x05
    4f36:	6c 83       	std	Y+4, r22	; 0x04
    4f38:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZN7TwoWire14user_onReceiveE>
    4f3c:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZN7TwoWire14user_onReceiveE+0x1>
    4f40:	89 2b       	or	r24, r25
    4f42:	89 f1       	breq	.+98     	; 0x4fa6 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    4f44:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4f48:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4f4c:	98 17       	cp	r25, r24
    4f4e:	68 f1       	brcs	.+90     	; 0x4faa <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    4f50:	19 82       	std	Y+1, r1	; 0x01
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	28 2f       	mov	r18, r24
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	8c 81       	ldd	r24, Y+4	; 0x04
    4f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f5c:	28 17       	cp	r18, r24
    4f5e:	39 07       	cpc	r19, r25
    4f60:	a4 f4       	brge	.+40     	; 0x4f8a <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
    4f64:	88 2f       	mov	r24, r24
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	29 81       	ldd	r18, Y+1	; 0x01
    4f6a:	22 2f       	mov	r18, r18
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	4a 81       	ldd	r20, Y+2	; 0x02
    4f70:	5b 81       	ldd	r21, Y+3	; 0x03
    4f72:	24 0f       	add	r18, r20
    4f74:	35 1f       	adc	r19, r21
    4f76:	f9 01       	movw	r30, r18
    4f78:	20 81       	ld	r18, Z
    4f7a:	8a 5b       	subi	r24, 0xBA	; 186
    4f7c:	9b 4f       	sbci	r25, 0xFB	; 251
    4f7e:	fc 01       	movw	r30, r24
    4f80:	20 83       	st	Z, r18
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	8f 5f       	subi	r24, 0xFF	; 255
    4f86:	89 83       	std	Y+1, r24	; 0x01
    4f88:	e4 cf       	rjmp	.-56     	; 0x4f52 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    4f8a:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    4f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f90:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <_ZN7TwoWire14rxBufferLengthE>
    4f94:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <_ZN7TwoWire14user_onReceiveE>
    4f98:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <_ZN7TwoWire14user_onReceiveE+0x1>
    4f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    4fa0:	f9 01       	movw	r30, r18
    4fa2:	19 95       	eicall
    4fa4:	03 c0       	rjmp	.+6      	; 0x4fac <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4fa6:	00 00       	nop
    4fa8:	01 c0       	rjmp	.+2      	; 0x4fac <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4faa:	00 00       	nop
    4fac:	0f 90       	pop	r0
    4fae:	0f 90       	pop	r0
    4fb0:	0f 90       	pop	r0
    4fb2:	0f 90       	pop	r0
    4fb4:	0f 90       	pop	r0
    4fb6:	df 91       	pop	r29
    4fb8:	cf 91       	pop	r28
    4fba:	08 95       	ret

00004fbc <_ZN7TwoWire16onRequestServiceEv>:
    4fbc:	cf 93       	push	r28
    4fbe:	df 93       	push	r29
    4fc0:	cd b7       	in	r28, 0x3d	; 61
    4fc2:	de b7       	in	r29, 0x3e	; 62
    4fc4:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZN7TwoWire14user_onRequestE>
    4fc8:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZN7TwoWire14user_onRequestE+0x1>
    4fcc:	89 2b       	or	r24, r25
    4fce:	59 f0       	breq	.+22     	; 0x4fe6 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    4fd0:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZN7TwoWire13txBufferIndexE>
    4fd4:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZN7TwoWire14txBufferLengthE>
    4fd8:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZN7TwoWire14user_onRequestE>
    4fdc:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <_ZN7TwoWire14user_onRequestE+0x1>
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	19 95       	eicall
    4fe4:	01 c0       	rjmp	.+2      	; 0x4fe8 <_ZN7TwoWire16onRequestServiceEv+0x2c>
    4fe6:	00 00       	nop
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	08 95       	ret

00004fee <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	00 d0       	rcall	.+0      	; 0x4ff4 <_Z41__static_initialization_and_destruction_0ii+0x6>
    4ff4:	1f 92       	push	r1
    4ff6:	cd b7       	in	r28, 0x3d	; 61
    4ff8:	de b7       	in	r29, 0x3e	; 62
    4ffa:	9a 83       	std	Y+2, r25	; 0x02
    4ffc:	89 83       	std	Y+1, r24	; 0x01
    4ffe:	7c 83       	std	Y+4, r23	; 0x04
    5000:	6b 83       	std	Y+3, r22	; 0x03
    5002:	89 81       	ldd	r24, Y+1	; 0x01
    5004:	9a 81       	ldd	r25, Y+2	; 0x02
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	39 f4       	brne	.+14     	; 0x5018 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    500a:	8b 81       	ldd	r24, Y+3	; 0x03
    500c:	9c 81       	ldd	r25, Y+4	; 0x04
    500e:	01 96       	adiw	r24, 0x01	; 1
    5010:	19 f4       	brne	.+6      	; 0x5018 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    5012:	80 e9       	ldi	r24, 0x90	; 144
    5014:	94 e0       	ldi	r25, 0x04	; 4
    5016:	3b dd       	rcall	.-1418   	; 0x4a8e <_ZN7TwoWireC1Ev>
    5018:	00 00       	nop
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	0f 90       	pop	r0
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    5028:	cf 93       	push	r28
    502a:	df 93       	push	r29
    502c:	cd b7       	in	r28, 0x3d	; 61
    502e:	de b7       	in	r29, 0x3e	; 62
    5030:	6f ef       	ldi	r22, 0xFF	; 255
    5032:	7f ef       	ldi	r23, 0xFF	; 255
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	da df       	rcall	.-76     	; 0x4fee <_Z41__static_initialization_and_destruction_0ii>
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	08 95       	ret

00005040 <__subsf3>:
    5040:	50 58       	subi	r21, 0x80	; 128

00005042 <__addsf3>:
    5042:	bb 27       	eor	r27, r27
    5044:	aa 27       	eor	r26, r26
    5046:	0e d0       	rcall	.+28     	; 0x5064 <__addsf3x>
    5048:	09 c1       	rjmp	.+530    	; 0x525c <__fp_round>
    504a:	fa d0       	rcall	.+500    	; 0x5240 <__fp_pscA>
    504c:	30 f0       	brcs	.+12     	; 0x505a <__addsf3+0x18>
    504e:	ff d0       	rcall	.+510    	; 0x524e <__fp_pscB>
    5050:	20 f0       	brcs	.+8      	; 0x505a <__addsf3+0x18>
    5052:	31 f4       	brne	.+12     	; 0x5060 <__addsf3+0x1e>
    5054:	9f 3f       	cpi	r25, 0xFF	; 255
    5056:	11 f4       	brne	.+4      	; 0x505c <__addsf3+0x1a>
    5058:	1e f4       	brtc	.+6      	; 0x5060 <__addsf3+0x1e>
    505a:	ef c0       	rjmp	.+478    	; 0x523a <__fp_nan>
    505c:	0e f4       	brtc	.+2      	; 0x5060 <__addsf3+0x1e>
    505e:	e0 95       	com	r30
    5060:	e7 fb       	bst	r30, 7
    5062:	e5 c0       	rjmp	.+458    	; 0x522e <__fp_inf>

00005064 <__addsf3x>:
    5064:	e9 2f       	mov	r30, r25
    5066:	0b d1       	rcall	.+534    	; 0x527e <__fp_split3>
    5068:	80 f3       	brcs	.-32     	; 0x504a <__addsf3+0x8>
    506a:	ba 17       	cp	r27, r26
    506c:	62 07       	cpc	r22, r18
    506e:	73 07       	cpc	r23, r19
    5070:	84 07       	cpc	r24, r20
    5072:	95 07       	cpc	r25, r21
    5074:	18 f0       	brcs	.+6      	; 0x507c <__addsf3x+0x18>
    5076:	71 f4       	brne	.+28     	; 0x5094 <__addsf3x+0x30>
    5078:	9e f5       	brtc	.+102    	; 0x50e0 <__addsf3x+0x7c>
    507a:	23 c1       	rjmp	.+582    	; 0x52c2 <__fp_zero>
    507c:	0e f4       	brtc	.+2      	; 0x5080 <__addsf3x+0x1c>
    507e:	e0 95       	com	r30
    5080:	0b 2e       	mov	r0, r27
    5082:	ba 2f       	mov	r27, r26
    5084:	a0 2d       	mov	r26, r0
    5086:	0b 01       	movw	r0, r22
    5088:	b9 01       	movw	r22, r18
    508a:	90 01       	movw	r18, r0
    508c:	0c 01       	movw	r0, r24
    508e:	ca 01       	movw	r24, r20
    5090:	a0 01       	movw	r20, r0
    5092:	11 24       	eor	r1, r1
    5094:	ff 27       	eor	r31, r31
    5096:	59 1b       	sub	r21, r25
    5098:	99 f0       	breq	.+38     	; 0x50c0 <__addsf3x+0x5c>
    509a:	59 3f       	cpi	r21, 0xF9	; 249
    509c:	50 f4       	brcc	.+20     	; 0x50b2 <__addsf3x+0x4e>
    509e:	50 3e       	cpi	r21, 0xE0	; 224
    50a0:	68 f1       	brcs	.+90     	; 0x50fc <__addsf3x+0x98>
    50a2:	1a 16       	cp	r1, r26
    50a4:	f0 40       	sbci	r31, 0x00	; 0
    50a6:	a2 2f       	mov	r26, r18
    50a8:	23 2f       	mov	r18, r19
    50aa:	34 2f       	mov	r19, r20
    50ac:	44 27       	eor	r20, r20
    50ae:	58 5f       	subi	r21, 0xF8	; 248
    50b0:	f3 cf       	rjmp	.-26     	; 0x5098 <__addsf3x+0x34>
    50b2:	46 95       	lsr	r20
    50b4:	37 95       	ror	r19
    50b6:	27 95       	ror	r18
    50b8:	a7 95       	ror	r26
    50ba:	f0 40       	sbci	r31, 0x00	; 0
    50bc:	53 95       	inc	r21
    50be:	c9 f7       	brne	.-14     	; 0x50b2 <__addsf3x+0x4e>
    50c0:	7e f4       	brtc	.+30     	; 0x50e0 <__addsf3x+0x7c>
    50c2:	1f 16       	cp	r1, r31
    50c4:	ba 0b       	sbc	r27, r26
    50c6:	62 0b       	sbc	r22, r18
    50c8:	73 0b       	sbc	r23, r19
    50ca:	84 0b       	sbc	r24, r20
    50cc:	ba f0       	brmi	.+46     	; 0x50fc <__addsf3x+0x98>
    50ce:	91 50       	subi	r25, 0x01	; 1
    50d0:	a1 f0       	breq	.+40     	; 0x50fa <__addsf3x+0x96>
    50d2:	ff 0f       	add	r31, r31
    50d4:	bb 1f       	adc	r27, r27
    50d6:	66 1f       	adc	r22, r22
    50d8:	77 1f       	adc	r23, r23
    50da:	88 1f       	adc	r24, r24
    50dc:	c2 f7       	brpl	.-16     	; 0x50ce <__addsf3x+0x6a>
    50de:	0e c0       	rjmp	.+28     	; 0x50fc <__addsf3x+0x98>
    50e0:	ba 0f       	add	r27, r26
    50e2:	62 1f       	adc	r22, r18
    50e4:	73 1f       	adc	r23, r19
    50e6:	84 1f       	adc	r24, r20
    50e8:	48 f4       	brcc	.+18     	; 0x50fc <__addsf3x+0x98>
    50ea:	87 95       	ror	r24
    50ec:	77 95       	ror	r23
    50ee:	67 95       	ror	r22
    50f0:	b7 95       	ror	r27
    50f2:	f7 95       	ror	r31
    50f4:	9e 3f       	cpi	r25, 0xFE	; 254
    50f6:	08 f0       	brcs	.+2      	; 0x50fa <__addsf3x+0x96>
    50f8:	b3 cf       	rjmp	.-154    	; 0x5060 <__addsf3+0x1e>
    50fa:	93 95       	inc	r25
    50fc:	88 0f       	add	r24, r24
    50fe:	08 f0       	brcs	.+2      	; 0x5102 <__addsf3x+0x9e>
    5100:	99 27       	eor	r25, r25
    5102:	ee 0f       	add	r30, r30
    5104:	97 95       	ror	r25
    5106:	87 95       	ror	r24
    5108:	08 95       	ret

0000510a <__fixsfsi>:
    510a:	04 d0       	rcall	.+8      	; 0x5114 <__fixunssfsi>
    510c:	68 94       	set
    510e:	b1 11       	cpse	r27, r1
    5110:	d9 c0       	rjmp	.+434    	; 0x52c4 <__fp_szero>
    5112:	08 95       	ret

00005114 <__fixunssfsi>:
    5114:	bc d0       	rcall	.+376    	; 0x528e <__fp_splitA>
    5116:	88 f0       	brcs	.+34     	; 0x513a <__fixunssfsi+0x26>
    5118:	9f 57       	subi	r25, 0x7F	; 127
    511a:	90 f0       	brcs	.+36     	; 0x5140 <__fixunssfsi+0x2c>
    511c:	b9 2f       	mov	r27, r25
    511e:	99 27       	eor	r25, r25
    5120:	b7 51       	subi	r27, 0x17	; 23
    5122:	a0 f0       	brcs	.+40     	; 0x514c <__fixunssfsi+0x38>
    5124:	d1 f0       	breq	.+52     	; 0x515a <__fixunssfsi+0x46>
    5126:	66 0f       	add	r22, r22
    5128:	77 1f       	adc	r23, r23
    512a:	88 1f       	adc	r24, r24
    512c:	99 1f       	adc	r25, r25
    512e:	1a f0       	brmi	.+6      	; 0x5136 <__fixunssfsi+0x22>
    5130:	ba 95       	dec	r27
    5132:	c9 f7       	brne	.-14     	; 0x5126 <__fixunssfsi+0x12>
    5134:	12 c0       	rjmp	.+36     	; 0x515a <__fixunssfsi+0x46>
    5136:	b1 30       	cpi	r27, 0x01	; 1
    5138:	81 f0       	breq	.+32     	; 0x515a <__fixunssfsi+0x46>
    513a:	c3 d0       	rcall	.+390    	; 0x52c2 <__fp_zero>
    513c:	b1 e0       	ldi	r27, 0x01	; 1
    513e:	08 95       	ret
    5140:	c0 c0       	rjmp	.+384    	; 0x52c2 <__fp_zero>
    5142:	67 2f       	mov	r22, r23
    5144:	78 2f       	mov	r23, r24
    5146:	88 27       	eor	r24, r24
    5148:	b8 5f       	subi	r27, 0xF8	; 248
    514a:	39 f0       	breq	.+14     	; 0x515a <__fixunssfsi+0x46>
    514c:	b9 3f       	cpi	r27, 0xF9	; 249
    514e:	cc f3       	brlt	.-14     	; 0x5142 <__fixunssfsi+0x2e>
    5150:	86 95       	lsr	r24
    5152:	77 95       	ror	r23
    5154:	67 95       	ror	r22
    5156:	b3 95       	inc	r27
    5158:	d9 f7       	brne	.-10     	; 0x5150 <__fixunssfsi+0x3c>
    515a:	3e f4       	brtc	.+14     	; 0x516a <__fixunssfsi+0x56>
    515c:	90 95       	com	r25
    515e:	80 95       	com	r24
    5160:	70 95       	com	r23
    5162:	61 95       	neg	r22
    5164:	7f 4f       	sbci	r23, 0xFF	; 255
    5166:	8f 4f       	sbci	r24, 0xFF	; 255
    5168:	9f 4f       	sbci	r25, 0xFF	; 255
    516a:	08 95       	ret

0000516c <__floatunsisf>:
    516c:	e8 94       	clt
    516e:	09 c0       	rjmp	.+18     	; 0x5182 <__floatsisf+0x12>

00005170 <__floatsisf>:
    5170:	97 fb       	bst	r25, 7
    5172:	3e f4       	brtc	.+14     	; 0x5182 <__floatsisf+0x12>
    5174:	90 95       	com	r25
    5176:	80 95       	com	r24
    5178:	70 95       	com	r23
    517a:	61 95       	neg	r22
    517c:	7f 4f       	sbci	r23, 0xFF	; 255
    517e:	8f 4f       	sbci	r24, 0xFF	; 255
    5180:	9f 4f       	sbci	r25, 0xFF	; 255
    5182:	99 23       	and	r25, r25
    5184:	a9 f0       	breq	.+42     	; 0x51b0 <__floatsisf+0x40>
    5186:	f9 2f       	mov	r31, r25
    5188:	96 e9       	ldi	r25, 0x96	; 150
    518a:	bb 27       	eor	r27, r27
    518c:	93 95       	inc	r25
    518e:	f6 95       	lsr	r31
    5190:	87 95       	ror	r24
    5192:	77 95       	ror	r23
    5194:	67 95       	ror	r22
    5196:	b7 95       	ror	r27
    5198:	f1 11       	cpse	r31, r1
    519a:	f8 cf       	rjmp	.-16     	; 0x518c <__floatsisf+0x1c>
    519c:	fa f4       	brpl	.+62     	; 0x51dc <__floatsisf+0x6c>
    519e:	bb 0f       	add	r27, r27
    51a0:	11 f4       	brne	.+4      	; 0x51a6 <__floatsisf+0x36>
    51a2:	60 ff       	sbrs	r22, 0
    51a4:	1b c0       	rjmp	.+54     	; 0x51dc <__floatsisf+0x6c>
    51a6:	6f 5f       	subi	r22, 0xFF	; 255
    51a8:	7f 4f       	sbci	r23, 0xFF	; 255
    51aa:	8f 4f       	sbci	r24, 0xFF	; 255
    51ac:	9f 4f       	sbci	r25, 0xFF	; 255
    51ae:	16 c0       	rjmp	.+44     	; 0x51dc <__floatsisf+0x6c>
    51b0:	88 23       	and	r24, r24
    51b2:	11 f0       	breq	.+4      	; 0x51b8 <__floatsisf+0x48>
    51b4:	96 e9       	ldi	r25, 0x96	; 150
    51b6:	11 c0       	rjmp	.+34     	; 0x51da <__floatsisf+0x6a>
    51b8:	77 23       	and	r23, r23
    51ba:	21 f0       	breq	.+8      	; 0x51c4 <__floatsisf+0x54>
    51bc:	9e e8       	ldi	r25, 0x8E	; 142
    51be:	87 2f       	mov	r24, r23
    51c0:	76 2f       	mov	r23, r22
    51c2:	05 c0       	rjmp	.+10     	; 0x51ce <__floatsisf+0x5e>
    51c4:	66 23       	and	r22, r22
    51c6:	71 f0       	breq	.+28     	; 0x51e4 <__floatsisf+0x74>
    51c8:	96 e8       	ldi	r25, 0x86	; 134
    51ca:	86 2f       	mov	r24, r22
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	60 e0       	ldi	r22, 0x00	; 0
    51d0:	2a f0       	brmi	.+10     	; 0x51dc <__floatsisf+0x6c>
    51d2:	9a 95       	dec	r25
    51d4:	66 0f       	add	r22, r22
    51d6:	77 1f       	adc	r23, r23
    51d8:	88 1f       	adc	r24, r24
    51da:	da f7       	brpl	.-10     	; 0x51d2 <__floatsisf+0x62>
    51dc:	88 0f       	add	r24, r24
    51de:	96 95       	lsr	r25
    51e0:	87 95       	ror	r24
    51e2:	97 f9       	bld	r25, 7
    51e4:	08 95       	ret

000051e6 <__fp_cmp>:
    51e6:	99 0f       	add	r25, r25
    51e8:	00 08       	sbc	r0, r0
    51ea:	55 0f       	add	r21, r21
    51ec:	aa 0b       	sbc	r26, r26
    51ee:	e0 e8       	ldi	r30, 0x80	; 128
    51f0:	fe ef       	ldi	r31, 0xFE	; 254
    51f2:	16 16       	cp	r1, r22
    51f4:	17 06       	cpc	r1, r23
    51f6:	e8 07       	cpc	r30, r24
    51f8:	f9 07       	cpc	r31, r25
    51fa:	c0 f0       	brcs	.+48     	; 0x522c <__fp_cmp+0x46>
    51fc:	12 16       	cp	r1, r18
    51fe:	13 06       	cpc	r1, r19
    5200:	e4 07       	cpc	r30, r20
    5202:	f5 07       	cpc	r31, r21
    5204:	98 f0       	brcs	.+38     	; 0x522c <__fp_cmp+0x46>
    5206:	62 1b       	sub	r22, r18
    5208:	73 0b       	sbc	r23, r19
    520a:	84 0b       	sbc	r24, r20
    520c:	95 0b       	sbc	r25, r21
    520e:	39 f4       	brne	.+14     	; 0x521e <__fp_cmp+0x38>
    5210:	0a 26       	eor	r0, r26
    5212:	61 f0       	breq	.+24     	; 0x522c <__fp_cmp+0x46>
    5214:	23 2b       	or	r18, r19
    5216:	24 2b       	or	r18, r20
    5218:	25 2b       	or	r18, r21
    521a:	21 f4       	brne	.+8      	; 0x5224 <__fp_cmp+0x3e>
    521c:	08 95       	ret
    521e:	0a 26       	eor	r0, r26
    5220:	09 f4       	brne	.+2      	; 0x5224 <__fp_cmp+0x3e>
    5222:	a1 40       	sbci	r26, 0x01	; 1
    5224:	a6 95       	lsr	r26
    5226:	8f ef       	ldi	r24, 0xFF	; 255
    5228:	81 1d       	adc	r24, r1
    522a:	81 1d       	adc	r24, r1
    522c:	08 95       	ret

0000522e <__fp_inf>:
    522e:	97 f9       	bld	r25, 7
    5230:	9f 67       	ori	r25, 0x7F	; 127
    5232:	80 e8       	ldi	r24, 0x80	; 128
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	60 e0       	ldi	r22, 0x00	; 0
    5238:	08 95       	ret

0000523a <__fp_nan>:
    523a:	9f ef       	ldi	r25, 0xFF	; 255
    523c:	80 ec       	ldi	r24, 0xC0	; 192
    523e:	08 95       	ret

00005240 <__fp_pscA>:
    5240:	00 24       	eor	r0, r0
    5242:	0a 94       	dec	r0
    5244:	16 16       	cp	r1, r22
    5246:	17 06       	cpc	r1, r23
    5248:	18 06       	cpc	r1, r24
    524a:	09 06       	cpc	r0, r25
    524c:	08 95       	ret

0000524e <__fp_pscB>:
    524e:	00 24       	eor	r0, r0
    5250:	0a 94       	dec	r0
    5252:	12 16       	cp	r1, r18
    5254:	13 06       	cpc	r1, r19
    5256:	14 06       	cpc	r1, r20
    5258:	05 06       	cpc	r0, r21
    525a:	08 95       	ret

0000525c <__fp_round>:
    525c:	09 2e       	mov	r0, r25
    525e:	03 94       	inc	r0
    5260:	00 0c       	add	r0, r0
    5262:	11 f4       	brne	.+4      	; 0x5268 <__fp_round+0xc>
    5264:	88 23       	and	r24, r24
    5266:	52 f0       	brmi	.+20     	; 0x527c <__fp_round+0x20>
    5268:	bb 0f       	add	r27, r27
    526a:	40 f4       	brcc	.+16     	; 0x527c <__fp_round+0x20>
    526c:	bf 2b       	or	r27, r31
    526e:	11 f4       	brne	.+4      	; 0x5274 <__fp_round+0x18>
    5270:	60 ff       	sbrs	r22, 0
    5272:	04 c0       	rjmp	.+8      	; 0x527c <__fp_round+0x20>
    5274:	6f 5f       	subi	r22, 0xFF	; 255
    5276:	7f 4f       	sbci	r23, 0xFF	; 255
    5278:	8f 4f       	sbci	r24, 0xFF	; 255
    527a:	9f 4f       	sbci	r25, 0xFF	; 255
    527c:	08 95       	ret

0000527e <__fp_split3>:
    527e:	57 fd       	sbrc	r21, 7
    5280:	90 58       	subi	r25, 0x80	; 128
    5282:	44 0f       	add	r20, r20
    5284:	55 1f       	adc	r21, r21
    5286:	59 f0       	breq	.+22     	; 0x529e <__fp_splitA+0x10>
    5288:	5f 3f       	cpi	r21, 0xFF	; 255
    528a:	71 f0       	breq	.+28     	; 0x52a8 <__fp_splitA+0x1a>
    528c:	47 95       	ror	r20

0000528e <__fp_splitA>:
    528e:	88 0f       	add	r24, r24
    5290:	97 fb       	bst	r25, 7
    5292:	99 1f       	adc	r25, r25
    5294:	61 f0       	breq	.+24     	; 0x52ae <__fp_splitA+0x20>
    5296:	9f 3f       	cpi	r25, 0xFF	; 255
    5298:	79 f0       	breq	.+30     	; 0x52b8 <__fp_splitA+0x2a>
    529a:	87 95       	ror	r24
    529c:	08 95       	ret
    529e:	12 16       	cp	r1, r18
    52a0:	13 06       	cpc	r1, r19
    52a2:	14 06       	cpc	r1, r20
    52a4:	55 1f       	adc	r21, r21
    52a6:	f2 cf       	rjmp	.-28     	; 0x528c <__fp_split3+0xe>
    52a8:	46 95       	lsr	r20
    52aa:	f1 df       	rcall	.-30     	; 0x528e <__fp_splitA>
    52ac:	08 c0       	rjmp	.+16     	; 0x52be <__fp_splitA+0x30>
    52ae:	16 16       	cp	r1, r22
    52b0:	17 06       	cpc	r1, r23
    52b2:	18 06       	cpc	r1, r24
    52b4:	99 1f       	adc	r25, r25
    52b6:	f1 cf       	rjmp	.-30     	; 0x529a <__fp_splitA+0xc>
    52b8:	86 95       	lsr	r24
    52ba:	71 05       	cpc	r23, r1
    52bc:	61 05       	cpc	r22, r1
    52be:	08 94       	sec
    52c0:	08 95       	ret

000052c2 <__fp_zero>:
    52c2:	e8 94       	clt

000052c4 <__fp_szero>:
    52c4:	bb 27       	eor	r27, r27
    52c6:	66 27       	eor	r22, r22
    52c8:	77 27       	eor	r23, r23
    52ca:	cb 01       	movw	r24, r22
    52cc:	97 f9       	bld	r25, 7
    52ce:	08 95       	ret

000052d0 <__mulsf3>:
    52d0:	0b d0       	rcall	.+22     	; 0x52e8 <__mulsf3x>
    52d2:	c4 cf       	rjmp	.-120    	; 0x525c <__fp_round>
    52d4:	b5 df       	rcall	.-150    	; 0x5240 <__fp_pscA>
    52d6:	28 f0       	brcs	.+10     	; 0x52e2 <__mulsf3+0x12>
    52d8:	ba df       	rcall	.-140    	; 0x524e <__fp_pscB>
    52da:	18 f0       	brcs	.+6      	; 0x52e2 <__mulsf3+0x12>
    52dc:	95 23       	and	r25, r21
    52de:	09 f0       	breq	.+2      	; 0x52e2 <__mulsf3+0x12>
    52e0:	a6 cf       	rjmp	.-180    	; 0x522e <__fp_inf>
    52e2:	ab cf       	rjmp	.-170    	; 0x523a <__fp_nan>
    52e4:	11 24       	eor	r1, r1
    52e6:	ee cf       	rjmp	.-36     	; 0x52c4 <__fp_szero>

000052e8 <__mulsf3x>:
    52e8:	ca df       	rcall	.-108    	; 0x527e <__fp_split3>
    52ea:	a0 f3       	brcs	.-24     	; 0x52d4 <__mulsf3+0x4>

000052ec <__mulsf3_pse>:
    52ec:	95 9f       	mul	r25, r21
    52ee:	d1 f3       	breq	.-12     	; 0x52e4 <__mulsf3+0x14>
    52f0:	95 0f       	add	r25, r21
    52f2:	50 e0       	ldi	r21, 0x00	; 0
    52f4:	55 1f       	adc	r21, r21
    52f6:	62 9f       	mul	r22, r18
    52f8:	f0 01       	movw	r30, r0
    52fa:	72 9f       	mul	r23, r18
    52fc:	bb 27       	eor	r27, r27
    52fe:	f0 0d       	add	r31, r0
    5300:	b1 1d       	adc	r27, r1
    5302:	63 9f       	mul	r22, r19
    5304:	aa 27       	eor	r26, r26
    5306:	f0 0d       	add	r31, r0
    5308:	b1 1d       	adc	r27, r1
    530a:	aa 1f       	adc	r26, r26
    530c:	64 9f       	mul	r22, r20
    530e:	66 27       	eor	r22, r22
    5310:	b0 0d       	add	r27, r0
    5312:	a1 1d       	adc	r26, r1
    5314:	66 1f       	adc	r22, r22
    5316:	82 9f       	mul	r24, r18
    5318:	22 27       	eor	r18, r18
    531a:	b0 0d       	add	r27, r0
    531c:	a1 1d       	adc	r26, r1
    531e:	62 1f       	adc	r22, r18
    5320:	73 9f       	mul	r23, r19
    5322:	b0 0d       	add	r27, r0
    5324:	a1 1d       	adc	r26, r1
    5326:	62 1f       	adc	r22, r18
    5328:	83 9f       	mul	r24, r19
    532a:	a0 0d       	add	r26, r0
    532c:	61 1d       	adc	r22, r1
    532e:	22 1f       	adc	r18, r18
    5330:	74 9f       	mul	r23, r20
    5332:	33 27       	eor	r19, r19
    5334:	a0 0d       	add	r26, r0
    5336:	61 1d       	adc	r22, r1
    5338:	23 1f       	adc	r18, r19
    533a:	84 9f       	mul	r24, r20
    533c:	60 0d       	add	r22, r0
    533e:	21 1d       	adc	r18, r1
    5340:	82 2f       	mov	r24, r18
    5342:	76 2f       	mov	r23, r22
    5344:	6a 2f       	mov	r22, r26
    5346:	11 24       	eor	r1, r1
    5348:	9f 57       	subi	r25, 0x7F	; 127
    534a:	50 40       	sbci	r21, 0x00	; 0
    534c:	8a f0       	brmi	.+34     	; 0x5370 <__mulsf3_pse+0x84>
    534e:	e1 f0       	breq	.+56     	; 0x5388 <__mulsf3_pse+0x9c>
    5350:	88 23       	and	r24, r24
    5352:	4a f0       	brmi	.+18     	; 0x5366 <__mulsf3_pse+0x7a>
    5354:	ee 0f       	add	r30, r30
    5356:	ff 1f       	adc	r31, r31
    5358:	bb 1f       	adc	r27, r27
    535a:	66 1f       	adc	r22, r22
    535c:	77 1f       	adc	r23, r23
    535e:	88 1f       	adc	r24, r24
    5360:	91 50       	subi	r25, 0x01	; 1
    5362:	50 40       	sbci	r21, 0x00	; 0
    5364:	a9 f7       	brne	.-22     	; 0x5350 <__mulsf3_pse+0x64>
    5366:	9e 3f       	cpi	r25, 0xFE	; 254
    5368:	51 05       	cpc	r21, r1
    536a:	70 f0       	brcs	.+28     	; 0x5388 <__mulsf3_pse+0x9c>
    536c:	60 cf       	rjmp	.-320    	; 0x522e <__fp_inf>
    536e:	aa cf       	rjmp	.-172    	; 0x52c4 <__fp_szero>
    5370:	5f 3f       	cpi	r21, 0xFF	; 255
    5372:	ec f3       	brlt	.-6      	; 0x536e <__mulsf3_pse+0x82>
    5374:	98 3e       	cpi	r25, 0xE8	; 232
    5376:	dc f3       	brlt	.-10     	; 0x536e <__mulsf3_pse+0x82>
    5378:	86 95       	lsr	r24
    537a:	77 95       	ror	r23
    537c:	67 95       	ror	r22
    537e:	b7 95       	ror	r27
    5380:	f7 95       	ror	r31
    5382:	e7 95       	ror	r30
    5384:	9f 5f       	subi	r25, 0xFF	; 255
    5386:	c1 f7       	brne	.-16     	; 0x5378 <__mulsf3_pse+0x8c>
    5388:	fe 2b       	or	r31, r30
    538a:	88 0f       	add	r24, r24
    538c:	91 1d       	adc	r25, r1
    538e:	96 95       	lsr	r25
    5390:	87 95       	ror	r24
    5392:	97 f9       	bld	r25, 7
    5394:	08 95       	ret

00005396 <__unordsf2>:
    5396:	27 df       	rcall	.-434    	; 0x51e6 <__fp_cmp>
    5398:	88 0b       	sbc	r24, r24
    539a:	99 0b       	sbc	r25, r25
    539c:	08 95       	ret

0000539e <__cxa_pure_virtual>:
    539e:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <abort>

000053a2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    53a2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    53a4:	91 8d       	ldd	r25, Z+25	; 0x19
    53a6:	22 8d       	ldd	r18, Z+26	; 0x1a
    53a8:	89 2f       	mov	r24, r25
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	80 5c       	subi	r24, 0xC0	; 192
    53ae:	9f 4f       	sbci	r25, 0xFF	; 255
    53b0:	82 1b       	sub	r24, r18
    53b2:	91 09       	sbc	r25, r1
}
    53b4:	8f 73       	andi	r24, 0x3F	; 63
    53b6:	99 27       	eor	r25, r25
    53b8:	08 95       	ret

000053ba <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    53ba:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    53bc:	91 8d       	ldd	r25, Z+25	; 0x19
    53be:	82 8d       	ldd	r24, Z+26	; 0x1a
    53c0:	98 17       	cp	r25, r24
    53c2:	31 f0       	breq	.+12     	; 0x53d0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    53c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    53c6:	e8 0f       	add	r30, r24
    53c8:	f1 1d       	adc	r31, r1
    53ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    53d0:	8f ef       	ldi	r24, 0xFF	; 255
    53d2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    53d4:	08 95       	ret

000053d6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    53d6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    53d8:	91 8d       	ldd	r25, Z+25	; 0x19
    53da:	82 8d       	ldd	r24, Z+26	; 0x1a
    53dc:	98 17       	cp	r25, r24
    53de:	61 f0       	breq	.+24     	; 0x53f8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    53e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    53e2:	df 01       	movw	r26, r30
    53e4:	a8 0f       	add	r26, r24
    53e6:	b1 1d       	adc	r27, r1
    53e8:	5d 96       	adiw	r26, 0x1d	; 29
    53ea:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    53ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    53ee:	9f 5f       	subi	r25, 0xFF	; 255
    53f0:	9f 73       	andi	r25, 0x3F	; 63
    53f2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    53f8:	8f ef       	ldi	r24, 0xFF	; 255
    53fa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    53fc:	08 95       	ret

000053fe <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    53fe:	fc 01       	movw	r30, r24
    5400:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5402:	44 8d       	ldd	r20, Z+28	; 0x1c
    5404:	25 2f       	mov	r18, r21
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	84 2f       	mov	r24, r20
    540a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    540c:	82 1b       	sub	r24, r18
    540e:	93 0b       	sbc	r25, r19
    5410:	54 17       	cp	r21, r20
    5412:	10 f0       	brcs	.+4      	; 0x5418 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5414:	cf 96       	adiw	r24, 0x3f	; 63
    5416:	08 95       	ret
  return tail - head - 1;
    5418:	01 97       	sbiw	r24, 0x01	; 1
}
    541a:	08 95       	ret

0000541c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    541c:	8b e9       	ldi	r24, 0x9B	; 155
    541e:	9b e2       	ldi	r25, 0x2B	; 43
    5420:	89 2b       	or	r24, r25
    5422:	39 f0       	breq	.+14     	; 0x5432 <_Z14serialEventRunv+0x16>
    5424:	80 e0       	ldi	r24, 0x00	; 0
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	89 2b       	or	r24, r25
    542a:	19 f0       	breq	.+6      	; 0x5432 <_Z14serialEventRunv+0x16>
    542c:	84 d1       	rcall	.+776    	; 0x5736 <_Z17Serial0_availablev>
    542e:	81 11       	cpse	r24, r1
    5430:	25 c0       	rjmp	.+74     	; 0x547c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5432:	80 e0       	ldi	r24, 0x00	; 0
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	89 2b       	or	r24, r25
    5438:	41 f0       	breq	.+16     	; 0x544a <_Z14serialEventRunv+0x2e>
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	89 2b       	or	r24, r25
    5440:	21 f0       	breq	.+8      	; 0x544a <_Z14serialEventRunv+0x2e>
    5442:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5446:	81 11       	cpse	r24, r1
    5448:	1c c0       	rjmp	.+56     	; 0x5482 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	89 2b       	or	r24, r25
    5450:	41 f0       	breq	.+16     	; 0x5462 <_Z14serialEventRunv+0x46>
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	89 2b       	or	r24, r25
    5458:	21 f0       	breq	.+8      	; 0x5462 <_Z14serialEventRunv+0x46>
    545a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    545e:	81 11       	cpse	r24, r1
    5460:	13 c0       	rjmp	.+38     	; 0x5488 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	90 e0       	ldi	r25, 0x00	; 0
    5466:	89 2b       	or	r24, r25
    5468:	a1 f0       	breq	.+40     	; 0x5492 <_Z14serialEventRunv+0x76>
    546a:	80 e0       	ldi	r24, 0x00	; 0
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	89 2b       	or	r24, r25
    5470:	81 f0       	breq	.+32     	; 0x5492 <_Z14serialEventRunv+0x76>
    5472:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5476:	81 11       	cpse	r24, r1
    5478:	0a c0       	rjmp	.+20     	; 0x548e <_Z14serialEventRunv+0x72>
    547a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    547c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5480:	d8 cf       	rjmp	.-80     	; 0x5432 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5482:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5486:	e1 cf       	rjmp	.-62     	; 0x544a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5488:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    548c:	ea cf       	rjmp	.-44     	; 0x5462 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    548e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5492:	08 95       	ret

00005494 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5494:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5496:	84 8d       	ldd	r24, Z+28	; 0x1c
    5498:	df 01       	movw	r26, r30
    549a:	a8 0f       	add	r26, r24
    549c:	b1 1d       	adc	r27, r1
    549e:	a3 5a       	subi	r26, 0xA3	; 163
    54a0:	bf 4f       	sbci	r27, 0xFF	; 255
    54a2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    54a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	01 96       	adiw	r24, 0x01	; 1
    54aa:	8f 73       	andi	r24, 0x3F	; 63
    54ac:	99 27       	eor	r25, r25
    54ae:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    54b0:	a6 89       	ldd	r26, Z+22	; 0x16
    54b2:	b7 89       	ldd	r27, Z+23	; 0x17
    54b4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    54b6:	a0 89       	ldd	r26, Z+16	; 0x10
    54b8:	b1 89       	ldd	r27, Z+17	; 0x11
    54ba:	8c 91       	ld	r24, X
    54bc:	83 70       	andi	r24, 0x03	; 3
    54be:	80 64       	ori	r24, 0x40	; 64
    54c0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    54c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    54c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    54c6:	98 13       	cpse	r25, r24
    54c8:	06 c0       	rjmp	.+12     	; 0x54d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    54ca:	02 88       	ldd	r0, Z+18	; 0x12
    54cc:	f3 89       	ldd	r31, Z+19	; 0x13
    54ce:	e0 2d       	mov	r30, r0
    54d0:	80 81       	ld	r24, Z
    54d2:	8f 7d       	andi	r24, 0xDF	; 223
    54d4:	80 83       	st	Z, r24
    54d6:	08 95       	ret

000054d8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    54d8:	ef 92       	push	r14
    54da:	ff 92       	push	r15
    54dc:	0f 93       	push	r16
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	ec 01       	movw	r28, r24
  _written = true;
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    54ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54ee:	98 13       	cpse	r25, r24
    54f0:	05 c0       	rjmp	.+10     	; 0x54fc <_ZN14HardwareSerial5writeEh+0x24>
    54f2:	e8 89       	ldd	r30, Y+16	; 0x10
    54f4:	f9 89       	ldd	r31, Y+17	; 0x11
    54f6:	80 81       	ld	r24, Z
    54f8:	85 fd       	sbrc	r24, 5
    54fa:	25 c0       	rjmp	.+74     	; 0x5546 <_ZN14HardwareSerial5writeEh+0x6e>
    54fc:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    54fe:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5500:	10 e0       	ldi	r17, 0x00	; 0
    5502:	0f 5f       	subi	r16, 0xFF	; 255
    5504:	1f 4f       	sbci	r17, 0xFF	; 255
    5506:	0f 73       	andi	r16, 0x3F	; 63
    5508:	11 27       	eor	r17, r17
    550a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    550c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    550e:	e8 12       	cpse	r14, r24
    5510:	0b c0       	rjmp	.+22     	; 0x5528 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5512:	0f b6       	in	r0, 0x3f	; 63
    5514:	07 fc       	sbrc	r0, 7
    5516:	fa cf       	rjmp	.-12     	; 0x550c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5518:	e8 89       	ldd	r30, Y+16	; 0x10
    551a:	f9 89       	ldd	r31, Y+17	; 0x11
    551c:	80 81       	ld	r24, Z
    551e:	85 ff       	sbrs	r24, 5
    5520:	f5 cf       	rjmp	.-22     	; 0x550c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5522:	ce 01       	movw	r24, r28
    5524:	b7 df       	rcall	.-146    	; 0x5494 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5526:	f2 cf       	rjmp	.-28     	; 0x550c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    552a:	fe 01       	movw	r30, r28
    552c:	e8 0f       	add	r30, r24
    552e:	f1 1d       	adc	r31, r1
    5530:	e3 5a       	subi	r30, 0xA3	; 163
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5536:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5538:	f8 94       	cli
    _tx_buffer_head = i;
    553a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    553c:	ea 89       	ldd	r30, Y+18	; 0x12
    553e:	fb 89       	ldd	r31, Y+19	; 0x13
    5540:	80 81       	ld	r24, Z
    5542:	80 62       	ori	r24, 0x20	; 32
    5544:	0a c0       	rjmp	.+20     	; 0x555a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5546:	9f b7       	in	r25, 0x3f	; 63
    5548:	f8 94       	cli
      *_udr = c;
    554a:	ee 89       	ldd	r30, Y+22	; 0x16
    554c:	ff 89       	ldd	r31, Y+23	; 0x17
    554e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5550:	e8 89       	ldd	r30, Y+16	; 0x10
    5552:	f9 89       	ldd	r31, Y+17	; 0x11
    5554:	80 81       	ld	r24, Z
    5556:	83 70       	andi	r24, 0x03	; 3
    5558:	80 64       	ori	r24, 0x40	; 64
    555a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    555c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	df 91       	pop	r29
    5564:	cf 91       	pop	r28
    5566:	1f 91       	pop	r17
    5568:	0f 91       	pop	r16
    556a:	ff 90       	pop	r15
    556c:	ef 90       	pop	r14
    556e:	08 95       	ret

00005570 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5576:	88 8d       	ldd	r24, Y+24	; 0x18
    5578:	88 23       	and	r24, r24
    557a:	c1 f0       	breq	.+48     	; 0x55ac <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    557c:	ea 89       	ldd	r30, Y+18	; 0x12
    557e:	fb 89       	ldd	r31, Y+19	; 0x13
    5580:	80 81       	ld	r24, Z
    5582:	85 fd       	sbrc	r24, 5
    5584:	05 c0       	rjmp	.+10     	; 0x5590 <_ZN14HardwareSerial5flushEv+0x20>
    5586:	a8 89       	ldd	r26, Y+16	; 0x10
    5588:	b9 89       	ldd	r27, Y+17	; 0x11
    558a:	8c 91       	ld	r24, X
    558c:	86 fd       	sbrc	r24, 6
    558e:	0e c0       	rjmp	.+28     	; 0x55ac <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5590:	0f b6       	in	r0, 0x3f	; 63
    5592:	07 fc       	sbrc	r0, 7
    5594:	f5 cf       	rjmp	.-22     	; 0x5580 <_ZN14HardwareSerial5flushEv+0x10>
    5596:	80 81       	ld	r24, Z
    5598:	85 ff       	sbrs	r24, 5
    559a:	f2 cf       	rjmp	.-28     	; 0x5580 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    559c:	a8 89       	ldd	r26, Y+16	; 0x10
    559e:	b9 89       	ldd	r27, Y+17	; 0x11
    55a0:	8c 91       	ld	r24, X
    55a2:	85 ff       	sbrs	r24, 5
    55a4:	ed cf       	rjmp	.-38     	; 0x5580 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    55a6:	ce 01       	movw	r24, r28
    55a8:	75 df       	rcall	.-278    	; 0x5494 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    55aa:	e8 cf       	rjmp	.-48     	; 0x557c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    55ac:	df 91       	pop	r29
    55ae:	cf 91       	pop	r28
    55b0:	08 95       	ret

000055b2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    55b2:	cf 92       	push	r12
    55b4:	df 92       	push	r13
    55b6:	ef 92       	push	r14
    55b8:	ff 92       	push	r15
    55ba:	1f 93       	push	r17
    55bc:	cf 93       	push	r28
    55be:	df 93       	push	r29
    55c0:	ec 01       	movw	r28, r24
    55c2:	6a 01       	movw	r12, r20
    55c4:	7b 01       	movw	r14, r22
    55c6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    55c8:	e8 89       	ldd	r30, Y+16	; 0x10
    55ca:	f9 89       	ldd	r31, Y+17	; 0x11
    55cc:	82 e0       	ldi	r24, 0x02	; 2
    55ce:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    55d0:	41 15       	cp	r20, r1
    55d2:	51 4e       	sbci	r21, 0xE1	; 225
    55d4:	61 05       	cpc	r22, r1
    55d6:	71 05       	cpc	r23, r1
    55d8:	a9 f0       	breq	.+42     	; 0x5604 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    55da:	60 e0       	ldi	r22, 0x00	; 0
    55dc:	79 e0       	ldi	r23, 0x09	; 9
    55de:	8d e3       	ldi	r24, 0x3D	; 61
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	a7 01       	movw	r20, r14
    55e4:	96 01       	movw	r18, r12
    55e6:	7c d5       	rcall	.+2808   	; 0x60e0 <__udivmodsi4>
    55e8:	da 01       	movw	r26, r20
    55ea:	c9 01       	movw	r24, r18
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	a1 09       	sbc	r26, r1
    55f0:	b1 09       	sbc	r27, r1
    55f2:	b6 95       	lsr	r27
    55f4:	a7 95       	ror	r26
    55f6:	97 95       	ror	r25
    55f8:	87 95       	ror	r24
    55fa:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    55fc:	21 15       	cp	r18, r1
    55fe:	80 e1       	ldi	r24, 0x10	; 16
    5600:	38 07       	cpc	r19, r24
    5602:	a0 f0       	brcs	.+40     	; 0x562c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5604:	e8 89       	ldd	r30, Y+16	; 0x10
    5606:	f9 89       	ldd	r31, Y+17	; 0x11
    5608:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    560a:	60 e8       	ldi	r22, 0x80	; 128
    560c:	74 e8       	ldi	r23, 0x84	; 132
    560e:	8e e1       	ldi	r24, 0x1E	; 30
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	a7 01       	movw	r20, r14
    5614:	96 01       	movw	r18, r12
    5616:	64 d5       	rcall	.+2760   	; 0x60e0 <__udivmodsi4>
    5618:	da 01       	movw	r26, r20
    561a:	c9 01       	movw	r24, r18
    561c:	01 97       	sbiw	r24, 0x01	; 1
    561e:	a1 09       	sbc	r26, r1
    5620:	b1 09       	sbc	r27, r1
    5622:	b6 95       	lsr	r27
    5624:	a7 95       	ror	r26
    5626:	97 95       	ror	r25
    5628:	87 95       	ror	r24
    562a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    562c:	ec 85       	ldd	r30, Y+12	; 0x0c
    562e:	fd 85       	ldd	r31, Y+13	; 0x0d
    5630:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5632:	ee 85       	ldd	r30, Y+14	; 0x0e
    5634:	ff 85       	ldd	r31, Y+15	; 0x0f
    5636:	20 83       	st	Z, r18

  _written = false;
    5638:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    563a:	ec 89       	ldd	r30, Y+20	; 0x14
    563c:	fd 89       	ldd	r31, Y+21	; 0x15
    563e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5640:	ea 89       	ldd	r30, Y+18	; 0x12
    5642:	fb 89       	ldd	r31, Y+19	; 0x13
    5644:	80 81       	ld	r24, Z
    5646:	80 61       	ori	r24, 0x10	; 16
    5648:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    564a:	ea 89       	ldd	r30, Y+18	; 0x12
    564c:	fb 89       	ldd	r31, Y+19	; 0x13
    564e:	80 81       	ld	r24, Z
    5650:	88 60       	ori	r24, 0x08	; 8
    5652:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5654:	ea 89       	ldd	r30, Y+18	; 0x12
    5656:	fb 89       	ldd	r31, Y+19	; 0x13
    5658:	80 81       	ld	r24, Z
    565a:	80 68       	ori	r24, 0x80	; 128
    565c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    565e:	ea 89       	ldd	r30, Y+18	; 0x12
    5660:	fb 89       	ldd	r31, Y+19	; 0x13
    5662:	80 81       	ld	r24, Z
    5664:	8f 7d       	andi	r24, 0xDF	; 223
    5666:	80 83       	st	Z, r24
}
    5668:	df 91       	pop	r29
    566a:	cf 91       	pop	r28
    566c:	1f 91       	pop	r17
    566e:	ff 90       	pop	r15
    5670:	ef 90       	pop	r14
    5672:	df 90       	pop	r13
    5674:	cf 90       	pop	r12
    5676:	08 95       	ret

00005678 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5678:	1f 92       	push	r1
    567a:	0f 92       	push	r0
    567c:	0f b6       	in	r0, 0x3f	; 63
    567e:	0f 92       	push	r0
    5680:	11 24       	eor	r1, r1
    5682:	0b b6       	in	r0, 0x3b	; 59
    5684:	0f 92       	push	r0
    5686:	2f 93       	push	r18
    5688:	8f 93       	push	r24
    568a:	9f 93       	push	r25
    568c:	ef 93       	push	r30
    568e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5690:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <Serial+0x10>
    5694:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <Serial+0x11>
    5698:	80 81       	ld	r24, Z
    569a:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <Serial+0x16>
    569e:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <Serial+0x17>
    56a2:	82 fd       	sbrc	r24, 2
    56a4:	12 c0       	rjmp	.+36     	; 0x56ca <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    56a6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    56a8:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <Serial+0x19>
    56ac:	8f 5f       	subi	r24, 0xFF	; 255
    56ae:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    56b0:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <Serial+0x1a>
    56b4:	82 17       	cp	r24, r18
    56b6:	51 f0       	breq	.+20     	; 0x56cc <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    56b8:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <Serial+0x19>
    56bc:	f0 e0       	ldi	r31, 0x00	; 0
    56be:	e4 56       	subi	r30, 0x64	; 100
    56c0:	fb 4f       	sbci	r31, 0xFB	; 251
    56c2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    56c4:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <Serial+0x19>
    56c8:	01 c0       	rjmp	.+2      	; 0x56cc <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    56ca:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    56cc:	ff 91       	pop	r31
    56ce:	ef 91       	pop	r30
    56d0:	9f 91       	pop	r25
    56d2:	8f 91       	pop	r24
    56d4:	2f 91       	pop	r18
    56d6:	0f 90       	pop	r0
    56d8:	0b be       	out	0x3b, r0	; 59
    56da:	0f 90       	pop	r0
    56dc:	0f be       	out	0x3f, r0	; 63
    56de:	0f 90       	pop	r0
    56e0:	1f 90       	pop	r1
    56e2:	18 95       	reti

000056e4 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	0b b6       	in	r0, 0x3b	; 59
    56f0:	0f 92       	push	r0
    56f2:	2f 93       	push	r18
    56f4:	3f 93       	push	r19
    56f6:	4f 93       	push	r20
    56f8:	5f 93       	push	r21
    56fa:	6f 93       	push	r22
    56fc:	7f 93       	push	r23
    56fe:	8f 93       	push	r24
    5700:	9f 93       	push	r25
    5702:	af 93       	push	r26
    5704:	bf 93       	push	r27
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    570a:	8c e9       	ldi	r24, 0x9C	; 156
    570c:	94 e0       	ldi	r25, 0x04	; 4
    570e:	c2 de       	rcall	.-636    	; 0x5494 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5710:	ff 91       	pop	r31
    5712:	ef 91       	pop	r30
    5714:	bf 91       	pop	r27
    5716:	af 91       	pop	r26
    5718:	9f 91       	pop	r25
    571a:	8f 91       	pop	r24
    571c:	7f 91       	pop	r23
    571e:	6f 91       	pop	r22
    5720:	5f 91       	pop	r21
    5722:	4f 91       	pop	r20
    5724:	3f 91       	pop	r19
    5726:	2f 91       	pop	r18
    5728:	0f 90       	pop	r0
    572a:	0b be       	out	0x3b, r0	; 59
    572c:	0f 90       	pop	r0
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	0f 90       	pop	r0
    5732:	1f 90       	pop	r1
    5734:	18 95       	reti

00005736 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5736:	8c e9       	ldi	r24, 0x9C	; 156
    5738:	94 e0       	ldi	r25, 0x04	; 4
    573a:	33 de       	rcall	.-922    	; 0x53a2 <_ZN14HardwareSerial9availableEv>
    573c:	21 e0       	ldi	r18, 0x01	; 1
    573e:	89 2b       	or	r24, r25
    5740:	09 f4       	brne	.+2      	; 0x5744 <_Z17Serial0_availablev+0xe>
    5742:	20 e0       	ldi	r18, 0x00	; 0
}
    5744:	82 2f       	mov	r24, r18
    5746:	08 95       	ret

00005748 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5748:	ec e9       	ldi	r30, 0x9C	; 156
    574a:	f4 e0       	ldi	r31, 0x04	; 4
    574c:	13 82       	std	Z+3, r1	; 0x03
    574e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5750:	88 ee       	ldi	r24, 0xE8	; 232
    5752:	93 e0       	ldi	r25, 0x03	; 3
    5754:	a0 e0       	ldi	r26, 0x00	; 0
    5756:	b0 e0       	ldi	r27, 0x00	; 0
    5758:	84 83       	std	Z+4, r24	; 0x04
    575a:	95 83       	std	Z+5, r25	; 0x05
    575c:	a6 83       	std	Z+6, r26	; 0x06
    575e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5760:	83 ec       	ldi	r24, 0xC3	; 195
    5762:	92 e0       	ldi	r25, 0x02	; 2
    5764:	91 83       	std	Z+1, r25	; 0x01
    5766:	80 83       	st	Z, r24
    5768:	85 ec       	ldi	r24, 0xC5	; 197
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	95 87       	std	Z+13, r25	; 0x0d
    576e:	84 87       	std	Z+12, r24	; 0x0c
    5770:	84 ec       	ldi	r24, 0xC4	; 196
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	97 87       	std	Z+15, r25	; 0x0f
    5776:	86 87       	std	Z+14, r24	; 0x0e
    5778:	80 ec       	ldi	r24, 0xC0	; 192
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	91 8b       	std	Z+17, r25	; 0x11
    577e:	80 8b       	std	Z+16, r24	; 0x10
    5780:	81 ec       	ldi	r24, 0xC1	; 193
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	93 8b       	std	Z+19, r25	; 0x13
    5786:	82 8b       	std	Z+18, r24	; 0x12
    5788:	82 ec       	ldi	r24, 0xC2	; 194
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	95 8b       	std	Z+21, r25	; 0x15
    578e:	84 8b       	std	Z+20, r24	; 0x14
    5790:	86 ec       	ldi	r24, 0xC6	; 198
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	97 8b       	std	Z+23, r25	; 0x17
    5796:	86 8b       	std	Z+22, r24	; 0x16
    5798:	11 8e       	std	Z+25, r1	; 0x19
    579a:	12 8e       	std	Z+26, r1	; 0x1a
    579c:	13 8e       	std	Z+27, r1	; 0x1b
    579e:	14 8e       	std	Z+28, r1	; 0x1c
    57a0:	08 95       	ret

000057a2 <initVariant>:
    57a2:	08 95       	ret

000057a4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    57a4:	0a d1       	rcall	.+532    	; 0x59ba <init>

	initVariant();
    57a6:	fd df       	rcall	.-6      	; 0x57a2 <initVariant>
    57a8:	0e 94 4b 03 	call	0x696	; 0x696 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    57ac:	ce e0       	ldi	r28, 0x0E	; 14
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    57ae:	da e2       	ldi	r29, 0x2A	; 42
    57b0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    57b4:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    57b6:	e1 f3       	breq	.-8      	; 0x57b0 <main+0xc>
    57b8:	31 de       	rcall	.-926    	; 0x541c <_Z14serialEventRunv>
    57ba:	fa cf       	rjmp	.-12     	; 0x57b0 <main+0xc>

000057bc <_ZdlPv>:
    57bc:	88 c5       	rjmp	.+2832   	; 0x62ce <free>

000057be <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    57be:	cf 92       	push	r12
    57c0:	df 92       	push	r13
    57c2:	ef 92       	push	r14
    57c4:	ff 92       	push	r15
    57c6:	0f 93       	push	r16
    57c8:	1f 93       	push	r17
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	6c 01       	movw	r12, r24
    57d0:	7a 01       	movw	r14, r20
    57d2:	8b 01       	movw	r16, r22
    57d4:	c0 e0       	ldi	r28, 0x00	; 0
    57d6:	d0 e0       	ldi	r29, 0x00	; 0
    57d8:	ce 15       	cp	r28, r14
    57da:	df 05       	cpc	r29, r15
    57dc:	81 f0       	breq	.+32     	; 0x57fe <_ZN5Print5writeEPKhj+0x40>
    57de:	d8 01       	movw	r26, r16
    57e0:	6d 91       	ld	r22, X+
    57e2:	8d 01       	movw	r16, r26
    57e4:	d6 01       	movw	r26, r12
    57e6:	ed 91       	ld	r30, X+
    57e8:	fc 91       	ld	r31, X
    57ea:	01 90       	ld	r0, Z+
    57ec:	f0 81       	ld	r31, Z
    57ee:	e0 2d       	mov	r30, r0
    57f0:	c6 01       	movw	r24, r12
    57f2:	19 95       	eicall
    57f4:	89 2b       	or	r24, r25
    57f6:	11 f0       	breq	.+4      	; 0x57fc <_ZN5Print5writeEPKhj+0x3e>
    57f8:	21 96       	adiw	r28, 0x01	; 1
    57fa:	ee cf       	rjmp	.-36     	; 0x57d8 <_ZN5Print5writeEPKhj+0x1a>
    57fc:	7e 01       	movw	r14, r28
    57fe:	c7 01       	movw	r24, r14
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	1f 91       	pop	r17
    5806:	0f 91       	pop	r16
    5808:	ff 90       	pop	r15
    580a:	ef 90       	pop	r14
    580c:	df 90       	pop	r13
    580e:	cf 90       	pop	r12
    5810:	08 95       	ret

00005812 <_ZN5Print7printlnEv>:
    5812:	61 ed       	ldi	r22, 0xD1	; 209
    5814:	72 e0       	ldi	r23, 0x02	; 2
    5816:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_ZN5Print5writeEPKc>

0000581a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    581a:	0f 93       	push	r16
    581c:	1f 93       	push	r17
    581e:	cf 93       	push	r28
    5820:	df 93       	push	r29
    5822:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5824:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN5Print5writeEPKc>
    5828:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    582a:	ce 01       	movw	r24, r28
    582c:	f2 df       	rcall	.-28     	; 0x5812 <_ZN5Print7printlnEv>
  return n;
}
    582e:	80 0f       	add	r24, r16
    5830:	91 1f       	adc	r25, r17
    5832:	df 91       	pop	r29
    5834:	cf 91       	pop	r28
    5836:	1f 91       	pop	r17
    5838:	0f 91       	pop	r16
    583a:	08 95       	ret

0000583c <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    583c:	1f 92       	push	r1
    583e:	0f 92       	push	r0
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	0f 92       	push	r0
    5844:	11 24       	eor	r1, r1
    5846:	2f 93       	push	r18
    5848:	3f 93       	push	r19
    584a:	8f 93       	push	r24
    584c:	9f 93       	push	r25
    584e:	af 93       	push	r26
    5850:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5852:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <timer0_millis>
    5856:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <timer0_millis+0x1>
    585a:	a0 91 3c 05 	lds	r26, 0x053C	; 0x80053c <timer0_millis+0x2>
    585e:	b0 91 3d 05 	lds	r27, 0x053D	; 0x80053d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5862:	30 91 39 05 	lds	r19, 0x0539	; 0x800539 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5866:	23 e0       	ldi	r18, 0x03	; 3
    5868:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    586a:	2d 37       	cpi	r18, 0x7D	; 125
    586c:	20 f4       	brcc	.+8      	; 0x5876 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    586e:	01 96       	adiw	r24, 0x01	; 1
    5870:	a1 1d       	adc	r26, r1
    5872:	b1 1d       	adc	r27, r1
    5874:	05 c0       	rjmp	.+10     	; 0x5880 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5876:	26 e8       	ldi	r18, 0x86	; 134
    5878:	23 0f       	add	r18, r19
		m += 1;
    587a:	02 96       	adiw	r24, 0x02	; 2
    587c:	a1 1d       	adc	r26, r1
    587e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5880:	20 93 39 05 	sts	0x0539, r18	; 0x800539 <timer0_fract>
	timer0_millis = m;
    5884:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <timer0_millis>
    5888:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <timer0_millis+0x1>
    588c:	a0 93 3c 05 	sts	0x053C, r26	; 0x80053c <timer0_millis+0x2>
    5890:	b0 93 3d 05 	sts	0x053D, r27	; 0x80053d <timer0_millis+0x3>
	timer0_overflow_count++;
    5894:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <timer0_overflow_count>
    5898:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <timer0_overflow_count+0x1>
    589c:	a0 91 40 05 	lds	r26, 0x0540	; 0x800540 <timer0_overflow_count+0x2>
    58a0:	b0 91 41 05 	lds	r27, 0x0541	; 0x800541 <timer0_overflow_count+0x3>
    58a4:	01 96       	adiw	r24, 0x01	; 1
    58a6:	a1 1d       	adc	r26, r1
    58a8:	b1 1d       	adc	r27, r1
    58aa:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <timer0_overflow_count>
    58ae:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <timer0_overflow_count+0x1>
    58b2:	a0 93 40 05 	sts	0x0540, r26	; 0x800540 <timer0_overflow_count+0x2>
    58b6:	b0 93 41 05 	sts	0x0541, r27	; 0x800541 <timer0_overflow_count+0x3>
}
    58ba:	bf 91       	pop	r27
    58bc:	af 91       	pop	r26
    58be:	9f 91       	pop	r25
    58c0:	8f 91       	pop	r24
    58c2:	3f 91       	pop	r19
    58c4:	2f 91       	pop	r18
    58c6:	0f 90       	pop	r0
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	0f 90       	pop	r0
    58cc:	1f 90       	pop	r1
    58ce:	18 95       	reti

000058d0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    58d0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    58d2:	f8 94       	cli
	m = timer0_millis;
    58d4:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <timer0_millis>
    58d8:	70 91 3b 05 	lds	r23, 0x053B	; 0x80053b <timer0_millis+0x1>
    58dc:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <timer0_millis+0x2>
    58e0:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <timer0_millis+0x3>
	SREG = oldSREG;
    58e4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    58e6:	08 95       	ret

000058e8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    58e8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    58ea:	f8 94       	cli
	m = timer0_overflow_count;
    58ec:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <timer0_overflow_count>
    58f0:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <timer0_overflow_count+0x1>
    58f4:	a0 91 40 05 	lds	r26, 0x0540	; 0x800540 <timer0_overflow_count+0x2>
    58f8:	b0 91 41 05 	lds	r27, 0x0541	; 0x800541 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    58fc:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    58fe:	a8 9b       	sbis	0x15, 0	; 21
    5900:	05 c0       	rjmp	.+10     	; 0x590c <micros+0x24>
    5902:	2f 3f       	cpi	r18, 0xFF	; 255
    5904:	19 f0       	breq	.+6      	; 0x590c <micros+0x24>
		m++;
    5906:	01 96       	adiw	r24, 0x01	; 1
    5908:	a1 1d       	adc	r26, r1
    590a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    590c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    590e:	ba 2f       	mov	r27, r26
    5910:	a9 2f       	mov	r26, r25
    5912:	98 2f       	mov	r25, r24
    5914:	88 27       	eor	r24, r24
    5916:	82 0f       	add	r24, r18
    5918:	91 1d       	adc	r25, r1
    591a:	a1 1d       	adc	r26, r1
    591c:	b1 1d       	adc	r27, r1
    591e:	bc 01       	movw	r22, r24
    5920:	cd 01       	movw	r24, r26
    5922:	42 e0       	ldi	r20, 0x02	; 2
    5924:	66 0f       	add	r22, r22
    5926:	77 1f       	adc	r23, r23
    5928:	88 1f       	adc	r24, r24
    592a:	99 1f       	adc	r25, r25
    592c:	4a 95       	dec	r20
    592e:	d1 f7       	brne	.-12     	; 0x5924 <micros+0x3c>
}
    5930:	08 95       	ret

00005932 <delay>:

void delay(unsigned long ms)
{
    5932:	8f 92       	push	r8
    5934:	9f 92       	push	r9
    5936:	af 92       	push	r10
    5938:	bf 92       	push	r11
    593a:	cf 92       	push	r12
    593c:	df 92       	push	r13
    593e:	ef 92       	push	r14
    5940:	ff 92       	push	r15
    5942:	6b 01       	movw	r12, r22
    5944:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5946:	d0 df       	rcall	.-96     	; 0x58e8 <micros>
    5948:	4b 01       	movw	r8, r22
    594a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    594c:	c1 14       	cp	r12, r1
    594e:	d1 04       	cpc	r13, r1
    5950:	e1 04       	cpc	r14, r1
    5952:	f1 04       	cpc	r15, r1
		yield();
    5954:	f1 f0       	breq	.+60     	; 0x5992 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5956:	b4 d3       	rcall	.+1896   	; 0x60c0 <yield>
    5958:	c7 df       	rcall	.-114    	; 0x58e8 <micros>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	88 19       	sub	r24, r8
    5960:	99 09       	sbc	r25, r9
    5962:	aa 09       	sbc	r26, r10
    5964:	bb 09       	sbc	r27, r11
    5966:	88 3e       	cpi	r24, 0xE8	; 232
    5968:	93 40       	sbci	r25, 0x03	; 3
    596a:	a1 05       	cpc	r26, r1
    596c:	b1 05       	cpc	r27, r1
    596e:	70 f3       	brcs	.-36     	; 0x594c <delay+0x1a>
			ms--;
    5970:	21 e0       	ldi	r18, 0x01	; 1
    5972:	c2 1a       	sub	r12, r18
    5974:	d1 08       	sbc	r13, r1
    5976:	e1 08       	sbc	r14, r1
    5978:	f1 08       	sbc	r15, r1
			start += 1000;
    597a:	88 ee       	ldi	r24, 0xE8	; 232
    597c:	88 0e       	add	r8, r24
    597e:	83 e0       	ldi	r24, 0x03	; 3
    5980:	98 1e       	adc	r9, r24
    5982:	a1 1c       	adc	r10, r1
    5984:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5986:	c1 14       	cp	r12, r1
    5988:	d1 04       	cpc	r13, r1
    598a:	e1 04       	cpc	r14, r1
    598c:	f1 04       	cpc	r15, r1
    598e:	21 f7       	brne	.-56     	; 0x5958 <delay+0x26>
    5990:	dd cf       	rjmp	.-70     	; 0x594c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5992:	ff 90       	pop	r15
    5994:	ef 90       	pop	r14
    5996:	df 90       	pop	r13
    5998:	cf 90       	pop	r12
    599a:	bf 90       	pop	r11
    599c:	af 90       	pop	r10
    599e:	9f 90       	pop	r9
    59a0:	8f 90       	pop	r8
    59a2:	08 95       	ret

000059a4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    59a4:	82 30       	cpi	r24, 0x02	; 2
    59a6:	91 05       	cpc	r25, r1
    59a8:	38 f0       	brcs	.+14     	; 0x59b8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    59aa:	88 0f       	add	r24, r24
    59ac:	99 1f       	adc	r25, r25
    59ae:	88 0f       	add	r24, r24
    59b0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    59b2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    59b4:	01 97       	sbiw	r24, 0x01	; 1
    59b6:	f1 f7       	brne	.-4      	; 0x59b4 <delayMicroseconds+0x10>
    59b8:	08 95       	ret

000059ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    59ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    59bc:	84 b5       	in	r24, 0x24	; 36
    59be:	82 60       	ori	r24, 0x02	; 2
    59c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    59c2:	84 b5       	in	r24, 0x24	; 36
    59c4:	81 60       	ori	r24, 0x01	; 1
    59c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    59c8:	85 b5       	in	r24, 0x25	; 37
    59ca:	82 60       	ori	r24, 0x02	; 2
    59cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    59ce:	85 b5       	in	r24, 0x25	; 37
    59d0:	81 60       	ori	r24, 0x01	; 1
    59d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    59d4:	ee e6       	ldi	r30, 0x6E	; 110
    59d6:	f0 e0       	ldi	r31, 0x00	; 0
    59d8:	80 81       	ld	r24, Z
    59da:	81 60       	ori	r24, 0x01	; 1
    59dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    59de:	e1 e8       	ldi	r30, 0x81	; 129
    59e0:	f0 e0       	ldi	r31, 0x00	; 0
    59e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    59e4:	80 81       	ld	r24, Z
    59e6:	82 60       	ori	r24, 0x02	; 2
    59e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    59ea:	80 81       	ld	r24, Z
    59ec:	81 60       	ori	r24, 0x01	; 1
    59ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    59f0:	e0 e8       	ldi	r30, 0x80	; 128
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	80 81       	ld	r24, Z
    59f6:	81 60       	ori	r24, 0x01	; 1
    59f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    59fa:	e1 eb       	ldi	r30, 0xB1	; 177
    59fc:	f0 e0       	ldi	r31, 0x00	; 0
    59fe:	80 81       	ld	r24, Z
    5a00:	84 60       	ori	r24, 0x04	; 4
    5a02:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5a04:	e0 eb       	ldi	r30, 0xB0	; 176
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	80 81       	ld	r24, Z
    5a0a:	81 60       	ori	r24, 0x01	; 1
    5a0c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5a0e:	e1 e9       	ldi	r30, 0x91	; 145
    5a10:	f0 e0       	ldi	r31, 0x00	; 0
    5a12:	80 81       	ld	r24, Z
    5a14:	82 60       	ori	r24, 0x02	; 2
    5a16:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    5a18:	80 81       	ld	r24, Z
    5a1a:	81 60       	ori	r24, 0x01	; 1
    5a1c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5a1e:	e0 e9       	ldi	r30, 0x90	; 144
    5a20:	f0 e0       	ldi	r31, 0x00	; 0
    5a22:	80 81       	ld	r24, Z
    5a24:	81 60       	ori	r24, 0x01	; 1
    5a26:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    5a28:	e1 ea       	ldi	r30, 0xA1	; 161
    5a2a:	f0 e0       	ldi	r31, 0x00	; 0
    5a2c:	80 81       	ld	r24, Z
    5a2e:	82 60       	ori	r24, 0x02	; 2
    5a30:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5a32:	80 81       	ld	r24, Z
    5a34:	81 60       	ori	r24, 0x01	; 1
    5a36:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    5a38:	e0 ea       	ldi	r30, 0xA0	; 160
    5a3a:	f0 e0       	ldi	r31, 0x00	; 0
    5a3c:	80 81       	ld	r24, Z
    5a3e:	81 60       	ori	r24, 0x01	; 1
    5a40:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5a42:	e1 e2       	ldi	r30, 0x21	; 33
    5a44:	f1 e0       	ldi	r31, 0x01	; 1
    5a46:	80 81       	ld	r24, Z
    5a48:	82 60       	ori	r24, 0x02	; 2
    5a4a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    5a4c:	80 81       	ld	r24, Z
    5a4e:	81 60       	ori	r24, 0x01	; 1
    5a50:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5a52:	e0 e2       	ldi	r30, 0x20	; 32
    5a54:	f1 e0       	ldi	r31, 0x01	; 1
    5a56:	80 81       	ld	r24, Z
    5a58:	81 60       	ori	r24, 0x01	; 1
    5a5a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5a5c:	ea e7       	ldi	r30, 0x7A	; 122
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	80 81       	ld	r24, Z
    5a62:	84 60       	ori	r24, 0x04	; 4
    5a64:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5a66:	80 81       	ld	r24, Z
    5a68:	82 60       	ori	r24, 0x02	; 2
    5a6a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5a6c:	80 81       	ld	r24, Z
    5a6e:	81 60       	ori	r24, 0x01	; 1
    5a70:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5a72:	80 81       	ld	r24, Z
    5a74:	80 68       	ori	r24, 0x80	; 128
    5a76:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5a78:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    5a7c:	08 95       	ret

00005a7e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	fc 01       	movw	r30, r24
    5a82:	31 97       	sbiw	r30, 0x01	; 1
    5a84:	e2 31       	cpi	r30, 0x12	; 18
    5a86:	f1 05       	cpc	r31, r1
    5a88:	08 f0       	brcs	.+2      	; 0x5a8c <turnOffPWM+0xe>
    5a8a:	4d c0       	rjmp	.+154    	; 0x5b26 <turnOffPWM+0xa8>
    5a8c:	88 27       	eor	r24, r24
    5a8e:	ee 58       	subi	r30, 0x8E	; 142
    5a90:	ff 4f       	sbci	r31, 0xFF	; 255
    5a92:	8f 4f       	sbci	r24, 0xFF	; 255
    5a94:	63 c3       	rjmp	.+1734   	; 0x615c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5a96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5a9a:	8f 77       	andi	r24, 0x7F	; 127
    5a9c:	03 c0       	rjmp	.+6      	; 0x5aa4 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5a9e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5aa2:	8f 7d       	andi	r24, 0xDF	; 223
    5aa4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5aa8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    5aaa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5aae:	87 7f       	andi	r24, 0xF7	; 247
    5ab0:	f9 cf       	rjmp	.-14     	; 0x5aa4 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5ab2:	84 b5       	in	r24, 0x24	; 36
    5ab4:	8f 77       	andi	r24, 0x7F	; 127
    5ab6:	02 c0       	rjmp	.+4      	; 0x5abc <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5ab8:	84 b5       	in	r24, 0x24	; 36
    5aba:	8f 7d       	andi	r24, 0xDF	; 223
    5abc:	84 bd       	out	0x24, r24	; 36
    5abe:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5ac0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5ac4:	8f 77       	andi	r24, 0x7F	; 127
    5ac6:	03 c0       	rjmp	.+6      	; 0x5ace <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5ac8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5acc:	8f 7d       	andi	r24, 0xDF	; 223
    5ace:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5ad2:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5ad4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5ad8:	8f 77       	andi	r24, 0x7F	; 127
    5ada:	07 c0       	rjmp	.+14     	; 0x5aea <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    5adc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5ae0:	8f 7d       	andi	r24, 0xDF	; 223
    5ae2:	03 c0       	rjmp	.+6      	; 0x5aea <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5ae4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5ae8:	87 7f       	andi	r24, 0xF7	; 247
    5aea:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5aee:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5af0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5af4:	8f 77       	andi	r24, 0x7F	; 127
    5af6:	07 c0       	rjmp	.+14     	; 0x5b06 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5af8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5afc:	8f 7d       	andi	r24, 0xDF	; 223
    5afe:	03 c0       	rjmp	.+6      	; 0x5b06 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5b00:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b04:	87 7f       	andi	r24, 0xF7	; 247
    5b06:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b0a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5b0c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b10:	8f 77       	andi	r24, 0x7F	; 127
    5b12:	07 c0       	rjmp	.+14     	; 0x5b22 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5b14:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b18:	8f 7d       	andi	r24, 0xDF	; 223
    5b1a:	03 c0       	rjmp	.+6      	; 0x5b22 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    5b1c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b20:	87 7f       	andi	r24, 0xF7	; 247
    5b22:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b26:	08 95       	ret

00005b28 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5b28:	cf 93       	push	r28
    5b2a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	fc 01       	movw	r30, r24
    5b30:	e2 5b       	subi	r30, 0xB2	; 178
    5b32:	fe 4f       	sbci	r31, 0xFE	; 254
    5b34:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5b36:	fc 01       	movw	r30, r24
    5b38:	ec 56       	subi	r30, 0x6C	; 108
    5b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5b3c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5b3e:	88 23       	and	r24, r24
    5b40:	61 f1       	breq	.+88     	; 0x5b9a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	88 0f       	add	r24, r24
    5b46:	99 1f       	adc	r25, r25
    5b48:	fc 01       	movw	r30, r24
    5b4a:	e2 5f       	subi	r30, 0xF2	; 242
    5b4c:	fd 4f       	sbci	r31, 0xFD	; 253
    5b4e:	c5 91       	lpm	r28, Z+
    5b50:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5b52:	fc 01       	movw	r30, r24
    5b54:	ec 50       	subi	r30, 0x0C	; 12
    5b56:	fe 4f       	sbci	r31, 0xFE	; 254
    5b58:	a5 91       	lpm	r26, Z+
    5b5a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5b5c:	61 11       	cpse	r22, r1
    5b5e:	09 c0       	rjmp	.+18     	; 0x5b72 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5b60:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5b62:	f8 94       	cli
		*reg &= ~bit;
    5b64:	88 81       	ld	r24, Y
    5b66:	20 95       	com	r18
    5b68:	82 23       	and	r24, r18
    5b6a:	88 83       	st	Y, r24
		*out &= ~bit;
    5b6c:	ec 91       	ld	r30, X
    5b6e:	2e 23       	and	r18, r30
    5b70:	0b c0       	rjmp	.+22     	; 0x5b88 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5b72:	62 30       	cpi	r22, 0x02	; 2
    5b74:	61 f4       	brne	.+24     	; 0x5b8e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5b76:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5b78:	f8 94       	cli
		*reg &= ~bit;
    5b7a:	88 81       	ld	r24, Y
    5b7c:	32 2f       	mov	r19, r18
    5b7e:	30 95       	com	r19
    5b80:	83 23       	and	r24, r19
    5b82:	88 83       	st	Y, r24
		*out |= bit;
    5b84:	ec 91       	ld	r30, X
    5b86:	2e 2b       	or	r18, r30
    5b88:	2c 93       	st	X, r18
		SREG = oldSREG;
    5b8a:	9f bf       	out	0x3f, r25	; 63
    5b8c:	06 c0       	rjmp	.+12     	; 0x5b9a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5b8e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5b90:	f8 94       	cli
		*reg |= bit;
    5b92:	e8 81       	ld	r30, Y
    5b94:	2e 2b       	or	r18, r30
    5b96:	28 83       	st	Y, r18
		SREG = oldSREG;
    5b98:	8f bf       	out	0x3f, r24	; 63
	}
}
    5b9a:	df 91       	pop	r29
    5b9c:	cf 91       	pop	r28
    5b9e:	08 95       	ret

00005ba0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5ba0:	1f 93       	push	r17
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5ba6:	28 2f       	mov	r18, r24
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	f9 01       	movw	r30, r18
    5bac:	e8 5f       	subi	r30, 0xF8	; 248
    5bae:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5bb2:	f9 01       	movw	r30, r18
    5bb4:	e2 5b       	subi	r30, 0xB2	; 178
    5bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5bba:	f9 01       	movw	r30, r18
    5bbc:	ec 56       	subi	r30, 0x6C	; 108
    5bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5bc2:	cc 23       	and	r28, r28
    5bc4:	b9 f0       	breq	.+46     	; 0x5bf4 <digitalWrite+0x54>
    5bc6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5bc8:	81 11       	cpse	r24, r1
    5bca:	59 df       	rcall	.-334    	; 0x5a7e <turnOffPWM>

	out = portOutputRegister(port);
    5bcc:	ec 2f       	mov	r30, r28
    5bce:	f0 e0       	ldi	r31, 0x00	; 0
    5bd0:	ee 0f       	add	r30, r30
    5bd2:	ff 1f       	adc	r31, r31
    5bd4:	ec 50       	subi	r30, 0x0C	; 12
    5bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd8:	a5 91       	lpm	r26, Z+
    5bda:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5bdc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5bde:	f8 94       	cli

	if (val == LOW) {
    5be0:	11 11       	cpse	r17, r1
    5be2:	04 c0       	rjmp	.+8      	; 0x5bec <digitalWrite+0x4c>
		*out &= ~bit;
    5be4:	8c 91       	ld	r24, X
    5be6:	d0 95       	com	r29
    5be8:	d8 23       	and	r29, r24
    5bea:	02 c0       	rjmp	.+4      	; 0x5bf0 <digitalWrite+0x50>
	} else {
		*out |= bit;
    5bec:	ec 91       	ld	r30, X
    5bee:	de 2b       	or	r29, r30
    5bf0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5bf2:	9f bf       	out	0x3f, r25	; 63
}
    5bf4:	df 91       	pop	r29
    5bf6:	cf 91       	pop	r28
    5bf8:	1f 91       	pop	r17
    5bfa:	08 95       	ret

00005bfc <digitalRead>:

int digitalRead(uint8_t pin)
{
    5bfc:	cf 93       	push	r28
    5bfe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5c00:	28 2f       	mov	r18, r24
    5c02:	30 e0       	ldi	r19, 0x00	; 0
    5c04:	f9 01       	movw	r30, r18
    5c06:	e8 5f       	subi	r30, 0xF8	; 248
    5c08:	fe 4f       	sbci	r31, 0xFE	; 254
    5c0a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5c0c:	f9 01       	movw	r30, r18
    5c0e:	e2 5b       	subi	r30, 0xB2	; 178
    5c10:	fe 4f       	sbci	r31, 0xFE	; 254
    5c12:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5c14:	f9 01       	movw	r30, r18
    5c16:	ec 56       	subi	r30, 0x6C	; 108
    5c18:	fe 4f       	sbci	r31, 0xFE	; 254
    5c1a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    5c1c:	cc 23       	and	r28, r28
    5c1e:	89 f0       	breq	.+34     	; 0x5c42 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5c20:	81 11       	cpse	r24, r1
    5c22:	2d df       	rcall	.-422    	; 0x5a7e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5c24:	ec 2f       	mov	r30, r28
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	ee 0f       	add	r30, r30
    5c2a:	ff 1f       	adc	r31, r31
    5c2c:	e6 52       	subi	r30, 0x26	; 38
    5c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c30:	a5 91       	lpm	r26, Z+
    5c32:	b4 91       	lpm	r27, Z
    5c34:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5c36:	ed 23       	and	r30, r29
    5c38:	81 e0       	ldi	r24, 0x01	; 1
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	21 f4       	brne	.+8      	; 0x5c46 <digitalRead+0x4a>
    5c3e:	80 e0       	ldi	r24, 0x00	; 0
    5c40:	02 c0       	rjmp	.+4      	; 0x5c46 <digitalRead+0x4a>
    5c42:	80 e0       	ldi	r24, 0x00	; 0
    5c44:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5c46:	df 91       	pop	r29
    5c48:	cf 91       	pop	r28
    5c4a:	08 95       	ret

00005c4c <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5c4c:	4f 92       	push	r4
    5c4e:	5f 92       	push	r5
    5c50:	6f 92       	push	r6
    5c52:	7f 92       	push	r7
    5c54:	af 92       	push	r10
    5c56:	bf 92       	push	r11
    5c58:	cf 92       	push	r12
    5c5a:	df 92       	push	r13
    5c5c:	ef 92       	push	r14
    5c5e:	ff 92       	push	r15
    5c60:	0f 93       	push	r16
    5c62:	1f 93       	push	r17
    5c64:	cf 93       	push	r28
    5c66:	df 93       	push	r29
    5c68:	cd b7       	in	r28, 0x3d	; 61
    5c6a:	de b7       	in	r29, 0x3e	; 62
    5c6c:	29 01       	movw	r4, r18
    5c6e:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5c70:	9b 01       	movw	r18, r22
    5c72:	ac 01       	movw	r20, r24
    5c74:	24 19       	sub	r18, r4
    5c76:	35 09       	sbc	r19, r5
    5c78:	46 09       	sbc	r20, r6
    5c7a:	57 09       	sbc	r21, r7
    5c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    5c7e:	9b 89       	ldd	r25, Y+19	; 0x13
    5c80:	ac 89       	ldd	r26, Y+20	; 0x14
    5c82:	bd 89       	ldd	r27, Y+21	; 0x15
    5c84:	bc 01       	movw	r22, r24
    5c86:	cd 01       	movw	r24, r26
    5c88:	6a 19       	sub	r22, r10
    5c8a:	7b 09       	sbc	r23, r11
    5c8c:	8c 09       	sbc	r24, r12
    5c8e:	9d 09       	sbc	r25, r13
    5c90:	18 d2       	rcall	.+1072   	; 0x60c2 <__mulsi3>
    5c92:	a8 01       	movw	r20, r16
    5c94:	97 01       	movw	r18, r14
    5c96:	24 19       	sub	r18, r4
    5c98:	35 09       	sbc	r19, r5
    5c9a:	46 09       	sbc	r20, r6
    5c9c:	57 09       	sbc	r21, r7
    5c9e:	42 d2       	rcall	.+1156   	; 0x6124 <__divmodsi4>
    5ca0:	ca 01       	movw	r24, r20
    5ca2:	b9 01       	movw	r22, r18
    5ca4:	6a 0d       	add	r22, r10
    5ca6:	7b 1d       	adc	r23, r11
    5ca8:	8c 1d       	adc	r24, r12
    5caa:	9d 1d       	adc	r25, r13
}
    5cac:	df 91       	pop	r29
    5cae:	cf 91       	pop	r28
    5cb0:	1f 91       	pop	r17
    5cb2:	0f 91       	pop	r16
    5cb4:	ff 90       	pop	r15
    5cb6:	ef 90       	pop	r14
    5cb8:	df 90       	pop	r13
    5cba:	cf 90       	pop	r12
    5cbc:	bf 90       	pop	r11
    5cbe:	af 90       	pop	r10
    5cc0:	7f 90       	pop	r7
    5cc2:	6f 90       	pop	r6
    5cc4:	5f 90       	pop	r5
    5cc6:	4f 90       	pop	r4
    5cc8:	08 95       	ret

00005cca <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    5cca:	08 95       	ret

00005ccc <_ZN6StringD1Ev>:
    5ccc:	fc 01       	movw	r30, r24
    5cce:	80 81       	ld	r24, Z
    5cd0:	91 81       	ldd	r25, Z+1	; 0x01
    5cd2:	00 97       	sbiw	r24, 0x00	; 0
    5cd4:	09 f0       	breq	.+2      	; 0x5cd8 <_ZN6StringD1Ev+0xc>
    5cd6:	fb c2       	rjmp	.+1526   	; 0x62ce <free>
    5cd8:	08 95       	ret

00005cda <_ZN6String10invalidateEv>:
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	ec 01       	movw	r28, r24
    5ce0:	88 81       	ld	r24, Y
    5ce2:	99 81       	ldd	r25, Y+1	; 0x01
    5ce4:	00 97       	sbiw	r24, 0x00	; 0
    5ce6:	09 f0       	breq	.+2      	; 0x5cea <_ZN6String10invalidateEv+0x10>
    5ce8:	f2 d2       	rcall	.+1508   	; 0x62ce <free>
    5cea:	19 82       	std	Y+1, r1	; 0x01
    5cec:	18 82       	st	Y, r1
    5cee:	1d 82       	std	Y+5, r1	; 0x05
    5cf0:	1c 82       	std	Y+4, r1	; 0x04
    5cf2:	1b 82       	std	Y+3, r1	; 0x03
    5cf4:	1a 82       	std	Y+2, r1	; 0x02
    5cf6:	df 91       	pop	r29
    5cf8:	cf 91       	pop	r28
    5cfa:	08 95       	ret

00005cfc <_ZN6String12changeBufferEj>:
    5cfc:	0f 93       	push	r16
    5cfe:	1f 93       	push	r17
    5d00:	cf 93       	push	r28
    5d02:	df 93       	push	r29
    5d04:	ec 01       	movw	r28, r24
    5d06:	8b 01       	movw	r16, r22
    5d08:	6f 5f       	subi	r22, 0xFF	; 255
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	88 81       	ld	r24, Y
    5d0e:	99 81       	ldd	r25, Y+1	; 0x01
    5d10:	67 d3       	rcall	.+1742   	; 0x63e0 <realloc>
    5d12:	00 97       	sbiw	r24, 0x00	; 0
    5d14:	31 f0       	breq	.+12     	; 0x5d22 <_ZN6String12changeBufferEj+0x26>
    5d16:	99 83       	std	Y+1, r25	; 0x01
    5d18:	88 83       	st	Y, r24
    5d1a:	1b 83       	std	Y+3, r17	; 0x03
    5d1c:	0a 83       	std	Y+2, r16	; 0x02
    5d1e:	81 e0       	ldi	r24, 0x01	; 1
    5d20:	01 c0       	rjmp	.+2      	; 0x5d24 <_ZN6String12changeBufferEj+0x28>
    5d22:	80 e0       	ldi	r24, 0x00	; 0
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	08 95       	ret

00005d2e <_ZN6String7reserveEj>:
    5d2e:	cf 93       	push	r28
    5d30:	df 93       	push	r29
    5d32:	ec 01       	movw	r28, r24
    5d34:	88 81       	ld	r24, Y
    5d36:	99 81       	ldd	r25, Y+1	; 0x01
    5d38:	89 2b       	or	r24, r25
    5d3a:	29 f0       	breq	.+10     	; 0x5d46 <_ZN6String7reserveEj+0x18>
    5d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    5d40:	86 17       	cp	r24, r22
    5d42:	97 07       	cpc	r25, r23
    5d44:	58 f4       	brcc	.+22     	; 0x5d5c <_ZN6String7reserveEj+0x2e>
    5d46:	ce 01       	movw	r24, r28
    5d48:	d9 df       	rcall	.-78     	; 0x5cfc <_ZN6String12changeBufferEj>
    5d4a:	88 23       	and	r24, r24
    5d4c:	41 f0       	breq	.+16     	; 0x5d5e <_ZN6String7reserveEj+0x30>
    5d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    5d50:	9d 81       	ldd	r25, Y+5	; 0x05
    5d52:	89 2b       	or	r24, r25
    5d54:	19 f4       	brne	.+6      	; 0x5d5c <_ZN6String7reserveEj+0x2e>
    5d56:	e8 81       	ld	r30, Y
    5d58:	f9 81       	ldd	r31, Y+1	; 0x01
    5d5a:	10 82       	st	Z, r1
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	08 95       	ret

00005d64 <_ZN6String4copyEPKcj>:
    5d64:	ef 92       	push	r14
    5d66:	ff 92       	push	r15
    5d68:	0f 93       	push	r16
    5d6a:	1f 93       	push	r17
    5d6c:	cf 93       	push	r28
    5d6e:	df 93       	push	r29
    5d70:	ec 01       	movw	r28, r24
    5d72:	7b 01       	movw	r14, r22
    5d74:	8a 01       	movw	r16, r20
    5d76:	ba 01       	movw	r22, r20
    5d78:	da df       	rcall	.-76     	; 0x5d2e <_ZN6String7reserveEj>
    5d7a:	81 11       	cpse	r24, r1
    5d7c:	03 c0       	rjmp	.+6      	; 0x5d84 <_ZN6String4copyEPKcj+0x20>
    5d7e:	ce 01       	movw	r24, r28
    5d80:	ac df       	rcall	.-168    	; 0x5cda <_ZN6String10invalidateEv>
    5d82:	06 c0       	rjmp	.+12     	; 0x5d90 <_ZN6String4copyEPKcj+0x2c>
    5d84:	1d 83       	std	Y+5, r17	; 0x05
    5d86:	0c 83       	std	Y+4, r16	; 0x04
    5d88:	b7 01       	movw	r22, r14
    5d8a:	88 81       	ld	r24, Y
    5d8c:	99 81       	ldd	r25, Y+1	; 0x01
    5d8e:	2d d4       	rcall	.+2138   	; 0x65ea <strcpy>
    5d90:	ce 01       	movw	r24, r28
    5d92:	df 91       	pop	r29
    5d94:	cf 91       	pop	r28
    5d96:	1f 91       	pop	r17
    5d98:	0f 91       	pop	r16
    5d9a:	ff 90       	pop	r15
    5d9c:	ef 90       	pop	r14
    5d9e:	08 95       	ret

00005da0 <_ZN6StringC1EPKc>:
    5da0:	fc 01       	movw	r30, r24
    5da2:	11 82       	std	Z+1, r1	; 0x01
    5da4:	10 82       	st	Z, r1
    5da6:	13 82       	std	Z+3, r1	; 0x03
    5da8:	12 82       	std	Z+2, r1	; 0x02
    5daa:	15 82       	std	Z+5, r1	; 0x05
    5dac:	14 82       	std	Z+4, r1	; 0x04
    5dae:	61 15       	cp	r22, r1
    5db0:	71 05       	cpc	r23, r1
    5db2:	49 f0       	breq	.+18     	; 0x5dc6 <_ZN6StringC1EPKc+0x26>
    5db4:	fb 01       	movw	r30, r22
    5db6:	01 90       	ld	r0, Z+
    5db8:	00 20       	and	r0, r0
    5dba:	e9 f7       	brne	.-6      	; 0x5db6 <_ZN6StringC1EPKc+0x16>
    5dbc:	31 97       	sbiw	r30, 0x01	; 1
    5dbe:	af 01       	movw	r20, r30
    5dc0:	46 1b       	sub	r20, r22
    5dc2:	57 0b       	sbc	r21, r23
    5dc4:	cf cf       	rjmp	.-98     	; 0x5d64 <_ZN6String4copyEPKcj>
    5dc6:	08 95       	ret

00005dc8 <_ZN6String4moveERS_>:
    5dc8:	0f 93       	push	r16
    5dca:	1f 93       	push	r17
    5dcc:	cf 93       	push	r28
    5dce:	df 93       	push	r29
    5dd0:	8c 01       	movw	r16, r24
    5dd2:	eb 01       	movw	r28, r22
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	80 81       	ld	r24, Z
    5dd8:	91 81       	ldd	r25, Z+1	; 0x01
    5dda:	00 97       	sbiw	r24, 0x00	; 0
    5ddc:	c1 f0       	breq	.+48     	; 0x5e0e <_ZN6String4moveERS_+0x46>
    5dde:	68 81       	ld	r22, Y
    5de0:	79 81       	ldd	r23, Y+1	; 0x01
    5de2:	61 15       	cp	r22, r1
    5de4:	71 05       	cpc	r23, r1
    5de6:	91 f0       	breq	.+36     	; 0x5e0c <_ZN6String4moveERS_+0x44>
    5de8:	25 e6       	ldi	r18, 0x65	; 101
    5dea:	3e e2       	ldi	r19, 0x2E	; 46
    5dec:	23 2b       	or	r18, r19
    5dee:	71 f0       	breq	.+28     	; 0x5e0c <_ZN6String4moveERS_+0x44>
    5df0:	42 81       	ldd	r20, Z+2	; 0x02
    5df2:	53 81       	ldd	r21, Z+3	; 0x03
    5df4:	2c 81       	ldd	r18, Y+4	; 0x04
    5df6:	3d 81       	ldd	r19, Y+5	; 0x05
    5df8:	42 17       	cp	r20, r18
    5dfa:	53 07       	cpc	r21, r19
    5dfc:	38 f0       	brcs	.+14     	; 0x5e0c <_ZN6String4moveERS_+0x44>
    5dfe:	f5 d3       	rcall	.+2026   	; 0x65ea <strcpy>
    5e00:	8c 81       	ldd	r24, Y+4	; 0x04
    5e02:	9d 81       	ldd	r25, Y+5	; 0x05
    5e04:	f8 01       	movw	r30, r16
    5e06:	95 83       	std	Z+5, r25	; 0x05
    5e08:	84 83       	std	Z+4, r24	; 0x04
    5e0a:	12 c0       	rjmp	.+36     	; 0x5e30 <_ZN6String4moveERS_+0x68>
    5e0c:	60 d2       	rcall	.+1216   	; 0x62ce <free>
    5e0e:	88 81       	ld	r24, Y
    5e10:	99 81       	ldd	r25, Y+1	; 0x01
    5e12:	f8 01       	movw	r30, r16
    5e14:	91 83       	std	Z+1, r25	; 0x01
    5e16:	80 83       	st	Z, r24
    5e18:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1c:	93 83       	std	Z+3, r25	; 0x03
    5e1e:	82 83       	std	Z+2, r24	; 0x02
    5e20:	8c 81       	ldd	r24, Y+4	; 0x04
    5e22:	9d 81       	ldd	r25, Y+5	; 0x05
    5e24:	95 83       	std	Z+5, r25	; 0x05
    5e26:	84 83       	std	Z+4, r24	; 0x04
    5e28:	19 82       	std	Y+1, r1	; 0x01
    5e2a:	18 82       	st	Y, r1
    5e2c:	1b 82       	std	Y+3, r1	; 0x03
    5e2e:	1a 82       	std	Y+2, r1	; 0x02
    5e30:	1d 82       	std	Y+5, r1	; 0x05
    5e32:	1c 82       	std	Y+4, r1	; 0x04
    5e34:	df 91       	pop	r29
    5e36:	cf 91       	pop	r28
    5e38:	1f 91       	pop	r17
    5e3a:	0f 91       	pop	r16
    5e3c:	08 95       	ret

00005e3e <_ZN6StringaSEOS_>:
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	ec 01       	movw	r28, r24
    5e44:	86 17       	cp	r24, r22
    5e46:	97 07       	cpc	r25, r23
    5e48:	09 f0       	breq	.+2      	; 0x5e4c <_ZN6StringaSEOS_+0xe>
    5e4a:	be df       	rcall	.-132    	; 0x5dc8 <_ZN6String4moveERS_>
    5e4c:	ce 01       	movw	r24, r28
    5e4e:	df 91       	pop	r29
    5e50:	cf 91       	pop	r28
    5e52:	08 95       	ret

00005e54 <_ZN6StringaSEPKc>:
    5e54:	cf 93       	push	r28
    5e56:	df 93       	push	r29
    5e58:	ec 01       	movw	r28, r24
    5e5a:	61 15       	cp	r22, r1
    5e5c:	71 05       	cpc	r23, r1
    5e5e:	51 f0       	breq	.+20     	; 0x5e74 <_ZN6StringaSEPKc+0x20>
    5e60:	fb 01       	movw	r30, r22
    5e62:	01 90       	ld	r0, Z+
    5e64:	00 20       	and	r0, r0
    5e66:	e9 f7       	brne	.-6      	; 0x5e62 <_ZN6StringaSEPKc+0xe>
    5e68:	31 97       	sbiw	r30, 0x01	; 1
    5e6a:	af 01       	movw	r20, r30
    5e6c:	46 1b       	sub	r20, r22
    5e6e:	57 0b       	sbc	r21, r23
    5e70:	79 df       	rcall	.-270    	; 0x5d64 <_ZN6String4copyEPKcj>
    5e72:	01 c0       	rjmp	.+2      	; 0x5e76 <_ZN6StringaSEPKc+0x22>
    5e74:	32 df       	rcall	.-412    	; 0x5cda <_ZN6String10invalidateEv>
    5e76:	ce 01       	movw	r24, r28
    5e78:	df 91       	pop	r29
    5e7a:	cf 91       	pop	r28
    5e7c:	08 95       	ret

00005e7e <_ZN6StringC1Ehh>:
    5e7e:	0f 93       	push	r16
    5e80:	1f 93       	push	r17
    5e82:	cf 93       	push	r28
    5e84:	df 93       	push	r29
    5e86:	cd b7       	in	r28, 0x3d	; 61
    5e88:	de b7       	in	r29, 0x3e	; 62
    5e8a:	29 97       	sbiw	r28, 0x09	; 9
    5e8c:	0f b6       	in	r0, 0x3f	; 63
    5e8e:	f8 94       	cli
    5e90:	de bf       	out	0x3e, r29	; 62
    5e92:	0f be       	out	0x3f, r0	; 63
    5e94:	cd bf       	out	0x3d, r28	; 61
    5e96:	8c 01       	movw	r16, r24
    5e98:	86 2f       	mov	r24, r22
    5e9a:	f8 01       	movw	r30, r16
    5e9c:	11 82       	std	Z+1, r1	; 0x01
    5e9e:	10 82       	st	Z, r1
    5ea0:	13 82       	std	Z+3, r1	; 0x03
    5ea2:	12 82       	std	Z+2, r1	; 0x02
    5ea4:	15 82       	std	Z+5, r1	; 0x05
    5ea6:	14 82       	std	Z+4, r1	; 0x04
    5ea8:	50 e0       	ldi	r21, 0x00	; 0
    5eaa:	be 01       	movw	r22, r28
    5eac:	6f 5f       	subi	r22, 0xFF	; 255
    5eae:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	ba d3       	rcall	.+1908   	; 0x6628 <utoa>
    5eb4:	be 01       	movw	r22, r28
    5eb6:	6f 5f       	subi	r22, 0xFF	; 255
    5eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eba:	c8 01       	movw	r24, r16
    5ebc:	cb df       	rcall	.-106    	; 0x5e54 <_ZN6StringaSEPKc>
    5ebe:	29 96       	adiw	r28, 0x09	; 9
    5ec0:	0f b6       	in	r0, 0x3f	; 63
    5ec2:	f8 94       	cli
    5ec4:	de bf       	out	0x3e, r29	; 62
    5ec6:	0f be       	out	0x3f, r0	; 63
    5ec8:	cd bf       	out	0x3d, r28	; 61
    5eca:	df 91       	pop	r29
    5ecc:	cf 91       	pop	r28
    5ece:	1f 91       	pop	r17
    5ed0:	0f 91       	pop	r16
    5ed2:	08 95       	ret

00005ed4 <_ZN6String6concatEPKcj>:
    5ed4:	ef 92       	push	r14
    5ed6:	ff 92       	push	r15
    5ed8:	0f 93       	push	r16
    5eda:	1f 93       	push	r17
    5edc:	cf 93       	push	r28
    5ede:	df 93       	push	r29
    5ee0:	61 15       	cp	r22, r1
    5ee2:	71 05       	cpc	r23, r1
    5ee4:	11 f4       	brne	.+4      	; 0x5eea <_ZN6String6concatEPKcj+0x16>
    5ee6:	80 e0       	ldi	r24, 0x00	; 0
    5ee8:	1a c0       	rjmp	.+52     	; 0x5f1e <_ZN6String6concatEPKcj+0x4a>
    5eea:	41 15       	cp	r20, r1
    5eec:	51 05       	cpc	r21, r1
    5eee:	b1 f0       	breq	.+44     	; 0x5f1c <_ZN6String6concatEPKcj+0x48>
    5ef0:	7b 01       	movw	r14, r22
    5ef2:	ec 01       	movw	r28, r24
    5ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    5ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    5ef8:	8a 01       	movw	r16, r20
    5efa:	08 0f       	add	r16, r24
    5efc:	19 1f       	adc	r17, r25
    5efe:	b8 01       	movw	r22, r16
    5f00:	ce 01       	movw	r24, r28
    5f02:	15 df       	rcall	.-470    	; 0x5d2e <_ZN6String7reserveEj>
    5f04:	88 23       	and	r24, r24
    5f06:	79 f3       	breq	.-34     	; 0x5ee6 <_ZN6String6concatEPKcj+0x12>
    5f08:	28 81       	ld	r18, Y
    5f0a:	39 81       	ldd	r19, Y+1	; 0x01
    5f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    5f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    5f10:	b7 01       	movw	r22, r14
    5f12:	82 0f       	add	r24, r18
    5f14:	93 1f       	adc	r25, r19
    5f16:	69 d3       	rcall	.+1746   	; 0x65ea <strcpy>
    5f18:	1d 83       	std	Y+5, r17	; 0x05
    5f1a:	0c 83       	std	Y+4, r16	; 0x04
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	1f 91       	pop	r17
    5f24:	0f 91       	pop	r16
    5f26:	ff 90       	pop	r15
    5f28:	ef 90       	pop	r14
    5f2a:	08 95       	ret

00005f2c <_ZN6String6concatERKS_>:
    5f2c:	fb 01       	movw	r30, r22
    5f2e:	44 81       	ldd	r20, Z+4	; 0x04
    5f30:	55 81       	ldd	r21, Z+5	; 0x05
    5f32:	60 81       	ld	r22, Z
    5f34:	71 81       	ldd	r23, Z+1	; 0x01
    5f36:	ce cf       	rjmp	.-100    	; 0x5ed4 <_ZN6String6concatEPKcj>

00005f38 <_ZN6String6concatEc>:
    5f38:	cf 93       	push	r28
    5f3a:	df 93       	push	r29
    5f3c:	1f 92       	push	r1
    5f3e:	1f 92       	push	r1
    5f40:	cd b7       	in	r28, 0x3d	; 61
    5f42:	de b7       	in	r29, 0x3e	; 62
    5f44:	69 83       	std	Y+1, r22	; 0x01
    5f46:	1a 82       	std	Y+2, r1	; 0x02
    5f48:	41 e0       	ldi	r20, 0x01	; 1
    5f4a:	50 e0       	ldi	r21, 0x00	; 0
    5f4c:	be 01       	movw	r22, r28
    5f4e:	6f 5f       	subi	r22, 0xFF	; 255
    5f50:	7f 4f       	sbci	r23, 0xFF	; 255
    5f52:	c0 df       	rcall	.-128    	; 0x5ed4 <_ZN6String6concatEPKcj>
    5f54:	0f 90       	pop	r0
    5f56:	0f 90       	pop	r0
    5f58:	df 91       	pop	r29
    5f5a:	cf 91       	pop	r28
    5f5c:	08 95       	ret

00005f5e <_ZNK6String9compareToERKS_>:
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29
    5f62:	dc 01       	movw	r26, r24
    5f64:	ed 91       	ld	r30, X+
    5f66:	fc 91       	ld	r31, X
    5f68:	eb 01       	movw	r28, r22
    5f6a:	a8 81       	ld	r26, Y
    5f6c:	b9 81       	ldd	r27, Y+1	; 0x01
    5f6e:	30 97       	sbiw	r30, 0x00	; 0
    5f70:	11 f0       	breq	.+4      	; 0x5f76 <_ZNK6String9compareToERKS_+0x18>
    5f72:	10 97       	sbiw	r26, 0x00	; 0
    5f74:	c9 f4       	brne	.+50     	; 0x5fa8 <_ZNK6String9compareToERKS_+0x4a>
    5f76:	10 97       	sbiw	r26, 0x00	; 0
    5f78:	59 f0       	breq	.+22     	; 0x5f90 <_ZNK6String9compareToERKS_+0x32>
    5f7a:	eb 01       	movw	r28, r22
    5f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    5f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    5f80:	23 2b       	or	r18, r19
    5f82:	31 f0       	breq	.+12     	; 0x5f90 <_ZNK6String9compareToERKS_+0x32>
    5f84:	8c 91       	ld	r24, X
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	91 95       	neg	r25
    5f8a:	81 95       	neg	r24
    5f8c:	91 09       	sbc	r25, r1
    5f8e:	13 c0       	rjmp	.+38     	; 0x5fb6 <_ZNK6String9compareToERKS_+0x58>
    5f90:	30 97       	sbiw	r30, 0x00	; 0
    5f92:	79 f0       	breq	.+30     	; 0x5fb2 <_ZNK6String9compareToERKS_+0x54>
    5f94:	dc 01       	movw	r26, r24
    5f96:	14 96       	adiw	r26, 0x04	; 4
    5f98:	8d 91       	ld	r24, X+
    5f9a:	9c 91       	ld	r25, X
    5f9c:	15 97       	sbiw	r26, 0x05	; 5
    5f9e:	89 2b       	or	r24, r25
    5fa0:	41 f0       	breq	.+16     	; 0x5fb2 <_ZNK6String9compareToERKS_+0x54>
    5fa2:	80 81       	ld	r24, Z
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	07 c0       	rjmp	.+14     	; 0x5fb6 <_ZNK6String9compareToERKS_+0x58>
    5fa8:	bd 01       	movw	r22, r26
    5faa:	cf 01       	movw	r24, r30
    5fac:	df 91       	pop	r29
    5fae:	cf 91       	pop	r28
    5fb0:	13 c3       	rjmp	.+1574   	; 0x65d8 <strcmp>
    5fb2:	80 e0       	ldi	r24, 0x00	; 0
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	df 91       	pop	r29
    5fb8:	cf 91       	pop	r28
    5fba:	08 95       	ret

00005fbc <_ZNK6String6equalsERKS_>:
    5fbc:	fc 01       	movw	r30, r24
    5fbe:	44 81       	ldd	r20, Z+4	; 0x04
    5fc0:	55 81       	ldd	r21, Z+5	; 0x05
    5fc2:	fb 01       	movw	r30, r22
    5fc4:	24 81       	ldd	r18, Z+4	; 0x04
    5fc6:	35 81       	ldd	r19, Z+5	; 0x05
    5fc8:	42 17       	cp	r20, r18
    5fca:	53 07       	cpc	r21, r19
    5fcc:	21 f4       	brne	.+8      	; 0x5fd6 <_ZNK6String6equalsERKS_+0x1a>
    5fce:	c7 df       	rcall	.-114    	; 0x5f5e <_ZNK6String9compareToERKS_>
    5fd0:	21 e0       	ldi	r18, 0x01	; 1
    5fd2:	89 2b       	or	r24, r25
    5fd4:	09 f0       	breq	.+2      	; 0x5fd8 <_ZNK6String6equalsERKS_+0x1c>
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	82 2f       	mov	r24, r18
    5fda:	08 95       	ret

00005fdc <_ZNK6String6equalsEPKc>:
    5fdc:	fc 01       	movw	r30, r24
    5fde:	24 81       	ldd	r18, Z+4	; 0x04
    5fe0:	35 81       	ldd	r19, Z+5	; 0x05
    5fe2:	23 2b       	or	r18, r19
    5fe4:	31 f4       	brne	.+12     	; 0x5ff2 <_ZNK6String6equalsEPKc+0x16>
    5fe6:	21 e0       	ldi	r18, 0x01	; 1
    5fe8:	61 15       	cp	r22, r1
    5fea:	71 05       	cpc	r23, r1
    5fec:	99 f0       	breq	.+38     	; 0x6014 <_ZNK6String6equalsEPKc+0x38>
    5fee:	fb 01       	movw	r30, r22
    5ff0:	08 c0       	rjmp	.+16     	; 0x6002 <_ZNK6String6equalsEPKc+0x26>
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	80 81       	ld	r24, Z
    5ff6:	91 81       	ldd	r25, Z+1	; 0x01
    5ff8:	61 15       	cp	r22, r1
    5ffa:	71 05       	cpc	r23, r1
    5ffc:	31 f4       	brne	.+12     	; 0x600a <_ZNK6String6equalsEPKc+0x2e>
    5ffe:	21 e0       	ldi	r18, 0x01	; 1
    6000:	fc 01       	movw	r30, r24
    6002:	80 81       	ld	r24, Z
    6004:	88 23       	and	r24, r24
    6006:	31 f0       	breq	.+12     	; 0x6014 <_ZNK6String6equalsEPKc+0x38>
    6008:	04 c0       	rjmp	.+8      	; 0x6012 <_ZNK6String6equalsEPKc+0x36>
    600a:	e6 d2       	rcall	.+1484   	; 0x65d8 <strcmp>
    600c:	21 e0       	ldi	r18, 0x01	; 1
    600e:	89 2b       	or	r24, r25
    6010:	09 f0       	breq	.+2      	; 0x6014 <_ZNK6String6equalsEPKc+0x38>
    6012:	20 e0       	ldi	r18, 0x00	; 0
    6014:	82 2f       	mov	r24, r18
    6016:	08 95       	ret

00006018 <_ZNK6String9substringEjj>:
    6018:	bf 92       	push	r11
    601a:	cf 92       	push	r12
    601c:	df 92       	push	r13
    601e:	ef 92       	push	r14
    6020:	ff 92       	push	r15
    6022:	0f 93       	push	r16
    6024:	1f 93       	push	r17
    6026:	cf 93       	push	r28
    6028:	df 93       	push	r29
    602a:	7c 01       	movw	r14, r24
    602c:	6b 01       	movw	r12, r22
    602e:	8a 01       	movw	r16, r20
    6030:	e9 01       	movw	r28, r18
    6032:	24 17       	cp	r18, r20
    6034:	35 07       	cpc	r19, r21
    6036:	20 f4       	brcc	.+8      	; 0x6040 <_ZNK6String9substringEjj+0x28>
    6038:	81 2f       	mov	r24, r17
    603a:	89 01       	movw	r16, r18
    603c:	c4 2f       	mov	r28, r20
    603e:	d8 2f       	mov	r29, r24
    6040:	63 ed       	ldi	r22, 0xD3	; 211
    6042:	72 e0       	ldi	r23, 0x02	; 2
    6044:	c7 01       	movw	r24, r14
    6046:	ac de       	rcall	.-680    	; 0x5da0 <_ZN6StringC1EPKc>
    6048:	d6 01       	movw	r26, r12
    604a:	14 96       	adiw	r26, 0x04	; 4
    604c:	8d 91       	ld	r24, X+
    604e:	9c 91       	ld	r25, X
    6050:	15 97       	sbiw	r26, 0x05	; 5
    6052:	08 17       	cp	r16, r24
    6054:	19 07       	cpc	r17, r25
    6056:	c0 f4       	brcc	.+48     	; 0x6088 <_ZNK6String9substringEjj+0x70>
    6058:	8c 17       	cp	r24, r28
    605a:	9d 07       	cpc	r25, r29
    605c:	08 f4       	brcc	.+2      	; 0x6060 <_ZNK6String9substringEjj+0x48>
    605e:	ec 01       	movw	r28, r24
    6060:	d6 01       	movw	r26, r12
    6062:	ed 91       	ld	r30, X+
    6064:	fc 91       	ld	r31, X
    6066:	11 97       	sbiw	r26, 0x01	; 1
    6068:	ec 0f       	add	r30, r28
    606a:	fd 1f       	adc	r31, r29
    606c:	b0 80       	ld	r11, Z
    606e:	10 82       	st	Z, r1
    6070:	6d 91       	ld	r22, X+
    6072:	7c 91       	ld	r23, X
    6074:	60 0f       	add	r22, r16
    6076:	71 1f       	adc	r23, r17
    6078:	c7 01       	movw	r24, r14
    607a:	ec de       	rcall	.-552    	; 0x5e54 <_ZN6StringaSEPKc>
    607c:	d6 01       	movw	r26, r12
    607e:	ed 91       	ld	r30, X+
    6080:	fc 91       	ld	r31, X
    6082:	ec 0f       	add	r30, r28
    6084:	fd 1f       	adc	r31, r29
    6086:	b0 82       	st	Z, r11
    6088:	c7 01       	movw	r24, r14
    608a:	df 91       	pop	r29
    608c:	cf 91       	pop	r28
    608e:	1f 91       	pop	r17
    6090:	0f 91       	pop	r16
    6092:	ff 90       	pop	r15
    6094:	ef 90       	pop	r14
    6096:	df 90       	pop	r13
    6098:	cf 90       	pop	r12
    609a:	bf 90       	pop	r11
    609c:	08 95       	ret

0000609e <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
	if (!buffer) return;
    60a2:	fc 01       	movw	r30, r24
    60a4:	c0 81       	ld	r28, Z
    60a6:	d1 81       	ldd	r29, Z+1	; 0x01
    60a8:	20 97       	sbiw	r28, 0x00	; 0
    60aa:	39 f0       	breq	.+14     	; 0x60ba <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    60ac:	88 81       	ld	r24, Y
    60ae:	88 23       	and	r24, r24
    60b0:	21 f0       	breq	.+8      	; 0x60ba <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	79 d2       	rcall	.+1266   	; 0x65a8 <toupper>
    60b6:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    60b8:	f9 cf       	rjmp	.-14     	; 0x60ac <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    60ba:	df 91       	pop	r29
    60bc:	cf 91       	pop	r28
    60be:	08 95       	ret

000060c0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    60c0:	08 95       	ret

000060c2 <__mulsi3>:
    60c2:	db 01       	movw	r26, r22
    60c4:	8f 93       	push	r24
    60c6:	9f 93       	push	r25
    60c8:	51 d0       	rcall	.+162    	; 0x616c <__muluhisi3>
    60ca:	bf 91       	pop	r27
    60cc:	af 91       	pop	r26
    60ce:	a2 9f       	mul	r26, r18
    60d0:	80 0d       	add	r24, r0
    60d2:	91 1d       	adc	r25, r1
    60d4:	a3 9f       	mul	r26, r19
    60d6:	90 0d       	add	r25, r0
    60d8:	b2 9f       	mul	r27, r18
    60da:	90 0d       	add	r25, r0
    60dc:	11 24       	eor	r1, r1
    60de:	08 95       	ret

000060e0 <__udivmodsi4>:
    60e0:	a1 e2       	ldi	r26, 0x21	; 33
    60e2:	1a 2e       	mov	r1, r26
    60e4:	aa 1b       	sub	r26, r26
    60e6:	bb 1b       	sub	r27, r27
    60e8:	fd 01       	movw	r30, r26
    60ea:	0d c0       	rjmp	.+26     	; 0x6106 <__udivmodsi4_ep>

000060ec <__udivmodsi4_loop>:
    60ec:	aa 1f       	adc	r26, r26
    60ee:	bb 1f       	adc	r27, r27
    60f0:	ee 1f       	adc	r30, r30
    60f2:	ff 1f       	adc	r31, r31
    60f4:	a2 17       	cp	r26, r18
    60f6:	b3 07       	cpc	r27, r19
    60f8:	e4 07       	cpc	r30, r20
    60fa:	f5 07       	cpc	r31, r21
    60fc:	20 f0       	brcs	.+8      	; 0x6106 <__udivmodsi4_ep>
    60fe:	a2 1b       	sub	r26, r18
    6100:	b3 0b       	sbc	r27, r19
    6102:	e4 0b       	sbc	r30, r20
    6104:	f5 0b       	sbc	r31, r21

00006106 <__udivmodsi4_ep>:
    6106:	66 1f       	adc	r22, r22
    6108:	77 1f       	adc	r23, r23
    610a:	88 1f       	adc	r24, r24
    610c:	99 1f       	adc	r25, r25
    610e:	1a 94       	dec	r1
    6110:	69 f7       	brne	.-38     	; 0x60ec <__udivmodsi4_loop>
    6112:	60 95       	com	r22
    6114:	70 95       	com	r23
    6116:	80 95       	com	r24
    6118:	90 95       	com	r25
    611a:	9b 01       	movw	r18, r22
    611c:	ac 01       	movw	r20, r24
    611e:	bd 01       	movw	r22, r26
    6120:	cf 01       	movw	r24, r30
    6122:	08 95       	ret

00006124 <__divmodsi4>:
    6124:	05 2e       	mov	r0, r21
    6126:	97 fb       	bst	r25, 7
    6128:	16 f4       	brtc	.+4      	; 0x612e <__divmodsi4+0xa>
    612a:	00 94       	com	r0
    612c:	0f d0       	rcall	.+30     	; 0x614c <__negsi2>
    612e:	57 fd       	sbrc	r21, 7
    6130:	05 d0       	rcall	.+10     	; 0x613c <__divmodsi4_neg2>
    6132:	d6 df       	rcall	.-84     	; 0x60e0 <__udivmodsi4>
    6134:	07 fc       	sbrc	r0, 7
    6136:	02 d0       	rcall	.+4      	; 0x613c <__divmodsi4_neg2>
    6138:	46 f4       	brtc	.+16     	; 0x614a <__divmodsi4_exit>
    613a:	08 c0       	rjmp	.+16     	; 0x614c <__negsi2>

0000613c <__divmodsi4_neg2>:
    613c:	50 95       	com	r21
    613e:	40 95       	com	r20
    6140:	30 95       	com	r19
    6142:	21 95       	neg	r18
    6144:	3f 4f       	sbci	r19, 0xFF	; 255
    6146:	4f 4f       	sbci	r20, 0xFF	; 255
    6148:	5f 4f       	sbci	r21, 0xFF	; 255

0000614a <__divmodsi4_exit>:
    614a:	08 95       	ret

0000614c <__negsi2>:
    614c:	90 95       	com	r25
    614e:	80 95       	com	r24
    6150:	70 95       	com	r23
    6152:	61 95       	neg	r22
    6154:	7f 4f       	sbci	r23, 0xFF	; 255
    6156:	8f 4f       	sbci	r24, 0xFF	; 255
    6158:	9f 4f       	sbci	r25, 0xFF	; 255
    615a:	08 95       	ret

0000615c <__tablejump2__>:
    615c:	ee 0f       	add	r30, r30
    615e:	ff 1f       	adc	r31, r31
    6160:	88 1f       	adc	r24, r24
    6162:	8b bf       	out	0x3b, r24	; 59
    6164:	07 90       	elpm	r0, Z+
    6166:	f6 91       	elpm	r31, Z
    6168:	e0 2d       	mov	r30, r0
    616a:	19 94       	eijmp

0000616c <__muluhisi3>:
    616c:	09 d0       	rcall	.+18     	; 0x6180 <__umulhisi3>
    616e:	a5 9f       	mul	r26, r21
    6170:	90 0d       	add	r25, r0
    6172:	b4 9f       	mul	r27, r20
    6174:	90 0d       	add	r25, r0
    6176:	a4 9f       	mul	r26, r20
    6178:	80 0d       	add	r24, r0
    617a:	91 1d       	adc	r25, r1
    617c:	11 24       	eor	r1, r1
    617e:	08 95       	ret

00006180 <__umulhisi3>:
    6180:	a2 9f       	mul	r26, r18
    6182:	b0 01       	movw	r22, r0
    6184:	b3 9f       	mul	r27, r19
    6186:	c0 01       	movw	r24, r0
    6188:	a3 9f       	mul	r26, r19
    618a:	70 0d       	add	r23, r0
    618c:	81 1d       	adc	r24, r1
    618e:	11 24       	eor	r1, r1
    6190:	91 1d       	adc	r25, r1
    6192:	b2 9f       	mul	r27, r18
    6194:	70 0d       	add	r23, r0
    6196:	81 1d       	adc	r24, r1
    6198:	11 24       	eor	r1, r1
    619a:	91 1d       	adc	r25, r1
    619c:	08 95       	ret

0000619e <malloc>:
    619e:	0f 93       	push	r16
    61a0:	1f 93       	push	r17
    61a2:	cf 93       	push	r28
    61a4:	df 93       	push	r29
    61a6:	82 30       	cpi	r24, 0x02	; 2
    61a8:	91 05       	cpc	r25, r1
    61aa:	10 f4       	brcc	.+4      	; 0x61b0 <malloc+0x12>
    61ac:	82 e0       	ldi	r24, 0x02	; 2
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	e0 91 44 05 	lds	r30, 0x0544	; 0x800544 <__flp>
    61b4:	f0 91 45 05 	lds	r31, 0x0545	; 0x800545 <__flp+0x1>
    61b8:	20 e0       	ldi	r18, 0x00	; 0
    61ba:	30 e0       	ldi	r19, 0x00	; 0
    61bc:	a0 e0       	ldi	r26, 0x00	; 0
    61be:	b0 e0       	ldi	r27, 0x00	; 0
    61c0:	30 97       	sbiw	r30, 0x00	; 0
    61c2:	19 f1       	breq	.+70     	; 0x620a <malloc+0x6c>
    61c4:	40 81       	ld	r20, Z
    61c6:	51 81       	ldd	r21, Z+1	; 0x01
    61c8:	02 81       	ldd	r16, Z+2	; 0x02
    61ca:	13 81       	ldd	r17, Z+3	; 0x03
    61cc:	48 17       	cp	r20, r24
    61ce:	59 07       	cpc	r21, r25
    61d0:	c8 f0       	brcs	.+50     	; 0x6204 <malloc+0x66>
    61d2:	84 17       	cp	r24, r20
    61d4:	95 07       	cpc	r25, r21
    61d6:	69 f4       	brne	.+26     	; 0x61f2 <malloc+0x54>
    61d8:	10 97       	sbiw	r26, 0x00	; 0
    61da:	31 f0       	breq	.+12     	; 0x61e8 <malloc+0x4a>
    61dc:	12 96       	adiw	r26, 0x02	; 2
    61de:	0c 93       	st	X, r16
    61e0:	12 97       	sbiw	r26, 0x02	; 2
    61e2:	13 96       	adiw	r26, 0x03	; 3
    61e4:	1c 93       	st	X, r17
    61e6:	27 c0       	rjmp	.+78     	; 0x6236 <malloc+0x98>
    61e8:	00 93 44 05 	sts	0x0544, r16	; 0x800544 <__flp>
    61ec:	10 93 45 05 	sts	0x0545, r17	; 0x800545 <__flp+0x1>
    61f0:	22 c0       	rjmp	.+68     	; 0x6236 <malloc+0x98>
    61f2:	21 15       	cp	r18, r1
    61f4:	31 05       	cpc	r19, r1
    61f6:	19 f0       	breq	.+6      	; 0x61fe <malloc+0x60>
    61f8:	42 17       	cp	r20, r18
    61fa:	53 07       	cpc	r21, r19
    61fc:	18 f4       	brcc	.+6      	; 0x6204 <malloc+0x66>
    61fe:	9a 01       	movw	r18, r20
    6200:	bd 01       	movw	r22, r26
    6202:	ef 01       	movw	r28, r30
    6204:	df 01       	movw	r26, r30
    6206:	f8 01       	movw	r30, r16
    6208:	db cf       	rjmp	.-74     	; 0x61c0 <malloc+0x22>
    620a:	21 15       	cp	r18, r1
    620c:	31 05       	cpc	r19, r1
    620e:	f9 f0       	breq	.+62     	; 0x624e <malloc+0xb0>
    6210:	28 1b       	sub	r18, r24
    6212:	39 0b       	sbc	r19, r25
    6214:	24 30       	cpi	r18, 0x04	; 4
    6216:	31 05       	cpc	r19, r1
    6218:	80 f4       	brcc	.+32     	; 0x623a <malloc+0x9c>
    621a:	8a 81       	ldd	r24, Y+2	; 0x02
    621c:	9b 81       	ldd	r25, Y+3	; 0x03
    621e:	61 15       	cp	r22, r1
    6220:	71 05       	cpc	r23, r1
    6222:	21 f0       	breq	.+8      	; 0x622c <malloc+0x8e>
    6224:	fb 01       	movw	r30, r22
    6226:	93 83       	std	Z+3, r25	; 0x03
    6228:	82 83       	std	Z+2, r24	; 0x02
    622a:	04 c0       	rjmp	.+8      	; 0x6234 <malloc+0x96>
    622c:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <__flp+0x1>
    6230:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <__flp>
    6234:	fe 01       	movw	r30, r28
    6236:	32 96       	adiw	r30, 0x02	; 2
    6238:	44 c0       	rjmp	.+136    	; 0x62c2 <malloc+0x124>
    623a:	fe 01       	movw	r30, r28
    623c:	e2 0f       	add	r30, r18
    623e:	f3 1f       	adc	r31, r19
    6240:	81 93       	st	Z+, r24
    6242:	91 93       	st	Z+, r25
    6244:	22 50       	subi	r18, 0x02	; 2
    6246:	31 09       	sbc	r19, r1
    6248:	39 83       	std	Y+1, r19	; 0x01
    624a:	28 83       	st	Y, r18
    624c:	3a c0       	rjmp	.+116    	; 0x62c2 <malloc+0x124>
    624e:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <__brkval>
    6252:	30 91 43 05 	lds	r19, 0x0543	; 0x800543 <__brkval+0x1>
    6256:	23 2b       	or	r18, r19
    6258:	41 f4       	brne	.+16     	; 0x626a <malloc+0xcc>
    625a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    625e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6262:	30 93 43 05 	sts	0x0543, r19	; 0x800543 <__brkval+0x1>
    6266:	20 93 42 05 	sts	0x0542, r18	; 0x800542 <__brkval>
    626a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    626e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6272:	21 15       	cp	r18, r1
    6274:	31 05       	cpc	r19, r1
    6276:	41 f4       	brne	.+16     	; 0x6288 <malloc+0xea>
    6278:	2d b7       	in	r18, 0x3d	; 61
    627a:	3e b7       	in	r19, 0x3e	; 62
    627c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6280:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6284:	24 1b       	sub	r18, r20
    6286:	35 0b       	sbc	r19, r21
    6288:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <__brkval>
    628c:	f0 91 43 05 	lds	r31, 0x0543	; 0x800543 <__brkval+0x1>
    6290:	e2 17       	cp	r30, r18
    6292:	f3 07       	cpc	r31, r19
    6294:	a0 f4       	brcc	.+40     	; 0x62be <malloc+0x120>
    6296:	2e 1b       	sub	r18, r30
    6298:	3f 0b       	sbc	r19, r31
    629a:	28 17       	cp	r18, r24
    629c:	39 07       	cpc	r19, r25
    629e:	78 f0       	brcs	.+30     	; 0x62be <malloc+0x120>
    62a0:	ac 01       	movw	r20, r24
    62a2:	4e 5f       	subi	r20, 0xFE	; 254
    62a4:	5f 4f       	sbci	r21, 0xFF	; 255
    62a6:	24 17       	cp	r18, r20
    62a8:	35 07       	cpc	r19, r21
    62aa:	48 f0       	brcs	.+18     	; 0x62be <malloc+0x120>
    62ac:	4e 0f       	add	r20, r30
    62ae:	5f 1f       	adc	r21, r31
    62b0:	50 93 43 05 	sts	0x0543, r21	; 0x800543 <__brkval+0x1>
    62b4:	40 93 42 05 	sts	0x0542, r20	; 0x800542 <__brkval>
    62b8:	81 93       	st	Z+, r24
    62ba:	91 93       	st	Z+, r25
    62bc:	02 c0       	rjmp	.+4      	; 0x62c2 <malloc+0x124>
    62be:	e0 e0       	ldi	r30, 0x00	; 0
    62c0:	f0 e0       	ldi	r31, 0x00	; 0
    62c2:	cf 01       	movw	r24, r30
    62c4:	df 91       	pop	r29
    62c6:	cf 91       	pop	r28
    62c8:	1f 91       	pop	r17
    62ca:	0f 91       	pop	r16
    62cc:	08 95       	ret

000062ce <free>:
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    62d2:	00 97       	sbiw	r24, 0x00	; 0
    62d4:	09 f4       	brne	.+2      	; 0x62d8 <free+0xa>
    62d6:	81 c0       	rjmp	.+258    	; 0x63da <free+0x10c>
    62d8:	fc 01       	movw	r30, r24
    62da:	32 97       	sbiw	r30, 0x02	; 2
    62dc:	13 82       	std	Z+3, r1	; 0x03
    62de:	12 82       	std	Z+2, r1	; 0x02
    62e0:	a0 91 44 05 	lds	r26, 0x0544	; 0x800544 <__flp>
    62e4:	b0 91 45 05 	lds	r27, 0x0545	; 0x800545 <__flp+0x1>
    62e8:	10 97       	sbiw	r26, 0x00	; 0
    62ea:	81 f4       	brne	.+32     	; 0x630c <free+0x3e>
    62ec:	20 81       	ld	r18, Z
    62ee:	31 81       	ldd	r19, Z+1	; 0x01
    62f0:	82 0f       	add	r24, r18
    62f2:	93 1f       	adc	r25, r19
    62f4:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <__brkval>
    62f8:	30 91 43 05 	lds	r19, 0x0543	; 0x800543 <__brkval+0x1>
    62fc:	28 17       	cp	r18, r24
    62fe:	39 07       	cpc	r19, r25
    6300:	51 f5       	brne	.+84     	; 0x6356 <free+0x88>
    6302:	f0 93 43 05 	sts	0x0543, r31	; 0x800543 <__brkval+0x1>
    6306:	e0 93 42 05 	sts	0x0542, r30	; 0x800542 <__brkval>
    630a:	67 c0       	rjmp	.+206    	; 0x63da <free+0x10c>
    630c:	ed 01       	movw	r28, r26
    630e:	20 e0       	ldi	r18, 0x00	; 0
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	ce 17       	cp	r28, r30
    6314:	df 07       	cpc	r29, r31
    6316:	40 f4       	brcc	.+16     	; 0x6328 <free+0x5a>
    6318:	4a 81       	ldd	r20, Y+2	; 0x02
    631a:	5b 81       	ldd	r21, Y+3	; 0x03
    631c:	9e 01       	movw	r18, r28
    631e:	41 15       	cp	r20, r1
    6320:	51 05       	cpc	r21, r1
    6322:	f1 f0       	breq	.+60     	; 0x6360 <free+0x92>
    6324:	ea 01       	movw	r28, r20
    6326:	f5 cf       	rjmp	.-22     	; 0x6312 <free+0x44>
    6328:	d3 83       	std	Z+3, r29	; 0x03
    632a:	c2 83       	std	Z+2, r28	; 0x02
    632c:	40 81       	ld	r20, Z
    632e:	51 81       	ldd	r21, Z+1	; 0x01
    6330:	84 0f       	add	r24, r20
    6332:	95 1f       	adc	r25, r21
    6334:	c8 17       	cp	r28, r24
    6336:	d9 07       	cpc	r29, r25
    6338:	59 f4       	brne	.+22     	; 0x6350 <free+0x82>
    633a:	88 81       	ld	r24, Y
    633c:	99 81       	ldd	r25, Y+1	; 0x01
    633e:	84 0f       	add	r24, r20
    6340:	95 1f       	adc	r25, r21
    6342:	02 96       	adiw	r24, 0x02	; 2
    6344:	91 83       	std	Z+1, r25	; 0x01
    6346:	80 83       	st	Z, r24
    6348:	8a 81       	ldd	r24, Y+2	; 0x02
    634a:	9b 81       	ldd	r25, Y+3	; 0x03
    634c:	93 83       	std	Z+3, r25	; 0x03
    634e:	82 83       	std	Z+2, r24	; 0x02
    6350:	21 15       	cp	r18, r1
    6352:	31 05       	cpc	r19, r1
    6354:	29 f4       	brne	.+10     	; 0x6360 <free+0x92>
    6356:	f0 93 45 05 	sts	0x0545, r31	; 0x800545 <__flp+0x1>
    635a:	e0 93 44 05 	sts	0x0544, r30	; 0x800544 <__flp>
    635e:	3d c0       	rjmp	.+122    	; 0x63da <free+0x10c>
    6360:	e9 01       	movw	r28, r18
    6362:	fb 83       	std	Y+3, r31	; 0x03
    6364:	ea 83       	std	Y+2, r30	; 0x02
    6366:	49 91       	ld	r20, Y+
    6368:	59 91       	ld	r21, Y+
    636a:	c4 0f       	add	r28, r20
    636c:	d5 1f       	adc	r29, r21
    636e:	ec 17       	cp	r30, r28
    6370:	fd 07       	cpc	r31, r29
    6372:	61 f4       	brne	.+24     	; 0x638c <free+0xbe>
    6374:	80 81       	ld	r24, Z
    6376:	91 81       	ldd	r25, Z+1	; 0x01
    6378:	84 0f       	add	r24, r20
    637a:	95 1f       	adc	r25, r21
    637c:	02 96       	adiw	r24, 0x02	; 2
    637e:	e9 01       	movw	r28, r18
    6380:	99 83       	std	Y+1, r25	; 0x01
    6382:	88 83       	st	Y, r24
    6384:	82 81       	ldd	r24, Z+2	; 0x02
    6386:	93 81       	ldd	r25, Z+3	; 0x03
    6388:	9b 83       	std	Y+3, r25	; 0x03
    638a:	8a 83       	std	Y+2, r24	; 0x02
    638c:	e0 e0       	ldi	r30, 0x00	; 0
    638e:	f0 e0       	ldi	r31, 0x00	; 0
    6390:	12 96       	adiw	r26, 0x02	; 2
    6392:	8d 91       	ld	r24, X+
    6394:	9c 91       	ld	r25, X
    6396:	13 97       	sbiw	r26, 0x03	; 3
    6398:	00 97       	sbiw	r24, 0x00	; 0
    639a:	19 f0       	breq	.+6      	; 0x63a2 <free+0xd4>
    639c:	fd 01       	movw	r30, r26
    639e:	dc 01       	movw	r26, r24
    63a0:	f7 cf       	rjmp	.-18     	; 0x6390 <free+0xc2>
    63a2:	8d 91       	ld	r24, X+
    63a4:	9c 91       	ld	r25, X
    63a6:	11 97       	sbiw	r26, 0x01	; 1
    63a8:	9d 01       	movw	r18, r26
    63aa:	2e 5f       	subi	r18, 0xFE	; 254
    63ac:	3f 4f       	sbci	r19, 0xFF	; 255
    63ae:	82 0f       	add	r24, r18
    63b0:	93 1f       	adc	r25, r19
    63b2:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <__brkval>
    63b6:	30 91 43 05 	lds	r19, 0x0543	; 0x800543 <__brkval+0x1>
    63ba:	28 17       	cp	r18, r24
    63bc:	39 07       	cpc	r19, r25
    63be:	69 f4       	brne	.+26     	; 0x63da <free+0x10c>
    63c0:	30 97       	sbiw	r30, 0x00	; 0
    63c2:	29 f4       	brne	.+10     	; 0x63ce <free+0x100>
    63c4:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <__flp+0x1>
    63c8:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <__flp>
    63cc:	02 c0       	rjmp	.+4      	; 0x63d2 <free+0x104>
    63ce:	13 82       	std	Z+3, r1	; 0x03
    63d0:	12 82       	std	Z+2, r1	; 0x02
    63d2:	b0 93 43 05 	sts	0x0543, r27	; 0x800543 <__brkval+0x1>
    63d6:	a0 93 42 05 	sts	0x0542, r26	; 0x800542 <__brkval>
    63da:	df 91       	pop	r29
    63dc:	cf 91       	pop	r28
    63de:	08 95       	ret

000063e0 <realloc>:
    63e0:	6f 92       	push	r6
    63e2:	7f 92       	push	r7
    63e4:	8f 92       	push	r8
    63e6:	9f 92       	push	r9
    63e8:	af 92       	push	r10
    63ea:	bf 92       	push	r11
    63ec:	cf 92       	push	r12
    63ee:	df 92       	push	r13
    63f0:	ef 92       	push	r14
    63f2:	ff 92       	push	r15
    63f4:	0f 93       	push	r16
    63f6:	1f 93       	push	r17
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	81 f4       	brne	.+32     	; 0x6420 <realloc+0x40>
    6400:	cb 01       	movw	r24, r22
    6402:	df 91       	pop	r29
    6404:	cf 91       	pop	r28
    6406:	1f 91       	pop	r17
    6408:	0f 91       	pop	r16
    640a:	ff 90       	pop	r15
    640c:	ef 90       	pop	r14
    640e:	df 90       	pop	r13
    6410:	cf 90       	pop	r12
    6412:	bf 90       	pop	r11
    6414:	af 90       	pop	r10
    6416:	9f 90       	pop	r9
    6418:	8f 90       	pop	r8
    641a:	7f 90       	pop	r7
    641c:	6f 90       	pop	r6
    641e:	bf ce       	rjmp	.-642    	; 0x619e <malloc>
    6420:	fc 01       	movw	r30, r24
    6422:	e6 0f       	add	r30, r22
    6424:	f7 1f       	adc	r31, r23
    6426:	9c 01       	movw	r18, r24
    6428:	22 50       	subi	r18, 0x02	; 2
    642a:	31 09       	sbc	r19, r1
    642c:	e2 17       	cp	r30, r18
    642e:	f3 07       	cpc	r31, r19
    6430:	08 f4       	brcc	.+2      	; 0x6434 <realloc+0x54>
    6432:	a5 c0       	rjmp	.+330    	; 0x657e <realloc+0x19e>
    6434:	ec 01       	movw	r28, r24
    6436:	d9 01       	movw	r26, r18
    6438:	0d 91       	ld	r16, X+
    643a:	1c 91       	ld	r17, X
    643c:	11 97       	sbiw	r26, 0x01	; 1
    643e:	06 17       	cp	r16, r22
    6440:	17 07       	cpc	r17, r23
    6442:	a8 f0       	brcs	.+42     	; 0x646e <realloc+0x8e>
    6444:	05 30       	cpi	r16, 0x05	; 5
    6446:	11 05       	cpc	r17, r1
    6448:	08 f4       	brcc	.+2      	; 0x644c <realloc+0x6c>
    644a:	97 c0       	rjmp	.+302    	; 0x657a <realloc+0x19a>
    644c:	c8 01       	movw	r24, r16
    644e:	04 97       	sbiw	r24, 0x04	; 4
    6450:	86 17       	cp	r24, r22
    6452:	97 07       	cpc	r25, r23
    6454:	08 f4       	brcc	.+2      	; 0x6458 <realloc+0x78>
    6456:	91 c0       	rjmp	.+290    	; 0x657a <realloc+0x19a>
    6458:	02 50       	subi	r16, 0x02	; 2
    645a:	11 09       	sbc	r17, r1
    645c:	06 1b       	sub	r16, r22
    645e:	17 0b       	sbc	r17, r23
    6460:	01 93       	st	Z+, r16
    6462:	11 93       	st	Z+, r17
    6464:	6d 93       	st	X+, r22
    6466:	7c 93       	st	X, r23
    6468:	cf 01       	movw	r24, r30
    646a:	31 df       	rcall	.-414    	; 0x62ce <free>
    646c:	86 c0       	rjmp	.+268    	; 0x657a <realloc+0x19a>
    646e:	5b 01       	movw	r10, r22
    6470:	a0 1a       	sub	r10, r16
    6472:	b1 0a       	sbc	r11, r17
    6474:	4c 01       	movw	r8, r24
    6476:	80 0e       	add	r8, r16
    6478:	91 1e       	adc	r9, r17
    647a:	a0 91 44 05 	lds	r26, 0x0544	; 0x800544 <__flp>
    647e:	b0 91 45 05 	lds	r27, 0x0545	; 0x800545 <__flp+0x1>
    6482:	61 2c       	mov	r6, r1
    6484:	71 2c       	mov	r7, r1
    6486:	e1 2c       	mov	r14, r1
    6488:	f1 2c       	mov	r15, r1
    648a:	10 97       	sbiw	r26, 0x00	; 0
    648c:	09 f4       	brne	.+2      	; 0x6490 <realloc+0xb0>
    648e:	46 c0       	rjmp	.+140    	; 0x651c <realloc+0x13c>
    6490:	8d 91       	ld	r24, X+
    6492:	9c 91       	ld	r25, X
    6494:	11 97       	sbiw	r26, 0x01	; 1
    6496:	a8 15       	cp	r26, r8
    6498:	b9 05       	cpc	r27, r9
    649a:	b1 f5       	brne	.+108    	; 0x6508 <realloc+0x128>
    649c:	6c 01       	movw	r12, r24
    649e:	42 e0       	ldi	r20, 0x02	; 2
    64a0:	c4 0e       	add	r12, r20
    64a2:	d1 1c       	adc	r13, r1
    64a4:	ca 14       	cp	r12, r10
    64a6:	db 04       	cpc	r13, r11
    64a8:	78 f1       	brcs	.+94     	; 0x6508 <realloc+0x128>
    64aa:	4c 01       	movw	r8, r24
    64ac:	8a 18       	sub	r8, r10
    64ae:	9b 08       	sbc	r9, r11
    64b0:	64 01       	movw	r12, r8
    64b2:	42 e0       	ldi	r20, 0x02	; 2
    64b4:	c4 0e       	add	r12, r20
    64b6:	d1 1c       	adc	r13, r1
    64b8:	12 96       	adiw	r26, 0x02	; 2
    64ba:	bc 90       	ld	r11, X
    64bc:	12 97       	sbiw	r26, 0x02	; 2
    64be:	13 96       	adiw	r26, 0x03	; 3
    64c0:	ac 91       	ld	r26, X
    64c2:	b5 e0       	ldi	r27, 0x05	; 5
    64c4:	cb 16       	cp	r12, r27
    64c6:	d1 04       	cpc	r13, r1
    64c8:	40 f0       	brcs	.+16     	; 0x64da <realloc+0xfa>
    64ca:	b2 82       	std	Z+2, r11	; 0x02
    64cc:	a3 83       	std	Z+3, r26	; 0x03
    64ce:	91 82       	std	Z+1, r9	; 0x01
    64d0:	80 82       	st	Z, r8
    64d2:	d9 01       	movw	r26, r18
    64d4:	6d 93       	st	X+, r22
    64d6:	7c 93       	st	X, r23
    64d8:	09 c0       	rjmp	.+18     	; 0x64ec <realloc+0x10c>
    64da:	0e 5f       	subi	r16, 0xFE	; 254
    64dc:	1f 4f       	sbci	r17, 0xFF	; 255
    64de:	80 0f       	add	r24, r16
    64e0:	91 1f       	adc	r25, r17
    64e2:	f9 01       	movw	r30, r18
    64e4:	91 83       	std	Z+1, r25	; 0x01
    64e6:	80 83       	st	Z, r24
    64e8:	eb 2d       	mov	r30, r11
    64ea:	fa 2f       	mov	r31, r26
    64ec:	e1 14       	cp	r14, r1
    64ee:	f1 04       	cpc	r15, r1
    64f0:	31 f0       	breq	.+12     	; 0x64fe <realloc+0x11e>
    64f2:	d7 01       	movw	r26, r14
    64f4:	13 96       	adiw	r26, 0x03	; 3
    64f6:	fc 93       	st	X, r31
    64f8:	ee 93       	st	-X, r30
    64fa:	12 97       	sbiw	r26, 0x02	; 2
    64fc:	3e c0       	rjmp	.+124    	; 0x657a <realloc+0x19a>
    64fe:	f0 93 45 05 	sts	0x0545, r31	; 0x800545 <__flp+0x1>
    6502:	e0 93 44 05 	sts	0x0544, r30	; 0x800544 <__flp>
    6506:	39 c0       	rjmp	.+114    	; 0x657a <realloc+0x19a>
    6508:	68 16       	cp	r6, r24
    650a:	79 06       	cpc	r7, r25
    650c:	08 f4       	brcc	.+2      	; 0x6510 <realloc+0x130>
    650e:	3c 01       	movw	r6, r24
    6510:	7d 01       	movw	r14, r26
    6512:	12 96       	adiw	r26, 0x02	; 2
    6514:	0d 90       	ld	r0, X+
    6516:	bc 91       	ld	r27, X
    6518:	a0 2d       	mov	r26, r0
    651a:	b7 cf       	rjmp	.-146    	; 0x648a <realloc+0xaa>
    651c:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <__brkval>
    6520:	90 91 43 05 	lds	r25, 0x0543	; 0x800543 <__brkval+0x1>
    6524:	88 16       	cp	r8, r24
    6526:	99 06       	cpc	r9, r25
    6528:	e1 f4       	brne	.+56     	; 0x6562 <realloc+0x182>
    652a:	66 16       	cp	r6, r22
    652c:	77 06       	cpc	r7, r23
    652e:	c8 f4       	brcc	.+50     	; 0x6562 <realloc+0x182>
    6530:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6534:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6538:	00 97       	sbiw	r24, 0x00	; 0
    653a:	41 f4       	brne	.+16     	; 0x654c <realloc+0x16c>
    653c:	8d b7       	in	r24, 0x3d	; 61
    653e:	9e b7       	in	r25, 0x3e	; 62
    6540:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6544:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6548:	84 1b       	sub	r24, r20
    654a:	95 0b       	sbc	r25, r21
    654c:	e8 17       	cp	r30, r24
    654e:	f9 07       	cpc	r31, r25
    6550:	b0 f4       	brcc	.+44     	; 0x657e <realloc+0x19e>
    6552:	f0 93 43 05 	sts	0x0543, r31	; 0x800543 <__brkval+0x1>
    6556:	e0 93 42 05 	sts	0x0542, r30	; 0x800542 <__brkval>
    655a:	f9 01       	movw	r30, r18
    655c:	71 83       	std	Z+1, r23	; 0x01
    655e:	60 83       	st	Z, r22
    6560:	0c c0       	rjmp	.+24     	; 0x657a <realloc+0x19a>
    6562:	cb 01       	movw	r24, r22
    6564:	1c de       	rcall	.-968    	; 0x619e <malloc>
    6566:	7c 01       	movw	r14, r24
    6568:	00 97       	sbiw	r24, 0x00	; 0
    656a:	49 f0       	breq	.+18     	; 0x657e <realloc+0x19e>
    656c:	a8 01       	movw	r20, r16
    656e:	be 01       	movw	r22, r28
    6570:	23 d0       	rcall	.+70     	; 0x65b8 <memcpy>
    6572:	ce 01       	movw	r24, r28
    6574:	ac de       	rcall	.-680    	; 0x62ce <free>
    6576:	c7 01       	movw	r24, r14
    6578:	04 c0       	rjmp	.+8      	; 0x6582 <realloc+0x1a2>
    657a:	ce 01       	movw	r24, r28
    657c:	02 c0       	rjmp	.+4      	; 0x6582 <realloc+0x1a2>
    657e:	80 e0       	ldi	r24, 0x00	; 0
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	df 91       	pop	r29
    6584:	cf 91       	pop	r28
    6586:	1f 91       	pop	r17
    6588:	0f 91       	pop	r16
    658a:	ff 90       	pop	r15
    658c:	ef 90       	pop	r14
    658e:	df 90       	pop	r13
    6590:	cf 90       	pop	r12
    6592:	bf 90       	pop	r11
    6594:	af 90       	pop	r10
    6596:	9f 90       	pop	r9
    6598:	8f 90       	pop	r8
    659a:	7f 90       	pop	r7
    659c:	6f 90       	pop	r6
    659e:	08 95       	ret

000065a0 <abort>:
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	f8 94       	cli
    65a6:	73 c0       	rjmp	.+230    	; 0x668e <__do_global_dtors>

000065a8 <toupper>:
    65a8:	91 11       	cpse	r25, r1
    65aa:	08 95       	ret
    65ac:	81 56       	subi	r24, 0x61	; 97
    65ae:	8a 51       	subi	r24, 0x1A	; 26
    65b0:	08 f4       	brcc	.+2      	; 0x65b4 <toupper+0xc>
    65b2:	80 52       	subi	r24, 0x20	; 32
    65b4:	85 58       	subi	r24, 0x85	; 133
    65b6:	08 95       	ret

000065b8 <memcpy>:
    65b8:	fb 01       	movw	r30, r22
    65ba:	dc 01       	movw	r26, r24
    65bc:	02 c0       	rjmp	.+4      	; 0x65c2 <memcpy+0xa>
    65be:	01 90       	ld	r0, Z+
    65c0:	0d 92       	st	X+, r0
    65c2:	41 50       	subi	r20, 0x01	; 1
    65c4:	50 40       	sbci	r21, 0x00	; 0
    65c6:	d8 f7       	brcc	.-10     	; 0x65be <memcpy+0x6>
    65c8:	08 95       	ret

000065ca <memset>:
    65ca:	dc 01       	movw	r26, r24
    65cc:	01 c0       	rjmp	.+2      	; 0x65d0 <memset+0x6>
    65ce:	6d 93       	st	X+, r22
    65d0:	41 50       	subi	r20, 0x01	; 1
    65d2:	50 40       	sbci	r21, 0x00	; 0
    65d4:	e0 f7       	brcc	.-8      	; 0x65ce <memset+0x4>
    65d6:	08 95       	ret

000065d8 <strcmp>:
    65d8:	fb 01       	movw	r30, r22
    65da:	dc 01       	movw	r26, r24
    65dc:	8d 91       	ld	r24, X+
    65de:	01 90       	ld	r0, Z+
    65e0:	80 19       	sub	r24, r0
    65e2:	01 10       	cpse	r0, r1
    65e4:	d9 f3       	breq	.-10     	; 0x65dc <strcmp+0x4>
    65e6:	99 0b       	sbc	r25, r25
    65e8:	08 95       	ret

000065ea <strcpy>:
    65ea:	fb 01       	movw	r30, r22
    65ec:	dc 01       	movw	r26, r24
    65ee:	01 90       	ld	r0, Z+
    65f0:	0d 92       	st	X+, r0
    65f2:	00 20       	and	r0, r0
    65f4:	e1 f7       	brne	.-8      	; 0x65ee <strcpy+0x4>
    65f6:	08 95       	ret

000065f8 <strlen>:
    65f8:	fc 01       	movw	r30, r24
    65fa:	01 90       	ld	r0, Z+
    65fc:	00 20       	and	r0, r0
    65fe:	e9 f7       	brne	.-6      	; 0x65fa <strlen+0x2>
    6600:	80 95       	com	r24
    6602:	90 95       	com	r25
    6604:	8e 0f       	add	r24, r30
    6606:	9f 1f       	adc	r25, r31
    6608:	08 95       	ret

0000660a <strncpy>:
    660a:	fb 01       	movw	r30, r22
    660c:	dc 01       	movw	r26, r24
    660e:	41 50       	subi	r20, 0x01	; 1
    6610:	50 40       	sbci	r21, 0x00	; 0
    6612:	48 f0       	brcs	.+18     	; 0x6626 <strncpy+0x1c>
    6614:	01 90       	ld	r0, Z+
    6616:	0d 92       	st	X+, r0
    6618:	00 20       	and	r0, r0
    661a:	c9 f7       	brne	.-14     	; 0x660e <strncpy+0x4>
    661c:	01 c0       	rjmp	.+2      	; 0x6620 <strncpy+0x16>
    661e:	1d 92       	st	X+, r1
    6620:	41 50       	subi	r20, 0x01	; 1
    6622:	50 40       	sbci	r21, 0x00	; 0
    6624:	e0 f7       	brcc	.-8      	; 0x661e <strncpy+0x14>
    6626:	08 95       	ret

00006628 <utoa>:
    6628:	45 32       	cpi	r20, 0x25	; 37
    662a:	51 05       	cpc	r21, r1
    662c:	18 f4       	brcc	.+6      	; 0x6634 <utoa+0xc>
    662e:	42 30       	cpi	r20, 0x02	; 2
    6630:	08 f0       	brcs	.+2      	; 0x6634 <utoa+0xc>
    6632:	04 c0       	rjmp	.+8      	; 0x663c <__utoa_ncheck>
    6634:	fb 01       	movw	r30, r22
    6636:	10 82       	st	Z, r1
    6638:	cb 01       	movw	r24, r22
    663a:	08 95       	ret

0000663c <__utoa_ncheck>:
    663c:	bb 27       	eor	r27, r27

0000663e <__utoa_common>:
    663e:	fb 01       	movw	r30, r22
    6640:	55 27       	eor	r21, r21
    6642:	aa 27       	eor	r26, r26
    6644:	88 0f       	add	r24, r24
    6646:	99 1f       	adc	r25, r25
    6648:	aa 1f       	adc	r26, r26
    664a:	a4 17       	cp	r26, r20
    664c:	10 f0       	brcs	.+4      	; 0x6652 <__utoa_common+0x14>
    664e:	a4 1b       	sub	r26, r20
    6650:	83 95       	inc	r24
    6652:	50 51       	subi	r21, 0x10	; 16
    6654:	b9 f7       	brne	.-18     	; 0x6644 <__utoa_common+0x6>
    6656:	a0 5d       	subi	r26, 0xD0	; 208
    6658:	aa 33       	cpi	r26, 0x3A	; 58
    665a:	08 f0       	brcs	.+2      	; 0x665e <__utoa_common+0x20>
    665c:	a9 5d       	subi	r26, 0xD9	; 217
    665e:	a1 93       	st	Z+, r26
    6660:	00 97       	sbiw	r24, 0x00	; 0
    6662:	79 f7       	brne	.-34     	; 0x6642 <__utoa_common+0x4>
    6664:	b1 11       	cpse	r27, r1
    6666:	b1 93       	st	Z+, r27
    6668:	11 92       	st	Z+, r1
    666a:	cb 01       	movw	r24, r22
    666c:	00 c0       	rjmp	.+0      	; 0x666e <strrev>

0000666e <strrev>:
    666e:	dc 01       	movw	r26, r24
    6670:	fc 01       	movw	r30, r24
    6672:	67 2f       	mov	r22, r23
    6674:	71 91       	ld	r23, Z+
    6676:	77 23       	and	r23, r23
    6678:	e1 f7       	brne	.-8      	; 0x6672 <strrev+0x4>
    667a:	32 97       	sbiw	r30, 0x02	; 2
    667c:	04 c0       	rjmp	.+8      	; 0x6686 <strrev+0x18>
    667e:	7c 91       	ld	r23, X
    6680:	6d 93       	st	X+, r22
    6682:	70 83       	st	Z, r23
    6684:	62 91       	ld	r22, -Z
    6686:	ae 17       	cp	r26, r30
    6688:	bf 07       	cpc	r27, r31
    668a:	c8 f3       	brcs	.-14     	; 0x667e <strrev+0x10>
    668c:	08 95       	ret

0000668e <__do_global_dtors>:
    668e:	11 e0       	ldi	r17, 0x01	; 1
    6690:	c7 e1       	ldi	r28, 0x17	; 23
    6692:	d1 e0       	ldi	r29, 0x01	; 1
    6694:	00 e0       	ldi	r16, 0x00	; 0
    6696:	05 c0       	rjmp	.+10     	; 0x66a2 <__do_global_dtors+0x14>
    6698:	80 2f       	mov	r24, r16
    669a:	fe 01       	movw	r30, r28
    669c:	5f dd       	rcall	.-1346   	; 0x615c <__tablejump2__>
    669e:	21 96       	adiw	r28, 0x01	; 1
    66a0:	01 1d       	adc	r16, r1
    66a2:	c8 31       	cpi	r28, 0x18	; 24
    66a4:	d1 07       	cpc	r29, r17
    66a6:	80 e0       	ldi	r24, 0x00	; 0
    66a8:	08 07       	cpc	r16, r24
    66aa:	b1 f7       	brne	.-20     	; 0x6698 <__do_global_dtors+0xa>
    66ac:	f8 94       	cli

000066ae <__stop_program>:
    66ae:	ff cf       	rjmp	.-2      	; 0x66ae <__stop_program>
