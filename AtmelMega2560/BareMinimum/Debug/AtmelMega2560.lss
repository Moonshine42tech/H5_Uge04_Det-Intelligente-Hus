
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800200  0000682e  000068c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000682e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  00800336  00800336  000069f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000069f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c90  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018a40  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004114  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077ea  00000000  00000000  0002424c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000030b4  00000000  00000000  0002ba38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058ed  00000000  00000000  0002eaec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b703  00000000  00000000  000343d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c10  00000000  00000000  0003fadc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a5 2c 	jmp	0x594a	; 0x594a <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a5 2b 	jmp	0x574a	; 0x574a <__vector_25>
      68:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0f 24 	jmp	0x481e	; 0x481e <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e0 2d       	mov	r30, r0
      e6:	e3 2d       	mov	r30, r3
      e8:	d2 2d       	mov	r29, r2
      ea:	d6 2d       	mov	r29, r6
      ec:	dc 2d       	mov	r29, r12
      ee:	1a 2e       	mov	r1, r26
      f0:	e7 2d       	mov	r30, r7
      f2:	eb 2d       	mov	r30, r11
      f4:	f1 2d       	mov	r31, r1
      f6:	f5 2d       	mov	r31, r5
      f8:	f9 2d       	mov	r31, r9
      fa:	ff 2d       	mov	r31, r15
      fc:	03 2e       	mov	r0, r19
      fe:	07 2e       	mov	r0, r23
     100:	1a 2e       	mov	r1, r26
     102:	0d 2e       	mov	r0, r29
     104:	11 2e       	mov	r1, r17
     106:	15 2e       	mov	r1, r21

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	08 08       	sbc	r0, r8
     22a:	7d 28       	or	r7, r13
     22c:	0d 2c       	mov	r0, r13

0000022e <__ctors_end>:
     22e:	14 08       	sbc	r1, r4

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	ee e2       	ldi	r30, 0x2E	; 46
     248:	f8 e6       	ldi	r31, 0x68	; 104
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	a6 33       	cpi	r26, 0x36	; 54
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	a6 e3       	ldi	r26, 0x36	; 54
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a0 39       	cpi	r26, 0x90	; 144
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 3b 2c 	call	0x5876	; 0x5876 <main>
     28e:	0c 94 06 34 	jmp	0x680c	; 0x680c <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	1f 92       	push	r1
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	fc 01       	movw	r30, r24
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <_ZN6StringpLEc+0x6>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	6b 81       	ldd	r22, Y+3	; 0x03
     2ce:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6String6concatEc>
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <_ZN6StringpLEi>:
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZN6StringpLEi+0x6>
     2e8:	1f 92       	push	r1
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	7c 83       	std	Y+4, r23	; 0x04
     2f4:	6b 83       	std	Y+3, r22	; 0x03
     2f6:	2b 81       	ldd	r18, Y+3	; 0x03
     2f8:	3c 81       	ldd	r19, Y+4	; 0x04
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	b9 01       	movw	r22, r18
     300:	0e 94 36 30 	call	0x606c	; 0x606c <_ZN6String6concatEi>
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <_ZNK6StringeqERKS_+0x6>
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	7c 83       	std	Y+4, r23	; 0x04
     328:	6b 83       	std	Y+3, r22	; 0x03
     32a:	2b 81       	ldd	r18, Y+3	; 0x03
     32c:	3c 81       	ldd	r19, Y+4	; 0x04
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	b9 01       	movw	r22, r18
     334:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZNK6String6equalsERKS_>
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <_ZNK6StringeqEPKc>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <_ZNK6StringeqEPKc+0x6>
     34c:	1f 92       	push	r1
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	7c 83       	std	Y+4, r23	; 0x04
     358:	6b 83       	std	Y+3, r22	; 0x03
     35a:	2b 81       	ldd	r18, Y+3	; 0x03
     35c:	3c 81       	ldd	r19, Y+4	; 0x04
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	b9 01       	movw	r22, r18
     364:	0e 94 a3 30 	call	0x6146	; 0x6146 <_ZNK6String6equalsEPKc>
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZNK6String9substringEj+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZNK6String9substringEj+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	7c 83       	std	Y+4, r23	; 0x04
     388:	6b 83       	std	Y+3, r22	; 0x03
     38a:	5e 83       	std	Y+6, r21	; 0x06
     38c:	4d 83       	std	Y+5, r20	; 0x05
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	fc 01       	movw	r30, r24
     394:	24 81       	ldd	r18, Z+4	; 0x04
     396:	35 81       	ldd	r19, Z+5	; 0x05
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	4d 81       	ldd	r20, Y+5	; 0x05
     39e:	5e 81       	ldd	r21, Y+6	; 0x06
     3a0:	6b 81       	ldd	r22, Y+3	; 0x03
     3a2:	7c 81       	ldd	r23, Y+4	; 0x04
     3a4:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZNK6String9substringEjj>
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	26 96       	adiw	r28, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <_ZN5Print5writeEPKc+0xa>
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	7c 83       	std	Y+4, r23	; 0x04
     3d4:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	9c 81       	ldd	r25, Y+4	; 0x04
     3da:	89 2b       	or	r24, r25
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <_ZN5Print5writeEPKc+0x26>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	15 c0       	rjmp	.+42     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
      return write((const uint8_t *)str, strlen(str));
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	02 96       	adiw	r24, 0x02	; 2
     3f0:	fc 01       	movw	r30, r24
     3f2:	00 81       	ld	r16, Z
     3f4:	11 81       	ldd	r17, Z+1	; 0x01
     3f6:	8b 81       	ldd	r24, Y+3	; 0x03
     3f8:	9c 81       	ldd	r25, Y+4	; 0x04
     3fa:	0e 94 b1 33 	call	0x6762	; 0x6762 <strlen>
     3fe:	ac 01       	movw	r20, r24
     400:	2b 81       	ldd	r18, Y+3	; 0x03
     402:	3c 81       	ldd	r19, Y+4	; 0x04
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	b9 01       	movw	r22, r18
     40a:	f8 01       	movw	r30, r16
     40c:	19 95       	eicall
    }
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	00 d0       	rcall	.+0      	; 0x426 <_ZN14HardwareSerial5beginEm+0x6>
     426:	00 d0       	rcall	.+0      	; 0x428 <_ZN14HardwareSerial5beginEm+0x8>
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	4b 83       	std	Y+3, r20	; 0x03
     432:	5c 83       	std	Y+4, r21	; 0x04
     434:	6d 83       	std	Y+5, r22	; 0x05
     436:	7e 83       	std	Y+6, r23	; 0x06
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	ad 81       	ldd	r26, Y+5	; 0x05
     43e:	be 81       	ldd	r27, Y+6	; 0x06
     440:	e9 81       	ldd	r30, Y+1	; 0x01
     442:	fa 81       	ldd	r31, Y+2	; 0x02
     444:	26 e0       	ldi	r18, 0x06	; 6
     446:	ac 01       	movw	r20, r24
     448:	bd 01       	movw	r22, r26
     44a:	cf 01       	movw	r24, r30
     44c:	0e 94 42 2b 	call	0x5684	; 0x5684 <_ZN14HardwareSerial5beginEmh>
     450:	00 00       	nop
     452:	26 96       	adiw	r28, 0x06	; 6
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	1f 92       	push	r1
     46a:	1f 92       	push	r1
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	1f 92       	push	r1
     486:	1f 92       	push	r1
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	2f eb       	ldi	r18, 0xBF	; 191
     492:	32 e0       	ldi	r19, 0x02	; 2
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	fc 01       	movw	r30, r24
     49a:	31 83       	std	Z+1, r19	; 0x01
     49c:	20 83       	st	Z, r18
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	89 2b       	or	r24, r25
     4a4:	21 f0       	breq	.+8      	; 0x4ae <_ZN15Adafruit_SensorD1Ev+0x2e>
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZdlPv>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <_ZN15Adafruit_SensorD0Ev>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	1f 92       	push	r1
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	d9 df       	rcall	.-78     	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZdlPv>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     4f0:	00 00       	nop
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	00 d0       	rcall	.+0      	; 0x504 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	7c 83       	std	Y+4, r23	; 0x04
     510:	6b 83       	std	Y+3, r22	; 0x03
     512:	2f eb       	ldi	r18, 0xBF	; 191
     514:	32 e0       	ldi	r19, 0x02	; 2
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	31 83       	std	Z+1, r19	; 0x01
     51e:	20 83       	st	Z, r18
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	fc 01       	movw	r30, r24
     526:	22 81       	ldd	r18, Z+2	; 0x02
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	22 83       	std	Z+2, r18	; 0x02
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	00 d0       	rcall	.+0      	; 0x546 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     546:	1f 92       	push	r1
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	7c 83       	std	Y+4, r23	; 0x04
     552:	6b 83       	std	Y+3, r22	; 0x03
     554:	2b 81       	ldd	r18, Y+3	; 0x03
     556:	3c 81       	ldd	r19, Y+4	; 0x04
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	b9 01       	movw	r22, r18
     55e:	cf df       	rcall	.-98     	; 0x4fe <_ZN15Adafruit_SensorC1ERKS_>
     560:	2b ed       	ldi	r18, 0xDB	; 219
     562:	32 e0       	ldi	r19, 0x02	; 2
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	9a 81       	ldd	r25, Y+2	; 0x02
     568:	fc 01       	movw	r30, r24
     56a:	31 83       	std	Z+1, r19	; 0x01
     56c:	20 83       	st	Z, r18
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	23 81       	ldd	r18, Z+3	; 0x03
     576:	34 81       	ldd	r19, Z+4	; 0x04
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	fc 01       	movw	r30, r24
     57e:	34 83       	std	Z+4, r19	; 0x04
     580:	23 83       	std	Z+3, r18	; 0x03
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	fc 01       	movw	r30, r24
     588:	85 81       	ldd	r24, Z+5	; 0x05
     58a:	96 81       	ldd	r25, Z+6	; 0x06
     58c:	a7 81       	ldd	r26, Z+7	; 0x07
     58e:	b0 85       	ldd	r27, Z+8	; 0x08
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	3a 81       	ldd	r19, Y+2	; 0x02
     594:	f9 01       	movw	r30, r18
     596:	85 83       	std	Z+5, r24	; 0x05
     598:	96 83       	std	Z+6, r25	; 0x06
     59a:	a7 83       	std	Z+7, r26	; 0x07
     59c:	b0 87       	std	Z+8, r27	; 0x08
     59e:	00 00       	nop
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <_ZN11DHT_Unified11temperatureEv+0x6>
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	7c 83       	std	Y+4, r23	; 0x04
     5c0:	6b 83       	std	Y+3, r22	; 0x03
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	9c 81       	ldd	r25, Y+4	; 0x04
     5c6:	9c 01       	movw	r18, r24
     5c8:	2c 5e       	subi	r18, 0xEC	; 236
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	b9 01       	movw	r22, r18
     5d2:	b6 df       	rcall	.-148    	; 0x540 <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     5ec:	1f 92       	push	r1
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	89 83       	std	Y+1, r24	; 0x01
     5f6:	7c 83       	std	Y+4, r23	; 0x04
     5f8:	6b 83       	std	Y+3, r22	; 0x03
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	b9 01       	movw	r22, r18
     604:	7c df       	rcall	.-264    	; 0x4fe <_ZN15Adafruit_SensorC1ERKS_>
     606:	2d ec       	ldi	r18, 0xCD	; 205
     608:	32 e0       	ldi	r19, 0x02	; 2
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	fc 01       	movw	r30, r24
     610:	31 83       	std	Z+1, r19	; 0x01
     612:	20 83       	st	Z, r18
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	23 81       	ldd	r18, Z+3	; 0x03
     61c:	34 81       	ldd	r19, Z+4	; 0x04
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	fc 01       	movw	r30, r24
     624:	34 83       	std	Z+4, r19	; 0x04
     626:	23 83       	std	Z+3, r18	; 0x03
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	fc 01       	movw	r30, r24
     62e:	85 81       	ldd	r24, Z+5	; 0x05
     630:	96 81       	ldd	r25, Z+6	; 0x06
     632:	a7 81       	ldd	r26, Z+7	; 0x07
     634:	b0 85       	ldd	r27, Z+8	; 0x08
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	f9 01       	movw	r30, r18
     63c:	85 83       	std	Z+5, r24	; 0x05
     63e:	96 83       	std	Z+6, r25	; 0x06
     640:	a7 83       	std	Z+7, r26	; 0x07
     642:	b0 87       	std	Z+8, r27	; 0x08
     644:	00 00       	nop
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	00 d0       	rcall	.+0      	; 0x65a <_ZN11DHT_Unified8humidityEv+0x6>
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	7c 83       	std	Y+4, r23	; 0x04
     666:	6b 83       	std	Y+3, r22	; 0x03
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	9c 01       	movw	r18, r24
     66e:	23 5e       	subi	r18, 0xE3	; 227
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	b9 01       	movw	r22, r18
     678:	b6 df       	rcall	.-148    	; 0x5e6 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <_ZN7TwoWire5writeEi+0x6>
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	7c 83       	std	Y+4, r23	; 0x04
     69e:	6b 83       	std	Y+3, r22	; 0x03
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 81       	ld	r18, Z
     6ae:	31 81       	ldd	r19, Z+1	; 0x01
     6b0:	4b 81       	ldd	r20, Y+3	; 0x03
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	64 2f       	mov	r22, r20
     6b8:	f9 01       	movw	r30, r18
     6ba:	19 95       	eicall
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	eb 97       	sbiw	r28, 0x3b	; 59
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	55 e2       	ldi	r21, 0x25	; 37
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	86 ee       	ldi	r24, 0xE6	; 230
     6e8:	94 e0       	ldi	r25, 0x04	; 4
     6ea:	9a de       	rcall	.-716    	; 0x420 <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     6ec:	8a ed       	ldi	r24, 0xDA	; 218
     6ee:	94 e0       	ldi	r25, 0x04	; 4
     6f0:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     6f4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6f8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     702:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     706:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     710:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     714:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     71e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     722:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	b4 d2       	rcall	.+1384   	; 0xc98 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     730:	86 e3       	ldi	r24, 0x36	; 54
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     738:	ce 01       	movw	r24, r28
     73a:	0b 96       	adiw	r24, 0x0b	; 11
     73c:	66 e3       	ldi	r22, 0x36	; 54
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	36 df       	rcall	.-404    	; 0x5ae <_ZN11DHT_Unified11temperatureEv>
     742:	9e 01       	movw	r18, r28
     744:	2c 5e       	subi	r18, 0xEC	; 236
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	ce 01       	movw	r24, r28
     74a:	0b 96       	adiw	r24, 0x0b	; 11
     74c:	b9 01       	movw	r22, r18
     74e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     752:	ce 01       	movw	r24, r28
     754:	0b 96       	adiw	r24, 0x0b	; 11
     756:	f6 d3       	rcall	.+2028   	; 0xf44 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     758:	ce 01       	movw	r24, r28
     75a:	02 96       	adiw	r24, 0x02	; 2
     75c:	66 e3       	ldi	r22, 0x36	; 54
     75e:	73 e0       	ldi	r23, 0x03	; 3
     760:	79 df       	rcall	.-270    	; 0x654 <_ZN11DHT_Unified8humidityEv>
     762:	9e 01       	movw	r18, r28
     764:	2c 5e       	subi	r18, 0xEC	; 236
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	ce 01       	movw	r24, r28
     76a:	02 96       	adiw	r24, 0x02	; 2
     76c:	b9 01       	movw	r22, r18
     76e:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     772:	ce 01       	movw	r24, r28
     774:	02 96       	adiw	r24, 0x02	; 2
     776:	19 d4       	rcall	.+2098   	; 0xfaa <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     778:	88 ad       	ldd	r24, Y+56	; 0x38
     77a:	99 ad       	ldd	r25, Y+57	; 0x39
     77c:	aa ad       	ldd	r26, Y+58	; 0x3a
     77e:	bb ad       	ldd	r27, Y+59	; 0x3b
     780:	28 ee       	ldi	r18, 0xE8	; 232
     782:	33 e0       	ldi	r19, 0x03	; 3
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 47 31 	call	0x628e	; 0x628e <__divmodsi4>
     790:	da 01       	movw	r26, r20
     792:	c9 01       	movw	r24, r18
     794:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <delayMS>
     798:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <delayMS+0x1>
     79c:	a0 93 5e 03 	sts	0x035E, r26	; 0x80035e <delayMS+0x2>
     7a0:	b0 93 5f 03 	sts	0x035F, r27	; 0x80035f <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     7a4:	86 ee       	ldi	r24, 0xE6	; 230
     7a6:	94 e0       	ldi	r25, 0x04	; 4
     7a8:	5d de       	rcall	.-838    	; 0x464 <_ZN14HardwareSerialcvbEv>
     7aa:	98 2f       	mov	r25, r24
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	89 27       	eor	r24, r25
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <setup+0xec>
     7b4:	f7 cf       	rjmp	.-18     	; 0x7a4 <setup+0xda>
  SPI.begin();         // Init SPI bus
     7b6:	0e 94 07 21 	call	0x420e	; 0x420e <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     7ba:	86 e6       	ldi	r24, 0x66	; 102
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7c2:	19 82       	std	Y+1, r1	; 0x01
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	86 30       	cpi	r24, 0x06	; 6
     7c8:	60 f4       	brcc	.+24     	; 0x7e2 <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	8c 58       	subi	r24, 0x8C	; 140
     7d2:	9c 4f       	sbci	r25, 0xFC	; 252
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	f1 cf       	rjmp	.-30     	; 0x7c4 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     7e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     7e6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     7ea:	bc 01       	movw	r22, r24
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN5Servo5writeEi>

#pragma endregion Servo Motor
 
}
     800:	00 00       	nop
     802:	eb 96       	adiw	r28, 0x3b	; 59
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <loop>:

void loop()
{
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	c3 54       	subi	r28, 0x43	; 67
     820:	d1 09       	sbc	r29, r1
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     82c:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <delayMS>
     830:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <delayMS+0x1>
     834:	a0 91 5e 03 	lds	r26, 0x035E	; 0x80035e <delayMS+0x2>
     838:	b0 91 5f 03 	lds	r27, 0x035F	; 0x80035f <delayMS+0x3>
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     844:	ce 01       	movw	r24, r28
     846:	41 96       	adiw	r24, 0x11	; 17
     848:	66 e3       	ldi	r22, 0x36	; 54
     84a:	73 e0       	ldi	r23, 0x03	; 3
     84c:	b0 de       	rcall	.-672    	; 0x5ae <_ZN11DHT_Unified11temperatureEv>
     84e:	9e 01       	movw	r18, r28
     850:	26 5e       	subi	r18, 0xE6	; 230
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	ce 01       	movw	r24, r28
     856:	41 96       	adiw	r24, 0x11	; 17
     858:	b9 01       	movw	r22, r18
     85a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     85e:	ce 01       	movw	r24, r28
     860:	41 96       	adiw	r24, 0x11	; 17
     862:	70 d3       	rcall	.+1760   	; 0xf44 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     864:	8e a5       	ldd	r24, Y+46	; 0x2e
     866:	9f a5       	ldd	r25, Y+47	; 0x2f
     868:	a8 a9       	ldd	r26, Y+48	; 0x30
     86a:	b9 a9       	ldd	r27, Y+49	; 0x31
     86c:	11 e0       	ldi	r17, 0x01	; 1
     86e:	9c 01       	movw	r18, r24
     870:	ad 01       	movw	r20, r26
     872:	bc 01       	movw	r22, r24
     874:	cd 01       	movw	r24, r26
     876:	0e 94 34 2a 	call	0x5468	; 0x5468 <__unordsf2>
     87a:	88 23       	and	r24, r24
     87c:	09 f4       	brne	.+2      	; 0x880 <loop+0x6c>
     87e:	10 e0       	ldi	r17, 0x00	; 0
     880:	11 23       	and	r17, r17
     882:	29 f0       	breq	.+10     	; 0x88e <loop+0x7a>
	{
		DhtSencorTemp = 0;
     884:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <DhtSencorTemp+0x1>
     888:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <DhtSencorTemp>
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <loop+0x96>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     88e:	8e a5       	ldd	r24, Y+46	; 0x2e
     890:	9f a5       	ldd	r25, Y+47	; 0x2f
     892:	a8 a9       	ldd	r26, Y+48	; 0x30
     894:	b9 a9       	ldd	r27, Y+49	; 0x31
     896:	bc 01       	movw	r22, r24
     898:	cd 01       	movw	r24, r26
     89a:	0e 94 ee 28 	call	0x51dc	; 0x51dc <__fixsfsi>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <DhtSencorTemp+0x1>
     8a6:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     8aa:	ce 01       	movw	r24, r28
     8ac:	08 96       	adiw	r24, 0x08	; 8
     8ae:	66 e3       	ldi	r22, 0x36	; 54
     8b0:	73 e0       	ldi	r23, 0x03	; 3
     8b2:	d0 de       	rcall	.-608    	; 0x654 <_ZN11DHT_Unified8humidityEv>
     8b4:	9e 01       	movw	r18, r28
     8b6:	26 5e       	subi	r18, 0xE6	; 230
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	08 96       	adiw	r24, 0x08	; 8
     8be:	b9 01       	movw	r22, r18
     8c0:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     8c4:	ce 01       	movw	r24, r28
     8c6:	08 96       	adiw	r24, 0x08	; 8
     8c8:	70 d3       	rcall	.+1760   	; 0xfaa <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     8ca:	8e a5       	ldd	r24, Y+46	; 0x2e
     8cc:	9f a5       	ldd	r25, Y+47	; 0x2f
     8ce:	a8 a9       	ldd	r26, Y+48	; 0x30
     8d0:	b9 a9       	ldd	r27, Y+49	; 0x31
     8d2:	11 e0       	ldi	r17, 0x01	; 1
     8d4:	9c 01       	movw	r18, r24
     8d6:	ad 01       	movw	r20, r26
     8d8:	bc 01       	movw	r22, r24
     8da:	cd 01       	movw	r24, r26
     8dc:	0e 94 34 2a 	call	0x5468	; 0x5468 <__unordsf2>
     8e0:	88 23       	and	r24, r24
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <loop+0xd2>
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	11 23       	and	r17, r17
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <loop+0xe0>
	{
		DhtSencorHum = 0;
     8ea:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <DhtSencorHum+0x1>
     8ee:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <DhtSencorHum>
     8f2:	0e c0       	rjmp	.+28     	; 0x910 <loop+0xfc>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     8f4:	8e a5       	ldd	r24, Y+46	; 0x2e
     8f6:	9f a5       	ldd	r25, Y+47	; 0x2f
     8f8:	a8 a9       	ldd	r26, Y+48	; 0x30
     8fa:	b9 a9       	ldd	r27, Y+49	; 0x31
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 ee 28 	call	0x51dc	; 0x51dc <__fixsfsi>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <DhtSencorHum+0x1>
     90c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <DhtSencorHum>
	}
	
#pragma endregion DHT Humidity

	// Alarm the user if conditions are critical
	if (DhtSencorTemp > 27 || DhtSencorHum > 70)
     910:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <DhtSencorTemp>
     914:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <DhtSencorTemp+0x1>
     918:	4c 97       	sbiw	r24, 0x1c	; 28
     91a:	3c f4       	brge	.+14     	; 0x92a <loop+0x116>
     91c:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <DhtSencorHum>
     920:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <DhtSencorHum+0x1>
     924:	87 34       	cpi	r24, 0x47	; 71
     926:	91 05       	cpc	r25, r1
     928:	e4 f0       	brlt	.+56     	; 0x962 <loop+0x14e>
	{
		if (DhtSencorTemp > 27)
     92a:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <DhtSencorTemp>
     92e:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <DhtSencorTemp+0x1>
     932:	4c 97       	sbiw	r24, 0x1c	; 28
     934:	34 f0       	brlt	.+12     	; 0x942 <loop+0x12e>
		{
			Serial.println("ALARM: The temperature is to high");
     936:	6e e0       	ldi	r22, 0x0E	; 14
     938:	72 e0       	ldi	r23, 0x02	; 2
     93a:	86 ee       	ldi	r24, 0xE6	; 230
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	0e 94 94 2c 	call	0x5928	; 0x5928 <_ZN5Print7printlnEPKc>
		}
		if (DhtSencorHum > 70)
     942:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <DhtSencorHum>
     946:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <DhtSencorHum+0x1>
     94a:	87 34       	cpi	r24, 0x47	; 71
     94c:	91 05       	cpc	r25, r1
     94e:	34 f0       	brlt	.+12     	; 0x95c <loop+0x148>
		{
			Serial.println("ALARM: Humidity levels is to high");
     950:	60 e3       	ldi	r22, 0x30	; 48
     952:	72 e0       	ldi	r23, 0x02	; 2
     954:	86 ee       	ldi	r24, 0xE6	; 230
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	0e 94 94 2c 	call	0x5928	; 0x5928 <_ZN5Print7printlnEPKc>
		}
		makeBipSound(3); // ALARM sound
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	20 d2       	rcall	.+1088   	; 0xda2 <_Z12makeBipSoundi>
#pragma endregion DHT

	// Send values to MKR WIFI 110 board
#pragma region Master Writer/Slave Receiver
  
  Wire.beginTransmission(4);		// transmit to device #4
     962:	64 e0       	ldi	r22, 0x04	; 4
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	8a ed       	ldi	r24, 0xDA	; 218
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     96e:	62 e5       	ldi	r22, 0x52	; 82
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	8a ed       	ldi	r24, 0xDA	; 218
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	23 dd       	rcall	.-1466   	; 0x3be <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     978:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <DhtSencorTemp>
     97c:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <DhtSencorTemp+0x1>
     980:	bc 01       	movw	r22, r24
     982:	8a ed       	ldi	r24, 0xDA	; 218
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	82 de       	rcall	.-764    	; 0x68c <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     988:	8a ed       	ldi	r24, 0xDA	; 218
     98a:	94 e0       	ldi	r25, 0x04	; 4
     98c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     990:	64 e0       	ldi	r22, 0x04	; 4
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	8a ed       	ldi	r24, 0xDA	; 218
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");				// sends some bytes
     99c:	69 e5       	ldi	r22, 0x59	; 89
     99e:	72 e0       	ldi	r23, 0x02	; 2
     9a0:	8a ed       	ldi	r24, 0xDA	; 218
     9a2:	94 e0       	ldi	r25, 0x04	; 4
  Wire.write(DhtSencorHum);		    // sends some bytes
     9a4:	0c dd       	rcall	.-1512   	; 0x3be <_ZN5Print5writeEPKc>
     9a6:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <DhtSencorHum>
     9aa:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <DhtSencorHum+0x1>
     9ae:	bc 01       	movw	r22, r24
     9b0:	8a ed       	ldi	r24, 0xDA	; 218
     9b2:	94 e0       	ldi	r25, 0x04	; 4
     9b4:	6b de       	rcall	.-810    	; 0x68c <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     9b6:	8a ed       	ldi	r24, 0xDA	; 218
     9b8:	94 e0       	ldi	r25, 0x04	; 4
     9ba:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4
     9be:	47 e0       	ldi	r20, 0x07	; 7
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	64 e0       	ldi	r22, 0x04	; 4
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	8a ed       	ldi	r24, 0xDA	; 218
     9c8:	94 e0       	ldi	r25, 0x04	; 4
     9ca:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_ZN7TwoWire11requestFromEii>

	String keyword =  "";
     9ce:	ce 01       	movw	r24, r28
     9d0:	ce 96       	adiw	r24, 0x3e	; 62
     9d2:	6f e5       	ldi	r22, 0x5F	; 95
     9d4:	72 e0       	ldi	r23, 0x02	; 2
     9d6:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN6StringC1EPKc>
	// slave may send less than requested
	while (Wire.available()) 
     9da:	8a ed       	ldi	r24, 0xDA	; 218
     9dc:	94 e0       	ldi	r25, 0x04	; 4
     9de:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_ZN7TwoWire9availableEv>
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	89 2b       	or	r24, r25
     9e6:	09 f4       	brne	.+2      	; 0x9ea <loop+0x1d6>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	22 23       	and	r18, r18
	{ 
		char request_c = Wire.read();		// receive a byte as character
     9ec:	51 f0       	breq	.+20     	; 0xa02 <loop+0x1ee>
     9ee:	8a ed       	ldi	r24, 0xDA	; 218
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	0e 94 99 27 	call	0x4f32	; 0x4f32 <_ZN7TwoWire4readEv>
		keyword += request_c;
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	ce 01       	movw	r24, r28
     9fa:	ce 96       	adiw	r24, 0x3e	; 62
     9fc:	69 81       	ldd	r22, Y+1	; 0x01
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
	// slave may send less than requested
	while (Wire.available()) 
     9fe:	5c dc       	rcall	.-1864   	; 0x2b8 <_ZN6StringpLEc>
	{ 
		char request_c = Wire.read();		// receive a byte as character
		keyword += request_c;
	}
	keyword += Wire.read();        // receive byte as an integer
     a00:	ec cf       	rjmp	.-40     	; 0x9da <loop+0x1c6>
     a02:	8a ed       	ldi	r24, 0xDA	; 218
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	0e 94 99 27 	call	0x4f32	; 0x4f32 <_ZN7TwoWire4readEv>
     a0a:	9c 01       	movw	r18, r24
     a0c:	ce 01       	movw	r24, r28
     a0e:	ce 96       	adiw	r24, 0x3e	; 62
     a10:	b9 01       	movw	r22, r18
	
	// Removes the last char in the received string
	 keyword = keyword.substring(0, keyword.length() - 1);
     a12:	67 dc       	rcall	.-1842   	; 0x2e2 <_ZN6StringpLEi>
     a14:	ce 01       	movw	r24, r28
     a16:	ce 96       	adiw	r24, 0x3e	; 62
     a18:	3d dc       	rcall	.-1926   	; 0x294 <_ZNK6String6lengthEv>
     a1a:	9c 01       	movw	r18, r24
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	31 09       	sbc	r19, r1
     a20:	ce 01       	movw	r24, r28
     a22:	02 96       	adiw	r24, 0x02	; 2
     a24:	be 01       	movw	r22, r28
     a26:	62 5c       	subi	r22, 0xC2	; 194
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZNK6String9substringEjj>
     a32:	9e 01       	movw	r18, r28
     a34:	2e 5f       	subi	r18, 0xFE	; 254
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	ce 96       	adiw	r24, 0x3e	; 62
     a3c:	b9 01       	movw	r22, r18
     a3e:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN6StringaSEOS_>
     a42:	ce 01       	movw	r24, r28
     a44:	02 96       	adiw	r24, 0x02	; 2
     a46:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
	 
	 Serial.println(keyword);
     a4a:	ce 01       	movw	r24, r28
     a4c:	ce 96       	adiw	r24, 0x3e	; 62
     a4e:	bc 01       	movw	r22, r24
     a50:	86 ee       	ldi	r24, 0xE6	; 230
     a52:	94 e0       	ldi	r25, 0x04	; 4
     a54:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print7printlnERK6String>
	 
	// Verify incoming data
	if (keyword == "TOGGLE")
     a58:	ce 01       	movw	r24, r28
     a5a:	ce 96       	adiw	r24, 0x3e	; 62
     a5c:	60 e6       	ldi	r22, 0x60	; 96
     a5e:	72 e0       	ldi	r23, 0x02	; 2
     a60:	72 dc       	rcall	.-1820   	; 0x346 <_ZNK6StringeqEPKc>
     a62:	98 2f       	mov	r25, r24
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	99 23       	and	r25, r25
     a68:	09 f4       	brne	.+2      	; 0xa6c <loop+0x258>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
	{
		// toggle servo position
		moveServo();
     a6c:	88 23       	and	r24, r24
	}
	if (keyword == "42")
     a6e:	09 f0       	breq	.+2      	; 0xa72 <loop+0x25e>
     a70:	48 d1       	rcall	.+656    	; 0xd02 <_Z9moveServov>
     a72:	ce 01       	movw	r24, r28
     a74:	ce 96       	adiw	r24, 0x3e	; 62
     a76:	67 e6       	ldi	r22, 0x67	; 103
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	65 dc       	rcall	.-1846   	; 0x346 <_ZNK6StringeqEPKc>
     a7c:	98 2f       	mov	r25, r24
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	99 23       	and	r25, r25
     a82:	09 f4       	brne	.+2      	; 0xa86 <loop+0x272>
	{
		// toggle servo position
		moveServo();
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	88 23       	and	r24, r24
	}
	if (keyword == "69")
     a88:	09 f0       	breq	.+2      	; 0xa8c <loop+0x278>
     a8a:	3b d1       	rcall	.+630    	; 0xd02 <_Z9moveServov>
     a8c:	ce 01       	movw	r24, r28
     a8e:	ce 96       	adiw	r24, 0x3e	; 62
     a90:	6a e6       	ldi	r22, 0x6A	; 106
     a92:	72 e0       	ldi	r23, 0x02	; 2
     a94:	58 dc       	rcall	.-1872   	; 0x346 <_ZNK6StringeqEPKc>
     a96:	98 2f       	mov	r25, r24
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	99 23       	and	r25, r25
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <loop+0x28c>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	88 23       	and	r24, r24
	{
		// toggle servo position
		moveServo();
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <loop+0x292>
     aa4:	2e d1       	rcall	.+604    	; 0xd02 <_Z9moveServov>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     aa6:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <isCardValid+0x1>
     aaa:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <isCardValid>

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     aae:	86 e6       	ldi	r24, 0x66	; 102
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     ab6:	98 2f       	mov	r25, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	89 27       	eor	r24, r25
     abc:	88 23       	and	r24, r24
     abe:	49 f4       	brne	.+18     	; 0xad2 <loop+0x2be>
     ac0:	86 e6       	ldi	r24, 0x66	; 102
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	0e 94 08 1b 	call	0x3610	; 0x3610 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     ac8:	98 2f       	mov	r25, r24
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	89 27       	eor	r24, r25
     ace:	88 23       	and	r24, r24
     ad0:	11 f0       	breq	.+4      	; 0xad6 <loop+0x2c2>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <loop+0x2c4>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	88 23       	and	r24, r24
	{
		delay(50);
     ada:	59 f0       	breq	.+22     	; 0xaf2 <loop+0x2de>
     adc:	62 e3       	ldi	r22, 0x32	; 50
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
		isCardValid = 0;
     ae8:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <isCardValid+0x1>
	}
	else 
	{
		isCardValid = RfidValidater();
     aec:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <isCardValid>
     af0:	19 c0       	rjmp	.+50     	; 0xb24 <loop+0x310>
     af2:	2e d0       	rcall	.+92     	; 0xb50 <_Z13RfidValidaterv>
     af4:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <isCardValid+0x1>

		// if card/chip is valid
		if (isCardValid == 1)
     af8:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <isCardValid>
     afc:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <isCardValid>
     b00:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <isCardValid+0x1>
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	29 f4       	brne	.+10     	; 0xb12 <loop+0x2fe>
     b08:	81 e0       	ldi	r24, 0x01	; 1
				
			// Move servo
			moveServo();
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	4a d1       	rcall	.+660    	; 0xda2 <_Z12makeBipSoundi>
     b0e:	f9 d0       	rcall	.+498    	; 0xd02 <_Z9moveServov>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <loop+0x310>
     b12:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <isCardValid>
     b16:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <isCardValid+0x1>
     b1a:	02 97       	sbiw	r24, 0x02	; 2
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     b1c:	19 f4       	brne	.+6      	; 0xb24 <loop+0x310>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	3f d1       	rcall	.+638    	; 0xda2 <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     b24:	68 ee       	ldi	r22, 0xE8	; 232
     b26:	73 e0       	ldi	r23, 0x03	; 3
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
     b30:	ce 01       	movw	r24, r28
     b32:	ce 96       	adiw	r24, 0x3e	; 62
     b34:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
}
     b38:	00 00       	nop
     b3a:	cd 5b       	subi	r28, 0xBD	; 189
     b3c:	df 4f       	sbci	r29, 0xFF	; 255
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	08 95       	ret

00000b50 <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	69 97       	sbiw	r28, 0x19	; 25
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     b68:	ce 01       	movw	r24, r28
     b6a:	44 96       	adiw	r24, 0x14	; 20
     b6c:	6f e5       	ldi	r22, 0x5F	; 95
     b6e:	72 e0       	ldi	r23, 0x02	; 2
     b70:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     b74:	19 82       	std	Y+1, r1	; 0x01
     b76:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <mfrc522>
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	89 17       	cp	r24, r25
     b7e:	08 f0       	brcs	.+2      	; 0xb82 <_Z13RfidValidaterv+0x32>
     b80:	3e c0       	rjmp	.+124    	; 0xbfe <_Z13RfidValidaterv+0xae>
	{
		//Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
		//Serial.print(mfrc522.uid.uidByte[i], HEX);
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	89 59       	subi	r24, 0x99	; 153
     b8a:	9c 4f       	sbci	r25, 0xFC	; 252
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	80 31       	cpi	r24, 0x10	; 16
     b92:	18 f4       	brcc	.+6      	; 0xb9a <_Z13RfidValidaterv+0x4a>
     b94:	8d e6       	ldi	r24, 0x6D	; 109
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_Z13RfidValidaterv+0x4e>
     b9a:	80 e7       	ldi	r24, 0x70	; 112
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	9e 01       	movw	r18, r28
     ba0:	22 5f       	subi	r18, 0xF2	; 242
     ba2:	3f 4f       	sbci	r19, 0xFF	; 255
     ba4:	bc 01       	movw	r22, r24
     ba6:	c9 01       	movw	r24, r18
     ba8:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN6StringC1EPKc>
     bac:	9e 01       	movw	r18, r28
     bae:	22 5f       	subi	r18, 0xF2	; 242
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	ce 01       	movw	r24, r28
     bb4:	44 96       	adiw	r24, 0x14	; 20
     bb6:	b9 01       	movw	r22, r18
     bb8:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN6String6concatERKS_>
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 96       	adiw	r24, 0x0e	; 14
     bc0:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	89 59       	subi	r24, 0x99	; 153
     bcc:	9c 4f       	sbci	r25, 0xFC	; 252
     bce:	fc 01       	movw	r30, r24
     bd0:	20 81       	ld	r18, Z
     bd2:	ce 01       	movw	r24, r28
     bd4:	08 96       	adiw	r24, 0x08	; 8
     bd6:	40 e1       	ldi	r20, 0x10	; 16
     bd8:	62 2f       	mov	r22, r18
     bda:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <_ZN6StringC1Ehh>
     bde:	9e 01       	movw	r18, r28
     be0:	28 5f       	subi	r18, 0xF8	; 248
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	ce 01       	movw	r24, r28
     be6:	44 96       	adiw	r24, 0x14	; 20
     be8:	b9 01       	movw	r22, r18
     bea:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN6String6concatERKS_>
     bee:	ce 01       	movw	r24, r28
     bf0:	08 96       	adiw	r24, 0x08	; 8
     bf2:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	bc cf       	rjmp	.-136    	; 0xb76 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     bfe:	ce 01       	movw	r24, r28
     c00:	44 96       	adiw	r24, 0x14	; 20
     c02:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     c06:	ce 01       	movw	r24, r28
     c08:	02 96       	adiw	r24, 0x02	; 2
     c0a:	9e 01       	movw	r18, r28
     c0c:	2c 5e       	subi	r18, 0xEC	; 236
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	b9 01       	movw	r22, r18
     c16:	af db       	rcall	.-2210   	; 0x376 <_ZNK6String9substringEj>
     c18:	ce 01       	movw	r24, r28
     c1a:	02 96       	adiw	r24, 0x02	; 2
     c1c:	6a e7       	ldi	r22, 0x7A	; 122
     c1e:	73 e0       	ldi	r23, 0x03	; 3
     c20:	7a db       	rcall	.-2316   	; 0x316 <_ZNK6StringeqERKS_>
     c22:	11 e0       	ldi	r17, 0x01	; 1
     c24:	88 23       	and	r24, r24
     c26:	09 f4       	brne	.+2      	; 0xc2a <_Z13RfidValidaterv+0xda>
     c28:	10 e0       	ldi	r17, 0x00	; 0
     c2a:	ce 01       	movw	r24, r28
     c2c:	02 96       	adiw	r24, 0x02	; 2
     c2e:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
     c32:	11 23       	and	r17, r17
     c34:	89 f0       	breq	.+34     	; 0xc58 <_Z13RfidValidaterv+0x108>
	{
		Serial.println();
     c36:	86 ee       	ldi	r24, 0xE6	; 230
     c38:	94 e0       	ldi	r25, 0x04	; 4
     c3a:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     c3e:	62 e7       	ldi	r22, 0x72	; 114
     c40:	72 e0       	ldi	r23, 0x02	; 2
     c42:	86 ee       	ldi	r24, 0xE6	; 230
     c44:	94 e0       	ldi	r25, 0x04	; 4
     c46:	0e 94 94 2c 	call	0x5928	; 0x5928 <_ZN5Print7printlnEPKc>
		Serial.println();
     c4a:	86 ee       	ldi	r24, 0xE6	; 230
     c4c:	94 e0       	ldi	r25, 0x04	; 4
     c4e:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN5Print7printlnEv>
		return 1;
     c52:	01 e0       	ldi	r16, 0x01	; 1
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <_Z13RfidValidaterv+0x128>
	}
	else
	{
		Serial.println();
     c58:	86 ee       	ldi	r24, 0xE6	; 230
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN5Print7printlnEv>
		Serial.println("Access denied");
     c60:	64 e8       	ldi	r22, 0x84	; 132
     c62:	72 e0       	ldi	r23, 0x02	; 2
     c64:	86 ee       	ldi	r24, 0xE6	; 230
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	0e 94 94 2c 	call	0x5928	; 0x5928 <_ZN5Print7printlnEPKc>
		Serial.println();
     c6c:	86 ee       	ldi	r24, 0xE6	; 230
     c6e:	94 e0       	ldi	r25, 0x04	; 4
     c70:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN5Print7printlnEv>
		return 2;
     c74:	02 e0       	ldi	r16, 0x02	; 2
     c76:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     c78:	ce 01       	movw	r24, r28
     c7a:	44 96       	adiw	r24, 0x14	; 20
     c7c:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
     c80:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     c82:	69 96       	adiw	r28, 0x19	; 25
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	1f 92       	push	r1
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     ca4:	99 81       	ldd	r25, Y+1	; 0x01
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	89 27       	eor	r24, r25
     caa:	88 23       	and	r24, r24
     cac:	71 f0       	breq	.+28     	; 0xcca <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     cae:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     cb2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     cbc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     cc0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
	}
	if (status == true)
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	88 23       	and	r24, r24
     cce:	71 f0       	breq	.+28     	; 0xcec <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     cd0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     cd4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     cde:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     ce2:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
	}
	delay(100);
     cec:	64 e6       	ldi	r22, 0x64	; 100
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
}
     cf8:	00 00       	nop
     cfa:	0f 90       	pop	r0
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     d0a:	80 e8       	ldi	r24, 0x80	; 128
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN5Servo4readEv>
     d12:	21 e0       	ldi	r18, 0x01	; 1
     d14:	84 3b       	cpi	r24, 0xB4	; 180
     d16:	91 05       	cpc	r25, r1
     d18:	09 f0       	breq	.+2      	; 0xd1c <_Z9moveServov+0x1a>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	22 23       	and	r18, r18
     d1e:	81 f0       	breq	.+32     	; 0xd40 <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     d20:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     d24:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
		servo.write(0);
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	80 e8       	ldi	r24, 0x80	; 128
     d34:	93 e0       	ldi	r25, 0x03	; 3
     d36:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	ad df       	rcall	.-166    	; 0xc98 <_Z11SetRfidLedsb>
     d3e:	27 c0       	rjmp	.+78     	; 0xd8e <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN5Servo4readEv>
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	89 2b       	or	r24, r25
     d4c:	09 f0       	breq	.+2      	; 0xd50 <_Z9moveServov+0x4e>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	22 23       	and	r18, r18
     d52:	81 f0       	breq	.+32     	; 0xd74 <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     d54:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     d58:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
		servo.write(180);
     d62:	64 eb       	ldi	r22, 0xB4	; 180
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 e8       	ldi	r24, 0x80	; 128
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	93 df       	rcall	.-218    	; 0xc98 <_Z11SetRfidLedsb>
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     d74:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     d78:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
		servo.write(180);
     d82:	64 eb       	ldi	r22, 0xB4	; 180
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 e8       	ldi	r24, 0x80	; 128
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN5Servo5writeEi>
	}
	delay(100);
     d8e:	64 e6       	ldi	r22, 0x64	; 100
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
}
     d9a:	00 00       	nop
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	00 d0       	rcall	.+0      	; 0xda8 <_Z12makeBipSoundi+0x6>
     da8:	1f 92       	push	r1
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	a9 f4       	brne	.+42     	; 0xde4 <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     dba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     dbe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
		delay(100);
     dc8:	64 e6       	ldi	r22, 0x64	; 100
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     dd4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     dd8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
     de2:	35 c0       	rjmp	.+106    	; 0xe4e <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	02 97       	sbiw	r24, 0x02	; 2
     dea:	31 f5       	brne	.+76     	; 0xe38 <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	03 97       	sbiw	r24, 0x03	; 3
     df6:	5c f5       	brge	.+86     	; 0xe4e <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     df8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     dfc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
			delay(100);						// tone length
     e06:	64 e6       	ldi	r22, 0x64	; 100
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     e12:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e16:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
			delay(50);						// Interval between tones
     e20:	62 e3       	ldi	r22, 0x32	; 50
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	dc cf       	rjmp	.-72     	; 0xdf0 <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	03 97       	sbiw	r24, 0x03	; 3
     e3e:	39 f4       	brne	.+14     	; 0xe4e <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     e40:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e44:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
	}
	delay(100);
     e4e:	64 e6       	ldi	r22, 0x64	; 100
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
     e5a:	00 00       	nop
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	1f 92       	push	r1
     e70:	1f 92       	push	r1
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	4d 96       	adiw	r24, 0x1d	; 29
     e80:	94 d0       	rcall	.+296    	; 0xfaa <_ZN11DHT_Unified8HumidityD1Ev>
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	44 96       	adiw	r24, 0x14	; 20
     e88:	5d d0       	rcall	.+186    	; 0xf44 <_ZN11DHT_Unified11TemperatureD1Ev>
     e8a:	00 00       	nop
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <_Z41__static_initialization_and_destruction_0ii>:
     e96:	af 92       	push	r10
     e98:	bf 92       	push	r11
     e9a:	cf 92       	push	r12
     e9c:	df 92       	push	r13
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	00 d0       	rcall	.+0      	; 0xeac <_Z41__static_initialization_and_destruction_0ii+0x16>
     eac:	1f 92       	push	r1
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	7c 83       	std	Y+4, r23	; 0x04
     eb8:	6b 83       	std	Y+3, r22	; 0x03
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	11 f5       	brne	.+68     	; 0xf06 <_Z41__static_initialization_and_destruction_0ii+0x70>
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	f1 f4       	brne	.+60     	; 0xf06 <_Z41__static_initialization_and_destruction_0ii+0x70>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     eca:	aa 24       	eor	r10, r10
     ecc:	aa 94       	dec	r10
     ece:	ba 2c       	mov	r11, r10
     ed0:	65 01       	movw	r12, r10
     ed2:	ee 24       	eor	r14, r14
     ed4:	ea 94       	dec	r14
     ed6:	fe 2c       	mov	r15, r14
     ed8:	87 01       	movw	r16, r14
     eda:	26 e0       	ldi	r18, 0x06	; 6
     edc:	4b e0       	ldi	r20, 0x0B	; 11
     ede:	62 e0       	ldi	r22, 0x02	; 2
     ee0:	86 e3       	ldi	r24, 0x36	; 54
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	c3 d6       	rcall	.+3462   	; 0x1c6c <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     ee6:	45 e0       	ldi	r20, 0x05	; 5
     ee8:	65 e3       	ldi	r22, 0x35	; 53
     eea:	86 e6       	ldi	r24, 0x66	; 102
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     ef2:	62 e9       	ldi	r22, 0x92	; 146
     ef4:	72 e0       	ldi	r23, 0x02	; 2
     ef6:	8a e7       	ldi	r24, 0x7A	; 122
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     efe:	80 e8       	ldi	r24, 0x80	; 128
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <_ZN5ServoC1Ev>
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	89 2b       	or	r24, r25
     f0c:	59 f4       	brne	.+22     	; 0xf24 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	39 f4       	brne	.+14     	; 0xf24 <_Z41__static_initialization_and_destruction_0ii+0x8e>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     f16:	8a e7       	ldi	r24, 0x7A	; 122
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     f1e:	86 e3       	ldi	r24, 0x36	; 54
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	a3 df       	rcall	.-186    	; 0xe6a <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     f24:	00 00       	nop
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	08 95       	ret

00000f44 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	1f 92       	push	r1
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	2b ed       	ldi	r18, 0xDB	; 219
     f56:	32 e0       	ldi	r19, 0x02	; 2
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	fc 01       	movw	r30, r24
     f5e:	31 83       	std	Z+1, r19	; 0x01
     f60:	20 83       	st	Z, r18
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	8c da       	rcall	.-2792   	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	89 2b       	or	r24, r25
     f6e:	21 f0       	breq	.+8      	; 0xf78 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZdlPv>
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <_ZN11DHT_Unified11TemperatureD0Ev>:
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	1f 92       	push	r1
     f88:	1f 92       	push	r1
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	d6 df       	rcall	.-84     	; 0xf44 <_ZN11DHT_Unified11TemperatureD1Ev>
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZdlPv>
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	1f 92       	push	r1
     fb0:	1f 92       	push	r1
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	2d ec       	ldi	r18, 0xCD	; 205
     fbc:	32 e0       	ldi	r19, 0x02	; 2
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	fc 01       	movw	r30, r24
     fc4:	31 83       	std	Z+1, r19	; 0x01
     fc6:	20 83       	st	Z, r18
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	59 da       	rcall	.-2894   	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	89 2b       	or	r24, r25
     fd4:	21 f0       	breq	.+8      	; 0xfde <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZdlPv>
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <_ZN11DHT_Unified8HumidityD0Ev>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	1f 92       	push	r1
     fee:	1f 92       	push	r1
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	d6 df       	rcall	.-84     	; 0xfaa <_ZN11DHT_Unified8HumidityD1Ev>
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZdlPv>
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <_GLOBAL__sub_I_x>:
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	6f ef       	ldi	r22, 0xFF	; 255
    101a:	7f ef       	ldi	r23, 0xFF	; 255
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	3a df       	rcall	.-396    	; 0xe96 <_Z41__static_initialization_and_destruction_0ii>
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <_GLOBAL__sub_D_x>:
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	6f ef       	ldi	r22, 0xFF	; 255
    1032:	7f ef       	ldi	r23, 0xFF	; 255
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	2e df       	rcall	.-420    	; 0xe96 <_Z41__static_initialization_and_destruction_0ii>
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	1f 92       	push	r1
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	f8 94       	cli
    1052:	00 00       	nop
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <_ZN13InterruptLockD1Ev>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	1f 92       	push	r1
    1064:	1f 92       	push	r1
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	78 94       	sei
    1070:	00 00       	nop
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <_ZN3DHTC1Ehhh>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	2b 97       	sbiw	r28, 0x0b	; 11
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	98 87       	std	Y+8, r25	; 0x08
    1092:	8f 83       	std	Y+7, r24	; 0x07
    1094:	69 87       	std	Y+9, r22	; 0x09
    1096:	4a 87       	std	Y+10, r20	; 0x0a
    1098:	2b 87       	std	Y+11, r18	; 0x0b
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	29 85       	ldd	r18, Y+9	; 0x09
    10a0:	fc 01       	movw	r30, r24
    10a2:	25 83       	std	Z+5, r18	; 0x05
    10a4:	8f 81       	ldd	r24, Y+7	; 0x07
    10a6:	98 85       	ldd	r25, Y+8	; 0x08
    10a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10aa:	fc 01       	movw	r30, r24
    10ac:	26 83       	std	Z+6, r18	; 0x06
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	82 5b       	subi	r24, 0xB2	; 178
    10b6:	9e 4f       	sbci	r25, 0xFE	; 254
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	fc 01       	movw	r30, r24
    10c2:	84 91       	lpm	r24, Z
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	fc 01       	movw	r30, r24
    10ce:	27 83       	std	Z+7, r18	; 0x07
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	8c 56       	subi	r24, 0x6C	; 108
    10d8:	9e 4f       	sbci	r25, 0xFE	; 254
    10da:	9d 83       	std	Y+5, r25	; 0x05
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	fc 01       	movw	r30, r24
    10e4:	84 91       	lpm	r24, Z
    10e6:	8e 83       	std	Y+6, r24	; 0x06
    10e8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ea:	98 85       	ldd	r25, Y+8	; 0x08
    10ec:	2e 81       	ldd	r18, Y+6	; 0x06
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 87       	std	Z+8, r18	; 0x08
    10f2:	2f 81       	ldd	r18, Y+7	; 0x07
    10f4:	38 85       	ldd	r19, Y+8	; 0x08
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	9e e3       	ldi	r25, 0x3E	; 62
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	f9 01       	movw	r30, r18
    1100:	85 87       	std	Z+13, r24	; 0x0d
    1102:	96 87       	std	Z+14, r25	; 0x0e
    1104:	a7 87       	std	Z+15, r26	; 0x0f
    1106:	b0 8b       	std	Z+16, r27	; 0x10
    1108:	00 00       	nop
    110a:	2b 96       	adiw	r28, 0x0b	; 11
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <_ZN3DHT5beginEh>:
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <_ZN3DHT5beginEh+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	6b 83       	std	Y+3, r22	; 0x03
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	fc 01       	movw	r30, r24
    1132:	85 81       	ldd	r24, Z+5	; 0x05
    1134:	62 e0       	ldi	r22, 0x02	; 2
    1136:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
    113a:	0e 94 ef 2c 	call	0x59de	; 0x59de <millis>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	80 5d       	subi	r24, 0xD0	; 208
    1144:	97 40       	sbci	r25, 0x07	; 7
    1146:	a1 09       	sbc	r26, r1
    1148:	b1 09       	sbc	r27, r1
    114a:	29 81       	ldd	r18, Y+1	; 0x01
    114c:	3a 81       	ldd	r19, Y+2	; 0x02
    114e:	f9 01       	movw	r30, r18
    1150:	81 87       	std	Z+9, r24	; 0x09
    1152:	92 87       	std	Z+10, r25	; 0x0a
    1154:	a3 87       	std	Z+11, r26	; 0x0b
    1156:	b4 87       	std	Z+12, r27	; 0x0c
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	2b 81       	ldd	r18, Y+3	; 0x03
    115e:	fc 01       	movw	r30, r24
    1160:	22 8b       	std	Z+18, r18	; 0x12
    1162:	00 00       	nop
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <_ZN3DHT15readTemperatureEbb>:
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	28 97       	sbiw	r28, 0x08	; 8
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	6f 83       	std	Y+7, r22	; 0x07
    118a:	48 87       	std	Y+8, r20	; 0x08
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a0 ec       	ldi	r26, 0xC0	; 192
    1192:	bf e7       	ldi	r27, 0x7F	; 127
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	ab 83       	std	Y+3, r26	; 0x03
    119a:	bc 83       	std	Y+4, r27	; 0x04
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	68 85       	ldd	r22, Y+8	; 0x08
    11a2:	1d d2       	rcall	.+1082   	; 0x15de <_ZN3DHT4readEb>
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <_ZN3DHT15readTemperatureEbb+0x3a>
    11a8:	34 c1       	rjmp	.+616    	; 0x1412 <_ZN3DHT15readTemperatureEbb+0x2a2>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	fc 01       	movw	r30, r24
    11b0:	86 81       	ldd	r24, Z+6	; 0x06
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	8c 30       	cpi	r24, 0x0C	; 12
    11b8:	91 05       	cpc	r25, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <_ZN3DHT15readTemperatureEbb+0x4e>
    11bc:	72 c0       	rjmp	.+228    	; 0x12a2 <_ZN3DHT15readTemperatureEbb+0x132>
    11be:	8d 30       	cpi	r24, 0x0D	; 13
    11c0:	91 05       	cpc	r25, r1
    11c2:	1c f4       	brge	.+6      	; 0x11ca <_ZN3DHT15readTemperatureEbb+0x5a>
    11c4:	0b 97       	sbiw	r24, 0x0b	; 11
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <_ZN3DHT15readTemperatureEbb+0x64>
    11c8:	24 c1       	rjmp	.+584    	; 0x1412 <_ZN3DHT15readTemperatureEbb+0x2a2>
    11ca:	45 97       	sbiw	r24, 0x15	; 21
    11cc:	02 97       	sbiw	r24, 0x02	; 2
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <_ZN3DHT15readTemperatureEbb+0x62>
    11d0:	20 c1       	rjmp	.+576    	; 0x1412 <_ZN3DHT15readTemperatureEbb+0x2a2>
    11d2:	c7 c0       	rjmp	.+398    	; 0x1362 <_ZN3DHT15readTemperatureEbb+0x1f2>
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	fc 01       	movw	r30, r24
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a0 e0       	ldi	r26, 0x00	; 0
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 1f 29 	call	0x523e	; 0x523e <__floatunsisf>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	ab 83       	std	Y+3, r26	; 0x03
    11f6:	bc 83       	std	Y+4, r27	; 0x04
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	fc 01       	movw	r30, r24
    11fe:	83 81       	ldd	r24, Z+3	; 0x03
    1200:	88 23       	and	r24, r24
    1202:	84 f4       	brge	.+32     	; 0x1224 <_ZN3DHT15readTemperatureEbb+0xb4>
    1204:	29 81       	ldd	r18, Y+1	; 0x01
    1206:	3a 81       	ldd	r19, Y+2	; 0x02
    1208:	4b 81       	ldd	r20, Y+3	; 0x03
    120a:	5c 81       	ldd	r21, Y+4	; 0x04
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	9f eb       	ldi	r25, 0xBF	; 191
    1214:	0e 94 89 28 	call	0x5112	; 0x5112 <__subsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	ab 83       	std	Y+3, r26	; 0x03
    1222:	bc 83       	std	Y+4, r27	; 0x04
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	fc 01       	movw	r30, r24
    122a:	83 81       	ldd	r24, Z+3	; 0x03
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	8f 70       	andi	r24, 0x0F	; 15
    1232:	99 27       	eor	r25, r25
    1234:	09 2e       	mov	r0, r25
    1236:	00 0c       	add	r0, r0
    1238:	aa 0b       	sbc	r26, r26
    123a:	bb 0b       	sbc	r27, r27
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	0e 94 21 29 	call	0x5242	; 0x5242 <__floatsisf>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	2d ec       	ldi	r18, 0xCD	; 205
    124a:	3c ec       	ldi	r19, 0xCC	; 204
    124c:	4c ec       	ldi	r20, 0xCC	; 204
    124e:	5d e3       	ldi	r21, 0x3D	; 61
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9c 01       	movw	r18, r24
    125e:	ad 01       	movw	r20, r26
    1260:	69 81       	ldd	r22, Y+1	; 0x01
    1262:	7a 81       	ldd	r23, Y+2	; 0x02
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	0e 94 8a 28 	call	0x5114	; 0x5114 <__addsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	ab 83       	std	Y+3, r26	; 0x03
    1276:	bc 83       	std	Y+4, r27	; 0x04
    1278:	8f 81       	ldd	r24, Y+7	; 0x07
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <_ZN3DHT15readTemperatureEbb+0x110>
    127e:	c4 c0       	rjmp	.+392    	; 0x1408 <_ZN3DHT15readTemperatureEbb+0x298>
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	ab 81       	ldd	r26, Y+3	; 0x03
    1286:	bc 81       	ldd	r27, Y+4	; 0x04
    1288:	2d 81       	ldd	r18, Y+5	; 0x05
    128a:	3e 81       	ldd	r19, Y+6	; 0x06
    128c:	ac 01       	movw	r20, r24
    128e:	bd 01       	movw	r22, r26
    1290:	c9 01       	movw	r24, r18
    1292:	ce d0       	rcall	.+412    	; 0x1430 <_ZN3DHT11convertCtoFEf>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	ab 83       	std	Y+3, r26	; 0x03
    129e:	bc 83       	std	Y+4, r27	; 0x04
    12a0:	b3 c0       	rjmp	.+358    	; 0x1408 <_ZN3DHT15readTemperatureEbb+0x298>
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	fc 01       	movw	r30, r24
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	0e 94 1f 29 	call	0x523e	; 0x523e <__floatunsisf>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	ab 83       	std	Y+3, r26	; 0x03
    12c4:	bc 83       	std	Y+4, r27	; 0x04
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	fc 01       	movw	r30, r24
    12cc:	83 81       	ldd	r24, Z+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	8f 70       	andi	r24, 0x0F	; 15
    12d4:	99 27       	eor	r25, r25
    12d6:	09 2e       	mov	r0, r25
    12d8:	00 0c       	add	r0, r0
    12da:	aa 0b       	sbc	r26, r26
    12dc:	bb 0b       	sbc	r27, r27
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 21 29 	call	0x5242	; 0x5242 <__floatsisf>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	2d ec       	ldi	r18, 0xCD	; 205
    12ec:	3c ec       	ldi	r19, 0xCC	; 204
    12ee:	4c ec       	ldi	r20, 0xCC	; 204
    12f0:	5d e3       	ldi	r21, 0x3D	; 61
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9c 01       	movw	r18, r24
    1300:	ad 01       	movw	r20, r26
    1302:	69 81       	ldd	r22, Y+1	; 0x01
    1304:	7a 81       	ldd	r23, Y+2	; 0x02
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	0e 94 8a 28 	call	0x5114	; 0x5114 <__addsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	ab 83       	std	Y+3, r26	; 0x03
    1318:	bc 83       	std	Y+4, r27	; 0x04
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	fc 01       	movw	r30, r24
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	88 23       	and	r24, r24
    1324:	4c f4       	brge	.+18     	; 0x1338 <_ZN3DHT15readTemperatureEbb+0x1c8>
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	ab 81       	ldd	r26, Y+3	; 0x03
    132c:	bc 81       	ldd	r27, Y+4	; 0x04
    132e:	b0 58       	subi	r27, 0x80	; 128
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	ab 83       	std	Y+3, r26	; 0x03
    1336:	bc 83       	std	Y+4, r27	; 0x04
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	88 23       	and	r24, r24
    133c:	09 f4       	brne	.+2      	; 0x1340 <_ZN3DHT15readTemperatureEbb+0x1d0>
    133e:	66 c0       	rjmp	.+204    	; 0x140c <_ZN3DHT15readTemperatureEbb+0x29c>
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	ab 81       	ldd	r26, Y+3	; 0x03
    1346:	bc 81       	ldd	r27, Y+4	; 0x04
    1348:	2d 81       	ldd	r18, Y+5	; 0x05
    134a:	3e 81       	ldd	r19, Y+6	; 0x06
    134c:	ac 01       	movw	r20, r24
    134e:	bd 01       	movw	r22, r26
    1350:	c9 01       	movw	r24, r18
    1352:	6e d0       	rcall	.+220    	; 0x1430 <_ZN3DHT11convertCtoFEf>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	ab 83       	std	Y+3, r26	; 0x03
    135e:	bc 83       	std	Y+4, r27	; 0x04
    1360:	55 c0       	rjmp	.+170    	; 0x140c <_ZN3DHT15readTemperatureEbb+0x29c>
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	fc 01       	movw	r30, r24
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	8f 77       	andi	r24, 0x7F	; 127
    1370:	99 27       	eor	r25, r25
    1372:	38 2f       	mov	r19, r24
    1374:	22 27       	eor	r18, r18
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	fc 01       	movw	r30, r24
    137c:	83 81       	ldd	r24, Z+3	; 0x03
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	82 2b       	or	r24, r18
    1384:	93 2b       	or	r25, r19
    1386:	cc 01       	movw	r24, r24
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 1f 29 	call	0x523e	; 0x523e <__floatunsisf>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	ab 83       	std	Y+3, r26	; 0x03
    139e:	bc 83       	std	Y+4, r27	; 0x04
    13a0:	2d ec       	ldi	r18, 0xCD	; 205
    13a2:	3c ec       	ldi	r19, 0xCC	; 204
    13a4:	4c ec       	ldi	r20, 0xCC	; 204
    13a6:	5d e3       	ldi	r21, 0x3D	; 61
    13a8:	69 81       	ldd	r22, Y+1	; 0x01
    13aa:	7a 81       	ldd	r23, Y+2	; 0x02
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	ab 83       	std	Y+3, r26	; 0x03
    13be:	bc 83       	std	Y+4, r27	; 0x04
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	9e 81       	ldd	r25, Y+6	; 0x06
    13c4:	fc 01       	movw	r30, r24
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	88 23       	and	r24, r24
    13ca:	4c f4       	brge	.+18     	; 0x13de <_ZN3DHT15readTemperatureEbb+0x26e>
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	ab 81       	ldd	r26, Y+3	; 0x03
    13d2:	bc 81       	ldd	r27, Y+4	; 0x04
    13d4:	b0 58       	subi	r27, 0x80	; 128
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	ab 83       	std	Y+3, r26	; 0x03
    13dc:	bc 83       	std	Y+4, r27	; 0x04
    13de:	8f 81       	ldd	r24, Y+7	; 0x07
    13e0:	88 23       	and	r24, r24
    13e2:	b1 f0       	breq	.+44     	; 0x1410 <_ZN3DHT15readTemperatureEbb+0x2a0>
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	ab 81       	ldd	r26, Y+3	; 0x03
    13ea:	bc 81       	ldd	r27, Y+4	; 0x04
    13ec:	2d 81       	ldd	r18, Y+5	; 0x05
    13ee:	3e 81       	ldd	r19, Y+6	; 0x06
    13f0:	ac 01       	movw	r20, r24
    13f2:	bd 01       	movw	r22, r26
    13f4:	c9 01       	movw	r24, r18
    13f6:	1c d0       	rcall	.+56     	; 0x1430 <_ZN3DHT11convertCtoFEf>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	ab 83       	std	Y+3, r26	; 0x03
    1402:	bc 83       	std	Y+4, r27	; 0x04
    1404:	00 00       	nop
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <_ZN3DHT15readTemperatureEbb+0x2a0>
    1408:	00 00       	nop
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <_ZN3DHT15readTemperatureEbb+0x2a2>
    140c:	00 00       	nop
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <_ZN3DHT15readTemperatureEbb+0x2a2>
    1410:	00 00       	nop
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	ab 81       	ldd	r26, Y+3	; 0x03
    1418:	bc 81       	ldd	r27, Y+4	; 0x04
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	28 96       	adiw	r28, 0x08	; 8
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <_ZN3DHT11convertCtoFEf>:
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	00 d0       	rcall	.+0      	; 0x1436 <_ZN3DHT11convertCtoFEf+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <_ZN3DHT11convertCtoFEf+0x8>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	4b 83       	std	Y+3, r20	; 0x03
    1442:	5c 83       	std	Y+4, r21	; 0x04
    1444:	6d 83       	std	Y+5, r22	; 0x05
    1446:	7e 83       	std	Y+6, r23	; 0x06
    1448:	26 e6       	ldi	r18, 0x66	; 102
    144a:	36 e6       	ldi	r19, 0x66	; 102
    144c:	46 ee       	ldi	r20, 0xE6	; 230
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	6b 81       	ldd	r22, Y+3	; 0x03
    1452:	7c 81       	ldd	r23, Y+4	; 0x04
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	52 e4       	ldi	r21, 0x42	; 66
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 8a 28 	call	0x5114	; 0x5114 <__addsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	26 96       	adiw	r28, 0x06	; 6
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <_ZN3DHT12readHumidityEb>:
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	27 97       	sbiw	r28, 0x07	; 7
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	6f 83       	std	Y+7, r22	; 0x07
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 ec       	ldi	r26, 0xC0	; 192
    14b2:	bf e7       	ldi	r27, 0x7F	; 127
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	ab 83       	std	Y+3, r26	; 0x03
    14ba:	bc 83       	std	Y+4, r27	; 0x04
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	8d d0       	rcall	.+282    	; 0x15de <_ZN3DHT4readEb>
    14c4:	88 23       	and	r24, r24
    14c6:	09 f4       	brne	.+2      	; 0x14ca <_ZN3DHT12readHumidityEb+0x40>
    14c8:	77 c0       	rjmp	.+238    	; 0x15b8 <_ZN3DHT12readHumidityEb+0x12e>
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	fc 01       	movw	r30, r24
    14d0:	86 81       	ldd	r24, Z+6	; 0x06
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	8b 30       	cpi	r24, 0x0B	; 11
    14d8:	91 05       	cpc	r25, r1
    14da:	0c f4       	brge	.+2      	; 0x14de <_ZN3DHT12readHumidityEb+0x54>
    14dc:	6d c0       	rjmp	.+218    	; 0x15b8 <_ZN3DHT12readHumidityEb+0x12e>
    14de:	8d 30       	cpi	r24, 0x0D	; 13
    14e0:	91 05       	cpc	r25, r1
    14e2:	2c f0       	brlt	.+10     	; 0x14ee <_ZN3DHT12readHumidityEb+0x64>
    14e4:	45 97       	sbiw	r24, 0x15	; 21
    14e6:	02 97       	sbiw	r24, 0x02	; 2
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <_ZN3DHT12readHumidityEb+0x62>
    14ea:	66 c0       	rjmp	.+204    	; 0x15b8 <_ZN3DHT12readHumidityEb+0x12e>
    14ec:	37 c0       	rjmp	.+110    	; 0x155c <_ZN3DHT12readHumidityEb+0xd2>
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	09 2e       	mov	r0, r25
    14fc:	00 0c       	add	r0, r0
    14fe:	aa 0b       	sbc	r26, r26
    1500:	bb 0b       	sbc	r27, r27
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 21 29 	call	0x5242	; 0x5242 <__floatsisf>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	fc 01       	movw	r30, r24
    1514:	81 81       	ldd	r24, Z+1	; 0x01
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	09 2e       	mov	r0, r25
    151c:	00 0c       	add	r0, r0
    151e:	aa 0b       	sbc	r26, r26
    1520:	bb 0b       	sbc	r27, r27
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 21 29 	call	0x5242	; 0x5242 <__floatsisf>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	2d ec       	ldi	r18, 0xCD	; 205
    1530:	3c ec       	ldi	r19, 0xCC	; 204
    1532:	4c ec       	ldi	r20, 0xCC	; 204
    1534:	5d e3       	ldi	r21, 0x3D	; 61
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9c 01       	movw	r18, r24
    1544:	ad 01       	movw	r20, r26
    1546:	c7 01       	movw	r24, r14
    1548:	b6 01       	movw	r22, r12
    154a:	0e 94 8a 28 	call	0x5114	; 0x5114 <__addsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	ab 83       	std	Y+3, r26	; 0x03
    1558:	bc 83       	std	Y+4, r27	; 0x04
    155a:	2e c0       	rjmp	.+92     	; 0x15b8 <_ZN3DHT12readHumidityEb+0x12e>
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	fc 01       	movw	r30, r24
    1562:	80 81       	ld	r24, Z
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	38 2f       	mov	r19, r24
    156a:	22 27       	eor	r18, r18
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	fc 01       	movw	r30, r24
    1572:	81 81       	ldd	r24, Z+1	; 0x01
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	82 2b       	or	r24, r18
    157a:	93 2b       	or	r25, r19
    157c:	cc 01       	movw	r24, r24
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 1f 29 	call	0x523e	; 0x523e <__floatunsisf>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	ab 83       	std	Y+3, r26	; 0x03
    1594:	bc 83       	std	Y+4, r27	; 0x04
    1596:	2d ec       	ldi	r18, 0xCD	; 205
    1598:	3c ec       	ldi	r19, 0xCC	; 204
    159a:	4c ec       	ldi	r20, 0xCC	; 204
    159c:	5d e3       	ldi	r21, 0x3D	; 61
    159e:	69 81       	ldd	r22, Y+1	; 0x01
    15a0:	7a 81       	ldd	r23, Y+2	; 0x02
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	ab 83       	std	Y+3, r26	; 0x03
    15b4:	bc 83       	std	Y+4, r27	; 0x04
    15b6:	00 00       	nop
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	ab 81       	ldd	r26, Y+3	; 0x03
    15be:	bc 81       	ldd	r27, Y+4	; 0x04
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	27 96       	adiw	r28, 0x07	; 7
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	08 95       	ret

000015de <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	c4 55       	subi	r28, 0x54	; 84
    15f6:	d1 40       	sbci	r29, 0x01	; 1
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	9e 01       	movw	r18, r28
    1604:	2e 5a       	subi	r18, 0xAE	; 174
    1606:	3e 4f       	sbci	r19, 0xFE	; 254
    1608:	f9 01       	movw	r30, r18
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	ce 01       	movw	r24, r28
    1610:	8c 5a       	subi	r24, 0xAC	; 172
    1612:	9e 4f       	sbci	r25, 0xFE	; 254
    1614:	fc 01       	movw	r30, r24
    1616:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1618:	0e 94 ef 2c 	call	0x59de	; 0x59de <millis>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	af 83       	std	Y+7, r26	; 0x07
    1626:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1628:	ce 01       	movw	r24, r28
    162a:	8c 5a       	subi	r24, 0xAC	; 172
    162c:	9e 4f       	sbci	r25, 0xFE	; 254
    162e:	fc 01       	movw	r30, r24
    1630:	90 81       	ld	r25, Z
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 27       	eor	r24, r25
    1636:	88 23       	and	r24, r24
    1638:	29 f1       	breq	.+74     	; 0x1684 <_ZN3DHT4readEb+0xa6>
    163a:	ce 01       	movw	r24, r28
    163c:	8e 5a       	subi	r24, 0xAE	; 174
    163e:	9e 4f       	sbci	r25, 0xFE	; 254
    1640:	fc 01       	movw	r30, r24
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	fc 01       	movw	r30, r24
    1648:	81 85       	ldd	r24, Z+9	; 0x09
    164a:	92 85       	ldd	r25, Z+10	; 0x0a
    164c:	a3 85       	ldd	r26, Z+11	; 0x0b
    164e:	b4 85       	ldd	r27, Z+12	; 0x0c
    1650:	2d 81       	ldd	r18, Y+5	; 0x05
    1652:	3e 81       	ldd	r19, Y+6	; 0x06
    1654:	4f 81       	ldd	r20, Y+7	; 0x07
    1656:	58 85       	ldd	r21, Y+8	; 0x08
    1658:	59 01       	movw	r10, r18
    165a:	6a 01       	movw	r12, r20
    165c:	a8 1a       	sub	r10, r24
    165e:	b9 0a       	sbc	r11, r25
    1660:	ca 0a       	sbc	r12, r26
    1662:	db 0a       	sbc	r13, r27
    1664:	d6 01       	movw	r26, r12
    1666:	c5 01       	movw	r24, r10
    1668:	80 3d       	cpi	r24, 0xD0	; 208
    166a:	97 40       	sbci	r25, 0x07	; 7
    166c:	a1 05       	cpc	r26, r1
    166e:	b1 05       	cpc	r27, r1
    1670:	48 f4       	brcc	.+18     	; 0x1684 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    1672:	ce 01       	movw	r24, r28
    1674:	8e 5a       	subi	r24, 0xAE	; 174
    1676:	9e 4f       	sbci	r25, 0xFE	; 254
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	fc 01       	movw	r30, r24
    1680:	f1 88       	ldd	r15, Z+17	; 0x11
    1682:	5f c2       	rjmp	.+1214   	; 0x1b42 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    1684:	ce 01       	movw	r24, r28
    1686:	8e 5a       	subi	r24, 0xAE	; 174
    1688:	9e 4f       	sbci	r25, 0xFE	; 254
    168a:	fc 01       	movw	r30, r24
    168c:	20 81       	ld	r18, Z
    168e:	31 81       	ldd	r19, Z+1	; 0x01
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	af 81       	ldd	r26, Y+7	; 0x07
    1696:	b8 85       	ldd	r27, Y+8	; 0x08
    1698:	f9 01       	movw	r30, r18
    169a:	81 87       	std	Z+9, r24	; 0x09
    169c:	92 87       	std	Z+10, r25	; 0x0a
    169e:	a3 87       	std	Z+11, r26	; 0x0b
    16a0:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    16a2:	ce 01       	movw	r24, r28
    16a4:	8e 5a       	subi	r24, 0xAE	; 174
    16a6:	9e 4f       	sbci	r25, 0xFE	; 254
    16a8:	fc 01       	movw	r30, r24
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	fc 01       	movw	r30, r24
    16b0:	14 82       	std	Z+4, r1	; 0x04
    16b2:	ce 01       	movw	r24, r28
    16b4:	8e 5a       	subi	r24, 0xAE	; 174
    16b6:	9e 4f       	sbci	r25, 0xFE	; 254
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	fc 01       	movw	r30, r24
    16c0:	24 81       	ldd	r18, Z+4	; 0x04
    16c2:	ce 01       	movw	r24, r28
    16c4:	8e 5a       	subi	r24, 0xAE	; 174
    16c6:	9e 4f       	sbci	r25, 0xFE	; 254
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	fc 01       	movw	r30, r24
    16d0:	23 83       	std	Z+3, r18	; 0x03
    16d2:	ce 01       	movw	r24, r28
    16d4:	8e 5a       	subi	r24, 0xAE	; 174
    16d6:	9e 4f       	sbci	r25, 0xFE	; 254
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	fc 01       	movw	r30, r24
    16e0:	23 81       	ldd	r18, Z+3	; 0x03
    16e2:	ce 01       	movw	r24, r28
    16e4:	8e 5a       	subi	r24, 0xAE	; 174
    16e6:	9e 4f       	sbci	r25, 0xFE	; 254
    16e8:	fc 01       	movw	r30, r24
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	fc 01       	movw	r30, r24
    16f0:	22 83       	std	Z+2, r18	; 0x02
    16f2:	ce 01       	movw	r24, r28
    16f4:	8e 5a       	subi	r24, 0xAE	; 174
    16f6:	9e 4f       	sbci	r25, 0xFE	; 254
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	fc 01       	movw	r30, r24
    1700:	22 81       	ldd	r18, Z+2	; 0x02
    1702:	ce 01       	movw	r24, r28
    1704:	8e 5a       	subi	r24, 0xAE	; 174
    1706:	9e 4f       	sbci	r25, 0xFE	; 254
    1708:	fc 01       	movw	r30, r24
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	fc 01       	movw	r30, r24
    1710:	21 83       	std	Z+1, r18	; 0x01
    1712:	ce 01       	movw	r24, r28
    1714:	8e 5a       	subi	r24, 0xAE	; 174
    1716:	9e 4f       	sbci	r25, 0xFE	; 254
    1718:	fc 01       	movw	r30, r24
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	fc 01       	movw	r30, r24
    1720:	21 81       	ldd	r18, Z+1	; 0x01
    1722:	ce 01       	movw	r24, r28
    1724:	8e 5a       	subi	r24, 0xAE	; 174
    1726:	9e 4f       	sbci	r25, 0xFE	; 254
    1728:	fc 01       	movw	r30, r24
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	fc 01       	movw	r30, r24
    1730:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1732:	ce 01       	movw	r24, r28
    1734:	8e 5a       	subi	r24, 0xAE	; 174
    1736:	9e 4f       	sbci	r25, 0xFE	; 254
    1738:	fc 01       	movw	r30, r24
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	fc 01       	movw	r30, r24
    1740:	85 81       	ldd	r24, Z+5	; 0x05
    1742:	62 e0       	ldi	r22, 0x02	; 2
    1744:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
  delay(1);
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    1754:	ce 01       	movw	r24, r28
    1756:	8e 5a       	subi	r24, 0xAE	; 174
    1758:	9e 4f       	sbci	r25, 0xFE	; 254
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	fc 01       	movw	r30, r24
    1762:	85 81       	ldd	r24, Z+5	; 0x05
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
  digitalWrite(_pin, LOW);
    176a:	ce 01       	movw	r24, r28
    176c:	8e 5a       	subi	r24, 0xAE	; 174
    176e:	9e 4f       	sbci	r25, 0xFE	; 254
    1770:	fc 01       	movw	r30, r24
    1772:	80 81       	ld	r24, Z
    1774:	91 81       	ldd	r25, Z+1	; 0x01
    1776:	fc 01       	movw	r30, r24
    1778:	85 81       	ldd	r24, Z+5	; 0x05
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
  switch (_type) {
    1780:	ce 01       	movw	r24, r28
    1782:	8e 5a       	subi	r24, 0xAE	; 174
    1784:	9e 4f       	sbci	r25, 0xFE	; 254
    1786:	fc 01       	movw	r30, r24
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	fc 01       	movw	r30, r24
    178e:	86 81       	ldd	r24, Z+6	; 0x06
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	45 97       	sbiw	r24, 0x15	; 21
    1796:	02 97       	sbiw	r24, 0x02	; 2
    1798:	28 f4       	brcc	.+10     	; 0x17a4 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    179a:	8c e4       	ldi	r24, 0x4C	; 76
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <delayMicroseconds>
    break;
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    17a4:	64 e1       	ldi	r22, 0x14	; 20
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
    break;
    17b0:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    17b2:	ce 01       	movw	r24, r28
    17b4:	8e 5a       	subi	r24, 0xAE	; 174
    17b6:	9e 4f       	sbci	r25, 0xFE	; 254
    17b8:	fc 01       	movw	r30, r24
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	fc 01       	movw	r30, r24
    17c0:	85 81       	ldd	r24, Z+5	; 0x05
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    17c8:	ce 01       	movw	r24, r28
    17ca:	8e 5a       	subi	r24, 0xAE	; 174
    17cc:	9e 4f       	sbci	r25, 0xFE	; 254
    17ce:	fc 01       	movw	r30, r24
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	fc 01       	movw	r30, r24
    17d6:	82 89       	ldd	r24, Z+18	; 0x12
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    17e0:	ce 01       	movw	r24, r28
    17e2:	8f 5a       	subi	r24, 0xAF	; 175
    17e4:	9e 4f       	sbci	r25, 0xFE	; 254
    17e6:	2c dc       	rcall	.-1960   	; 0x1040 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    17e8:	ce 01       	movw	r24, r28
    17ea:	8e 5a       	subi	r24, 0xAE	; 174
    17ec:	9e 4f       	sbci	r25, 0xFE	; 254
    17ee:	fc 01       	movw	r30, r24
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	b7 d1       	rcall	.+878    	; 0x1b66 <_ZN3DHT11expectPulseEb>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	af 4f       	sbci	r26, 0xFF	; 255
    1804:	bf 4f       	sbci	r27, 0xFF	; 255
    1806:	09 f0       	breq	.+2      	; 0x180a <_ZN3DHT4readEb+0x22c>
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	22 23       	and	r18, r18
    180c:	99 f0       	breq	.+38     	; 0x1834 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    180e:	ce 01       	movw	r24, r28
    1810:	8e 5a       	subi	r24, 0xAE	; 174
    1812:	9e 4f       	sbci	r25, 0xFE	; 254
    1814:	fc 01       	movw	r30, r24
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	fc 01       	movw	r30, r24
    181c:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    181e:	ce 01       	movw	r24, r28
    1820:	8e 5a       	subi	r24, 0xAE	; 174
    1822:	9e 4f       	sbci	r25, 0xFE	; 254
    1824:	fc 01       	movw	r30, r24
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	fc 01       	movw	r30, r24
    182c:	f1 88       	ldd	r15, Z+17	; 0x11
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	72 c0       	rjmp	.+228    	; 0x1918 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1834:	ce 01       	movw	r24, r28
    1836:	8e 5a       	subi	r24, 0xAE	; 174
    1838:	9e 4f       	sbci	r25, 0xFE	; 254
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	91 81       	ldd	r25, Z+1	; 0x01
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	91 d1       	rcall	.+802    	; 0x1b66 <_ZN3DHT11expectPulseEb>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	8f 3f       	cpi	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	af 4f       	sbci	r26, 0xFF	; 255
    1850:	bf 4f       	sbci	r27, 0xFF	; 255
    1852:	09 f0       	breq	.+2      	; 0x1856 <_ZN3DHT4readEb+0x278>
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	22 23       	and	r18, r18
    1858:	99 f0       	breq	.+38     	; 0x1880 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    185a:	ce 01       	movw	r24, r28
    185c:	8e 5a       	subi	r24, 0xAE	; 174
    185e:	9e 4f       	sbci	r25, 0xFE	; 254
    1860:	fc 01       	movw	r30, r24
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	fc 01       	movw	r30, r24
    1868:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    186a:	ce 01       	movw	r24, r28
    186c:	8e 5a       	subi	r24, 0xAE	; 174
    186e:	9e 4f       	sbci	r25, 0xFE	; 254
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	fc 01       	movw	r30, r24
    1878:	f1 88       	ldd	r15, Z+17	; 0x11
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	4c c0       	rjmp	.+152    	; 0x1918 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1880:	1a 82       	std	Y+2, r1	; 0x02
    1882:	19 82       	std	Y+1, r1	; 0x01
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	80 35       	cpi	r24, 0x50	; 80
    188a:	91 05       	cpc	r25, r1
    188c:	0c f0       	brlt	.+2      	; 0x1890 <_ZN3DHT4readEb+0x2b2>
    188e:	42 c0       	rjmp	.+132    	; 0x1914 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    1890:	ce 01       	movw	r24, r28
    1892:	8e 5a       	subi	r24, 0xAE	; 174
    1894:	9e 4f       	sbci	r25, 0xFE	; 254
    1896:	fc 01       	movw	r30, r24
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	63 d1       	rcall	.+710    	; 0x1b66 <_ZN3DHT11expectPulseEb>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	29 81       	ldd	r18, Y+1	; 0x01
    18a6:	3a 81       	ldd	r19, Y+2	; 0x02
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	ae 01       	movw	r20, r28
    18b2:	4f 5f       	subi	r20, 0xFF	; 255
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	24 0f       	add	r18, r20
    18b8:	35 1f       	adc	r19, r21
    18ba:	20 5f       	subi	r18, 0xF0	; 240
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	f9 01       	movw	r30, r18
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	8c 01       	movw	r16, r24
    18ce:	0f 5f       	subi	r16, 0xFF	; 255
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	ce 01       	movw	r24, r28
    18d4:	8e 5a       	subi	r24, 0xAE	; 174
    18d6:	9e 4f       	sbci	r25, 0xFE	; 254
    18d8:	fc 01       	movw	r30, r24
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	42 d1       	rcall	.+644    	; 0x1b66 <_ZN3DHT11expectPulseEb>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	98 01       	movw	r18, r16
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	ae 01       	movw	r20, r28
    18f2:	4f 5f       	subi	r20, 0xFF	; 255
    18f4:	5f 4f       	sbci	r21, 0xFF	; 255
    18f6:	24 0f       	add	r18, r20
    18f8:	35 1f       	adc	r19, r21
    18fa:	20 5f       	subi	r18, 0xF0	; 240
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	f9 01       	movw	r30, r18
    1900:	80 83       	st	Z, r24
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	a2 83       	std	Z+2, r26	; 0x02
    1906:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	02 96       	adiw	r24, 0x02	; 2
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	b8 cf       	rjmp	.-144    	; 0x1884 <_ZN3DHT4readEb+0x2a6>
    1914:	01 e0       	ldi	r16, 0x01	; 1
    1916:	10 e0       	ldi	r17, 0x00	; 0
    1918:	ce 01       	movw	r24, r28
    191a:	8f 5a       	subi	r24, 0xAF	; 175
    191c:	9e 4f       	sbci	r25, 0xFE	; 254
    191e:	9f db       	rcall	.-2242   	; 0x105e <_ZN13InterruptLockD1Ev>
    1920:	01 30       	cpi	r16, 0x01	; 1
    1922:	11 05       	cpc	r17, r1
    1924:	09 f0       	breq	.+2      	; 0x1928 <_ZN3DHT4readEb+0x34a>
    1926:	0d c1       	rjmp	.+538    	; 0x1b42 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1928:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    192a:	1c 82       	std	Y+4, r1	; 0x04
    192c:	1b 82       	std	Y+3, r1	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	88 97       	sbiw	r24, 0x28	; 40
    1934:	0c f0       	brlt	.+2      	; 0x1938 <_ZN3DHT4readEb+0x35a>
    1936:	a7 c0       	rjmp	.+334    	; 0x1a86 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	9e 01       	movw	r18, r28
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	82 0f       	add	r24, r18
    1950:	93 1f       	adc	r25, r19
    1952:	40 96       	adiw	r24, 0x10	; 16
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	a2 81       	ldd	r26, Z+2	; 0x02
    195c:	b3 81       	ldd	r27, Z+3	; 0x03
    195e:	89 87       	std	Y+9, r24	; 0x09
    1960:	9a 87       	std	Y+10, r25	; 0x0a
    1962:	ab 87       	std	Y+11, r26	; 0x0b
    1964:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	9e 01       	movw	r18, r28
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	82 0f       	add	r24, r18
    1980:	93 1f       	adc	r25, r19
    1982:	40 96       	adiw	r24, 0x10	; 16
    1984:	fc 01       	movw	r30, r24
    1986:	80 81       	ld	r24, Z
    1988:	91 81       	ldd	r25, Z+1	; 0x01
    198a:	a2 81       	ldd	r26, Z+2	; 0x02
    198c:	b3 81       	ldd	r27, Z+3	; 0x03
    198e:	8d 87       	std	Y+13, r24	; 0x0d
    1990:	9e 87       	std	Y+14, r25	; 0x0e
    1992:	af 87       	std	Y+15, r26	; 0x0f
    1994:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	ab 85       	ldd	r26, Y+11	; 0x0b
    199c:	bc 85       	ldd	r27, Y+12	; 0x0c
    199e:	8f 3f       	cpi	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	af 4f       	sbci	r26, 0xFF	; 255
    19a4:	bf 4f       	sbci	r27, 0xFF	; 255
    19a6:	49 f0       	breq	.+18     	; 0x19ba <_ZN3DHT4readEb+0x3dc>
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	af 85       	ldd	r26, Y+15	; 0x0f
    19ae:	b8 89       	ldd	r27, Y+16	; 0x10
    19b0:	8f 3f       	cpi	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	af 4f       	sbci	r26, 0xFF	; 255
    19b6:	bf 4f       	sbci	r27, 0xFF	; 255
    19b8:	89 f4       	brne	.+34     	; 0x19dc <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    19ba:	ce 01       	movw	r24, r28
    19bc:	8e 5a       	subi	r24, 0xAE	; 174
    19be:	9e 4f       	sbci	r25, 0xFE	; 254
    19c0:	fc 01       	movw	r30, r24
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	fc 01       	movw	r30, r24
    19c8:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    19ca:	ce 01       	movw	r24, r28
    19cc:	8e 5a       	subi	r24, 0xAE	; 174
    19ce:	9e 4f       	sbci	r25, 0xFE	; 254
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	fc 01       	movw	r30, r24
    19d8:	f1 88       	ldd	r15, Z+17	; 0x11
    19da:	b3 c0       	rjmp	.+358    	; 0x1b42 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	99 23       	and	r25, r25
    19e2:	0c f4       	brge	.+2      	; 0x19e6 <_ZN3DHT4readEb+0x408>
    19e4:	07 96       	adiw	r24, 0x07	; 7
    19e6:	95 95       	asr	r25
    19e8:	87 95       	ror	r24
    19ea:	95 95       	asr	r25
    19ec:	87 95       	ror	r24
    19ee:	95 95       	asr	r25
    19f0:	87 95       	ror	r24
    19f2:	9e 01       	movw	r18, r28
    19f4:	2e 5a       	subi	r18, 0xAE	; 174
    19f6:	3e 4f       	sbci	r19, 0xFE	; 254
    19f8:	f9 01       	movw	r30, r18
    19fa:	20 81       	ld	r18, Z
    19fc:	31 81       	ldd	r19, Z+1	; 0x01
    19fe:	28 0f       	add	r18, r24
    1a00:	39 1f       	adc	r19, r25
    1a02:	f9 01       	movw	r30, r18
    1a04:	20 81       	ld	r18, Z
    1a06:	42 2f       	mov	r20, r18
    1a08:	44 0f       	add	r20, r20
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	2e 5a       	subi	r18, 0xAE	; 174
    1a0e:	3e 4f       	sbci	r19, 0xFE	; 254
    1a10:	f9 01       	movw	r30, r18
    1a12:	20 81       	ld	r18, Z
    1a14:	31 81       	ldd	r19, Z+1	; 0x01
    1a16:	82 0f       	add	r24, r18
    1a18:	93 1f       	adc	r25, r19
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    1a1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a20:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a22:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a24:	58 89       	ldd	r21, Y+16	; 0x10
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a2c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a2e:	82 17       	cp	r24, r18
    1a30:	93 07       	cpc	r25, r19
    1a32:	a4 07       	cpc	r26, r20
    1a34:	b5 07       	cpc	r27, r21
    1a36:	08 f5       	brcc	.+66     	; 0x1a7a <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	99 23       	and	r25, r25
    1a3e:	0c f4       	brge	.+2      	; 0x1a42 <_ZN3DHT4readEb+0x464>
    1a40:	07 96       	adiw	r24, 0x07	; 7
    1a42:	95 95       	asr	r25
    1a44:	87 95       	ror	r24
    1a46:	95 95       	asr	r25
    1a48:	87 95       	ror	r24
    1a4a:	95 95       	asr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	9e 01       	movw	r18, r28
    1a50:	2e 5a       	subi	r18, 0xAE	; 174
    1a52:	3e 4f       	sbci	r19, 0xFE	; 254
    1a54:	f9 01       	movw	r30, r18
    1a56:	20 81       	ld	r18, Z
    1a58:	31 81       	ldd	r19, Z+1	; 0x01
    1a5a:	28 0f       	add	r18, r24
    1a5c:	39 1f       	adc	r19, r25
    1a5e:	f9 01       	movw	r30, r18
    1a60:	20 81       	ld	r18, Z
    1a62:	42 2f       	mov	r20, r18
    1a64:	41 60       	ori	r20, 0x01	; 1
    1a66:	9e 01       	movw	r18, r28
    1a68:	2e 5a       	subi	r18, 0xAE	; 174
    1a6a:	3e 4f       	sbci	r19, 0xFE	; 254
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	20 81       	ld	r18, Z
    1a70:	31 81       	ldd	r19, Z+1	; 0x01
    1a72:	82 0f       	add	r24, r18
    1a74:	93 1f       	adc	r25, r19
    1a76:	fc 01       	movw	r30, r24
    1a78:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	54 cf       	rjmp	.-344    	; 0x192e <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    1a86:	ce 01       	movw	r24, r28
    1a88:	8e 5a       	subi	r24, 0xAE	; 174
    1a8a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	fc 01       	movw	r30, r24
    1a94:	84 81       	ldd	r24, Z+4	; 0x04
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	8e 5a       	subi	r24, 0xAE	; 174
    1a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	ce 01       	movw	r24, r28
    1ab0:	8e 5a       	subi	r24, 0xAE	; 174
    1ab2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	fc 01       	movw	r30, r24
    1abc:	81 81       	ldd	r24, Z+1	; 0x01
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	48 0f       	add	r20, r24
    1ac4:	59 1f       	adc	r21, r25
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	8e 5a       	subi	r24, 0xAE	; 174
    1aca:	9e 4f       	sbci	r25, 0xFE	; 254
    1acc:	fc 01       	movw	r30, r24
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	48 0f       	add	r20, r24
    1adc:	59 1f       	adc	r21, r25
    1ade:	ce 01       	movw	r24, r28
    1ae0:	8e 5a       	subi	r24, 0xAE	; 174
    1ae2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	fc 01       	movw	r30, r24
    1aec:	83 81       	ldd	r24, Z+3	; 0x03
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	84 0f       	add	r24, r20
    1af4:	95 1f       	adc	r25, r21
    1af6:	99 27       	eor	r25, r25
    1af8:	28 17       	cp	r18, r24
    1afa:	39 07       	cpc	r19, r25
    1afc:	91 f4       	brne	.+36     	; 0x1b22 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1afe:	ce 01       	movw	r24, r28
    1b00:	8e 5a       	subi	r24, 0xAE	; 174
    1b02:	9e 4f       	sbci	r25, 0xFE	; 254
    1b04:	fc 01       	movw	r30, r24
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	21 e0       	ldi	r18, 0x01	; 1
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1b10:	ce 01       	movw	r24, r28
    1b12:	8e 5a       	subi	r24, 0xAE	; 174
    1b14:	9e 4f       	sbci	r25, 0xFE	; 254
    1b16:	fc 01       	movw	r30, r24
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	f1 88       	ldd	r15, Z+17	; 0x11
    1b20:	10 c0       	rjmp	.+32     	; 0x1b42 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1b22:	ce 01       	movw	r24, r28
    1b24:	8e 5a       	subi	r24, 0xAE	; 174
    1b26:	9e 4f       	sbci	r25, 0xFE	; 254
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	91 81       	ldd	r25, Z+1	; 0x01
    1b2e:	fc 01       	movw	r30, r24
    1b30:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1b32:	ce 01       	movw	r24, r28
    1b34:	8e 5a       	subi	r24, 0xAE	; 174
    1b36:	9e 4f       	sbci	r25, 0xFE	; 254
    1b38:	fc 01       	movw	r30, r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	fc 01       	movw	r30, r24
    1b40:	f1 88       	ldd	r15, Z+17	; 0x11
    1b42:	8f 2d       	mov	r24, r15
  }
}
    1b44:	cc 5a       	subi	r28, 0xAC	; 172
    1b46:	de 4f       	sbci	r29, 0xFE	; 254
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	bf 90       	pop	r11
    1b62:	af 90       	pop	r10
    1b64:	08 95       	ret

00001b66 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	2a 97       	sbiw	r28, 0x0a	; 10
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	99 87       	std	Y+9, r25	; 0x09
    1b7c:	88 87       	std	Y+8, r24	; 0x08
    1b7e:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1b80:	1a 82       	std	Y+2, r1	; 0x02
    1b82:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1b84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b86:	88 23       	and	r24, r24
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <_ZN3DHT11expectPulseEb+0x2e>
    1b8a:	88 85       	ldd	r24, Y+8	; 0x08
    1b8c:	99 85       	ldd	r25, Y+9	; 0x09
    1b8e:	fc 01       	movw	r30, r24
    1b90:	87 81       	ldd	r24, Z+7	; 0x07
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <_ZN3DHT11expectPulseEb+0x30>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1b98:	88 85       	ldd	r24, Y+8	; 0x08
    1b9a:	99 85       	ldd	r25, Y+9	; 0x09
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	86 52       	subi	r24, 0x26	; 38
    1baa:	9e 4f       	sbci	r25, 0xFE	; 254
    1bac:	9d 83       	std	Y+5, r25	; 0x05
    1bae:	8c 83       	std	Y+4, r24	; 0x04
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	25 91       	lpm	r18, Z+
    1bb8:	34 91       	lpm	r19, Z
    1bba:	cf 01       	movw	r24, r30
    1bbc:	3f 83       	std	Y+7, r19	; 0x07
    1bbe:	2e 83       	std	Y+6, r18	; 0x06
    1bc0:	9d 83       	std	Y+5, r25	; 0x05
    1bc2:	8c 83       	std	Y+4, r24	; 0x04
    1bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc8:	fc 01       	movw	r30, r24
    1bca:	20 81       	ld	r18, Z
    1bcc:	88 85       	ldd	r24, Y+8	; 0x08
    1bce:	99 85       	ldd	r25, Y+9	; 0x09
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	87 81       	ldd	r24, Z+7	; 0x07
    1bd4:	28 23       	and	r18, r24
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	29 17       	cp	r18, r25
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_ZN3DHT11expectPulseEb+0x7a>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	88 23       	and	r24, r24
    1be2:	f9 f0       	breq	.+62     	; 0x1c22 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	9c 01       	movw	r18, r24
    1bea:	2f 5f       	subi	r18, 0xFF	; 255
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	3a 83       	std	Y+2, r19	; 0x02
    1bf0:	29 83       	std	Y+1, r18	; 0x01
    1bf2:	9c 01       	movw	r18, r24
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	88 85       	ldd	r24, Y+8	; 0x08
    1bfa:	99 85       	ldd	r25, Y+9	; 0x09
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	85 85       	ldd	r24, Z+13	; 0x0d
    1c00:	96 85       	ldd	r25, Z+14	; 0x0e
    1c02:	a7 85       	ldd	r26, Z+15	; 0x0f
    1c04:	b0 89       	ldd	r27, Z+16	; 0x10
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	28 17       	cp	r18, r24
    1c0a:	39 07       	cpc	r19, r25
    1c0c:	4a 07       	cpc	r20, r26
    1c0e:	5b 07       	cpc	r21, r27
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <_ZN3DHT11expectPulseEb+0xae>
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	66 23       	and	r22, r22
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <_ZN3DHT11expectPulseEb+0xb4>
    1c18:	bf cf       	rjmp	.-130    	; 0x1b98 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	9f ef       	ldi	r25, 0xFF	; 255
    1c1e:	dc 01       	movw	r26, r24
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	cc 01       	movw	r24, r24
    1c28:	a0 e0       	ldi	r26, 0x00	; 0
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
}
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	2a 96       	adiw	r28, 0x0a	; 10
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	1f 92       	push	r1
    1c48:	1f 92       	push	r1
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	2f eb       	ldi	r18, 0xBF	; 191
    1c54:	32 e0       	ldi	r19, 0x02	; 2
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	31 83       	std	Z+1, r19	; 0x01
    1c5e:	20 83       	st	Z, r18
    1c60:	00 00       	nop
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	2d 97       	sbiw	r28, 0x0d	; 13
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	6b 83       	std	Y+3, r22	; 0x03
    1c96:	4c 83       	std	Y+4, r20	; 0x04
    1c98:	2d 83       	std	Y+5, r18	; 0x05
    1c9a:	ee 82       	std	Y+6, r14	; 0x06
    1c9c:	ff 82       	std	Y+7, r15	; 0x07
    1c9e:	08 87       	std	Y+8, r16	; 0x08
    1ca0:	19 87       	std	Y+9, r17	; 0x09
    1ca2:	aa 86       	std	Y+10, r10	; 0x0a
    1ca4:	bb 86       	std	Y+11, r11	; 0x0b
    1ca6:	cc 86       	std	Y+12, r12	; 0x0c
    1ca8:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb2:	6b 81       	ldd	r22, Y+3	; 0x03
    1cb4:	e3 d9       	rcall	.-3130   	; 0x107c <_ZN3DHTC1Ehhh>
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	23 8b       	std	Z+19, r18	; 0x13
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	74 96       	adiw	r30, 0x14	; 20
    1cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ccc:	a8 85       	ldd	r26, Y+8	; 0x08
    1cce:	b9 85       	ldd	r27, Y+9	; 0x09
    1cd0:	69 81       	ldd	r22, Y+1	; 0x01
    1cd2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	ad 01       	movw	r20, r26
    1cd8:	cf 01       	movw	r24, r30
    1cda:	f6 d0       	rcall	.+492    	; 0x1ec8 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	7d 96       	adiw	r30, 0x1d	; 29
    1ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cea:	bd 85       	ldd	r27, Y+13	; 0x0d
    1cec:	69 81       	ldd	r22, Y+1	; 0x01
    1cee:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	ad 01       	movw	r20, r26
    1cf4:	cf 01       	movw	r24, r30
    1cf6:	7e d2       	rcall	.+1276   	; 0x21f4 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1cf8:	00 00       	nop
    1cfa:	2d 96       	adiw	r28, 0x0d	; 13
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	bf 90       	pop	r11
    1d18:	af 90       	pop	r10
    1d1a:	08 95       	ret

00001d1c <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	1f 92       	push	r1
    1d22:	1f 92       	push	r1
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	67 e3       	ldi	r22, 0x37	; 55
    1d32:	f4 d9       	rcall	.-3096   	; 0x111c <_ZN3DHT5beginEh>
    1d34:	00 00       	nop
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1d46:	1f 92       	push	r1
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	7c 83       	std	Y+4, r23	; 0x04
    1d52:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	fc 01       	movw	r30, r24
    1d5a:	83 89       	ldd	r24, Z+19	; 0x13
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	8c 30       	cpi	r24, 0x0C	; 12
    1d62:	91 05       	cpc	r25, r1
    1d64:	b1 f0       	breq	.+44     	; 0x1d92 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1d66:	8d 30       	cpi	r24, 0x0D	; 13
    1d68:	91 05       	cpc	r25, r1
    1d6a:	1c f4       	brge	.+6      	; 0x1d72 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1d6c:	0b 97       	sbiw	r24, 0x0b	; 11
    1d6e:	39 f0       	breq	.+14     	; 0x1d7e <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1d70:	2e c0       	rjmp	.+92     	; 0x1dce <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1d72:	85 31       	cpi	r24, 0x15	; 21
    1d74:	91 05       	cpc	r25, r1
    1d76:	b9 f0       	breq	.+46     	; 0x1da6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1d78:	46 97       	sbiw	r24, 0x16	; 22
    1d7a:	f9 f0       	breq	.+62     	; 0x1dba <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1d7c:	28 c0       	rjmp	.+80     	; 0x1dce <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1d7e:	2b e0       	ldi	r18, 0x0B	; 11
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	a9 01       	movw	r20, r18
    1d88:	6e e9       	ldi	r22, 0x9E	; 158
    1d8a:	72 e0       	ldi	r23, 0x02	; 2
    1d8c:	0e 94 ba 33 	call	0x6774	; 0x6774 <strncpy>
    break;
    1d90:	28 c0       	rjmp	.+80     	; 0x1de2 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1d92:	2b e0       	ldi	r18, 0x0B	; 11
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	64 ea       	ldi	r22, 0xA4	; 164
    1d9e:	72 e0       	ldi	r23, 0x02	; 2
    1da0:	0e 94 ba 33 	call	0x6774	; 0x6774 <strncpy>
    break;
    1da4:	1e c0       	rjmp	.+60     	; 0x1de2 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1da6:	2b e0       	ldi	r18, 0x0B	; 11
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	a9 01       	movw	r20, r18
    1db0:	6a ea       	ldi	r22, 0xAA	; 170
    1db2:	72 e0       	ldi	r23, 0x02	; 2
    1db4:	0e 94 ba 33 	call	0x6774	; 0x6774 <strncpy>
    break;
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1dba:	2b e0       	ldi	r18, 0x0B	; 11
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	a9 01       	movw	r20, r18
    1dc4:	60 eb       	ldi	r22, 0xB0	; 176
    1dc6:	72 e0       	ldi	r23, 0x02	; 2
    1dc8:	0e 94 ba 33 	call	0x6774	; 0x6774 <strncpy>
    break;
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1dce:	2b e0       	ldi	r18, 0x0B	; 11
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	a9 01       	movw	r20, r18
    1dd8:	66 eb       	ldi	r22, 0xB6	; 182
    1dda:	72 e0       	ldi	r23, 0x02	; 2
    1ddc:	0e 94 ba 33 	call	0x6774	; 0x6774 <strncpy>
    break;
    1de0:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1de2:	8b e0       	ldi	r24, 0x0B	; 11
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	2b 81       	ldd	r18, Y+3	; 0x03
    1de8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dea:	82 0f       	add	r24, r18
    1dec:	93 1f       	adc	r25, r19
    1dee:	fc 01       	movw	r30, r24
    1df0:	10 82       	st	Z, r1
}
    1df2:	00 00       	nop
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	08 95       	ret

00001e02 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1e08:	1f 92       	push	r1
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	7c 83       	std	Y+4, r23	; 0x04
    1e14:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	83 89       	ldd	r24, Z+19	; 0x13
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	8c 30       	cpi	r24, 0x0C	; 12
    1e24:	91 05       	cpc	r25, r1
    1e26:	c1 f0       	breq	.+48     	; 0x1e58 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1e28:	8d 30       	cpi	r24, 0x0D	; 13
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	1c f4       	brge	.+6      	; 0x1e34 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1e2e:	0b 97       	sbiw	r24, 0x0b	; 11
    1e30:	39 f0       	breq	.+14     	; 0x1e40 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1e32:	36 c0       	rjmp	.+108    	; 0x1ea0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1e34:	85 31       	cpi	r24, 0x15	; 21
    1e36:	91 05       	cpc	r25, r1
    1e38:	d9 f0       	breq	.+54     	; 0x1e70 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1e3a:	46 97       	sbiw	r24, 0x16	; 22
    1e3c:	29 f1       	breq	.+74     	; 0x1e88 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1e3e:	30 c0       	rjmp	.+96     	; 0x1ea0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1e40:	2b 81       	ldd	r18, Y+3	; 0x03
    1e42:	3c 81       	ldd	r19, Y+4	; 0x04
    1e44:	80 e4       	ldi	r24, 0x40	; 64
    1e46:	92 e4       	ldi	r25, 0x42	; 66
    1e48:	af e0       	ldi	r26, 0x0F	; 15
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	f9 01       	movw	r30, r18
    1e4e:	84 a3       	std	Z+36, r24	; 0x24
    1e50:	95 a3       	std	Z+37, r25	; 0x25
    1e52:	a6 a3       	std	Z+38, r26	; 0x26
    1e54:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e56:	30 c0       	rjmp	.+96     	; 0x1eb8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1e58:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5c:	80 e8       	ldi	r24, 0x80	; 128
    1e5e:	94 e8       	ldi	r25, 0x84	; 132
    1e60:	ae e1       	ldi	r26, 0x1E	; 30
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	f9 01       	movw	r30, r18
    1e66:	84 a3       	std	Z+36, r24	; 0x24
    1e68:	95 a3       	std	Z+37, r25	; 0x25
    1e6a:	a6 a3       	std	Z+38, r26	; 0x26
    1e6c:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e6e:	24 c0       	rjmp	.+72     	; 0x1eb8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1e70:	2b 81       	ldd	r18, Y+3	; 0x03
    1e72:	3c 81       	ldd	r19, Y+4	; 0x04
    1e74:	80 e8       	ldi	r24, 0x80	; 128
    1e76:	94 e8       	ldi	r25, 0x84	; 132
    1e78:	ae e1       	ldi	r26, 0x1E	; 30
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	84 a3       	std	Z+36, r24	; 0x24
    1e80:	95 a3       	std	Z+37, r25	; 0x25
    1e82:	a6 a3       	std	Z+38, r26	; 0x26
    1e84:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e86:	18 c0       	rjmp	.+48     	; 0x1eb8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	80 e8       	ldi	r24, 0x80	; 128
    1e8e:	94 e8       	ldi	r25, 0x84	; 132
    1e90:	ae e1       	ldi	r26, 0x1E	; 30
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	f9 01       	movw	r30, r18
    1e96:	84 a3       	std	Z+36, r24	; 0x24
    1e98:	95 a3       	std	Z+37, r25	; 0x25
    1e9a:	a6 a3       	std	Z+38, r26	; 0x26
    1e9c:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e9e:	0c c0       	rjmp	.+24     	; 0x1eb8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	80 e8       	ldi	r24, 0x80	; 128
    1ea6:	94 e8       	ldi	r25, 0x84	; 132
    1ea8:	ae e1       	ldi	r26, 0x1E	; 30
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	f9 01       	movw	r30, r18
    1eae:	84 a3       	std	Z+36, r24	; 0x24
    1eb0:	95 a3       	std	Z+37, r25	; 0x25
    1eb2:	a6 a3       	std	Z+38, r26	; 0x26
    1eb4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1eb6:	00 00       	nop
  }
}
    1eb8:	00 00       	nop
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	28 97       	sbiw	r28, 0x08	; 8
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	7c 83       	std	Y+4, r23	; 0x04
    1ee2:	6b 83       	std	Y+3, r22	; 0x03
    1ee4:	2d 83       	std	Y+5, r18	; 0x05
    1ee6:	3e 83       	std	Y+6, r19	; 0x06
    1ee8:	4f 83       	std	Y+7, r20	; 0x07
    1eea:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	a8 de       	rcall	.-688    	; 0x1c42 <_ZN15Adafruit_SensorC1Ev>
    1ef2:	2b ed       	ldi	r18, 0xDB	; 219
    1ef4:	32 e0       	ldi	r19, 0x02	; 2
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	fc 01       	movw	r30, r24
    1efc:	31 83       	std	Z+1, r19	; 0x01
    1efe:	20 83       	st	Z, r18
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	2b 81       	ldd	r18, Y+3	; 0x03
    1f06:	3c 81       	ldd	r19, Y+4	; 0x04
    1f08:	fc 01       	movw	r30, r24
    1f0a:	34 83       	std	Z+4, r19	; 0x04
    1f0c:	23 83       	std	Z+3, r18	; 0x03
    1f0e:	29 81       	ldd	r18, Y+1	; 0x01
    1f10:	3a 81       	ldd	r19, Y+2	; 0x02
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	af 81       	ldd	r26, Y+7	; 0x07
    1f18:	b8 85       	ldd	r27, Y+8	; 0x08
    1f1a:	f9 01       	movw	r30, r18
    1f1c:	85 83       	std	Z+5, r24	; 0x05
    1f1e:	96 83       	std	Z+6, r25	; 0x06
    1f20:	a7 83       	std	Z+7, r26	; 0x07
    1f22:	b0 87       	std	Z+8, r27	; 0x08
    1f24:	00 00       	nop
    1f26:	28 96       	adiw	r28, 0x08	; 8
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1f3e:	1f 92       	push	r1
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	7c 83       	std	Y+4, r23	; 0x04
    1f4a:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	44 e2       	ldi	r20, 0x24	; 36
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	0e 94 9a 33 	call	0x6734	; 0x6734 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1f5c:	84 e2       	ldi	r24, 0x24	; 36
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e0       	ldi	r26, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	2b 81       	ldd	r18, Y+3	; 0x03
    1f66:	3c 81       	ldd	r19, Y+4	; 0x04
    1f68:	f9 01       	movw	r30, r18
    1f6a:	80 83       	st	Z, r24
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	a2 83       	std	Z+2, r26	; 0x02
    1f70:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	fc 01       	movw	r30, r24
    1f78:	85 81       	ldd	r24, Z+5	; 0x05
    1f7a:	96 81       	ldd	r25, Z+6	; 0x06
    1f7c:	a7 81       	ldd	r26, Z+7	; 0x07
    1f7e:	b0 85       	ldd	r27, Z+8	; 0x08
    1f80:	2b 81       	ldd	r18, Y+3	; 0x03
    1f82:	3c 81       	ldd	r19, Y+4	; 0x04
    1f84:	f9 01       	movw	r30, r18
    1f86:	84 83       	std	Z+4, r24	; 0x04
    1f88:	95 83       	std	Z+5, r25	; 0x05
    1f8a:	a6 83       	std	Z+6, r26	; 0x06
    1f8c:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	8d e0       	ldi	r24, 0x0D	; 13
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a0 e0       	ldi	r26, 0x00	; 0
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	f9 01       	movw	r30, r18
    1f9c:	80 87       	std	Z+8, r24	; 0x08
    1f9e:	91 87       	std	Z+9, r25	; 0x09
    1fa0:	a2 87       	std	Z+10, r26	; 0x0a
    1fa2:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1fa4:	0e 94 ef 2c 	call	0x59de	; 0x59de <millis>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	80 8b       	std	Z+16, r24	; 0x10
    1fb4:	91 8b       	std	Z+17, r25	; 0x11
    1fb6:	a2 8b       	std	Z+18, r26	; 0x12
    1fb8:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	83 81       	ldd	r24, Z+3	; 0x03
    1fc2:	94 81       	ldd	r25, Z+4	; 0x04
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	d3 d8       	rcall	.-3674   	; 0x1170 <_ZN3DHT15readTemperatureEbb>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	84 8b       	std	Z+20, r24	; 0x14
    1fd6:	95 8b       	std	Z+21, r25	; 0x15
    1fd8:	a6 8b       	std	Z+22, r26	; 0x16
    1fda:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1ff2:	1f 92       	push	r1
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	7c 83       	std	Y+4, r23	; 0x04
    1ffe:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	48 e2       	ldi	r20, 0x28	; 40
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	0e 94 9a 33 	call	0x6734	; 0x6734 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	fc 01       	movw	r30, r24
    2016:	83 81       	ldd	r24, Z+3	; 0x03
    2018:	94 81       	ldd	r25, Z+4	; 0x04
    201a:	2b 81       	ldd	r18, Y+3	; 0x03
    201c:	3c 81       	ldd	r19, Y+4	; 0x04
    201e:	b9 01       	movw	r22, r18
    2020:	8f de       	rcall	.-738    	; 0x1d40 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	f9 01       	movw	r30, r18
    2030:	84 87       	std	Z+12, r24	; 0x0c
    2032:	95 87       	std	Z+13, r25	; 0x0d
    2034:	a6 87       	std	Z+14, r26	; 0x0e
    2036:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	fc 01       	movw	r30, r24
    203e:	85 81       	ldd	r24, Z+5	; 0x05
    2040:	96 81       	ldd	r25, Z+6	; 0x06
    2042:	a7 81       	ldd	r26, Z+7	; 0x07
    2044:	b0 85       	ldd	r27, Z+8	; 0x08
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	3c 81       	ldd	r19, Y+4	; 0x04
    204a:	f9 01       	movw	r30, r18
    204c:	80 8b       	std	Z+16, r24	; 0x10
    204e:	91 8b       	std	Z+17, r25	; 0x11
    2050:	a2 8b       	std	Z+18, r26	; 0x12
    2052:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    2054:	2b 81       	ldd	r18, Y+3	; 0x03
    2056:	3c 81       	ldd	r19, Y+4	; 0x04
    2058:	8d e0       	ldi	r24, 0x0D	; 13
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	f9 01       	movw	r30, r18
    2062:	84 8b       	std	Z+20, r24	; 0x14
    2064:	95 8b       	std	Z+21, r25	; 0x15
    2066:	a6 8b       	std	Z+22, r26	; 0x16
    2068:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	fc 01       	movw	r30, r24
    2070:	83 81       	ldd	r24, Z+3	; 0x03
    2072:	94 81       	ldd	r25, Z+4	; 0x04
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	b9 01       	movw	r22, r18
    207a:	c3 de       	rcall	.-634    	; 0x1e02 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	fc 01       	movw	r30, r24
    2082:	83 81       	ldd	r24, Z+3	; 0x03
    2084:	94 81       	ldd	r25, Z+4	; 0x04
    2086:	fc 01       	movw	r30, r24
    2088:	83 89       	ldd	r24, Z+19	; 0x13
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	8c 30       	cpi	r24, 0x0C	; 12
    2090:	91 05       	cpc	r25, r1
    2092:	61 f1       	breq	.+88     	; 0x20ec <__DATA_REGION_LENGTH__+0xec>
    2094:	8d 30       	cpi	r24, 0x0D	; 13
    2096:	91 05       	cpc	r25, r1
    2098:	1c f4       	brge	.+6      	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
    209a:	0b 97       	sbiw	r24, 0x0b	; 11
    209c:	49 f0       	breq	.+18     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    209e:	8c c0       	rjmp	.+280    	; 0x21b8 <__DATA_REGION_LENGTH__+0x1b8>
    20a0:	85 31       	cpi	r24, 0x15	; 21
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    20a6:	44 c0       	rjmp	.+136    	; 0x2130 <__DATA_REGION_LENGTH__+0x130>
    20a8:	46 97       	sbiw	r24, 0x16	; 22
    20aa:	09 f4       	brne	.+2      	; 0x20ae <__DATA_REGION_LENGTH__+0xae>
    20ac:	63 c0       	rjmp	.+198    	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
    20ae:	84 c0       	rjmp	.+264    	; 0x21b8 <__DATA_REGION_LENGTH__+0x1b8>
  case DHT11:
    sensor->max_value = 50.0F;
    20b0:	2b 81       	ldd	r18, Y+3	; 0x03
    20b2:	3c 81       	ldd	r19, Y+4	; 0x04
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a8 e4       	ldi	r26, 0x48	; 72
    20ba:	b2 e4       	ldi	r27, 0x42	; 66
    20bc:	f9 01       	movw	r30, r18
    20be:	80 8f       	std	Z+24, r24	; 0x18
    20c0:	91 8f       	std	Z+25, r25	; 0x19
    20c2:	a2 8f       	std	Z+26, r26	; 0x1a
    20c4:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	fc 01       	movw	r30, r24
    20cc:	14 8e       	std	Z+28, r1	; 0x1c
    20ce:	15 8e       	std	Z+29, r1	; 0x1d
    20d0:	16 8e       	std	Z+30, r1	; 0x1e
    20d2:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e0       	ldi	r26, 0x00	; 0
    20de:	b0 e4       	ldi	r27, 0x40	; 64
    20e0:	f9 01       	movw	r30, r18
    20e2:	80 a3       	std	Z+32, r24	; 0x20
    20e4:	91 a3       	std	Z+33, r25	; 0x21
    20e6:	a2 a3       	std	Z+34, r26	; 0x22
    20e8:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    20ea:	7c c0       	rjmp	.+248    	; 0x21e4 <__DATA_REGION_LENGTH__+0x1e4>
  case DHT12:
    sensor->max_value = 60.0F;
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	3c 81       	ldd	r19, Y+4	; 0x04
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e7       	ldi	r26, 0x70	; 112
    20f6:	b2 e4       	ldi	r27, 0x42	; 66
    20f8:	f9 01       	movw	r30, r18
    20fa:	80 8f       	std	Z+24, r24	; 0x18
    20fc:	91 8f       	std	Z+25, r25	; 0x19
    20fe:	a2 8f       	std	Z+26, r26	; 0x1a
    2100:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    2102:	2b 81       	ldd	r18, Y+3	; 0x03
    2104:	3c 81       	ldd	r19, Y+4	; 0x04
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 ea       	ldi	r26, 0xA0	; 160
    210c:	b1 ec       	ldi	r27, 0xC1	; 193
    210e:	f9 01       	movw	r30, r18
    2110:	84 8f       	std	Z+28, r24	; 0x1c
    2112:	95 8f       	std	Z+29, r25	; 0x1d
    2114:	a6 8f       	std	Z+30, r26	; 0x1e
    2116:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    2118:	2b 81       	ldd	r18, Y+3	; 0x03
    211a:	3c 81       	ldd	r19, Y+4	; 0x04
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	a0 e0       	ldi	r26, 0x00	; 0
    2122:	bf e3       	ldi	r27, 0x3F	; 63
    2124:	f9 01       	movw	r30, r18
    2126:	80 a3       	std	Z+32, r24	; 0x20
    2128:	91 a3       	std	Z+33, r25	; 0x21
    212a:	a2 a3       	std	Z+34, r26	; 0x22
    212c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    212e:	5a c0       	rjmp	.+180    	; 0x21e4 <__DATA_REGION_LENGTH__+0x1e4>
  case DHT21:
    sensor->max_value = 80.0F;
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	3c 81       	ldd	r19, Y+4	; 0x04
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 ea       	ldi	r26, 0xA0	; 160
    213a:	b2 e4       	ldi	r27, 0x42	; 66
    213c:	f9 01       	movw	r30, r18
    213e:	80 8f       	std	Z+24, r24	; 0x18
    2140:	91 8f       	std	Z+25, r25	; 0x19
    2142:	a2 8f       	std	Z+26, r26	; 0x1a
    2144:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e2       	ldi	r26, 0x20	; 32
    2150:	b2 ec       	ldi	r27, 0xC2	; 194
    2152:	f9 01       	movw	r30, r18
    2154:	84 8f       	std	Z+28, r24	; 0x1c
    2156:	95 8f       	std	Z+29, r25	; 0x1d
    2158:	a6 8f       	std	Z+30, r26	; 0x1e
    215a:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	8d ec       	ldi	r24, 0xCD	; 205
    2162:	9c ec       	ldi	r25, 0xCC	; 204
    2164:	ac ec       	ldi	r26, 0xCC	; 204
    2166:	bd e3       	ldi	r27, 0x3D	; 61
    2168:	f9 01       	movw	r30, r18
    216a:	80 a3       	std	Z+32, r24	; 0x20
    216c:	91 a3       	std	Z+33, r25	; 0x21
    216e:	a2 a3       	std	Z+34, r26	; 0x22
    2170:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2172:	38 c0       	rjmp	.+112    	; 0x21e4 <__DATA_REGION_LENGTH__+0x1e4>
  case DHT22:
    sensor->max_value = 125.0F;
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	aa ef       	ldi	r26, 0xFA	; 250
    217e:	b2 e4       	ldi	r27, 0x42	; 66
    2180:	f9 01       	movw	r30, r18
    2182:	80 8f       	std	Z+24, r24	; 0x18
    2184:	91 8f       	std	Z+25, r25	; 0x19
    2186:	a2 8f       	std	Z+26, r26	; 0x1a
    2188:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    218a:	2b 81       	ldd	r18, Y+3	; 0x03
    218c:	3c 81       	ldd	r19, Y+4	; 0x04
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a0 e2       	ldi	r26, 0x20	; 32
    2194:	b2 ec       	ldi	r27, 0xC2	; 194
    2196:	f9 01       	movw	r30, r18
    2198:	84 8f       	std	Z+28, r24	; 0x1c
    219a:	95 8f       	std	Z+29, r25	; 0x1d
    219c:	a6 8f       	std	Z+30, r26	; 0x1e
    219e:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    21a0:	2b 81       	ldd	r18, Y+3	; 0x03
    21a2:	3c 81       	ldd	r19, Y+4	; 0x04
    21a4:	8d ec       	ldi	r24, 0xCD	; 205
    21a6:	9c ec       	ldi	r25, 0xCC	; 204
    21a8:	ac ec       	ldi	r26, 0xCC	; 204
    21aa:	bd e3       	ldi	r27, 0x3D	; 61
    21ac:	f9 01       	movw	r30, r18
    21ae:	80 a3       	std	Z+32, r24	; 0x20
    21b0:	91 a3       	std	Z+33, r25	; 0x21
    21b2:	a2 a3       	std	Z+34, r26	; 0x22
    21b4:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    21b6:	16 c0       	rjmp	.+44     	; 0x21e4 <__DATA_REGION_LENGTH__+0x1e4>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	fc 01       	movw	r30, r24
    21be:	10 8e       	std	Z+24, r1	; 0x18
    21c0:	11 8e       	std	Z+25, r1	; 0x19
    21c2:	12 8e       	std	Z+26, r1	; 0x1a
    21c4:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	fc 01       	movw	r30, r24
    21cc:	14 8e       	std	Z+28, r1	; 0x1c
    21ce:	15 8e       	std	Z+29, r1	; 0x1d
    21d0:	16 8e       	std	Z+30, r1	; 0x1e
    21d2:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	fc 01       	movw	r30, r24
    21da:	10 a2       	std	Z+32, r1	; 0x20
    21dc:	11 a2       	std	Z+33, r1	; 0x21
    21de:	12 a2       	std	Z+34, r1	; 0x22
    21e0:	13 a2       	std	Z+35, r1	; 0x23
    break;
    21e2:	00 00       	nop
  }
}
    21e4:	00 00       	nop
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	28 97       	sbiw	r28, 0x08	; 8
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	7c 83       	std	Y+4, r23	; 0x04
    220e:	6b 83       	std	Y+3, r22	; 0x03
    2210:	2d 83       	std	Y+5, r18	; 0x05
    2212:	3e 83       	std	Y+6, r19	; 0x06
    2214:	4f 83       	std	Y+7, r20	; 0x07
    2216:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	12 dd       	rcall	.-1500   	; 0x1c42 <_ZN15Adafruit_SensorC1Ev>
    221e:	2d ec       	ldi	r18, 0xCD	; 205
    2220:	32 e0       	ldi	r19, 0x02	; 2
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	fc 01       	movw	r30, r24
    2228:	31 83       	std	Z+1, r19	; 0x01
    222a:	20 83       	st	Z, r18
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	fc 01       	movw	r30, r24
    2236:	34 83       	std	Z+4, r19	; 0x04
    2238:	23 83       	std	Z+3, r18	; 0x03
    223a:	29 81       	ldd	r18, Y+1	; 0x01
    223c:	3a 81       	ldd	r19, Y+2	; 0x02
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	af 81       	ldd	r26, Y+7	; 0x07
    2244:	b8 85       	ldd	r27, Y+8	; 0x08
    2246:	f9 01       	movw	r30, r18
    2248:	85 83       	std	Z+5, r24	; 0x05
    224a:	96 83       	std	Z+6, r25	; 0x06
    224c:	a7 83       	std	Z+7, r26	; 0x07
    224e:	b0 87       	std	Z+8, r27	; 0x08
    2250:	00 00       	nop
    2252:	28 96       	adiw	r28, 0x08	; 8
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	00 d0       	rcall	.+0      	; 0x226a <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    226a:	1f 92       	push	r1
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	7c 83       	std	Y+4, r23	; 0x04
    2276:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	44 e2       	ldi	r20, 0x24	; 36
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	0e 94 9a 33 	call	0x6734	; 0x6734 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    2288:	84 e2       	ldi	r24, 0x24	; 36
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e0       	ldi	r26, 0x00	; 0
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	2b 81       	ldd	r18, Y+3	; 0x03
    2292:	3c 81       	ldd	r19, Y+4	; 0x04
    2294:	f9 01       	movw	r30, r18
    2296:	80 83       	st	Z, r24
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	a2 83       	std	Z+2, r26	; 0x02
    229c:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	fc 01       	movw	r30, r24
    22a4:	85 81       	ldd	r24, Z+5	; 0x05
    22a6:	96 81       	ldd	r25, Z+6	; 0x06
    22a8:	a7 81       	ldd	r26, Z+7	; 0x07
    22aa:	b0 85       	ldd	r27, Z+8	; 0x08
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	f9 01       	movw	r30, r18
    22b2:	84 83       	std	Z+4, r24	; 0x04
    22b4:	95 83       	std	Z+5, r25	; 0x05
    22b6:	a6 83       	std	Z+6, r26	; 0x06
    22b8:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    22ba:	2b 81       	ldd	r18, Y+3	; 0x03
    22bc:	3c 81       	ldd	r19, Y+4	; 0x04
    22be:	8c e0       	ldi	r24, 0x0C	; 12
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	a0 e0       	ldi	r26, 0x00	; 0
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	f9 01       	movw	r30, r18
    22c8:	80 87       	std	Z+8, r24	; 0x08
    22ca:	91 87       	std	Z+9, r25	; 0x09
    22cc:	a2 87       	std	Z+10, r26	; 0x0a
    22ce:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    22d0:	0e 94 ef 2c 	call	0x59de	; 0x59de <millis>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	3c 81       	ldd	r19, Y+4	; 0x04
    22dc:	f9 01       	movw	r30, r18
    22de:	80 8b       	std	Z+16, r24	; 0x10
    22e0:	91 8b       	std	Z+17, r25	; 0x11
    22e2:	a2 8b       	std	Z+18, r26	; 0x12
    22e4:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	fc 01       	movw	r30, r24
    22ec:	83 81       	ldd	r24, Z+3	; 0x03
    22ee:	94 81       	ldd	r25, Z+4	; 0x04
    22f0:	60 e0       	ldi	r22, 0x00	; 0
    22f2:	cb d8       	rcall	.-3690   	; 0x148a <_ZN3DHT12readHumidityEb>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	2b 81       	ldd	r18, Y+3	; 0x03
    22fa:	3c 81       	ldd	r19, Y+4	; 0x04
    22fc:	f9 01       	movw	r30, r18
    22fe:	84 8b       	std	Z+20, r24	; 0x14
    2300:	95 8b       	std	Z+21, r25	; 0x15
    2302:	a6 8b       	std	Z+22, r26	; 0x16
    2304:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2306:	81 e0       	ldi	r24, 0x01	; 1
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	08 95       	ret

00002316 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	00 d0       	rcall	.+0      	; 0x231c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    231c:	1f 92       	push	r1
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	7c 83       	std	Y+4, r23	; 0x04
    2328:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	48 e2       	ldi	r20, 0x28	; 40
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	0e 94 9a 33 	call	0x6734	; 0x6734 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	fc 01       	movw	r30, r24
    2340:	83 81       	ldd	r24, Z+3	; 0x03
    2342:	94 81       	ldd	r25, Z+4	; 0x04
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	b9 01       	movw	r22, r18
    234a:	fa dc       	rcall	.-1548   	; 0x1d40 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    234c:	2b 81       	ldd	r18, Y+3	; 0x03
    234e:	3c 81       	ldd	r19, Y+4	; 0x04
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	f9 01       	movw	r30, r18
    235a:	84 87       	std	Z+12, r24	; 0x0c
    235c:	95 87       	std	Z+13, r25	; 0x0d
    235e:	a6 87       	std	Z+14, r26	; 0x0e
    2360:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	85 81       	ldd	r24, Z+5	; 0x05
    236a:	96 81       	ldd	r25, Z+6	; 0x06
    236c:	a7 81       	ldd	r26, Z+7	; 0x07
    236e:	b0 85       	ldd	r27, Z+8	; 0x08
    2370:	2b 81       	ldd	r18, Y+3	; 0x03
    2372:	3c 81       	ldd	r19, Y+4	; 0x04
    2374:	f9 01       	movw	r30, r18
    2376:	80 8b       	std	Z+16, r24	; 0x10
    2378:	91 8b       	std	Z+17, r25	; 0x11
    237a:	a2 8b       	std	Z+18, r26	; 0x12
    237c:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    237e:	2b 81       	ldd	r18, Y+3	; 0x03
    2380:	3c 81       	ldd	r19, Y+4	; 0x04
    2382:	8c e0       	ldi	r24, 0x0C	; 12
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	84 8b       	std	Z+20, r24	; 0x14
    238e:	95 8b       	std	Z+21, r25	; 0x15
    2390:	a6 8b       	std	Z+22, r26	; 0x16
    2392:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	fc 01       	movw	r30, r24
    239a:	83 81       	ldd	r24, Z+3	; 0x03
    239c:	94 81       	ldd	r25, Z+4	; 0x04
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	b9 01       	movw	r22, r18
    23a4:	2e dd       	rcall	.-1444   	; 0x1e02 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	fc 01       	movw	r30, r24
    23ac:	83 81       	ldd	r24, Z+3	; 0x03
    23ae:	94 81       	ldd	r25, Z+4	; 0x04
    23b0:	fc 01       	movw	r30, r24
    23b2:	83 89       	ldd	r24, Z+19	; 0x13
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	8c 30       	cpi	r24, 0x0C	; 12
    23ba:	91 05       	cpc	r25, r1
    23bc:	81 f1       	breq	.+96     	; 0x241e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    23be:	8d 30       	cpi	r24, 0x0D	; 13
    23c0:	91 05       	cpc	r25, r1
    23c2:	1c f4       	brge	.+6      	; 0x23ca <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    23c4:	0b 97       	sbiw	r24, 0x0b	; 11
    23c6:	49 f0       	breq	.+18     	; 0x23da <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    23c8:	88 c0       	rjmp	.+272    	; 0x24da <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    23ca:	85 31       	cpi	r24, 0x15	; 21
    23cc:	91 05       	cpc	r25, r1
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    23d0:	48 c0       	rjmp	.+144    	; 0x2462 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    23d2:	46 97       	sbiw	r24, 0x16	; 22
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    23d6:	63 c0       	rjmp	.+198    	; 0x249e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    23d8:	80 c0       	rjmp	.+256    	; 0x24da <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    23da:	2b 81       	ldd	r18, Y+3	; 0x03
    23dc:	3c 81       	ldd	r19, Y+4	; 0x04
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 ea       	ldi	r26, 0xA0	; 160
    23e4:	b2 e4       	ldi	r27, 0x42	; 66
    23e6:	f9 01       	movw	r30, r18
    23e8:	80 8f       	std	Z+24, r24	; 0x18
    23ea:	91 8f       	std	Z+25, r25	; 0x19
    23ec:	a2 8f       	std	Z+26, r26	; 0x1a
    23ee:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    23f0:	2b 81       	ldd	r18, Y+3	; 0x03
    23f2:	3c 81       	ldd	r19, Y+4	; 0x04
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 ea       	ldi	r26, 0xA0	; 160
    23fa:	b1 e4       	ldi	r27, 0x41	; 65
    23fc:	f9 01       	movw	r30, r18
    23fe:	84 8f       	std	Z+28, r24	; 0x1c
    2400:	95 8f       	std	Z+29, r25	; 0x1d
    2402:	a6 8f       	std	Z+30, r26	; 0x1e
    2404:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2406:	2b 81       	ldd	r18, Y+3	; 0x03
    2408:	3c 81       	ldd	r19, Y+4	; 0x04
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a0 ea       	ldi	r26, 0xA0	; 160
    2410:	b0 e4       	ldi	r27, 0x40	; 64
    2412:	f9 01       	movw	r30, r18
    2414:	80 a3       	std	Z+32, r24	; 0x20
    2416:	91 a3       	std	Z+33, r25	; 0x21
    2418:	a2 a3       	std	Z+34, r26	; 0x22
    241a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    241c:	74 c0       	rjmp	.+232    	; 0x2506 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	ae eb       	ldi	r26, 0xBE	; 190
    2428:	b2 e4       	ldi	r27, 0x42	; 66
    242a:	f9 01       	movw	r30, r18
    242c:	80 8f       	std	Z+24, r24	; 0x18
    242e:	91 8f       	std	Z+25, r25	; 0x19
    2430:	a2 8f       	std	Z+26, r26	; 0x1a
    2432:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2434:	2b 81       	ldd	r18, Y+3	; 0x03
    2436:	3c 81       	ldd	r19, Y+4	; 0x04
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 ea       	ldi	r26, 0xA0	; 160
    243e:	b1 e4       	ldi	r27, 0x41	; 65
    2440:	f9 01       	movw	r30, r18
    2442:	84 8f       	std	Z+28, r24	; 0x1c
    2444:	95 8f       	std	Z+29, r25	; 0x1d
    2446:	a6 8f       	std	Z+30, r26	; 0x1e
    2448:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 ea       	ldi	r26, 0xA0	; 160
    2454:	b0 e4       	ldi	r27, 0x40	; 64
    2456:	f9 01       	movw	r30, r18
    2458:	80 a3       	std	Z+32, r24	; 0x20
    245a:	91 a3       	std	Z+33, r25	; 0x21
    245c:	a2 a3       	std	Z+34, r26	; 0x22
    245e:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2460:	52 c0       	rjmp	.+164    	; 0x2506 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    2462:	2b 81       	ldd	r18, Y+3	; 0x03
    2464:	3c 81       	ldd	r19, Y+4	; 0x04
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a8 ec       	ldi	r26, 0xC8	; 200
    246c:	b2 e4       	ldi	r27, 0x42	; 66
    246e:	f9 01       	movw	r30, r18
    2470:	80 8f       	std	Z+24, r24	; 0x18
    2472:	91 8f       	std	Z+25, r25	; 0x19
    2474:	a2 8f       	std	Z+26, r26	; 0x1a
    2476:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	fc 01       	movw	r30, r24
    247e:	14 8e       	std	Z+28, r1	; 0x1c
    2480:	15 8e       	std	Z+29, r1	; 0x1d
    2482:	16 8e       	std	Z+30, r1	; 0x1e
    2484:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    2486:	2b 81       	ldd	r18, Y+3	; 0x03
    2488:	3c 81       	ldd	r19, Y+4	; 0x04
    248a:	8d ec       	ldi	r24, 0xCD	; 205
    248c:	9c ec       	ldi	r25, 0xCC	; 204
    248e:	ac ec       	ldi	r26, 0xCC	; 204
    2490:	bd e3       	ldi	r27, 0x3D	; 61
    2492:	f9 01       	movw	r30, r18
    2494:	80 a3       	std	Z+32, r24	; 0x20
    2496:	91 a3       	std	Z+33, r25	; 0x21
    2498:	a2 a3       	std	Z+34, r26	; 0x22
    249a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    249c:	34 c0       	rjmp	.+104    	; 0x2506 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    249e:	2b 81       	ldd	r18, Y+3	; 0x03
    24a0:	3c 81       	ldd	r19, Y+4	; 0x04
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a8 ec       	ldi	r26, 0xC8	; 200
    24a8:	b2 e4       	ldi	r27, 0x42	; 66
    24aa:	f9 01       	movw	r30, r18
    24ac:	80 8f       	std	Z+24, r24	; 0x18
    24ae:	91 8f       	std	Z+25, r25	; 0x19
    24b0:	a2 8f       	std	Z+26, r26	; 0x1a
    24b2:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	fc 01       	movw	r30, r24
    24ba:	14 8e       	std	Z+28, r1	; 0x1c
    24bc:	15 8e       	std	Z+29, r1	; 0x1d
    24be:	16 8e       	std	Z+30, r1	; 0x1e
    24c0:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    24c2:	2b 81       	ldd	r18, Y+3	; 0x03
    24c4:	3c 81       	ldd	r19, Y+4	; 0x04
    24c6:	8d ec       	ldi	r24, 0xCD	; 205
    24c8:	9c ec       	ldi	r25, 0xCC	; 204
    24ca:	ac ec       	ldi	r26, 0xCC	; 204
    24cc:	bd e3       	ldi	r27, 0x3D	; 61
    24ce:	f9 01       	movw	r30, r18
    24d0:	80 a3       	std	Z+32, r24	; 0x20
    24d2:	91 a3       	std	Z+33, r25	; 0x21
    24d4:	a2 a3       	std	Z+34, r26	; 0x22
    24d6:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    24d8:	16 c0       	rjmp	.+44     	; 0x2506 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	fc 01       	movw	r30, r24
    24e0:	10 8e       	std	Z+24, r1	; 0x18
    24e2:	11 8e       	std	Z+25, r1	; 0x19
    24e4:	12 8e       	std	Z+26, r1	; 0x1a
    24e6:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	fc 01       	movw	r30, r24
    24ee:	14 8e       	std	Z+28, r1	; 0x1c
    24f0:	15 8e       	std	Z+29, r1	; 0x1d
    24f2:	16 8e       	std	Z+30, r1	; 0x1e
    24f4:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	fc 01       	movw	r30, r24
    24fc:	10 a2       	std	Z+32, r1	; 0x20
    24fe:	11 a2       	std	Z+33, r1	; 0x21
    2500:	12 a2       	std	Z+34, r1	; 0x22
    2502:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2504:	00 00       	nop
  }
}
    2506:	00 00       	nop
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	08 95       	ret

00002516 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2516:	0f 93       	push	r16
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	28 97       	sbiw	r28, 0x08	; 8
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	4b 83       	std	Y+3, r20	; 0x03
    2532:	5c 83       	std	Y+4, r21	; 0x04
    2534:	6d 83       	std	Y+5, r22	; 0x05
    2536:	7e 83       	std	Y+6, r23	; 0x06
    2538:	2f 83       	std	Y+7, r18	; 0x07
    253a:	08 87       	std	Y+8, r16	; 0x08
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	ad 81       	ldd	r26, Y+5	; 0x05
    2542:	be 81       	ldd	r27, Y+6	; 0x06
    2544:	e9 81       	ldd	r30, Y+1	; 0x01
    2546:	fa 81       	ldd	r31, Y+2	; 0x02
    2548:	08 85       	ldd	r16, Y+8	; 0x08
    254a:	2f 81       	ldd	r18, Y+7	; 0x07
    254c:	ac 01       	movw	r20, r24
    254e:	bd 01       	movw	r22, r26
    2550:	cf 01       	movw	r24, r30
    2552:	0b d0       	rcall	.+22     	; 0x256a <_ZN11SPISettings16init_MightInlineEmhh>
    2554:	00 00       	nop
    2556:	28 96       	adiw	r28, 0x08	; 8
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <_ZN11SPISettings16init_MightInlineEmhh>:
    256a:	0f 93       	push	r16
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	65 97       	sbiw	r28, 0x15	; 21
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	9f 87       	std	Y+15, r25	; 0x0f
    2582:	8e 87       	std	Y+14, r24	; 0x0e
    2584:	48 8b       	std	Y+16, r20	; 0x10
    2586:	59 8b       	std	Y+17, r21	; 0x11
    2588:	6a 8b       	std	Y+18, r22	; 0x12
    258a:	7b 8b       	std	Y+19, r23	; 0x13
    258c:	2c 8b       	std	Y+20, r18	; 0x14
    258e:	0d 8b       	std	Y+21, r16	; 0x15
    2590:	8e 85       	ldd	r24, Y+14	; 0x0e
    2592:	9f 85       	ldd	r25, Y+15	; 0x0f
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	88 89       	ldd	r24, Y+16	; 0x10
    259a:	99 89       	ldd	r25, Y+17	; 0x11
    259c:	aa 89       	ldd	r26, Y+18	; 0x12
    259e:	bb 89       	ldd	r27, Y+19	; 0x13
    25a0:	8b 83       	std	Y+3, r24	; 0x03
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	ad 83       	std	Y+5, r26	; 0x05
    25a6:	be 83       	std	Y+6, r27	; 0x06
    25a8:	8c 89       	ldd	r24, Y+20	; 0x14
    25aa:	8f 83       	std	Y+7, r24	; 0x07
    25ac:	8d 89       	ldd	r24, Y+21	; 0x15
    25ae:	88 87       	std	Y+8, r24	; 0x08
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	92 e1       	ldi	r25, 0x12	; 18
    25b4:	aa e7       	ldi	r26, 0x7A	; 122
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	89 87       	std	Y+9, r24	; 0x09
    25ba:	9a 87       	std	Y+10, r25	; 0x0a
    25bc:	ab 87       	std	Y+11, r26	; 0x0b
    25be:	bc 87       	std	Y+12, r27	; 0x0c
    25c0:	1d 86       	std	Y+13, r1	; 0x0d
    25c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c4:	86 30       	cpi	r24, 0x06	; 6
    25c6:	e8 f4       	brcc	.+58     	; 0x2602 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    25c8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ca:	3c 81       	ldd	r19, Y+4	; 0x04
    25cc:	4d 81       	ldd	r20, Y+5	; 0x05
    25ce:	5e 81       	ldd	r21, Y+6	; 0x06
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    25d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    25d8:	28 17       	cp	r18, r24
    25da:	39 07       	cpc	r19, r25
    25dc:	4a 07       	cpc	r20, r26
    25de:	5b 07       	cpc	r21, r27
    25e0:	80 f4       	brcc	.+32     	; 0x2602 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    25e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    25ea:	b6 95       	lsr	r27
    25ec:	a7 95       	ror	r26
    25ee:	97 95       	ror	r25
    25f0:	87 95       	ror	r24
    25f2:	89 87       	std	Y+9, r24	; 0x09
    25f4:	9a 87       	std	Y+10, r25	; 0x0a
    25f6:	ab 87       	std	Y+11, r26	; 0x0b
    25f8:	bc 87       	std	Y+12, r27	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	8d 87       	std	Y+13, r24	; 0x0d
    2600:	e0 cf       	rjmp	.-64     	; 0x25c2 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	86 30       	cpi	r24, 0x06	; 6
    2606:	11 f4       	brne	.+4      	; 0x260c <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2608:	87 e0       	ldi	r24, 0x07	; 7
    260a:	8d 87       	std	Y+13, r24	; 0x0d
    260c:	9d 85       	ldd	r25, Y+13	; 0x0d
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	89 27       	eor	r24, r25
    2612:	8d 87       	std	Y+13, r24	; 0x0d
    2614:	8f 81       	ldd	r24, Y+7	; 0x07
    2616:	88 23       	and	r24, r24
    2618:	11 f4       	brne	.+4      	; 0x261e <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    261a:	80 e7       	ldi	r24, 0x70	; 112
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    261e:	80 e5       	ldi	r24, 0x50	; 80
    2620:	98 85       	ldd	r25, Y+8	; 0x08
    2622:	9c 70       	andi	r25, 0x0C	; 12
    2624:	29 2f       	mov	r18, r25
    2626:	28 2b       	or	r18, r24
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	95 95       	asr	r25
    2630:	87 95       	ror	r24
    2632:	83 70       	andi	r24, 0x03	; 3
    2634:	82 2b       	or	r24, r18
    2636:	28 2f       	mov	r18, r24
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	28 2f       	mov	r18, r24
    2644:	21 70       	andi	r18, 0x01	; 1
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	fc 01       	movw	r30, r24
    264c:	21 83       	std	Z+1, r18	; 0x01
    264e:	00 00       	nop
    2650:	65 96       	adiw	r28, 0x15	; 21
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	00 d0       	rcall	.+0      	; 0x266a <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	9b 83       	std	Y+3, r25	; 0x03
    2670:	8a 83       	std	Y+2, r24	; 0x02
    2672:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZN8SPIClass13interruptModeE>
    2676:	88 23       	and	r24, r24
    2678:	31 f1       	breq	.+76     	; 0x26c6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    267a:	8f e5       	ldi	r24, 0x5F	; 95
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	fc 01       	movw	r30, r24
    2680:	80 81       	ld	r24, Z
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	f8 94       	cli
    2686:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZN8SPIClass13interruptModeE>
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	c9 f4       	brne	.+50     	; 0x26c0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    268e:	8d e3       	ldi	r24, 0x3D	; 61
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	fc 01       	movw	r30, r24
    2694:	80 81       	ld	r24, Z
    2696:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZN8SPIClass13interruptSaveE>
    269a:	8d e3       	ldi	r24, 0x3D	; 61
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	2d e3       	ldi	r18, 0x3D	; 61
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	f9 01       	movw	r30, r18
    26a4:	20 81       	ld	r18, Z
    26a6:	32 2f       	mov	r19, r18
    26a8:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <_ZN8SPIClass13interruptMaskE>
    26ac:	20 95       	com	r18
    26ae:	23 23       	and	r18, r19
    26b0:	fc 01       	movw	r30, r24
    26b2:	20 83       	st	Z, r18
    26b4:	8f e5       	ldi	r24, 0x5F	; 95
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	29 81       	ldd	r18, Y+1	; 0x01
    26ba:	fc 01       	movw	r30, r24
    26bc:	20 83       	st	Z, r18
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZN8SPIClass13interruptSaveE>
    26c6:	8c e4       	ldi	r24, 0x4C	; 76
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	2a 81       	ldd	r18, Y+2	; 0x02
    26cc:	fc 01       	movw	r30, r24
    26ce:	20 83       	st	Z, r18
    26d0:	8d e4       	ldi	r24, 0x4D	; 77
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	2b 81       	ldd	r18, Y+3	; 0x03
    26d6:	fc 01       	movw	r30, r24
    26d8:	20 83       	st	Z, r18
    26da:	00 00       	nop
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <_ZN8SPIClass8transferEh>:
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	1f 92       	push	r1
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	8e e4       	ldi	r24, 0x4E	; 78
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	29 81       	ldd	r18, Y+1	; 0x01
    26fa:	fc 01       	movw	r30, r24
    26fc:	20 83       	st	Z, r18
    26fe:	00 00       	nop
    2700:	8d e4       	ldi	r24, 0x4D	; 77
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	fc 01       	movw	r30, r24
    2706:	80 81       	ld	r24, Z
    2708:	80 95       	com	r24
    270a:	88 1f       	adc	r24, r24
    270c:	88 27       	eor	r24, r24
    270e:	88 1f       	adc	r24, r24
    2710:	88 23       	and	r24, r24
    2712:	09 f0       	breq	.+2      	; 0x2716 <_ZN8SPIClass8transferEh+0x2e>
    2714:	f5 cf       	rjmp	.-22     	; 0x2700 <_ZN8SPIClass8transferEh+0x18>
    2716:	8e e4       	ldi	r24, 0x4E	; 78
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	fc 01       	movw	r30, r24
    271c:	80 81       	ld	r24, Z
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	08 95       	ret

00002726 <_ZN8SPIClass14endTransactionEv>:
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	1f 92       	push	r1
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZN8SPIClass13interruptModeE>
    2734:	88 23       	and	r24, r24
    2736:	e1 f0       	breq	.+56     	; 0x2770 <_ZN8SPIClass14endTransactionEv+0x4a>
    2738:	8f e5       	ldi	r24, 0x5F	; 95
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	fc 01       	movw	r30, r24
    273e:	80 81       	ld	r24, Z
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	f8 94       	cli
    2744:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZN8SPIClass13interruptModeE>
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	61 f4       	brne	.+24     	; 0x2764 <_ZN8SPIClass14endTransactionEv+0x3e>
    274c:	8d e3       	ldi	r24, 0x3D	; 61
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <_ZN8SPIClass13interruptSaveE>
    2754:	fc 01       	movw	r30, r24
    2756:	20 83       	st	Z, r18
    2758:	8f e5       	ldi	r24, 0x5F	; 95
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	29 81       	ldd	r18, Y+1	; 0x01
    275e:	fc 01       	movw	r30, r24
    2760:	20 83       	st	Z, r18
    2762:	06 c0       	rjmp	.+12     	; 0x2770 <_ZN8SPIClass14endTransactionEv+0x4a>
    2764:	8f e5       	ldi	r24, 0x5F	; 95
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <_ZN8SPIClass13interruptSaveE>
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
    2770:	00 00       	nop
    2772:	0f 90       	pop	r0
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <_ZN7MFRC522C1Ehh>:
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	00 d0       	rcall	.+0      	; 0x2780 <_ZN7MFRC522C1Ehh+0x6>
    2780:	1f 92       	push	r1
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	6b 83       	std	Y+3, r22	; 0x03
    278c:	4c 83       	std	Y+4, r20	; 0x04
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	2b 81       	ldd	r18, Y+3	; 0x03
    2794:	fc 01       	movw	r30, r24
    2796:	24 87       	std	Z+12, r18	; 0x0c
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	2c 81       	ldd	r18, Y+4	; 0x04
    279e:	fc 01       	movw	r30, r24
    27a0:	25 87       	std	Z+13, r18	; 0x0d
    27a2:	00 00       	nop
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	08 95       	ret

000027b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    27b2:	0f 93       	push	r16
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	6d 83       	std	Y+5, r22	; 0x05
    27c6:	4e 83       	std	Y+6, r20	; 0x06
    27c8:	00 e0       	ldi	r16, 0x00	; 0
    27ca:	21 e0       	ldi	r18, 0x01	; 1
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	ba 01       	movw	r22, r20
    27d2:	ce 01       	movw	r24, r28
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	9f de       	rcall	.-706    	; 0x2516 <_ZN11SPISettingsC1Emhh>
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	43 df       	rcall	.-378    	; 0x2664 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	fc 01       	movw	r30, r24
    27e4:	84 85       	ldd	r24, Z+12	; 0x0c
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	8e 77       	andi	r24, 0x7E	; 126
    27f0:	7b df       	rcall	.-266    	; 0x26e8 <_ZN8SPIClass8transferEh>
    27f2:	8e 81       	ldd	r24, Y+6	; 0x06
    27f4:	79 df       	rcall	.-270    	; 0x26e8 <_ZN8SPIClass8transferEh>
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	fc 01       	movw	r30, r24
    27fc:	84 85       	ldd	r24, Z+12	; 0x0c
    27fe:	61 e0       	ldi	r22, 0x01	; 1
    2800:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    2804:	90 df       	rcall	.-224    	; 0x2726 <_ZN8SPIClass14endTransactionEv>
    2806:	00 00       	nop
    2808:	26 96       	adiw	r28, 0x06	; 6
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	0f 91       	pop	r16
    281a:	08 95       	ret

0000281c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    281c:	0f 93       	push	r16
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	29 97       	sbiw	r28, 0x09	; 9
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	9d 83       	std	Y+5, r25	; 0x05
    2834:	8c 83       	std	Y+4, r24	; 0x04
    2836:	6e 83       	std	Y+6, r22	; 0x06
    2838:	4f 83       	std	Y+7, r20	; 0x07
    283a:	39 87       	std	Y+9, r19	; 0x09
    283c:	28 87       	std	Y+8, r18	; 0x08
    283e:	ce 01       	movw	r24, r28
    2840:	02 96       	adiw	r24, 0x02	; 2
    2842:	00 e0       	ldi	r16, 0x00	; 0
    2844:	21 e0       	ldi	r18, 0x01	; 1
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	ba 01       	movw	r22, r20
    284c:	64 de       	rcall	.-824    	; 0x2516 <_ZN11SPISettingsC1Emhh>
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	08 df       	rcall	.-496    	; 0x2664 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	fc 01       	movw	r30, r24
    285a:	84 85       	ldd	r24, Z+12	; 0x0c
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    2862:	8e 81       	ldd	r24, Y+6	; 0x06
    2864:	8e 77       	andi	r24, 0x7E	; 126
    2866:	40 df       	rcall	.-384    	; 0x26e8 <_ZN8SPIClass8transferEh>
    2868:	19 82       	std	Y+1, r1	; 0x01
    286a:	99 81       	ldd	r25, Y+1	; 0x01
    286c:	8f 81       	ldd	r24, Y+7	; 0x07
    286e:	98 17       	cp	r25, r24
    2870:	70 f4       	brcc	.+28     	; 0x288e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	28 85       	ldd	r18, Y+8	; 0x08
    287a:	39 85       	ldd	r19, Y+9	; 0x09
    287c:	82 0f       	add	r24, r18
    287e:	93 1f       	adc	r25, r19
    2880:	fc 01       	movw	r30, r24
    2882:	80 81       	ld	r24, Z
    2884:	31 df       	rcall	.-414    	; 0x26e8 <_ZN8SPIClass8transferEh>
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	8f 5f       	subi	r24, 0xFF	; 255
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	ee cf       	rjmp	.-36     	; 0x286a <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	9d 81       	ldd	r25, Y+5	; 0x05
    2892:	fc 01       	movw	r30, r24
    2894:	84 85       	ldd	r24, Z+12	; 0x0c
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    289c:	44 df       	rcall	.-376    	; 0x2726 <_ZN8SPIClass14endTransactionEv>
    289e:	00 00       	nop
    28a0:	29 96       	adiw	r28, 0x09	; 9
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    28b4:	0f 93       	push	r16
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    28bc:	00 d0       	rcall	.+0      	; 0x28be <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	9d 83       	std	Y+5, r25	; 0x05
    28c4:	8c 83       	std	Y+4, r24	; 0x04
    28c6:	6e 83       	std	Y+6, r22	; 0x06
    28c8:	ce 01       	movw	r24, r28
    28ca:	02 96       	adiw	r24, 0x02	; 2
    28cc:	00 e0       	ldi	r16, 0x00	; 0
    28ce:	21 e0       	ldi	r18, 0x01	; 1
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	ba 01       	movw	r22, r20
    28d6:	1f de       	rcall	.-962    	; 0x2516 <_ZN11SPISettingsC1Emhh>
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	9b 81       	ldd	r25, Y+3	; 0x03
    28dc:	c3 de       	rcall	.-634    	; 0x2664 <_ZN8SPIClass16beginTransactionE11SPISettings>
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
    28e0:	9d 81       	ldd	r25, Y+5	; 0x05
    28e2:	fc 01       	movw	r30, r24
    28e4:	84 85       	ldd	r24, Z+12	; 0x0c
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    28ec:	8e 81       	ldd	r24, Y+6	; 0x06
    28ee:	8e 77       	andi	r24, 0x7E	; 126
    28f0:	80 68       	ori	r24, 0x80	; 128
    28f2:	fa de       	rcall	.-524    	; 0x26e8 <_ZN8SPIClass8transferEh>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	f8 de       	rcall	.-528    	; 0x26e8 <_ZN8SPIClass8transferEh>
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	8c 81       	ldd	r24, Y+4	; 0x04
    28fc:	9d 81       	ldd	r25, Y+5	; 0x05
    28fe:	fc 01       	movw	r30, r24
    2900:	84 85       	ldd	r24, Z+12	; 0x0c
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    2908:	0e df       	rcall	.-484    	; 0x2726 <_ZN8SPIClass14endTransactionEv>
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	26 96       	adiw	r28, 0x06	; 6
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	0f 91       	pop	r16
    291e:	08 95       	ret

00002920 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	2e 97       	sbiw	r28, 0x0e	; 14
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	99 87       	std	Y+9, r25	; 0x09
    293a:	88 87       	std	Y+8, r24	; 0x08
    293c:	6a 87       	std	Y+10, r22	; 0x0a
    293e:	4b 87       	std	Y+11, r20	; 0x0b
    2940:	3d 87       	std	Y+13, r19	; 0x0d
    2942:	2c 87       	std	Y+12, r18	; 0x0c
    2944:	0e 87       	std	Y+14, r16	; 0x0e
    2946:	8b 85       	ldd	r24, Y+11	; 0x0b
    2948:	88 23       	and	r24, r24
    294a:	09 f4       	brne	.+2      	; 0x294e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    294c:	7e c0       	rjmp	.+252    	; 0x2a4a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    294e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2950:	8e 77       	andi	r24, 0x7E	; 126
    2952:	80 68       	ori	r24, 0x80	; 128
    2954:	8c 83       	std	Y+4, r24	; 0x04
    2956:	19 82       	std	Y+1, r1	; 0x01
    2958:	ce 01       	movw	r24, r28
    295a:	06 96       	adiw	r24, 0x06	; 6
    295c:	00 e0       	ldi	r16, 0x00	; 0
    295e:	21 e0       	ldi	r18, 0x01	; 1
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	ba 01       	movw	r22, r20
    2966:	d7 dd       	rcall	.-1106   	; 0x2516 <_ZN11SPISettingsC1Emhh>
    2968:	8e 81       	ldd	r24, Y+6	; 0x06
    296a:	9f 81       	ldd	r25, Y+7	; 0x07
    296c:	7b de       	rcall	.-778    	; 0x2664 <_ZN8SPIClass16beginTransactionE11SPISettings>
    296e:	88 85       	ldd	r24, Y+8	; 0x08
    2970:	99 85       	ldd	r25, Y+9	; 0x09
    2972:	fc 01       	movw	r30, r24
    2974:	84 85       	ldd	r24, Z+12	; 0x0c
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    297c:	8b 85       	ldd	r24, Y+11	; 0x0b
    297e:	81 50       	subi	r24, 0x01	; 1
    2980:	8b 87       	std	Y+11, r24	; 0x0b
    2982:	8c 81       	ldd	r24, Y+4	; 0x04
    2984:	b1 de       	rcall	.-670    	; 0x26e8 <_ZN8SPIClass8transferEh>
    2986:	99 81       	ldd	r25, Y+1	; 0x01
    2988:	8b 85       	ldd	r24, Y+11	; 0x0b
    298a:	98 17       	cp	r25, r24
    298c:	08 f0       	brcs	.+2      	; 0x2990 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    298e:	48 c0       	rjmp	.+144    	; 0x2a20 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	88 23       	and	r24, r24
    2994:	a9 f5       	brne	.+106    	; 0x2a00 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2996:	8e 85       	ldd	r24, Y+14	; 0x0e
    2998:	88 23       	and	r24, r24
    299a:	91 f1       	breq	.+100    	; 0x2a00 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    299c:	1a 82       	std	Y+2, r1	; 0x02
    299e:	8e 85       	ldd	r24, Y+14	; 0x0e
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	88 30       	cpi	r24, 0x08	; 8
    29a6:	90 f4       	brcc	.+36     	; 0x29cc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	2a 95       	dec	r18
    29ba:	e2 f7       	brpl	.-8      	; 0x29b4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    29bc:	98 2f       	mov	r25, r24
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	89 2b       	or	r24, r25
    29c2:	8a 83       	std	Y+2, r24	; 0x02
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	8b 83       	std	Y+3, r24	; 0x03
    29ca:	eb cf       	rjmp	.-42     	; 0x29a2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	8c de       	rcall	.-744    	; 0x26e8 <_ZN8SPIClass8transferEh>
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    29da:	3d 85       	ldd	r19, Y+13	; 0x0d
    29dc:	82 0f       	add	r24, r18
    29de:	93 1f       	adc	r25, r19
    29e0:	fc 01       	movw	r30, r24
    29e2:	80 81       	ld	r24, Z
    29e4:	98 2f       	mov	r25, r24
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	80 95       	com	r24
    29ea:	89 23       	and	r24, r25
    29ec:	2d 81       	ldd	r18, Y+5	; 0x05
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	92 23       	and	r25, r18
    29f2:	89 2b       	or	r24, r25
    29f4:	28 2f       	mov	r18, r24
    29f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    29f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    29fa:	fc 01       	movw	r30, r24
    29fc:	20 83       	st	Z, r18
    29fe:	0c c0       	rjmp	.+24     	; 0x2a18 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a08:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a0a:	89 01       	movw	r16, r18
    2a0c:	08 0f       	add	r16, r24
    2a0e:	19 1f       	adc	r17, r25
    2a10:	8c 81       	ldd	r24, Y+4	; 0x04
    2a12:	6a de       	rcall	.-812    	; 0x26e8 <_ZN8SPIClass8transferEh>
    2a14:	f8 01       	movw	r30, r16
    2a16:	80 83       	st	Z, r24
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	b3 cf       	rjmp	.-154    	; 0x2986 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a28:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a2a:	89 01       	movw	r16, r18
    2a2c:	08 0f       	add	r16, r24
    2a2e:	19 1f       	adc	r17, r25
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	5a de       	rcall	.-844    	; 0x26e8 <_ZN8SPIClass8transferEh>
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	88 85       	ldd	r24, Y+8	; 0x08
    2a3a:	99 85       	ldd	r25, Y+9	; 0x09
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	84 85       	ldd	r24, Z+12	; 0x0c
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    2a46:	6f de       	rcall	.-802    	; 0x2726 <_ZN8SPIClass14endTransactionEv>
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    2a4a:	00 00       	nop
    2a4c:	2e 96       	adiw	r28, 0x0e	; 14
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    2a68:	1f 92       	push	r1
    2a6a:	1f 92       	push	r1
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	9b 83       	std	Y+3, r25	; 0x03
    2a72:	8a 83       	std	Y+2, r24	; 0x02
    2a74:	6c 83       	std	Y+4, r22	; 0x04
    2a76:	4d 83       	std	Y+5, r20	; 0x05
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7c:	6c 81       	ldd	r22, Y+4	; 0x04
    2a7e:	1a df       	rcall	.-460    	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	99 81       	ldd	r25, Y+1	; 0x01
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	29 2f       	mov	r18, r25
    2a88:	28 2b       	or	r18, r24
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	42 2f       	mov	r20, r18
    2a90:	6c 81       	ldd	r22, Y+4	; 0x04
    2a92:	8f de       	rcall	.-738    	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a94:	00 00       	nop
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	08 95       	ret

00002aa6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    2aac:	1f 92       	push	r1
    2aae:	1f 92       	push	r1
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	9b 83       	std	Y+3, r25	; 0x03
    2ab6:	8a 83       	std	Y+2, r24	; 0x02
    2ab8:	6c 83       	std	Y+4, r22	; 0x04
    2aba:	4d 83       	std	Y+5, r20	; 0x05
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	6c 81       	ldd	r22, Y+4	; 0x04
    2ac2:	f8 de       	rcall	.-528    	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac8:	98 2f       	mov	r25, r24
    2aca:	90 95       	com	r25
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	89 23       	and	r24, r25
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	42 2f       	mov	r20, r18
    2ad8:	6c 81       	ldd	r22, Y+4	; 0x04
    2ada:	6b de       	rcall	.-810    	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2adc:	00 00       	nop
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	2a 97       	sbiw	r28, 0x0a	; 10
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	9d 83       	std	Y+5, r25	; 0x05
    2b08:	8c 83       	std	Y+4, r24	; 0x04
    2b0a:	7f 83       	std	Y+7, r23	; 0x07
    2b0c:	6e 83       	std	Y+6, r22	; 0x06
    2b0e:	48 87       	std	Y+8, r20	; 0x08
    2b10:	3a 87       	std	Y+10, r19	; 0x0a
    2b12:	29 87       	std	Y+9, r18	; 0x09
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
    2b16:	9d 81       	ldd	r25, Y+5	; 0x05
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	62 e0       	ldi	r22, 0x02	; 2
    2b1c:	4a de       	rcall	.-876    	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b20:	9d 81       	ldd	r25, Y+5	; 0x05
    2b22:	44 e0       	ldi	r20, 0x04	; 4
    2b24:	6a e0       	ldi	r22, 0x0A	; 10
    2b26:	45 de       	rcall	.-886    	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	64 e1       	ldi	r22, 0x14	; 20
    2b30:	98 df       	rcall	.-208    	; 0x2a62 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2b32:	2e 81       	ldd	r18, Y+6	; 0x06
    2b34:	3f 81       	ldd	r19, Y+7	; 0x07
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3a:	48 85       	ldd	r20, Y+8	; 0x08
    2b3c:	62 e1       	ldi	r22, 0x12	; 18
    2b3e:	6e de       	rcall	.-804    	; 0x281c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2b40:	8c 81       	ldd	r24, Y+4	; 0x04
    2b42:	9d 81       	ldd	r25, Y+5	; 0x05
    2b44:	43 e0       	ldi	r20, 0x03	; 3
    2b46:	62 e0       	ldi	r22, 0x02	; 2
    2b48:	34 de       	rcall	.-920    	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b4a:	88 e8       	ldi	r24, 0x88	; 136
    2b4c:	93 e1       	ldi	r25, 0x13	; 19
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	9d 81       	ldd	r25, Y+5	; 0x05
    2b56:	6a e0       	ldi	r22, 0x0A	; 10
    2b58:	ad de       	rcall	.-678    	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b5a:	8b 83       	std	Y+3, r24	; 0x03
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	84 70       	andi	r24, 0x04	; 4
    2b64:	99 27       	eor	r25, r25
    2b66:	89 2b       	or	r24, r25
    2b68:	79 f4       	brne	.+30     	; 0x2b88 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	21 e0       	ldi	r18, 0x01	; 1
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	89 2b       	or	r24, r25
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	22 23       	and	r18, r18
    2b82:	39 f3       	breq	.-50     	; 0x2b52 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    2b84:	83 e0       	ldi	r24, 0x03	; 3
    2b86:	1b c0       	rjmp	.+54     	; 0x2bbe <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    2b88:	00 00       	nop
    2b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	62 e0       	ldi	r22, 0x02	; 2
    2b92:	0f de       	rcall	.-994    	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	9d 81       	ldd	r25, Y+5	; 0x05
    2b98:	64 e4       	ldi	r22, 0x44	; 68
    2b9a:	8c de       	rcall	.-744    	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	20 83       	st	Z, r18
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	8c 01       	movw	r16, r24
    2bac:	0f 5f       	subi	r16, 0xFF	; 255
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb4:	62 e4       	ldi	r22, 0x42	; 66
    2bb6:	7e de       	rcall	.-772    	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2bb8:	f8 01       	movw	r30, r16
    2bba:	80 83       	st	Z, r24
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	2a 96       	adiw	r28, 0x0a	; 10
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <_ZN7MFRC5228PCD_InitEv>:
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	1f 92       	push	r1
    2bda:	1f 92       	push	r1
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	fc 01       	movw	r30, r24
    2bea:	84 85       	ldd	r24, Z+12	; 0x0c
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	84 85       	ldd	r24, Z+12	; 0x0c
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	fc 01       	movw	r30, r24
    2c06:	85 85       	ldd	r24, Z+13	; 0x0d
    2c08:	61 e0       	ldi	r22, 0x01	; 1
    2c0a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	fc 01       	movw	r30, r24
    2c14:	85 85       	ldd	r24, Z+13	; 0x0d
    2c16:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <digitalRead>
    2c1a:	21 e0       	ldi	r18, 0x01	; 1
    2c1c:	89 2b       	or	r24, r25
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <_ZN7MFRC5228PCD_InitEv+0x4e>
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	22 23       	and	r18, r18
    2c24:	71 f0       	breq	.+28     	; 0x2c42 <_ZN7MFRC5228PCD_InitEv+0x6e>
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	85 85       	ldd	r24, Z+13	; 0x0d
    2c2e:	61 e0       	ldi	r22, 0x01	; 1
    2c30:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    2c34:	62 e3       	ldi	r22, 0x32	; 50
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
    2c40:	03 c0       	rjmp	.+6      	; 0x2c48 <_ZN7MFRC5228PCD_InitEv+0x74>
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	27 d0       	rcall	.+78     	; 0x2c96 <_ZN7MFRC5229PCD_ResetEv>
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	64 e5       	ldi	r22, 0x54	; 84
    2c50:	b0 dd       	rcall	.-1184   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	49 ea       	ldi	r20, 0xA9	; 169
    2c58:	66 e5       	ldi	r22, 0x56	; 86
    2c5a:	ab dd       	rcall	.-1194   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	43 e0       	ldi	r20, 0x03	; 3
    2c62:	68 e5       	ldi	r22, 0x58	; 88
    2c64:	a6 dd       	rcall	.-1204   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6a:	48 ee       	ldi	r20, 0xE8	; 232
    2c6c:	6a e5       	ldi	r22, 0x5A	; 90
    2c6e:	a1 dd       	rcall	.-1214   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	40 e4       	ldi	r20, 0x40	; 64
    2c76:	6a e2       	ldi	r22, 0x2A	; 42
    2c78:	9c dd       	rcall	.-1224   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	4d e3       	ldi	r20, 0x3D	; 61
    2c80:	62 e2       	ldi	r22, 0x22	; 34
    2c82:	97 dd       	rcall	.-1234   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	2e d0       	rcall	.+92     	; 0x2ce6 <_ZN7MFRC52213PCD_AntennaOnEv>
    2c8a:	00 00       	nop
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <_ZN7MFRC5229PCD_ResetEv>:
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	1f 92       	push	r1
    2c9c:	1f 92       	push	r1
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	4f e0       	ldi	r20, 0x0F	; 15
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	81 dd       	rcall	.-1278   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2cb0:	62 e3       	ldi	r22, 0x32	; 50
    2cb2:	70 e0       	ldi	r23, 0x00	; 0
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <delay>
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	f8 dd       	rcall	.-1040   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	80 71       	andi	r24, 0x10	; 16
    2cca:	99 27       	eor	r25, r25
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	89 2b       	or	r24, r25
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	22 23       	and	r18, r18
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <_ZN7MFRC5229PCD_ResetEv+0x44>
    2cd8:	f1 cf       	rjmp	.-30     	; 0x2cbc <_ZN7MFRC5229PCD_ResetEv+0x26>
    2cda:	00 00       	nop
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	08 95       	ret

00002ce6 <_ZN7MFRC52213PCD_AntennaOnEv>:
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	9b 83       	std	Y+3, r25	; 0x03
    2cf2:	8a 83       	std	Y+2, r24	; 0x02
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	68 e2       	ldi	r22, 0x28	; 40
    2cfa:	dc dd       	rcall	.-1096   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	88 2f       	mov	r24, r24
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	83 70       	andi	r24, 0x03	; 3
    2d06:	99 27       	eor	r25, r25
    2d08:	03 97       	sbiw	r24, 0x03	; 3
    2d0a:	41 f0       	breq	.+16     	; 0x2d1c <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	28 2f       	mov	r18, r24
    2d10:	23 60       	ori	r18, 0x03	; 3
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	9b 81       	ldd	r25, Y+3	; 0x03
    2d16:	42 2f       	mov	r20, r18
    2d18:	68 e2       	ldi	r22, 0x28	; 40
    2d1a:	4b dd       	rcall	.-1386   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d1c:	00 00       	nop
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	08 95       	ret

00002d2a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2d2a:	8f 92       	push	r8
    2d2c:	af 92       	push	r10
    2d2e:	bf 92       	push	r11
    2d30:	cf 92       	push	r12
    2d32:	df 92       	push	r13
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	2e 97       	sbiw	r28, 0x0e	; 14
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    2d54:	7d 83       	std	Y+5, r23	; 0x05
    2d56:	6c 83       	std	Y+4, r22	; 0x04
    2d58:	4e 83       	std	Y+6, r20	; 0x06
    2d5a:	38 87       	std	Y+8, r19	; 0x08
    2d5c:	2f 83       	std	Y+7, r18	; 0x07
    2d5e:	1a 87       	std	Y+10, r17	; 0x0a
    2d60:	09 87       	std	Y+9, r16	; 0x09
    2d62:	fc 86       	std	Y+12, r15	; 0x0c
    2d64:	eb 86       	std	Y+11, r14	; 0x0b
    2d66:	cd 86       	std	Y+13, r12	; 0x0d
    2d68:	ae 86       	std	Y+14, r10	; 0x0e
    2d6a:	80 e3       	ldi	r24, 0x30	; 48
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    2d6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d70:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d72:	69 85       	ldd	r22, Y+9	; 0x09
    2d74:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d76:	4f 81       	ldd	r20, Y+7	; 0x07
    2d78:	58 85       	ldd	r21, Y+8	; 0x08
    2d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	9b 81       	ldd	r25, Y+3	; 0x03
    2d82:	ae 85       	ldd	r26, Y+14	; 0x0e
    2d84:	af 93       	push	r26
    2d86:	8d 84       	ldd	r8, Y+13	; 0x0d
    2d88:	5f 01       	movw	r10, r30
    2d8a:	6b 01       	movw	r12, r22
    2d8c:	7a 01       	movw	r14, r20
    2d8e:	0e 81       	ldd	r16, Y+6	; 0x06
    2d90:	49 81       	ldd	r20, Y+1	; 0x01
    2d92:	6c e0       	ldi	r22, 0x0C	; 12
    2d94:	13 d0       	rcall	.+38     	; 0x2dbc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2d96:	0f 90       	pop	r0
    2d98:	2e 96       	adiw	r28, 0x0e	; 14
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	ff 90       	pop	r15
    2dae:	ef 90       	pop	r14
    2db0:	df 90       	pop	r13
    2db2:	cf 90       	pop	r12
    2db4:	bf 90       	pop	r11
    2db6:	af 90       	pop	r10
    2db8:	8f 90       	pop	r8
    2dba:	08 95       	ret

00002dbc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2dbc:	8f 92       	push	r8
    2dbe:	af 92       	push	r10
    2dc0:	bf 92       	push	r11
    2dc2:	cf 92       	push	r12
    2dc4:	df 92       	push	r13
    2dc6:	ef 92       	push	r14
    2dc8:	ff 92       	push	r15
    2dca:	0f 93       	push	r16
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	68 97       	sbiw	r28, 0x18	; 24
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	9c 87       	std	Y+12, r25	; 0x0c
    2de2:	8b 87       	std	Y+11, r24	; 0x0b
    2de4:	6d 87       	std	Y+13, r22	; 0x0d
    2de6:	4e 87       	std	Y+14, r20	; 0x0e
    2de8:	38 8b       	std	Y+16, r19	; 0x10
    2dea:	2f 87       	std	Y+15, r18	; 0x0f
    2dec:	09 8b       	std	Y+17, r16	; 0x11
    2dee:	fb 8a       	std	Y+19, r15	; 0x13
    2df0:	ea 8a       	std	Y+18, r14	; 0x12
    2df2:	dd 8a       	std	Y+21, r13	; 0x15
    2df4:	cc 8a       	std	Y+20, r12	; 0x14
    2df6:	bf 8a       	std	Y+23, r11	; 0x17
    2df8:	ae 8a       	std	Y+22, r10	; 0x16
    2dfa:	88 8e       	std	Y+24, r8	; 0x18
    2dfc:	8e 89       	ldd	r24, Y+22	; 0x16
    2dfe:	9f 89       	ldd	r25, Y+23	; 0x17
    2e00:	89 2b       	or	r24, r25
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    2e04:	8e 89       	ldd	r24, Y+22	; 0x16
    2e06:	9f 89       	ldd	r25, Y+23	; 0x17
    2e08:	fc 01       	movw	r30, r24
    2e0a:	80 81       	ld	r24, Z
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	8c 83       	std	Y+4, r24	; 0x04
    2e12:	88 8d       	ldd	r24, Y+24	; 0x18
    2e14:	98 2f       	mov	r25, r24
    2e16:	92 95       	swap	r25
    2e18:	90 7f       	andi	r25, 0xF0	; 240
    2e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1c:	89 0f       	add	r24, r25
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
    2e20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e22:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	62 e0       	ldi	r22, 0x02	; 2
    2e28:	c4 dc       	rcall	.-1656   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2e2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	68 e0       	ldi	r22, 0x08	; 8
    2e32:	bf dc       	rcall	.-1666   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2e34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e36:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	64 e1       	ldi	r22, 0x14	; 20
    2e3c:	12 de       	rcall	.-988    	; 0x2a62 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2e3e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e40:	38 89       	ldd	r19, Y+16	; 0x10
    2e42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e46:	49 89       	ldd	r20, Y+17	; 0x11
    2e48:	62 e1       	ldi	r22, 0x12	; 18
    2e4a:	e8 dc       	rcall	.-1584   	; 0x281c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e50:	4d 81       	ldd	r20, Y+5	; 0x05
    2e52:	6a e1       	ldi	r22, 0x1A	; 26
    2e54:	ae dc       	rcall	.-1700   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2e56:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e58:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e5a:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e5c:	62 e0       	ldi	r22, 0x02	; 2
    2e5e:	a9 dc       	rcall	.-1710   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e62:	8c 30       	cpi	r24, 0x0C	; 12
    2e64:	29 f4       	brne	.+10     	; 0x2e70 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	6a e1       	ldi	r22, 0x1A	; 26
    2e6e:	f9 dd       	rcall	.-1038   	; 0x2a62 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2e70:	80 ed       	ldi	r24, 0xD0	; 208
    2e72:	97 e0       	ldi	r25, 0x07	; 7
    2e74:	9b 83       	std	Y+3, r25	; 0x03
    2e76:	8a 83       	std	Y+2, r24	; 0x02
    2e78:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e7c:	68 e0       	ldi	r22, 0x08	; 8
    2e7e:	1a dd       	rcall	.-1484   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e80:	8e 83       	std	Y+6, r24	; 0x06
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e86:	89 23       	and	r24, r25
    2e88:	88 23       	and	r24, r24
    2e8a:	c1 f4       	brne	.+48     	; 0x2ebc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    2e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	81 70       	andi	r24, 0x01	; 1
    2e94:	99 27       	eor	r25, r25
    2e96:	89 2b       	or	r24, r25
    2e98:	11 f0       	breq	.+4      	; 0x2e9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	b4 c0       	rjmp	.+360    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	21 e0       	ldi	r18, 0x01	; 1
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	89 2b       	or	r24, r25
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	22 23       	and	r18, r18
    2eb6:	01 f3       	breq	.-64     	; 0x2e78 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    2eb8:	83 e0       	ldi	r24, 0x03	; 3
    2eba:	a5 c0       	rjmp	.+330    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ebc:	00 00       	nop
    2ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec2:	6c e0       	ldi	r22, 0x0C	; 12
    2ec4:	f7 dc       	rcall	.-1554   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ec6:	8f 83       	std	Y+7, r24	; 0x07
    2ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eca:	88 2f       	mov	r24, r24
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	83 71       	andi	r24, 0x13	; 19
    2ed0:	99 27       	eor	r25, r25
    2ed2:	89 2b       	or	r24, r25
    2ed4:	11 f0       	breq	.+4      	; 0x2eda <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	96 c0       	rjmp	.+300    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2eda:	8a 89       	ldd	r24, Y+18	; 0x12
    2edc:	9b 89       	ldd	r25, Y+19	; 0x13
    2ede:	89 2b       	or	r24, r25
    2ee0:	71 f1       	breq	.+92     	; 0x2f3e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2ee2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ee4:	9d 89       	ldd	r25, Y+21	; 0x15
    2ee6:	89 2b       	or	r24, r25
    2ee8:	51 f1       	breq	.+84     	; 0x2f3e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2eea:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eec:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eee:	64 e1       	ldi	r22, 0x14	; 20
    2ef0:	e1 dc       	rcall	.-1598   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ef2:	8e 83       	std	Y+6, r24	; 0x06
    2ef4:	8c 89       	ldd	r24, Y+20	; 0x14
    2ef6:	9d 89       	ldd	r25, Y+21	; 0x15
    2ef8:	fc 01       	movw	r30, r24
    2efa:	90 81       	ld	r25, Z
    2efc:	8e 81       	ldd	r24, Y+6	; 0x06
    2efe:	98 17       	cp	r25, r24
    2f00:	10 f4       	brcc	.+4      	; 0x2f06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    2f02:	84 e0       	ldi	r24, 0x04	; 4
    2f04:	80 c0       	rjmp	.+256    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f06:	8c 89       	ldd	r24, Y+20	; 0x14
    2f08:	9d 89       	ldd	r25, Y+21	; 0x15
    2f0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	20 83       	st	Z, r18
    2f10:	2a 89       	ldd	r18, Y+18	; 0x12
    2f12:	3b 89       	ldd	r19, Y+19	; 0x13
    2f14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f18:	08 8d       	ldd	r16, Y+24	; 0x18
    2f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f1c:	62 e1       	ldi	r22, 0x12	; 18
    2f1e:	00 dd       	rcall	.-1536   	; 0x2920 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    2f20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f22:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f24:	68 e1       	ldi	r22, 0x18	; 24
    2f26:	c6 dc       	rcall	.-1652   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2f28:	87 70       	andi	r24, 0x07	; 7
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	8e 89       	ldd	r24, Y+22	; 0x16
    2f2e:	9f 89       	ldd	r25, Y+23	; 0x17
    2f30:	89 2b       	or	r24, r25
    2f32:	29 f0       	breq	.+10     	; 0x2f3e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2f34:	8e 89       	ldd	r24, Y+22	; 0x16
    2f36:	9f 89       	ldd	r25, Y+23	; 0x17
    2f38:	29 81       	ldd	r18, Y+1	; 0x01
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	20 83       	st	Z, r18
    2f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f40:	88 2f       	mov	r24, r24
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	88 70       	andi	r24, 0x08	; 8
    2f46:	99 27       	eor	r25, r25
    2f48:	89 2b       	or	r24, r25
    2f4a:	11 f0       	breq	.+4      	; 0x2f50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	5b c0       	rjmp	.+182    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f50:	8a 89       	ldd	r24, Y+18	; 0x12
    2f52:	9b 89       	ldd	r25, Y+19	; 0x13
    2f54:	89 2b       	or	r24, r25
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    2f58:	55 c0       	rjmp	.+170    	; 0x3004 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2f5a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f5c:	9d 89       	ldd	r25, Y+21	; 0x15
    2f5e:	89 2b       	or	r24, r25
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    2f62:	50 c0       	rjmp	.+160    	; 0x3004 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2f64:	8e a1       	ldd	r24, Y+38	; 0x26
    2f66:	88 23       	and	r24, r24
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    2f6a:	4c c0       	rjmp	.+152    	; 0x3004 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2f6c:	8c 89       	ldd	r24, Y+20	; 0x14
    2f6e:	9d 89       	ldd	r25, Y+21	; 0x15
    2f70:	fc 01       	movw	r30, r24
    2f72:	80 81       	ld	r24, Z
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	29 f4       	brne	.+10     	; 0x2f82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	84 30       	cpi	r24, 0x04	; 4
    2f7c:	11 f4       	brne	.+4      	; 0x2f82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2f7e:	8f ef       	ldi	r24, 0xFF	; 255
    2f80:	42 c0       	rjmp	.+132    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f82:	8c 89       	ldd	r24, Y+20	; 0x14
    2f84:	9d 89       	ldd	r25, Y+21	; 0x15
    2f86:	fc 01       	movw	r30, r24
    2f88:	80 81       	ld	r24, Z
    2f8a:	82 30       	cpi	r24, 0x02	; 2
    2f8c:	18 f0       	brcs	.+6      	; 0x2f94 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	88 23       	and	r24, r24
    2f92:	11 f0       	breq	.+4      	; 0x2f98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    2f94:	87 e0       	ldi	r24, 0x07	; 7
    2f96:	37 c0       	rjmp	.+110    	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f98:	8c 89       	ldd	r24, Y+20	; 0x14
    2f9a:	9d 89       	ldd	r25, Y+21	; 0x15
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	80 81       	ld	r24, Z
    2fa0:	4e ef       	ldi	r20, 0xFE	; 254
    2fa2:	48 0f       	add	r20, r24
    2fa4:	9e 01       	movw	r18, r28
    2fa6:	27 5f       	subi	r18, 0xF7	; 247
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2faa:	6a 89       	ldd	r22, Y+18	; 0x12
    2fac:	7b 89       	ldd	r23, Y+19	; 0x13
    2fae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fb2:	9d dd       	rcall	.-1222   	; 0x2aee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2fb4:	88 87       	std	Y+8, r24	; 0x08
    2fb6:	88 85       	ldd	r24, Y+8	; 0x08
    2fb8:	88 23       	and	r24, r24
    2fba:	11 f0       	breq	.+4      	; 0x2fc0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    2fbc:	88 85       	ldd	r24, Y+8	; 0x08
    2fbe:	23 c0       	rjmp	.+70     	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2fc0:	8c 89       	ldd	r24, Y+20	; 0x14
    2fc2:	9d 89       	ldd	r25, Y+21	; 0x15
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	80 81       	ld	r24, Z
    2fc8:	88 2f       	mov	r24, r24
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 97       	sbiw	r24, 0x02	; 2
    2fce:	2a 89       	ldd	r18, Y+18	; 0x12
    2fd0:	3b 89       	ldd	r19, Y+19	; 0x13
    2fd2:	82 0f       	add	r24, r18
    2fd4:	93 1f       	adc	r25, r19
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	90 81       	ld	r25, Z
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	98 17       	cp	r25, r24
    2fde:	81 f4       	brne	.+32     	; 0x3000 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    2fe0:	8c 89       	ldd	r24, Y+20	; 0x14
    2fe2:	9d 89       	ldd	r25, Y+21	; 0x15
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	80 81       	ld	r24, Z
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	2a 89       	ldd	r18, Y+18	; 0x12
    2ff0:	3b 89       	ldd	r19, Y+19	; 0x13
    2ff2:	82 0f       	add	r24, r18
    2ff4:	93 1f       	adc	r25, r19
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	90 81       	ld	r25, Z
    2ffa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ffc:	98 17       	cp	r25, r24
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    3000:	87 e0       	ldi	r24, 0x07	; 7
    3002:	01 c0       	rjmp	.+2      	; 0x3006 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	68 96       	adiw	r28, 0x18	; 24
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	cf 90       	pop	r12
    3020:	bf 90       	pop	r11
    3022:	af 90       	pop	r10
    3024:	8f 90       	pop	r8
    3026:	08 95       	ret

00003028 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	00 d0       	rcall	.+0      	; 0x302e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    302e:	00 d0       	rcall	.+0      	; 0x3030 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	7c 83       	std	Y+4, r23	; 0x04
    303a:	6b 83       	std	Y+3, r22	; 0x03
    303c:	5e 83       	std	Y+6, r21	; 0x06
    303e:	4d 83       	std	Y+5, r20	; 0x05
    3040:	2d 81       	ldd	r18, Y+5	; 0x05
    3042:	3e 81       	ldd	r19, Y+6	; 0x06
    3044:	4b 81       	ldd	r20, Y+3	; 0x03
    3046:	5c 81       	ldd	r21, Y+4	; 0x04
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	66 e2       	ldi	r22, 0x26	; 38
    304e:	09 d0       	rcall	.+18     	; 0x3062 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    3050:	26 96       	adiw	r28, 0x06	; 6
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	08 95       	ret

00003062 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    3062:	af 92       	push	r10
    3064:	cf 92       	push	r12
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	29 97       	sbiw	r28, 0x09	; 9
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	9c 83       	std	Y+4, r25	; 0x04
    3084:	8b 83       	std	Y+3, r24	; 0x03
    3086:	6d 83       	std	Y+5, r22	; 0x05
    3088:	5f 83       	std	Y+7, r21	; 0x07
    308a:	4e 83       	std	Y+6, r20	; 0x06
    308c:	39 87       	std	Y+9, r19	; 0x09
    308e:	28 87       	std	Y+8, r18	; 0x08
    3090:	8e 81       	ldd	r24, Y+6	; 0x06
    3092:	9f 81       	ldd	r25, Y+7	; 0x07
    3094:	89 2b       	or	r24, r25
    3096:	31 f0       	breq	.+12     	; 0x30a4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    3098:	88 85       	ldd	r24, Y+8	; 0x08
    309a:	99 85       	ldd	r25, Y+9	; 0x09
    309c:	fc 01       	movw	r30, r24
    309e:	80 81       	ld	r24, Z
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	10 f4       	brcc	.+4      	; 0x30a8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    30a4:	84 e0       	ldi	r24, 0x04	; 4
    30a6:	2a c0       	rjmp	.+84     	; 0x30fc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	40 e8       	ldi	r20, 0x80	; 128
    30ae:	6c e1       	ldi	r22, 0x1C	; 28
    30b0:	fa dc       	rcall	.-1548   	; 0x2aa6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    30b2:	87 e0       	ldi	r24, 0x07	; 7
    30b4:	8a 83       	std	Y+2, r24	; 0x02
    30b6:	fe 01       	movw	r30, r28
    30b8:	32 96       	adiw	r30, 0x02	; 2
    30ba:	48 85       	ldd	r20, Y+8	; 0x08
    30bc:	59 85       	ldd	r21, Y+9	; 0x09
    30be:	2e 81       	ldd	r18, Y+6	; 0x06
    30c0:	3f 81       	ldd	r19, Y+7	; 0x07
    30c2:	be 01       	movw	r22, r28
    30c4:	6b 5f       	subi	r22, 0xFB	; 251
    30c6:	7f 4f       	sbci	r23, 0xFF	; 255
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	a1 2c       	mov	r10, r1
    30ce:	c1 2c       	mov	r12, r1
    30d0:	7f 01       	movw	r14, r30
    30d2:	8a 01       	movw	r16, r20
    30d4:	41 e0       	ldi	r20, 0x01	; 1
    30d6:	29 de       	rcall	.-942    	; 0x2d2a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	88 23       	and	r24, r24
    30de:	11 f0       	breq	.+4      	; 0x30e4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	0c c0       	rjmp	.+24     	; 0x30fc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    30e4:	88 85       	ldd	r24, Y+8	; 0x08
    30e6:	99 85       	ldd	r25, Y+9	; 0x09
    30e8:	fc 01       	movw	r30, r24
    30ea:	80 81       	ld	r24, Z
    30ec:	82 30       	cpi	r24, 0x02	; 2
    30ee:	19 f4       	brne	.+6      	; 0x30f6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	88 23       	and	r24, r24
    30f4:	11 f0       	breq	.+4      	; 0x30fa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	01 c0       	rjmp	.+2      	; 0x30fc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	29 96       	adiw	r28, 0x09	; 9
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	1f 91       	pop	r17
    310e:	0f 91       	pop	r16
    3110:	ff 90       	pop	r15
    3112:	ef 90       	pop	r14
    3114:	cf 90       	pop	r12
    3116:	af 90       	pop	r10
    3118:	08 95       	ret

0000311a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    311a:	af 92       	push	r10
    311c:	cf 92       	push	r12
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	0f 93       	push	r16
    3124:	1f 93       	push	r17
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	a1 97       	sbiw	r28, 0x21	; 33
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	9e 8f       	std	Y+30, r25	; 0x1e
    313c:	8d 8f       	std	Y+29, r24	; 0x1d
    313e:	78 a3       	std	Y+32, r23	; 0x20
    3140:	6f 8f       	std	Y+31, r22	; 0x1f
    3142:	49 a3       	std	Y+33, r20	; 0x21
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	8c 83       	std	Y+4, r24	; 0x04
    3148:	89 a1       	ldd	r24, Y+33	; 0x21
    314a:	81 35       	cpi	r24, 0x51	; 81
    314c:	10 f0       	brcs	.+4      	; 0x3152 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    314e:	86 e0       	ldi	r24, 0x06	; 6
    3150:	29 c2       	rjmp	.+1106   	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3152:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3154:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	6c e1       	ldi	r22, 0x1C	; 28
    315a:	a5 dc       	rcall	.-1718   	; 0x2aa6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    315c:	19 82       	std	Y+1, r1	; 0x01
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	88 23       	and	r24, r24
    3162:	09 f0       	breq	.+2      	; 0x3166 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    3164:	14 c2       	rjmp	.+1064   	; 0x358e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	82 30       	cpi	r24, 0x02	; 2
    316e:	91 05       	cpc	r25, r1
    3170:	b1 f0       	breq	.+44     	; 0x319e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    3172:	83 30       	cpi	r24, 0x03	; 3
    3174:	91 05       	cpc	r25, r1
    3176:	29 f1       	breq	.+74     	; 0x31c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	49 f5       	brne	.+82     	; 0x31ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    317c:	83 e9       	ldi	r24, 0x93	; 147
    317e:	8a 8b       	std	Y+18, r24	; 0x12
    3180:	1f 82       	std	Y+7, r1	; 0x07
    3182:	89 a1       	ldd	r24, Y+33	; 0x21
    3184:	88 23       	and	r24, r24
    3186:	41 f0       	breq	.+16     	; 0x3198 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    3188:	8f 8d       	ldd	r24, Y+31	; 0x1f
    318a:	98 a1       	ldd	r25, Y+32	; 0x20
    318c:	fc 01       	movw	r30, r24
    318e:	80 81       	ld	r24, Z
    3190:	85 30       	cpi	r24, 0x05	; 5
    3192:	10 f0       	brcs	.+4      	; 0x3198 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	01 c0       	rjmp	.+2      	; 0x319a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	8b 83       	std	Y+3, r24	; 0x03
    319c:	1a c0       	rjmp	.+52     	; 0x31d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    319e:	85 e9       	ldi	r24, 0x95	; 149
    31a0:	8a 8b       	std	Y+18, r24	; 0x12
    31a2:	83 e0       	ldi	r24, 0x03	; 3
    31a4:	8f 83       	std	Y+7, r24	; 0x07
    31a6:	89 a1       	ldd	r24, Y+33	; 0x21
    31a8:	88 23       	and	r24, r24
    31aa:	41 f0       	breq	.+16     	; 0x31bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    31ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ae:	98 a1       	ldd	r25, Y+32	; 0x20
    31b0:	fc 01       	movw	r30, r24
    31b2:	80 81       	ld	r24, Z
    31b4:	88 30       	cpi	r24, 0x08	; 8
    31b6:	10 f0       	brcs	.+4      	; 0x31bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	01 c0       	rjmp	.+2      	; 0x31be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	8b 83       	std	Y+3, r24	; 0x03
    31c0:	08 c0       	rjmp	.+16     	; 0x31d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    31c2:	87 e9       	ldi	r24, 0x97	; 151
    31c4:	8a 8b       	std	Y+18, r24	; 0x12
    31c6:	86 e0       	ldi	r24, 0x06	; 6
    31c8:	8f 83       	std	Y+7, r24	; 0x07
    31ca:	1b 82       	std	Y+3, r1	; 0x03
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    31ce:	85 e0       	ldi	r24, 0x05	; 5
    31d0:	e9 c1       	rjmp	.+978    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    31d2:	8f 81       	ldd	r24, Y+7	; 0x07
    31d4:	88 0f       	add	r24, r24
    31d6:	88 0f       	add	r24, r24
    31d8:	88 0f       	add	r24, r24
    31da:	99 a1       	ldd	r25, Y+33	; 0x21
    31dc:	f9 2f       	mov	r31, r25
    31de:	f8 1b       	sub	r31, r24
    31e0:	8f 2f       	mov	r24, r31
    31e2:	88 87       	std	Y+8, r24	; 0x08
    31e4:	88 85       	ldd	r24, Y+8	; 0x08
    31e6:	88 23       	and	r24, r24
    31e8:	0c f4       	brge	.+2      	; 0x31ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    31ea:	18 86       	std	Y+8, r1	; 0x08
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	8e 83       	std	Y+6, r24	; 0x06
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	88 23       	and	r24, r24
    31f4:	71 f0       	breq	.+28     	; 0x3212 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    31f6:	8e 81       	ldd	r24, Y+6	; 0x06
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	98 0f       	add	r25, r24
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	9e 01       	movw	r18, r28
    3204:	2e 5e       	subi	r18, 0xEE	; 238
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	82 0f       	add	r24, r18
    320a:	93 1f       	adc	r25, r19
    320c:	28 e8       	ldi	r18, 0x88	; 136
    320e:	fc 01       	movw	r30, r24
    3210:	20 83       	st	Z, r18
    3212:	88 85       	ldd	r24, Y+8	; 0x08
    3214:	88 23       	and	r24, r24
    3216:	0c f4       	brge	.+2      	; 0x321a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3218:	89 5f       	subi	r24, 0xF9	; 249
    321a:	85 95       	asr	r24
    321c:	85 95       	asr	r24
    321e:	85 95       	asr	r24
    3220:	98 2f       	mov	r25, r24
    3222:	88 85       	ldd	r24, Y+8	; 0x08
    3224:	87 70       	andi	r24, 0x07	; 7
    3226:	88 23       	and	r24, r24
    3228:	11 f0       	breq	.+4      	; 0x322e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	89 0f       	add	r24, r25
    3232:	8c 87       	std	Y+12, r24	; 0x0c
    3234:	8c 85       	ldd	r24, Y+12	; 0x0c
    3236:	88 23       	and	r24, r24
    3238:	99 f1       	breq	.+102    	; 0x32a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	88 23       	and	r24, r24
    323e:	11 f0       	breq	.+4      	; 0x3244 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	01 c0       	rjmp	.+2      	; 0x3246 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    3244:	84 e0       	ldi	r24, 0x04	; 4
    3246:	8e 87       	std	Y+14, r24	; 0x0e
    3248:	9c 85       	ldd	r25, Y+12	; 0x0c
    324a:	8e 85       	ldd	r24, Y+14	; 0x0e
    324c:	89 17       	cp	r24, r25
    324e:	10 f4       	brcc	.+4      	; 0x3254 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    3250:	8e 85       	ldd	r24, Y+14	; 0x0e
    3252:	8c 87       	std	Y+12, r24	; 0x0c
    3254:	1d 82       	std	Y+5, r1	; 0x05
    3256:	9d 81       	ldd	r25, Y+5	; 0x05
    3258:	8c 85       	ldd	r24, Y+12	; 0x0c
    325a:	98 17       	cp	r25, r24
    325c:	08 f5       	brcc	.+66     	; 0x32a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    325e:	8e 81       	ldd	r24, Y+6	; 0x06
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	98 0f       	add	r25, r24
    3264:	9e 83       	std	Y+6, r25	; 0x06
    3266:	88 2f       	mov	r24, r24
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	2f 81       	ldd	r18, Y+7	; 0x07
    326c:	42 2f       	mov	r20, r18
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	2d 81       	ldd	r18, Y+5	; 0x05
    3272:	22 2f       	mov	r18, r18
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	24 0f       	add	r18, r20
    3278:	35 1f       	adc	r19, r21
    327a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    327c:	58 a1       	ldd	r21, Y+32	; 0x20
    327e:	24 0f       	add	r18, r20
    3280:	35 1f       	adc	r19, r21
    3282:	2f 5f       	subi	r18, 0xFF	; 255
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	f9 01       	movw	r30, r18
    3288:	40 81       	ld	r20, Z
    328a:	9e 01       	movw	r18, r28
    328c:	2e 5e       	subi	r18, 0xEE	; 238
    328e:	3f 4f       	sbci	r19, 0xFF	; 255
    3290:	82 0f       	add	r24, r18
    3292:	93 1f       	adc	r25, r19
    3294:	fc 01       	movw	r30, r24
    3296:	40 83       	st	Z, r20
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	8f 5f       	subi	r24, 0xFF	; 255
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	db cf       	rjmp	.-74     	; 0x3256 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	88 23       	and	r24, r24
    32a4:	19 f0       	breq	.+6      	; 0x32ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    32a6:	88 85       	ldd	r24, Y+8	; 0x08
    32a8:	88 5f       	subi	r24, 0xF8	; 248
    32aa:	88 87       	std	Y+8, r24	; 0x08
    32ac:	1a 82       	std	Y+2, r1	; 0x02
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	88 23       	and	r24, r24
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    32b4:	f5 c0       	rjmp	.+490    	; 0x34a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    32b6:	88 85       	ldd	r24, Y+8	; 0x08
    32b8:	80 32       	cpi	r24, 0x20	; 32
    32ba:	3c f1       	brlt	.+78     	; 0x330a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    32bc:	80 e7       	ldi	r24, 0x70	; 112
    32be:	8b 8b       	std	Y+19, r24	; 0x13
    32c0:	9c 89       	ldd	r25, Y+20	; 0x14
    32c2:	8d 89       	ldd	r24, Y+21	; 0x15
    32c4:	98 27       	eor	r25, r24
    32c6:	8e 89       	ldd	r24, Y+22	; 0x16
    32c8:	98 27       	eor	r25, r24
    32ca:	8f 89       	ldd	r24, Y+23	; 0x17
    32cc:	89 27       	eor	r24, r25
    32ce:	88 8f       	std	Y+24, r24	; 0x18
    32d0:	ce 01       	movw	r24, r28
    32d2:	42 96       	adiw	r24, 0x12	; 18
    32d4:	9c 01       	movw	r18, r24
    32d6:	29 5f       	subi	r18, 0xF9	; 249
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	be 01       	movw	r22, r28
    32dc:	6e 5e       	subi	r22, 0xEE	; 238
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e4:	47 e0       	ldi	r20, 0x07	; 7
    32e6:	03 dc       	rcall	.-2042   	; 0x2aee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    32e8:	8f 87       	std	Y+15, r24	; 0x0f
    32ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ec:	88 23       	and	r24, r24
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    32f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f2:	58 c1       	rjmp	.+688    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    32f4:	1b 8e       	std	Y+27, r1	; 0x1b
    32f6:	89 e0       	ldi	r24, 0x09	; 9
    32f8:	89 87       	std	Y+9, r24	; 0x09
    32fa:	ce 01       	movw	r24, r28
    32fc:	42 96       	adiw	r24, 0x12	; 18
    32fe:	06 96       	adiw	r24, 0x06	; 6
    3300:	9b 87       	std	Y+11, r25	; 0x0b
    3302:	8a 87       	std	Y+10, r24	; 0x0a
    3304:	83 e0       	ldi	r24, 0x03	; 3
    3306:	8c 8f       	std	Y+28, r24	; 0x1c
    3308:	33 c0       	rjmp	.+102    	; 0x3370 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    330a:	88 85       	ldd	r24, Y+8	; 0x08
    330c:	87 78       	andi	r24, 0x87	; 135
    330e:	88 23       	and	r24, r24
    3310:	1c f4       	brge	.+6      	; 0x3318 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3312:	81 50       	subi	r24, 0x01	; 1
    3314:	88 6f       	ori	r24, 0xF8	; 248
    3316:	8f 5f       	subi	r24, 0xFF	; 255
    3318:	8b 8f       	std	Y+27, r24	; 0x1b
    331a:	88 85       	ldd	r24, Y+8	; 0x08
    331c:	88 23       	and	r24, r24
    331e:	0c f4       	brge	.+2      	; 0x3322 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    3320:	89 5f       	subi	r24, 0xF9	; 249
    3322:	85 95       	asr	r24
    3324:	85 95       	asr	r24
    3326:	85 95       	asr	r24
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	8d 81       	ldd	r24, Y+5	; 0x05
    332c:	8e 5f       	subi	r24, 0xFE	; 254
    332e:	8e 83       	std	Y+6, r24	; 0x06
    3330:	8e 81       	ldd	r24, Y+6	; 0x06
    3332:	98 2f       	mov	r25, r24
    3334:	92 95       	swap	r25
    3336:	90 7f       	andi	r25, 0xF0	; 240
    3338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    333a:	89 0f       	add	r24, r25
    333c:	8b 8b       	std	Y+19, r24	; 0x13
    333e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3340:	88 23       	and	r24, r24
    3342:	11 f0       	breq	.+4      	; 0x3348 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	01 c0       	rjmp	.+2      	; 0x334a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	89 0f       	add	r24, r25
    334e:	89 87       	std	Y+9, r24	; 0x09
    3350:	8e 81       	ldd	r24, Y+6	; 0x06
    3352:	88 2f       	mov	r24, r24
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	9e 01       	movw	r18, r28
    3358:	2e 5e       	subi	r18, 0xEE	; 238
    335a:	3f 4f       	sbci	r19, 0xFF	; 255
    335c:	82 0f       	add	r24, r18
    335e:	93 1f       	adc	r25, r19
    3360:	9b 87       	std	Y+11, r25	; 0x0b
    3362:	8a 87       	std	Y+10, r24	; 0x0a
    3364:	99 e0       	ldi	r25, 0x09	; 9
    3366:	8e 81       	ldd	r24, Y+6	; 0x06
    3368:	f9 2f       	mov	r31, r25
    336a:	f8 1b       	sub	r31, r24
    336c:	8f 2f       	mov	r24, r31
    336e:	8c 8f       	std	Y+28, r24	; 0x1c
    3370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3372:	88 8b       	std	Y+16, r24	; 0x10
    3374:	88 89       	ldd	r24, Y+16	; 0x10
    3376:	98 2f       	mov	r25, r24
    3378:	92 95       	swap	r25
    337a:	90 7f       	andi	r25, 0xF0	; 240
    337c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    337e:	29 2f       	mov	r18, r25
    3380:	28 0f       	add	r18, r24
    3382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3384:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3386:	42 2f       	mov	r20, r18
    3388:	6a e1       	ldi	r22, 0x1A	; 26
    338a:	13 da       	rcall	.-3034   	; 0x27b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    338c:	fe 01       	movw	r30, r28
    338e:	7b 96       	adiw	r30, 0x1b	; 27
    3390:	ae 01       	movw	r20, r28
    3392:	44 5e       	subi	r20, 0xE4	; 228
    3394:	5f 4f       	sbci	r21, 0xFF	; 255
    3396:	2a 85       	ldd	r18, Y+10	; 0x0a
    3398:	3b 85       	ldd	r19, Y+11	; 0x0b
    339a:	be 01       	movw	r22, r28
    339c:	6e 5e       	subi	r22, 0xEE	; 238
    339e:	7f 4f       	sbci	r23, 0xFF	; 255
    33a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33a4:	a1 2c       	mov	r10, r1
    33a6:	c8 88       	ldd	r12, Y+16	; 0x10
    33a8:	7f 01       	movw	r14, r30
    33aa:	8a 01       	movw	r16, r20
    33ac:	49 85       	ldd	r20, Y+9	; 0x09
    33ae:	bd dc       	rcall	.-1670   	; 0x2d2a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    33b0:	8f 87       	std	Y+15, r24	; 0x0f
    33b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b4:	82 30       	cpi	r24, 0x02	; 2
    33b6:	09 f0       	breq	.+2      	; 0x33ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    33b8:	65 c0       	rjmp	.+202    	; 0x3484 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    33ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33be:	6c e1       	ldi	r22, 0x1C	; 28
    33c0:	79 da       	rcall	.-2830   	; 0x28b4 <_ZN7MFRC52216PCD_ReadRegisterEh>
    33c2:	89 8b       	std	Y+17, r24	; 0x11
    33c4:	89 89       	ldd	r24, Y+17	; 0x11
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	80 72       	andi	r24, 0x20	; 32
    33cc:	99 27       	eor	r25, r25
    33ce:	89 2b       	or	r24, r25
    33d0:	11 f0       	breq	.+4      	; 0x33d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	e7 c0       	rjmp	.+462    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33d6:	89 89       	ldd	r24, Y+17	; 0x11
    33d8:	8f 71       	andi	r24, 0x1F	; 31
    33da:	8d 87       	std	Y+13, r24	; 0x0d
    33dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33de:	88 23       	and	r24, r24
    33e0:	11 f4       	brne	.+4      	; 0x33e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    33e2:	80 e2       	ldi	r24, 0x20	; 32
    33e4:	8d 87       	std	Y+13, r24	; 0x0d
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	88 85       	ldd	r24, Y+8	; 0x08
    33ee:	08 2e       	mov	r0, r24
    33f0:	00 0c       	add	r0, r0
    33f2:	99 0b       	sbc	r25, r25
    33f4:	82 17       	cp	r24, r18
    33f6:	93 07       	cpc	r25, r19
    33f8:	14 f0       	brlt	.+4      	; 0x33fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    33fa:	85 e0       	ldi	r24, 0x05	; 5
    33fc:	d3 c0       	rjmp	.+422    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3400:	88 87       	std	Y+8, r24	; 0x08
    3402:	88 85       	ldd	r24, Y+8	; 0x08
    3404:	08 2e       	mov	r0, r24
    3406:	00 0c       	add	r0, r0
    3408:	99 0b       	sbc	r25, r25
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	87 70       	andi	r24, 0x07	; 7
    340e:	90 78       	andi	r25, 0x80	; 128
    3410:	99 23       	and	r25, r25
    3412:	24 f4       	brge	.+8      	; 0x341c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	88 6f       	ori	r24, 0xF8	; 248
    3418:	9f 6f       	ori	r25, 0xFF	; 255
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	8d 83       	std	Y+5, r24	; 0x05
    341e:	88 85       	ldd	r24, Y+8	; 0x08
    3420:	88 23       	and	r24, r24
    3422:	0c f4       	brge	.+2      	; 0x3426 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3424:	89 5f       	subi	r24, 0xF9	; 249
    3426:	85 95       	asr	r24
    3428:	85 95       	asr	r24
    342a:	85 95       	asr	r24
    342c:	98 2f       	mov	r25, r24
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	88 23       	and	r24, r24
    3432:	11 f0       	breq	.+4      	; 0x3438 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	01 c0       	rjmp	.+2      	; 0x343a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	89 0f       	add	r24, r25
    343c:	8f 5f       	subi	r24, 0xFF	; 255
    343e:	8e 83       	std	Y+6, r24	; 0x06
    3440:	8e 81       	ldd	r24, Y+6	; 0x06
    3442:	88 2f       	mov	r24, r24
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	2e 81       	ldd	r18, Y+6	; 0x06
    3448:	22 2f       	mov	r18, r18
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	ae 01       	movw	r20, r28
    344e:	4e 5e       	subi	r20, 0xEE	; 238
    3450:	5f 4f       	sbci	r21, 0xFF	; 255
    3452:	24 0f       	add	r18, r20
    3454:	35 1f       	adc	r19, r21
    3456:	f9 01       	movw	r30, r18
    3458:	20 81       	ld	r18, Z
    345a:	62 2f       	mov	r22, r18
    345c:	2d 81       	ldd	r18, Y+5	; 0x05
    345e:	42 2f       	mov	r20, r18
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	21 e0       	ldi	r18, 0x01	; 1
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	02 c0       	rjmp	.+4      	; 0x346c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    3468:	22 0f       	add	r18, r18
    346a:	33 1f       	adc	r19, r19
    346c:	4a 95       	dec	r20
    346e:	e2 f7       	brpl	.-8      	; 0x3468 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    3470:	26 2b       	or	r18, r22
    3472:	42 2f       	mov	r20, r18
    3474:	9e 01       	movw	r18, r28
    3476:	2e 5e       	subi	r18, 0xEE	; 238
    3478:	3f 4f       	sbci	r19, 0xFF	; 255
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	fc 01       	movw	r30, r24
    3480:	40 83       	st	Z, r20
    3482:	15 cf       	rjmp	.-470    	; 0x32ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3484:	8f 85       	ldd	r24, Y+15	; 0x0f
    3486:	88 23       	and	r24, r24
    3488:	11 f0       	breq	.+4      	; 0x348e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    348a:	8f 85       	ldd	r24, Y+15	; 0x0f
    348c:	8b c0       	rjmp	.+278    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    348e:	88 85       	ldd	r24, Y+8	; 0x08
    3490:	80 32       	cpi	r24, 0x20	; 32
    3492:	1c f0       	brlt	.+6      	; 0x349a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	8a 83       	std	Y+2, r24	; 0x02
    3498:	0a cf       	rjmp	.-492    	; 0x32ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    349a:	80 e2       	ldi	r24, 0x20	; 32
    349c:	88 87       	std	Y+8, r24	; 0x08
    349e:	07 cf       	rjmp	.-498    	; 0x32ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    34a0:	8c 89       	ldd	r24, Y+20	; 0x14
    34a2:	88 38       	cpi	r24, 0x88	; 136
    34a4:	11 f4       	brne	.+4      	; 0x34aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	01 c0       	rjmp	.+2      	; 0x34ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    34aa:	82 e0       	ldi	r24, 0x02	; 2
    34ac:	8e 83       	std	Y+6, r24	; 0x06
    34ae:	8c 89       	ldd	r24, Y+20	; 0x14
    34b0:	88 38       	cpi	r24, 0x88	; 136
    34b2:	11 f4       	brne	.+4      	; 0x34b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    34b4:	83 e0       	ldi	r24, 0x03	; 3
    34b6:	01 c0       	rjmp	.+2      	; 0x34ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    34b8:	84 e0       	ldi	r24, 0x04	; 4
    34ba:	8c 87       	std	Y+12, r24	; 0x0c
    34bc:	1d 82       	std	Y+5, r1	; 0x05
    34be:	9d 81       	ldd	r25, Y+5	; 0x05
    34c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    34c2:	98 17       	cp	r25, r24
    34c4:	00 f5       	brcc	.+64     	; 0x3506 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    34c6:	8f 81       	ldd	r24, Y+7	; 0x07
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	8d 81       	ldd	r24, Y+5	; 0x05
    34ce:	88 2f       	mov	r24, r24
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	82 0f       	add	r24, r18
    34d4:	93 1f       	adc	r25, r19
    34d6:	2e 81       	ldd	r18, Y+6	; 0x06
    34d8:	31 e0       	ldi	r19, 0x01	; 1
    34da:	32 0f       	add	r19, r18
    34dc:	3e 83       	std	Y+6, r19	; 0x06
    34de:	22 2f       	mov	r18, r18
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	ae 01       	movw	r20, r28
    34e4:	4e 5e       	subi	r20, 0xEE	; 238
    34e6:	5f 4f       	sbci	r21, 0xFF	; 255
    34e8:	24 0f       	add	r18, r20
    34ea:	35 1f       	adc	r19, r21
    34ec:	f9 01       	movw	r30, r18
    34ee:	40 81       	ld	r20, Z
    34f0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34f2:	38 a1       	ldd	r19, Y+32	; 0x20
    34f4:	82 0f       	add	r24, r18
    34f6:	93 1f       	adc	r25, r19
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	fc 01       	movw	r30, r24
    34fc:	40 83       	st	Z, r20
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	8d 83       	std	Y+5, r24	; 0x05
    3504:	dc cf       	rjmp	.-72     	; 0x34be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3506:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3508:	83 30       	cpi	r24, 0x03	; 3
    350a:	19 f4       	brne	.+6      	; 0x3512 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    350c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350e:	88 23       	and	r24, r24
    3510:	11 f0       	breq	.+4      	; 0x3516 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	47 c0       	rjmp	.+142    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3516:	ce 01       	movw	r24, r28
    3518:	42 96       	adiw	r24, 0x12	; 18
    351a:	9c 01       	movw	r18, r24
    351c:	2e 5f       	subi	r18, 0xFE	; 254
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	6a 85       	ldd	r22, Y+10	; 0x0a
    3522:	7b 85       	ldd	r23, Y+11	; 0x0b
    3524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3526:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	e1 da       	rcall	.-2622   	; 0x2aee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    352c:	8f 87       	std	Y+15, r24	; 0x0f
    352e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3530:	88 23       	and	r24, r24
    3532:	11 f0       	breq	.+4      	; 0x3538 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3534:	8f 85       	ldd	r24, Y+15	; 0x0f
    3536:	36 c0       	rjmp	.+108    	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3538:	2c 89       	ldd	r18, Y+20	; 0x14
    353a:	8a 85       	ldd	r24, Y+10	; 0x0a
    353c:	9b 85       	ldd	r25, Y+11	; 0x0b
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	fc 01       	movw	r30, r24
    3542:	80 81       	ld	r24, Z
    3544:	28 17       	cp	r18, r24
    3546:	41 f4       	brne	.+16     	; 0x3558 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    3548:	2d 89       	ldd	r18, Y+21	; 0x15
    354a:	8a 85       	ldd	r24, Y+10	; 0x0a
    354c:	9b 85       	ldd	r25, Y+11	; 0x0b
    354e:	02 96       	adiw	r24, 0x02	; 2
    3550:	fc 01       	movw	r30, r24
    3552:	80 81       	ld	r24, Z
    3554:	28 17       	cp	r18, r24
    3556:	11 f0       	breq	.+4      	; 0x355c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    3558:	87 e0       	ldi	r24, 0x07	; 7
    355a:	24 c0       	rjmp	.+72     	; 0x35a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    355c:	8a 85       	ldd	r24, Y+10	; 0x0a
    355e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3560:	fc 01       	movw	r30, r24
    3562:	80 81       	ld	r24, Z
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	84 70       	andi	r24, 0x04	; 4
    356a:	99 27       	eor	r25, r25
    356c:	89 2b       	or	r24, r25
    356e:	21 f0       	breq	.+8      	; 0x3578 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    3570:	8c 81       	ldd	r24, Y+4	; 0x04
    3572:	8f 5f       	subi	r24, 0xFF	; 255
    3574:	8c 83       	std	Y+4, r24	; 0x04
    3576:	f3 cd       	rjmp	.-1050   	; 0x315e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	89 83       	std	Y+1, r24	; 0x01
    357c:	8a 85       	ldd	r24, Y+10	; 0x0a
    357e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3580:	fc 01       	movw	r30, r24
    3582:	20 81       	ld	r18, Z
    3584:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3586:	98 a1       	ldd	r25, Y+32	; 0x20
    3588:	fc 01       	movw	r30, r24
    358a:	23 87       	std	Z+11, r18	; 0x0b
    358c:	e8 cd       	rjmp	.-1072   	; 0x315e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	89 2f       	mov	r24, r25
    3592:	88 0f       	add	r24, r24
    3594:	89 0f       	add	r24, r25
    3596:	21 e0       	ldi	r18, 0x01	; 1
    3598:	28 0f       	add	r18, r24
    359a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    359c:	98 a1       	ldd	r25, Y+32	; 0x20
    359e:	fc 01       	movw	r30, r24
    35a0:	20 83       	st	Z, r18
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	a1 96       	adiw	r28, 0x21	; 33
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	cf 90       	pop	r12
    35be:	af 90       	pop	r10
    35c0:	08 95       	ret

000035c2 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    35d6:	ae 01       	movw	r20, r28
    35d8:	4c 5f       	subi	r20, 0xFC	; 252
    35da:	5f 4f       	sbci	r21, 0xFF	; 255
    35dc:	9e 01       	movw	r18, r28
    35de:	2e 5f       	subi	r18, 0xFE	; 254
    35e0:	3f 4f       	sbci	r19, 0xFF	; 255
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	b9 01       	movw	r22, r18
    35e8:	1f dd       	rcall	.-1474   	; 0x3028 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    35ea:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	88 23       	and	r24, r24
    35f0:	19 f0       	breq	.+6      	; 0x35f8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	82 30       	cpi	r24, 0x02	; 2
    35f6:	11 f4       	brne	.+4      	; 0x35fc <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	01 c0       	rjmp	.+2      	; 0x35fe <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    35fe:	26 96       	adiw	r28, 0x06	; 6
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	08 95       	ret

00003610 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	00 d0       	rcall	.+0      	; 0x3616 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	9b 83       	std	Y+3, r25	; 0x03
    361c:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    361e:	2a 81       	ldd	r18, Y+2	; 0x02
    3620:	3b 81       	ldd	r19, Y+3	; 0x03
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	9b 81       	ldd	r25, Y+3	; 0x03
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	b9 01       	movw	r22, r18
    362a:	77 dd       	rcall	.-1298   	; 0x311a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    362c:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	99 81       	ldd	r25, Y+1	; 0x01
    3632:	99 23       	and	r25, r25
    3634:	09 f0       	breq	.+2      	; 0x3638 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3636:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	08 95       	ret

00003644 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	00 d0       	rcall	.+0      	; 0x364a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    364a:	1f 92       	push	r1
    364c:	1f 92       	push	r1
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	89 83       	std	Y+1, r24	; 0x01
    3654:	7b 83       	std	Y+3, r23	; 0x03
    3656:	6a 83       	std	Y+2, r22	; 0x02
    3658:	5d 83       	std	Y+5, r21	; 0x05
    365a:	4c 83       	std	Y+4, r20	; 0x04
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	8d 5e       	subi	r24, 0xED	; 237
    3664:	9b 4f       	sbci	r25, 0xFB	; 251
    3666:	fc 01       	movw	r30, r24
    3668:	80 81       	ld	r24, Z
    366a:	88 1f       	adc	r24, r24
    366c:	88 27       	eor	r24, r24
    366e:	88 1f       	adc	r24, r24
    3670:	88 23       	and	r24, r24
    3672:	31 f0       	breq	.+12     	; 0x3680 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	fc 01       	movw	r30, r24
    367a:	11 82       	std	Z+1, r1	; 0x01
    367c:	10 82       	st	Z, r1
    367e:	72 c0       	rjmp	.+228    	; 0x3764 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	28 2f       	mov	r18, r24
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	c9 01       	movw	r24, r18
    3688:	88 0f       	add	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	82 0f       	add	r24, r18
    368e:	93 1f       	adc	r25, r19
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	9c 01       	movw	r18, r24
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	8d 5e       	subi	r24, 0xED	; 237
    36a2:	9b 4f       	sbci	r25, 0xFB	; 251
    36a4:	fc 01       	movw	r30, r24
    36a6:	80 81       	ld	r24, Z
    36a8:	08 2e       	mov	r0, r24
    36aa:	00 0c       	add	r0, r0
    36ac:	99 0b       	sbc	r25, r25
    36ae:	28 0f       	add	r18, r24
    36b0:	39 1f       	adc	r19, r25
    36b2:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <ServoCount>
    36b6:	88 2f       	mov	r24, r24
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	28 17       	cp	r18, r24
    36bc:	39 07       	cpc	r19, r25
    36be:	4c f5       	brge	.+82     	; 0x3712 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	28 2f       	mov	r18, r24
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	c9 01       	movw	r24, r18
    36c8:	88 0f       	add	r24, r24
    36ca:	99 1f       	adc	r25, r25
    36cc:	82 0f       	add	r24, r18
    36ce:	93 1f       	adc	r25, r19
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	9c 01       	movw	r18, r24
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	8d 5e       	subi	r24, 0xED	; 237
    36e2:	9b 4f       	sbci	r25, 0xFB	; 251
    36e4:	fc 01       	movw	r30, r24
    36e6:	80 81       	ld	r24, Z
    36e8:	08 2e       	mov	r0, r24
    36ea:	00 0c       	add	r0, r0
    36ec:	99 0b       	sbc	r25, r25
    36ee:	28 0f       	add	r18, r24
    36f0:	39 1f       	adc	r19, r25
    36f2:	c9 01       	movw	r24, r18
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	82 0f       	add	r24, r18
    36fa:	93 1f       	adc	r25, r19
    36fc:	8d 57       	subi	r24, 0x7D	; 125
    36fe:	9c 4f       	sbci	r25, 0xFC	; 252
    3700:	fc 01       	movw	r30, r24
    3702:	80 81       	ld	r24, Z
    3704:	86 fb       	bst	r24, 6
    3706:	88 27       	eor	r24, r24
    3708:	80 f9       	bld	r24, 0
    370a:	81 30       	cpi	r24, 0x01	; 1
    370c:	11 f4       	brne	.+4      	; 0x3712 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	88 23       	and	r24, r24
    3716:	31 f1       	breq	.+76     	; 0x3764 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	c9 01       	movw	r24, r18
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	82 0f       	add	r24, r18
    3726:	93 1f       	adc	r25, r19
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	9c 01       	movw	r18, r24
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	88 2f       	mov	r24, r24
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	8d 5e       	subi	r24, 0xED	; 237
    373a:	9b 4f       	sbci	r25, 0xFB	; 251
    373c:	fc 01       	movw	r30, r24
    373e:	80 81       	ld	r24, Z
    3740:	08 2e       	mov	r0, r24
    3742:	00 0c       	add	r0, r0
    3744:	99 0b       	sbc	r25, r25
    3746:	28 0f       	add	r18, r24
    3748:	39 1f       	adc	r19, r25
    374a:	c9 01       	movw	r24, r18
    374c:	88 0f       	add	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	82 0f       	add	r24, r18
    3752:	93 1f       	adc	r25, r19
    3754:	8d 57       	subi	r24, 0x7D	; 125
    3756:	9c 4f       	sbci	r25, 0xFC	; 252
    3758:	fc 01       	movw	r30, r24
    375a:	80 81       	ld	r24, Z
    375c:	8f 73       	andi	r24, 0x3F	; 63
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	88 2f       	mov	r24, r24
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	9c 01       	movw	r18, r24
    376c:	2d 5e       	subi	r18, 0xED	; 237
    376e:	3b 4f       	sbci	r19, 0xFB	; 251
    3770:	f9 01       	movw	r30, r18
    3772:	20 81       	ld	r18, Z
    3774:	2f 5f       	subi	r18, 0xFF	; 255
    3776:	8d 5e       	subi	r24, 0xED	; 237
    3778:	9b 4f       	sbci	r25, 0xFB	; 251
    377a:	fc 01       	movw	r30, r24
    377c:	20 83       	st	Z, r18
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	c9 01       	movw	r24, r18
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	82 0f       	add	r24, r18
    378c:	93 1f       	adc	r25, r19
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	88 0f       	add	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	9c 01       	movw	r18, r24
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	88 2f       	mov	r24, r24
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	8d 5e       	subi	r24, 0xED	; 237
    37a0:	9b 4f       	sbci	r25, 0xFB	; 251
    37a2:	fc 01       	movw	r30, r24
    37a4:	80 81       	ld	r24, Z
    37a6:	08 2e       	mov	r0, r24
    37a8:	00 0c       	add	r0, r0
    37aa:	99 0b       	sbc	r25, r25
    37ac:	28 0f       	add	r18, r24
    37ae:	39 1f       	adc	r19, r25
    37b0:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <ServoCount>
    37b4:	88 2f       	mov	r24, r24
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	28 17       	cp	r18, r24
    37ba:	39 07       	cpc	r19, r25
    37bc:	5c f4       	brge	.+22     	; 0x37d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	8d 5e       	subi	r24, 0xED	; 237
    37c6:	9b 4f       	sbci	r25, 0xFB	; 251
    37c8:	fc 01       	movw	r30, r24
    37ca:	80 81       	ld	r24, Z
    37cc:	8c 30       	cpi	r24, 0x0C	; 12
    37ce:	14 f4       	brge	.+4      	; 0x37d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	01 c0       	rjmp	.+2      	; 0x37d6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	88 23       	and	r24, r24
    37d8:	09 f4       	brne	.+2      	; 0x37dc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    37da:	7f c0       	rjmp	.+254    	; 0x38da <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	fc 01       	movw	r30, r24
    37e2:	40 81       	ld	r20, Z
    37e4:	51 81       	ldd	r21, Z+1	; 0x01
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	28 2f       	mov	r18, r24
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	c9 01       	movw	r24, r18
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	82 0f       	add	r24, r18
    37f4:	93 1f       	adc	r25, r19
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	9c 01       	movw	r18, r24
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	88 2f       	mov	r24, r24
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	8d 5e       	subi	r24, 0xED	; 237
    3808:	9b 4f       	sbci	r25, 0xFB	; 251
    380a:	fc 01       	movw	r30, r24
    380c:	80 81       	ld	r24, Z
    380e:	08 2e       	mov	r0, r24
    3810:	00 0c       	add	r0, r0
    3812:	99 0b       	sbc	r25, r25
    3814:	28 0f       	add	r18, r24
    3816:	39 1f       	adc	r19, r25
    3818:	c9 01       	movw	r24, r18
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	82 0f       	add	r24, r18
    3820:	93 1f       	adc	r25, r19
    3822:	8c 57       	subi	r24, 0x7C	; 124
    3824:	9c 4f       	sbci	r25, 0xFC	; 252
    3826:	fc 01       	movw	r30, r24
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	9a 01       	movw	r18, r20
    382e:	28 0f       	add	r18, r24
    3830:	39 1f       	adc	r19, r25
    3832:	8c 81       	ldd	r24, Y+4	; 0x04
    3834:	9d 81       	ldd	r25, Y+5	; 0x05
    3836:	fc 01       	movw	r30, r24
    3838:	31 83       	std	Z+1, r19	; 0x01
    383a:	20 83       	st	Z, r18
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	28 2f       	mov	r18, r24
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	c9 01       	movw	r24, r18
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	82 0f       	add	r24, r18
    384a:	93 1f       	adc	r25, r19
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	9c 01       	movw	r18, r24
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	88 2f       	mov	r24, r24
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	8d 5e       	subi	r24, 0xED	; 237
    385e:	9b 4f       	sbci	r25, 0xFB	; 251
    3860:	fc 01       	movw	r30, r24
    3862:	80 81       	ld	r24, Z
    3864:	08 2e       	mov	r0, r24
    3866:	00 0c       	add	r0, r0
    3868:	99 0b       	sbc	r25, r25
    386a:	28 0f       	add	r18, r24
    386c:	39 1f       	adc	r19, r25
    386e:	c9 01       	movw	r24, r18
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	82 0f       	add	r24, r18
    3876:	93 1f       	adc	r25, r19
    3878:	8d 57       	subi	r24, 0x7D	; 125
    387a:	9c 4f       	sbci	r25, 0xFC	; 252
    387c:	fc 01       	movw	r30, r24
    387e:	80 81       	ld	r24, Z
    3880:	86 fb       	bst	r24, 6
    3882:	88 27       	eor	r24, r24
    3884:	80 f9       	bld	r24, 0
    3886:	88 23       	and	r24, r24
    3888:	09 f4       	brne	.+2      	; 0x388c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    388a:	51 c0       	rjmp	.+162    	; 0x392e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	28 2f       	mov	r18, r24
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	c9 01       	movw	r24, r18
    3894:	88 0f       	add	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	82 0f       	add	r24, r18
    389a:	93 1f       	adc	r25, r19
    389c:	88 0f       	add	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	9c 01       	movw	r18, r24
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	88 2f       	mov	r24, r24
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	8d 5e       	subi	r24, 0xED	; 237
    38ae:	9b 4f       	sbci	r25, 0xFB	; 251
    38b0:	fc 01       	movw	r30, r24
    38b2:	80 81       	ld	r24, Z
    38b4:	08 2e       	mov	r0, r24
    38b6:	00 0c       	add	r0, r0
    38b8:	99 0b       	sbc	r25, r25
    38ba:	28 0f       	add	r18, r24
    38bc:	39 1f       	adc	r19, r25
    38be:	c9 01       	movw	r24, r18
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	82 0f       	add	r24, r18
    38c6:	93 1f       	adc	r25, r19
    38c8:	8d 57       	subi	r24, 0x7D	; 125
    38ca:	9c 4f       	sbci	r25, 0xFC	; 252
    38cc:	fc 01       	movw	r30, r24
    38ce:	80 81       	ld	r24, Z
    38d0:	8f 73       	andi	r24, 0x3F	; 63
    38d2:	61 e0       	ldi	r22, 0x01	; 1
    38d4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    38d8:	2a c0       	rjmp	.+84     	; 0x392e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    38da:	8a 81       	ldd	r24, Y+2	; 0x02
    38dc:	9b 81       	ldd	r25, Y+3	; 0x03
    38de:	fc 01       	movw	r30, r24
    38e0:	80 81       	ld	r24, Z
    38e2:	91 81       	ldd	r25, Z+1	; 0x01
    38e4:	04 96       	adiw	r24, 0x04	; 4
    38e6:	21 e0       	ldi	r18, 0x01	; 1
    38e8:	80 34       	cpi	r24, 0x40	; 64
    38ea:	9c 49       	sbci	r25, 0x9C	; 156
    38ec:	08 f0       	brcs	.+2      	; 0x38f0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	22 23       	and	r18, r18
    38f2:	41 f0       	breq	.+16     	; 0x3904 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    38f4:	8c 81       	ldd	r24, Y+4	; 0x04
    38f6:	9d 81       	ldd	r25, Y+5	; 0x05
    38f8:	20 e4       	ldi	r18, 0x40	; 64
    38fa:	3c e9       	ldi	r19, 0x9C	; 156
    38fc:	fc 01       	movw	r30, r24
    38fe:	31 83       	std	Z+1, r19	; 0x01
    3900:	20 83       	st	Z, r18
    3902:	0d c0       	rjmp	.+26     	; 0x391e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3904:	8a 81       	ldd	r24, Y+2	; 0x02
    3906:	9b 81       	ldd	r25, Y+3	; 0x03
    3908:	fc 01       	movw	r30, r24
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	9c 01       	movw	r18, r24
    3910:	2c 5f       	subi	r18, 0xFC	; 252
    3912:	3f 4f       	sbci	r19, 0xFF	; 255
    3914:	8c 81       	ldd	r24, Y+4	; 0x04
    3916:	9d 81       	ldd	r25, Y+5	; 0x05
    3918:	fc 01       	movw	r30, r24
    391a:	31 83       	std	Z+1, r19	; 0x01
    391c:	20 83       	st	Z, r18
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	88 2f       	mov	r24, r24
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	8d 5e       	subi	r24, 0xED	; 237
    3926:	9b 4f       	sbci	r25, 0xFB	; 251
    3928:	2f ef       	ldi	r18, 0xFF	; 255
    392a:	fc 01       	movw	r30, r24
    392c:	20 83       	st	Z, r18
    392e:	00 00       	nop
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	08 95       	ret

00003940 <__vector_17>:
    3940:	1f 92       	push	r1
    3942:	0f 92       	push	r0
    3944:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3948:	0f 92       	push	r0
    394a:	11 24       	eor	r1, r1
    394c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3950:	0f 92       	push	r0
    3952:	2f 93       	push	r18
    3954:	3f 93       	push	r19
    3956:	4f 93       	push	r20
    3958:	5f 93       	push	r21
    395a:	6f 93       	push	r22
    395c:	7f 93       	push	r23
    395e:	8f 93       	push	r24
    3960:	9f 93       	push	r25
    3962:	af 93       	push	r26
    3964:	bf 93       	push	r27
    3966:	ef 93       	push	r30
    3968:	ff 93       	push	r31
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	48 e8       	ldi	r20, 0x88	; 136
    3974:	50 e0       	ldi	r21, 0x00	; 0
    3976:	64 e8       	ldi	r22, 0x84	; 132
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	63 de       	rcall	.-826    	; 0x3644 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    397e:	00 00       	nop
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	ff 91       	pop	r31
    3986:	ef 91       	pop	r30
    3988:	bf 91       	pop	r27
    398a:	af 91       	pop	r26
    398c:	9f 91       	pop	r25
    398e:	8f 91       	pop	r24
    3990:	7f 91       	pop	r23
    3992:	6f 91       	pop	r22
    3994:	5f 91       	pop	r21
    3996:	4f 91       	pop	r20
    3998:	3f 91       	pop	r19
    399a:	2f 91       	pop	r18
    399c:	0f 90       	pop	r0
    399e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    39a2:	0f 90       	pop	r0
    39a4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39a8:	0f 90       	pop	r0
    39aa:	1f 90       	pop	r1
    39ac:	18 95       	reti

000039ae <__vector_32>:
    39ae:	1f 92       	push	r1
    39b0:	0f 92       	push	r0
    39b2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39b6:	0f 92       	push	r0
    39b8:	11 24       	eor	r1, r1
    39ba:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    39be:	0f 92       	push	r0
    39c0:	2f 93       	push	r18
    39c2:	3f 93       	push	r19
    39c4:	4f 93       	push	r20
    39c6:	5f 93       	push	r21
    39c8:	6f 93       	push	r22
    39ca:	7f 93       	push	r23
    39cc:	8f 93       	push	r24
    39ce:	9f 93       	push	r25
    39d0:	af 93       	push	r26
    39d2:	bf 93       	push	r27
    39d4:	ef 93       	push	r30
    39d6:	ff 93       	push	r31
    39d8:	cf 93       	push	r28
    39da:	df 93       	push	r29
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	48 e9       	ldi	r20, 0x98	; 152
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	64 e9       	ldi	r22, 0x94	; 148
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	2c de       	rcall	.-936    	; 0x3644 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    39ec:	00 00       	nop
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	ff 91       	pop	r31
    39f4:	ef 91       	pop	r30
    39f6:	bf 91       	pop	r27
    39f8:	af 91       	pop	r26
    39fa:	9f 91       	pop	r25
    39fc:	8f 91       	pop	r24
    39fe:	7f 91       	pop	r23
    3a00:	6f 91       	pop	r22
    3a02:	5f 91       	pop	r21
    3a04:	4f 91       	pop	r20
    3a06:	3f 91       	pop	r19
    3a08:	2f 91       	pop	r18
    3a0a:	0f 90       	pop	r0
    3a0c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a10:	0f 90       	pop	r0
    3a12:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a16:	0f 90       	pop	r0
    3a18:	1f 90       	pop	r1
    3a1a:	18 95       	reti

00003a1c <__vector_42>:
    3a1c:	1f 92       	push	r1
    3a1e:	0f 92       	push	r0
    3a20:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a2c:	0f 92       	push	r0
    3a2e:	2f 93       	push	r18
    3a30:	3f 93       	push	r19
    3a32:	4f 93       	push	r20
    3a34:	5f 93       	push	r21
    3a36:	6f 93       	push	r22
    3a38:	7f 93       	push	r23
    3a3a:	8f 93       	push	r24
    3a3c:	9f 93       	push	r25
    3a3e:	af 93       	push	r26
    3a40:	bf 93       	push	r27
    3a42:	ef 93       	push	r30
    3a44:	ff 93       	push	r31
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    3a4e:	48 ea       	ldi	r20, 0xA8	; 168
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	64 ea       	ldi	r22, 0xA4	; 164
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	83 e0       	ldi	r24, 0x03	; 3
    3a58:	f5 dd       	rcall	.-1046   	; 0x3644 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3a5a:	00 00       	nop
    3a5c:	df 91       	pop	r29
    3a5e:	cf 91       	pop	r28
    3a60:	ff 91       	pop	r31
    3a62:	ef 91       	pop	r30
    3a64:	bf 91       	pop	r27
    3a66:	af 91       	pop	r26
    3a68:	9f 91       	pop	r25
    3a6a:	8f 91       	pop	r24
    3a6c:	7f 91       	pop	r23
    3a6e:	6f 91       	pop	r22
    3a70:	5f 91       	pop	r21
    3a72:	4f 91       	pop	r20
    3a74:	3f 91       	pop	r19
    3a76:	2f 91       	pop	r18
    3a78:	0f 90       	pop	r0
    3a7a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a7e:	0f 90       	pop	r0
    3a80:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a84:	0f 90       	pop	r0
    3a86:	1f 90       	pop	r1
    3a88:	18 95       	reti

00003a8a <__vector_47>:
    3a8a:	1f 92       	push	r1
    3a8c:	0f 92       	push	r0
    3a8e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a92:	0f 92       	push	r0
    3a94:	11 24       	eor	r1, r1
    3a96:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a9a:	0f 92       	push	r0
    3a9c:	2f 93       	push	r18
    3a9e:	3f 93       	push	r19
    3aa0:	4f 93       	push	r20
    3aa2:	5f 93       	push	r21
    3aa4:	6f 93       	push	r22
    3aa6:	7f 93       	push	r23
    3aa8:	8f 93       	push	r24
    3aaa:	9f 93       	push	r25
    3aac:	af 93       	push	r26
    3aae:	bf 93       	push	r27
    3ab0:	ef 93       	push	r30
    3ab2:	ff 93       	push	r31
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	48 e2       	ldi	r20, 0x28	; 40
    3abe:	51 e0       	ldi	r21, 0x01	; 1
    3ac0:	64 e2       	ldi	r22, 0x24	; 36
    3ac2:	71 e0       	ldi	r23, 0x01	; 1
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	be dd       	rcall	.-1156   	; 0x3644 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3ac8:	00 00       	nop
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	ff 91       	pop	r31
    3ad0:	ef 91       	pop	r30
    3ad2:	bf 91       	pop	r27
    3ad4:	af 91       	pop	r26
    3ad6:	9f 91       	pop	r25
    3ad8:	8f 91       	pop	r24
    3ada:	7f 91       	pop	r23
    3adc:	6f 91       	pop	r22
    3ade:	5f 91       	pop	r21
    3ae0:	4f 91       	pop	r20
    3ae2:	3f 91       	pop	r19
    3ae4:	2f 91       	pop	r18
    3ae6:	0f 90       	pop	r0
    3ae8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3aec:	0f 90       	pop	r0
    3aee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3af2:	0f 90       	pop	r0
    3af4:	1f 90       	pop	r1
    3af6:	18 95       	reti

00003af8 <_ZL7initISR18timer16_Sequence_t>:
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	1f 92       	push	r1
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	01 f5       	brne	.+64     	; 0x3b4a <_ZL7initISR18timer16_Sequence_t+0x52>
    3b0a:	80 e8       	ldi	r24, 0x80	; 128
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	fc 01       	movw	r30, r24
    3b10:	10 82       	st	Z, r1
    3b12:	81 e8       	ldi	r24, 0x81	; 129
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	22 e0       	ldi	r18, 0x02	; 2
    3b18:	fc 01       	movw	r30, r24
    3b1a:	20 83       	st	Z, r18
    3b1c:	84 e8       	ldi	r24, 0x84	; 132
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	fc 01       	movw	r30, r24
    3b22:	11 82       	std	Z+1, r1	; 0x01
    3b24:	10 82       	st	Z, r1
    3b26:	86 e3       	ldi	r24, 0x36	; 54
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	26 e3       	ldi	r18, 0x36	; 54
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	f9 01       	movw	r30, r18
    3b30:	20 81       	ld	r18, Z
    3b32:	22 60       	ori	r18, 0x02	; 2
    3b34:	fc 01       	movw	r30, r24
    3b36:	20 83       	st	Z, r18
    3b38:	8f e6       	ldi	r24, 0x6F	; 111
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	2f e6       	ldi	r18, 0x6F	; 111
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	f9 01       	movw	r30, r18
    3b42:	20 81       	ld	r18, Z
    3b44:	22 60       	ori	r18, 0x02	; 2
    3b46:	fc 01       	movw	r30, r24
    3b48:	20 83       	st	Z, r18
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	82 30       	cpi	r24, 0x02	; 2
    3b4e:	c1 f4       	brne	.+48     	; 0x3b80 <_ZL7initISR18timer16_Sequence_t+0x88>
    3b50:	80 e9       	ldi	r24, 0x90	; 144
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	fc 01       	movw	r30, r24
    3b56:	10 82       	st	Z, r1
    3b58:	81 e9       	ldi	r24, 0x91	; 145
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	22 e0       	ldi	r18, 0x02	; 2
    3b5e:	fc 01       	movw	r30, r24
    3b60:	20 83       	st	Z, r18
    3b62:	84 e9       	ldi	r24, 0x94	; 148
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	fc 01       	movw	r30, r24
    3b68:	11 82       	std	Z+1, r1	; 0x01
    3b6a:	10 82       	st	Z, r1
    3b6c:	88 e3       	ldi	r24, 0x38	; 56
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	22 e0       	ldi	r18, 0x02	; 2
    3b72:	fc 01       	movw	r30, r24
    3b74:	20 83       	st	Z, r18
    3b76:	81 e7       	ldi	r24, 0x71	; 113
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	22 e0       	ldi	r18, 0x02	; 2
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	20 83       	st	Z, r18
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	83 30       	cpi	r24, 0x03	; 3
    3b84:	c1 f4       	brne	.+48     	; 0x3bb6 <_ZL7initISR18timer16_Sequence_t+0xbe>
    3b86:	80 ea       	ldi	r24, 0xA0	; 160
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	10 82       	st	Z, r1
    3b8e:	81 ea       	ldi	r24, 0xA1	; 161
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	22 e0       	ldi	r18, 0x02	; 2
    3b94:	fc 01       	movw	r30, r24
    3b96:	20 83       	st	Z, r18
    3b98:	84 ea       	ldi	r24, 0xA4	; 164
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	11 82       	std	Z+1, r1	; 0x01
    3ba0:	10 82       	st	Z, r1
    3ba2:	89 e3       	ldi	r24, 0x39	; 57
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	22 e0       	ldi	r18, 0x02	; 2
    3ba8:	fc 01       	movw	r30, r24
    3baa:	20 83       	st	Z, r18
    3bac:	82 e7       	ldi	r24, 0x72	; 114
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	22 e0       	ldi	r18, 0x02	; 2
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	20 83       	st	Z, r18
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	88 23       	and	r24, r24
    3bba:	c1 f4       	brne	.+48     	; 0x3bec <_ZL7initISR18timer16_Sequence_t+0xf4>
    3bbc:	80 e2       	ldi	r24, 0x20	; 32
    3bbe:	91 e0       	ldi	r25, 0x01	; 1
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	10 82       	st	Z, r1
    3bc4:	81 e2       	ldi	r24, 0x21	; 33
    3bc6:	91 e0       	ldi	r25, 0x01	; 1
    3bc8:	22 e0       	ldi	r18, 0x02	; 2
    3bca:	fc 01       	movw	r30, r24
    3bcc:	20 83       	st	Z, r18
    3bce:	84 e2       	ldi	r24, 0x24	; 36
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	11 82       	std	Z+1, r1	; 0x01
    3bd6:	10 82       	st	Z, r1
    3bd8:	8a e3       	ldi	r24, 0x3A	; 58
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	22 e0       	ldi	r18, 0x02	; 2
    3bde:	fc 01       	movw	r30, r24
    3be0:	20 83       	st	Z, r18
    3be2:	83 e7       	ldi	r24, 0x73	; 115
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	22 e0       	ldi	r18, 0x02	; 2
    3be8:	fc 01       	movw	r30, r24
    3bea:	20 83       	st	Z, r18
    3bec:	00 00       	nop
    3bee:	0f 90       	pop	r0
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <_ZL13isTimerActive18timer16_Sequence_t>:
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	1f 92       	push	r1
    3bfc:	1f 92       	push	r1
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	8a 83       	std	Y+2, r24	; 0x02
    3c04:	19 82       	std	Y+1, r1	; 0x01
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	8c 30       	cpi	r24, 0x0C	; 12
    3c0a:	30 f5       	brcc	.+76     	; 0x3c58 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	28 2f       	mov	r18, r24
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	c9 01       	movw	r24, r18
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	82 0f       	add	r24, r18
    3c1a:	93 1f       	adc	r25, r19
    3c1c:	88 0f       	add	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	88 0f       	add	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	9c 01       	movw	r18, r24
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	88 2f       	mov	r24, r24
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	28 0f       	add	r18, r24
    3c2e:	39 1f       	adc	r19, r25
    3c30:	c9 01       	movw	r24, r18
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	82 0f       	add	r24, r18
    3c38:	93 1f       	adc	r25, r19
    3c3a:	8d 57       	subi	r24, 0x7D	; 125
    3c3c:	9c 4f       	sbci	r25, 0xFC	; 252
    3c3e:	fc 01       	movw	r30, r24
    3c40:	80 81       	ld	r24, Z
    3c42:	86 fb       	bst	r24, 6
    3c44:	88 27       	eor	r24, r24
    3c46:	80 f9       	bld	r24, 0
    3c48:	81 30       	cpi	r24, 0x01	; 1
    3c4a:	11 f4       	brne	.+4      	; 0x3c50 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	05 c0       	rjmp	.+10     	; 0x3c5a <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	8f 5f       	subi	r24, 0xFF	; 255
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	d7 cf       	rjmp	.-82     	; 0x3c06 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	df 91       	pop	r29
    3c60:	cf 91       	pop	r28
    3c62:	08 95       	ret

00003c64 <_ZN5ServoC1Ev>:
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	1f 92       	push	r1
    3c6a:	1f 92       	push	r1
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <ServoCount>
    3c78:	80 33       	cpi	r24, 0x30	; 48
    3c7a:	e8 f4       	brcc	.+58     	; 0x3cb6 <_ZN5ServoC1Ev+0x52>
    3c7c:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <ServoCount>
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	82 0f       	add	r24, r18
    3c84:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <ServoCount>
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	20 83       	st	Z, r18
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	9a 81       	ldd	r25, Y+2	; 0x02
    3c94:	fc 01       	movw	r30, r24
    3c96:	80 81       	ld	r24, Z
    3c98:	28 2f       	mov	r18, r24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	c9 01       	movw	r24, r18
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	82 0f       	add	r24, r18
    3ca4:	93 1f       	adc	r25, r19
    3ca6:	8c 57       	subi	r24, 0x7C	; 124
    3ca8:	9c 4f       	sbci	r25, 0xFC	; 252
    3caa:	28 eb       	ldi	r18, 0xB8	; 184
    3cac:	3b e0       	ldi	r19, 0x0B	; 11
    3cae:	fc 01       	movw	r30, r24
    3cb0:	31 83       	std	Z+1, r19	; 0x01
    3cb2:	20 83       	st	Z, r18
    3cb4:	05 c0       	rjmp	.+10     	; 0x3cc0 <_ZN5ServoC1Ev+0x5c>
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	2f ef       	ldi	r18, 0xFF	; 255
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	20 83       	st	Z, r18
    3cc0:	00 00       	nop
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret

00003ccc <_ZN5Servo6attachEi>:
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <_ZN5Servo6attachEi+0x6>
    3cd2:	1f 92       	push	r1
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	7c 83       	std	Y+4, r23	; 0x04
    3cde:	6b 83       	std	Y+3, r22	; 0x03
    3ce0:	6b 81       	ldd	r22, Y+3	; 0x03
    3ce2:	7c 81       	ldd	r23, Y+4	; 0x04
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	20 e6       	ldi	r18, 0x60	; 96
    3cea:	39 e0       	ldi	r19, 0x09	; 9
    3cec:	40 e2       	ldi	r20, 0x20	; 32
    3cee:	52 e0       	ldi	r21, 0x02	; 2
    3cf0:	07 d0       	rcall	.+14     	; 0x3d00 <_ZN5Servo6attachEiii>
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	08 95       	ret

00003d00 <_ZN5Servo6attachEiii>:
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	29 97       	sbiw	r28, 0x09	; 9
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	9b 83       	std	Y+3, r25	; 0x03
    3d16:	8a 83       	std	Y+2, r24	; 0x02
    3d18:	7d 83       	std	Y+5, r23	; 0x05
    3d1a:	6c 83       	std	Y+4, r22	; 0x04
    3d1c:	5f 83       	std	Y+7, r21	; 0x07
    3d1e:	4e 83       	std	Y+6, r20	; 0x06
    3d20:	39 87       	std	Y+9, r19	; 0x09
    3d22:	28 87       	std	Y+8, r18	; 0x08
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	9b 81       	ldd	r25, Y+3	; 0x03
    3d28:	fc 01       	movw	r30, r24
    3d2a:	80 81       	ld	r24, Z
    3d2c:	80 33       	cpi	r24, 0x30	; 48
    3d2e:	08 f0       	brcs	.+2      	; 0x3d32 <_ZN5Servo6attachEiii+0x32>
    3d30:	6b c0       	rjmp	.+214    	; 0x3e08 <_ZN5Servo6attachEiii+0x108>
    3d32:	8c 81       	ldd	r24, Y+4	; 0x04
    3d34:	61 e0       	ldi	r22, 0x01	; 1
    3d36:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
    3d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3e:	fc 01       	movw	r30, r24
    3d40:	80 81       	ld	r24, Z
    3d42:	28 2f       	mov	r18, r24
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	8c 81       	ldd	r24, Y+4	; 0x04
    3d48:	48 2f       	mov	r20, r24
    3d4a:	4f 73       	andi	r20, 0x3F	; 63
    3d4c:	c9 01       	movw	r24, r18
    3d4e:	88 0f       	add	r24, r24
    3d50:	99 1f       	adc	r25, r25
    3d52:	82 0f       	add	r24, r18
    3d54:	93 1f       	adc	r25, r19
    3d56:	8d 57       	subi	r24, 0x7D	; 125
    3d58:	9c 4f       	sbci	r25, 0xFC	; 252
    3d5a:	24 2f       	mov	r18, r20
    3d5c:	2f 73       	andi	r18, 0x3F	; 63
    3d5e:	fc 01       	movw	r30, r24
    3d60:	30 81       	ld	r19, Z
    3d62:	30 7c       	andi	r19, 0xC0	; 192
    3d64:	23 2b       	or	r18, r19
    3d66:	fc 01       	movw	r30, r24
    3d68:	20 83       	st	Z, r18
    3d6a:	20 e2       	ldi	r18, 0x20	; 32
    3d6c:	32 e0       	ldi	r19, 0x02	; 2
    3d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d70:	9f 81       	ldd	r25, Y+7	; 0x07
    3d72:	a9 01       	movw	r20, r18
    3d74:	48 1b       	sub	r20, r24
    3d76:	59 0b       	sbc	r21, r25
    3d78:	ca 01       	movw	r24, r20
    3d7a:	99 23       	and	r25, r25
    3d7c:	0c f4       	brge	.+2      	; 0x3d80 <_ZN5Servo6attachEiii+0x80>
    3d7e:	03 96       	adiw	r24, 0x03	; 3
    3d80:	95 95       	asr	r25
    3d82:	87 95       	ror	r24
    3d84:	95 95       	asr	r25
    3d86:	87 95       	ror	r24
    3d88:	28 2f       	mov	r18, r24
    3d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8e:	fc 01       	movw	r30, r24
    3d90:	21 83       	std	Z+1, r18	; 0x01
    3d92:	20 e6       	ldi	r18, 0x60	; 96
    3d94:	39 e0       	ldi	r19, 0x09	; 9
    3d96:	88 85       	ldd	r24, Y+8	; 0x08
    3d98:	99 85       	ldd	r25, Y+9	; 0x09
    3d9a:	a9 01       	movw	r20, r18
    3d9c:	48 1b       	sub	r20, r24
    3d9e:	59 0b       	sbc	r21, r25
    3da0:	ca 01       	movw	r24, r20
    3da2:	99 23       	and	r25, r25
    3da4:	0c f4       	brge	.+2      	; 0x3da8 <_ZN5Servo6attachEiii+0xa8>
    3da6:	03 96       	adiw	r24, 0x03	; 3
    3da8:	95 95       	asr	r25
    3daa:	87 95       	ror	r24
    3dac:	95 95       	asr	r25
    3dae:	87 95       	ror	r24
    3db0:	28 2f       	mov	r18, r24
    3db2:	8a 81       	ldd	r24, Y+2	; 0x02
    3db4:	9b 81       	ldd	r25, Y+3	; 0x03
    3db6:	fc 01       	movw	r30, r24
    3db8:	22 83       	std	Z+2, r18	; 0x02
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	90 81       	ld	r25, Z
    3dc2:	8b ea       	ldi	r24, 0xAB	; 171
    3dc4:	98 9f       	mul	r25, r24
    3dc6:	81 2d       	mov	r24, r1
    3dc8:	11 24       	eor	r1, r1
    3dca:	86 95       	lsr	r24
    3dcc:	86 95       	lsr	r24
    3dce:	86 95       	lsr	r24
    3dd0:	89 83       	std	Y+1, r24	; 0x01
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	10 df       	rcall	.-480    	; 0x3bf6 <_ZL13isTimerActive18timer16_Sequence_t>
    3dd6:	98 2f       	mov	r25, r24
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	89 27       	eor	r24, r25
    3ddc:	88 23       	and	r24, r24
    3dde:	11 f0       	breq	.+4      	; 0x3de4 <_ZN5Servo6attachEiii+0xe4>
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	8a de       	rcall	.-748    	; 0x3af8 <_ZL7initISR18timer16_Sequence_t>
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	9b 81       	ldd	r25, Y+3	; 0x03
    3de8:	fc 01       	movw	r30, r24
    3dea:	80 81       	ld	r24, Z
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	c9 01       	movw	r24, r18
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	82 0f       	add	r24, r18
    3df8:	93 1f       	adc	r25, r19
    3dfa:	8d 57       	subi	r24, 0x7D	; 125
    3dfc:	9c 4f       	sbci	r25, 0xFC	; 252
    3dfe:	fc 01       	movw	r30, r24
    3e00:	20 81       	ld	r18, Z
    3e02:	20 64       	ori	r18, 0x40	; 64
    3e04:	fc 01       	movw	r30, r24
    3e06:	20 83       	st	Z, r18
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	80 81       	ld	r24, Z
    3e10:	29 96       	adiw	r28, 0x09	; 9
    3e12:	0f b6       	in	r0, 0x3f	; 63
    3e14:	f8 94       	cli
    3e16:	de bf       	out	0x3e, r29	; 62
    3e18:	0f be       	out	0x3f, r0	; 63
    3e1a:	cd bf       	out	0x3d, r28	; 61
    3e1c:	df 91       	pop	r29
    3e1e:	cf 91       	pop	r28
    3e20:	08 95       	ret

00003e22 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    3e22:	6f 92       	push	r6
    3e24:	7f 92       	push	r7
    3e26:	8f 92       	push	r8
    3e28:	9f 92       	push	r9
    3e2a:	af 92       	push	r10
    3e2c:	bf 92       	push	r11
    3e2e:	cf 92       	push	r12
    3e30:	df 92       	push	r13
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <_ZN5Servo5writeEi+0x1e>
    3e40:	1f 92       	push	r1
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	9a 83       	std	Y+2, r25	; 0x02
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	7c 83       	std	Y+4, r23	; 0x04
    3e4c:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	80 32       	cpi	r24, 0x20	; 32
    3e54:	92 40       	sbci	r25, 0x02	; 2
    3e56:	0c f0       	brlt	.+2      	; 0x3e5a <_ZN5Servo5writeEi+0x38>
    3e58:	5c c0       	rjmp	.+184    	; 0x3f12 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5e:	99 23       	and	r25, r25
    3e60:	14 f4       	brge	.+4      	; 0x3e66 <_ZN5Servo5writeEi+0x44>
    3e62:	1c 82       	std	Y+4, r1	; 0x04
    3e64:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    3e66:	8b 81       	ldd	r24, Y+3	; 0x03
    3e68:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6a:	85 3b       	cpi	r24, 0xB5	; 181
    3e6c:	91 05       	cpc	r25, r1
    3e6e:	24 f0       	brlt	.+8      	; 0x3e78 <_ZN5Servo5writeEi+0x56>
    3e70:	84 eb       	ldi	r24, 0xB4	; 180
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9c 83       	std	Y+4, r25	; 0x04
    3e76:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	08 2e       	mov	r0, r24
    3e82:	00 0c       	add	r0, r0
    3e84:	99 0b       	sbc	r25, r25
    3e86:	28 e5       	ldi	r18, 0x58	; 88
    3e88:	32 e0       	ldi	r19, 0x02	; 2
    3e8a:	a9 01       	movw	r20, r18
    3e8c:	48 1b       	sub	r20, r24
    3e8e:	59 0b       	sbc	r21, r25
    3e90:	ca 01       	movw	r24, r20
    3e92:	88 0f       	add	r24, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	88 0f       	add	r24, r24
    3e98:	99 1f       	adc	r25, r25
    3e9a:	09 2e       	mov	r0, r25
    3e9c:	00 0c       	add	r0, r0
    3e9e:	aa 0b       	sbc	r26, r26
    3ea0:	bb 0b       	sbc	r27, r27
    3ea2:	29 81       	ldd	r18, Y+1	; 0x01
    3ea4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ea6:	f9 01       	movw	r30, r18
    3ea8:	21 81       	ldd	r18, Z+1	; 0x01
    3eaa:	02 2e       	mov	r0, r18
    3eac:	00 0c       	add	r0, r0
    3eae:	33 0b       	sbc	r19, r19
    3eb0:	48 e8       	ldi	r20, 0x88	; 136
    3eb2:	50 e0       	ldi	r21, 0x00	; 0
    3eb4:	ba 01       	movw	r22, r20
    3eb6:	62 1b       	sub	r22, r18
    3eb8:	73 0b       	sbc	r23, r19
    3eba:	9b 01       	movw	r18, r22
    3ebc:	22 0f       	add	r18, r18
    3ebe:	33 1f       	adc	r19, r19
    3ec0:	22 0f       	add	r18, r18
    3ec2:	33 1f       	adc	r19, r19
    3ec4:	03 2e       	mov	r0, r19
    3ec6:	00 0c       	add	r0, r0
    3ec8:	44 0b       	sbc	r20, r20
    3eca:	55 0b       	sbc	r21, r21
    3ecc:	6b 81       	ldd	r22, Y+3	; 0x03
    3ece:	7c 81       	ldd	r23, Y+4	; 0x04
    3ed0:	3b 01       	movw	r6, r22
    3ed2:	77 0f       	add	r23, r23
    3ed4:	88 08       	sbc	r8, r8
    3ed6:	99 08       	sbc	r9, r9
    3ed8:	6b 2f       	mov	r22, r27
    3eda:	6f 93       	push	r22
    3edc:	6a 2f       	mov	r22, r26
    3ede:	6f 93       	push	r22
    3ee0:	69 2f       	mov	r22, r25
    3ee2:	6f 93       	push	r22
    3ee4:	8f 93       	push	r24
    3ee6:	59 01       	movw	r10, r18
    3ee8:	6a 01       	movw	r12, r20
    3eea:	14 eb       	ldi	r17, 0xB4	; 180
    3eec:	e1 2e       	mov	r14, r17
    3eee:	f1 2c       	mov	r15, r1
    3ef0:	00 e0       	ldi	r16, 0x00	; 0
    3ef2:	10 e0       	ldi	r17, 0x00	; 0
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	a9 01       	movw	r20, r18
    3efa:	c4 01       	movw	r24, r8
    3efc:	b3 01       	movw	r22, r6
    3efe:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <_Z3maplllll>
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	9c 83       	std	Y+4, r25	; 0x04
    3f10:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    3f12:	2b 81       	ldd	r18, Y+3	; 0x03
    3f14:	3c 81       	ldd	r19, Y+4	; 0x04
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	b9 01       	movw	r22, r18
    3f1c:	14 d0       	rcall	.+40     	; 0x3f46 <_ZN5Servo17writeMicrosecondsEi>
}
    3f1e:	00 00       	nop
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	ff 90       	pop	r15
    3f32:	ef 90       	pop	r14
    3f34:	df 90       	pop	r13
    3f36:	cf 90       	pop	r12
    3f38:	bf 90       	pop	r11
    3f3a:	af 90       	pop	r10
    3f3c:	9f 90       	pop	r9
    3f3e:	8f 90       	pop	r8
    3f40:	7f 90       	pop	r7
    3f42:	6f 90       	pop	r6
    3f44:	08 95       	ret

00003f46 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <_ZN5Servo17writeMicrosecondsEi+0x6>
    3f4c:	00 d0       	rcall	.+0      	; 0x3f4e <_ZN5Servo17writeMicrosecondsEi+0x8>
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    3f52:	9c 83       	std	Y+4, r25	; 0x04
    3f54:	8b 83       	std	Y+3, r24	; 0x03
    3f56:	7e 83       	std	Y+6, r23	; 0x06
    3f58:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5e:	fc 01       	movw	r30, r24
    3f60:	80 81       	ld	r24, Z
    3f62:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	80 33       	cpi	r24, 0x30	; 48
    3f68:	08 f0       	brcs	.+2      	; 0x3f6c <_ZN5Servo17writeMicrosecondsEi+0x26>
    3f6a:	99 c0       	rjmp	.+306    	; 0x409e <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f70:	fc 01       	movw	r30, r24
    3f72:	81 81       	ldd	r24, Z+1	; 0x01
    3f74:	08 2e       	mov	r0, r24
    3f76:	00 0c       	add	r0, r0
    3f78:	99 0b       	sbc	r25, r25
    3f7a:	28 e8       	ldi	r18, 0x88	; 136
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	a9 01       	movw	r20, r18
    3f80:	48 1b       	sub	r20, r24
    3f82:	59 0b       	sbc	r21, r25
    3f84:	ca 01       	movw	r24, r20
    3f86:	9c 01       	movw	r18, r24
    3f88:	22 0f       	add	r18, r18
    3f8a:	33 1f       	adc	r19, r19
    3f8c:	22 0f       	add	r18, r18
    3f8e:	33 1f       	adc	r19, r19
    3f90:	8d 81       	ldd	r24, Y+5	; 0x05
    3f92:	9e 81       	ldd	r25, Y+6	; 0x06
    3f94:	82 17       	cp	r24, r18
    3f96:	93 07       	cpc	r25, r19
    3f98:	a4 f4       	brge	.+40     	; 0x3fc2 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    3f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	81 81       	ldd	r24, Z+1	; 0x01
    3fa2:	08 2e       	mov	r0, r24
    3fa4:	00 0c       	add	r0, r0
    3fa6:	99 0b       	sbc	r25, r25
    3fa8:	28 e8       	ldi	r18, 0x88	; 136
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	a9 01       	movw	r20, r18
    3fae:	48 1b       	sub	r20, r24
    3fb0:	59 0b       	sbc	r21, r25
    3fb2:	ca 01       	movw	r24, r20
    3fb4:	88 0f       	add	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	88 0f       	add	r24, r24
    3fba:	99 1f       	adc	r25, r25
    3fbc:	9e 83       	std	Y+6, r25	; 0x06
    3fbe:	8d 83       	std	Y+5, r24	; 0x05
    3fc0:	2a c0       	rjmp	.+84     	; 0x4016 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    3fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	08 2e       	mov	r0, r24
    3fcc:	00 0c       	add	r0, r0
    3fce:	99 0b       	sbc	r25, r25
    3fd0:	28 e5       	ldi	r18, 0x58	; 88
    3fd2:	32 e0       	ldi	r19, 0x02	; 2
    3fd4:	a9 01       	movw	r20, r18
    3fd6:	48 1b       	sub	r20, r24
    3fd8:	59 0b       	sbc	r21, r25
    3fda:	ca 01       	movw	r24, r20
    3fdc:	9c 01       	movw	r18, r24
    3fde:	22 0f       	add	r18, r18
    3fe0:	33 1f       	adc	r19, r19
    3fe2:	22 0f       	add	r18, r18
    3fe4:	33 1f       	adc	r19, r19
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fea:	28 17       	cp	r18, r24
    3fec:	39 07       	cpc	r19, r25
    3fee:	9c f4       	brge	.+38     	; 0x4016 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    3ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	82 81       	ldd	r24, Z+2	; 0x02
    3ff8:	08 2e       	mov	r0, r24
    3ffa:	00 0c       	add	r0, r0
    3ffc:	99 0b       	sbc	r25, r25
    3ffe:	28 e5       	ldi	r18, 0x58	; 88
    4000:	32 e0       	ldi	r19, 0x02	; 2
    4002:	a9 01       	movw	r20, r18
    4004:	48 1b       	sub	r20, r24
    4006:	59 0b       	sbc	r21, r25
    4008:	ca 01       	movw	r24, r20
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	88 0f       	add	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	9e 83       	std	Y+6, r25	; 0x06
    4014:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    4016:	8d 81       	ldd	r24, Y+5	; 0x05
    4018:	9e 81       	ldd	r25, Y+6	; 0x06
    401a:	02 97       	sbiw	r24, 0x02	; 2
    401c:	9e 83       	std	Y+6, r25	; 0x06
    401e:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	09 2e       	mov	r0, r25
    4026:	00 0c       	add	r0, r0
    4028:	aa 0b       	sbc	r26, r26
    402a:	bb 0b       	sbc	r27, r27
    402c:	88 0f       	add	r24, r24
    402e:	99 1f       	adc	r25, r25
    4030:	aa 1f       	adc	r26, r26
    4032:	bb 1f       	adc	r27, r27
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	aa 1f       	adc	r26, r26
    403a:	bb 1f       	adc	r27, r27
    403c:	88 0f       	add	r24, r24
    403e:	99 1f       	adc	r25, r25
    4040:	aa 1f       	adc	r26, r26
    4042:	bb 1f       	adc	r27, r27
    4044:	88 0f       	add	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	aa 1f       	adc	r26, r26
    404a:	bb 1f       	adc	r27, r27
    404c:	bb 23       	and	r27, r27
    404e:	1c f4       	brge	.+6      	; 0x4056 <_ZN5Servo17writeMicrosecondsEi+0x110>
    4050:	07 96       	adiw	r24, 0x07	; 7
    4052:	a1 1d       	adc	r26, r1
    4054:	b1 1d       	adc	r27, r1
    4056:	68 94       	set
    4058:	12 f8       	bld	r1, 2
    405a:	b5 95       	asr	r27
    405c:	a7 95       	ror	r26
    405e:	97 95       	ror	r25
    4060:	87 95       	ror	r24
    4062:	16 94       	lsr	r1
    4064:	d1 f7       	brne	.-12     	; 0x405a <_ZN5Servo17writeMicrosecondsEi+0x114>
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    406a:	8f e5       	ldi	r24, 0x5F	; 95
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	fc 01       	movw	r30, r24
    4070:	80 81       	ld	r24, Z
    4072:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    4074:	f8 94       	cli
    servos[channel].ticks = value;
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	28 2f       	mov	r18, r24
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	4d 81       	ldd	r20, Y+5	; 0x05
    407e:	5e 81       	ldd	r21, Y+6	; 0x06
    4080:	c9 01       	movw	r24, r18
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	82 0f       	add	r24, r18
    4088:	93 1f       	adc	r25, r19
    408a:	8c 57       	subi	r24, 0x7C	; 124
    408c:	9c 4f       	sbci	r25, 0xFC	; 252
    408e:	fc 01       	movw	r30, r24
    4090:	51 83       	std	Z+1, r21	; 0x01
    4092:	40 83       	st	Z, r20
    SREG = oldSREG;
    4094:	8f e5       	ldi	r24, 0x5F	; 95
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	2a 81       	ldd	r18, Y+2	; 0x02
    409a:	fc 01       	movw	r30, r24
    409c:	20 83       	st	Z, r18
  }
}
    409e:	00 00       	nop
    40a0:	26 96       	adiw	r28, 0x06	; 6
    40a2:	0f b6       	in	r0, 0x3f	; 63
    40a4:	f8 94       	cli
    40a6:	de bf       	out	0x3e, r29	; 62
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	cd bf       	out	0x3d, r28	; 61
    40ac:	df 91       	pop	r29
    40ae:	cf 91       	pop	r28
    40b0:	08 95       	ret

000040b2 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    40b2:	2f 92       	push	r2
    40b4:	3f 92       	push	r3
    40b6:	4f 92       	push	r4
    40b8:	5f 92       	push	r5
    40ba:	6f 92       	push	r6
    40bc:	7f 92       	push	r7
    40be:	8f 92       	push	r8
    40c0:	9f 92       	push	r9
    40c2:	af 92       	push	r10
    40c4:	bf 92       	push	r11
    40c6:	cf 92       	push	r12
    40c8:	df 92       	push	r13
    40ca:	ef 92       	push	r14
    40cc:	ff 92       	push	r15
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	1f 92       	push	r1
    40d8:	1f 92       	push	r1
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	9a 83       	std	Y+2, r25	; 0x02
    40e0:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	9a 81       	ldd	r25, Y+2	; 0x02
    40e6:	fc 01       	movw	r30, r24
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	08 2e       	mov	r0, r24
    40ec:	00 0c       	add	r0, r0
    40ee:	99 0b       	sbc	r25, r25
    40f0:	28 e5       	ldi	r18, 0x58	; 88
    40f2:	32 e0       	ldi	r19, 0x02	; 2
    40f4:	a9 01       	movw	r20, r18
    40f6:	48 1b       	sub	r20, r24
    40f8:	59 0b       	sbc	r21, r25
    40fa:	ca 01       	movw	r24, r20
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	88 0f       	add	r24, r24
    4102:	99 1f       	adc	r25, r25
    4104:	1c 01       	movw	r2, r24
    4106:	99 0f       	add	r25, r25
    4108:	44 08       	sbc	r4, r4
    410a:	55 08       	sbc	r5, r5
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	fc 01       	movw	r30, r24
    4112:	81 81       	ldd	r24, Z+1	; 0x01
    4114:	08 2e       	mov	r0, r24
    4116:	00 0c       	add	r0, r0
    4118:	99 0b       	sbc	r25, r25
    411a:	28 e8       	ldi	r18, 0x88	; 136
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	a9 01       	movw	r20, r18
    4120:	48 1b       	sub	r20, r24
    4122:	59 0b       	sbc	r21, r25
    4124:	ca 01       	movw	r24, r20
    4126:	88 0f       	add	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	88 0f       	add	r24, r24
    412c:	99 1f       	adc	r25, r25
    412e:	3c 01       	movw	r6, r24
    4130:	99 0f       	add	r25, r25
    4132:	88 08       	sbc	r8, r8
    4134:	99 08       	sbc	r9, r9
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	9a 81       	ldd	r25, Y+2	; 0x02
    413a:	30 d0       	rcall	.+96     	; 0x419c <_ZN5Servo16readMicrosecondsEv>
    413c:	01 96       	adiw	r24, 0x01	; 1
    413e:	09 2e       	mov	r0, r25
    4140:	00 0c       	add	r0, r0
    4142:	aa 0b       	sbc	r26, r26
    4144:	bb 0b       	sbc	r27, r27
    4146:	1f 92       	push	r1
    4148:	1f 92       	push	r1
    414a:	1f 92       	push	r1
    414c:	24 eb       	ldi	r18, 0xB4	; 180
    414e:	2f 93       	push	r18
    4150:	a1 2c       	mov	r10, r1
    4152:	b1 2c       	mov	r11, r1
    4154:	65 01       	movw	r12, r10
    4156:	82 01       	movw	r16, r4
    4158:	71 01       	movw	r14, r2
    415a:	a4 01       	movw	r20, r8
    415c:	93 01       	movw	r18, r6
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <_Z3maplllll>
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
}
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	1f 91       	pop	r17
    417c:	0f 91       	pop	r16
    417e:	ff 90       	pop	r15
    4180:	ef 90       	pop	r14
    4182:	df 90       	pop	r13
    4184:	cf 90       	pop	r12
    4186:	bf 90       	pop	r11
    4188:	af 90       	pop	r10
    418a:	9f 90       	pop	r9
    418c:	8f 90       	pop	r8
    418e:	7f 90       	pop	r7
    4190:	6f 90       	pop	r6
    4192:	5f 90       	pop	r5
    4194:	4f 90       	pop	r4
    4196:	3f 90       	pop	r3
    4198:	2f 90       	pop	r2
    419a:	08 95       	ret

0000419c <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	00 d0       	rcall	.+0      	; 0x41a2 <_ZN5Servo16readMicrosecondsEv+0x6>
    41a2:	1f 92       	push	r1
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	9c 83       	std	Y+4, r25	; 0x04
    41aa:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	9c 81       	ldd	r25, Y+4	; 0x04
    41b0:	fc 01       	movw	r30, r24
    41b2:	80 81       	ld	r24, Z
    41b4:	8f 3f       	cpi	r24, 0xFF	; 255
    41b6:	01 f1       	breq	.+64     	; 0x41f8 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	9c 81       	ldd	r25, Y+4	; 0x04
    41bc:	fc 01       	movw	r30, r24
    41be:	80 81       	ld	r24, Z
    41c0:	28 2f       	mov	r18, r24
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	c9 01       	movw	r24, r18
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	82 0f       	add	r24, r18
    41cc:	93 1f       	adc	r25, r19
    41ce:	8c 57       	subi	r24, 0x7C	; 124
    41d0:	9c 4f       	sbci	r25, 0xFC	; 252
    41d2:	fc 01       	movw	r30, r24
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	88 0f       	add	r24, r24
    41da:	99 1f       	adc	r25, r25
    41dc:	88 0f       	add	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	88 0f       	add	r24, r24
    41e2:	99 1f       	adc	r25, r25
    41e4:	92 95       	swap	r25
    41e6:	82 95       	swap	r24
    41e8:	8f 70       	andi	r24, 0x0F	; 15
    41ea:	89 27       	eor	r24, r25
    41ec:	9f 70       	andi	r25, 0x0F	; 15
    41ee:	89 27       	eor	r24, r25
    41f0:	02 96       	adiw	r24, 0x02	; 2
    41f2:	9a 83       	std	Y+2, r25	; 0x02
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    41f8:	1a 82       	std	Y+2, r1	; 0x02
    41fa:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	08 95       	ret

0000420e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
    4216:	2f 97       	sbiw	r28, 0x0f	; 15
    4218:	0f b6       	in	r0, 0x3f	; 63
    421a:	f8 94       	cli
    421c:	de bf       	out	0x3e, r29	; 62
    421e:	0f be       	out	0x3f, r0	; 63
    4220:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4222:	8f e5       	ldi	r24, 0x5F	; 95
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	fc 01       	movw	r30, r24
    4228:	80 81       	ld	r24, Z
    422a:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    422c:	f8 94       	cli
  if (!initialized) {
    422e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <_ZN8SPIClass11initializedE>
    4232:	88 23       	and	r24, r24
    4234:	09 f0       	breq	.+2      	; 0x4238 <_ZN8SPIClass5beginEv+0x2a>
    4236:	5b c0       	rjmp	.+182    	; 0x42ee <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4238:	89 ec       	ldi	r24, 0xC9	; 201
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	9b 83       	std	Y+3, r25	; 0x03
    423e:	8a 83       	std	Y+2, r24	; 0x02
    4240:	8a 81       	ldd	r24, Y+2	; 0x02
    4242:	9b 81       	ldd	r25, Y+3	; 0x03
    4244:	fc 01       	movw	r30, r24
    4246:	84 91       	lpm	r24, Z
    4248:	8c 83       	std	Y+4, r24	; 0x04
    424a:	8c 81       	ldd	r24, Y+4	; 0x04
    424c:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    424e:	83 e8       	ldi	r24, 0x83	; 131
    4250:	91 e0       	ldi	r25, 0x01	; 1
    4252:	9f 83       	std	Y+7, r25	; 0x07
    4254:	8e 83       	std	Y+6, r24	; 0x06
    4256:	8e 81       	ldd	r24, Y+6	; 0x06
    4258:	9f 81       	ldd	r25, Y+7	; 0x07
    425a:	fc 01       	movw	r30, r24
    425c:	84 91       	lpm	r24, Z
    425e:	88 87       	std	Y+8, r24	; 0x08
    4260:	88 85       	ldd	r24, Y+8	; 0x08
    4262:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    4264:	8d 81       	ldd	r24, Y+5	; 0x05
    4266:	88 2f       	mov	r24, r24
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	88 0f       	add	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	82 5f       	subi	r24, 0xF2	; 242
    4270:	9d 4f       	sbci	r25, 0xFD	; 253
    4272:	9b 87       	std	Y+11, r25	; 0x0b
    4274:	8a 87       	std	Y+10, r24	; 0x0a
    4276:	8a 85       	ldd	r24, Y+10	; 0x0a
    4278:	9b 85       	ldd	r25, Y+11	; 0x0b
    427a:	fc 01       	movw	r30, r24
    427c:	25 91       	lpm	r18, Z+
    427e:	34 91       	lpm	r19, Z
    4280:	cf 01       	movw	r24, r30
    4282:	3d 87       	std	Y+13, r19	; 0x0d
    4284:	2c 87       	std	Y+12, r18	; 0x0c
    4286:	9b 87       	std	Y+11, r25	; 0x0b
    4288:	8a 87       	std	Y+10, r24	; 0x0a
    428a:	8c 85       	ldd	r24, Y+12	; 0x0c
    428c:	9d 85       	ldd	r25, Y+13	; 0x0d
    428e:	9f 87       	std	Y+15, r25	; 0x0f
    4290:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4292:	8e 85       	ldd	r24, Y+14	; 0x0e
    4294:	9f 85       	ldd	r25, Y+15	; 0x0f
    4296:	fc 01       	movw	r30, r24
    4298:	90 81       	ld	r25, Z
    429a:	89 85       	ldd	r24, Y+9	; 0x09
    429c:	98 23       	and	r25, r24
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	99 23       	and	r25, r25
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <_ZN8SPIClass5beginEv+0x98>
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	88 23       	and	r24, r24
    42a8:	21 f0       	breq	.+8      	; 0x42b2 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    42aa:	61 e0       	ldi	r22, 0x01	; 1
    42ac:	85 e3       	ldi	r24, 0x35	; 53
    42ae:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    42b2:	61 e0       	ldi	r22, 0x01	; 1
    42b4:	85 e3       	ldi	r24, 0x35	; 53
    42b6:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    42ba:	8c e4       	ldi	r24, 0x4C	; 76
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	2c e4       	ldi	r18, 0x4C	; 76
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	f9 01       	movw	r30, r18
    42c4:	20 81       	ld	r18, Z
    42c6:	20 61       	ori	r18, 0x10	; 16
    42c8:	fc 01       	movw	r30, r24
    42ca:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    42cc:	8c e4       	ldi	r24, 0x4C	; 76
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	2c e4       	ldi	r18, 0x4C	; 76
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	f9 01       	movw	r30, r18
    42d6:	20 81       	ld	r18, Z
    42d8:	20 64       	ori	r18, 0x40	; 64
    42da:	fc 01       	movw	r30, r24
    42dc:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	84 e3       	ldi	r24, 0x34	; 52
    42e2:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
    pinMode(MOSI, OUTPUT);
    42e6:	61 e0       	ldi	r22, 0x01	; 1
    42e8:	83 e3       	ldi	r24, 0x33	; 51
    42ea:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <pinMode>
  }
  initialized++; // reference count
    42ee:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <_ZN8SPIClass11initializedE>
    42f2:	8f 5f       	subi	r24, 0xFF	; 255
    42f4:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    42f8:	8f e5       	ldi	r24, 0x5F	; 95
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	29 81       	ldd	r18, Y+1	; 0x01
    42fe:	fc 01       	movw	r30, r24
    4300:	20 83       	st	Z, r18
}
    4302:	00 00       	nop
    4304:	2f 96       	adiw	r28, 0x0f	; 15
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	f8 94       	cli
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	0f be       	out	0x3f, r0	; 63
    430e:	cd bf       	out	0x3d, r28	; 61
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	08 95       	ret

00004316 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4316:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_state>
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <twi_sendStop>
    4320:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <twi_inRepStart>
    4324:	61 e0       	ldi	r22, 0x01	; 1
    4326:	84 e1       	ldi	r24, 0x14	; 20
    4328:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    432c:	61 e0       	ldi	r22, 0x01	; 1
    432e:	85 e1       	ldi	r24, 0x15	; 21
    4330:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    4334:	e9 eb       	ldi	r30, 0xB9	; 185
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	8e 7f       	andi	r24, 0xFE	; 254
    433c:	80 83       	st	Z, r24
    433e:	80 81       	ld	r24, Z
    4340:	8d 7f       	andi	r24, 0xFD	; 253
    4342:	80 83       	st	Z, r24
    4344:	88 e4       	ldi	r24, 0x48	; 72
    4346:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    434a:	85 e4       	ldi	r24, 0x45	; 69
    434c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4350:	08 95       	ret

00004352 <twi_disable>:
    4352:	ec eb       	ldi	r30, 0xBC	; 188
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	80 81       	ld	r24, Z
    4358:	8a 7b       	andi	r24, 0xBA	; 186
    435a:	80 83       	st	Z, r24
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	84 e1       	ldi	r24, 0x14	; 20
    4360:	0e 94 57 2e 	call	0x5cae	; 0x5cae <digitalWrite>
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	85 e1       	ldi	r24, 0x15	; 21
    4368:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <digitalWrite>

0000436c <twi_transmit>:
    436c:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <twi_txBufferLength>
    4370:	26 2f       	mov	r18, r22
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	24 0f       	add	r18, r20
    4376:	31 1d       	adc	r19, r1
    4378:	21 32       	cpi	r18, 0x21	; 33
    437a:	31 05       	cpc	r19, r1
    437c:	dc f4       	brge	.+54     	; 0x43b4 <twi_transmit+0x48>
    437e:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <twi_state>
    4382:	24 30       	cpi	r18, 0x04	; 4
    4384:	c9 f4       	brne	.+50     	; 0x43b8 <twi_transmit+0x4c>
    4386:	fc 01       	movw	r30, r24
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	86 17       	cp	r24, r22
    438e:	58 f4       	brcc	.+22     	; 0x43a6 <twi_transmit+0x3a>
    4390:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <twi_txBufferLength>
    4394:	21 91       	ld	r18, Z+
    4396:	dc 01       	movw	r26, r24
    4398:	a0 5c       	subi	r26, 0xC0	; 192
    439a:	bb 4f       	sbci	r27, 0xFB	; 251
    439c:	a3 0f       	add	r26, r19
    439e:	b1 1d       	adc	r27, r1
    43a0:	2c 93       	st	X, r18
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	f3 cf       	rjmp	.-26     	; 0x438c <twi_transmit+0x20>
    43a6:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_txBufferLength>
    43aa:	68 0f       	add	r22, r24
    43ac:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <twi_txBufferLength>
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	08 95       	ret
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	08 95       	ret
    43b8:	82 e0       	ldi	r24, 0x02	; 2
    43ba:	08 95       	ret

000043bc <twi_attachSlaveRxEvent>:
    43bc:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <twi_onSlaveReceive+0x1>
    43c0:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <twi_onSlaveReceive>
    43c4:	08 95       	ret

000043c6 <twi_attachSlaveTxEvent>:
    43c6:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <twi_onSlaveTransmit+0x1>
    43ca:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <twi_onSlaveTransmit>
    43ce:	08 95       	ret

000043d0 <twi_releaseBus>:
    43d0:	85 ec       	ldi	r24, 0xC5	; 197
    43d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    43d6:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_state>
    43da:	08 95       	ret

000043dc <twi_handleTimeout>:
    43dc:	cf 93       	push	r28
    43de:	df 93       	push	r29
    43e0:	91 e0       	ldi	r25, 0x01	; 1
    43e2:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <twi_timed_out_flag>
    43e6:	88 23       	and	r24, r24
    43e8:	51 f0       	breq	.+20     	; 0x43fe <twi_handleTimeout+0x22>
    43ea:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    43ee:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    43f2:	af df       	rcall	.-162    	; 0x4352 <twi_disable>
    43f4:	90 df       	rcall	.-224    	; 0x4316 <twi_init>
    43f6:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    43fa:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	08 95       	ret

00004404 <twi_readFrom>:
    4404:	4f 92       	push	r4
    4406:	5f 92       	push	r5
    4408:	6f 92       	push	r6
    440a:	7f 92       	push	r7
    440c:	8f 92       	push	r8
    440e:	9f 92       	push	r9
    4410:	af 92       	push	r10
    4412:	bf 92       	push	r11
    4414:	cf 92       	push	r12
    4416:	df 92       	push	r13
    4418:	ef 92       	push	r14
    441a:	ff 92       	push	r15
    441c:	0f 93       	push	r16
    441e:	1f 93       	push	r17
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	f8 2e       	mov	r15, r24
    4426:	16 2f       	mov	r17, r22
    4428:	07 2f       	mov	r16, r23
    442a:	c4 2f       	mov	r28, r20
    442c:	e2 2e       	mov	r14, r18
    442e:	41 32       	cpi	r20, 0x21	; 33
    4430:	08 f0       	brcs	.+2      	; 0x4434 <twi_readFrom+0x30>
    4432:	bc c0       	rjmp	.+376    	; 0x45ac <twi_readFrom+0x1a8>
    4434:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    4438:	4b 01       	movw	r8, r22
    443a:	5c 01       	movw	r10, r24
    443c:	d0 91 8f 04 	lds	r29, 0x048F	; 0x80048f <twi_state>
    4440:	dd 23       	and	r29, r29
    4442:	29 f1       	breq	.+74     	; 0x448e <twi_readFrom+0x8a>
    4444:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    4448:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    444c:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    4450:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    4454:	89 2b       	or	r24, r25
    4456:	8a 2b       	or	r24, r26
    4458:	8b 2b       	or	r24, r27
    445a:	81 f3       	breq	.-32     	; 0x443c <twi_readFrom+0x38>
    445c:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    4460:	40 90 88 04 	lds	r4, 0x0488	; 0x800488 <twi_timeout_us>
    4464:	50 90 89 04 	lds	r5, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    4468:	60 90 8a 04 	lds	r6, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    446c:	70 90 8b 04 	lds	r7, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	88 19       	sub	r24, r8
    4476:	99 09       	sbc	r25, r9
    4478:	aa 09       	sbc	r26, r10
    447a:	bb 09       	sbc	r27, r11
    447c:	48 16       	cp	r4, r24
    447e:	59 06       	cpc	r5, r25
    4480:	6a 06       	cpc	r6, r26
    4482:	7b 06       	cpc	r7, r27
    4484:	d8 f6       	brcc	.-74     	; 0x443c <twi_readFrom+0x38>
    4486:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_do_reset_on_timeout>
    448a:	a8 df       	rcall	.-176    	; 0x43dc <twi_handleTimeout>
    448c:	8f c0       	rjmp	.+286    	; 0x45ac <twi_readFrom+0x1a8>
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_state>
    4494:	e0 92 8d 04 	sts	0x048D, r14	; 0x80048d <twi_sendStop>
    4498:	9f ef       	ldi	r25, 0xFF	; 255
    449a:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <twi_error>
    449e:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <twi_masterBufferIndex>
    44a2:	9c 0f       	add	r25, r28
    44a4:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <twi_masterBufferLength>
    44a8:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <twi_slarw>
    44ac:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_slarw>
    44b0:	8f 2d       	mov	r24, r15
    44b2:	88 0f       	add	r24, r24
    44b4:	89 2b       	or	r24, r25
    44b6:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <twi_slarw>
    44ba:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <twi_inRepStart>
    44be:	81 30       	cpi	r24, 0x01	; 1
    44c0:	89 f5       	brne	.+98     	; 0x4524 <twi_readFrom+0x120>
    44c2:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <twi_inRepStart>
    44c6:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    44ca:	6b 01       	movw	r12, r22
    44cc:	7c 01       	movw	r14, r24
    44ce:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_slarw>
    44d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    44d6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    44da:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    44de:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    44e2:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    44e6:	89 2b       	or	r24, r25
    44e8:	8a 2b       	or	r24, r26
    44ea:	8b 2b       	or	r24, r27
    44ec:	a9 f0       	breq	.+42     	; 0x4518 <twi_readFrom+0x114>
    44ee:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    44f2:	80 90 88 04 	lds	r8, 0x0488	; 0x800488 <twi_timeout_us>
    44f6:	90 90 89 04 	lds	r9, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    44fa:	a0 90 8a 04 	lds	r10, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    44fe:	b0 90 8b 04 	lds	r11, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	8c 19       	sub	r24, r12
    4508:	9d 09       	sbc	r25, r13
    450a:	ae 09       	sbc	r26, r14
    450c:	bf 09       	sbc	r27, r15
    450e:	88 16       	cp	r8, r24
    4510:	99 06       	cpc	r9, r25
    4512:	aa 06       	cpc	r10, r26
    4514:	bb 06       	cpc	r11, r27
    4516:	90 f1       	brcs	.+100    	; 0x457c <twi_readFrom+0x178>
    4518:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    451c:	83 fd       	sbrc	r24, 3
    451e:	d7 cf       	rjmp	.-82     	; 0x44ce <twi_readFrom+0xca>
    4520:	85 ec       	ldi	r24, 0xC5	; 197
    4522:	01 c0       	rjmp	.+2      	; 0x4526 <twi_readFrom+0x122>
    4524:	85 ee       	ldi	r24, 0xE5	; 229
    4526:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    452a:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    452e:	6b 01       	movw	r12, r22
    4530:	7c 01       	movw	r14, r24
    4532:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <twi_state>
    4536:	81 30       	cpi	r24, 0x01	; 1
    4538:	29 f5       	brne	.+74     	; 0x4584 <twi_readFrom+0x180>
    453a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    453e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    4542:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    4546:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    454a:	89 2b       	or	r24, r25
    454c:	8a 2b       	or	r24, r26
    454e:	8b 2b       	or	r24, r27
    4550:	81 f3       	breq	.-32     	; 0x4532 <twi_readFrom+0x12e>
    4552:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    4556:	80 90 88 04 	lds	r8, 0x0488	; 0x800488 <twi_timeout_us>
    455a:	90 90 89 04 	lds	r9, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    455e:	a0 90 8a 04 	lds	r10, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    4562:	b0 90 8b 04 	lds	r11, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	8c 19       	sub	r24, r12
    456c:	9d 09       	sbc	r25, r13
    456e:	ae 09       	sbc	r26, r14
    4570:	bf 09       	sbc	r27, r15
    4572:	88 16       	cp	r8, r24
    4574:	99 06       	cpc	r9, r25
    4576:	aa 06       	cpc	r10, r26
    4578:	bb 06       	cpc	r11, r27
    457a:	d8 f6       	brcc	.-74     	; 0x4532 <twi_readFrom+0x12e>
    457c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_do_reset_on_timeout>
    4580:	2d df       	rcall	.-422    	; 0x43dc <twi_handleTimeout>
    4582:	15 c0       	rjmp	.+42     	; 0x45ae <twi_readFrom+0x1aa>
    4584:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <twi_masterBufferIndex>
    4588:	8c 17       	cp	r24, r28
    458a:	10 f4       	brcc	.+4      	; 0x4590 <twi_readFrom+0x18c>
    458c:	c0 91 61 04 	lds	r28, 0x0461	; 0x800461 <twi_masterBufferIndex>
    4590:	a2 e6       	ldi	r26, 0x62	; 98
    4592:	b4 e0       	ldi	r27, 0x04	; 4
    4594:	91 2f       	mov	r25, r17
    4596:	e1 2f       	mov	r30, r17
    4598:	f0 2f       	mov	r31, r16
    459a:	8e 2f       	mov	r24, r30
    459c:	89 1b       	sub	r24, r25
    459e:	8c 17       	cp	r24, r28
    45a0:	18 f4       	brcc	.+6      	; 0x45a8 <twi_readFrom+0x1a4>
    45a2:	8d 91       	ld	r24, X+
    45a4:	81 93       	st	Z+, r24
    45a6:	f9 cf       	rjmp	.-14     	; 0x459a <twi_readFrom+0x196>
    45a8:	dc 2f       	mov	r29, r28
    45aa:	01 c0       	rjmp	.+2      	; 0x45ae <twi_readFrom+0x1aa>
    45ac:	d0 e0       	ldi	r29, 0x00	; 0
    45ae:	8d 2f       	mov	r24, r29
    45b0:	df 91       	pop	r29
    45b2:	cf 91       	pop	r28
    45b4:	1f 91       	pop	r17
    45b6:	0f 91       	pop	r16
    45b8:	ff 90       	pop	r15
    45ba:	ef 90       	pop	r14
    45bc:	df 90       	pop	r13
    45be:	cf 90       	pop	r12
    45c0:	bf 90       	pop	r11
    45c2:	af 90       	pop	r10
    45c4:	9f 90       	pop	r9
    45c6:	8f 90       	pop	r8
    45c8:	7f 90       	pop	r7
    45ca:	6f 90       	pop	r6
    45cc:	5f 90       	pop	r5
    45ce:	4f 90       	pop	r4
    45d0:	08 95       	ret

000045d2 <twi_writeTo>:
    45d2:	4f 92       	push	r4
    45d4:	5f 92       	push	r5
    45d6:	6f 92       	push	r6
    45d8:	7f 92       	push	r7
    45da:	8f 92       	push	r8
    45dc:	9f 92       	push	r9
    45de:	af 92       	push	r10
    45e0:	bf 92       	push	r11
    45e2:	cf 92       	push	r12
    45e4:	df 92       	push	r13
    45e6:	ef 92       	push	r14
    45e8:	ff 92       	push	r15
    45ea:	0f 93       	push	r16
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	41 32       	cpi	r20, 0x21	; 33
    45f4:	08 f0       	brcs	.+2      	; 0x45f8 <twi_writeTo+0x26>
    45f6:	c5 c0       	rjmp	.+394    	; 0x4782 <twi_writeTo+0x1b0>
    45f8:	12 2f       	mov	r17, r18
    45fa:	f4 2e       	mov	r15, r20
    45fc:	d7 2e       	mov	r13, r23
    45fe:	e6 2e       	mov	r14, r22
    4600:	d8 2f       	mov	r29, r24
    4602:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    4606:	4b 01       	movw	r8, r22
    4608:	5c 01       	movw	r10, r24
    460a:	c0 91 8f 04 	lds	r28, 0x048F	; 0x80048f <twi_state>
    460e:	cc 23       	and	r28, r28
    4610:	11 f1       	breq	.+68     	; 0x4656 <twi_writeTo+0x84>
    4612:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    4616:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    461a:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    461e:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    4622:	89 2b       	or	r24, r25
    4624:	8a 2b       	or	r24, r26
    4626:	8b 2b       	or	r24, r27
    4628:	81 f3       	breq	.-32     	; 0x460a <twi_writeTo+0x38>
    462a:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    462e:	40 90 88 04 	lds	r4, 0x0488	; 0x800488 <twi_timeout_us>
    4632:	50 90 89 04 	lds	r5, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    4636:	60 90 8a 04 	lds	r6, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    463a:	70 90 8b 04 	lds	r7, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	88 19       	sub	r24, r8
    4644:	99 09       	sbc	r25, r9
    4646:	aa 09       	sbc	r26, r10
    4648:	bb 09       	sbc	r27, r11
    464a:	48 16       	cp	r4, r24
    464c:	59 06       	cpc	r5, r25
    464e:	6a 06       	cpc	r6, r26
    4650:	7b 06       	cpc	r7, r27
    4652:	d8 f6       	brcc	.-74     	; 0x460a <twi_writeTo+0x38>
    4654:	83 c0       	rjmp	.+262    	; 0x475c <twi_writeTo+0x18a>
    4656:	82 e0       	ldi	r24, 0x02	; 2
    4658:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_state>
    465c:	00 93 8d 04 	sts	0x048D, r16	; 0x80048d <twi_sendStop>
    4660:	8f ef       	ldi	r24, 0xFF	; 255
    4662:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <twi_error>
    4666:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <twi_masterBufferIndex>
    466a:	f0 92 60 04 	sts	0x0460, r15	; 0x800460 <twi_masterBufferLength>
    466e:	9e 2d       	mov	r25, r14
    4670:	a2 e6       	ldi	r26, 0x62	; 98
    4672:	b4 e0       	ldi	r27, 0x04	; 4
    4674:	ee 2d       	mov	r30, r14
    4676:	fd 2d       	mov	r31, r13
    4678:	8e 2f       	mov	r24, r30
    467a:	89 1b       	sub	r24, r25
    467c:	8f 15       	cp	r24, r15
    467e:	18 f4       	brcc	.+6      	; 0x4686 <twi_writeTo+0xb4>
    4680:	81 91       	ld	r24, Z+
    4682:	8d 93       	st	X+, r24
    4684:	f9 cf       	rjmp	.-14     	; 0x4678 <twi_writeTo+0xa6>
    4686:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <twi_slarw>
    468a:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_slarw>
    468e:	dd 0f       	add	r29, r29
    4690:	d9 2b       	or	r29, r25
    4692:	d0 93 8e 04 	sts	0x048E, r29	; 0x80048e <twi_slarw>
    4696:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <twi_inRepStart>
    469a:	81 30       	cpi	r24, 0x01	; 1
    469c:	89 f5       	brne	.+98     	; 0x4700 <twi_writeTo+0x12e>
    469e:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <twi_inRepStart>
    46a2:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    46a6:	6b 01       	movw	r12, r22
    46a8:	7c 01       	movw	r14, r24
    46aa:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_slarw>
    46ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    46b2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    46b6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    46ba:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    46be:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    46c2:	89 2b       	or	r24, r25
    46c4:	8a 2b       	or	r24, r26
    46c6:	8b 2b       	or	r24, r27
    46c8:	a9 f0       	breq	.+42     	; 0x46f4 <twi_writeTo+0x122>
    46ca:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    46ce:	80 90 88 04 	lds	r8, 0x0488	; 0x800488 <twi_timeout_us>
    46d2:	90 90 89 04 	lds	r9, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    46d6:	a0 90 8a 04 	lds	r10, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    46da:	b0 90 8b 04 	lds	r11, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	8c 19       	sub	r24, r12
    46e4:	9d 09       	sbc	r25, r13
    46e6:	ae 09       	sbc	r26, r14
    46e8:	bf 09       	sbc	r27, r15
    46ea:	88 16       	cp	r8, r24
    46ec:	99 06       	cpc	r9, r25
    46ee:	aa 06       	cpc	r10, r26
    46f0:	bb 06       	cpc	r11, r27
    46f2:	a0 f1       	brcs	.+104    	; 0x475c <twi_writeTo+0x18a>
    46f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46f8:	83 fd       	sbrc	r24, 3
    46fa:	d7 cf       	rjmp	.-82     	; 0x46aa <twi_writeTo+0xd8>
    46fc:	85 ec       	ldi	r24, 0xC5	; 197
    46fe:	01 c0       	rjmp	.+2      	; 0x4702 <twi_writeTo+0x130>
    4700:	85 ee       	ldi	r24, 0xE5	; 229
    4702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4706:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    470a:	6b 01       	movw	r12, r22
    470c:	7c 01       	movw	r14, r24
    470e:	11 23       	and	r17, r17
    4710:	51 f1       	breq	.+84     	; 0x4766 <twi_writeTo+0x194>
    4712:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <twi_state>
    4716:	82 30       	cpi	r24, 0x02	; 2
    4718:	31 f5       	brne	.+76     	; 0x4766 <twi_writeTo+0x194>
    471a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    471e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    4722:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    4726:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    472a:	89 2b       	or	r24, r25
    472c:	8a 2b       	or	r24, r26
    472e:	8b 2b       	or	r24, r27
    4730:	71 f3       	breq	.-36     	; 0x470e <twi_writeTo+0x13c>
    4732:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <micros>
    4736:	80 90 88 04 	lds	r8, 0x0488	; 0x800488 <twi_timeout_us>
    473a:	90 90 89 04 	lds	r9, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    473e:	a0 90 8a 04 	lds	r10, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    4742:	b0 90 8b 04 	lds	r11, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	8c 19       	sub	r24, r12
    474c:	9d 09       	sbc	r25, r13
    474e:	ae 09       	sbc	r26, r14
    4750:	bf 09       	sbc	r27, r15
    4752:	88 16       	cp	r8, r24
    4754:	99 06       	cpc	r9, r25
    4756:	aa 06       	cpc	r10, r26
    4758:	bb 06       	cpc	r11, r27
    475a:	c8 f6       	brcc	.-78     	; 0x470e <twi_writeTo+0x13c>
    475c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_do_reset_on_timeout>
    4760:	3d de       	rcall	.-902    	; 0x43dc <twi_handleTimeout>
    4762:	c5 e0       	ldi	r28, 0x05	; 5
    4764:	13 c0       	rjmp	.+38     	; 0x478c <twi_writeTo+0x1ba>
    4766:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_error>
    476a:	8f 3f       	cpi	r24, 0xFF	; 255
    476c:	79 f0       	breq	.+30     	; 0x478c <twi_writeTo+0x1ba>
    476e:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_error>
    4772:	80 32       	cpi	r24, 0x20	; 32
    4774:	41 f0       	breq	.+16     	; 0x4786 <twi_writeTo+0x1b4>
    4776:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_error>
    477a:	80 33       	cpi	r24, 0x30	; 48
    477c:	31 f0       	breq	.+12     	; 0x478a <twi_writeTo+0x1b8>
    477e:	c4 e0       	ldi	r28, 0x04	; 4
    4780:	05 c0       	rjmp	.+10     	; 0x478c <twi_writeTo+0x1ba>
    4782:	c1 e0       	ldi	r28, 0x01	; 1
    4784:	03 c0       	rjmp	.+6      	; 0x478c <twi_writeTo+0x1ba>
    4786:	c2 e0       	ldi	r28, 0x02	; 2
    4788:	01 c0       	rjmp	.+2      	; 0x478c <twi_writeTo+0x1ba>
    478a:	c3 e0       	ldi	r28, 0x03	; 3
    478c:	8c 2f       	mov	r24, r28
    478e:	df 91       	pop	r29
    4790:	cf 91       	pop	r28
    4792:	1f 91       	pop	r17
    4794:	0f 91       	pop	r16
    4796:	ff 90       	pop	r15
    4798:	ef 90       	pop	r14
    479a:	df 90       	pop	r13
    479c:	cf 90       	pop	r12
    479e:	bf 90       	pop	r11
    47a0:	af 90       	pop	r10
    47a2:	9f 90       	pop	r9
    47a4:	8f 90       	pop	r8
    47a6:	7f 90       	pop	r7
    47a8:	6f 90       	pop	r6
    47aa:	5f 90       	pop	r5
    47ac:	4f 90       	pop	r4
    47ae:	08 95       	ret

000047b0 <twi_stop>:
    47b0:	85 ed       	ldi	r24, 0xD5	; 213
    47b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47b6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_timeout_us>
    47ba:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    47be:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    47c2:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    47c6:	07 96       	adiw	r24, 0x07	; 7
    47c8:	a1 1d       	adc	r26, r1
    47ca:	b1 1d       	adc	r27, r1
    47cc:	23 e0       	ldi	r18, 0x03	; 3
    47ce:	b6 95       	lsr	r27
    47d0:	a7 95       	ror	r26
    47d2:	97 95       	ror	r25
    47d4:	87 95       	ror	r24
    47d6:	2a 95       	dec	r18
    47d8:	d1 f7       	brne	.-12     	; 0x47ce <twi_stop+0x1e>
    47da:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47de:	24 ff       	sbrs	r18, 4
    47e0:	1b c0       	rjmp	.+54     	; 0x4818 <twi_stop+0x68>
    47e2:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <twi_timeout_us>
    47e6:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <twi_timeout_us+0x1>
    47ea:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <twi_timeout_us+0x2>
    47ee:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <twi_timeout_us+0x3>
    47f2:	45 2b       	or	r20, r21
    47f4:	46 2b       	or	r20, r22
    47f6:	47 2b       	or	r20, r23
    47f8:	81 f3       	breq	.-32     	; 0x47da <twi_stop+0x2a>
    47fa:	00 97       	sbiw	r24, 0x00	; 0
    47fc:	a1 05       	cpc	r26, r1
    47fe:	b1 05       	cpc	r27, r1
    4800:	41 f0       	breq	.+16     	; 0x4812 <twi_stop+0x62>
    4802:	25 e3       	ldi	r18, 0x35	; 53
    4804:	2a 95       	dec	r18
    4806:	f1 f7       	brne	.-4      	; 0x4804 <twi_stop+0x54>
    4808:	00 00       	nop
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	a1 09       	sbc	r26, r1
    480e:	b1 09       	sbc	r27, r1
    4810:	e4 cf       	rjmp	.-56     	; 0x47da <twi_stop+0x2a>
    4812:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <twi_do_reset_on_timeout>
    4816:	e2 cd       	rjmp	.-1084   	; 0x43dc <twi_handleTimeout>
    4818:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_state>
    481c:	08 95       	ret

0000481e <__vector_39>:

ISR(TWI_vect)
{
    481e:	1f 92       	push	r1
    4820:	0f 92       	push	r0
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	0f 92       	push	r0
    4826:	11 24       	eor	r1, r1
    4828:	0b b6       	in	r0, 0x3b	; 59
    482a:	0f 92       	push	r0
    482c:	2f 93       	push	r18
    482e:	3f 93       	push	r19
    4830:	4f 93       	push	r20
    4832:	5f 93       	push	r21
    4834:	6f 93       	push	r22
    4836:	7f 93       	push	r23
    4838:	8f 93       	push	r24
    483a:	9f 93       	push	r25
    483c:	af 93       	push	r26
    483e:	bf 93       	push	r27
    4840:	ef 93       	push	r30
    4842:	ff 93       	push	r31
  switch(TW_STATUS){
    4844:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4848:	88 7f       	andi	r24, 0xF8	; 248
    484a:	80 36       	cpi	r24, 0x60	; 96
    484c:	09 f4       	brne	.+2      	; 0x4850 <__vector_39+0x32>
    484e:	9d c0       	rjmp	.+314    	; 0x498a <__vector_39+0x16c>
    4850:	70 f5       	brcc	.+92     	; 0x48ae <__vector_39+0x90>
    4852:	88 32       	cpi	r24, 0x28	; 40
    4854:	09 f4       	brne	.+2      	; 0x4858 <__vector_39+0x3a>
    4856:	5c c0       	rjmp	.+184    	; 0x4910 <__vector_39+0xf2>
    4858:	90 f4       	brcc	.+36     	; 0x487e <__vector_39+0x60>
    485a:	80 31       	cpi	r24, 0x10	; 16
    485c:	09 f4       	brne	.+2      	; 0x4860 <__vector_39+0x42>
    485e:	55 c0       	rjmp	.+170    	; 0x490a <__vector_39+0xec>
    4860:	38 f4       	brcc	.+14     	; 0x4870 <__vector_39+0x52>
    4862:	88 23       	and	r24, r24
    4864:	09 f4       	brne	.+2      	; 0x4868 <__vector_39+0x4a>
    4866:	f3 c0       	rjmp	.+486    	; 0x4a4e <__vector_39+0x230>
    4868:	88 30       	cpi	r24, 0x08	; 8
    486a:	09 f4       	brne	.+2      	; 0x486e <__vector_39+0x50>
    486c:	4e c0       	rjmp	.+156    	; 0x490a <__vector_39+0xec>
    486e:	f2 c0       	rjmp	.+484    	; 0x4a54 <__vector_39+0x236>
    4870:	88 31       	cpi	r24, 0x18	; 24
    4872:	09 f4       	brne	.+2      	; 0x4876 <__vector_39+0x58>
    4874:	4d c0       	rjmp	.+154    	; 0x4910 <__vector_39+0xf2>
    4876:	80 32       	cpi	r24, 0x20	; 32
    4878:	09 f4       	brne	.+2      	; 0x487c <__vector_39+0x5e>
    487a:	5e c0       	rjmp	.+188    	; 0x4938 <__vector_39+0x11a>
    487c:	eb c0       	rjmp	.+470    	; 0x4a54 <__vector_39+0x236>
    487e:	80 34       	cpi	r24, 0x40	; 64
    4880:	09 f4       	brne	.+2      	; 0x4884 <__vector_39+0x66>
    4882:	69 c0       	rjmp	.+210    	; 0x4956 <__vector_39+0x138>
    4884:	50 f4       	brcc	.+20     	; 0x489a <__vector_39+0x7c>
    4886:	80 33       	cpi	r24, 0x30	; 48
    4888:	09 f4       	brne	.+2      	; 0x488c <__vector_39+0x6e>
    488a:	56 c0       	rjmp	.+172    	; 0x4938 <__vector_39+0x11a>
    488c:	88 33       	cpi	r24, 0x38	; 56
    488e:	09 f0       	breq	.+2      	; 0x4892 <__vector_39+0x74>
    4890:	e1 c0       	rjmp	.+450    	; 0x4a54 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4892:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <twi_error>
      twi_releaseBus();
    4896:	9c dd       	rcall	.-1224   	; 0x43d0 <twi_releaseBus>
      break;
    4898:	dd c0       	rjmp	.+442    	; 0x4a54 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    489a:	80 35       	cpi	r24, 0x50	; 80
    489c:	09 f4       	brne	.+2      	; 0x48a0 <__vector_39+0x82>
    489e:	4f c0       	rjmp	.+158    	; 0x493e <__vector_39+0x120>
    48a0:	88 35       	cpi	r24, 0x58	; 88
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <__vector_39+0x88>
    48a4:	5d c0       	rjmp	.+186    	; 0x4960 <__vector_39+0x142>
    48a6:	88 34       	cpi	r24, 0x48	; 72
    48a8:	09 f0       	breq	.+2      	; 0x48ac <__vector_39+0x8e>
    48aa:	d4 c0       	rjmp	.+424    	; 0x4a54 <__vector_39+0x236>
    48ac:	d2 c0       	rjmp	.+420    	; 0x4a52 <__vector_39+0x234>
    48ae:	88 39       	cpi	r24, 0x98	; 152
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <__vector_39+0x96>
    48b2:	c3 c0       	rjmp	.+390    	; 0x4a3a <__vector_39+0x21c>
    48b4:	a8 f4       	brcc	.+42     	; 0x48e0 <__vector_39+0xc2>
    48b6:	88 37       	cpi	r24, 0x78	; 120
    48b8:	09 f4       	brne	.+2      	; 0x48bc <__vector_39+0x9e>
    48ba:	67 c0       	rjmp	.+206    	; 0x498a <__vector_39+0x16c>
    48bc:	38 f4       	brcc	.+14     	; 0x48cc <__vector_39+0xae>
    48be:	88 36       	cpi	r24, 0x68	; 104
    48c0:	09 f4       	brne	.+2      	; 0x48c4 <__vector_39+0xa6>
    48c2:	63 c0       	rjmp	.+198    	; 0x498a <__vector_39+0x16c>
    48c4:	80 37       	cpi	r24, 0x70	; 112
    48c6:	09 f4       	brne	.+2      	; 0x48ca <__vector_39+0xac>
    48c8:	60 c0       	rjmp	.+192    	; 0x498a <__vector_39+0x16c>
    48ca:	c4 c0       	rjmp	.+392    	; 0x4a54 <__vector_39+0x236>
    48cc:	88 38       	cpi	r24, 0x88	; 136
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <__vector_39+0xb4>
    48d0:	b4 c0       	rjmp	.+360    	; 0x4a3a <__vector_39+0x21c>
    48d2:	80 39       	cpi	r24, 0x90	; 144
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <__vector_39+0xba>
    48d6:	5f c0       	rjmp	.+190    	; 0x4996 <__vector_39+0x178>
    48d8:	80 38       	cpi	r24, 0x80	; 128
    48da:	09 f0       	breq	.+2      	; 0x48de <__vector_39+0xc0>
    48dc:	bb c0       	rjmp	.+374    	; 0x4a54 <__vector_39+0x236>
    48de:	5b c0       	rjmp	.+182    	; 0x4996 <__vector_39+0x178>
    48e0:	80 3b       	cpi	r24, 0xB0	; 176
    48e2:	09 f4       	brne	.+2      	; 0x48e6 <__vector_39+0xc8>
    48e4:	82 c0       	rjmp	.+260    	; 0x49ea <__vector_39+0x1cc>
    48e6:	38 f4       	brcc	.+14     	; 0x48f6 <__vector_39+0xd8>
    48e8:	80 3a       	cpi	r24, 0xA0	; 160
    48ea:	09 f4       	brne	.+2      	; 0x48ee <__vector_39+0xd0>
    48ec:	66 c0       	rjmp	.+204    	; 0x49ba <__vector_39+0x19c>
    48ee:	88 3a       	cpi	r24, 0xA8	; 168
    48f0:	09 f4       	brne	.+2      	; 0x48f4 <__vector_39+0xd6>
    48f2:	7b c0       	rjmp	.+246    	; 0x49ea <__vector_39+0x1cc>
    48f4:	af c0       	rjmp	.+350    	; 0x4a54 <__vector_39+0x236>
    48f6:	80 3c       	cpi	r24, 0xC0	; 192
    48f8:	09 f4       	brne	.+2      	; 0x48fc <__vector_39+0xde>
    48fa:	a3 c0       	rjmp	.+326    	; 0x4a42 <__vector_39+0x224>
    48fc:	88 3c       	cpi	r24, 0xC8	; 200
    48fe:	09 f4       	brne	.+2      	; 0x4902 <__vector_39+0xe4>
    4900:	a0 c0       	rjmp	.+320    	; 0x4a42 <__vector_39+0x224>
    4902:	88 3b       	cpi	r24, 0xB8	; 184
    4904:	09 f4       	brne	.+2      	; 0x4908 <__vector_39+0xea>
    4906:	86 c0       	rjmp	.+268    	; 0x4a14 <__vector_39+0x1f6>
    4908:	a5 c0       	rjmp	.+330    	; 0x4a54 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    490a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_slarw>
    490e:	10 c0       	rjmp	.+32     	; 0x4930 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4910:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <twi_masterBufferIndex>
    4914:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <twi_masterBufferLength>
    4918:	98 17       	cp	r25, r24
    491a:	70 f5       	brcc	.+92     	; 0x4978 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    491c:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <twi_masterBufferIndex>
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	8e 0f       	add	r24, r30
    4924:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <twi_masterBufferIndex>
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	ee 59       	subi	r30, 0x9E	; 158
    492c:	fb 4f       	sbci	r31, 0xFB	; 251
    492e:	80 81       	ld	r24, Z
    4930:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4934:	85 ec       	ldi	r24, 0xC5	; 197
    4936:	82 c0       	rjmp	.+260    	; 0x4a3c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4938:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <twi_error>
    493c:	8a c0       	rjmp	.+276    	; 0x4a52 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    493e:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <twi_masterBufferIndex>
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	8e 0f       	add	r24, r30
    4946:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <twi_masterBufferIndex>
    494a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	ee 59       	subi	r30, 0x9E	; 158
    4952:	fb 4f       	sbci	r31, 0xFB	; 251
    4954:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4956:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <twi_masterBufferIndex>
    495a:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <twi_masterBufferLength>
    495e:	6a c0       	rjmp	.+212    	; 0x4a34 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4960:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <twi_masterBufferIndex>
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	8e 0f       	add	r24, r30
    4968:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <twi_masterBufferIndex>
    496c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	ee 59       	subi	r30, 0x9E	; 158
    4974:	fb 4f       	sbci	r31, 0xFB	; 251
    4976:	80 83       	st	Z, r24
      if (twi_sendStop){
    4978:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_sendStop>
    497c:	81 11       	cpse	r24, r1
    497e:	69 c0       	rjmp	.+210    	; 0x4a52 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4986:	84 ea       	ldi	r24, 0xA4	; 164
    4988:	5d c0       	rjmp	.+186    	; 0x4a44 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    498a:	83 e0       	ldi	r24, 0x03	; 3
    498c:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4990:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <twi_rxBufferIndex>
    4994:	cf cf       	rjmp	.-98     	; 0x4934 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4996:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <twi_rxBufferIndex>
    499a:	80 32       	cpi	r24, 0x20	; 32
    499c:	08 f0       	brcs	.+2      	; 0x49a0 <__vector_39+0x182>
    499e:	4d c0       	rjmp	.+154    	; 0x4a3a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    49a0:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <twi_rxBufferIndex>
    49a4:	81 e0       	ldi	r24, 0x01	; 1
    49a6:	8e 0f       	add	r24, r30
    49a8:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <twi_rxBufferIndex>
    49ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	e2 5e       	subi	r30, 0xE2	; 226
    49b4:	fb 4f       	sbci	r31, 0xFB	; 251
    49b6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    49b8:	bd cf       	rjmp	.-134    	; 0x4934 <__vector_39+0x116>
    49ba:	0a dd       	rcall	.-1516   	; 0x43d0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    49bc:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <twi_rxBufferIndex>
    49c0:	80 32       	cpi	r24, 0x20	; 32
    49c2:	30 f4       	brcc	.+12     	; 0x49d0 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    49c4:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <twi_rxBufferIndex>
    49c8:	f0 e0       	ldi	r31, 0x00	; 0
    49ca:	e2 5e       	subi	r30, 0xE2	; 226
    49cc:	fb 4f       	sbci	r31, 0xFB	; 251
    49ce:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    49d0:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <twi_rxBufferIndex>
    49d4:	70 e0       	ldi	r23, 0x00	; 0
    49d6:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <twi_onSlaveReceive>
    49da:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <twi_onSlaveReceive+0x1>
    49de:	8e e1       	ldi	r24, 0x1E	; 30
    49e0:	94 e0       	ldi	r25, 0x04	; 4
    49e2:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    49e4:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <twi_rxBufferIndex>
      break;
    49e8:	35 c0       	rjmp	.+106    	; 0x4a54 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    49ea:	84 e0       	ldi	r24, 0x04	; 4
    49ec:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    49f0:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    49f4:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    49f8:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <twi_onSlaveTransmit>
    49fc:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <twi_onSlaveTransmit+0x1>
    4a00:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4a02:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_txBufferLength>
    4a06:	81 11       	cpse	r24, r1
    4a08:	05 c0       	rjmp	.+10     	; 0x4a14 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4a10:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4a14:	e0 91 3f 04 	lds	r30, 0x043F	; 0x80043f <twi_txBufferIndex>
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	8e 0f       	add	r24, r30
    4a1c:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <twi_txBufferIndex>
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	e0 5c       	subi	r30, 0xC0	; 192
    4a24:	fb 4f       	sbci	r31, 0xFB	; 251
    4a26:	80 81       	ld	r24, Z
    4a28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4a2c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <twi_txBufferIndex>
    4a30:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_txBufferLength>
    4a34:	98 17       	cp	r25, r24
    4a36:	08 f4       	brcc	.+2      	; 0x4a3a <__vector_39+0x21c>
    4a38:	7d cf       	rjmp	.-262    	; 0x4934 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4a3a:	85 e8       	ldi	r24, 0x85	; 133
    4a3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a40:	09 c0       	rjmp	.+18     	; 0x4a54 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4a42:	85 ec       	ldi	r24, 0xC5	; 197
    4a44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4a48:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_state>
      break;
    4a4c:	03 c0       	rjmp	.+6      	; 0x4a54 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4a4e:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_error>
      twi_stop();
    4a52:	ae de       	rcall	.-676    	; 0x47b0 <twi_stop>
      break;
  }
}
    4a54:	ff 91       	pop	r31
    4a56:	ef 91       	pop	r30
    4a58:	bf 91       	pop	r27
    4a5a:	af 91       	pop	r26
    4a5c:	9f 91       	pop	r25
    4a5e:	8f 91       	pop	r24
    4a60:	7f 91       	pop	r23
    4a62:	6f 91       	pop	r22
    4a64:	5f 91       	pop	r21
    4a66:	4f 91       	pop	r20
    4a68:	3f 91       	pop	r19
    4a6a:	2f 91       	pop	r18
    4a6c:	0f 90       	pop	r0
    4a6e:	0b be       	out	0x3b, r0	; 59
    4a70:	0f 90       	pop	r0
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	0f 90       	pop	r0
    4a76:	1f 90       	pop	r1
    4a78:	18 95       	reti

00004a7a <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    4a7e:	00 d0       	rcall	.+0      	; 0x4a80 <_ZN5Print13setWriteErrorEi+0x6>
    4a80:	1f 92       	push	r1
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	9a 83       	std	Y+2, r25	; 0x02
    4a88:	89 83       	std	Y+1, r24	; 0x01
    4a8a:	7c 83       	std	Y+4, r23	; 0x04
    4a8c:	6b 83       	std	Y+3, r22	; 0x03
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	2b 81       	ldd	r18, Y+3	; 0x03
    4a94:	3c 81       	ldd	r19, Y+4	; 0x04
    4a96:	fc 01       	movw	r30, r24
    4a98:	33 83       	std	Z+3, r19	; 0x03
    4a9a:	22 83       	std	Z+2, r18	; 0x02
    4a9c:	00 00       	nop
    4a9e:	0f 90       	pop	r0
    4aa0:	0f 90       	pop	r0
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	df 91       	pop	r29
    4aa8:	cf 91       	pop	r28
    4aaa:	08 95       	ret

00004aac <_ZN5PrintC1Ev>:
    4aac:	cf 93       	push	r28
    4aae:	df 93       	push	r29
    4ab0:	1f 92       	push	r1
    4ab2:	1f 92       	push	r1
    4ab4:	cd b7       	in	r28, 0x3d	; 61
    4ab6:	de b7       	in	r29, 0x3e	; 62
    4ab8:	9a 83       	std	Y+2, r25	; 0x02
    4aba:	89 83       	std	Y+1, r24	; 0x01
    4abc:	2e e2       	ldi	r18, 0x2E	; 46
    4abe:	33 e0       	ldi	r19, 0x03	; 3
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	31 83       	std	Z+1, r19	; 0x01
    4ac8:	20 83       	st	Z, r18
    4aca:	89 81       	ldd	r24, Y+1	; 0x01
    4acc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ace:	fc 01       	movw	r30, r24
    4ad0:	13 82       	std	Z+3, r1	; 0x03
    4ad2:	12 82       	std	Z+2, r1	; 0x02
    4ad4:	00 00       	nop
    4ad6:	0f 90       	pop	r0
    4ad8:	0f 90       	pop	r0
    4ada:	df 91       	pop	r29
    4adc:	cf 91       	pop	r28
    4ade:	08 95       	ret

00004ae0 <_ZN5Print17availableForWriteEv>:
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	1f 92       	push	r1
    4ae6:	1f 92       	push	r1
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	9a 83       	std	Y+2, r25	; 0x02
    4aee:	89 83       	std	Y+1, r24	; 0x01
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	08 95       	ret

00004afe <_ZN5Print5flushEv>:
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	1f 92       	push	r1
    4b04:	1f 92       	push	r1
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	9a 83       	std	Y+2, r25	; 0x02
    4b0c:	89 83       	std	Y+1, r24	; 0x01
    4b0e:	00 00       	nop
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	df 91       	pop	r29
    4b16:	cf 91       	pop	r28
    4b18:	08 95       	ret

00004b1a <_ZN6StreamC1Ev>:
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	1f 92       	push	r1
    4b20:	1f 92       	push	r1
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	9a 83       	std	Y+2, r25	; 0x02
    4b28:	89 83       	std	Y+1, r24	; 0x01
    4b2a:	89 81       	ldd	r24, Y+1	; 0x01
    4b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b2e:	be df       	rcall	.-132    	; 0x4aac <_ZN5PrintC1Ev>
    4b30:	2b ef       	ldi	r18, 0xFB	; 251
    4b32:	32 e0       	ldi	r19, 0x02	; 2
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	9a 81       	ldd	r25, Y+2	; 0x02
    4b38:	fc 01       	movw	r30, r24
    4b3a:	31 83       	std	Z+1, r19	; 0x01
    4b3c:	20 83       	st	Z, r18
    4b3e:	29 81       	ldd	r18, Y+1	; 0x01
    4b40:	3a 81       	ldd	r19, Y+2	; 0x02
    4b42:	88 ee       	ldi	r24, 0xE8	; 232
    4b44:	93 e0       	ldi	r25, 0x03	; 3
    4b46:	a0 e0       	ldi	r26, 0x00	; 0
    4b48:	b0 e0       	ldi	r27, 0x00	; 0
    4b4a:	f9 01       	movw	r30, r18
    4b4c:	84 83       	std	Z+4, r24	; 0x04
    4b4e:	95 83       	std	Z+5, r25	; 0x05
    4b50:	a6 83       	std	Z+6, r26	; 0x06
    4b52:	b7 83       	std	Z+7, r27	; 0x07
    4b54:	00 00       	nop
    4b56:	0f 90       	pop	r0
    4b58:	0f 90       	pop	r0
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	08 95       	ret

00004b60 <_ZN7TwoWireC1Ev>:
    4b60:	cf 93       	push	r28
    4b62:	df 93       	push	r29
    4b64:	1f 92       	push	r1
    4b66:	1f 92       	push	r1
    4b68:	cd b7       	in	r28, 0x3d	; 61
    4b6a:	de b7       	in	r29, 0x3e	; 62
    4b6c:	9a 83       	std	Y+2, r25	; 0x02
    4b6e:	89 83       	std	Y+1, r24	; 0x01
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	9a 81       	ldd	r25, Y+2	; 0x02
    4b74:	d2 df       	rcall	.-92     	; 0x4b1a <_ZN6StreamC1Ev>
    4b76:	29 ee       	ldi	r18, 0xE9	; 233
    4b78:	32 e0       	ldi	r19, 0x02	; 2
    4b7a:	89 81       	ldd	r24, Y+1	; 0x01
    4b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7e:	fc 01       	movw	r30, r24
    4b80:	31 83       	std	Z+1, r19	; 0x01
    4b82:	20 83       	st	Z, r18
    4b84:	00 00       	nop
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	08 95       	ret

00004b90 <_ZN7TwoWire5beginEv>:
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	1f 92       	push	r1
    4b96:	1f 92       	push	r1
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	9a 83       	std	Y+2, r25	; 0x02
    4b9e:	89 83       	std	Y+1, r24	; 0x01
    4ba0:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4ba4:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    4ba8:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4bac:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    4bb0:	b2 db       	rcall	.-2204   	; 0x4316 <twi_init>
    4bb2:	87 e4       	ldi	r24, 0x47	; 71
    4bb4:	98 e2       	ldi	r25, 0x28	; 40
    4bb6:	07 dc       	rcall	.-2034   	; 0x43c6 <twi_attachSlaveTxEvent>
    4bb8:	8a ef       	ldi	r24, 0xFA	; 250
    4bba:	97 e2       	ldi	r25, 0x27	; 39
    4bbc:	ff db       	rcall	.-2050   	; 0x43bc <twi_attachSlaveRxEvent>
    4bbe:	00 00       	nop
    4bc0:	0f 90       	pop	r0
    4bc2:	0f 90       	pop	r0
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	08 95       	ret

00004bca <_ZN7TwoWire11requestFromEhhmhh>:
    4bca:	cf 92       	push	r12
    4bcc:	ef 92       	push	r14
    4bce:	0f 93       	push	r16
    4bd0:	1f 93       	push	r17
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	cd b7       	in	r28, 0x3d	; 61
    4bd8:	de b7       	in	r29, 0x3e	; 62
    4bda:	2b 97       	sbiw	r28, 0x0b	; 11
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	9b 83       	std	Y+3, r25	; 0x03
    4be8:	8a 83       	std	Y+2, r24	; 0x02
    4bea:	6c 83       	std	Y+4, r22	; 0x04
    4bec:	4d 83       	std	Y+5, r20	; 0x05
    4bee:	0e 83       	std	Y+6, r16	; 0x06
    4bf0:	1f 83       	std	Y+7, r17	; 0x07
    4bf2:	28 87       	std	Y+8, r18	; 0x08
    4bf4:	39 87       	std	Y+9, r19	; 0x09
    4bf6:	ea 86       	std	Y+10, r14	; 0x0a
    4bf8:	cb 86       	std	Y+11, r12	; 0x0b
    4bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bfc:	88 23       	and	r24, r24
    4bfe:	d9 f1       	breq	.+118    	; 0x4c76 <_ZN7TwoWire11requestFromEhhmhh+0xac>
    4c00:	8a 81       	ldd	r24, Y+2	; 0x02
    4c02:	9b 81       	ldd	r25, Y+3	; 0x03
    4c04:	6c 81       	ldd	r22, Y+4	; 0x04
    4c06:	98 d0       	rcall	.+304    	; 0x4d38 <_ZN7TwoWire17beginTransmissionEh>
    4c08:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c0a:	84 30       	cpi	r24, 0x04	; 4
    4c0c:	10 f0       	brcs	.+4      	; 0x4c12 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4c0e:	83 e0       	ldi	r24, 0x03	; 3
    4c10:	8a 87       	std	Y+10, r24	; 0x0a
    4c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c14:	9f ef       	ldi	r25, 0xFF	; 255
    4c16:	98 0f       	add	r25, r24
    4c18:	9a 87       	std	Y+10, r25	; 0x0a
    4c1a:	91 e0       	ldi	r25, 0x01	; 1
    4c1c:	88 23       	and	r24, r24
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	99 23       	and	r25, r25
    4c24:	21 f1       	breq	.+72     	; 0x4c6e <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    4c26:	8a 81       	ldd	r24, Y+2	; 0x02
    4c28:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	80 81       	ld	r24, Z
    4c2e:	91 81       	ldd	r25, Z+1	; 0x01
    4c30:	fc 01       	movw	r30, r24
    4c32:	20 81       	ld	r18, Z
    4c34:	31 81       	ldd	r19, Z+1	; 0x01
    4c36:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c38:	88 2f       	mov	r24, r24
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	ac 01       	movw	r20, r24
    4c3e:	44 0f       	add	r20, r20
    4c40:	55 1f       	adc	r21, r21
    4c42:	44 0f       	add	r20, r20
    4c44:	55 1f       	adc	r21, r21
    4c46:	44 0f       	add	r20, r20
    4c48:	55 1f       	adc	r21, r21
    4c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c4e:	a8 85       	ldd	r26, Y+8	; 0x08
    4c50:	b9 85       	ldd	r27, Y+9	; 0x09
    4c52:	04 c0       	rjmp	.+8      	; 0x4c5c <_ZN7TwoWire11requestFromEhhmhh+0x92>
    4c54:	b6 95       	lsr	r27
    4c56:	a7 95       	ror	r26
    4c58:	97 95       	ror	r25
    4c5a:	87 95       	ror	r24
    4c5c:	4a 95       	dec	r20
    4c5e:	d2 f7       	brpl	.-12     	; 0x4c54 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    4c60:	48 2f       	mov	r20, r24
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	9b 81       	ldd	r25, Y+3	; 0x03
    4c66:	64 2f       	mov	r22, r20
    4c68:	f9 01       	movw	r30, r18
    4c6a:	19 95       	eicall
    4c6c:	d2 cf       	rjmp	.-92     	; 0x4c12 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c70:	9b 81       	ldd	r25, Y+3	; 0x03
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	91 d0       	rcall	.+290    	; 0x4d98 <_ZN7TwoWire15endTransmissionEh>
    4c76:	8d 81       	ldd	r24, Y+5	; 0x05
    4c78:	81 32       	cpi	r24, 0x21	; 33
    4c7a:	10 f0       	brcs	.+4      	; 0x4c80 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    4c7c:	80 e2       	ldi	r24, 0x20	; 32
    4c7e:	8d 83       	std	Y+5, r24	; 0x05
    4c80:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c82:	4d 81       	ldd	r20, Y+5	; 0x05
    4c84:	60 e9       	ldi	r22, 0x90	; 144
    4c86:	74 e0       	ldi	r23, 0x04	; 4
    4c88:	8c 81       	ldd	r24, Y+4	; 0x04
    4c8a:	bc db       	rcall	.-2184   	; 0x4404 <twi_readFrom>
    4c8c:	89 83       	std	Y+1, r24	; 0x01
    4c8e:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4c92:	89 81       	ldd	r24, Y+1	; 0x01
    4c94:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    4c98:	89 81       	ldd	r24, Y+1	; 0x01
    4c9a:	2b 96       	adiw	r28, 0x0b	; 11
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	1f 91       	pop	r17
    4cac:	0f 91       	pop	r16
    4cae:	ef 90       	pop	r14
    4cb0:	cf 90       	pop	r12
    4cb2:	08 95       	ret

00004cb4 <_ZN7TwoWire11requestFromEhhh>:
    4cb4:	cf 92       	push	r12
    4cb6:	ef 92       	push	r14
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	00 d0       	rcall	.+0      	; 0x4cc2 <_ZN7TwoWire11requestFromEhhh+0xe>
    4cc2:	1f 92       	push	r1
    4cc4:	1f 92       	push	r1
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	9a 83       	std	Y+2, r25	; 0x02
    4ccc:	89 83       	std	Y+1, r24	; 0x01
    4cce:	6b 83       	std	Y+3, r22	; 0x03
    4cd0:	4c 83       	std	Y+4, r20	; 0x04
    4cd2:	2d 83       	std	Y+5, r18	; 0x05
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd8:	cd 80       	ldd	r12, Y+5	; 0x05
    4cda:	e1 2c       	mov	r14, r1
    4cdc:	00 e0       	ldi	r16, 0x00	; 0
    4cde:	10 e0       	ldi	r17, 0x00	; 0
    4ce0:	98 01       	movw	r18, r16
    4ce2:	4c 81       	ldd	r20, Y+4	; 0x04
    4ce4:	6b 81       	ldd	r22, Y+3	; 0x03
    4ce6:	71 df       	rcall	.-286    	; 0x4bca <_ZN7TwoWire11requestFromEhhmhh>
    4ce8:	0f 90       	pop	r0
    4cea:	0f 90       	pop	r0
    4cec:	0f 90       	pop	r0
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	1f 91       	pop	r17
    4cf8:	0f 91       	pop	r16
    4cfa:	ef 90       	pop	r14
    4cfc:	cf 90       	pop	r12
    4cfe:	08 95       	ret

00004d00 <_ZN7TwoWire11requestFromEii>:
    4d00:	cf 93       	push	r28
    4d02:	df 93       	push	r29
    4d04:	00 d0       	rcall	.+0      	; 0x4d06 <_ZN7TwoWire11requestFromEii+0x6>
    4d06:	00 d0       	rcall	.+0      	; 0x4d08 <_ZN7TwoWire11requestFromEii+0x8>
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
    4d0c:	9a 83       	std	Y+2, r25	; 0x02
    4d0e:	89 83       	std	Y+1, r24	; 0x01
    4d10:	7c 83       	std	Y+4, r23	; 0x04
    4d12:	6b 83       	std	Y+3, r22	; 0x03
    4d14:	5e 83       	std	Y+6, r21	; 0x06
    4d16:	4d 83       	std	Y+5, r20	; 0x05
    4d18:	4d 81       	ldd	r20, Y+5	; 0x05
    4d1a:	3b 81       	ldd	r19, Y+3	; 0x03
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d20:	21 e0       	ldi	r18, 0x01	; 1
    4d22:	63 2f       	mov	r22, r19
    4d24:	c7 df       	rcall	.-114    	; 0x4cb4 <_ZN7TwoWire11requestFromEhhh>
    4d26:	26 96       	adiw	r28, 0x06	; 6
    4d28:	0f b6       	in	r0, 0x3f	; 63
    4d2a:	f8 94       	cli
    4d2c:	de bf       	out	0x3e, r29	; 62
    4d2e:	0f be       	out	0x3f, r0	; 63
    4d30:	cd bf       	out	0x3d, r28	; 61
    4d32:	df 91       	pop	r29
    4d34:	cf 91       	pop	r28
    4d36:	08 95       	ret

00004d38 <_ZN7TwoWire17beginTransmissionEh>:
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <_ZN7TwoWire17beginTransmissionEh+0x6>
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	9a 83       	std	Y+2, r25	; 0x02
    4d44:	89 83       	std	Y+1, r24	; 0x01
    4d46:	6b 83       	std	Y+3, r22	; 0x03
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZN7TwoWire12transmittingE>
    4d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d50:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <_ZN7TwoWire9txAddressE>
    4d54:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4d58:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    4d5c:	00 00       	nop
    4d5e:	0f 90       	pop	r0
    4d60:	0f 90       	pop	r0
    4d62:	0f 90       	pop	r0
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	08 95       	ret

00004d6a <_ZN7TwoWire17beginTransmissionEi>:
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	00 d0       	rcall	.+0      	; 0x4d70 <_ZN7TwoWire17beginTransmissionEi+0x6>
    4d70:	1f 92       	push	r1
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	9a 83       	std	Y+2, r25	; 0x02
    4d78:	89 83       	std	Y+1, r24	; 0x01
    4d7a:	7c 83       	std	Y+4, r23	; 0x04
    4d7c:	6b 83       	std	Y+3, r22	; 0x03
    4d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    4d80:	89 81       	ldd	r24, Y+1	; 0x01
    4d82:	9a 81       	ldd	r25, Y+2	; 0x02
    4d84:	62 2f       	mov	r22, r18
    4d86:	d8 df       	rcall	.-80     	; 0x4d38 <_ZN7TwoWire17beginTransmissionEh>
    4d88:	00 00       	nop
    4d8a:	0f 90       	pop	r0
    4d8c:	0f 90       	pop	r0
    4d8e:	0f 90       	pop	r0
    4d90:	0f 90       	pop	r0
    4d92:	df 91       	pop	r29
    4d94:	cf 91       	pop	r28
    4d96:	08 95       	ret

00004d98 <_ZN7TwoWire15endTransmissionEh>:
    4d98:	0f 93       	push	r16
    4d9a:	cf 93       	push	r28
    4d9c:	df 93       	push	r29
    4d9e:	00 d0       	rcall	.+0      	; 0x4da0 <_ZN7TwoWire15endTransmissionEh+0x8>
    4da0:	1f 92       	push	r1
    4da2:	cd b7       	in	r28, 0x3d	; 61
    4da4:	de b7       	in	r29, 0x3e	; 62
    4da6:	9b 83       	std	Y+3, r25	; 0x03
    4da8:	8a 83       	std	Y+2, r24	; 0x02
    4daa:	6c 83       	std	Y+4, r22	; 0x04
    4dac:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    4db0:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZN7TwoWire9txAddressE>
    4db4:	0c 81       	ldd	r16, Y+4	; 0x04
    4db6:	21 e0       	ldi	r18, 0x01	; 1
    4db8:	49 2f       	mov	r20, r25
    4dba:	63 eb       	ldi	r22, 0xB3	; 179
    4dbc:	74 e0       	ldi	r23, 0x04	; 4
    4dbe:	09 dc       	rcall	.-2030   	; 0x45d2 <twi_writeTo>
    4dc0:	89 83       	std	Y+1, r24	; 0x01
    4dc2:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4dc6:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    4dca:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZN7TwoWire12transmittingE>
    4dce:	89 81       	ldd	r24, Y+1	; 0x01
    4dd0:	0f 90       	pop	r0
    4dd2:	0f 90       	pop	r0
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	0f 91       	pop	r16
    4dde:	08 95       	ret

00004de0 <_ZN7TwoWire15endTransmissionEv>:
    4de0:	cf 93       	push	r28
    4de2:	df 93       	push	r29
    4de4:	1f 92       	push	r1
    4de6:	1f 92       	push	r1
    4de8:	cd b7       	in	r28, 0x3d	; 61
    4dea:	de b7       	in	r29, 0x3e	; 62
    4dec:	9a 83       	std	Y+2, r25	; 0x02
    4dee:	89 83       	std	Y+1, r24	; 0x01
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	9a 81       	ldd	r25, Y+2	; 0x02
    4df4:	61 e0       	ldi	r22, 0x01	; 1
    4df6:	d0 df       	rcall	.-96     	; 0x4d98 <_ZN7TwoWire15endTransmissionEh>
    4df8:	0f 90       	pop	r0
    4dfa:	0f 90       	pop	r0
    4dfc:	df 91       	pop	r29
    4dfe:	cf 91       	pop	r28
    4e00:	08 95       	ret

00004e02 <_ZN7TwoWire5writeEh>:
    4e02:	cf 93       	push	r28
    4e04:	df 93       	push	r29
    4e06:	00 d0       	rcall	.+0      	; 0x4e08 <_ZN7TwoWire5writeEh+0x6>
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	9a 83       	std	Y+2, r25	; 0x02
    4e0e:	89 83       	std	Y+1, r24	; 0x01
    4e10:	6b 83       	std	Y+3, r22	; 0x03
    4e12:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <_ZN7TwoWire12transmittingE>
    4e16:	88 23       	and	r24, r24
    4e18:	f9 f0       	breq	.+62     	; 0x4e58 <_ZN7TwoWire5writeEh+0x56>
    4e1a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    4e1e:	80 32       	cpi	r24, 0x20	; 32
    4e20:	40 f0       	brcs	.+16     	; 0x4e32 <_ZN7TwoWire5writeEh+0x30>
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
    4e24:	9a 81       	ldd	r25, Y+2	; 0x02
    4e26:	61 e0       	ldi	r22, 0x01	; 1
    4e28:	70 e0       	ldi	r23, 0x00	; 0
    4e2a:	27 de       	rcall	.-946    	; 0x4a7a <_ZN5Print13setWriteErrorEi>
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	19 c0       	rjmp	.+50     	; 0x4e64 <_ZN7TwoWire5writeEh+0x62>
    4e32:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4e36:	88 2f       	mov	r24, r24
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	2b 81       	ldd	r18, Y+3	; 0x03
    4e3c:	8d 54       	subi	r24, 0x4D	; 77
    4e3e:	9b 4f       	sbci	r25, 0xFB	; 251
    4e40:	fc 01       	movw	r30, r24
    4e42:	20 83       	st	Z, r18
    4e44:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4e48:	8f 5f       	subi	r24, 0xFF	; 255
    4e4a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4e4e:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    4e52:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <_ZN7TwoWire5writeEh+0x5e>
    4e58:	ce 01       	movw	r24, r28
    4e5a:	03 96       	adiw	r24, 0x03	; 3
    4e5c:	61 e0       	ldi	r22, 0x01	; 1
    4e5e:	86 da       	rcall	.-2804   	; 0x436c <twi_transmit>
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0f 90       	pop	r0
    4e66:	0f 90       	pop	r0
    4e68:	0f 90       	pop	r0
    4e6a:	df 91       	pop	r29
    4e6c:	cf 91       	pop	r28
    4e6e:	08 95       	ret

00004e70 <_ZN7TwoWire5writeEPKhj>:
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
    4e78:	28 97       	sbiw	r28, 0x08	; 8
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
    4e84:	9c 83       	std	Y+4, r25	; 0x04
    4e86:	8b 83       	std	Y+3, r24	; 0x03
    4e88:	7e 83       	std	Y+6, r23	; 0x06
    4e8a:	6d 83       	std	Y+5, r22	; 0x05
    4e8c:	58 87       	std	Y+8, r21	; 0x08
    4e8e:	4f 83       	std	Y+7, r20	; 0x07
    4e90:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <_ZN7TwoWire12transmittingE>
    4e94:	88 23       	and	r24, r24
    4e96:	21 f1       	breq	.+72     	; 0x4ee0 <_ZN7TwoWire5writeEPKhj+0x70>
    4e98:	1a 82       	std	Y+2, r1	; 0x02
    4e9a:	19 82       	std	Y+1, r1	; 0x01
    4e9c:	29 81       	ldd	r18, Y+1	; 0x01
    4e9e:	3a 81       	ldd	r19, Y+2	; 0x02
    4ea0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ea2:	98 85       	ldd	r25, Y+8	; 0x08
    4ea4:	28 17       	cp	r18, r24
    4ea6:	39 07       	cpc	r19, r25
    4ea8:	00 f5       	brcc	.+64     	; 0x4eea <_ZN7TwoWire5writeEPKhj+0x7a>
    4eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    4eac:	9c 81       	ldd	r25, Y+4	; 0x04
    4eae:	fc 01       	movw	r30, r24
    4eb0:	80 81       	ld	r24, Z
    4eb2:	91 81       	ldd	r25, Z+1	; 0x01
    4eb4:	fc 01       	movw	r30, r24
    4eb6:	20 81       	ld	r18, Z
    4eb8:	31 81       	ldd	r19, Z+1	; 0x01
    4eba:	4d 81       	ldd	r20, Y+5	; 0x05
    4ebc:	5e 81       	ldd	r21, Y+6	; 0x06
    4ebe:	89 81       	ldd	r24, Y+1	; 0x01
    4ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec2:	84 0f       	add	r24, r20
    4ec4:	95 1f       	adc	r25, r21
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	40 81       	ld	r20, Z
    4eca:	8b 81       	ldd	r24, Y+3	; 0x03
    4ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ece:	64 2f       	mov	r22, r20
    4ed0:	f9 01       	movw	r30, r18
    4ed2:	19 95       	eicall
    4ed4:	89 81       	ldd	r24, Y+1	; 0x01
    4ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed8:	01 96       	adiw	r24, 0x01	; 1
    4eda:	9a 83       	std	Y+2, r25	; 0x02
    4edc:	89 83       	std	Y+1, r24	; 0x01
    4ede:	de cf       	rjmp	.-68     	; 0x4e9c <_ZN7TwoWire5writeEPKhj+0x2c>
    4ee0:	2f 81       	ldd	r18, Y+7	; 0x07
    4ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee6:	62 2f       	mov	r22, r18
    4ee8:	41 da       	rcall	.-2942   	; 0x436c <twi_transmit>
    4eea:	8f 81       	ldd	r24, Y+7	; 0x07
    4eec:	98 85       	ldd	r25, Y+8	; 0x08
    4eee:	28 96       	adiw	r28, 0x08	; 8
    4ef0:	0f b6       	in	r0, 0x3f	; 63
    4ef2:	f8 94       	cli
    4ef4:	de bf       	out	0x3e, r29	; 62
    4ef6:	0f be       	out	0x3f, r0	; 63
    4ef8:	cd bf       	out	0x3d, r28	; 61
    4efa:	df 91       	pop	r29
    4efc:	cf 91       	pop	r28
    4efe:	08 95       	ret

00004f00 <_ZN7TwoWire9availableEv>:
    4f00:	cf 93       	push	r28
    4f02:	df 93       	push	r29
    4f04:	1f 92       	push	r1
    4f06:	1f 92       	push	r1
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	9a 83       	std	Y+2, r25	; 0x02
    4f0e:	89 83       	std	Y+1, r24	; 0x01
    4f10:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    4f14:	28 2f       	mov	r18, r24
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4f1c:	88 2f       	mov	r24, r24
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	a9 01       	movw	r20, r18
    4f22:	48 1b       	sub	r20, r24
    4f24:	59 0b       	sbc	r21, r25
    4f26:	ca 01       	movw	r24, r20
    4f28:	0f 90       	pop	r0
    4f2a:	0f 90       	pop	r0
    4f2c:	df 91       	pop	r29
    4f2e:	cf 91       	pop	r28
    4f30:	08 95       	ret

00004f32 <_ZN7TwoWire4readEv>:
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	00 d0       	rcall	.+0      	; 0x4f38 <_ZN7TwoWire4readEv+0x6>
    4f38:	1f 92       	push	r1
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	9c 83       	std	Y+4, r25	; 0x04
    4f40:	8b 83       	std	Y+3, r24	; 0x03
    4f42:	8f ef       	ldi	r24, 0xFF	; 255
    4f44:	9f ef       	ldi	r25, 0xFF	; 255
    4f46:	9a 83       	std	Y+2, r25	; 0x02
    4f48:	89 83       	std	Y+1, r24	; 0x01
    4f4a:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4f4e:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    4f52:	98 17       	cp	r25, r24
    4f54:	88 f4       	brcc	.+34     	; 0x4f78 <_ZN7TwoWire4readEv+0x46>
    4f56:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4f5a:	88 2f       	mov	r24, r24
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	80 57       	subi	r24, 0x70	; 112
    4f60:	9b 4f       	sbci	r25, 0xFB	; 251
    4f62:	fc 01       	movw	r30, r24
    4f64:	80 81       	ld	r24, Z
    4f66:	88 2f       	mov	r24, r24
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	9a 83       	std	Y+2, r25	; 0x02
    4f6c:	89 83       	std	Y+1, r24	; 0x01
    4f6e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4f72:	8f 5f       	subi	r24, 0xFF	; 255
    4f74:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4f78:	89 81       	ldd	r24, Y+1	; 0x01
    4f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7c:	0f 90       	pop	r0
    4f7e:	0f 90       	pop	r0
    4f80:	0f 90       	pop	r0
    4f82:	0f 90       	pop	r0
    4f84:	df 91       	pop	r29
    4f86:	cf 91       	pop	r28
    4f88:	08 95       	ret

00004f8a <_ZN7TwoWire4peekEv>:
    4f8a:	cf 93       	push	r28
    4f8c:	df 93       	push	r29
    4f8e:	00 d0       	rcall	.+0      	; 0x4f90 <_ZN7TwoWire4peekEv+0x6>
    4f90:	1f 92       	push	r1
    4f92:	cd b7       	in	r28, 0x3d	; 61
    4f94:	de b7       	in	r29, 0x3e	; 62
    4f96:	9c 83       	std	Y+4, r25	; 0x04
    4f98:	8b 83       	std	Y+3, r24	; 0x03
    4f9a:	8f ef       	ldi	r24, 0xFF	; 255
    4f9c:	9f ef       	ldi	r25, 0xFF	; 255
    4f9e:	9a 83       	std	Y+2, r25	; 0x02
    4fa0:	89 83       	std	Y+1, r24	; 0x01
    4fa2:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4fa6:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    4faa:	98 17       	cp	r25, r24
    4fac:	60 f4       	brcc	.+24     	; 0x4fc6 <_ZN7TwoWire4peekEv+0x3c>
    4fae:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    4fb2:	88 2f       	mov	r24, r24
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	80 57       	subi	r24, 0x70	; 112
    4fb8:	9b 4f       	sbci	r25, 0xFB	; 251
    4fba:	fc 01       	movw	r30, r24
    4fbc:	80 81       	ld	r24, Z
    4fbe:	88 2f       	mov	r24, r24
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	9a 83       	std	Y+2, r25	; 0x02
    4fc4:	89 83       	std	Y+1, r24	; 0x01
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
    4fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fca:	0f 90       	pop	r0
    4fcc:	0f 90       	pop	r0
    4fce:	0f 90       	pop	r0
    4fd0:	0f 90       	pop	r0
    4fd2:	df 91       	pop	r29
    4fd4:	cf 91       	pop	r28
    4fd6:	08 95       	ret

00004fd8 <_ZN7TwoWire5flushEv>:
    4fd8:	cf 93       	push	r28
    4fda:	df 93       	push	r29
    4fdc:	1f 92       	push	r1
    4fde:	1f 92       	push	r1
    4fe0:	cd b7       	in	r28, 0x3d	; 61
    4fe2:	de b7       	in	r29, 0x3e	; 62
    4fe4:	9a 83       	std	Y+2, r25	; 0x02
    4fe6:	89 83       	std	Y+1, r24	; 0x01
    4fe8:	00 00       	nop
    4fea:	0f 90       	pop	r0
    4fec:	0f 90       	pop	r0
    4fee:	df 91       	pop	r29
    4ff0:	cf 91       	pop	r28
    4ff2:	08 95       	ret

00004ff4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	00 d0       	rcall	.+0      	; 0x4ffa <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    4ffa:	1f 92       	push	r1
    4ffc:	1f 92       	push	r1
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
    5002:	9b 83       	std	Y+3, r25	; 0x03
    5004:	8a 83       	std	Y+2, r24	; 0x02
    5006:	7d 83       	std	Y+5, r23	; 0x05
    5008:	6c 83       	std	Y+4, r22	; 0x04
    500a:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_ZN7TwoWire14user_onReceiveE>
    500e:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <_ZN7TwoWire14user_onReceiveE+0x1>
    5012:	89 2b       	or	r24, r25
    5014:	89 f1       	breq	.+98     	; 0x5078 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    5016:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    501a:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    501e:	98 17       	cp	r25, r24
    5020:	68 f1       	brcs	.+90     	; 0x507c <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    5022:	19 82       	std	Y+1, r1	; 0x01
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	28 2f       	mov	r18, r24
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	8c 81       	ldd	r24, Y+4	; 0x04
    502c:	9d 81       	ldd	r25, Y+5	; 0x05
    502e:	28 17       	cp	r18, r24
    5030:	39 07       	cpc	r19, r25
    5032:	a4 f4       	brge	.+40     	; 0x505c <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    5034:	89 81       	ldd	r24, Y+1	; 0x01
    5036:	88 2f       	mov	r24, r24
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	29 81       	ldd	r18, Y+1	; 0x01
    503c:	22 2f       	mov	r18, r18
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	4a 81       	ldd	r20, Y+2	; 0x02
    5042:	5b 81       	ldd	r21, Y+3	; 0x03
    5044:	24 0f       	add	r18, r20
    5046:	35 1f       	adc	r19, r21
    5048:	f9 01       	movw	r30, r18
    504a:	20 81       	ld	r18, Z
    504c:	80 57       	subi	r24, 0x70	; 112
    504e:	9b 4f       	sbci	r25, 0xFB	; 251
    5050:	fc 01       	movw	r30, r24
    5052:	20 83       	st	Z, r18
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	8f 5f       	subi	r24, 0xFF	; 255
    5058:	89 83       	std	Y+1, r24	; 0x01
    505a:	e4 cf       	rjmp	.-56     	; 0x5024 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    505c:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <_ZN7TwoWire13rxBufferIndexE>
    5060:	8c 81       	ldd	r24, Y+4	; 0x04
    5062:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZN7TwoWire14rxBufferLengthE>
    5066:	20 91 d8 04 	lds	r18, 0x04D8	; 0x8004d8 <_ZN7TwoWire14user_onReceiveE>
    506a:	30 91 d9 04 	lds	r19, 0x04D9	; 0x8004d9 <_ZN7TwoWire14user_onReceiveE+0x1>
    506e:	8c 81       	ldd	r24, Y+4	; 0x04
    5070:	9d 81       	ldd	r25, Y+5	; 0x05
    5072:	f9 01       	movw	r30, r18
    5074:	19 95       	eicall
    5076:	03 c0       	rjmp	.+6      	; 0x507e <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    5078:	00 00       	nop
    507a:	01 c0       	rjmp	.+2      	; 0x507e <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    507c:	00 00       	nop
    507e:	0f 90       	pop	r0
    5080:	0f 90       	pop	r0
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	08 95       	ret

0000508e <_ZN7TwoWire16onRequestServiceEv>:
    508e:	cf 93       	push	r28
    5090:	df 93       	push	r29
    5092:	cd b7       	in	r28, 0x3d	; 61
    5094:	de b7       	in	r29, 0x3e	; 62
    5096:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZN7TwoWire14user_onRequestE>
    509a:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <_ZN7TwoWire14user_onRequestE+0x1>
    509e:	89 2b       	or	r24, r25
    50a0:	59 f0       	breq	.+22     	; 0x50b8 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    50a2:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZN7TwoWire13txBufferIndexE>
    50a6:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire14txBufferLengthE>
    50aa:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZN7TwoWire14user_onRequestE>
    50ae:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <_ZN7TwoWire14user_onRequestE+0x1>
    50b2:	fc 01       	movw	r30, r24
    50b4:	19 95       	eicall
    50b6:	01 c0       	rjmp	.+2      	; 0x50ba <_ZN7TwoWire16onRequestServiceEv+0x2c>
    50b8:	00 00       	nop
    50ba:	df 91       	pop	r29
    50bc:	cf 91       	pop	r28
    50be:	08 95       	ret

000050c0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <_Z41__static_initialization_and_destruction_0ii+0x6>
    50c6:	1f 92       	push	r1
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
    50cc:	9a 83       	std	Y+2, r25	; 0x02
    50ce:	89 83       	std	Y+1, r24	; 0x01
    50d0:	7c 83       	std	Y+4, r23	; 0x04
    50d2:	6b 83       	std	Y+3, r22	; 0x03
    50d4:	89 81       	ldd	r24, Y+1	; 0x01
    50d6:	9a 81       	ldd	r25, Y+2	; 0x02
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	39 f4       	brne	.+14     	; 0x50ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
    50dc:	8b 81       	ldd	r24, Y+3	; 0x03
    50de:	9c 81       	ldd	r25, Y+4	; 0x04
    50e0:	01 96       	adiw	r24, 0x01	; 1
    50e2:	19 f4       	brne	.+6      	; 0x50ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
    50e4:	8a ed       	ldi	r24, 0xDA	; 218
    50e6:	94 e0       	ldi	r25, 0x04	; 4
    50e8:	3b dd       	rcall	.-1418   	; 0x4b60 <_ZN7TwoWireC1Ev>
    50ea:	00 00       	nop
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	0f 90       	pop	r0
    50f4:	df 91       	pop	r29
    50f6:	cf 91       	pop	r28
    50f8:	08 95       	ret

000050fa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	cd b7       	in	r28, 0x3d	; 61
    5100:	de b7       	in	r29, 0x3e	; 62
    5102:	6f ef       	ldi	r22, 0xFF	; 255
    5104:	7f ef       	ldi	r23, 0xFF	; 255
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	da df       	rcall	.-76     	; 0x50c0 <_Z41__static_initialization_and_destruction_0ii>
    510c:	df 91       	pop	r29
    510e:	cf 91       	pop	r28
    5110:	08 95       	ret

00005112 <__subsf3>:
    5112:	50 58       	subi	r21, 0x80	; 128

00005114 <__addsf3>:
    5114:	bb 27       	eor	r27, r27
    5116:	aa 27       	eor	r26, r26
    5118:	0e d0       	rcall	.+28     	; 0x5136 <__addsf3x>
    511a:	09 c1       	rjmp	.+530    	; 0x532e <__fp_round>
    511c:	fa d0       	rcall	.+500    	; 0x5312 <__fp_pscA>
    511e:	30 f0       	brcs	.+12     	; 0x512c <__addsf3+0x18>
    5120:	ff d0       	rcall	.+510    	; 0x5320 <__fp_pscB>
    5122:	20 f0       	brcs	.+8      	; 0x512c <__addsf3+0x18>
    5124:	31 f4       	brne	.+12     	; 0x5132 <__addsf3+0x1e>
    5126:	9f 3f       	cpi	r25, 0xFF	; 255
    5128:	11 f4       	brne	.+4      	; 0x512e <__addsf3+0x1a>
    512a:	1e f4       	brtc	.+6      	; 0x5132 <__addsf3+0x1e>
    512c:	ef c0       	rjmp	.+478    	; 0x530c <__fp_nan>
    512e:	0e f4       	brtc	.+2      	; 0x5132 <__addsf3+0x1e>
    5130:	e0 95       	com	r30
    5132:	e7 fb       	bst	r30, 7
    5134:	e5 c0       	rjmp	.+458    	; 0x5300 <__fp_inf>

00005136 <__addsf3x>:
    5136:	e9 2f       	mov	r30, r25
    5138:	0b d1       	rcall	.+534    	; 0x5350 <__fp_split3>
    513a:	80 f3       	brcs	.-32     	; 0x511c <__addsf3+0x8>
    513c:	ba 17       	cp	r27, r26
    513e:	62 07       	cpc	r22, r18
    5140:	73 07       	cpc	r23, r19
    5142:	84 07       	cpc	r24, r20
    5144:	95 07       	cpc	r25, r21
    5146:	18 f0       	brcs	.+6      	; 0x514e <__addsf3x+0x18>
    5148:	71 f4       	brne	.+28     	; 0x5166 <__addsf3x+0x30>
    514a:	9e f5       	brtc	.+102    	; 0x51b2 <__addsf3x+0x7c>
    514c:	23 c1       	rjmp	.+582    	; 0x5394 <__fp_zero>
    514e:	0e f4       	brtc	.+2      	; 0x5152 <__addsf3x+0x1c>
    5150:	e0 95       	com	r30
    5152:	0b 2e       	mov	r0, r27
    5154:	ba 2f       	mov	r27, r26
    5156:	a0 2d       	mov	r26, r0
    5158:	0b 01       	movw	r0, r22
    515a:	b9 01       	movw	r22, r18
    515c:	90 01       	movw	r18, r0
    515e:	0c 01       	movw	r0, r24
    5160:	ca 01       	movw	r24, r20
    5162:	a0 01       	movw	r20, r0
    5164:	11 24       	eor	r1, r1
    5166:	ff 27       	eor	r31, r31
    5168:	59 1b       	sub	r21, r25
    516a:	99 f0       	breq	.+38     	; 0x5192 <__addsf3x+0x5c>
    516c:	59 3f       	cpi	r21, 0xF9	; 249
    516e:	50 f4       	brcc	.+20     	; 0x5184 <__addsf3x+0x4e>
    5170:	50 3e       	cpi	r21, 0xE0	; 224
    5172:	68 f1       	brcs	.+90     	; 0x51ce <__addsf3x+0x98>
    5174:	1a 16       	cp	r1, r26
    5176:	f0 40       	sbci	r31, 0x00	; 0
    5178:	a2 2f       	mov	r26, r18
    517a:	23 2f       	mov	r18, r19
    517c:	34 2f       	mov	r19, r20
    517e:	44 27       	eor	r20, r20
    5180:	58 5f       	subi	r21, 0xF8	; 248
    5182:	f3 cf       	rjmp	.-26     	; 0x516a <__addsf3x+0x34>
    5184:	46 95       	lsr	r20
    5186:	37 95       	ror	r19
    5188:	27 95       	ror	r18
    518a:	a7 95       	ror	r26
    518c:	f0 40       	sbci	r31, 0x00	; 0
    518e:	53 95       	inc	r21
    5190:	c9 f7       	brne	.-14     	; 0x5184 <__addsf3x+0x4e>
    5192:	7e f4       	brtc	.+30     	; 0x51b2 <__addsf3x+0x7c>
    5194:	1f 16       	cp	r1, r31
    5196:	ba 0b       	sbc	r27, r26
    5198:	62 0b       	sbc	r22, r18
    519a:	73 0b       	sbc	r23, r19
    519c:	84 0b       	sbc	r24, r20
    519e:	ba f0       	brmi	.+46     	; 0x51ce <__addsf3x+0x98>
    51a0:	91 50       	subi	r25, 0x01	; 1
    51a2:	a1 f0       	breq	.+40     	; 0x51cc <__addsf3x+0x96>
    51a4:	ff 0f       	add	r31, r31
    51a6:	bb 1f       	adc	r27, r27
    51a8:	66 1f       	adc	r22, r22
    51aa:	77 1f       	adc	r23, r23
    51ac:	88 1f       	adc	r24, r24
    51ae:	c2 f7       	brpl	.-16     	; 0x51a0 <__addsf3x+0x6a>
    51b0:	0e c0       	rjmp	.+28     	; 0x51ce <__addsf3x+0x98>
    51b2:	ba 0f       	add	r27, r26
    51b4:	62 1f       	adc	r22, r18
    51b6:	73 1f       	adc	r23, r19
    51b8:	84 1f       	adc	r24, r20
    51ba:	48 f4       	brcc	.+18     	; 0x51ce <__addsf3x+0x98>
    51bc:	87 95       	ror	r24
    51be:	77 95       	ror	r23
    51c0:	67 95       	ror	r22
    51c2:	b7 95       	ror	r27
    51c4:	f7 95       	ror	r31
    51c6:	9e 3f       	cpi	r25, 0xFE	; 254
    51c8:	08 f0       	brcs	.+2      	; 0x51cc <__addsf3x+0x96>
    51ca:	b3 cf       	rjmp	.-154    	; 0x5132 <__addsf3+0x1e>
    51cc:	93 95       	inc	r25
    51ce:	88 0f       	add	r24, r24
    51d0:	08 f0       	brcs	.+2      	; 0x51d4 <__addsf3x+0x9e>
    51d2:	99 27       	eor	r25, r25
    51d4:	ee 0f       	add	r30, r30
    51d6:	97 95       	ror	r25
    51d8:	87 95       	ror	r24
    51da:	08 95       	ret

000051dc <__fixsfsi>:
    51dc:	04 d0       	rcall	.+8      	; 0x51e6 <__fixunssfsi>
    51de:	68 94       	set
    51e0:	b1 11       	cpse	r27, r1
    51e2:	d9 c0       	rjmp	.+434    	; 0x5396 <__fp_szero>
    51e4:	08 95       	ret

000051e6 <__fixunssfsi>:
    51e6:	bc d0       	rcall	.+376    	; 0x5360 <__fp_splitA>
    51e8:	88 f0       	brcs	.+34     	; 0x520c <__fixunssfsi+0x26>
    51ea:	9f 57       	subi	r25, 0x7F	; 127
    51ec:	90 f0       	brcs	.+36     	; 0x5212 <__fixunssfsi+0x2c>
    51ee:	b9 2f       	mov	r27, r25
    51f0:	99 27       	eor	r25, r25
    51f2:	b7 51       	subi	r27, 0x17	; 23
    51f4:	a0 f0       	brcs	.+40     	; 0x521e <__fixunssfsi+0x38>
    51f6:	d1 f0       	breq	.+52     	; 0x522c <__fixunssfsi+0x46>
    51f8:	66 0f       	add	r22, r22
    51fa:	77 1f       	adc	r23, r23
    51fc:	88 1f       	adc	r24, r24
    51fe:	99 1f       	adc	r25, r25
    5200:	1a f0       	brmi	.+6      	; 0x5208 <__fixunssfsi+0x22>
    5202:	ba 95       	dec	r27
    5204:	c9 f7       	brne	.-14     	; 0x51f8 <__fixunssfsi+0x12>
    5206:	12 c0       	rjmp	.+36     	; 0x522c <__fixunssfsi+0x46>
    5208:	b1 30       	cpi	r27, 0x01	; 1
    520a:	81 f0       	breq	.+32     	; 0x522c <__fixunssfsi+0x46>
    520c:	c3 d0       	rcall	.+390    	; 0x5394 <__fp_zero>
    520e:	b1 e0       	ldi	r27, 0x01	; 1
    5210:	08 95       	ret
    5212:	c0 c0       	rjmp	.+384    	; 0x5394 <__fp_zero>
    5214:	67 2f       	mov	r22, r23
    5216:	78 2f       	mov	r23, r24
    5218:	88 27       	eor	r24, r24
    521a:	b8 5f       	subi	r27, 0xF8	; 248
    521c:	39 f0       	breq	.+14     	; 0x522c <__fixunssfsi+0x46>
    521e:	b9 3f       	cpi	r27, 0xF9	; 249
    5220:	cc f3       	brlt	.-14     	; 0x5214 <__fixunssfsi+0x2e>
    5222:	86 95       	lsr	r24
    5224:	77 95       	ror	r23
    5226:	67 95       	ror	r22
    5228:	b3 95       	inc	r27
    522a:	d9 f7       	brne	.-10     	; 0x5222 <__fixunssfsi+0x3c>
    522c:	3e f4       	brtc	.+14     	; 0x523c <__fixunssfsi+0x56>
    522e:	90 95       	com	r25
    5230:	80 95       	com	r24
    5232:	70 95       	com	r23
    5234:	61 95       	neg	r22
    5236:	7f 4f       	sbci	r23, 0xFF	; 255
    5238:	8f 4f       	sbci	r24, 0xFF	; 255
    523a:	9f 4f       	sbci	r25, 0xFF	; 255
    523c:	08 95       	ret

0000523e <__floatunsisf>:
    523e:	e8 94       	clt
    5240:	09 c0       	rjmp	.+18     	; 0x5254 <__floatsisf+0x12>

00005242 <__floatsisf>:
    5242:	97 fb       	bst	r25, 7
    5244:	3e f4       	brtc	.+14     	; 0x5254 <__floatsisf+0x12>
    5246:	90 95       	com	r25
    5248:	80 95       	com	r24
    524a:	70 95       	com	r23
    524c:	61 95       	neg	r22
    524e:	7f 4f       	sbci	r23, 0xFF	; 255
    5250:	8f 4f       	sbci	r24, 0xFF	; 255
    5252:	9f 4f       	sbci	r25, 0xFF	; 255
    5254:	99 23       	and	r25, r25
    5256:	a9 f0       	breq	.+42     	; 0x5282 <__floatsisf+0x40>
    5258:	f9 2f       	mov	r31, r25
    525a:	96 e9       	ldi	r25, 0x96	; 150
    525c:	bb 27       	eor	r27, r27
    525e:	93 95       	inc	r25
    5260:	f6 95       	lsr	r31
    5262:	87 95       	ror	r24
    5264:	77 95       	ror	r23
    5266:	67 95       	ror	r22
    5268:	b7 95       	ror	r27
    526a:	f1 11       	cpse	r31, r1
    526c:	f8 cf       	rjmp	.-16     	; 0x525e <__floatsisf+0x1c>
    526e:	fa f4       	brpl	.+62     	; 0x52ae <__floatsisf+0x6c>
    5270:	bb 0f       	add	r27, r27
    5272:	11 f4       	brne	.+4      	; 0x5278 <__floatsisf+0x36>
    5274:	60 ff       	sbrs	r22, 0
    5276:	1b c0       	rjmp	.+54     	; 0x52ae <__floatsisf+0x6c>
    5278:	6f 5f       	subi	r22, 0xFF	; 255
    527a:	7f 4f       	sbci	r23, 0xFF	; 255
    527c:	8f 4f       	sbci	r24, 0xFF	; 255
    527e:	9f 4f       	sbci	r25, 0xFF	; 255
    5280:	16 c0       	rjmp	.+44     	; 0x52ae <__floatsisf+0x6c>
    5282:	88 23       	and	r24, r24
    5284:	11 f0       	breq	.+4      	; 0x528a <__floatsisf+0x48>
    5286:	96 e9       	ldi	r25, 0x96	; 150
    5288:	11 c0       	rjmp	.+34     	; 0x52ac <__floatsisf+0x6a>
    528a:	77 23       	and	r23, r23
    528c:	21 f0       	breq	.+8      	; 0x5296 <__floatsisf+0x54>
    528e:	9e e8       	ldi	r25, 0x8E	; 142
    5290:	87 2f       	mov	r24, r23
    5292:	76 2f       	mov	r23, r22
    5294:	05 c0       	rjmp	.+10     	; 0x52a0 <__floatsisf+0x5e>
    5296:	66 23       	and	r22, r22
    5298:	71 f0       	breq	.+28     	; 0x52b6 <__floatsisf+0x74>
    529a:	96 e8       	ldi	r25, 0x86	; 134
    529c:	86 2f       	mov	r24, r22
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	60 e0       	ldi	r22, 0x00	; 0
    52a2:	2a f0       	brmi	.+10     	; 0x52ae <__floatsisf+0x6c>
    52a4:	9a 95       	dec	r25
    52a6:	66 0f       	add	r22, r22
    52a8:	77 1f       	adc	r23, r23
    52aa:	88 1f       	adc	r24, r24
    52ac:	da f7       	brpl	.-10     	; 0x52a4 <__floatsisf+0x62>
    52ae:	88 0f       	add	r24, r24
    52b0:	96 95       	lsr	r25
    52b2:	87 95       	ror	r24
    52b4:	97 f9       	bld	r25, 7
    52b6:	08 95       	ret

000052b8 <__fp_cmp>:
    52b8:	99 0f       	add	r25, r25
    52ba:	00 08       	sbc	r0, r0
    52bc:	55 0f       	add	r21, r21
    52be:	aa 0b       	sbc	r26, r26
    52c0:	e0 e8       	ldi	r30, 0x80	; 128
    52c2:	fe ef       	ldi	r31, 0xFE	; 254
    52c4:	16 16       	cp	r1, r22
    52c6:	17 06       	cpc	r1, r23
    52c8:	e8 07       	cpc	r30, r24
    52ca:	f9 07       	cpc	r31, r25
    52cc:	c0 f0       	brcs	.+48     	; 0x52fe <__fp_cmp+0x46>
    52ce:	12 16       	cp	r1, r18
    52d0:	13 06       	cpc	r1, r19
    52d2:	e4 07       	cpc	r30, r20
    52d4:	f5 07       	cpc	r31, r21
    52d6:	98 f0       	brcs	.+38     	; 0x52fe <__fp_cmp+0x46>
    52d8:	62 1b       	sub	r22, r18
    52da:	73 0b       	sbc	r23, r19
    52dc:	84 0b       	sbc	r24, r20
    52de:	95 0b       	sbc	r25, r21
    52e0:	39 f4       	brne	.+14     	; 0x52f0 <__fp_cmp+0x38>
    52e2:	0a 26       	eor	r0, r26
    52e4:	61 f0       	breq	.+24     	; 0x52fe <__fp_cmp+0x46>
    52e6:	23 2b       	or	r18, r19
    52e8:	24 2b       	or	r18, r20
    52ea:	25 2b       	or	r18, r21
    52ec:	21 f4       	brne	.+8      	; 0x52f6 <__fp_cmp+0x3e>
    52ee:	08 95       	ret
    52f0:	0a 26       	eor	r0, r26
    52f2:	09 f4       	brne	.+2      	; 0x52f6 <__fp_cmp+0x3e>
    52f4:	a1 40       	sbci	r26, 0x01	; 1
    52f6:	a6 95       	lsr	r26
    52f8:	8f ef       	ldi	r24, 0xFF	; 255
    52fa:	81 1d       	adc	r24, r1
    52fc:	81 1d       	adc	r24, r1
    52fe:	08 95       	ret

00005300 <__fp_inf>:
    5300:	97 f9       	bld	r25, 7
    5302:	9f 67       	ori	r25, 0x7F	; 127
    5304:	80 e8       	ldi	r24, 0x80	; 128
    5306:	70 e0       	ldi	r23, 0x00	; 0
    5308:	60 e0       	ldi	r22, 0x00	; 0
    530a:	08 95       	ret

0000530c <__fp_nan>:
    530c:	9f ef       	ldi	r25, 0xFF	; 255
    530e:	80 ec       	ldi	r24, 0xC0	; 192
    5310:	08 95       	ret

00005312 <__fp_pscA>:
    5312:	00 24       	eor	r0, r0
    5314:	0a 94       	dec	r0
    5316:	16 16       	cp	r1, r22
    5318:	17 06       	cpc	r1, r23
    531a:	18 06       	cpc	r1, r24
    531c:	09 06       	cpc	r0, r25
    531e:	08 95       	ret

00005320 <__fp_pscB>:
    5320:	00 24       	eor	r0, r0
    5322:	0a 94       	dec	r0
    5324:	12 16       	cp	r1, r18
    5326:	13 06       	cpc	r1, r19
    5328:	14 06       	cpc	r1, r20
    532a:	05 06       	cpc	r0, r21
    532c:	08 95       	ret

0000532e <__fp_round>:
    532e:	09 2e       	mov	r0, r25
    5330:	03 94       	inc	r0
    5332:	00 0c       	add	r0, r0
    5334:	11 f4       	brne	.+4      	; 0x533a <__fp_round+0xc>
    5336:	88 23       	and	r24, r24
    5338:	52 f0       	brmi	.+20     	; 0x534e <__fp_round+0x20>
    533a:	bb 0f       	add	r27, r27
    533c:	40 f4       	brcc	.+16     	; 0x534e <__fp_round+0x20>
    533e:	bf 2b       	or	r27, r31
    5340:	11 f4       	brne	.+4      	; 0x5346 <__fp_round+0x18>
    5342:	60 ff       	sbrs	r22, 0
    5344:	04 c0       	rjmp	.+8      	; 0x534e <__fp_round+0x20>
    5346:	6f 5f       	subi	r22, 0xFF	; 255
    5348:	7f 4f       	sbci	r23, 0xFF	; 255
    534a:	8f 4f       	sbci	r24, 0xFF	; 255
    534c:	9f 4f       	sbci	r25, 0xFF	; 255
    534e:	08 95       	ret

00005350 <__fp_split3>:
    5350:	57 fd       	sbrc	r21, 7
    5352:	90 58       	subi	r25, 0x80	; 128
    5354:	44 0f       	add	r20, r20
    5356:	55 1f       	adc	r21, r21
    5358:	59 f0       	breq	.+22     	; 0x5370 <__fp_splitA+0x10>
    535a:	5f 3f       	cpi	r21, 0xFF	; 255
    535c:	71 f0       	breq	.+28     	; 0x537a <__fp_splitA+0x1a>
    535e:	47 95       	ror	r20

00005360 <__fp_splitA>:
    5360:	88 0f       	add	r24, r24
    5362:	97 fb       	bst	r25, 7
    5364:	99 1f       	adc	r25, r25
    5366:	61 f0       	breq	.+24     	; 0x5380 <__fp_splitA+0x20>
    5368:	9f 3f       	cpi	r25, 0xFF	; 255
    536a:	79 f0       	breq	.+30     	; 0x538a <__fp_splitA+0x2a>
    536c:	87 95       	ror	r24
    536e:	08 95       	ret
    5370:	12 16       	cp	r1, r18
    5372:	13 06       	cpc	r1, r19
    5374:	14 06       	cpc	r1, r20
    5376:	55 1f       	adc	r21, r21
    5378:	f2 cf       	rjmp	.-28     	; 0x535e <__fp_split3+0xe>
    537a:	46 95       	lsr	r20
    537c:	f1 df       	rcall	.-30     	; 0x5360 <__fp_splitA>
    537e:	08 c0       	rjmp	.+16     	; 0x5390 <__fp_splitA+0x30>
    5380:	16 16       	cp	r1, r22
    5382:	17 06       	cpc	r1, r23
    5384:	18 06       	cpc	r1, r24
    5386:	99 1f       	adc	r25, r25
    5388:	f1 cf       	rjmp	.-30     	; 0x536c <__fp_splitA+0xc>
    538a:	86 95       	lsr	r24
    538c:	71 05       	cpc	r23, r1
    538e:	61 05       	cpc	r22, r1
    5390:	08 94       	sec
    5392:	08 95       	ret

00005394 <__fp_zero>:
    5394:	e8 94       	clt

00005396 <__fp_szero>:
    5396:	bb 27       	eor	r27, r27
    5398:	66 27       	eor	r22, r22
    539a:	77 27       	eor	r23, r23
    539c:	cb 01       	movw	r24, r22
    539e:	97 f9       	bld	r25, 7
    53a0:	08 95       	ret

000053a2 <__mulsf3>:
    53a2:	0b d0       	rcall	.+22     	; 0x53ba <__mulsf3x>
    53a4:	c4 cf       	rjmp	.-120    	; 0x532e <__fp_round>
    53a6:	b5 df       	rcall	.-150    	; 0x5312 <__fp_pscA>
    53a8:	28 f0       	brcs	.+10     	; 0x53b4 <__mulsf3+0x12>
    53aa:	ba df       	rcall	.-140    	; 0x5320 <__fp_pscB>
    53ac:	18 f0       	brcs	.+6      	; 0x53b4 <__mulsf3+0x12>
    53ae:	95 23       	and	r25, r21
    53b0:	09 f0       	breq	.+2      	; 0x53b4 <__mulsf3+0x12>
    53b2:	a6 cf       	rjmp	.-180    	; 0x5300 <__fp_inf>
    53b4:	ab cf       	rjmp	.-170    	; 0x530c <__fp_nan>
    53b6:	11 24       	eor	r1, r1
    53b8:	ee cf       	rjmp	.-36     	; 0x5396 <__fp_szero>

000053ba <__mulsf3x>:
    53ba:	ca df       	rcall	.-108    	; 0x5350 <__fp_split3>
    53bc:	a0 f3       	brcs	.-24     	; 0x53a6 <__mulsf3+0x4>

000053be <__mulsf3_pse>:
    53be:	95 9f       	mul	r25, r21
    53c0:	d1 f3       	breq	.-12     	; 0x53b6 <__mulsf3+0x14>
    53c2:	95 0f       	add	r25, r21
    53c4:	50 e0       	ldi	r21, 0x00	; 0
    53c6:	55 1f       	adc	r21, r21
    53c8:	62 9f       	mul	r22, r18
    53ca:	f0 01       	movw	r30, r0
    53cc:	72 9f       	mul	r23, r18
    53ce:	bb 27       	eor	r27, r27
    53d0:	f0 0d       	add	r31, r0
    53d2:	b1 1d       	adc	r27, r1
    53d4:	63 9f       	mul	r22, r19
    53d6:	aa 27       	eor	r26, r26
    53d8:	f0 0d       	add	r31, r0
    53da:	b1 1d       	adc	r27, r1
    53dc:	aa 1f       	adc	r26, r26
    53de:	64 9f       	mul	r22, r20
    53e0:	66 27       	eor	r22, r22
    53e2:	b0 0d       	add	r27, r0
    53e4:	a1 1d       	adc	r26, r1
    53e6:	66 1f       	adc	r22, r22
    53e8:	82 9f       	mul	r24, r18
    53ea:	22 27       	eor	r18, r18
    53ec:	b0 0d       	add	r27, r0
    53ee:	a1 1d       	adc	r26, r1
    53f0:	62 1f       	adc	r22, r18
    53f2:	73 9f       	mul	r23, r19
    53f4:	b0 0d       	add	r27, r0
    53f6:	a1 1d       	adc	r26, r1
    53f8:	62 1f       	adc	r22, r18
    53fa:	83 9f       	mul	r24, r19
    53fc:	a0 0d       	add	r26, r0
    53fe:	61 1d       	adc	r22, r1
    5400:	22 1f       	adc	r18, r18
    5402:	74 9f       	mul	r23, r20
    5404:	33 27       	eor	r19, r19
    5406:	a0 0d       	add	r26, r0
    5408:	61 1d       	adc	r22, r1
    540a:	23 1f       	adc	r18, r19
    540c:	84 9f       	mul	r24, r20
    540e:	60 0d       	add	r22, r0
    5410:	21 1d       	adc	r18, r1
    5412:	82 2f       	mov	r24, r18
    5414:	76 2f       	mov	r23, r22
    5416:	6a 2f       	mov	r22, r26
    5418:	11 24       	eor	r1, r1
    541a:	9f 57       	subi	r25, 0x7F	; 127
    541c:	50 40       	sbci	r21, 0x00	; 0
    541e:	8a f0       	brmi	.+34     	; 0x5442 <__mulsf3_pse+0x84>
    5420:	e1 f0       	breq	.+56     	; 0x545a <__mulsf3_pse+0x9c>
    5422:	88 23       	and	r24, r24
    5424:	4a f0       	brmi	.+18     	; 0x5438 <__mulsf3_pse+0x7a>
    5426:	ee 0f       	add	r30, r30
    5428:	ff 1f       	adc	r31, r31
    542a:	bb 1f       	adc	r27, r27
    542c:	66 1f       	adc	r22, r22
    542e:	77 1f       	adc	r23, r23
    5430:	88 1f       	adc	r24, r24
    5432:	91 50       	subi	r25, 0x01	; 1
    5434:	50 40       	sbci	r21, 0x00	; 0
    5436:	a9 f7       	brne	.-22     	; 0x5422 <__mulsf3_pse+0x64>
    5438:	9e 3f       	cpi	r25, 0xFE	; 254
    543a:	51 05       	cpc	r21, r1
    543c:	70 f0       	brcs	.+28     	; 0x545a <__mulsf3_pse+0x9c>
    543e:	60 cf       	rjmp	.-320    	; 0x5300 <__fp_inf>
    5440:	aa cf       	rjmp	.-172    	; 0x5396 <__fp_szero>
    5442:	5f 3f       	cpi	r21, 0xFF	; 255
    5444:	ec f3       	brlt	.-6      	; 0x5440 <__mulsf3_pse+0x82>
    5446:	98 3e       	cpi	r25, 0xE8	; 232
    5448:	dc f3       	brlt	.-10     	; 0x5440 <__mulsf3_pse+0x82>
    544a:	86 95       	lsr	r24
    544c:	77 95       	ror	r23
    544e:	67 95       	ror	r22
    5450:	b7 95       	ror	r27
    5452:	f7 95       	ror	r31
    5454:	e7 95       	ror	r30
    5456:	9f 5f       	subi	r25, 0xFF	; 255
    5458:	c1 f7       	brne	.-16     	; 0x544a <__mulsf3_pse+0x8c>
    545a:	fe 2b       	or	r31, r30
    545c:	88 0f       	add	r24, r24
    545e:	91 1d       	adc	r25, r1
    5460:	96 95       	lsr	r25
    5462:	87 95       	ror	r24
    5464:	97 f9       	bld	r25, 7
    5466:	08 95       	ret

00005468 <__unordsf2>:
    5468:	27 df       	rcall	.-434    	; 0x52b8 <__fp_cmp>
    546a:	88 0b       	sbc	r24, r24
    546c:	99 0b       	sbc	r25, r25
    546e:	08 95       	ret

00005470 <__cxa_pure_virtual>:
    5470:	0e 94 85 33 	call	0x670a	; 0x670a <abort>

00005474 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5474:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5476:	91 8d       	ldd	r25, Z+25	; 0x19
    5478:	22 8d       	ldd	r18, Z+26	; 0x1a
    547a:	89 2f       	mov	r24, r25
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	80 5c       	subi	r24, 0xC0	; 192
    5480:	9f 4f       	sbci	r25, 0xFF	; 255
    5482:	82 1b       	sub	r24, r18
    5484:	91 09       	sbc	r25, r1
}
    5486:	8f 73       	andi	r24, 0x3F	; 63
    5488:	99 27       	eor	r25, r25
    548a:	08 95       	ret

0000548c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    548c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    548e:	91 8d       	ldd	r25, Z+25	; 0x19
    5490:	82 8d       	ldd	r24, Z+26	; 0x1a
    5492:	98 17       	cp	r25, r24
    5494:	31 f0       	breq	.+12     	; 0x54a2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5496:	82 8d       	ldd	r24, Z+26	; 0x1a
    5498:	e8 0f       	add	r30, r24
    549a:	f1 1d       	adc	r31, r1
    549c:	85 8d       	ldd	r24, Z+29	; 0x1d
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    54a2:	8f ef       	ldi	r24, 0xFF	; 255
    54a4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    54a6:	08 95       	ret

000054a8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    54a8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    54aa:	91 8d       	ldd	r25, Z+25	; 0x19
    54ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    54ae:	98 17       	cp	r25, r24
    54b0:	61 f0       	breq	.+24     	; 0x54ca <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    54b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    54b4:	df 01       	movw	r26, r30
    54b6:	a8 0f       	add	r26, r24
    54b8:	b1 1d       	adc	r27, r1
    54ba:	5d 96       	adiw	r26, 0x1d	; 29
    54bc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    54be:	92 8d       	ldd	r25, Z+26	; 0x1a
    54c0:	9f 5f       	subi	r25, 0xFF	; 255
    54c2:	9f 73       	andi	r25, 0x3F	; 63
    54c4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    54ca:	8f ef       	ldi	r24, 0xFF	; 255
    54cc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    54ce:	08 95       	ret

000054d0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    54d0:	fc 01       	movw	r30, r24
    54d2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    54d4:	44 8d       	ldd	r20, Z+28	; 0x1c
    54d6:	25 2f       	mov	r18, r21
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	84 2f       	mov	r24, r20
    54dc:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    54de:	82 1b       	sub	r24, r18
    54e0:	93 0b       	sbc	r25, r19
    54e2:	54 17       	cp	r21, r20
    54e4:	10 f0       	brcs	.+4      	; 0x54ea <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    54e6:	cf 96       	adiw	r24, 0x3f	; 63
    54e8:	08 95       	ret
  return tail - head - 1;
    54ea:	01 97       	sbiw	r24, 0x01	; 1
}
    54ec:	08 95       	ret

000054ee <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    54ee:	84 e0       	ldi	r24, 0x04	; 4
    54f0:	9c e2       	ldi	r25, 0x2C	; 44
    54f2:	89 2b       	or	r24, r25
    54f4:	39 f0       	breq	.+14     	; 0x5504 <_Z14serialEventRunv+0x16>
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	89 2b       	or	r24, r25
    54fc:	19 f0       	breq	.+6      	; 0x5504 <_Z14serialEventRunv+0x16>
    54fe:	84 d1       	rcall	.+776    	; 0x5808 <_Z17Serial0_availablev>
    5500:	81 11       	cpse	r24, r1
    5502:	25 c0       	rjmp	.+74     	; 0x554e <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	89 2b       	or	r24, r25
    550a:	41 f0       	breq	.+16     	; 0x551c <_Z14serialEventRunv+0x2e>
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	89 2b       	or	r24, r25
    5512:	21 f0       	breq	.+8      	; 0x551c <_Z14serialEventRunv+0x2e>
    5514:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5518:	81 11       	cpse	r24, r1
    551a:	1c c0       	rjmp	.+56     	; 0x5554 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	89 2b       	or	r24, r25
    5522:	41 f0       	breq	.+16     	; 0x5534 <_Z14serialEventRunv+0x46>
    5524:	80 e0       	ldi	r24, 0x00	; 0
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	89 2b       	or	r24, r25
    552a:	21 f0       	breq	.+8      	; 0x5534 <_Z14serialEventRunv+0x46>
    552c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5530:	81 11       	cpse	r24, r1
    5532:	13 c0       	rjmp	.+38     	; 0x555a <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	89 2b       	or	r24, r25
    553a:	a1 f0       	breq	.+40     	; 0x5564 <_Z14serialEventRunv+0x76>
    553c:	80 e0       	ldi	r24, 0x00	; 0
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	89 2b       	or	r24, r25
    5542:	81 f0       	breq	.+32     	; 0x5564 <_Z14serialEventRunv+0x76>
    5544:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5548:	81 11       	cpse	r24, r1
    554a:	0a c0       	rjmp	.+20     	; 0x5560 <_Z14serialEventRunv+0x72>
    554c:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    554e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5552:	d8 cf       	rjmp	.-80     	; 0x5504 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5554:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5558:	e1 cf       	rjmp	.-62     	; 0x551c <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    555a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    555e:	ea cf       	rjmp	.-44     	; 0x5534 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5560:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5564:	08 95       	ret

00005566 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5566:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5568:	84 8d       	ldd	r24, Z+28	; 0x1c
    556a:	df 01       	movw	r26, r30
    556c:	a8 0f       	add	r26, r24
    556e:	b1 1d       	adc	r27, r1
    5570:	a3 5a       	subi	r26, 0xA3	; 163
    5572:	bf 4f       	sbci	r27, 0xFF	; 255
    5574:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5576:	84 8d       	ldd	r24, Z+28	; 0x1c
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	01 96       	adiw	r24, 0x01	; 1
    557c:	8f 73       	andi	r24, 0x3F	; 63
    557e:	99 27       	eor	r25, r25
    5580:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5582:	a6 89       	ldd	r26, Z+22	; 0x16
    5584:	b7 89       	ldd	r27, Z+23	; 0x17
    5586:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5588:	a0 89       	ldd	r26, Z+16	; 0x10
    558a:	b1 89       	ldd	r27, Z+17	; 0x11
    558c:	8c 91       	ld	r24, X
    558e:	83 70       	andi	r24, 0x03	; 3
    5590:	80 64       	ori	r24, 0x40	; 64
    5592:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5594:	93 8d       	ldd	r25, Z+27	; 0x1b
    5596:	84 8d       	ldd	r24, Z+28	; 0x1c
    5598:	98 13       	cpse	r25, r24
    559a:	06 c0       	rjmp	.+12     	; 0x55a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    559c:	02 88       	ldd	r0, Z+18	; 0x12
    559e:	f3 89       	ldd	r31, Z+19	; 0x13
    55a0:	e0 2d       	mov	r30, r0
    55a2:	80 81       	ld	r24, Z
    55a4:	8f 7d       	andi	r24, 0xDF	; 223
    55a6:	80 83       	st	Z, r24
    55a8:	08 95       	ret

000055aa <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    55aa:	ef 92       	push	r14
    55ac:	ff 92       	push	r15
    55ae:	0f 93       	push	r16
    55b0:	1f 93       	push	r17
    55b2:	cf 93       	push	r28
    55b4:	df 93       	push	r29
    55b6:	ec 01       	movw	r28, r24
  _written = true;
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    55bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    55be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55c0:	98 13       	cpse	r25, r24
    55c2:	05 c0       	rjmp	.+10     	; 0x55ce <_ZN14HardwareSerial5writeEh+0x24>
    55c4:	e8 89       	ldd	r30, Y+16	; 0x10
    55c6:	f9 89       	ldd	r31, Y+17	; 0x11
    55c8:	80 81       	ld	r24, Z
    55ca:	85 fd       	sbrc	r24, 5
    55cc:	25 c0       	rjmp	.+74     	; 0x5618 <_ZN14HardwareSerial5writeEh+0x6e>
    55ce:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    55d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    55d2:	10 e0       	ldi	r17, 0x00	; 0
    55d4:	0f 5f       	subi	r16, 0xFF	; 255
    55d6:	1f 4f       	sbci	r17, 0xFF	; 255
    55d8:	0f 73       	andi	r16, 0x3F	; 63
    55da:	11 27       	eor	r17, r17
    55dc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    55de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55e0:	e8 12       	cpse	r14, r24
    55e2:	0b c0       	rjmp	.+22     	; 0x55fa <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    55e4:	0f b6       	in	r0, 0x3f	; 63
    55e6:	07 fc       	sbrc	r0, 7
    55e8:	fa cf       	rjmp	.-12     	; 0x55de <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    55ea:	e8 89       	ldd	r30, Y+16	; 0x10
    55ec:	f9 89       	ldd	r31, Y+17	; 0x11
    55ee:	80 81       	ld	r24, Z
    55f0:	85 ff       	sbrs	r24, 5
    55f2:	f5 cf       	rjmp	.-22     	; 0x55de <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    55f4:	ce 01       	movw	r24, r28
    55f6:	b7 df       	rcall	.-146    	; 0x5566 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    55f8:	f2 cf       	rjmp	.-28     	; 0x55de <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    55fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55fc:	fe 01       	movw	r30, r28
    55fe:	e8 0f       	add	r30, r24
    5600:	f1 1d       	adc	r31, r1
    5602:	e3 5a       	subi	r30, 0xA3	; 163
    5604:	ff 4f       	sbci	r31, 0xFF	; 255
    5606:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5608:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    560a:	f8 94       	cli
    _tx_buffer_head = i;
    560c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    560e:	ea 89       	ldd	r30, Y+18	; 0x12
    5610:	fb 89       	ldd	r31, Y+19	; 0x13
    5612:	80 81       	ld	r24, Z
    5614:	80 62       	ori	r24, 0x20	; 32
    5616:	0a c0       	rjmp	.+20     	; 0x562c <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5618:	9f b7       	in	r25, 0x3f	; 63
    561a:	f8 94       	cli
      *_udr = c;
    561c:	ee 89       	ldd	r30, Y+22	; 0x16
    561e:	ff 89       	ldd	r31, Y+23	; 0x17
    5620:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5622:	e8 89       	ldd	r30, Y+16	; 0x10
    5624:	f9 89       	ldd	r31, Y+17	; 0x11
    5626:	80 81       	ld	r24, Z
    5628:	83 70       	andi	r24, 0x03	; 3
    562a:	80 64       	ori	r24, 0x40	; 64
    562c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    562e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	1f 91       	pop	r17
    563a:	0f 91       	pop	r16
    563c:	ff 90       	pop	r15
    563e:	ef 90       	pop	r14
    5640:	08 95       	ret

00005642 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5642:	cf 93       	push	r28
    5644:	df 93       	push	r29
    5646:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5648:	88 8d       	ldd	r24, Y+24	; 0x18
    564a:	88 23       	and	r24, r24
    564c:	c1 f0       	breq	.+48     	; 0x567e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    564e:	ea 89       	ldd	r30, Y+18	; 0x12
    5650:	fb 89       	ldd	r31, Y+19	; 0x13
    5652:	80 81       	ld	r24, Z
    5654:	85 fd       	sbrc	r24, 5
    5656:	05 c0       	rjmp	.+10     	; 0x5662 <_ZN14HardwareSerial5flushEv+0x20>
    5658:	a8 89       	ldd	r26, Y+16	; 0x10
    565a:	b9 89       	ldd	r27, Y+17	; 0x11
    565c:	8c 91       	ld	r24, X
    565e:	86 fd       	sbrc	r24, 6
    5660:	0e c0       	rjmp	.+28     	; 0x567e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5662:	0f b6       	in	r0, 0x3f	; 63
    5664:	07 fc       	sbrc	r0, 7
    5666:	f5 cf       	rjmp	.-22     	; 0x5652 <_ZN14HardwareSerial5flushEv+0x10>
    5668:	80 81       	ld	r24, Z
    566a:	85 ff       	sbrs	r24, 5
    566c:	f2 cf       	rjmp	.-28     	; 0x5652 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    566e:	a8 89       	ldd	r26, Y+16	; 0x10
    5670:	b9 89       	ldd	r27, Y+17	; 0x11
    5672:	8c 91       	ld	r24, X
    5674:	85 ff       	sbrs	r24, 5
    5676:	ed cf       	rjmp	.-38     	; 0x5652 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5678:	ce 01       	movw	r24, r28
    567a:	75 df       	rcall	.-278    	; 0x5566 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    567c:	e8 cf       	rjmp	.-48     	; 0x564e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    567e:	df 91       	pop	r29
    5680:	cf 91       	pop	r28
    5682:	08 95       	ret

00005684 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5684:	cf 92       	push	r12
    5686:	df 92       	push	r13
    5688:	ef 92       	push	r14
    568a:	ff 92       	push	r15
    568c:	1f 93       	push	r17
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	ec 01       	movw	r28, r24
    5694:	6a 01       	movw	r12, r20
    5696:	7b 01       	movw	r14, r22
    5698:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    569a:	e8 89       	ldd	r30, Y+16	; 0x10
    569c:	f9 89       	ldd	r31, Y+17	; 0x11
    569e:	82 e0       	ldi	r24, 0x02	; 2
    56a0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    56a2:	41 15       	cp	r20, r1
    56a4:	51 4e       	sbci	r21, 0xE1	; 225
    56a6:	61 05       	cpc	r22, r1
    56a8:	71 05       	cpc	r23, r1
    56aa:	a9 f0       	breq	.+42     	; 0x56d6 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    56ac:	60 e0       	ldi	r22, 0x00	; 0
    56ae:	79 e0       	ldi	r23, 0x09	; 9
    56b0:	8d e3       	ldi	r24, 0x3D	; 61
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	a7 01       	movw	r20, r14
    56b6:	96 01       	movw	r18, r12
    56b8:	c8 d5       	rcall	.+2960   	; 0x624a <__udivmodsi4>
    56ba:	da 01       	movw	r26, r20
    56bc:	c9 01       	movw	r24, r18
    56be:	01 97       	sbiw	r24, 0x01	; 1
    56c0:	a1 09       	sbc	r26, r1
    56c2:	b1 09       	sbc	r27, r1
    56c4:	b6 95       	lsr	r27
    56c6:	a7 95       	ror	r26
    56c8:	97 95       	ror	r25
    56ca:	87 95       	ror	r24
    56cc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    56ce:	21 15       	cp	r18, r1
    56d0:	80 e1       	ldi	r24, 0x10	; 16
    56d2:	38 07       	cpc	r19, r24
    56d4:	a0 f0       	brcs	.+40     	; 0x56fe <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    56d6:	e8 89       	ldd	r30, Y+16	; 0x10
    56d8:	f9 89       	ldd	r31, Y+17	; 0x11
    56da:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    56dc:	60 e8       	ldi	r22, 0x80	; 128
    56de:	74 e8       	ldi	r23, 0x84	; 132
    56e0:	8e e1       	ldi	r24, 0x1E	; 30
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	a7 01       	movw	r20, r14
    56e6:	96 01       	movw	r18, r12
    56e8:	b0 d5       	rcall	.+2912   	; 0x624a <__udivmodsi4>
    56ea:	da 01       	movw	r26, r20
    56ec:	c9 01       	movw	r24, r18
    56ee:	01 97       	sbiw	r24, 0x01	; 1
    56f0:	a1 09       	sbc	r26, r1
    56f2:	b1 09       	sbc	r27, r1
    56f4:	b6 95       	lsr	r27
    56f6:	a7 95       	ror	r26
    56f8:	97 95       	ror	r25
    56fa:	87 95       	ror	r24
    56fc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    56fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    5700:	fd 85       	ldd	r31, Y+13	; 0x0d
    5702:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5704:	ee 85       	ldd	r30, Y+14	; 0x0e
    5706:	ff 85       	ldd	r31, Y+15	; 0x0f
    5708:	20 83       	st	Z, r18

  _written = false;
    570a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    570c:	ec 89       	ldd	r30, Y+20	; 0x14
    570e:	fd 89       	ldd	r31, Y+21	; 0x15
    5710:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5712:	ea 89       	ldd	r30, Y+18	; 0x12
    5714:	fb 89       	ldd	r31, Y+19	; 0x13
    5716:	80 81       	ld	r24, Z
    5718:	80 61       	ori	r24, 0x10	; 16
    571a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    571c:	ea 89       	ldd	r30, Y+18	; 0x12
    571e:	fb 89       	ldd	r31, Y+19	; 0x13
    5720:	80 81       	ld	r24, Z
    5722:	88 60       	ori	r24, 0x08	; 8
    5724:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5726:	ea 89       	ldd	r30, Y+18	; 0x12
    5728:	fb 89       	ldd	r31, Y+19	; 0x13
    572a:	80 81       	ld	r24, Z
    572c:	80 68       	ori	r24, 0x80	; 128
    572e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5730:	ea 89       	ldd	r30, Y+18	; 0x12
    5732:	fb 89       	ldd	r31, Y+19	; 0x13
    5734:	80 81       	ld	r24, Z
    5736:	8f 7d       	andi	r24, 0xDF	; 223
    5738:	80 83       	st	Z, r24
}
    573a:	df 91       	pop	r29
    573c:	cf 91       	pop	r28
    573e:	1f 91       	pop	r17
    5740:	ff 90       	pop	r15
    5742:	ef 90       	pop	r14
    5744:	df 90       	pop	r13
    5746:	cf 90       	pop	r12
    5748:	08 95       	ret

0000574a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    574a:	1f 92       	push	r1
    574c:	0f 92       	push	r0
    574e:	0f b6       	in	r0, 0x3f	; 63
    5750:	0f 92       	push	r0
    5752:	11 24       	eor	r1, r1
    5754:	0b b6       	in	r0, 0x3b	; 59
    5756:	0f 92       	push	r0
    5758:	2f 93       	push	r18
    575a:	8f 93       	push	r24
    575c:	9f 93       	push	r25
    575e:	ef 93       	push	r30
    5760:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5762:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <Serial+0x10>
    5766:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <Serial+0x11>
    576a:	80 81       	ld	r24, Z
    576c:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <Serial+0x16>
    5770:	f0 91 fd 04 	lds	r31, 0x04FD	; 0x8004fd <Serial+0x17>
    5774:	82 fd       	sbrc	r24, 2
    5776:	12 c0       	rjmp	.+36     	; 0x579c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5778:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    577a:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <Serial+0x19>
    577e:	8f 5f       	subi	r24, 0xFF	; 255
    5780:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5782:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <Serial+0x1a>
    5786:	82 17       	cp	r24, r18
    5788:	51 f0       	breq	.+20     	; 0x579e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    578a:	e0 91 ff 04 	lds	r30, 0x04FF	; 0x8004ff <Serial+0x19>
    578e:	f0 e0       	ldi	r31, 0x00	; 0
    5790:	ea 51       	subi	r30, 0x1A	; 26
    5792:	fb 4f       	sbci	r31, 0xFB	; 251
    5794:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5796:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <Serial+0x19>
    579a:	01 c0       	rjmp	.+2      	; 0x579e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    579c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    579e:	ff 91       	pop	r31
    57a0:	ef 91       	pop	r30
    57a2:	9f 91       	pop	r25
    57a4:	8f 91       	pop	r24
    57a6:	2f 91       	pop	r18
    57a8:	0f 90       	pop	r0
    57aa:	0b be       	out	0x3b, r0	; 59
    57ac:	0f 90       	pop	r0
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	0f 90       	pop	r0
    57b2:	1f 90       	pop	r1
    57b4:	18 95       	reti

000057b6 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    57b6:	1f 92       	push	r1
    57b8:	0f 92       	push	r0
    57ba:	0f b6       	in	r0, 0x3f	; 63
    57bc:	0f 92       	push	r0
    57be:	11 24       	eor	r1, r1
    57c0:	0b b6       	in	r0, 0x3b	; 59
    57c2:	0f 92       	push	r0
    57c4:	2f 93       	push	r18
    57c6:	3f 93       	push	r19
    57c8:	4f 93       	push	r20
    57ca:	5f 93       	push	r21
    57cc:	6f 93       	push	r22
    57ce:	7f 93       	push	r23
    57d0:	8f 93       	push	r24
    57d2:	9f 93       	push	r25
    57d4:	af 93       	push	r26
    57d6:	bf 93       	push	r27
    57d8:	ef 93       	push	r30
    57da:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    57dc:	86 ee       	ldi	r24, 0xE6	; 230
    57de:	94 e0       	ldi	r25, 0x04	; 4
    57e0:	c2 de       	rcall	.-636    	; 0x5566 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    57e2:	ff 91       	pop	r31
    57e4:	ef 91       	pop	r30
    57e6:	bf 91       	pop	r27
    57e8:	af 91       	pop	r26
    57ea:	9f 91       	pop	r25
    57ec:	8f 91       	pop	r24
    57ee:	7f 91       	pop	r23
    57f0:	6f 91       	pop	r22
    57f2:	5f 91       	pop	r21
    57f4:	4f 91       	pop	r20
    57f6:	3f 91       	pop	r19
    57f8:	2f 91       	pop	r18
    57fa:	0f 90       	pop	r0
    57fc:	0b be       	out	0x3b, r0	; 59
    57fe:	0f 90       	pop	r0
    5800:	0f be       	out	0x3f, r0	; 63
    5802:	0f 90       	pop	r0
    5804:	1f 90       	pop	r1
    5806:	18 95       	reti

00005808 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5808:	86 ee       	ldi	r24, 0xE6	; 230
    580a:	94 e0       	ldi	r25, 0x04	; 4
    580c:	33 de       	rcall	.-922    	; 0x5474 <_ZN14HardwareSerial9availableEv>
    580e:	21 e0       	ldi	r18, 0x01	; 1
    5810:	89 2b       	or	r24, r25
    5812:	09 f4       	brne	.+2      	; 0x5816 <_Z17Serial0_availablev+0xe>
    5814:	20 e0       	ldi	r18, 0x00	; 0
}
    5816:	82 2f       	mov	r24, r18
    5818:	08 95       	ret

0000581a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    581a:	e6 ee       	ldi	r30, 0xE6	; 230
    581c:	f4 e0       	ldi	r31, 0x04	; 4
    581e:	13 82       	std	Z+3, r1	; 0x03
    5820:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5822:	88 ee       	ldi	r24, 0xE8	; 232
    5824:	93 e0       	ldi	r25, 0x03	; 3
    5826:	a0 e0       	ldi	r26, 0x00	; 0
    5828:	b0 e0       	ldi	r27, 0x00	; 0
    582a:	84 83       	std	Z+4, r24	; 0x04
    582c:	95 83       	std	Z+5, r25	; 0x05
    582e:	a6 83       	std	Z+6, r26	; 0x06
    5830:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5832:	8d e0       	ldi	r24, 0x0D	; 13
    5834:	93 e0       	ldi	r25, 0x03	; 3
    5836:	91 83       	std	Z+1, r25	; 0x01
    5838:	80 83       	st	Z, r24
    583a:	85 ec       	ldi	r24, 0xC5	; 197
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	95 87       	std	Z+13, r25	; 0x0d
    5840:	84 87       	std	Z+12, r24	; 0x0c
    5842:	84 ec       	ldi	r24, 0xC4	; 196
    5844:	90 e0       	ldi	r25, 0x00	; 0
    5846:	97 87       	std	Z+15, r25	; 0x0f
    5848:	86 87       	std	Z+14, r24	; 0x0e
    584a:	80 ec       	ldi	r24, 0xC0	; 192
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	91 8b       	std	Z+17, r25	; 0x11
    5850:	80 8b       	std	Z+16, r24	; 0x10
    5852:	81 ec       	ldi	r24, 0xC1	; 193
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	93 8b       	std	Z+19, r25	; 0x13
    5858:	82 8b       	std	Z+18, r24	; 0x12
    585a:	82 ec       	ldi	r24, 0xC2	; 194
    585c:	90 e0       	ldi	r25, 0x00	; 0
    585e:	95 8b       	std	Z+21, r25	; 0x15
    5860:	84 8b       	std	Z+20, r24	; 0x14
    5862:	86 ec       	ldi	r24, 0xC6	; 198
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	97 8b       	std	Z+23, r25	; 0x17
    5868:	86 8b       	std	Z+22, r24	; 0x16
    586a:	11 8e       	std	Z+25, r1	; 0x19
    586c:	12 8e       	std	Z+26, r1	; 0x1a
    586e:	13 8e       	std	Z+27, r1	; 0x1b
    5870:	14 8e       	std	Z+28, r1	; 0x1c
    5872:	08 95       	ret

00005874 <initVariant>:
    5874:	08 95       	ret

00005876 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5876:	28 d1       	rcall	.+592    	; 0x5ac8 <init>

	initVariant();
    5878:	fd df       	rcall	.-6      	; 0x5874 <initVariant>
    587a:	0e 94 65 03 	call	0x6ca	; 0x6ca <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    587e:	c7 e7       	ldi	r28, 0x77	; 119
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5880:	da e2       	ldi	r29, 0x2A	; 42
    5882:	0e 94 0a 04 	call	0x814	; 0x814 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5886:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5888:	e1 f3       	breq	.-8      	; 0x5882 <main+0xc>
    588a:	31 de       	rcall	.-926    	; 0x54ee <_Z14serialEventRunv>
    588c:	fa cf       	rjmp	.-12     	; 0x5882 <main+0xc>

0000588e <_ZdlPv>:
    588e:	d4 c5       	rjmp	.+2984   	; 0x6438 <free>

00005890 <_ZN5Print5writeEPKhj>:
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    5890:	cf 92       	push	r12
    5892:	df 92       	push	r13
    5894:	ef 92       	push	r14
    5896:	ff 92       	push	r15
    5898:	0f 93       	push	r16
    589a:	1f 93       	push	r17
    589c:	cf 93       	push	r28
    589e:	df 93       	push	r29
    58a0:	6c 01       	movw	r12, r24
    58a2:	7a 01       	movw	r14, r20
    58a4:	8b 01       	movw	r16, r22
    58a6:	c0 e0       	ldi	r28, 0x00	; 0
    58a8:	d0 e0       	ldi	r29, 0x00	; 0
    58aa:	ce 15       	cp	r28, r14
    58ac:	df 05       	cpc	r29, r15
    58ae:	81 f0       	breq	.+32     	; 0x58d0 <_ZN5Print5writeEPKhj+0x40>
    58b0:	d8 01       	movw	r26, r16
    58b2:	6d 91       	ld	r22, X+
    58b4:	8d 01       	movw	r16, r26
    58b6:	d6 01       	movw	r26, r12
    58b8:	ed 91       	ld	r30, X+
    58ba:	fc 91       	ld	r31, X
    58bc:	01 90       	ld	r0, Z+
    58be:	f0 81       	ld	r31, Z
    58c0:	e0 2d       	mov	r30, r0
    58c2:	c6 01       	movw	r24, r12
    58c4:	19 95       	eicall
    58c6:	89 2b       	or	r24, r25
    58c8:	11 f0       	breq	.+4      	; 0x58ce <_ZN5Print5writeEPKhj+0x3e>
    58ca:	21 96       	adiw	r28, 0x01	; 1
    58cc:	ee cf       	rjmp	.-36     	; 0x58aa <_ZN5Print5writeEPKhj+0x1a>
    58ce:	7e 01       	movw	r14, r28
    58d0:	c7 01       	movw	r24, r14
    58d2:	df 91       	pop	r29
    58d4:	cf 91       	pop	r28
    58d6:	1f 91       	pop	r17
    58d8:	0f 91       	pop	r16
    58da:	ff 90       	pop	r15
    58dc:	ef 90       	pop	r14
    58de:	df 90       	pop	r13
    58e0:	cf 90       	pop	r12
    58e2:	08 95       	ret

000058e4 <_ZN5Print5printERK6String>:
    58e4:	db 01       	movw	r26, r22
    58e6:	14 96       	adiw	r26, 0x04	; 4
    58e8:	4d 91       	ld	r20, X+
    58ea:	5c 91       	ld	r21, X
    58ec:	15 97       	sbiw	r26, 0x05	; 5
    58ee:	6d 91       	ld	r22, X+
    58f0:	7c 91       	ld	r23, X
    58f2:	dc 01       	movw	r26, r24
    58f4:	ed 91       	ld	r30, X+
    58f6:	fc 91       	ld	r31, X
    58f8:	02 80       	ldd	r0, Z+2	; 0x02
    58fa:	f3 81       	ldd	r31, Z+3	; 0x03
    58fc:	e0 2d       	mov	r30, r0
    58fe:	19 94       	eijmp

00005900 <_ZN5Print7printlnEv>:
    5900:	6b e1       	ldi	r22, 0x1B	; 27
    5902:	73 e0       	ldi	r23, 0x03	; 3
    5904:	0c 94 df 01 	jmp	0x3be	; 0x3be <_ZN5Print5writeEPKc>

00005908 <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    5908:	0f 93       	push	r16
    590a:	1f 93       	push	r17
    590c:	cf 93       	push	r28
    590e:	df 93       	push	r29
    5910:	ec 01       	movw	r28, r24
  size_t n = print(s);
    5912:	e8 df       	rcall	.-48     	; 0x58e4 <_ZN5Print5printERK6String>
    5914:	8c 01       	movw	r16, r24
  n += println();
    5916:	ce 01       	movw	r24, r28
    5918:	f3 df       	rcall	.-26     	; 0x5900 <_ZN5Print7printlnEv>
  return n;
}
    591a:	80 0f       	add	r24, r16
    591c:	91 1f       	adc	r25, r17
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	1f 91       	pop	r17
    5924:	0f 91       	pop	r16
    5926:	08 95       	ret

00005928 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    5928:	0f 93       	push	r16
    592a:	1f 93       	push	r17
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5932:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN5Print5writeEPKc>
    5936:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5938:	ce 01       	movw	r24, r28
    593a:	e2 df       	rcall	.-60     	; 0x5900 <_ZN5Print7printlnEv>
  return n;
}
    593c:	80 0f       	add	r24, r16
    593e:	91 1f       	adc	r25, r17
    5940:	df 91       	pop	r29
    5942:	cf 91       	pop	r28
    5944:	1f 91       	pop	r17
    5946:	0f 91       	pop	r16
    5948:	08 95       	ret

0000594a <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    594a:	1f 92       	push	r1
    594c:	0f 92       	push	r0
    594e:	0f b6       	in	r0, 0x3f	; 63
    5950:	0f 92       	push	r0
    5952:	11 24       	eor	r1, r1
    5954:	2f 93       	push	r18
    5956:	3f 93       	push	r19
    5958:	8f 93       	push	r24
    595a:	9f 93       	push	r25
    595c:	af 93       	push	r26
    595e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5960:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <timer0_millis>
    5964:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <timer0_millis+0x1>
    5968:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <timer0_millis+0x2>
    596c:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5970:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5974:	23 e0       	ldi	r18, 0x03	; 3
    5976:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5978:	2d 37       	cpi	r18, 0x7D	; 125
    597a:	20 f4       	brcc	.+8      	; 0x5984 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    597c:	01 96       	adiw	r24, 0x01	; 1
    597e:	a1 1d       	adc	r26, r1
    5980:	b1 1d       	adc	r27, r1
    5982:	05 c0       	rjmp	.+10     	; 0x598e <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5984:	26 e8       	ldi	r18, 0x86	; 134
    5986:	23 0f       	add	r18, r19
		m += 1;
    5988:	02 96       	adiw	r24, 0x02	; 2
    598a:	a1 1d       	adc	r26, r1
    598c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    598e:	20 93 83 05 	sts	0x0583, r18	; 0x800583 <timer0_fract>
	timer0_millis = m;
    5992:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <timer0_millis>
    5996:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <timer0_millis+0x1>
    599a:	a0 93 86 05 	sts	0x0586, r26	; 0x800586 <timer0_millis+0x2>
    599e:	b0 93 87 05 	sts	0x0587, r27	; 0x800587 <timer0_millis+0x3>
	timer0_overflow_count++;
    59a2:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <timer0_overflow_count>
    59a6:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <timer0_overflow_count+0x1>
    59aa:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <timer0_overflow_count+0x2>
    59ae:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <timer0_overflow_count+0x3>
    59b2:	01 96       	adiw	r24, 0x01	; 1
    59b4:	a1 1d       	adc	r26, r1
    59b6:	b1 1d       	adc	r27, r1
    59b8:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <timer0_overflow_count>
    59bc:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <timer0_overflow_count+0x1>
    59c0:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <timer0_overflow_count+0x2>
    59c4:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <timer0_overflow_count+0x3>
}
    59c8:	bf 91       	pop	r27
    59ca:	af 91       	pop	r26
    59cc:	9f 91       	pop	r25
    59ce:	8f 91       	pop	r24
    59d0:	3f 91       	pop	r19
    59d2:	2f 91       	pop	r18
    59d4:	0f 90       	pop	r0
    59d6:	0f be       	out	0x3f, r0	; 63
    59d8:	0f 90       	pop	r0
    59da:	1f 90       	pop	r1
    59dc:	18 95       	reti

000059de <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    59de:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    59e0:	f8 94       	cli
	m = timer0_millis;
    59e2:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <timer0_millis>
    59e6:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <timer0_millis+0x1>
    59ea:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <timer0_millis+0x2>
    59ee:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <timer0_millis+0x3>
	SREG = oldSREG;
    59f2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    59f4:	08 95       	ret

000059f6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    59f6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    59f8:	f8 94       	cli
	m = timer0_overflow_count;
    59fa:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <timer0_overflow_count>
    59fe:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <timer0_overflow_count+0x1>
    5a02:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <timer0_overflow_count+0x2>
    5a06:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5a0a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5a0c:	a8 9b       	sbis	0x15, 0	; 21
    5a0e:	05 c0       	rjmp	.+10     	; 0x5a1a <micros+0x24>
    5a10:	2f 3f       	cpi	r18, 0xFF	; 255
    5a12:	19 f0       	breq	.+6      	; 0x5a1a <micros+0x24>
		m++;
    5a14:	01 96       	adiw	r24, 0x01	; 1
    5a16:	a1 1d       	adc	r26, r1
    5a18:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5a1a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5a1c:	ba 2f       	mov	r27, r26
    5a1e:	a9 2f       	mov	r26, r25
    5a20:	98 2f       	mov	r25, r24
    5a22:	88 27       	eor	r24, r24
    5a24:	82 0f       	add	r24, r18
    5a26:	91 1d       	adc	r25, r1
    5a28:	a1 1d       	adc	r26, r1
    5a2a:	b1 1d       	adc	r27, r1
    5a2c:	bc 01       	movw	r22, r24
    5a2e:	cd 01       	movw	r24, r26
    5a30:	42 e0       	ldi	r20, 0x02	; 2
    5a32:	66 0f       	add	r22, r22
    5a34:	77 1f       	adc	r23, r23
    5a36:	88 1f       	adc	r24, r24
    5a38:	99 1f       	adc	r25, r25
    5a3a:	4a 95       	dec	r20
    5a3c:	d1 f7       	brne	.-12     	; 0x5a32 <micros+0x3c>
}
    5a3e:	08 95       	ret

00005a40 <delay>:

void delay(unsigned long ms)
{
    5a40:	8f 92       	push	r8
    5a42:	9f 92       	push	r9
    5a44:	af 92       	push	r10
    5a46:	bf 92       	push	r11
    5a48:	cf 92       	push	r12
    5a4a:	df 92       	push	r13
    5a4c:	ef 92       	push	r14
    5a4e:	ff 92       	push	r15
    5a50:	6b 01       	movw	r12, r22
    5a52:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5a54:	d0 df       	rcall	.-96     	; 0x59f6 <micros>
    5a56:	4b 01       	movw	r8, r22
    5a58:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5a5a:	c1 14       	cp	r12, r1
    5a5c:	d1 04       	cpc	r13, r1
    5a5e:	e1 04       	cpc	r14, r1
    5a60:	f1 04       	cpc	r15, r1
		yield();
    5a62:	f1 f0       	breq	.+60     	; 0x5aa0 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5a64:	e2 d3       	rcall	.+1988   	; 0x622a <yield>
    5a66:	c7 df       	rcall	.-114    	; 0x59f6 <micros>
    5a68:	dc 01       	movw	r26, r24
    5a6a:	cb 01       	movw	r24, r22
    5a6c:	88 19       	sub	r24, r8
    5a6e:	99 09       	sbc	r25, r9
    5a70:	aa 09       	sbc	r26, r10
    5a72:	bb 09       	sbc	r27, r11
    5a74:	88 3e       	cpi	r24, 0xE8	; 232
    5a76:	93 40       	sbci	r25, 0x03	; 3
    5a78:	a1 05       	cpc	r26, r1
    5a7a:	b1 05       	cpc	r27, r1
    5a7c:	70 f3       	brcs	.-36     	; 0x5a5a <delay+0x1a>
			ms--;
    5a7e:	21 e0       	ldi	r18, 0x01	; 1
    5a80:	c2 1a       	sub	r12, r18
    5a82:	d1 08       	sbc	r13, r1
    5a84:	e1 08       	sbc	r14, r1
    5a86:	f1 08       	sbc	r15, r1
			start += 1000;
    5a88:	88 ee       	ldi	r24, 0xE8	; 232
    5a8a:	88 0e       	add	r8, r24
    5a8c:	83 e0       	ldi	r24, 0x03	; 3
    5a8e:	98 1e       	adc	r9, r24
    5a90:	a1 1c       	adc	r10, r1
    5a92:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5a94:	c1 14       	cp	r12, r1
    5a96:	d1 04       	cpc	r13, r1
    5a98:	e1 04       	cpc	r14, r1
    5a9a:	f1 04       	cpc	r15, r1
    5a9c:	21 f7       	brne	.-56     	; 0x5a66 <delay+0x26>
    5a9e:	dd cf       	rjmp	.-70     	; 0x5a5a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5aa0:	ff 90       	pop	r15
    5aa2:	ef 90       	pop	r14
    5aa4:	df 90       	pop	r13
    5aa6:	cf 90       	pop	r12
    5aa8:	bf 90       	pop	r11
    5aaa:	af 90       	pop	r10
    5aac:	9f 90       	pop	r9
    5aae:	8f 90       	pop	r8
    5ab0:	08 95       	ret

00005ab2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5ab2:	82 30       	cpi	r24, 0x02	; 2
    5ab4:	91 05       	cpc	r25, r1
    5ab6:	38 f0       	brcs	.+14     	; 0x5ac6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5ab8:	88 0f       	add	r24, r24
    5aba:	99 1f       	adc	r25, r25
    5abc:	88 0f       	add	r24, r24
    5abe:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5ac0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5ac2:	01 97       	sbiw	r24, 0x01	; 1
    5ac4:	f1 f7       	brne	.-4      	; 0x5ac2 <delayMicroseconds+0x10>
    5ac6:	08 95       	ret

00005ac8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5ac8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5aca:	84 b5       	in	r24, 0x24	; 36
    5acc:	82 60       	ori	r24, 0x02	; 2
    5ace:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5ad0:	84 b5       	in	r24, 0x24	; 36
    5ad2:	81 60       	ori	r24, 0x01	; 1
    5ad4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5ad6:	85 b5       	in	r24, 0x25	; 37
    5ad8:	82 60       	ori	r24, 0x02	; 2
    5ada:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5adc:	85 b5       	in	r24, 0x25	; 37
    5ade:	81 60       	ori	r24, 0x01	; 1
    5ae0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5ae2:	ee e6       	ldi	r30, 0x6E	; 110
    5ae4:	f0 e0       	ldi	r31, 0x00	; 0
    5ae6:	80 81       	ld	r24, Z
    5ae8:	81 60       	ori	r24, 0x01	; 1
    5aea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5aec:	e1 e8       	ldi	r30, 0x81	; 129
    5aee:	f0 e0       	ldi	r31, 0x00	; 0
    5af0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5af2:	80 81       	ld	r24, Z
    5af4:	82 60       	ori	r24, 0x02	; 2
    5af6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5af8:	80 81       	ld	r24, Z
    5afa:	81 60       	ori	r24, 0x01	; 1
    5afc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5afe:	e0 e8       	ldi	r30, 0x80	; 128
    5b00:	f0 e0       	ldi	r31, 0x00	; 0
    5b02:	80 81       	ld	r24, Z
    5b04:	81 60       	ori	r24, 0x01	; 1
    5b06:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5b08:	e1 eb       	ldi	r30, 0xB1	; 177
    5b0a:	f0 e0       	ldi	r31, 0x00	; 0
    5b0c:	80 81       	ld	r24, Z
    5b0e:	84 60       	ori	r24, 0x04	; 4
    5b10:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5b12:	e0 eb       	ldi	r30, 0xB0	; 176
    5b14:	f0 e0       	ldi	r31, 0x00	; 0
    5b16:	80 81       	ld	r24, Z
    5b18:	81 60       	ori	r24, 0x01	; 1
    5b1a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5b1c:	e1 e9       	ldi	r30, 0x91	; 145
    5b1e:	f0 e0       	ldi	r31, 0x00	; 0
    5b20:	80 81       	ld	r24, Z
    5b22:	82 60       	ori	r24, 0x02	; 2
    5b24:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    5b26:	80 81       	ld	r24, Z
    5b28:	81 60       	ori	r24, 0x01	; 1
    5b2a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5b2c:	e0 e9       	ldi	r30, 0x90	; 144
    5b2e:	f0 e0       	ldi	r31, 0x00	; 0
    5b30:	80 81       	ld	r24, Z
    5b32:	81 60       	ori	r24, 0x01	; 1
    5b34:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    5b36:	e1 ea       	ldi	r30, 0xA1	; 161
    5b38:	f0 e0       	ldi	r31, 0x00	; 0
    5b3a:	80 81       	ld	r24, Z
    5b3c:	82 60       	ori	r24, 0x02	; 2
    5b3e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5b40:	80 81       	ld	r24, Z
    5b42:	81 60       	ori	r24, 0x01	; 1
    5b44:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    5b46:	e0 ea       	ldi	r30, 0xA0	; 160
    5b48:	f0 e0       	ldi	r31, 0x00	; 0
    5b4a:	80 81       	ld	r24, Z
    5b4c:	81 60       	ori	r24, 0x01	; 1
    5b4e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5b50:	e1 e2       	ldi	r30, 0x21	; 33
    5b52:	f1 e0       	ldi	r31, 0x01	; 1
    5b54:	80 81       	ld	r24, Z
    5b56:	82 60       	ori	r24, 0x02	; 2
    5b58:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    5b5a:	80 81       	ld	r24, Z
    5b5c:	81 60       	ori	r24, 0x01	; 1
    5b5e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5b60:	e0 e2       	ldi	r30, 0x20	; 32
    5b62:	f1 e0       	ldi	r31, 0x01	; 1
    5b64:	80 81       	ld	r24, Z
    5b66:	81 60       	ori	r24, 0x01	; 1
    5b68:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5b6a:	ea e7       	ldi	r30, 0x7A	; 122
    5b6c:	f0 e0       	ldi	r31, 0x00	; 0
    5b6e:	80 81       	ld	r24, Z
    5b70:	84 60       	ori	r24, 0x04	; 4
    5b72:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5b74:	80 81       	ld	r24, Z
    5b76:	82 60       	ori	r24, 0x02	; 2
    5b78:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5b7a:	80 81       	ld	r24, Z
    5b7c:	81 60       	ori	r24, 0x01	; 1
    5b7e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5b80:	80 81       	ld	r24, Z
    5b82:	80 68       	ori	r24, 0x80	; 128
    5b84:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5b86:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    5b8a:	08 95       	ret

00005b8c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	fc 01       	movw	r30, r24
    5b90:	31 97       	sbiw	r30, 0x01	; 1
    5b92:	e2 31       	cpi	r30, 0x12	; 18
    5b94:	f1 05       	cpc	r31, r1
    5b96:	08 f0       	brcs	.+2      	; 0x5b9a <turnOffPWM+0xe>
    5b98:	4d c0       	rjmp	.+154    	; 0x5c34 <turnOffPWM+0xa8>
    5b9a:	88 27       	eor	r24, r24
    5b9c:	ee 58       	subi	r30, 0x8E	; 142
    5b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ba2:	91 c3       	rjmp	.+1826   	; 0x62c6 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5ba4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5ba8:	8f 77       	andi	r24, 0x7F	; 127
    5baa:	03 c0       	rjmp	.+6      	; 0x5bb2 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5bac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5bb0:	8f 7d       	andi	r24, 0xDF	; 223
    5bb2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5bb6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    5bb8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5bbc:	87 7f       	andi	r24, 0xF7	; 247
    5bbe:	f9 cf       	rjmp	.-14     	; 0x5bb2 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5bc0:	84 b5       	in	r24, 0x24	; 36
    5bc2:	8f 77       	andi	r24, 0x7F	; 127
    5bc4:	02 c0       	rjmp	.+4      	; 0x5bca <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5bc6:	84 b5       	in	r24, 0x24	; 36
    5bc8:	8f 7d       	andi	r24, 0xDF	; 223
    5bca:	84 bd       	out	0x24, r24	; 36
    5bcc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5bce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5bd2:	8f 77       	andi	r24, 0x7F	; 127
    5bd4:	03 c0       	rjmp	.+6      	; 0x5bdc <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5bd6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5bda:	8f 7d       	andi	r24, 0xDF	; 223
    5bdc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5be0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5be2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5be6:	8f 77       	andi	r24, 0x7F	; 127
    5be8:	07 c0       	rjmp	.+14     	; 0x5bf8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    5bea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5bee:	8f 7d       	andi	r24, 0xDF	; 223
    5bf0:	03 c0       	rjmp	.+6      	; 0x5bf8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5bf2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5bf6:	87 7f       	andi	r24, 0xF7	; 247
    5bf8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5bfc:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5bfe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5c02:	8f 77       	andi	r24, 0x7F	; 127
    5c04:	07 c0       	rjmp	.+14     	; 0x5c14 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5c06:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5c0a:	8f 7d       	andi	r24, 0xDF	; 223
    5c0c:	03 c0       	rjmp	.+6      	; 0x5c14 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5c0e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5c12:	87 7f       	andi	r24, 0xF7	; 247
    5c14:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5c18:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5c1a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c1e:	8f 77       	andi	r24, 0x7F	; 127
    5c20:	07 c0       	rjmp	.+14     	; 0x5c30 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5c22:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c26:	8f 7d       	andi	r24, 0xDF	; 223
    5c28:	03 c0       	rjmp	.+6      	; 0x5c30 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    5c2a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c2e:	87 7f       	andi	r24, 0xF7	; 247
    5c30:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c34:	08 95       	ret

00005c36 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5c36:	cf 93       	push	r28
    5c38:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	e2 5b       	subi	r30, 0xB2	; 178
    5c40:	fe 4f       	sbci	r31, 0xFE	; 254
    5c42:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5c44:	fc 01       	movw	r30, r24
    5c46:	ec 56       	subi	r30, 0x6C	; 108
    5c48:	fe 4f       	sbci	r31, 0xFE	; 254
    5c4a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5c4c:	88 23       	and	r24, r24
    5c4e:	61 f1       	breq	.+88     	; 0x5ca8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	88 0f       	add	r24, r24
    5c54:	99 1f       	adc	r25, r25
    5c56:	fc 01       	movw	r30, r24
    5c58:	e2 5f       	subi	r30, 0xF2	; 242
    5c5a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c5c:	c5 91       	lpm	r28, Z+
    5c5e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5c60:	fc 01       	movw	r30, r24
    5c62:	ec 50       	subi	r30, 0x0C	; 12
    5c64:	fe 4f       	sbci	r31, 0xFE	; 254
    5c66:	a5 91       	lpm	r26, Z+
    5c68:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5c6a:	61 11       	cpse	r22, r1
    5c6c:	09 c0       	rjmp	.+18     	; 0x5c80 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5c6e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c70:	f8 94       	cli
		*reg &= ~bit;
    5c72:	88 81       	ld	r24, Y
    5c74:	20 95       	com	r18
    5c76:	82 23       	and	r24, r18
    5c78:	88 83       	st	Y, r24
		*out &= ~bit;
    5c7a:	ec 91       	ld	r30, X
    5c7c:	2e 23       	and	r18, r30
    5c7e:	0b c0       	rjmp	.+22     	; 0x5c96 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5c80:	62 30       	cpi	r22, 0x02	; 2
    5c82:	61 f4       	brne	.+24     	; 0x5c9c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5c84:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c86:	f8 94       	cli
		*reg &= ~bit;
    5c88:	88 81       	ld	r24, Y
    5c8a:	32 2f       	mov	r19, r18
    5c8c:	30 95       	com	r19
    5c8e:	83 23       	and	r24, r19
    5c90:	88 83       	st	Y, r24
		*out |= bit;
    5c92:	ec 91       	ld	r30, X
    5c94:	2e 2b       	or	r18, r30
    5c96:	2c 93       	st	X, r18
		SREG = oldSREG;
    5c98:	9f bf       	out	0x3f, r25	; 63
    5c9a:	06 c0       	rjmp	.+12     	; 0x5ca8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5c9c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5c9e:	f8 94       	cli
		*reg |= bit;
    5ca0:	e8 81       	ld	r30, Y
    5ca2:	2e 2b       	or	r18, r30
    5ca4:	28 83       	st	Y, r18
		SREG = oldSREG;
    5ca6:	8f bf       	out	0x3f, r24	; 63
	}
}
    5ca8:	df 91       	pop	r29
    5caa:	cf 91       	pop	r28
    5cac:	08 95       	ret

00005cae <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5cae:	1f 93       	push	r17
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5cb4:	28 2f       	mov	r18, r24
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	f9 01       	movw	r30, r18
    5cba:	e8 5f       	subi	r30, 0xF8	; 248
    5cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    5cbe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5cc0:	f9 01       	movw	r30, r18
    5cc2:	e2 5b       	subi	r30, 0xB2	; 178
    5cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    5cc6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5cc8:	f9 01       	movw	r30, r18
    5cca:	ec 56       	subi	r30, 0x6C	; 108
    5ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    5cce:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5cd0:	cc 23       	and	r28, r28
    5cd2:	b9 f0       	breq	.+46     	; 0x5d02 <digitalWrite+0x54>
    5cd4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5cd6:	81 11       	cpse	r24, r1
    5cd8:	59 df       	rcall	.-334    	; 0x5b8c <turnOffPWM>

	out = portOutputRegister(port);
    5cda:	ec 2f       	mov	r30, r28
    5cdc:	f0 e0       	ldi	r31, 0x00	; 0
    5cde:	ee 0f       	add	r30, r30
    5ce0:	ff 1f       	adc	r31, r31
    5ce2:	ec 50       	subi	r30, 0x0C	; 12
    5ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ce6:	a5 91       	lpm	r26, Z+
    5ce8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5cea:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5cec:	f8 94       	cli

	if (val == LOW) {
    5cee:	11 11       	cpse	r17, r1
    5cf0:	04 c0       	rjmp	.+8      	; 0x5cfa <digitalWrite+0x4c>
		*out &= ~bit;
    5cf2:	8c 91       	ld	r24, X
    5cf4:	d0 95       	com	r29
    5cf6:	d8 23       	and	r29, r24
    5cf8:	02 c0       	rjmp	.+4      	; 0x5cfe <digitalWrite+0x50>
	} else {
		*out |= bit;
    5cfa:	ec 91       	ld	r30, X
    5cfc:	de 2b       	or	r29, r30
    5cfe:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5d00:	9f bf       	out	0x3f, r25	; 63
}
    5d02:	df 91       	pop	r29
    5d04:	cf 91       	pop	r28
    5d06:	1f 91       	pop	r17
    5d08:	08 95       	ret

00005d0a <digitalRead>:

int digitalRead(uint8_t pin)
{
    5d0a:	cf 93       	push	r28
    5d0c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5d0e:	28 2f       	mov	r18, r24
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	f9 01       	movw	r30, r18
    5d14:	e8 5f       	subi	r30, 0xF8	; 248
    5d16:	fe 4f       	sbci	r31, 0xFE	; 254
    5d18:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5d1a:	f9 01       	movw	r30, r18
    5d1c:	e2 5b       	subi	r30, 0xB2	; 178
    5d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    5d20:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5d22:	f9 01       	movw	r30, r18
    5d24:	ec 56       	subi	r30, 0x6C	; 108
    5d26:	fe 4f       	sbci	r31, 0xFE	; 254
    5d28:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    5d2a:	cc 23       	and	r28, r28
    5d2c:	89 f0       	breq	.+34     	; 0x5d50 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5d2e:	81 11       	cpse	r24, r1
    5d30:	2d df       	rcall	.-422    	; 0x5b8c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5d32:	ec 2f       	mov	r30, r28
    5d34:	f0 e0       	ldi	r31, 0x00	; 0
    5d36:	ee 0f       	add	r30, r30
    5d38:	ff 1f       	adc	r31, r31
    5d3a:	e6 52       	subi	r30, 0x26	; 38
    5d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    5d3e:	a5 91       	lpm	r26, Z+
    5d40:	b4 91       	lpm	r27, Z
    5d42:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5d44:	ed 23       	and	r30, r29
    5d46:	81 e0       	ldi	r24, 0x01	; 1
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	21 f4       	brne	.+8      	; 0x5d54 <digitalRead+0x4a>
    5d4c:	80 e0       	ldi	r24, 0x00	; 0
    5d4e:	02 c0       	rjmp	.+4      	; 0x5d54 <digitalRead+0x4a>
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5d54:	df 91       	pop	r29
    5d56:	cf 91       	pop	r28
    5d58:	08 95       	ret

00005d5a <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5d5a:	4f 92       	push	r4
    5d5c:	5f 92       	push	r5
    5d5e:	6f 92       	push	r6
    5d60:	7f 92       	push	r7
    5d62:	af 92       	push	r10
    5d64:	bf 92       	push	r11
    5d66:	cf 92       	push	r12
    5d68:	df 92       	push	r13
    5d6a:	ef 92       	push	r14
    5d6c:	ff 92       	push	r15
    5d6e:	0f 93       	push	r16
    5d70:	1f 93       	push	r17
    5d72:	cf 93       	push	r28
    5d74:	df 93       	push	r29
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	29 01       	movw	r4, r18
    5d7c:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5d7e:	9b 01       	movw	r18, r22
    5d80:	ac 01       	movw	r20, r24
    5d82:	24 19       	sub	r18, r4
    5d84:	35 09       	sbc	r19, r5
    5d86:	46 09       	sbc	r20, r6
    5d88:	57 09       	sbc	r21, r7
    5d8a:	8a 89       	ldd	r24, Y+18	; 0x12
    5d8c:	9b 89       	ldd	r25, Y+19	; 0x13
    5d8e:	ac 89       	ldd	r26, Y+20	; 0x14
    5d90:	bd 89       	ldd	r27, Y+21	; 0x15
    5d92:	bc 01       	movw	r22, r24
    5d94:	cd 01       	movw	r24, r26
    5d96:	6a 19       	sub	r22, r10
    5d98:	7b 09       	sbc	r23, r11
    5d9a:	8c 09       	sbc	r24, r12
    5d9c:	9d 09       	sbc	r25, r13
    5d9e:	46 d2       	rcall	.+1164   	; 0x622c <__mulsi3>
    5da0:	a8 01       	movw	r20, r16
    5da2:	97 01       	movw	r18, r14
    5da4:	24 19       	sub	r18, r4
    5da6:	35 09       	sbc	r19, r5
    5da8:	46 09       	sbc	r20, r6
    5daa:	57 09       	sbc	r21, r7
    5dac:	70 d2       	rcall	.+1248   	; 0x628e <__divmodsi4>
    5dae:	ca 01       	movw	r24, r20
    5db0:	b9 01       	movw	r22, r18
    5db2:	6a 0d       	add	r22, r10
    5db4:	7b 1d       	adc	r23, r11
    5db6:	8c 1d       	adc	r24, r12
    5db8:	9d 1d       	adc	r25, r13
}
    5dba:	df 91       	pop	r29
    5dbc:	cf 91       	pop	r28
    5dbe:	1f 91       	pop	r17
    5dc0:	0f 91       	pop	r16
    5dc2:	ff 90       	pop	r15
    5dc4:	ef 90       	pop	r14
    5dc6:	df 90       	pop	r13
    5dc8:	cf 90       	pop	r12
    5dca:	bf 90       	pop	r11
    5dcc:	af 90       	pop	r10
    5dce:	7f 90       	pop	r7
    5dd0:	6f 90       	pop	r6
    5dd2:	5f 90       	pop	r5
    5dd4:	4f 90       	pop	r4
    5dd6:	08 95       	ret

00005dd8 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    5dd8:	08 95       	ret

00005dda <_ZN6StringD1Ev>:
    5dda:	fc 01       	movw	r30, r24
    5ddc:	80 81       	ld	r24, Z
    5dde:	91 81       	ldd	r25, Z+1	; 0x01
    5de0:	00 97       	sbiw	r24, 0x00	; 0
    5de2:	09 f0       	breq	.+2      	; 0x5de6 <_ZN6StringD1Ev+0xc>
    5de4:	29 c3       	rjmp	.+1618   	; 0x6438 <free>
    5de6:	08 95       	ret

00005de8 <_ZN6String10invalidateEv>:
    5de8:	cf 93       	push	r28
    5dea:	df 93       	push	r29
    5dec:	ec 01       	movw	r28, r24
    5dee:	88 81       	ld	r24, Y
    5df0:	99 81       	ldd	r25, Y+1	; 0x01
    5df2:	00 97       	sbiw	r24, 0x00	; 0
    5df4:	09 f0       	breq	.+2      	; 0x5df8 <_ZN6String10invalidateEv+0x10>
    5df6:	20 d3       	rcall	.+1600   	; 0x6438 <free>
    5df8:	19 82       	std	Y+1, r1	; 0x01
    5dfa:	18 82       	st	Y, r1
    5dfc:	1d 82       	std	Y+5, r1	; 0x05
    5dfe:	1c 82       	std	Y+4, r1	; 0x04
    5e00:	1b 82       	std	Y+3, r1	; 0x03
    5e02:	1a 82       	std	Y+2, r1	; 0x02
    5e04:	df 91       	pop	r29
    5e06:	cf 91       	pop	r28
    5e08:	08 95       	ret

00005e0a <_ZN6String12changeBufferEj>:
    5e0a:	0f 93       	push	r16
    5e0c:	1f 93       	push	r17
    5e0e:	cf 93       	push	r28
    5e10:	df 93       	push	r29
    5e12:	ec 01       	movw	r28, r24
    5e14:	8b 01       	movw	r16, r22
    5e16:	6f 5f       	subi	r22, 0xFF	; 255
    5e18:	7f 4f       	sbci	r23, 0xFF	; 255
    5e1a:	88 81       	ld	r24, Y
    5e1c:	99 81       	ldd	r25, Y+1	; 0x01
    5e1e:	95 d3       	rcall	.+1834   	; 0x654a <realloc>
    5e20:	00 97       	sbiw	r24, 0x00	; 0
    5e22:	31 f0       	breq	.+12     	; 0x5e30 <_ZN6String12changeBufferEj+0x26>
    5e24:	99 83       	std	Y+1, r25	; 0x01
    5e26:	88 83       	st	Y, r24
    5e28:	1b 83       	std	Y+3, r17	; 0x03
    5e2a:	0a 83       	std	Y+2, r16	; 0x02
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	01 c0       	rjmp	.+2      	; 0x5e32 <_ZN6String12changeBufferEj+0x28>
    5e30:	80 e0       	ldi	r24, 0x00	; 0
    5e32:	df 91       	pop	r29
    5e34:	cf 91       	pop	r28
    5e36:	1f 91       	pop	r17
    5e38:	0f 91       	pop	r16
    5e3a:	08 95       	ret

00005e3c <_ZN6String7reserveEj>:
    5e3c:	cf 93       	push	r28
    5e3e:	df 93       	push	r29
    5e40:	ec 01       	movw	r28, r24
    5e42:	88 81       	ld	r24, Y
    5e44:	99 81       	ldd	r25, Y+1	; 0x01
    5e46:	89 2b       	or	r24, r25
    5e48:	29 f0       	breq	.+10     	; 0x5e54 <_ZN6String7reserveEj+0x18>
    5e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e4e:	86 17       	cp	r24, r22
    5e50:	97 07       	cpc	r25, r23
    5e52:	58 f4       	brcc	.+22     	; 0x5e6a <_ZN6String7reserveEj+0x2e>
    5e54:	ce 01       	movw	r24, r28
    5e56:	d9 df       	rcall	.-78     	; 0x5e0a <_ZN6String12changeBufferEj>
    5e58:	88 23       	and	r24, r24
    5e5a:	41 f0       	breq	.+16     	; 0x5e6c <_ZN6String7reserveEj+0x30>
    5e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    5e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    5e60:	89 2b       	or	r24, r25
    5e62:	19 f4       	brne	.+6      	; 0x5e6a <_ZN6String7reserveEj+0x2e>
    5e64:	e8 81       	ld	r30, Y
    5e66:	f9 81       	ldd	r31, Y+1	; 0x01
    5e68:	10 82       	st	Z, r1
    5e6a:	81 e0       	ldi	r24, 0x01	; 1
    5e6c:	df 91       	pop	r29
    5e6e:	cf 91       	pop	r28
    5e70:	08 95       	ret

00005e72 <_ZN6String4copyEPKcj>:
    5e72:	ef 92       	push	r14
    5e74:	ff 92       	push	r15
    5e76:	0f 93       	push	r16
    5e78:	1f 93       	push	r17
    5e7a:	cf 93       	push	r28
    5e7c:	df 93       	push	r29
    5e7e:	ec 01       	movw	r28, r24
    5e80:	7b 01       	movw	r14, r22
    5e82:	8a 01       	movw	r16, r20
    5e84:	ba 01       	movw	r22, r20
    5e86:	da df       	rcall	.-76     	; 0x5e3c <_ZN6String7reserveEj>
    5e88:	81 11       	cpse	r24, r1
    5e8a:	03 c0       	rjmp	.+6      	; 0x5e92 <_ZN6String4copyEPKcj+0x20>
    5e8c:	ce 01       	movw	r24, r28
    5e8e:	ac df       	rcall	.-168    	; 0x5de8 <_ZN6String10invalidateEv>
    5e90:	06 c0       	rjmp	.+12     	; 0x5e9e <_ZN6String4copyEPKcj+0x2c>
    5e92:	1d 83       	std	Y+5, r17	; 0x05
    5e94:	0c 83       	std	Y+4, r16	; 0x04
    5e96:	b7 01       	movw	r22, r14
    5e98:	88 81       	ld	r24, Y
    5e9a:	99 81       	ldd	r25, Y+1	; 0x01
    5e9c:	5b d4       	rcall	.+2230   	; 0x6754 <strcpy>
    5e9e:	ce 01       	movw	r24, r28
    5ea0:	df 91       	pop	r29
    5ea2:	cf 91       	pop	r28
    5ea4:	1f 91       	pop	r17
    5ea6:	0f 91       	pop	r16
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	08 95       	ret

00005eae <_ZN6StringC1EPKc>:
    5eae:	fc 01       	movw	r30, r24
    5eb0:	11 82       	std	Z+1, r1	; 0x01
    5eb2:	10 82       	st	Z, r1
    5eb4:	13 82       	std	Z+3, r1	; 0x03
    5eb6:	12 82       	std	Z+2, r1	; 0x02
    5eb8:	15 82       	std	Z+5, r1	; 0x05
    5eba:	14 82       	std	Z+4, r1	; 0x04
    5ebc:	61 15       	cp	r22, r1
    5ebe:	71 05       	cpc	r23, r1
    5ec0:	49 f0       	breq	.+18     	; 0x5ed4 <_ZN6StringC1EPKc+0x26>
    5ec2:	fb 01       	movw	r30, r22
    5ec4:	01 90       	ld	r0, Z+
    5ec6:	00 20       	and	r0, r0
    5ec8:	e9 f7       	brne	.-6      	; 0x5ec4 <_ZN6StringC1EPKc+0x16>
    5eca:	31 97       	sbiw	r30, 0x01	; 1
    5ecc:	af 01       	movw	r20, r30
    5ece:	46 1b       	sub	r20, r22
    5ed0:	57 0b       	sbc	r21, r23
    5ed2:	cf cf       	rjmp	.-98     	; 0x5e72 <_ZN6String4copyEPKcj>
    5ed4:	08 95       	ret

00005ed6 <_ZN6String4moveERS_>:
    5ed6:	0f 93       	push	r16
    5ed8:	1f 93       	push	r17
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	8c 01       	movw	r16, r24
    5ee0:	eb 01       	movw	r28, r22
    5ee2:	fc 01       	movw	r30, r24
    5ee4:	80 81       	ld	r24, Z
    5ee6:	91 81       	ldd	r25, Z+1	; 0x01
    5ee8:	00 97       	sbiw	r24, 0x00	; 0
    5eea:	c1 f0       	breq	.+48     	; 0x5f1c <_ZN6String4moveERS_+0x46>
    5eec:	68 81       	ld	r22, Y
    5eee:	79 81       	ldd	r23, Y+1	; 0x01
    5ef0:	61 15       	cp	r22, r1
    5ef2:	71 05       	cpc	r23, r1
    5ef4:	91 f0       	breq	.+36     	; 0x5f1a <_ZN6String4moveERS_+0x44>
    5ef6:	2c ee       	ldi	r18, 0xEC	; 236
    5ef8:	3e e2       	ldi	r19, 0x2E	; 46
    5efa:	23 2b       	or	r18, r19
    5efc:	71 f0       	breq	.+28     	; 0x5f1a <_ZN6String4moveERS_+0x44>
    5efe:	42 81       	ldd	r20, Z+2	; 0x02
    5f00:	53 81       	ldd	r21, Z+3	; 0x03
    5f02:	2c 81       	ldd	r18, Y+4	; 0x04
    5f04:	3d 81       	ldd	r19, Y+5	; 0x05
    5f06:	42 17       	cp	r20, r18
    5f08:	53 07       	cpc	r21, r19
    5f0a:	38 f0       	brcs	.+14     	; 0x5f1a <_ZN6String4moveERS_+0x44>
    5f0c:	23 d4       	rcall	.+2118   	; 0x6754 <strcpy>
    5f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f10:	9d 81       	ldd	r25, Y+5	; 0x05
    5f12:	f8 01       	movw	r30, r16
    5f14:	95 83       	std	Z+5, r25	; 0x05
    5f16:	84 83       	std	Z+4, r24	; 0x04
    5f18:	12 c0       	rjmp	.+36     	; 0x5f3e <_ZN6String4moveERS_+0x68>
    5f1a:	8e d2       	rcall	.+1308   	; 0x6438 <free>
    5f1c:	88 81       	ld	r24, Y
    5f1e:	99 81       	ldd	r25, Y+1	; 0x01
    5f20:	f8 01       	movw	r30, r16
    5f22:	91 83       	std	Z+1, r25	; 0x01
    5f24:	80 83       	st	Z, r24
    5f26:	8a 81       	ldd	r24, Y+2	; 0x02
    5f28:	9b 81       	ldd	r25, Y+3	; 0x03
    5f2a:	93 83       	std	Z+3, r25	; 0x03
    5f2c:	82 83       	std	Z+2, r24	; 0x02
    5f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f30:	9d 81       	ldd	r25, Y+5	; 0x05
    5f32:	95 83       	std	Z+5, r25	; 0x05
    5f34:	84 83       	std	Z+4, r24	; 0x04
    5f36:	19 82       	std	Y+1, r1	; 0x01
    5f38:	18 82       	st	Y, r1
    5f3a:	1b 82       	std	Y+3, r1	; 0x03
    5f3c:	1a 82       	std	Y+2, r1	; 0x02
    5f3e:	1d 82       	std	Y+5, r1	; 0x05
    5f40:	1c 82       	std	Y+4, r1	; 0x04
    5f42:	df 91       	pop	r29
    5f44:	cf 91       	pop	r28
    5f46:	1f 91       	pop	r17
    5f48:	0f 91       	pop	r16
    5f4a:	08 95       	ret

00005f4c <_ZN6StringaSEOS_>:
    5f4c:	cf 93       	push	r28
    5f4e:	df 93       	push	r29
    5f50:	ec 01       	movw	r28, r24
    5f52:	86 17       	cp	r24, r22
    5f54:	97 07       	cpc	r25, r23
    5f56:	09 f0       	breq	.+2      	; 0x5f5a <_ZN6StringaSEOS_+0xe>
    5f58:	be df       	rcall	.-132    	; 0x5ed6 <_ZN6String4moveERS_>
    5f5a:	ce 01       	movw	r24, r28
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	08 95       	ret

00005f62 <_ZN6StringaSEPKc>:
    5f62:	cf 93       	push	r28
    5f64:	df 93       	push	r29
    5f66:	ec 01       	movw	r28, r24
    5f68:	61 15       	cp	r22, r1
    5f6a:	71 05       	cpc	r23, r1
    5f6c:	51 f0       	breq	.+20     	; 0x5f82 <_ZN6StringaSEPKc+0x20>
    5f6e:	fb 01       	movw	r30, r22
    5f70:	01 90       	ld	r0, Z+
    5f72:	00 20       	and	r0, r0
    5f74:	e9 f7       	brne	.-6      	; 0x5f70 <_ZN6StringaSEPKc+0xe>
    5f76:	31 97       	sbiw	r30, 0x01	; 1
    5f78:	af 01       	movw	r20, r30
    5f7a:	46 1b       	sub	r20, r22
    5f7c:	57 0b       	sbc	r21, r23
    5f7e:	79 df       	rcall	.-270    	; 0x5e72 <_ZN6String4copyEPKcj>
    5f80:	01 c0       	rjmp	.+2      	; 0x5f84 <_ZN6StringaSEPKc+0x22>
    5f82:	32 df       	rcall	.-412    	; 0x5de8 <_ZN6String10invalidateEv>
    5f84:	ce 01       	movw	r24, r28
    5f86:	df 91       	pop	r29
    5f88:	cf 91       	pop	r28
    5f8a:	08 95       	ret

00005f8c <_ZN6StringC1Ehh>:
    5f8c:	0f 93       	push	r16
    5f8e:	1f 93       	push	r17
    5f90:	cf 93       	push	r28
    5f92:	df 93       	push	r29
    5f94:	cd b7       	in	r28, 0x3d	; 61
    5f96:	de b7       	in	r29, 0x3e	; 62
    5f98:	29 97       	sbiw	r28, 0x09	; 9
    5f9a:	0f b6       	in	r0, 0x3f	; 63
    5f9c:	f8 94       	cli
    5f9e:	de bf       	out	0x3e, r29	; 62
    5fa0:	0f be       	out	0x3f, r0	; 63
    5fa2:	cd bf       	out	0x3d, r28	; 61
    5fa4:	8c 01       	movw	r16, r24
    5fa6:	86 2f       	mov	r24, r22
    5fa8:	f8 01       	movw	r30, r16
    5faa:	11 82       	std	Z+1, r1	; 0x01
    5fac:	10 82       	st	Z, r1
    5fae:	13 82       	std	Z+3, r1	; 0x03
    5fb0:	12 82       	std	Z+2, r1	; 0x02
    5fb2:	15 82       	std	Z+5, r1	; 0x05
    5fb4:	14 82       	std	Z+4, r1	; 0x04
    5fb6:	50 e0       	ldi	r21, 0x00	; 0
    5fb8:	be 01       	movw	r22, r28
    5fba:	6f 5f       	subi	r22, 0xFF	; 255
    5fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	f2 d3       	rcall	.+2020   	; 0x67a6 <utoa>
    5fc2:	be 01       	movw	r22, r28
    5fc4:	6f 5f       	subi	r22, 0xFF	; 255
    5fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    5fc8:	c8 01       	movw	r24, r16
    5fca:	cb df       	rcall	.-106    	; 0x5f62 <_ZN6StringaSEPKc>
    5fcc:	29 96       	adiw	r28, 0x09	; 9
    5fce:	0f b6       	in	r0, 0x3f	; 63
    5fd0:	f8 94       	cli
    5fd2:	de bf       	out	0x3e, r29	; 62
    5fd4:	0f be       	out	0x3f, r0	; 63
    5fd6:	cd bf       	out	0x3d, r28	; 61
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	1f 91       	pop	r17
    5fde:	0f 91       	pop	r16
    5fe0:	08 95       	ret

00005fe2 <_ZN6String6concatEPKcj>:
    5fe2:	ef 92       	push	r14
    5fe4:	ff 92       	push	r15
    5fe6:	0f 93       	push	r16
    5fe8:	1f 93       	push	r17
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	61 15       	cp	r22, r1
    5ff0:	71 05       	cpc	r23, r1
    5ff2:	11 f4       	brne	.+4      	; 0x5ff8 <_ZN6String6concatEPKcj+0x16>
    5ff4:	80 e0       	ldi	r24, 0x00	; 0
    5ff6:	1a c0       	rjmp	.+52     	; 0x602c <_ZN6String6concatEPKcj+0x4a>
    5ff8:	41 15       	cp	r20, r1
    5ffa:	51 05       	cpc	r21, r1
    5ffc:	b1 f0       	breq	.+44     	; 0x602a <_ZN6String6concatEPKcj+0x48>
    5ffe:	7b 01       	movw	r14, r22
    6000:	ec 01       	movw	r28, r24
    6002:	8c 81       	ldd	r24, Y+4	; 0x04
    6004:	9d 81       	ldd	r25, Y+5	; 0x05
    6006:	8a 01       	movw	r16, r20
    6008:	08 0f       	add	r16, r24
    600a:	19 1f       	adc	r17, r25
    600c:	b8 01       	movw	r22, r16
    600e:	ce 01       	movw	r24, r28
    6010:	15 df       	rcall	.-470    	; 0x5e3c <_ZN6String7reserveEj>
    6012:	88 23       	and	r24, r24
    6014:	79 f3       	breq	.-34     	; 0x5ff4 <_ZN6String6concatEPKcj+0x12>
    6016:	28 81       	ld	r18, Y
    6018:	39 81       	ldd	r19, Y+1	; 0x01
    601a:	8c 81       	ldd	r24, Y+4	; 0x04
    601c:	9d 81       	ldd	r25, Y+5	; 0x05
    601e:	b7 01       	movw	r22, r14
    6020:	82 0f       	add	r24, r18
    6022:	93 1f       	adc	r25, r19
    6024:	97 d3       	rcall	.+1838   	; 0x6754 <strcpy>
    6026:	1d 83       	std	Y+5, r17	; 0x05
    6028:	0c 83       	std	Y+4, r16	; 0x04
    602a:	81 e0       	ldi	r24, 0x01	; 1
    602c:	df 91       	pop	r29
    602e:	cf 91       	pop	r28
    6030:	1f 91       	pop	r17
    6032:	0f 91       	pop	r16
    6034:	ff 90       	pop	r15
    6036:	ef 90       	pop	r14
    6038:	08 95       	ret

0000603a <_ZN6String6concatERKS_>:
    603a:	fb 01       	movw	r30, r22
    603c:	44 81       	ldd	r20, Z+4	; 0x04
    603e:	55 81       	ldd	r21, Z+5	; 0x05
    6040:	60 81       	ld	r22, Z
    6042:	71 81       	ldd	r23, Z+1	; 0x01
    6044:	ce cf       	rjmp	.-100    	; 0x5fe2 <_ZN6String6concatEPKcj>

00006046 <_ZN6String6concatEc>:
    6046:	cf 93       	push	r28
    6048:	df 93       	push	r29
    604a:	1f 92       	push	r1
    604c:	1f 92       	push	r1
    604e:	cd b7       	in	r28, 0x3d	; 61
    6050:	de b7       	in	r29, 0x3e	; 62
    6052:	69 83       	std	Y+1, r22	; 0x01
    6054:	1a 82       	std	Y+2, r1	; 0x02
    6056:	41 e0       	ldi	r20, 0x01	; 1
    6058:	50 e0       	ldi	r21, 0x00	; 0
    605a:	be 01       	movw	r22, r28
    605c:	6f 5f       	subi	r22, 0xFF	; 255
    605e:	7f 4f       	sbci	r23, 0xFF	; 255
    6060:	c0 df       	rcall	.-128    	; 0x5fe2 <_ZN6String6concatEPKcj>
    6062:	0f 90       	pop	r0
    6064:	0f 90       	pop	r0
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	08 95       	ret

0000606c <_ZN6String6concatEi>:
    606c:	ef 92       	push	r14
    606e:	ff 92       	push	r15
    6070:	0f 93       	push	r16
    6072:	1f 93       	push	r17
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	28 97       	sbiw	r28, 0x08	; 8
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	7c 01       	movw	r14, r24
    608a:	cb 01       	movw	r24, r22
    608c:	4a e0       	ldi	r20, 0x0A	; 10
    608e:	8e 01       	movw	r16, r28
    6090:	0f 5f       	subi	r16, 0xFF	; 255
    6092:	1f 4f       	sbci	r17, 0xFF	; 255
    6094:	b8 01       	movw	r22, r16
    6096:	7d d3       	rcall	.+1786   	; 0x6792 <__itoa_ncheck>
    6098:	f8 01       	movw	r30, r16
    609a:	01 90       	ld	r0, Z+
    609c:	00 20       	and	r0, r0
    609e:	e9 f7       	brne	.-6      	; 0x609a <_ZN6String6concatEi+0x2e>
    60a0:	31 97       	sbiw	r30, 0x01	; 1
    60a2:	af 01       	movw	r20, r30
    60a4:	40 1b       	sub	r20, r16
    60a6:	51 0b       	sbc	r21, r17
    60a8:	b8 01       	movw	r22, r16
    60aa:	c7 01       	movw	r24, r14
    60ac:	9a df       	rcall	.-204    	; 0x5fe2 <_ZN6String6concatEPKcj>
    60ae:	28 96       	adiw	r28, 0x08	; 8
    60b0:	0f b6       	in	r0, 0x3f	; 63
    60b2:	f8 94       	cli
    60b4:	de bf       	out	0x3e, r29	; 62
    60b6:	0f be       	out	0x3f, r0	; 63
    60b8:	cd bf       	out	0x3d, r28	; 61
    60ba:	df 91       	pop	r29
    60bc:	cf 91       	pop	r28
    60be:	1f 91       	pop	r17
    60c0:	0f 91       	pop	r16
    60c2:	ff 90       	pop	r15
    60c4:	ef 90       	pop	r14
    60c6:	08 95       	ret

000060c8 <_ZNK6String9compareToERKS_>:
    60c8:	cf 93       	push	r28
    60ca:	df 93       	push	r29
    60cc:	dc 01       	movw	r26, r24
    60ce:	ed 91       	ld	r30, X+
    60d0:	fc 91       	ld	r31, X
    60d2:	eb 01       	movw	r28, r22
    60d4:	a8 81       	ld	r26, Y
    60d6:	b9 81       	ldd	r27, Y+1	; 0x01
    60d8:	30 97       	sbiw	r30, 0x00	; 0
    60da:	11 f0       	breq	.+4      	; 0x60e0 <_ZNK6String9compareToERKS_+0x18>
    60dc:	10 97       	sbiw	r26, 0x00	; 0
    60de:	c9 f4       	brne	.+50     	; 0x6112 <_ZNK6String9compareToERKS_+0x4a>
    60e0:	10 97       	sbiw	r26, 0x00	; 0
    60e2:	59 f0       	breq	.+22     	; 0x60fa <_ZNK6String9compareToERKS_+0x32>
    60e4:	eb 01       	movw	r28, r22
    60e6:	2c 81       	ldd	r18, Y+4	; 0x04
    60e8:	3d 81       	ldd	r19, Y+5	; 0x05
    60ea:	23 2b       	or	r18, r19
    60ec:	31 f0       	breq	.+12     	; 0x60fa <_ZNK6String9compareToERKS_+0x32>
    60ee:	8c 91       	ld	r24, X
    60f0:	90 e0       	ldi	r25, 0x00	; 0
    60f2:	91 95       	neg	r25
    60f4:	81 95       	neg	r24
    60f6:	91 09       	sbc	r25, r1
    60f8:	13 c0       	rjmp	.+38     	; 0x6120 <_ZNK6String9compareToERKS_+0x58>
    60fa:	30 97       	sbiw	r30, 0x00	; 0
    60fc:	79 f0       	breq	.+30     	; 0x611c <_ZNK6String9compareToERKS_+0x54>
    60fe:	dc 01       	movw	r26, r24
    6100:	14 96       	adiw	r26, 0x04	; 4
    6102:	8d 91       	ld	r24, X+
    6104:	9c 91       	ld	r25, X
    6106:	15 97       	sbiw	r26, 0x05	; 5
    6108:	89 2b       	or	r24, r25
    610a:	41 f0       	breq	.+16     	; 0x611c <_ZNK6String9compareToERKS_+0x54>
    610c:	80 81       	ld	r24, Z
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	07 c0       	rjmp	.+14     	; 0x6120 <_ZNK6String9compareToERKS_+0x58>
    6112:	bd 01       	movw	r22, r26
    6114:	cf 01       	movw	r24, r30
    6116:	df 91       	pop	r29
    6118:	cf 91       	pop	r28
    611a:	13 c3       	rjmp	.+1574   	; 0x6742 <strcmp>
    611c:	80 e0       	ldi	r24, 0x00	; 0
    611e:	90 e0       	ldi	r25, 0x00	; 0
    6120:	df 91       	pop	r29
    6122:	cf 91       	pop	r28
    6124:	08 95       	ret

00006126 <_ZNK6String6equalsERKS_>:
    6126:	fc 01       	movw	r30, r24
    6128:	44 81       	ldd	r20, Z+4	; 0x04
    612a:	55 81       	ldd	r21, Z+5	; 0x05
    612c:	fb 01       	movw	r30, r22
    612e:	24 81       	ldd	r18, Z+4	; 0x04
    6130:	35 81       	ldd	r19, Z+5	; 0x05
    6132:	42 17       	cp	r20, r18
    6134:	53 07       	cpc	r21, r19
    6136:	21 f4       	brne	.+8      	; 0x6140 <_ZNK6String6equalsERKS_+0x1a>
    6138:	c7 df       	rcall	.-114    	; 0x60c8 <_ZNK6String9compareToERKS_>
    613a:	21 e0       	ldi	r18, 0x01	; 1
    613c:	89 2b       	or	r24, r25
    613e:	09 f0       	breq	.+2      	; 0x6142 <_ZNK6String6equalsERKS_+0x1c>
    6140:	20 e0       	ldi	r18, 0x00	; 0
    6142:	82 2f       	mov	r24, r18
    6144:	08 95       	ret

00006146 <_ZNK6String6equalsEPKc>:
    6146:	fc 01       	movw	r30, r24
    6148:	24 81       	ldd	r18, Z+4	; 0x04
    614a:	35 81       	ldd	r19, Z+5	; 0x05
    614c:	23 2b       	or	r18, r19
    614e:	31 f4       	brne	.+12     	; 0x615c <_ZNK6String6equalsEPKc+0x16>
    6150:	21 e0       	ldi	r18, 0x01	; 1
    6152:	61 15       	cp	r22, r1
    6154:	71 05       	cpc	r23, r1
    6156:	99 f0       	breq	.+38     	; 0x617e <_ZNK6String6equalsEPKc+0x38>
    6158:	fb 01       	movw	r30, r22
    615a:	08 c0       	rjmp	.+16     	; 0x616c <_ZNK6String6equalsEPKc+0x26>
    615c:	fc 01       	movw	r30, r24
    615e:	80 81       	ld	r24, Z
    6160:	91 81       	ldd	r25, Z+1	; 0x01
    6162:	61 15       	cp	r22, r1
    6164:	71 05       	cpc	r23, r1
    6166:	31 f4       	brne	.+12     	; 0x6174 <_ZNK6String6equalsEPKc+0x2e>
    6168:	21 e0       	ldi	r18, 0x01	; 1
    616a:	fc 01       	movw	r30, r24
    616c:	80 81       	ld	r24, Z
    616e:	88 23       	and	r24, r24
    6170:	31 f0       	breq	.+12     	; 0x617e <_ZNK6String6equalsEPKc+0x38>
    6172:	04 c0       	rjmp	.+8      	; 0x617c <_ZNK6String6equalsEPKc+0x36>
    6174:	e6 d2       	rcall	.+1484   	; 0x6742 <strcmp>
    6176:	21 e0       	ldi	r18, 0x01	; 1
    6178:	89 2b       	or	r24, r25
    617a:	09 f0       	breq	.+2      	; 0x617e <_ZNK6String6equalsEPKc+0x38>
    617c:	20 e0       	ldi	r18, 0x00	; 0
    617e:	82 2f       	mov	r24, r18
    6180:	08 95       	ret

00006182 <_ZNK6String9substringEjj>:
    6182:	bf 92       	push	r11
    6184:	cf 92       	push	r12
    6186:	df 92       	push	r13
    6188:	ef 92       	push	r14
    618a:	ff 92       	push	r15
    618c:	0f 93       	push	r16
    618e:	1f 93       	push	r17
    6190:	cf 93       	push	r28
    6192:	df 93       	push	r29
    6194:	7c 01       	movw	r14, r24
    6196:	6b 01       	movw	r12, r22
    6198:	8a 01       	movw	r16, r20
    619a:	e9 01       	movw	r28, r18
    619c:	24 17       	cp	r18, r20
    619e:	35 07       	cpc	r19, r21
    61a0:	20 f4       	brcc	.+8      	; 0x61aa <_ZNK6String9substringEjj+0x28>
    61a2:	81 2f       	mov	r24, r17
    61a4:	89 01       	movw	r16, r18
    61a6:	c4 2f       	mov	r28, r20
    61a8:	d8 2f       	mov	r29, r24
    61aa:	6d e1       	ldi	r22, 0x1D	; 29
    61ac:	73 e0       	ldi	r23, 0x03	; 3
    61ae:	c7 01       	movw	r24, r14
    61b0:	7e de       	rcall	.-772    	; 0x5eae <_ZN6StringC1EPKc>
    61b2:	d6 01       	movw	r26, r12
    61b4:	14 96       	adiw	r26, 0x04	; 4
    61b6:	8d 91       	ld	r24, X+
    61b8:	9c 91       	ld	r25, X
    61ba:	15 97       	sbiw	r26, 0x05	; 5
    61bc:	08 17       	cp	r16, r24
    61be:	19 07       	cpc	r17, r25
    61c0:	c0 f4       	brcc	.+48     	; 0x61f2 <_ZNK6String9substringEjj+0x70>
    61c2:	8c 17       	cp	r24, r28
    61c4:	9d 07       	cpc	r25, r29
    61c6:	08 f4       	brcc	.+2      	; 0x61ca <_ZNK6String9substringEjj+0x48>
    61c8:	ec 01       	movw	r28, r24
    61ca:	d6 01       	movw	r26, r12
    61cc:	ed 91       	ld	r30, X+
    61ce:	fc 91       	ld	r31, X
    61d0:	11 97       	sbiw	r26, 0x01	; 1
    61d2:	ec 0f       	add	r30, r28
    61d4:	fd 1f       	adc	r31, r29
    61d6:	b0 80       	ld	r11, Z
    61d8:	10 82       	st	Z, r1
    61da:	6d 91       	ld	r22, X+
    61dc:	7c 91       	ld	r23, X
    61de:	60 0f       	add	r22, r16
    61e0:	71 1f       	adc	r23, r17
    61e2:	c7 01       	movw	r24, r14
    61e4:	be de       	rcall	.-644    	; 0x5f62 <_ZN6StringaSEPKc>
    61e6:	d6 01       	movw	r26, r12
    61e8:	ed 91       	ld	r30, X+
    61ea:	fc 91       	ld	r31, X
    61ec:	ec 0f       	add	r30, r28
    61ee:	fd 1f       	adc	r31, r29
    61f0:	b0 82       	st	Z, r11
    61f2:	c7 01       	movw	r24, r14
    61f4:	df 91       	pop	r29
    61f6:	cf 91       	pop	r28
    61f8:	1f 91       	pop	r17
    61fa:	0f 91       	pop	r16
    61fc:	ff 90       	pop	r15
    61fe:	ef 90       	pop	r14
    6200:	df 90       	pop	r13
    6202:	cf 90       	pop	r12
    6204:	bf 90       	pop	r11
    6206:	08 95       	ret

00006208 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    6208:	cf 93       	push	r28
    620a:	df 93       	push	r29
	if (!buffer) return;
    620c:	fc 01       	movw	r30, r24
    620e:	c0 81       	ld	r28, Z
    6210:	d1 81       	ldd	r29, Z+1	; 0x01
    6212:	20 97       	sbiw	r28, 0x00	; 0
    6214:	39 f0       	breq	.+14     	; 0x6224 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    6216:	88 81       	ld	r24, Y
    6218:	88 23       	and	r24, r24
    621a:	21 f0       	breq	.+8      	; 0x6224 <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	79 d2       	rcall	.+1266   	; 0x6712 <toupper>
    6220:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6222:	f9 cf       	rjmp	.-14     	; 0x6216 <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    6224:	df 91       	pop	r29
    6226:	cf 91       	pop	r28
    6228:	08 95       	ret

0000622a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    622a:	08 95       	ret

0000622c <__mulsi3>:
    622c:	db 01       	movw	r26, r22
    622e:	8f 93       	push	r24
    6230:	9f 93       	push	r25
    6232:	51 d0       	rcall	.+162    	; 0x62d6 <__muluhisi3>
    6234:	bf 91       	pop	r27
    6236:	af 91       	pop	r26
    6238:	a2 9f       	mul	r26, r18
    623a:	80 0d       	add	r24, r0
    623c:	91 1d       	adc	r25, r1
    623e:	a3 9f       	mul	r26, r19
    6240:	90 0d       	add	r25, r0
    6242:	b2 9f       	mul	r27, r18
    6244:	90 0d       	add	r25, r0
    6246:	11 24       	eor	r1, r1
    6248:	08 95       	ret

0000624a <__udivmodsi4>:
    624a:	a1 e2       	ldi	r26, 0x21	; 33
    624c:	1a 2e       	mov	r1, r26
    624e:	aa 1b       	sub	r26, r26
    6250:	bb 1b       	sub	r27, r27
    6252:	fd 01       	movw	r30, r26
    6254:	0d c0       	rjmp	.+26     	; 0x6270 <__udivmodsi4_ep>

00006256 <__udivmodsi4_loop>:
    6256:	aa 1f       	adc	r26, r26
    6258:	bb 1f       	adc	r27, r27
    625a:	ee 1f       	adc	r30, r30
    625c:	ff 1f       	adc	r31, r31
    625e:	a2 17       	cp	r26, r18
    6260:	b3 07       	cpc	r27, r19
    6262:	e4 07       	cpc	r30, r20
    6264:	f5 07       	cpc	r31, r21
    6266:	20 f0       	brcs	.+8      	; 0x6270 <__udivmodsi4_ep>
    6268:	a2 1b       	sub	r26, r18
    626a:	b3 0b       	sbc	r27, r19
    626c:	e4 0b       	sbc	r30, r20
    626e:	f5 0b       	sbc	r31, r21

00006270 <__udivmodsi4_ep>:
    6270:	66 1f       	adc	r22, r22
    6272:	77 1f       	adc	r23, r23
    6274:	88 1f       	adc	r24, r24
    6276:	99 1f       	adc	r25, r25
    6278:	1a 94       	dec	r1
    627a:	69 f7       	brne	.-38     	; 0x6256 <__udivmodsi4_loop>
    627c:	60 95       	com	r22
    627e:	70 95       	com	r23
    6280:	80 95       	com	r24
    6282:	90 95       	com	r25
    6284:	9b 01       	movw	r18, r22
    6286:	ac 01       	movw	r20, r24
    6288:	bd 01       	movw	r22, r26
    628a:	cf 01       	movw	r24, r30
    628c:	08 95       	ret

0000628e <__divmodsi4>:
    628e:	05 2e       	mov	r0, r21
    6290:	97 fb       	bst	r25, 7
    6292:	16 f4       	brtc	.+4      	; 0x6298 <__divmodsi4+0xa>
    6294:	00 94       	com	r0
    6296:	0f d0       	rcall	.+30     	; 0x62b6 <__negsi2>
    6298:	57 fd       	sbrc	r21, 7
    629a:	05 d0       	rcall	.+10     	; 0x62a6 <__divmodsi4_neg2>
    629c:	d6 df       	rcall	.-84     	; 0x624a <__udivmodsi4>
    629e:	07 fc       	sbrc	r0, 7
    62a0:	02 d0       	rcall	.+4      	; 0x62a6 <__divmodsi4_neg2>
    62a2:	46 f4       	brtc	.+16     	; 0x62b4 <__divmodsi4_exit>
    62a4:	08 c0       	rjmp	.+16     	; 0x62b6 <__negsi2>

000062a6 <__divmodsi4_neg2>:
    62a6:	50 95       	com	r21
    62a8:	40 95       	com	r20
    62aa:	30 95       	com	r19
    62ac:	21 95       	neg	r18
    62ae:	3f 4f       	sbci	r19, 0xFF	; 255
    62b0:	4f 4f       	sbci	r20, 0xFF	; 255
    62b2:	5f 4f       	sbci	r21, 0xFF	; 255

000062b4 <__divmodsi4_exit>:
    62b4:	08 95       	ret

000062b6 <__negsi2>:
    62b6:	90 95       	com	r25
    62b8:	80 95       	com	r24
    62ba:	70 95       	com	r23
    62bc:	61 95       	neg	r22
    62be:	7f 4f       	sbci	r23, 0xFF	; 255
    62c0:	8f 4f       	sbci	r24, 0xFF	; 255
    62c2:	9f 4f       	sbci	r25, 0xFF	; 255
    62c4:	08 95       	ret

000062c6 <__tablejump2__>:
    62c6:	ee 0f       	add	r30, r30
    62c8:	ff 1f       	adc	r31, r31
    62ca:	88 1f       	adc	r24, r24
    62cc:	8b bf       	out	0x3b, r24	; 59
    62ce:	07 90       	elpm	r0, Z+
    62d0:	f6 91       	elpm	r31, Z
    62d2:	e0 2d       	mov	r30, r0
    62d4:	19 94       	eijmp

000062d6 <__muluhisi3>:
    62d6:	09 d0       	rcall	.+18     	; 0x62ea <__umulhisi3>
    62d8:	a5 9f       	mul	r26, r21
    62da:	90 0d       	add	r25, r0
    62dc:	b4 9f       	mul	r27, r20
    62de:	90 0d       	add	r25, r0
    62e0:	a4 9f       	mul	r26, r20
    62e2:	80 0d       	add	r24, r0
    62e4:	91 1d       	adc	r25, r1
    62e6:	11 24       	eor	r1, r1
    62e8:	08 95       	ret

000062ea <__umulhisi3>:
    62ea:	a2 9f       	mul	r26, r18
    62ec:	b0 01       	movw	r22, r0
    62ee:	b3 9f       	mul	r27, r19
    62f0:	c0 01       	movw	r24, r0
    62f2:	a3 9f       	mul	r26, r19
    62f4:	70 0d       	add	r23, r0
    62f6:	81 1d       	adc	r24, r1
    62f8:	11 24       	eor	r1, r1
    62fa:	91 1d       	adc	r25, r1
    62fc:	b2 9f       	mul	r27, r18
    62fe:	70 0d       	add	r23, r0
    6300:	81 1d       	adc	r24, r1
    6302:	11 24       	eor	r1, r1
    6304:	91 1d       	adc	r25, r1
    6306:	08 95       	ret

00006308 <malloc>:
    6308:	0f 93       	push	r16
    630a:	1f 93       	push	r17
    630c:	cf 93       	push	r28
    630e:	df 93       	push	r29
    6310:	82 30       	cpi	r24, 0x02	; 2
    6312:	91 05       	cpc	r25, r1
    6314:	10 f4       	brcc	.+4      	; 0x631a <malloc+0x12>
    6316:	82 e0       	ldi	r24, 0x02	; 2
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <__flp>
    631e:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <__flp+0x1>
    6322:	20 e0       	ldi	r18, 0x00	; 0
    6324:	30 e0       	ldi	r19, 0x00	; 0
    6326:	a0 e0       	ldi	r26, 0x00	; 0
    6328:	b0 e0       	ldi	r27, 0x00	; 0
    632a:	30 97       	sbiw	r30, 0x00	; 0
    632c:	19 f1       	breq	.+70     	; 0x6374 <malloc+0x6c>
    632e:	40 81       	ld	r20, Z
    6330:	51 81       	ldd	r21, Z+1	; 0x01
    6332:	02 81       	ldd	r16, Z+2	; 0x02
    6334:	13 81       	ldd	r17, Z+3	; 0x03
    6336:	48 17       	cp	r20, r24
    6338:	59 07       	cpc	r21, r25
    633a:	c8 f0       	brcs	.+50     	; 0x636e <malloc+0x66>
    633c:	84 17       	cp	r24, r20
    633e:	95 07       	cpc	r25, r21
    6340:	69 f4       	brne	.+26     	; 0x635c <malloc+0x54>
    6342:	10 97       	sbiw	r26, 0x00	; 0
    6344:	31 f0       	breq	.+12     	; 0x6352 <malloc+0x4a>
    6346:	12 96       	adiw	r26, 0x02	; 2
    6348:	0c 93       	st	X, r16
    634a:	12 97       	sbiw	r26, 0x02	; 2
    634c:	13 96       	adiw	r26, 0x03	; 3
    634e:	1c 93       	st	X, r17
    6350:	27 c0       	rjmp	.+78     	; 0x63a0 <malloc+0x98>
    6352:	00 93 8e 05 	sts	0x058E, r16	; 0x80058e <__flp>
    6356:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <__flp+0x1>
    635a:	22 c0       	rjmp	.+68     	; 0x63a0 <malloc+0x98>
    635c:	21 15       	cp	r18, r1
    635e:	31 05       	cpc	r19, r1
    6360:	19 f0       	breq	.+6      	; 0x6368 <malloc+0x60>
    6362:	42 17       	cp	r20, r18
    6364:	53 07       	cpc	r21, r19
    6366:	18 f4       	brcc	.+6      	; 0x636e <malloc+0x66>
    6368:	9a 01       	movw	r18, r20
    636a:	bd 01       	movw	r22, r26
    636c:	ef 01       	movw	r28, r30
    636e:	df 01       	movw	r26, r30
    6370:	f8 01       	movw	r30, r16
    6372:	db cf       	rjmp	.-74     	; 0x632a <malloc+0x22>
    6374:	21 15       	cp	r18, r1
    6376:	31 05       	cpc	r19, r1
    6378:	f9 f0       	breq	.+62     	; 0x63b8 <malloc+0xb0>
    637a:	28 1b       	sub	r18, r24
    637c:	39 0b       	sbc	r19, r25
    637e:	24 30       	cpi	r18, 0x04	; 4
    6380:	31 05       	cpc	r19, r1
    6382:	80 f4       	brcc	.+32     	; 0x63a4 <malloc+0x9c>
    6384:	8a 81       	ldd	r24, Y+2	; 0x02
    6386:	9b 81       	ldd	r25, Y+3	; 0x03
    6388:	61 15       	cp	r22, r1
    638a:	71 05       	cpc	r23, r1
    638c:	21 f0       	breq	.+8      	; 0x6396 <malloc+0x8e>
    638e:	fb 01       	movw	r30, r22
    6390:	93 83       	std	Z+3, r25	; 0x03
    6392:	82 83       	std	Z+2, r24	; 0x02
    6394:	04 c0       	rjmp	.+8      	; 0x639e <malloc+0x96>
    6396:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <__flp+0x1>
    639a:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <__flp>
    639e:	fe 01       	movw	r30, r28
    63a0:	32 96       	adiw	r30, 0x02	; 2
    63a2:	44 c0       	rjmp	.+136    	; 0x642c <malloc+0x124>
    63a4:	fe 01       	movw	r30, r28
    63a6:	e2 0f       	add	r30, r18
    63a8:	f3 1f       	adc	r31, r19
    63aa:	81 93       	st	Z+, r24
    63ac:	91 93       	st	Z+, r25
    63ae:	22 50       	subi	r18, 0x02	; 2
    63b0:	31 09       	sbc	r19, r1
    63b2:	39 83       	std	Y+1, r19	; 0x01
    63b4:	28 83       	st	Y, r18
    63b6:	3a c0       	rjmp	.+116    	; 0x642c <malloc+0x124>
    63b8:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <__brkval>
    63bc:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <__brkval+0x1>
    63c0:	23 2b       	or	r18, r19
    63c2:	41 f4       	brne	.+16     	; 0x63d4 <malloc+0xcc>
    63c4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    63c8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    63cc:	30 93 8d 05 	sts	0x058D, r19	; 0x80058d <__brkval+0x1>
    63d0:	20 93 8c 05 	sts	0x058C, r18	; 0x80058c <__brkval>
    63d4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    63d8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    63dc:	21 15       	cp	r18, r1
    63de:	31 05       	cpc	r19, r1
    63e0:	41 f4       	brne	.+16     	; 0x63f2 <malloc+0xea>
    63e2:	2d b7       	in	r18, 0x3d	; 61
    63e4:	3e b7       	in	r19, 0x3e	; 62
    63e6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    63ea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    63ee:	24 1b       	sub	r18, r20
    63f0:	35 0b       	sbc	r19, r21
    63f2:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <__brkval>
    63f6:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <__brkval+0x1>
    63fa:	e2 17       	cp	r30, r18
    63fc:	f3 07       	cpc	r31, r19
    63fe:	a0 f4       	brcc	.+40     	; 0x6428 <malloc+0x120>
    6400:	2e 1b       	sub	r18, r30
    6402:	3f 0b       	sbc	r19, r31
    6404:	28 17       	cp	r18, r24
    6406:	39 07       	cpc	r19, r25
    6408:	78 f0       	brcs	.+30     	; 0x6428 <malloc+0x120>
    640a:	ac 01       	movw	r20, r24
    640c:	4e 5f       	subi	r20, 0xFE	; 254
    640e:	5f 4f       	sbci	r21, 0xFF	; 255
    6410:	24 17       	cp	r18, r20
    6412:	35 07       	cpc	r19, r21
    6414:	48 f0       	brcs	.+18     	; 0x6428 <malloc+0x120>
    6416:	4e 0f       	add	r20, r30
    6418:	5f 1f       	adc	r21, r31
    641a:	50 93 8d 05 	sts	0x058D, r21	; 0x80058d <__brkval+0x1>
    641e:	40 93 8c 05 	sts	0x058C, r20	; 0x80058c <__brkval>
    6422:	81 93       	st	Z+, r24
    6424:	91 93       	st	Z+, r25
    6426:	02 c0       	rjmp	.+4      	; 0x642c <malloc+0x124>
    6428:	e0 e0       	ldi	r30, 0x00	; 0
    642a:	f0 e0       	ldi	r31, 0x00	; 0
    642c:	cf 01       	movw	r24, r30
    642e:	df 91       	pop	r29
    6430:	cf 91       	pop	r28
    6432:	1f 91       	pop	r17
    6434:	0f 91       	pop	r16
    6436:	08 95       	ret

00006438 <free>:
    6438:	cf 93       	push	r28
    643a:	df 93       	push	r29
    643c:	00 97       	sbiw	r24, 0x00	; 0
    643e:	09 f4       	brne	.+2      	; 0x6442 <free+0xa>
    6440:	81 c0       	rjmp	.+258    	; 0x6544 <free+0x10c>
    6442:	fc 01       	movw	r30, r24
    6444:	32 97       	sbiw	r30, 0x02	; 2
    6446:	13 82       	std	Z+3, r1	; 0x03
    6448:	12 82       	std	Z+2, r1	; 0x02
    644a:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <__flp>
    644e:	b0 91 8f 05 	lds	r27, 0x058F	; 0x80058f <__flp+0x1>
    6452:	10 97       	sbiw	r26, 0x00	; 0
    6454:	81 f4       	brne	.+32     	; 0x6476 <free+0x3e>
    6456:	20 81       	ld	r18, Z
    6458:	31 81       	ldd	r19, Z+1	; 0x01
    645a:	82 0f       	add	r24, r18
    645c:	93 1f       	adc	r25, r19
    645e:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <__brkval>
    6462:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <__brkval+0x1>
    6466:	28 17       	cp	r18, r24
    6468:	39 07       	cpc	r19, r25
    646a:	51 f5       	brne	.+84     	; 0x64c0 <free+0x88>
    646c:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__brkval+0x1>
    6470:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__brkval>
    6474:	67 c0       	rjmp	.+206    	; 0x6544 <free+0x10c>
    6476:	ed 01       	movw	r28, r26
    6478:	20 e0       	ldi	r18, 0x00	; 0
    647a:	30 e0       	ldi	r19, 0x00	; 0
    647c:	ce 17       	cp	r28, r30
    647e:	df 07       	cpc	r29, r31
    6480:	40 f4       	brcc	.+16     	; 0x6492 <free+0x5a>
    6482:	4a 81       	ldd	r20, Y+2	; 0x02
    6484:	5b 81       	ldd	r21, Y+3	; 0x03
    6486:	9e 01       	movw	r18, r28
    6488:	41 15       	cp	r20, r1
    648a:	51 05       	cpc	r21, r1
    648c:	f1 f0       	breq	.+60     	; 0x64ca <free+0x92>
    648e:	ea 01       	movw	r28, r20
    6490:	f5 cf       	rjmp	.-22     	; 0x647c <free+0x44>
    6492:	d3 83       	std	Z+3, r29	; 0x03
    6494:	c2 83       	std	Z+2, r28	; 0x02
    6496:	40 81       	ld	r20, Z
    6498:	51 81       	ldd	r21, Z+1	; 0x01
    649a:	84 0f       	add	r24, r20
    649c:	95 1f       	adc	r25, r21
    649e:	c8 17       	cp	r28, r24
    64a0:	d9 07       	cpc	r29, r25
    64a2:	59 f4       	brne	.+22     	; 0x64ba <free+0x82>
    64a4:	88 81       	ld	r24, Y
    64a6:	99 81       	ldd	r25, Y+1	; 0x01
    64a8:	84 0f       	add	r24, r20
    64aa:	95 1f       	adc	r25, r21
    64ac:	02 96       	adiw	r24, 0x02	; 2
    64ae:	91 83       	std	Z+1, r25	; 0x01
    64b0:	80 83       	st	Z, r24
    64b2:	8a 81       	ldd	r24, Y+2	; 0x02
    64b4:	9b 81       	ldd	r25, Y+3	; 0x03
    64b6:	93 83       	std	Z+3, r25	; 0x03
    64b8:	82 83       	std	Z+2, r24	; 0x02
    64ba:	21 15       	cp	r18, r1
    64bc:	31 05       	cpc	r19, r1
    64be:	29 f4       	brne	.+10     	; 0x64ca <free+0x92>
    64c0:	f0 93 8f 05 	sts	0x058F, r31	; 0x80058f <__flp+0x1>
    64c4:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <__flp>
    64c8:	3d c0       	rjmp	.+122    	; 0x6544 <free+0x10c>
    64ca:	e9 01       	movw	r28, r18
    64cc:	fb 83       	std	Y+3, r31	; 0x03
    64ce:	ea 83       	std	Y+2, r30	; 0x02
    64d0:	49 91       	ld	r20, Y+
    64d2:	59 91       	ld	r21, Y+
    64d4:	c4 0f       	add	r28, r20
    64d6:	d5 1f       	adc	r29, r21
    64d8:	ec 17       	cp	r30, r28
    64da:	fd 07       	cpc	r31, r29
    64dc:	61 f4       	brne	.+24     	; 0x64f6 <free+0xbe>
    64de:	80 81       	ld	r24, Z
    64e0:	91 81       	ldd	r25, Z+1	; 0x01
    64e2:	84 0f       	add	r24, r20
    64e4:	95 1f       	adc	r25, r21
    64e6:	02 96       	adiw	r24, 0x02	; 2
    64e8:	e9 01       	movw	r28, r18
    64ea:	99 83       	std	Y+1, r25	; 0x01
    64ec:	88 83       	st	Y, r24
    64ee:	82 81       	ldd	r24, Z+2	; 0x02
    64f0:	93 81       	ldd	r25, Z+3	; 0x03
    64f2:	9b 83       	std	Y+3, r25	; 0x03
    64f4:	8a 83       	std	Y+2, r24	; 0x02
    64f6:	e0 e0       	ldi	r30, 0x00	; 0
    64f8:	f0 e0       	ldi	r31, 0x00	; 0
    64fa:	12 96       	adiw	r26, 0x02	; 2
    64fc:	8d 91       	ld	r24, X+
    64fe:	9c 91       	ld	r25, X
    6500:	13 97       	sbiw	r26, 0x03	; 3
    6502:	00 97       	sbiw	r24, 0x00	; 0
    6504:	19 f0       	breq	.+6      	; 0x650c <free+0xd4>
    6506:	fd 01       	movw	r30, r26
    6508:	dc 01       	movw	r26, r24
    650a:	f7 cf       	rjmp	.-18     	; 0x64fa <free+0xc2>
    650c:	8d 91       	ld	r24, X+
    650e:	9c 91       	ld	r25, X
    6510:	11 97       	sbiw	r26, 0x01	; 1
    6512:	9d 01       	movw	r18, r26
    6514:	2e 5f       	subi	r18, 0xFE	; 254
    6516:	3f 4f       	sbci	r19, 0xFF	; 255
    6518:	82 0f       	add	r24, r18
    651a:	93 1f       	adc	r25, r19
    651c:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <__brkval>
    6520:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <__brkval+0x1>
    6524:	28 17       	cp	r18, r24
    6526:	39 07       	cpc	r19, r25
    6528:	69 f4       	brne	.+26     	; 0x6544 <free+0x10c>
    652a:	30 97       	sbiw	r30, 0x00	; 0
    652c:	29 f4       	brne	.+10     	; 0x6538 <free+0x100>
    652e:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <__flp+0x1>
    6532:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <__flp>
    6536:	02 c0       	rjmp	.+4      	; 0x653c <free+0x104>
    6538:	13 82       	std	Z+3, r1	; 0x03
    653a:	12 82       	std	Z+2, r1	; 0x02
    653c:	b0 93 8d 05 	sts	0x058D, r27	; 0x80058d <__brkval+0x1>
    6540:	a0 93 8c 05 	sts	0x058C, r26	; 0x80058c <__brkval>
    6544:	df 91       	pop	r29
    6546:	cf 91       	pop	r28
    6548:	08 95       	ret

0000654a <realloc>:
    654a:	6f 92       	push	r6
    654c:	7f 92       	push	r7
    654e:	8f 92       	push	r8
    6550:	9f 92       	push	r9
    6552:	af 92       	push	r10
    6554:	bf 92       	push	r11
    6556:	cf 92       	push	r12
    6558:	df 92       	push	r13
    655a:	ef 92       	push	r14
    655c:	ff 92       	push	r15
    655e:	0f 93       	push	r16
    6560:	1f 93       	push	r17
    6562:	cf 93       	push	r28
    6564:	df 93       	push	r29
    6566:	00 97       	sbiw	r24, 0x00	; 0
    6568:	81 f4       	brne	.+32     	; 0x658a <realloc+0x40>
    656a:	cb 01       	movw	r24, r22
    656c:	df 91       	pop	r29
    656e:	cf 91       	pop	r28
    6570:	1f 91       	pop	r17
    6572:	0f 91       	pop	r16
    6574:	ff 90       	pop	r15
    6576:	ef 90       	pop	r14
    6578:	df 90       	pop	r13
    657a:	cf 90       	pop	r12
    657c:	bf 90       	pop	r11
    657e:	af 90       	pop	r10
    6580:	9f 90       	pop	r9
    6582:	8f 90       	pop	r8
    6584:	7f 90       	pop	r7
    6586:	6f 90       	pop	r6
    6588:	bf ce       	rjmp	.-642    	; 0x6308 <malloc>
    658a:	fc 01       	movw	r30, r24
    658c:	e6 0f       	add	r30, r22
    658e:	f7 1f       	adc	r31, r23
    6590:	9c 01       	movw	r18, r24
    6592:	22 50       	subi	r18, 0x02	; 2
    6594:	31 09       	sbc	r19, r1
    6596:	e2 17       	cp	r30, r18
    6598:	f3 07       	cpc	r31, r19
    659a:	08 f4       	brcc	.+2      	; 0x659e <realloc+0x54>
    659c:	a5 c0       	rjmp	.+330    	; 0x66e8 <realloc+0x19e>
    659e:	ec 01       	movw	r28, r24
    65a0:	d9 01       	movw	r26, r18
    65a2:	0d 91       	ld	r16, X+
    65a4:	1c 91       	ld	r17, X
    65a6:	11 97       	sbiw	r26, 0x01	; 1
    65a8:	06 17       	cp	r16, r22
    65aa:	17 07       	cpc	r17, r23
    65ac:	a8 f0       	brcs	.+42     	; 0x65d8 <realloc+0x8e>
    65ae:	05 30       	cpi	r16, 0x05	; 5
    65b0:	11 05       	cpc	r17, r1
    65b2:	08 f4       	brcc	.+2      	; 0x65b6 <realloc+0x6c>
    65b4:	97 c0       	rjmp	.+302    	; 0x66e4 <realloc+0x19a>
    65b6:	c8 01       	movw	r24, r16
    65b8:	04 97       	sbiw	r24, 0x04	; 4
    65ba:	86 17       	cp	r24, r22
    65bc:	97 07       	cpc	r25, r23
    65be:	08 f4       	brcc	.+2      	; 0x65c2 <realloc+0x78>
    65c0:	91 c0       	rjmp	.+290    	; 0x66e4 <realloc+0x19a>
    65c2:	02 50       	subi	r16, 0x02	; 2
    65c4:	11 09       	sbc	r17, r1
    65c6:	06 1b       	sub	r16, r22
    65c8:	17 0b       	sbc	r17, r23
    65ca:	01 93       	st	Z+, r16
    65cc:	11 93       	st	Z+, r17
    65ce:	6d 93       	st	X+, r22
    65d0:	7c 93       	st	X, r23
    65d2:	cf 01       	movw	r24, r30
    65d4:	31 df       	rcall	.-414    	; 0x6438 <free>
    65d6:	86 c0       	rjmp	.+268    	; 0x66e4 <realloc+0x19a>
    65d8:	5b 01       	movw	r10, r22
    65da:	a0 1a       	sub	r10, r16
    65dc:	b1 0a       	sbc	r11, r17
    65de:	4c 01       	movw	r8, r24
    65e0:	80 0e       	add	r8, r16
    65e2:	91 1e       	adc	r9, r17
    65e4:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <__flp>
    65e8:	b0 91 8f 05 	lds	r27, 0x058F	; 0x80058f <__flp+0x1>
    65ec:	61 2c       	mov	r6, r1
    65ee:	71 2c       	mov	r7, r1
    65f0:	e1 2c       	mov	r14, r1
    65f2:	f1 2c       	mov	r15, r1
    65f4:	10 97       	sbiw	r26, 0x00	; 0
    65f6:	09 f4       	brne	.+2      	; 0x65fa <realloc+0xb0>
    65f8:	46 c0       	rjmp	.+140    	; 0x6686 <realloc+0x13c>
    65fa:	8d 91       	ld	r24, X+
    65fc:	9c 91       	ld	r25, X
    65fe:	11 97       	sbiw	r26, 0x01	; 1
    6600:	a8 15       	cp	r26, r8
    6602:	b9 05       	cpc	r27, r9
    6604:	b1 f5       	brne	.+108    	; 0x6672 <realloc+0x128>
    6606:	6c 01       	movw	r12, r24
    6608:	42 e0       	ldi	r20, 0x02	; 2
    660a:	c4 0e       	add	r12, r20
    660c:	d1 1c       	adc	r13, r1
    660e:	ca 14       	cp	r12, r10
    6610:	db 04       	cpc	r13, r11
    6612:	78 f1       	brcs	.+94     	; 0x6672 <realloc+0x128>
    6614:	4c 01       	movw	r8, r24
    6616:	8a 18       	sub	r8, r10
    6618:	9b 08       	sbc	r9, r11
    661a:	64 01       	movw	r12, r8
    661c:	42 e0       	ldi	r20, 0x02	; 2
    661e:	c4 0e       	add	r12, r20
    6620:	d1 1c       	adc	r13, r1
    6622:	12 96       	adiw	r26, 0x02	; 2
    6624:	bc 90       	ld	r11, X
    6626:	12 97       	sbiw	r26, 0x02	; 2
    6628:	13 96       	adiw	r26, 0x03	; 3
    662a:	ac 91       	ld	r26, X
    662c:	b5 e0       	ldi	r27, 0x05	; 5
    662e:	cb 16       	cp	r12, r27
    6630:	d1 04       	cpc	r13, r1
    6632:	40 f0       	brcs	.+16     	; 0x6644 <realloc+0xfa>
    6634:	b2 82       	std	Z+2, r11	; 0x02
    6636:	a3 83       	std	Z+3, r26	; 0x03
    6638:	91 82       	std	Z+1, r9	; 0x01
    663a:	80 82       	st	Z, r8
    663c:	d9 01       	movw	r26, r18
    663e:	6d 93       	st	X+, r22
    6640:	7c 93       	st	X, r23
    6642:	09 c0       	rjmp	.+18     	; 0x6656 <realloc+0x10c>
    6644:	0e 5f       	subi	r16, 0xFE	; 254
    6646:	1f 4f       	sbci	r17, 0xFF	; 255
    6648:	80 0f       	add	r24, r16
    664a:	91 1f       	adc	r25, r17
    664c:	f9 01       	movw	r30, r18
    664e:	91 83       	std	Z+1, r25	; 0x01
    6650:	80 83       	st	Z, r24
    6652:	eb 2d       	mov	r30, r11
    6654:	fa 2f       	mov	r31, r26
    6656:	e1 14       	cp	r14, r1
    6658:	f1 04       	cpc	r15, r1
    665a:	31 f0       	breq	.+12     	; 0x6668 <realloc+0x11e>
    665c:	d7 01       	movw	r26, r14
    665e:	13 96       	adiw	r26, 0x03	; 3
    6660:	fc 93       	st	X, r31
    6662:	ee 93       	st	-X, r30
    6664:	12 97       	sbiw	r26, 0x02	; 2
    6666:	3e c0       	rjmp	.+124    	; 0x66e4 <realloc+0x19a>
    6668:	f0 93 8f 05 	sts	0x058F, r31	; 0x80058f <__flp+0x1>
    666c:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <__flp>
    6670:	39 c0       	rjmp	.+114    	; 0x66e4 <realloc+0x19a>
    6672:	68 16       	cp	r6, r24
    6674:	79 06       	cpc	r7, r25
    6676:	08 f4       	brcc	.+2      	; 0x667a <realloc+0x130>
    6678:	3c 01       	movw	r6, r24
    667a:	7d 01       	movw	r14, r26
    667c:	12 96       	adiw	r26, 0x02	; 2
    667e:	0d 90       	ld	r0, X+
    6680:	bc 91       	ld	r27, X
    6682:	a0 2d       	mov	r26, r0
    6684:	b7 cf       	rjmp	.-146    	; 0x65f4 <realloc+0xaa>
    6686:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <__brkval>
    668a:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <__brkval+0x1>
    668e:	88 16       	cp	r8, r24
    6690:	99 06       	cpc	r9, r25
    6692:	e1 f4       	brne	.+56     	; 0x66cc <realloc+0x182>
    6694:	66 16       	cp	r6, r22
    6696:	77 06       	cpc	r7, r23
    6698:	c8 f4       	brcc	.+50     	; 0x66cc <realloc+0x182>
    669a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    669e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    66a2:	00 97       	sbiw	r24, 0x00	; 0
    66a4:	41 f4       	brne	.+16     	; 0x66b6 <realloc+0x16c>
    66a6:	8d b7       	in	r24, 0x3d	; 61
    66a8:	9e b7       	in	r25, 0x3e	; 62
    66aa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    66ae:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    66b2:	84 1b       	sub	r24, r20
    66b4:	95 0b       	sbc	r25, r21
    66b6:	e8 17       	cp	r30, r24
    66b8:	f9 07       	cpc	r31, r25
    66ba:	b0 f4       	brcc	.+44     	; 0x66e8 <realloc+0x19e>
    66bc:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__brkval+0x1>
    66c0:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__brkval>
    66c4:	f9 01       	movw	r30, r18
    66c6:	71 83       	std	Z+1, r23	; 0x01
    66c8:	60 83       	st	Z, r22
    66ca:	0c c0       	rjmp	.+24     	; 0x66e4 <realloc+0x19a>
    66cc:	cb 01       	movw	r24, r22
    66ce:	1c de       	rcall	.-968    	; 0x6308 <malloc>
    66d0:	7c 01       	movw	r14, r24
    66d2:	00 97       	sbiw	r24, 0x00	; 0
    66d4:	49 f0       	breq	.+18     	; 0x66e8 <realloc+0x19e>
    66d6:	a8 01       	movw	r20, r16
    66d8:	be 01       	movw	r22, r28
    66da:	23 d0       	rcall	.+70     	; 0x6722 <memcpy>
    66dc:	ce 01       	movw	r24, r28
    66de:	ac de       	rcall	.-680    	; 0x6438 <free>
    66e0:	c7 01       	movw	r24, r14
    66e2:	04 c0       	rjmp	.+8      	; 0x66ec <realloc+0x1a2>
    66e4:	ce 01       	movw	r24, r28
    66e6:	02 c0       	rjmp	.+4      	; 0x66ec <realloc+0x1a2>
    66e8:	80 e0       	ldi	r24, 0x00	; 0
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	df 91       	pop	r29
    66ee:	cf 91       	pop	r28
    66f0:	1f 91       	pop	r17
    66f2:	0f 91       	pop	r16
    66f4:	ff 90       	pop	r15
    66f6:	ef 90       	pop	r14
    66f8:	df 90       	pop	r13
    66fa:	cf 90       	pop	r12
    66fc:	bf 90       	pop	r11
    66fe:	af 90       	pop	r10
    6700:	9f 90       	pop	r9
    6702:	8f 90       	pop	r8
    6704:	7f 90       	pop	r7
    6706:	6f 90       	pop	r6
    6708:	08 95       	ret

0000670a <abort>:
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	f8 94       	cli
    6710:	7d c0       	rjmp	.+250    	; 0x680c <__do_global_dtors>

00006712 <toupper>:
    6712:	91 11       	cpse	r25, r1
    6714:	08 95       	ret
    6716:	81 56       	subi	r24, 0x61	; 97
    6718:	8a 51       	subi	r24, 0x1A	; 26
    671a:	08 f4       	brcc	.+2      	; 0x671e <toupper+0xc>
    671c:	80 52       	subi	r24, 0x20	; 32
    671e:	85 58       	subi	r24, 0x85	; 133
    6720:	08 95       	ret

00006722 <memcpy>:
    6722:	fb 01       	movw	r30, r22
    6724:	dc 01       	movw	r26, r24
    6726:	02 c0       	rjmp	.+4      	; 0x672c <memcpy+0xa>
    6728:	01 90       	ld	r0, Z+
    672a:	0d 92       	st	X+, r0
    672c:	41 50       	subi	r20, 0x01	; 1
    672e:	50 40       	sbci	r21, 0x00	; 0
    6730:	d8 f7       	brcc	.-10     	; 0x6728 <memcpy+0x6>
    6732:	08 95       	ret

00006734 <memset>:
    6734:	dc 01       	movw	r26, r24
    6736:	01 c0       	rjmp	.+2      	; 0x673a <memset+0x6>
    6738:	6d 93       	st	X+, r22
    673a:	41 50       	subi	r20, 0x01	; 1
    673c:	50 40       	sbci	r21, 0x00	; 0
    673e:	e0 f7       	brcc	.-8      	; 0x6738 <memset+0x4>
    6740:	08 95       	ret

00006742 <strcmp>:
    6742:	fb 01       	movw	r30, r22
    6744:	dc 01       	movw	r26, r24
    6746:	8d 91       	ld	r24, X+
    6748:	01 90       	ld	r0, Z+
    674a:	80 19       	sub	r24, r0
    674c:	01 10       	cpse	r0, r1
    674e:	d9 f3       	breq	.-10     	; 0x6746 <strcmp+0x4>
    6750:	99 0b       	sbc	r25, r25
    6752:	08 95       	ret

00006754 <strcpy>:
    6754:	fb 01       	movw	r30, r22
    6756:	dc 01       	movw	r26, r24
    6758:	01 90       	ld	r0, Z+
    675a:	0d 92       	st	X+, r0
    675c:	00 20       	and	r0, r0
    675e:	e1 f7       	brne	.-8      	; 0x6758 <strcpy+0x4>
    6760:	08 95       	ret

00006762 <strlen>:
    6762:	fc 01       	movw	r30, r24
    6764:	01 90       	ld	r0, Z+
    6766:	00 20       	and	r0, r0
    6768:	e9 f7       	brne	.-6      	; 0x6764 <strlen+0x2>
    676a:	80 95       	com	r24
    676c:	90 95       	com	r25
    676e:	8e 0f       	add	r24, r30
    6770:	9f 1f       	adc	r25, r31
    6772:	08 95       	ret

00006774 <strncpy>:
    6774:	fb 01       	movw	r30, r22
    6776:	dc 01       	movw	r26, r24
    6778:	41 50       	subi	r20, 0x01	; 1
    677a:	50 40       	sbci	r21, 0x00	; 0
    677c:	48 f0       	brcs	.+18     	; 0x6790 <strncpy+0x1c>
    677e:	01 90       	ld	r0, Z+
    6780:	0d 92       	st	X+, r0
    6782:	00 20       	and	r0, r0
    6784:	c9 f7       	brne	.-14     	; 0x6778 <strncpy+0x4>
    6786:	01 c0       	rjmp	.+2      	; 0x678a <strncpy+0x16>
    6788:	1d 92       	st	X+, r1
    678a:	41 50       	subi	r20, 0x01	; 1
    678c:	50 40       	sbci	r21, 0x00	; 0
    678e:	e0 f7       	brcc	.-8      	; 0x6788 <strncpy+0x14>
    6790:	08 95       	ret

00006792 <__itoa_ncheck>:
    6792:	bb 27       	eor	r27, r27
    6794:	4a 30       	cpi	r20, 0x0A	; 10
    6796:	31 f4       	brne	.+12     	; 0x67a4 <__itoa_ncheck+0x12>
    6798:	99 23       	and	r25, r25
    679a:	22 f4       	brpl	.+8      	; 0x67a4 <__itoa_ncheck+0x12>
    679c:	bd e2       	ldi	r27, 0x2D	; 45
    679e:	90 95       	com	r25
    67a0:	81 95       	neg	r24
    67a2:	9f 4f       	sbci	r25, 0xFF	; 255
    67a4:	0b c0       	rjmp	.+22     	; 0x67bc <__utoa_common>

000067a6 <utoa>:
    67a6:	45 32       	cpi	r20, 0x25	; 37
    67a8:	51 05       	cpc	r21, r1
    67aa:	18 f4       	brcc	.+6      	; 0x67b2 <utoa+0xc>
    67ac:	42 30       	cpi	r20, 0x02	; 2
    67ae:	08 f0       	brcs	.+2      	; 0x67b2 <utoa+0xc>
    67b0:	04 c0       	rjmp	.+8      	; 0x67ba <__utoa_ncheck>
    67b2:	fb 01       	movw	r30, r22
    67b4:	10 82       	st	Z, r1
    67b6:	cb 01       	movw	r24, r22
    67b8:	08 95       	ret

000067ba <__utoa_ncheck>:
    67ba:	bb 27       	eor	r27, r27

000067bc <__utoa_common>:
    67bc:	fb 01       	movw	r30, r22
    67be:	55 27       	eor	r21, r21
    67c0:	aa 27       	eor	r26, r26
    67c2:	88 0f       	add	r24, r24
    67c4:	99 1f       	adc	r25, r25
    67c6:	aa 1f       	adc	r26, r26
    67c8:	a4 17       	cp	r26, r20
    67ca:	10 f0       	brcs	.+4      	; 0x67d0 <__utoa_common+0x14>
    67cc:	a4 1b       	sub	r26, r20
    67ce:	83 95       	inc	r24
    67d0:	50 51       	subi	r21, 0x10	; 16
    67d2:	b9 f7       	brne	.-18     	; 0x67c2 <__utoa_common+0x6>
    67d4:	a0 5d       	subi	r26, 0xD0	; 208
    67d6:	aa 33       	cpi	r26, 0x3A	; 58
    67d8:	08 f0       	brcs	.+2      	; 0x67dc <__utoa_common+0x20>
    67da:	a9 5d       	subi	r26, 0xD9	; 217
    67dc:	a1 93       	st	Z+, r26
    67de:	00 97       	sbiw	r24, 0x00	; 0
    67e0:	79 f7       	brne	.-34     	; 0x67c0 <__utoa_common+0x4>
    67e2:	b1 11       	cpse	r27, r1
    67e4:	b1 93       	st	Z+, r27
    67e6:	11 92       	st	Z+, r1
    67e8:	cb 01       	movw	r24, r22
    67ea:	00 c0       	rjmp	.+0      	; 0x67ec <strrev>

000067ec <strrev>:
    67ec:	dc 01       	movw	r26, r24
    67ee:	fc 01       	movw	r30, r24
    67f0:	67 2f       	mov	r22, r23
    67f2:	71 91       	ld	r23, Z+
    67f4:	77 23       	and	r23, r23
    67f6:	e1 f7       	brne	.-8      	; 0x67f0 <strrev+0x4>
    67f8:	32 97       	sbiw	r30, 0x02	; 2
    67fa:	04 c0       	rjmp	.+8      	; 0x6804 <strrev+0x18>
    67fc:	7c 91       	ld	r23, X
    67fe:	6d 93       	st	X+, r22
    6800:	70 83       	st	Z, r23
    6802:	62 91       	ld	r22, -Z
    6804:	ae 17       	cp	r26, r30
    6806:	bf 07       	cpc	r27, r31
    6808:	c8 f3       	brcs	.-14     	; 0x67fc <strrev+0x10>
    680a:	08 95       	ret

0000680c <__do_global_dtors>:
    680c:	11 e0       	ldi	r17, 0x01	; 1
    680e:	c7 e1       	ldi	r28, 0x17	; 23
    6810:	d1 e0       	ldi	r29, 0x01	; 1
    6812:	00 e0       	ldi	r16, 0x00	; 0
    6814:	05 c0       	rjmp	.+10     	; 0x6820 <__do_global_dtors+0x14>
    6816:	80 2f       	mov	r24, r16
    6818:	fe 01       	movw	r30, r28
    681a:	55 dd       	rcall	.-1366   	; 0x62c6 <__tablejump2__>
    681c:	21 96       	adiw	r28, 0x01	; 1
    681e:	01 1d       	adc	r16, r1
    6820:	c8 31       	cpi	r28, 0x18	; 24
    6822:	d1 07       	cpc	r29, r17
    6824:	80 e0       	ldi	r24, 0x00	; 0
    6826:	08 07       	cpc	r16, r24
    6828:	b1 f7       	brne	.-20     	; 0x6816 <__do_global_dtors+0xa>
    682a:	f8 94       	cli

0000682c <__stop_program>:
    682c:	ff cf       	rjmp	.-2      	; 0x682c <__stop_program>
