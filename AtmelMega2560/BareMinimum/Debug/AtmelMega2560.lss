
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800200  00006e66  00006efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000266  0080034a  0080034a  00007044  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007074  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e28  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019e8d  00000000  00000000  00007edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043f3  00000000  00000000  00021d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000811a  00000000  00000000  0002615c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000036d8  00000000  00000000  0002e278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000062f7  00000000  00000000  00031950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c49b  00000000  00000000  00037c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d98  00000000  00000000  000440e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 58 1f 	jmp	0x3eb0	; 0x3eb0 <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c1 2f 	jmp	0x5f82	; 0x5f82 <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__vector_25>
      68:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fc 30       	cpi	r31, 0x0C	; 12
      e6:	ff 30       	cpi	r31, 0x0F	; 15
      e8:	ee 30       	cpi	r30, 0x0E	; 14
      ea:	f2 30       	cpi	r31, 0x02	; 2
      ec:	f8 30       	cpi	r31, 0x08	; 8
      ee:	36 31       	cpi	r19, 0x16	; 22
      f0:	03 31       	cpi	r16, 0x13	; 19
      f2:	07 31       	cpi	r16, 0x17	; 23
      f4:	0d 31       	cpi	r16, 0x1D	; 29
      f6:	11 31       	cpi	r17, 0x11	; 17
      f8:	15 31       	cpi	r17, 0x15	; 21
      fa:	1b 31       	cpi	r17, 0x1B	; 27
      fc:	1f 31       	cpi	r17, 0x1F	; 31
      fe:	23 31       	cpi	r18, 0x13	; 19
     100:	36 31       	cpi	r19, 0x16	; 22
     102:	29 31       	cpi	r18, 0x19	; 25
     104:	2d 31       	cpi	r18, 0x1D	; 29
     106:	31 31       	cpi	r19, 0x11	; 17

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	2c 08       	sbc	r2, r12
     22a:	ff 2a       	or	r15, r31
     22c:	8f 2e       	mov	r8, r31

0000022e <__ctors_end>:
     22e:	38 08       	sbc	r3, r8

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e6 e6       	ldi	r30, 0x66	; 102
     248:	fe e6       	ldi	r31, 0x6E	; 110
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	aa 34       	cpi	r26, 0x4A	; 74
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	aa e4       	ldi	r26, 0x4A	; 74
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a0 3b       	cpi	r26, 0xB0	; 176
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <main>
     28e:	0c 94 22 37 	jmp	0x6e44	; 0x6e44 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	1f 92       	push	r1
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	fc 01       	movw	r30, r24
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <_ZN6StringpLEc+0x6>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	6b 81       	ldd	r22, Y+3	; 0x03
     2ce:	0e 94 3f 33 	call	0x667e	; 0x667e <_ZN6String6concatEc>
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <_ZN6StringpLEi>:
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZN6StringpLEi+0x6>
     2e8:	1f 92       	push	r1
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	7c 83       	std	Y+4, r23	; 0x04
     2f4:	6b 83       	std	Y+3, r22	; 0x03
     2f6:	2b 81       	ldd	r18, Y+3	; 0x03
     2f8:	3c 81       	ldd	r19, Y+4	; 0x04
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	b9 01       	movw	r22, r18
     300:	0e 94 52 33 	call	0x66a4	; 0x66a4 <_ZN6String6concatEi>
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <_ZNK6StringeqERKS_+0x6>
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	7c 83       	std	Y+4, r23	; 0x04
     328:	6b 83       	std	Y+3, r22	; 0x03
     32a:	2b 81       	ldd	r18, Y+3	; 0x03
     32c:	3c 81       	ldd	r19, Y+4	; 0x04
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	b9 01       	movw	r22, r18
     334:	0e 94 af 33 	call	0x675e	; 0x675e <_ZNK6String6equalsERKS_>
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <_ZNK6StringeqEPKc>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <_ZNK6StringeqEPKc+0x6>
     34c:	1f 92       	push	r1
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	7c 83       	std	Y+4, r23	; 0x04
     358:	6b 83       	std	Y+3, r22	; 0x03
     35a:	2b 81       	ldd	r18, Y+3	; 0x03
     35c:	3c 81       	ldd	r19, Y+4	; 0x04
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	b9 01       	movw	r22, r18
     364:	0e 94 bf 33 	call	0x677e	; 0x677e <_ZNK6String6equalsEPKc>
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZNK6String9substringEj+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZNK6String9substringEj+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	7c 83       	std	Y+4, r23	; 0x04
     388:	6b 83       	std	Y+3, r22	; 0x03
     38a:	5e 83       	std	Y+6, r21	; 0x06
     38c:	4d 83       	std	Y+5, r20	; 0x05
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	fc 01       	movw	r30, r24
     394:	24 81       	ldd	r18, Z+4	; 0x04
     396:	35 81       	ldd	r19, Z+5	; 0x05
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	4d 81       	ldd	r20, Y+5	; 0x05
     39e:	5e 81       	ldd	r21, Y+6	; 0x06
     3a0:	6b 81       	ldd	r22, Y+3	; 0x03
     3a2:	7c 81       	ldd	r23, Y+4	; 0x04
     3a4:	0e 94 dd 33 	call	0x67ba	; 0x67ba <_ZNK6String9substringEjj>
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	26 96       	adiw	r28, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <_ZN5Print5writeEPKc+0xa>
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	7c 83       	std	Y+4, r23	; 0x04
     3d4:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	9c 81       	ldd	r25, Y+4	; 0x04
     3da:	89 2b       	or	r24, r25
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <_ZN5Print5writeEPKc+0x26>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	15 c0       	rjmp	.+42     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
      return write((const uint8_t *)str, strlen(str));
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	02 96       	adiw	r24, 0x02	; 2
     3f0:	fc 01       	movw	r30, r24
     3f2:	00 81       	ld	r16, Z
     3f4:	11 81       	ldd	r17, Z+1	; 0x01
     3f6:	8b 81       	ldd	r24, Y+3	; 0x03
     3f8:	9c 81       	ldd	r25, Y+4	; 0x04
     3fa:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <strlen>
     3fe:	ac 01       	movw	r20, r24
     400:	2b 81       	ldd	r18, Y+3	; 0x03
     402:	3c 81       	ldd	r19, Y+4	; 0x04
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	b9 01       	movw	r22, r18
     40a:	f8 01       	movw	r30, r16
     40c:	19 95       	eicall
    }
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	00 d0       	rcall	.+0      	; 0x426 <_ZN14HardwareSerial5beginEm+0x6>
     426:	00 d0       	rcall	.+0      	; 0x428 <_ZN14HardwareSerial5beginEm+0x8>
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	4b 83       	std	Y+3, r20	; 0x03
     432:	5c 83       	std	Y+4, r21	; 0x04
     434:	6d 83       	std	Y+5, r22	; 0x05
     436:	7e 83       	std	Y+6, r23	; 0x06
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	ad 81       	ldd	r26, Y+5	; 0x05
     43e:	be 81       	ldd	r27, Y+6	; 0x06
     440:	e9 81       	ldd	r30, Y+1	; 0x01
     442:	fa 81       	ldd	r31, Y+2	; 0x02
     444:	26 e0       	ldi	r18, 0x06	; 6
     446:	ac 01       	movw	r20, r24
     448:	bd 01       	movw	r22, r26
     44a:	cf 01       	movw	r24, r30
     44c:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <_ZN14HardwareSerial5beginEmh>
     450:	00 00       	nop
     452:	26 96       	adiw	r28, 0x06	; 6
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	1f 92       	push	r1
     46a:	1f 92       	push	r1
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	1f 92       	push	r1
     486:	1f 92       	push	r1
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	27 ec       	ldi	r18, 0xC7	; 199
     492:	32 e0       	ldi	r19, 0x02	; 2
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	fc 01       	movw	r30, r24
     49a:	31 83       	std	Z+1, r19	; 0x01
     49c:	20 83       	st	Z, r18
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	89 2b       	or	r24, r25
     4a4:	21 f0       	breq	.+8      	; 0x4ae <_ZN15Adafruit_SensorD1Ev+0x2e>
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZdlPv>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <_ZN15Adafruit_SensorD0Ev>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	1f 92       	push	r1
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	d9 df       	rcall	.-78     	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZdlPv>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     4f0:	00 00       	nop
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	00 d0       	rcall	.+0      	; 0x504 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	7c 83       	std	Y+4, r23	; 0x04
     510:	6b 83       	std	Y+3, r22	; 0x03
     512:	27 ec       	ldi	r18, 0xC7	; 199
     514:	32 e0       	ldi	r19, 0x02	; 2
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	31 83       	std	Z+1, r19	; 0x01
     51e:	20 83       	st	Z, r18
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	fc 01       	movw	r30, r24
     526:	22 81       	ldd	r18, Z+2	; 0x02
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	22 83       	std	Z+2, r18	; 0x02
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	00 d0       	rcall	.+0      	; 0x546 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     546:	1f 92       	push	r1
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	7c 83       	std	Y+4, r23	; 0x04
     552:	6b 83       	std	Y+3, r22	; 0x03
     554:	2b 81       	ldd	r18, Y+3	; 0x03
     556:	3c 81       	ldd	r19, Y+4	; 0x04
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	b9 01       	movw	r22, r18
     55e:	cf df       	rcall	.-98     	; 0x4fe <_ZN15Adafruit_SensorC1ERKS_>
     560:	23 ee       	ldi	r18, 0xE3	; 227
     562:	32 e0       	ldi	r19, 0x02	; 2
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	9a 81       	ldd	r25, Y+2	; 0x02
     568:	fc 01       	movw	r30, r24
     56a:	31 83       	std	Z+1, r19	; 0x01
     56c:	20 83       	st	Z, r18
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	23 81       	ldd	r18, Z+3	; 0x03
     576:	34 81       	ldd	r19, Z+4	; 0x04
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	fc 01       	movw	r30, r24
     57e:	34 83       	std	Z+4, r19	; 0x04
     580:	23 83       	std	Z+3, r18	; 0x03
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	fc 01       	movw	r30, r24
     588:	85 81       	ldd	r24, Z+5	; 0x05
     58a:	96 81       	ldd	r25, Z+6	; 0x06
     58c:	a7 81       	ldd	r26, Z+7	; 0x07
     58e:	b0 85       	ldd	r27, Z+8	; 0x08
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	3a 81       	ldd	r19, Y+2	; 0x02
     594:	f9 01       	movw	r30, r18
     596:	85 83       	std	Z+5, r24	; 0x05
     598:	96 83       	std	Z+6, r25	; 0x06
     59a:	a7 83       	std	Z+7, r26	; 0x07
     59c:	b0 87       	std	Z+8, r27	; 0x08
     59e:	00 00       	nop
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <_ZN11DHT_Unified11temperatureEv+0x6>
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	7c 83       	std	Y+4, r23	; 0x04
     5c0:	6b 83       	std	Y+3, r22	; 0x03
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	9c 81       	ldd	r25, Y+4	; 0x04
     5c6:	9c 01       	movw	r18, r24
     5c8:	2c 5e       	subi	r18, 0xEC	; 236
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	b9 01       	movw	r22, r18
     5d2:	b6 df       	rcall	.-148    	; 0x540 <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     5ec:	1f 92       	push	r1
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	89 83       	std	Y+1, r24	; 0x01
     5f6:	7c 83       	std	Y+4, r23	; 0x04
     5f8:	6b 83       	std	Y+3, r22	; 0x03
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	b9 01       	movw	r22, r18
     604:	7c df       	rcall	.-264    	; 0x4fe <_ZN15Adafruit_SensorC1ERKS_>
     606:	25 ed       	ldi	r18, 0xD5	; 213
     608:	32 e0       	ldi	r19, 0x02	; 2
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	fc 01       	movw	r30, r24
     610:	31 83       	std	Z+1, r19	; 0x01
     612:	20 83       	st	Z, r18
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	23 81       	ldd	r18, Z+3	; 0x03
     61c:	34 81       	ldd	r19, Z+4	; 0x04
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	fc 01       	movw	r30, r24
     624:	34 83       	std	Z+4, r19	; 0x04
     626:	23 83       	std	Z+3, r18	; 0x03
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	fc 01       	movw	r30, r24
     62e:	85 81       	ldd	r24, Z+5	; 0x05
     630:	96 81       	ldd	r25, Z+6	; 0x06
     632:	a7 81       	ldd	r26, Z+7	; 0x07
     634:	b0 85       	ldd	r27, Z+8	; 0x08
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	f9 01       	movw	r30, r18
     63c:	85 83       	std	Z+5, r24	; 0x05
     63e:	96 83       	std	Z+6, r25	; 0x06
     640:	a7 83       	std	Z+7, r26	; 0x07
     642:	b0 87       	std	Z+8, r27	; 0x08
     644:	00 00       	nop
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	00 d0       	rcall	.+0      	; 0x65a <_ZN11DHT_Unified8humidityEv+0x6>
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	7c 83       	std	Y+4, r23	; 0x04
     666:	6b 83       	std	Y+3, r22	; 0x03
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	9c 01       	movw	r18, r24
     66e:	23 5e       	subi	r18, 0xE3	; 227
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	b9 01       	movw	r22, r18
     678:	b6 df       	rcall	.-148    	; 0x5e6 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <_ZN7TwoWire5writeEi+0x6>
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	7c 83       	std	Y+4, r23	; 0x04
     69e:	6b 83       	std	Y+3, r22	; 0x03
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 81       	ld	r18, Z
     6ae:	31 81       	ldd	r19, Z+1	; 0x01
     6b0:	4b 81       	ldd	r20, Y+3	; 0x03
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	64 2f       	mov	r22, r20
     6b8:	f9 01       	movw	r30, r18
     6ba:	19 95       	eicall
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	eb 97       	sbiw	r28, 0x3b	; 59
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	55 e2       	ldi	r21, 0x25	; 37
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	95 e0       	ldi	r25, 0x05	; 5
     6ea:	9a de       	rcall	.-716    	; 0x420 <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     6ec:	8a ef       	ldi	r24, 0xFA	; 250
     6ee:	94 e0       	ldi	r25, 0x04	; 4
     6f0:	0e 94 4a 28 	call	0x5094	; 0x5094 <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     6f4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6f8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     702:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     706:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     710:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     714:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     71e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     722:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	d1 d2       	rcall	.+1442   	; 0xcd2 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     730:	86 e5       	ldi	r24, 0x56	; 86
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     738:	ce 01       	movw	r24, r28
     73a:	0b 96       	adiw	r24, 0x0b	; 11
     73c:	66 e5       	ldi	r22, 0x56	; 86
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	36 df       	rcall	.-404    	; 0x5ae <_ZN11DHT_Unified11temperatureEv>
     742:	9e 01       	movw	r18, r28
     744:	2c 5e       	subi	r18, 0xEC	; 236
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	ce 01       	movw	r24, r28
     74a:	0b 96       	adiw	r24, 0x0b	; 11
     74c:	b9 01       	movw	r22, r18
     74e:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     752:	ce 01       	movw	r24, r28
     754:	0b 96       	adiw	r24, 0x0b	; 11
     756:	1a d4       	rcall	.+2100   	; 0xf8c <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     758:	ce 01       	movw	r24, r28
     75a:	02 96       	adiw	r24, 0x02	; 2
     75c:	66 e5       	ldi	r22, 0x56	; 86
     75e:	73 e0       	ldi	r23, 0x03	; 3
     760:	79 df       	rcall	.-270    	; 0x654 <_ZN11DHT_Unified8humidityEv>
     762:	9e 01       	movw	r18, r28
     764:	2c 5e       	subi	r18, 0xEC	; 236
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	ce 01       	movw	r24, r28
     76a:	02 96       	adiw	r24, 0x02	; 2
     76c:	b9 01       	movw	r22, r18
     76e:	0e 94 af 11 	call	0x235e	; 0x235e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     772:	ce 01       	movw	r24, r28
     774:	02 96       	adiw	r24, 0x02	; 2
     776:	3d d4       	rcall	.+2170   	; 0xff2 <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     778:	88 ad       	ldd	r24, Y+56	; 0x38
     77a:	99 ad       	ldd	r25, Y+57	; 0x39
     77c:	aa ad       	ldd	r26, Y+58	; 0x3a
     77e:	bb ad       	ldd	r27, Y+59	; 0x3b
     780:	28 ee       	ldi	r18, 0xE8	; 232
     782:	33 e0       	ldi	r19, 0x03	; 3
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 63 34 	call	0x68c6	; 0x68c6 <__divmodsi4>
     790:	da 01       	movw	r26, r20
     792:	c9 01       	movw	r24, r18
     794:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <delayMS>
     798:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <delayMS+0x1>
     79c:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <delayMS+0x2>
     7a0:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	95 e0       	ldi	r25, 0x05	; 5
     7a8:	5d de       	rcall	.-838    	; 0x464 <_ZN14HardwareSerialcvbEv>
     7aa:	98 2f       	mov	r25, r24
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	89 27       	eor	r24, r25
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <setup+0xec>
     7b4:	f7 cf       	rjmp	.-18     	; 0x7a4 <setup+0xda>
  SPI.begin();         // Init SPI bus
     7b6:	0e 94 bf 23 	call	0x477e	; 0x477e <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     7ba:	86 e8       	ldi	r24, 0x86	; 134
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 a2 18 	call	0x3144	; 0x3144 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7c2:	19 82       	std	Y+1, r1	; 0x01
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	86 30       	cpi	r24, 0x06	; 6
     7c8:	60 f4       	brcc	.+24     	; 0x7e2 <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	8c 56       	subi	r24, 0x6C	; 108
     7d2:	9c 4f       	sbci	r25, 0xFC	; 252
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	f1 cf       	rjmp	.-30     	; 0x7c4 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     7e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     7e6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     7ea:	bc 01       	movw	r22, r24
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 ea       	ldi	r24, 0xA0	; 160
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 c9 21 	call	0x4392	; 0x4392 <_ZN5Servo5writeEi>
#pragma endregion Servo Motor
 
 
#pragma region LCD Display

  lcd.init();                      // initialize the lcd
     800:	8a e4       	ldi	r24, 0x4A	; 74
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 2d 13 	call	0x265a	; 0x265a <_ZN17LiquidCrystal_I2C4initEv>
  lcd.init();
     808:	8a e4       	ldi	r24, 0x4A	; 74
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	0e 94 2d 13 	call	0x265a	; 0x265a <_ZN17LiquidCrystal_I2C4initEv>
  // Print a message to the LCD.
  lcd.backlight();
     810:	8a e4       	ldi	r24, 0x4A	; 74
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN17LiquidCrystal_I2C9backlightEv>

#pragma endregion LCD Display
}
     818:	00 00       	nop
     81a:	eb 96       	adiw	r28, 0x3b	; 59
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <loop>:

void loop()
{
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	c3 54       	subi	r28, 0x43	; 67
     838:	d1 09       	sbc	r29, r1
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     844:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <delayMS>
     848:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <delayMS+0x1>
     84c:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <delayMS+0x2>
     850:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <delayMS+0x3>
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     85c:	ce 01       	movw	r24, r28
     85e:	41 96       	adiw	r24, 0x11	; 17
     860:	66 e5       	ldi	r22, 0x56	; 86
     862:	73 e0       	ldi	r23, 0x03	; 3
     864:	a4 de       	rcall	.-696    	; 0x5ae <_ZN11DHT_Unified11temperatureEv>
     866:	9e 01       	movw	r18, r28
     868:	26 5e       	subi	r18, 0xE6	; 230
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	ce 01       	movw	r24, r28
     86e:	41 96       	adiw	r24, 0x11	; 17
     870:	b9 01       	movw	r22, r18
     872:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     876:	ce 01       	movw	r24, r28
     878:	41 96       	adiw	r24, 0x11	; 17
     87a:	88 d3       	rcall	.+1808   	; 0xf8c <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     87c:	8e a5       	ldd	r24, Y+46	; 0x2e
     87e:	9f a5       	ldd	r25, Y+47	; 0x2f
     880:	a8 a9       	ldd	r26, Y+48	; 0x30
     882:	b9 a9       	ldd	r27, Y+49	; 0x31
     884:	11 e0       	ldi	r17, 0x01	; 1
     886:	9c 01       	movw	r18, r24
     888:	ad 01       	movw	r20, r26
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	0e 94 b6 2c 	call	0x596c	; 0x596c <__unordsf2>
     892:	88 23       	and	r24, r24
     894:	09 f4       	brne	.+2      	; 0x898 <loop+0x6c>
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	11 23       	and	r17, r17
     89a:	29 f0       	breq	.+10     	; 0x8a6 <loop+0x7a>
	{
		DhtSencorTemp = 0;
     89c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <DhtSencorTemp+0x1>
     8a0:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <DhtSencorTemp>
     8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <loop+0x96>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     8a6:	8e a5       	ldd	r24, Y+46	; 0x2e
     8a8:	9f a5       	ldd	r25, Y+47	; 0x2f
     8aa:	a8 a9       	ldd	r26, Y+48	; 0x30
     8ac:	b9 a9       	ldd	r27, Y+49	; 0x31
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__fixsfsi>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <DhtSencorTemp+0x1>
     8be:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     8c2:	ce 01       	movw	r24, r28
     8c4:	08 96       	adiw	r24, 0x08	; 8
     8c6:	66 e5       	ldi	r22, 0x56	; 86
     8c8:	73 e0       	ldi	r23, 0x03	; 3
     8ca:	c4 de       	rcall	.-632    	; 0x654 <_ZN11DHT_Unified8humidityEv>
     8cc:	9e 01       	movw	r18, r28
     8ce:	26 5e       	subi	r18, 0xE6	; 230
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	ce 01       	movw	r24, r28
     8d4:	08 96       	adiw	r24, 0x08	; 8
     8d6:	b9 01       	movw	r22, r18
     8d8:	0e 94 56 11 	call	0x22ac	; 0x22ac <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     8dc:	ce 01       	movw	r24, r28
     8de:	08 96       	adiw	r24, 0x08	; 8
     8e0:	88 d3       	rcall	.+1808   	; 0xff2 <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     8e2:	8e a5       	ldd	r24, Y+46	; 0x2e
     8e4:	9f a5       	ldd	r25, Y+47	; 0x2f
     8e6:	a8 a9       	ldd	r26, Y+48	; 0x30
     8e8:	b9 a9       	ldd	r27, Y+49	; 0x31
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	9c 01       	movw	r18, r24
     8ee:	ad 01       	movw	r20, r26
     8f0:	bc 01       	movw	r22, r24
     8f2:	cd 01       	movw	r24, r26
     8f4:	0e 94 b6 2c 	call	0x596c	; 0x596c <__unordsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <loop+0xd2>
     8fc:	10 e0       	ldi	r17, 0x00	; 0
     8fe:	11 23       	and	r17, r17
     900:	29 f0       	breq	.+10     	; 0x90c <loop+0xe0>
	{
		DhtSencorHum = 0;
     902:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <DhtSencorHum+0x1>
     906:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <DhtSencorHum>
     90a:	0e c0       	rjmp	.+28     	; 0x928 <loop+0xfc>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     90c:	8e a5       	ldd	r24, Y+46	; 0x2e
     90e:	9f a5       	ldd	r25, Y+47	; 0x2f
     910:	a8 a9       	ldd	r26, Y+48	; 0x30
     912:	b9 a9       	ldd	r27, Y+49	; 0x31
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__fixsfsi>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <DhtSencorHum+0x1>
     924:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <DhtSencorHum>
	}
	
#pragma endregion DHT Humidity

	// Alarm the user if conditions are critical
	if (DhtSencorTemp > 27 || DhtSencorHum > 70)
     928:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     92c:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     930:	4c 97       	sbiw	r24, 0x1c	; 28
     932:	3c f4       	brge	.+14     	; 0x942 <loop+0x116>
     934:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     938:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     93c:	87 34       	cpi	r24, 0x47	; 71
     93e:	91 05       	cpc	r25, r1
     940:	e4 f0       	brlt	.+56     	; 0x97a <loop+0x14e>
	{
		if (DhtSencorTemp > 27)
     942:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     946:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     94a:	4c 97       	sbiw	r24, 0x1c	; 28
     94c:	34 f0       	brlt	.+12     	; 0x95a <loop+0x12e>
		{
			Serial.println("ALARM: The temperature is to high");
     94e:	6e e0       	ldi	r22, 0x0E	; 14
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	95 e0       	ldi	r25, 0x05	; 5
     956:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN5Print7printlnEPKc>
		}
		if (DhtSencorHum > 70)
     95a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     95e:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     962:	87 34       	cpi	r24, 0x47	; 71
     964:	91 05       	cpc	r25, r1
     966:	34 f0       	brlt	.+12     	; 0x974 <loop+0x148>
		{
			Serial.println("ALARM: Humidity levels is to high");
     968:	60 e3       	ldi	r22, 0x30	; 48
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN5Print7printlnEPKc>
		}
		makeBipSound(3); // ALARM sound
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	31 d2       	rcall	.+1122   	; 0xddc <_Z12makeBipSoundi>

#pragma region LCD Display

	// Print a message to the LCD.

	lcd.setCursor(3,0);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	8a e4       	ldi	r24, 0x4A	; 74
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(DhtSencorTemp);
     986:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     98a:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     98e:	4a e0       	ldi	r20, 0x0A	; 10
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	bc 01       	movw	r22, r24
     994:	8a e4       	ldi	r24, 0x4A	; 74
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <_ZN5Print5printEii>
#pragma endregion LCD Display

	// Send values to MKR WIFI 110 board
#pragma region Master Writer/Slave Receiver
  
  Wire.beginTransmission(4);		// transmit to device #4
     99c:	64 e0       	ldi	r22, 0x04	; 4
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	8a ef       	ldi	r24, 0xFA	; 250
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     9a8:	62 e5       	ldi	r22, 0x52	; 82
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	8a ef       	ldi	r24, 0xFA	; 250
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	06 dd       	rcall	.-1524   	; 0x3be <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     9b2:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     9b6:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     9ba:	bc 01       	movw	r22, r24
     9bc:	8a ef       	ldi	r24, 0xFA	; 250
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	65 de       	rcall	.-822    	; 0x68c <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     9c2:	8a ef       	ldi	r24, 0xFA	; 250
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     9ca:	64 e0       	ldi	r22, 0x04	; 4
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	8a ef       	ldi	r24, 0xFA	; 250
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");				// sends some bytes
     9d6:	69 e5       	ldi	r22, 0x59	; 89
     9d8:	72 e0       	ldi	r23, 0x02	; 2
     9da:	8a ef       	ldi	r24, 0xFA	; 250
     9dc:	94 e0       	ldi	r25, 0x04	; 4
  Wire.write(DhtSencorHum);		    // sends some bytes
     9de:	ef dc       	rcall	.-1570   	; 0x3be <_ZN5Print5writeEPKc>
     9e0:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     9e4:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     9e8:	bc 01       	movw	r22, r24
     9ea:	8a ef       	ldi	r24, 0xFA	; 250
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	4e de       	rcall	.-868    	; 0x68c <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     9f0:	8a ef       	ldi	r24, 0xFA	; 250
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	0e 94 72 29 	call	0x52e4	; 0x52e4 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4
     9f8:	47 e0       	ldi	r20, 0x07	; 7
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	64 e0       	ldi	r22, 0x04	; 4
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	8a ef       	ldi	r24, 0xFA	; 250
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	0e 94 02 29 	call	0x5204	; 0x5204 <_ZN7TwoWire11requestFromEii>

	String keyword =  "";
     a08:	ce 01       	movw	r24, r28
     a0a:	ce 96       	adiw	r24, 0x3e	; 62
     a0c:	6f e5       	ldi	r22, 0x5F	; 95
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN6StringC1EPKc>
	// slave may send less than requested
	while (Wire.available()) 
     a14:	8a ef       	ldi	r24, 0xFA	; 250
     a16:	94 e0       	ldi	r25, 0x04	; 4
     a18:	0e 94 02 2a 	call	0x5404	; 0x5404 <_ZN7TwoWire9availableEv>
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	89 2b       	or	r24, r25
     a20:	09 f4       	brne	.+2      	; 0xa24 <loop+0x1f8>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	22 23       	and	r18, r18
	{ 
		char request_c = Wire.read();		// receive a byte as character
     a26:	51 f0       	breq	.+20     	; 0xa3c <loop+0x210>
     a28:	8a ef       	ldi	r24, 0xFA	; 250
     a2a:	94 e0       	ldi	r25, 0x04	; 4
     a2c:	0e 94 1b 2a 	call	0x5436	; 0x5436 <_ZN7TwoWire4readEv>
		keyword += request_c;
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	ce 01       	movw	r24, r28
     a34:	ce 96       	adiw	r24, 0x3e	; 62
     a36:	69 81       	ldd	r22, Y+1	; 0x01
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
	// slave may send less than requested
	while (Wire.available()) 
     a38:	3f dc       	rcall	.-1922   	; 0x2b8 <_ZN6StringpLEc>
	{ 
		char request_c = Wire.read();		// receive a byte as character
		keyword += request_c;
	}
	keyword += Wire.read();        // receive byte as an integer
     a3a:	ec cf       	rjmp	.-40     	; 0xa14 <loop+0x1e8>
     a3c:	8a ef       	ldi	r24, 0xFA	; 250
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	0e 94 1b 2a 	call	0x5436	; 0x5436 <_ZN7TwoWire4readEv>
     a44:	9c 01       	movw	r18, r24
     a46:	ce 01       	movw	r24, r28
     a48:	ce 96       	adiw	r24, 0x3e	; 62
     a4a:	b9 01       	movw	r22, r18
	
	// Removes the last char in the received string
	 keyword = keyword.substring(0, keyword.length() - 1);
     a4c:	4a dc       	rcall	.-1900   	; 0x2e2 <_ZN6StringpLEi>
     a4e:	ce 01       	movw	r24, r28
     a50:	ce 96       	adiw	r24, 0x3e	; 62
     a52:	20 dc       	rcall	.-1984   	; 0x294 <_ZNK6String6lengthEv>
     a54:	9c 01       	movw	r18, r24
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	31 09       	sbc	r19, r1
     a5a:	ce 01       	movw	r24, r28
     a5c:	02 96       	adiw	r24, 0x02	; 2
     a5e:	be 01       	movw	r22, r28
     a60:	62 5c       	subi	r22, 0xC2	; 194
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	0e 94 dd 33 	call	0x67ba	; 0x67ba <_ZNK6String9substringEjj>
     a6c:	9e 01       	movw	r18, r28
     a6e:	2e 5f       	subi	r18, 0xFE	; 254
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	ce 01       	movw	r24, r28
     a74:	ce 96       	adiw	r24, 0x3e	; 62
     a76:	b9 01       	movw	r22, r18
     a78:	0e 94 c2 32 	call	0x6584	; 0x6584 <_ZN6StringaSEOS_>
     a7c:	ce 01       	movw	r24, r28
     a7e:	02 96       	adiw	r24, 0x02	; 2
     a80:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
	 
	 Serial.println(keyword);
     a84:	ce 01       	movw	r24, r28
     a86:	ce 96       	adiw	r24, 0x3e	; 62
     a88:	bc 01       	movw	r22, r24
     a8a:	86 e0       	ldi	r24, 0x06	; 6
     a8c:	95 e0       	ldi	r25, 0x05	; 5
     a8e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN5Print7printlnERK6String>
	 
	// Verify incoming data
	if (keyword == "TOGGLE")
     a92:	ce 01       	movw	r24, r28
     a94:	ce 96       	adiw	r24, 0x3e	; 62
     a96:	60 e6       	ldi	r22, 0x60	; 96
     a98:	72 e0       	ldi	r23, 0x02	; 2
     a9a:	55 dc       	rcall	.-1878   	; 0x346 <_ZNK6StringeqEPKc>
     a9c:	98 2f       	mov	r25, r24
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	99 23       	and	r25, r25
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <loop+0x27a>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
	{
		// toggle servo position
		moveServo();
     aa6:	88 23       	and	r24, r24
	}
	if (keyword == "42")
     aa8:	09 f0       	breq	.+2      	; 0xaac <loop+0x280>
     aaa:	48 d1       	rcall	.+656    	; 0xd3c <_Z9moveServov>
     aac:	ce 01       	movw	r24, r28
     aae:	ce 96       	adiw	r24, 0x3e	; 62
     ab0:	67 e6       	ldi	r22, 0x67	; 103
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	48 dc       	rcall	.-1904   	; 0x346 <_ZNK6StringeqEPKc>
     ab6:	98 2f       	mov	r25, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	99 23       	and	r25, r25
     abc:	09 f4       	brne	.+2      	; 0xac0 <loop+0x294>
	{
		// toggle servo position
		moveServo();
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	88 23       	and	r24, r24
	}
	if (keyword == "69")
     ac2:	09 f0       	breq	.+2      	; 0xac6 <loop+0x29a>
     ac4:	3b d1       	rcall	.+630    	; 0xd3c <_Z9moveServov>
     ac6:	ce 01       	movw	r24, r28
     ac8:	ce 96       	adiw	r24, 0x3e	; 62
     aca:	6a e6       	ldi	r22, 0x6A	; 106
     acc:	72 e0       	ldi	r23, 0x02	; 2
     ace:	3b dc       	rcall	.-1930   	; 0x346 <_ZNK6StringeqEPKc>
     ad0:	98 2f       	mov	r25, r24
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	99 23       	and	r25, r25
     ad6:	09 f4       	brne	.+2      	; 0xada <loop+0x2ae>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	88 23       	and	r24, r24
	{
		// toggle servo position
		moveServo();
     adc:	09 f0       	breq	.+2      	; 0xae0 <loop+0x2b4>
     ade:	2e d1       	rcall	.+604    	; 0xd3c <_Z9moveServov>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     ae0:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <isCardValid+0x1>
     ae4:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <isCardValid>

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     ae8:	86 e8       	ldi	r24, 0x86	; 134
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     af0:	98 2f       	mov	r25, r24
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	89 27       	eor	r24, r25
     af6:	88 23       	and	r24, r24
     af8:	49 f4       	brne	.+18     	; 0xb0c <loop+0x2e0>
     afa:	86 e8       	ldi	r24, 0x86	; 134
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     b02:	98 2f       	mov	r25, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	89 27       	eor	r24, r25
     b08:	88 23       	and	r24, r24
     b0a:	11 f0       	breq	.+4      	; 0xb10 <loop+0x2e4>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <loop+0x2e6>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	88 23       	and	r24, r24
	{
		delay(50);
     b14:	59 f0       	breq	.+22     	; 0xb2c <loop+0x300>
     b16:	62 e3       	ldi	r22, 0x32	; 50
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
		isCardValid = 0;
     b22:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <isCardValid+0x1>
	}
	else 
	{
		isCardValid = RfidValidater();
     b26:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <isCardValid>
     b2a:	19 c0       	rjmp	.+50     	; 0xb5e <loop+0x332>
     b2c:	2e d0       	rcall	.+92     	; 0xb8a <_Z13RfidValidaterv>
     b2e:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <isCardValid+0x1>

		// if card/chip is valid
		if (isCardValid == 1)
     b32:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <isCardValid>
     b36:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <isCardValid>
     b3a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <isCardValid+0x1>
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	29 f4       	brne	.+10     	; 0xb4c <loop+0x320>
     b42:	81 e0       	ldi	r24, 0x01	; 1
				
			// Move servo
			moveServo();
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	4a d1       	rcall	.+660    	; 0xddc <_Z12makeBipSoundi>
     b48:	f9 d0       	rcall	.+498    	; 0xd3c <_Z9moveServov>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <loop+0x332>
     b4c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <isCardValid>
     b50:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <isCardValid+0x1>
     b54:	02 97       	sbiw	r24, 0x02	; 2
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     b56:	19 f4       	brne	.+6      	; 0xb5e <loop+0x332>
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	3f d1       	rcall	.+638    	; 0xddc <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     b5e:	68 ee       	ldi	r22, 0xE8	; 232
     b60:	73 e0       	ldi	r23, 0x03	; 3
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
     b6a:	ce 01       	movw	r24, r28
     b6c:	ce 96       	adiw	r24, 0x3e	; 62
     b6e:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
}
     b72:	00 00       	nop
     b74:	cd 5b       	subi	r28, 0xBD	; 189
     b76:	df 4f       	sbci	r29, 0xFF	; 255
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	08 95       	ret

00000b8a <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	69 97       	sbiw	r28, 0x19	; 25
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     ba2:	ce 01       	movw	r24, r28
     ba4:	44 96       	adiw	r24, 0x14	; 20
     ba6:	6f e5       	ldi	r22, 0x5F	; 95
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     bae:	19 82       	std	Y+1, r1	; 0x01
     bb0:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <mfrc522>
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	89 17       	cp	r24, r25
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <_Z13RfidValidaterv+0x32>
     bba:	3e c0       	rjmp	.+124    	; 0xc38 <_Z13RfidValidaterv+0xae>
	{
		//Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
		//Serial.print(mfrc522.uid.uidByte[i], HEX);
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	89 57       	subi	r24, 0x79	; 121
     bc4:	9c 4f       	sbci	r25, 0xFC	; 252
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	80 31       	cpi	r24, 0x10	; 16
     bcc:	18 f4       	brcc	.+6      	; 0xbd4 <_Z13RfidValidaterv+0x4a>
     bce:	8d e6       	ldi	r24, 0x6D	; 109
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <_Z13RfidValidaterv+0x4e>
     bd4:	80 e7       	ldi	r24, 0x70	; 112
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	9e 01       	movw	r18, r28
     bda:	22 5f       	subi	r18, 0xF2	; 242
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	bc 01       	movw	r22, r24
     be0:	c9 01       	movw	r24, r18
     be2:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN6StringC1EPKc>
     be6:	9e 01       	movw	r18, r28
     be8:	22 5f       	subi	r18, 0xF2	; 242
     bea:	3f 4f       	sbci	r19, 0xFF	; 255
     bec:	ce 01       	movw	r24, r28
     bee:	44 96       	adiw	r24, 0x14	; 20
     bf0:	b9 01       	movw	r22, r18
     bf2:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZN6String6concatERKS_>
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 96       	adiw	r24, 0x0e	; 14
     bfa:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	89 57       	subi	r24, 0x79	; 121
     c06:	9c 4f       	sbci	r25, 0xFC	; 252
     c08:	fc 01       	movw	r30, r24
     c0a:	20 81       	ld	r18, Z
     c0c:	ce 01       	movw	r24, r28
     c0e:	08 96       	adiw	r24, 0x08	; 8
     c10:	40 e1       	ldi	r20, 0x10	; 16
     c12:	62 2f       	mov	r22, r18
     c14:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <_ZN6StringC1Ehh>
     c18:	9e 01       	movw	r18, r28
     c1a:	28 5f       	subi	r18, 0xF8	; 248
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	ce 01       	movw	r24, r28
     c20:	44 96       	adiw	r24, 0x14	; 20
     c22:	b9 01       	movw	r22, r18
     c24:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZN6String6concatERKS_>
     c28:	ce 01       	movw	r24, r28
     c2a:	08 96       	adiw	r24, 0x08	; 8
     c2c:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	bc cf       	rjmp	.-136    	; 0xbb0 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     c38:	ce 01       	movw	r24, r28
     c3a:	44 96       	adiw	r24, 0x14	; 20
     c3c:	0e 94 20 34 	call	0x6840	; 0x6840 <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     c40:	ce 01       	movw	r24, r28
     c42:	02 96       	adiw	r24, 0x02	; 2
     c44:	9e 01       	movw	r18, r28
     c46:	2c 5e       	subi	r18, 0xEC	; 236
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	b9 01       	movw	r22, r18
     c50:	92 db       	rcall	.-2268   	; 0x376 <_ZNK6String9substringEj>
     c52:	ce 01       	movw	r24, r28
     c54:	02 96       	adiw	r24, 0x02	; 2
     c56:	6a e9       	ldi	r22, 0x9A	; 154
     c58:	73 e0       	ldi	r23, 0x03	; 3
     c5a:	5d db       	rcall	.-2374   	; 0x316 <_ZNK6StringeqERKS_>
     c5c:	11 e0       	ldi	r17, 0x01	; 1
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <_Z13RfidValidaterv+0xda>
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	ce 01       	movw	r24, r28
     c66:	02 96       	adiw	r24, 0x02	; 2
     c68:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
     c6c:	11 23       	and	r17, r17
     c6e:	89 f0       	breq	.+34     	; 0xc92 <_Z13RfidValidaterv+0x108>
	{
		Serial.println();
     c70:	86 e0       	ldi	r24, 0x06	; 6
     c72:	95 e0       	ldi	r25, 0x05	; 5
     c74:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     c78:	62 e7       	ldi	r22, 0x72	; 114
     c7a:	72 e0       	ldi	r23, 0x02	; 2
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	95 e0       	ldi	r25, 0x05	; 5
     c80:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN5Print7printlnEPKc>
		Serial.println();
     c84:	86 e0       	ldi	r24, 0x06	; 6
     c86:	95 e0       	ldi	r25, 0x05	; 5
     c88:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <_ZN5Print7printlnEv>
		return 1;
     c8c:	01 e0       	ldi	r16, 0x01	; 1
     c8e:	10 e0       	ldi	r17, 0x00	; 0
     c90:	10 c0       	rjmp	.+32     	; 0xcb2 <_Z13RfidValidaterv+0x128>
	}
	else
	{
		Serial.println();
     c92:	86 e0       	ldi	r24, 0x06	; 6
     c94:	95 e0       	ldi	r25, 0x05	; 5
     c96:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <_ZN5Print7printlnEv>
		Serial.println("Access denied");
     c9a:	64 e8       	ldi	r22, 0x84	; 132
     c9c:	72 e0       	ldi	r23, 0x02	; 2
     c9e:	86 e0       	ldi	r24, 0x06	; 6
     ca0:	95 e0       	ldi	r25, 0x05	; 5
     ca2:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN5Print7printlnEPKc>
		Serial.println();
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	95 e0       	ldi	r25, 0x05	; 5
     caa:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <_ZN5Print7printlnEv>
		return 2;
     cae:	02 e0       	ldi	r16, 0x02	; 2
     cb0:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     cb2:	ce 01       	movw	r24, r28
     cb4:	44 96       	adiw	r24, 0x14	; 20
     cb6:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
     cba:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     cbc:	69 96       	adiw	r28, 0x19	; 25
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	1f 92       	push	r1
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     cde:	99 81       	ldd	r25, Y+1	; 0x01
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 27       	eor	r24, r25
     ce4:	88 23       	and	r24, r24
     ce6:	71 f0       	breq	.+28     	; 0xd04 <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     ce8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     cec:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     cf6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     cfa:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
	}
	if (status == true)
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 23       	and	r24, r24
     d08:	71 f0       	breq	.+28     	; 0xd26 <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     d0a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     d0e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     d18:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     d1c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
	}
	delay(100);
     d26:	64 e6       	ldi	r22, 0x64	; 100
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
}
     d32:	00 00       	nop
     d34:	0f 90       	pop	r0
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     d44:	80 ea       	ldi	r24, 0xA0	; 160
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	0e 94 11 23 	call	0x4622	; 0x4622 <_ZN5Servo4readEv>
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	84 3b       	cpi	r24, 0xB4	; 180
     d50:	91 05       	cpc	r25, r1
     d52:	09 f0       	breq	.+2      	; 0xd56 <_Z9moveServov+0x1a>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	22 23       	and	r18, r18
     d58:	81 f0       	breq	.+32     	; 0xd7a <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     d5a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     d5e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
		servo.write(0);
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 ea       	ldi	r24, 0xA0	; 160
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	0e 94 c9 21 	call	0x4392	; 0x4392 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	ad df       	rcall	.-166    	; 0xcd2 <_Z11SetRfidLedsb>
     d78:	27 c0       	rjmp	.+78     	; 0xdc8 <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     d7a:	80 ea       	ldi	r24, 0xA0	; 160
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	0e 94 11 23 	call	0x4622	; 0x4622 <_ZN5Servo4readEv>
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	89 2b       	or	r24, r25
     d86:	09 f0       	breq	.+2      	; 0xd8a <_Z9moveServov+0x4e>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	22 23       	and	r18, r18
     d8c:	81 f0       	breq	.+32     	; 0xdae <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     d8e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     d92:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
		servo.write(180);
     d9c:	64 eb       	ldi	r22, 0xB4	; 180
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 ea       	ldi	r24, 0xA0	; 160
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	0e 94 c9 21 	call	0x4392	; 0x4392 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	93 df       	rcall	.-218    	; 0xcd2 <_Z11SetRfidLedsb>
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     dae:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     db2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
		servo.write(180);
     dbc:	64 eb       	ldi	r22, 0xB4	; 180
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 ea       	ldi	r24, 0xA0	; 160
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 c9 21 	call	0x4392	; 0x4392 <_ZN5Servo5writeEi>
	}
	delay(100);
     dc8:	64 e6       	ldi	r22, 0x64	; 100
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
}
     dd4:	00 00       	nop
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 d0       	rcall	.+0      	; 0xde2 <_Z12makeBipSoundi+0x6>
     de2:	1f 92       	push	r1
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	a9 f4       	brne	.+42     	; 0xe1e <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     df4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     df8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
		delay(100);
     e02:	64 e6       	ldi	r22, 0x64	; 100
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     e0e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e12:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
     e1c:	35 c0       	rjmp	.+106    	; 0xe88 <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	02 97       	sbiw	r24, 0x02	; 2
     e24:	31 f5       	brne	.+76     	; 0xe72 <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     e26:	1a 82       	std	Y+2, r1	; 0x02
     e28:	19 82       	std	Y+1, r1	; 0x01
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	03 97       	sbiw	r24, 0x03	; 3
     e30:	5c f5       	brge	.+86     	; 0xe88 <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     e32:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e36:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
			delay(100);						// tone length
     e40:	64 e6       	ldi	r22, 0x64	; 100
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     e4c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e50:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
			delay(50);						// Interval between tones
     e5a:	62 e3       	ldi	r22, 0x32	; 50
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	dc cf       	rjmp	.-72     	; 0xe2a <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	03 97       	sbiw	r24, 0x03	; 3
     e78:	39 f4       	brne	.+14     	; 0xe88 <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     e7a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e7e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
	}
	delay(100);
     e88:	64 e6       	ldi	r22, 0x64	; 100
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
     e94:	00 00       	nop
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	1f 92       	push	r1
     eaa:	1f 92       	push	r1
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	4d 96       	adiw	r24, 0x1d	; 29
     eba:	9b d0       	rcall	.+310    	; 0xff2 <_ZN11DHT_Unified8HumidityD1Ev>
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	44 96       	adiw	r24, 0x14	; 20
     ec2:	64 d0       	rcall	.+200    	; 0xf8c <_ZN11DHT_Unified11TemperatureD1Ev>
     ec4:	00 00       	nop
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <_Z41__static_initialization_and_destruction_0ii>:
     ed0:	af 92       	push	r10
     ed2:	bf 92       	push	r11
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <_Z41__static_initialization_and_destruction_0ii+0x16>
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	7c 83       	std	Y+4, r23	; 0x04
     ef2:	6b 83       	std	Y+3, r22	; 0x03
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	49 f5       	brne	.+82     	; 0xf4e <_Z41__static_initialization_and_destruction_0ii+0x7e>
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	29 f5       	brne	.+74     	; 0xf4e <_Z41__static_initialization_and_destruction_0ii+0x7e>
byte x = 0;
int BIP_PIN = 10;					// For ALARM and feed back sound effects

#pragma region LCD Display

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display
     f04:	24 e0       	ldi	r18, 0x04	; 4
     f06:	44 e1       	ldi	r20, 0x14	; 20
     f08:	67 e2       	ldi	r22, 0x27	; 39
     f0a:	8a e4       	ldi	r24, 0x4A	; 74
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN17LiquidCrystal_I2CC1Ehhh>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     f12:	aa 24       	eor	r10, r10
     f14:	aa 94       	dec	r10
     f16:	ba 2c       	mov	r11, r10
     f18:	65 01       	movw	r12, r10
     f1a:	ee 24       	eor	r14, r14
     f1c:	ea 94       	dec	r14
     f1e:	fe 2c       	mov	r15, r14
     f20:	87 01       	movw	r16, r14
     f22:	26 e0       	ldi	r18, 0x06	; 6
     f24:	4b e0       	ldi	r20, 0x0B	; 11
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	86 e5       	ldi	r24, 0x56	; 86
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	c3 d6       	rcall	.+3462   	; 0x1cb4 <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     f2e:	45 e0       	ldi	r20, 0x05	; 5
     f30:	65 e3       	ldi	r22, 0x35	; 53
     f32:	86 e8       	ldi	r24, 0x86	; 134
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     f3a:	62 e9       	ldi	r22, 0x92	; 146
     f3c:	72 e0       	ldi	r23, 0x02	; 2
     f3e:	8a e9       	ldi	r24, 0x9A	; 154
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     f46:	80 ea       	ldi	r24, 0xA0	; 160
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN5ServoC1Ev>
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	89 2b       	or	r24, r25
     f54:	59 f4       	brne	.+22     	; 0xf6c <_Z41__static_initialization_and_destruction_0ii+0x9c>
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	39 f4       	brne	.+14     	; 0xf6c <_Z41__static_initialization_and_destruction_0ii+0x9c>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     f5e:	8a e9       	ldi	r24, 0x9A	; 154
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 09 32 	call	0x6412	; 0x6412 <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     f66:	86 e5       	ldi	r24, 0x56	; 86
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	9c df       	rcall	.-200    	; 0xea4 <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     f6c:	00 00       	nop
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	bf 90       	pop	r11
     f88:	af 90       	pop	r10
     f8a:	08 95       	ret

00000f8c <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	1f 92       	push	r1
     f92:	1f 92       	push	r1
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	23 ee       	ldi	r18, 0xE3	; 227
     f9e:	32 e0       	ldi	r19, 0x02	; 2
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	fc 01       	movw	r30, r24
     fa6:	31 83       	std	Z+1, r19	; 0x01
     fa8:	20 83       	st	Z, r18
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	68 da       	rcall	.-2864   	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	89 2b       	or	r24, r25
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZdlPv>
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <_ZN11DHT_Unified11TemperatureD0Ev>:
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	1f 92       	push	r1
     fd0:	1f 92       	push	r1
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	d6 df       	rcall	.-84     	; 0xf8c <_ZN11DHT_Unified11TemperatureD1Ev>
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZdlPv>
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	1f 92       	push	r1
     ff8:	1f 92       	push	r1
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	25 ed       	ldi	r18, 0xD5	; 213
    1004:	32 e0       	ldi	r19, 0x02	; 2
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	fc 01       	movw	r30, r24
    100c:	31 83       	std	Z+1, r19	; 0x01
    100e:	20 83       	st	Z, r18
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	35 da       	rcall	.-2966   	; 0x480 <_ZN15Adafruit_SensorD1Ev>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	89 2b       	or	r24, r25
    101c:	21 f0       	breq	.+8      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZdlPv>
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <_ZN11DHT_Unified8HumidityD0Ev>:
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1f 92       	push	r1
    1036:	1f 92       	push	r1
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	d6 df       	rcall	.-84     	; 0xff2 <_ZN11DHT_Unified8HumidityD1Ev>
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <_ZdlPv>
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <_GLOBAL__sub_I_x>:
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	6f ef       	ldi	r22, 0xFF	; 255
    1062:	7f ef       	ldi	r23, 0xFF	; 255
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	33 df       	rcall	.-410    	; 0xed0 <_Z41__static_initialization_and_destruction_0ii>
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <_GLOBAL__sub_D_x>:
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	6f ef       	ldi	r22, 0xFF	; 255
    107a:	7f ef       	ldi	r23, 0xFF	; 255
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	27 df       	rcall	.-434    	; 0xed0 <_Z41__static_initialization_and_destruction_0ii>
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	1f 92       	push	r1
    108e:	1f 92       	push	r1
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	f8 94       	cli
    109a:	00 00       	nop
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <_ZN13InterruptLockD1Ev>:
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	1f 92       	push	r1
    10ac:	1f 92       	push	r1
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	78 94       	sei
    10b8:	00 00       	nop
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <_ZN3DHTC1Ehhh>:
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	2b 97       	sbiw	r28, 0x0b	; 11
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	98 87       	std	Y+8, r25	; 0x08
    10da:	8f 83       	std	Y+7, r24	; 0x07
    10dc:	69 87       	std	Y+9, r22	; 0x09
    10de:	4a 87       	std	Y+10, r20	; 0x0a
    10e0:	2b 87       	std	Y+11, r18	; 0x0b
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	29 85       	ldd	r18, Y+9	; 0x09
    10e8:	fc 01       	movw	r30, r24
    10ea:	25 83       	std	Z+5, r18	; 0x05
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    10f2:	fc 01       	movw	r30, r24
    10f4:	26 83       	std	Z+6, r18	; 0x06
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	82 5b       	subi	r24, 0xB2	; 178
    10fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	fc 01       	movw	r30, r24
    110a:	84 91       	lpm	r24, Z
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	8f 81       	ldd	r24, Y+7	; 0x07
    1110:	98 85       	ldd	r25, Y+8	; 0x08
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	fc 01       	movw	r30, r24
    1116:	27 83       	std	Z+7, r18	; 0x07
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	8c 56       	subi	r24, 0x6C	; 108
    1120:	9e 4f       	sbci	r25, 0xFE	; 254
    1122:	9d 83       	std	Y+5, r25	; 0x05
    1124:	8c 83       	std	Y+4, r24	; 0x04
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	fc 01       	movw	r30, r24
    112c:	84 91       	lpm	r24, Z
    112e:	8e 83       	std	Y+6, r24	; 0x06
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	2e 81       	ldd	r18, Y+6	; 0x06
    1136:	fc 01       	movw	r30, r24
    1138:	20 87       	std	Z+8, r18	; 0x08
    113a:	2f 81       	ldd	r18, Y+7	; 0x07
    113c:	38 85       	ldd	r19, Y+8	; 0x08
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	9e e3       	ldi	r25, 0x3E	; 62
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	f9 01       	movw	r30, r18
    1148:	85 87       	std	Z+13, r24	; 0x0d
    114a:	96 87       	std	Z+14, r25	; 0x0e
    114c:	a7 87       	std	Z+15, r26	; 0x0f
    114e:	b0 8b       	std	Z+16, r27	; 0x10
    1150:	00 00       	nop
    1152:	2b 96       	adiw	r28, 0x0b	; 11
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <_ZN3DHT5beginEh>:
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	00 d0       	rcall	.+0      	; 0x116a <_ZN3DHT5beginEh+0x6>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	6b 83       	std	Y+3, r22	; 0x03
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	fc 01       	movw	r30, r24
    117a:	85 81       	ldd	r24, Z+5	; 0x05
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
    1182:	0e 94 0b 30 	call	0x6016	; 0x6016 <millis>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	80 5d       	subi	r24, 0xD0	; 208
    118c:	97 40       	sbci	r25, 0x07	; 7
    118e:	a1 09       	sbc	r26, r1
    1190:	b1 09       	sbc	r27, r1
    1192:	29 81       	ldd	r18, Y+1	; 0x01
    1194:	3a 81       	ldd	r19, Y+2	; 0x02
    1196:	f9 01       	movw	r30, r18
    1198:	81 87       	std	Z+9, r24	; 0x09
    119a:	92 87       	std	Z+10, r25	; 0x0a
    119c:	a3 87       	std	Z+11, r26	; 0x0b
    119e:	b4 87       	std	Z+12, r27	; 0x0c
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	2b 81       	ldd	r18, Y+3	; 0x03
    11a6:	fc 01       	movw	r30, r24
    11a8:	22 8b       	std	Z+18, r18	; 0x12
    11aa:	00 00       	nop
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <_ZN3DHT15readTemperatureEbb>:
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	28 97       	sbiw	r28, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	6f 83       	std	Y+7, r22	; 0x07
    11d2:	48 87       	std	Y+8, r20	; 0x08
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 ec       	ldi	r26, 0xC0	; 192
    11da:	bf e7       	ldi	r27, 0x7F	; 127
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	ab 83       	std	Y+3, r26	; 0x03
    11e2:	bc 83       	std	Y+4, r27	; 0x04
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	68 85       	ldd	r22, Y+8	; 0x08
    11ea:	1d d2       	rcall	.+1082   	; 0x1626 <_ZN3DHT4readEb>
    11ec:	88 23       	and	r24, r24
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <_ZN3DHT15readTemperatureEbb+0x3a>
    11f0:	34 c1       	rjmp	.+616    	; 0x145a <_ZN3DHT15readTemperatureEbb+0x2a2>
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	fc 01       	movw	r30, r24
    11f8:	86 81       	ldd	r24, Z+6	; 0x06
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	8c 30       	cpi	r24, 0x0C	; 12
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <_ZN3DHT15readTemperatureEbb+0x4e>
    1204:	72 c0       	rjmp	.+228    	; 0x12ea <_ZN3DHT15readTemperatureEbb+0x132>
    1206:	8d 30       	cpi	r24, 0x0D	; 13
    1208:	91 05       	cpc	r25, r1
    120a:	1c f4       	brge	.+6      	; 0x1212 <_ZN3DHT15readTemperatureEbb+0x5a>
    120c:	0b 97       	sbiw	r24, 0x0b	; 11
    120e:	31 f0       	breq	.+12     	; 0x121c <_ZN3DHT15readTemperatureEbb+0x64>
    1210:	24 c1       	rjmp	.+584    	; 0x145a <_ZN3DHT15readTemperatureEbb+0x2a2>
    1212:	45 97       	sbiw	r24, 0x15	; 21
    1214:	02 97       	sbiw	r24, 0x02	; 2
    1216:	08 f0       	brcs	.+2      	; 0x121a <_ZN3DHT15readTemperatureEbb+0x62>
    1218:	20 c1       	rjmp	.+576    	; 0x145a <_ZN3DHT15readTemperatureEbb+0x2a2>
    121a:	c7 c0       	rjmp	.+398    	; 0x13aa <_ZN3DHT15readTemperatureEbb+0x1f2>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	fc 01       	movw	r30, r24
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a0 e0       	ldi	r26, 0x00	; 0
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__floatunsisf>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	ab 83       	std	Y+3, r26	; 0x03
    123e:	bc 83       	std	Y+4, r27	; 0x04
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	fc 01       	movw	r30, r24
    1246:	83 81       	ldd	r24, Z+3	; 0x03
    1248:	88 23       	and	r24, r24
    124a:	84 f4       	brge	.+32     	; 0x126c <_ZN3DHT15readTemperatureEbb+0xb4>
    124c:	29 81       	ldd	r18, Y+1	; 0x01
    124e:	3a 81       	ldd	r19, Y+2	; 0x02
    1250:	4b 81       	ldd	r20, Y+3	; 0x03
    1252:	5c 81       	ldd	r21, Y+4	; 0x04
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	9f eb       	ldi	r25, 0xBF	; 191
    125c:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__subsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	ab 83       	std	Y+3, r26	; 0x03
    126a:	bc 83       	std	Y+4, r27	; 0x04
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	fc 01       	movw	r30, r24
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	8f 70       	andi	r24, 0x0F	; 15
    127a:	99 27       	eor	r25, r25
    127c:	09 2e       	mov	r0, r25
    127e:	00 0c       	add	r0, r0
    1280:	aa 0b       	sbc	r26, r26
    1282:	bb 0b       	sbc	r27, r27
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__floatsisf>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	2d ec       	ldi	r18, 0xCD	; 205
    1292:	3c ec       	ldi	r19, 0xCC	; 204
    1294:	4c ec       	ldi	r20, 0xCC	; 204
    1296:	5d e3       	ldi	r21, 0x3D	; 61
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9c 01       	movw	r18, r24
    12a6:	ad 01       	movw	r20, r26
    12a8:	69 81       	ldd	r22, Y+1	; 0x01
    12aa:	7a 81       	ldd	r23, Y+2	; 0x02
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__addsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	ab 83       	std	Y+3, r26	; 0x03
    12be:	bc 83       	std	Y+4, r27	; 0x04
    12c0:	8f 81       	ldd	r24, Y+7	; 0x07
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <_ZN3DHT15readTemperatureEbb+0x110>
    12c6:	c4 c0       	rjmp	.+392    	; 0x1450 <_ZN3DHT15readTemperatureEbb+0x298>
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	ab 81       	ldd	r26, Y+3	; 0x03
    12ce:	bc 81       	ldd	r27, Y+4	; 0x04
    12d0:	2d 81       	ldd	r18, Y+5	; 0x05
    12d2:	3e 81       	ldd	r19, Y+6	; 0x06
    12d4:	ac 01       	movw	r20, r24
    12d6:	bd 01       	movw	r22, r26
    12d8:	c9 01       	movw	r24, r18
    12da:	ce d0       	rcall	.+412    	; 0x1478 <_ZN3DHT11convertCtoFEf>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	ab 83       	std	Y+3, r26	; 0x03
    12e6:	bc 83       	std	Y+4, r27	; 0x04
    12e8:	b3 c0       	rjmp	.+358    	; 0x1450 <_ZN3DHT15readTemperatureEbb+0x298>
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	fc 01       	movw	r30, r24
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e0       	ldi	r26, 0x00	; 0
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__floatunsisf>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	ab 83       	std	Y+3, r26	; 0x03
    130c:	bc 83       	std	Y+4, r27	; 0x04
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	fc 01       	movw	r30, r24
    1314:	83 81       	ldd	r24, Z+3	; 0x03
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	8f 70       	andi	r24, 0x0F	; 15
    131c:	99 27       	eor	r25, r25
    131e:	09 2e       	mov	r0, r25
    1320:	00 0c       	add	r0, r0
    1322:	aa 0b       	sbc	r26, r26
    1324:	bb 0b       	sbc	r27, r27
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__floatsisf>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	2d ec       	ldi	r18, 0xCD	; 205
    1334:	3c ec       	ldi	r19, 0xCC	; 204
    1336:	4c ec       	ldi	r20, 0xCC	; 204
    1338:	5d e3       	ldi	r21, 0x3D	; 61
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9c 01       	movw	r18, r24
    1348:	ad 01       	movw	r20, r26
    134a:	69 81       	ldd	r22, Y+1	; 0x01
    134c:	7a 81       	ldd	r23, Y+2	; 0x02
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__addsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	ab 83       	std	Y+3, r26	; 0x03
    1360:	bc 83       	std	Y+4, r27	; 0x04
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	fc 01       	movw	r30, r24
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	88 23       	and	r24, r24
    136c:	4c f4       	brge	.+18     	; 0x1380 <_ZN3DHT15readTemperatureEbb+0x1c8>
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	ab 81       	ldd	r26, Y+3	; 0x03
    1374:	bc 81       	ldd	r27, Y+4	; 0x04
    1376:	b0 58       	subi	r27, 0x80	; 128
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	ab 83       	std	Y+3, r26	; 0x03
    137e:	bc 83       	std	Y+4, r27	; 0x04
    1380:	8f 81       	ldd	r24, Y+7	; 0x07
    1382:	88 23       	and	r24, r24
    1384:	09 f4       	brne	.+2      	; 0x1388 <_ZN3DHT15readTemperatureEbb+0x1d0>
    1386:	66 c0       	rjmp	.+204    	; 0x1454 <_ZN3DHT15readTemperatureEbb+0x29c>
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	ab 81       	ldd	r26, Y+3	; 0x03
    138e:	bc 81       	ldd	r27, Y+4	; 0x04
    1390:	2d 81       	ldd	r18, Y+5	; 0x05
    1392:	3e 81       	ldd	r19, Y+6	; 0x06
    1394:	ac 01       	movw	r20, r24
    1396:	bd 01       	movw	r22, r26
    1398:	c9 01       	movw	r24, r18
    139a:	6e d0       	rcall	.+220    	; 0x1478 <_ZN3DHT11convertCtoFEf>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	ab 83       	std	Y+3, r26	; 0x03
    13a6:	bc 83       	std	Y+4, r27	; 0x04
    13a8:	55 c0       	rjmp	.+170    	; 0x1454 <_ZN3DHT15readTemperatureEbb+0x29c>
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	fc 01       	movw	r30, r24
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	8f 77       	andi	r24, 0x7F	; 127
    13b8:	99 27       	eor	r25, r25
    13ba:	38 2f       	mov	r19, r24
    13bc:	22 27       	eor	r18, r18
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	fc 01       	movw	r30, r24
    13c4:	83 81       	ldd	r24, Z+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	82 2b       	or	r24, r18
    13cc:	93 2b       	or	r25, r19
    13ce:	cc 01       	movw	r24, r24
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__floatunsisf>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	ab 83       	std	Y+3, r26	; 0x03
    13e6:	bc 83       	std	Y+4, r27	; 0x04
    13e8:	2d ec       	ldi	r18, 0xCD	; 205
    13ea:	3c ec       	ldi	r19, 0xCC	; 204
    13ec:	4c ec       	ldi	r20, 0xCC	; 204
    13ee:	5d e3       	ldi	r21, 0x3D	; 61
    13f0:	69 81       	ldd	r22, Y+1	; 0x01
    13f2:	7a 81       	ldd	r23, Y+2	; 0x02
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	ab 83       	std	Y+3, r26	; 0x03
    1406:	bc 83       	std	Y+4, r27	; 0x04
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	fc 01       	movw	r30, r24
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	88 23       	and	r24, r24
    1412:	4c f4       	brge	.+18     	; 0x1426 <_ZN3DHT15readTemperatureEbb+0x26e>
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	ab 81       	ldd	r26, Y+3	; 0x03
    141a:	bc 81       	ldd	r27, Y+4	; 0x04
    141c:	b0 58       	subi	r27, 0x80	; 128
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	ab 83       	std	Y+3, r26	; 0x03
    1424:	bc 83       	std	Y+4, r27	; 0x04
    1426:	8f 81       	ldd	r24, Y+7	; 0x07
    1428:	88 23       	and	r24, r24
    142a:	b1 f0       	breq	.+44     	; 0x1458 <_ZN3DHT15readTemperatureEbb+0x2a0>
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	ab 81       	ldd	r26, Y+3	; 0x03
    1432:	bc 81       	ldd	r27, Y+4	; 0x04
    1434:	2d 81       	ldd	r18, Y+5	; 0x05
    1436:	3e 81       	ldd	r19, Y+6	; 0x06
    1438:	ac 01       	movw	r20, r24
    143a:	bd 01       	movw	r22, r26
    143c:	c9 01       	movw	r24, r18
    143e:	1c d0       	rcall	.+56     	; 0x1478 <_ZN3DHT11convertCtoFEf>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	ab 83       	std	Y+3, r26	; 0x03
    144a:	bc 83       	std	Y+4, r27	; 0x04
    144c:	00 00       	nop
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <_ZN3DHT15readTemperatureEbb+0x2a0>
    1450:	00 00       	nop
    1452:	03 c0       	rjmp	.+6      	; 0x145a <_ZN3DHT15readTemperatureEbb+0x2a2>
    1454:	00 00       	nop
    1456:	01 c0       	rjmp	.+2      	; 0x145a <_ZN3DHT15readTemperatureEbb+0x2a2>
    1458:	00 00       	nop
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	ab 81       	ldd	r26, Y+3	; 0x03
    1460:	bc 81       	ldd	r27, Y+4	; 0x04
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	28 96       	adiw	r28, 0x08	; 8
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <_ZN3DHT11convertCtoFEf>:
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <_ZN3DHT11convertCtoFEf+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <_ZN3DHT11convertCtoFEf+0x8>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	4b 83       	std	Y+3, r20	; 0x03
    148a:	5c 83       	std	Y+4, r21	; 0x04
    148c:	6d 83       	std	Y+5, r22	; 0x05
    148e:	7e 83       	std	Y+6, r23	; 0x06
    1490:	26 e6       	ldi	r18, 0x66	; 102
    1492:	36 e6       	ldi	r19, 0x66	; 102
    1494:	46 ee       	ldi	r20, 0xE6	; 230
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	6b 81       	ldd	r22, Y+3	; 0x03
    149a:	7c 81       	ldd	r23, Y+4	; 0x04
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	52 e4       	ldi	r21, 0x42	; 66
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__addsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	26 96       	adiw	r28, 0x06	; 6
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <_ZN3DHT12readHumidityEb>:
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	27 97       	sbiw	r28, 0x07	; 7
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	6f 83       	std	Y+7, r22	; 0x07
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 ec       	ldi	r26, 0xC0	; 192
    14fa:	bf e7       	ldi	r27, 0x7F	; 127
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	ab 83       	std	Y+3, r26	; 0x03
    1502:	bc 83       	std	Y+4, r27	; 0x04
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	6f 81       	ldd	r22, Y+7	; 0x07
    150a:	8d d0       	rcall	.+282    	; 0x1626 <_ZN3DHT4readEb>
    150c:	88 23       	and	r24, r24
    150e:	09 f4       	brne	.+2      	; 0x1512 <_ZN3DHT12readHumidityEb+0x40>
    1510:	77 c0       	rjmp	.+238    	; 0x1600 <_ZN3DHT12readHumidityEb+0x12e>
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	fc 01       	movw	r30, r24
    1518:	86 81       	ldd	r24, Z+6	; 0x06
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	8b 30       	cpi	r24, 0x0B	; 11
    1520:	91 05       	cpc	r25, r1
    1522:	0c f4       	brge	.+2      	; 0x1526 <_ZN3DHT12readHumidityEb+0x54>
    1524:	6d c0       	rjmp	.+218    	; 0x1600 <_ZN3DHT12readHumidityEb+0x12e>
    1526:	8d 30       	cpi	r24, 0x0D	; 13
    1528:	91 05       	cpc	r25, r1
    152a:	2c f0       	brlt	.+10     	; 0x1536 <_ZN3DHT12readHumidityEb+0x64>
    152c:	45 97       	sbiw	r24, 0x15	; 21
    152e:	02 97       	sbiw	r24, 0x02	; 2
    1530:	08 f0       	brcs	.+2      	; 0x1534 <_ZN3DHT12readHumidityEb+0x62>
    1532:	66 c0       	rjmp	.+204    	; 0x1600 <_ZN3DHT12readHumidityEb+0x12e>
    1534:	37 c0       	rjmp	.+110    	; 0x15a4 <_ZN3DHT12readHumidityEb+0xd2>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	fc 01       	movw	r30, r24
    153c:	80 81       	ld	r24, Z
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	09 2e       	mov	r0, r25
    1544:	00 0c       	add	r0, r0
    1546:	aa 0b       	sbc	r26, r26
    1548:	bb 0b       	sbc	r27, r27
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__floatsisf>
    1552:	6b 01       	movw	r12, r22
    1554:	7c 01       	movw	r14, r24
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	fc 01       	movw	r30, r24
    155c:	81 81       	ldd	r24, Z+1	; 0x01
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	09 2e       	mov	r0, r25
    1564:	00 0c       	add	r0, r0
    1566:	aa 0b       	sbc	r26, r26
    1568:	bb 0b       	sbc	r27, r27
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__floatsisf>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	2d ec       	ldi	r18, 0xCD	; 205
    1578:	3c ec       	ldi	r19, 0xCC	; 204
    157a:	4c ec       	ldi	r20, 0xCC	; 204
    157c:	5d e3       	ldi	r21, 0x3D	; 61
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9c 01       	movw	r18, r24
    158c:	ad 01       	movw	r20, r26
    158e:	c7 01       	movw	r24, r14
    1590:	b6 01       	movw	r22, r12
    1592:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__addsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	9a 83       	std	Y+2, r25	; 0x02
    159e:	ab 83       	std	Y+3, r26	; 0x03
    15a0:	bc 83       	std	Y+4, r27	; 0x04
    15a2:	2e c0       	rjmp	.+92     	; 0x1600 <_ZN3DHT12readHumidityEb+0x12e>
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	38 2f       	mov	r19, r24
    15b2:	22 27       	eor	r18, r18
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	fc 01       	movw	r30, r24
    15ba:	81 81       	ldd	r24, Z+1	; 0x01
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	82 2b       	or	r24, r18
    15c2:	93 2b       	or	r25, r19
    15c4:	cc 01       	movw	r24, r24
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__floatunsisf>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	ab 83       	std	Y+3, r26	; 0x03
    15dc:	bc 83       	std	Y+4, r27	; 0x04
    15de:	2d ec       	ldi	r18, 0xCD	; 205
    15e0:	3c ec       	ldi	r19, 0xCC	; 204
    15e2:	4c ec       	ldi	r20, 0xCC	; 204
    15e4:	5d e3       	ldi	r21, 0x3D	; 61
    15e6:	69 81       	ldd	r22, Y+1	; 0x01
    15e8:	7a 81       	ldd	r23, Y+2	; 0x02
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	ab 83       	std	Y+3, r26	; 0x03
    15fc:	bc 83       	std	Y+4, r27	; 0x04
    15fe:	00 00       	nop
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	ab 81       	ldd	r26, Y+3	; 0x03
    1606:	bc 81       	ldd	r27, Y+4	; 0x04
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	27 96       	adiw	r28, 0x07	; 7
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	08 95       	ret

00001626 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	c4 55       	subi	r28, 0x54	; 84
    163e:	d1 40       	sbci	r29, 0x01	; 1
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9e 01       	movw	r18, r28
    164c:	2e 5a       	subi	r18, 0xAE	; 174
    164e:	3e 4f       	sbci	r19, 0xFE	; 254
    1650:	f9 01       	movw	r30, r18
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	ce 01       	movw	r24, r28
    1658:	8c 5a       	subi	r24, 0xAC	; 172
    165a:	9e 4f       	sbci	r25, 0xFE	; 254
    165c:	fc 01       	movw	r30, r24
    165e:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1660:	0e 94 0b 30 	call	0x6016	; 0x6016 <millis>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	af 83       	std	Y+7, r26	; 0x07
    166e:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1670:	ce 01       	movw	r24, r28
    1672:	8c 5a       	subi	r24, 0xAC	; 172
    1674:	9e 4f       	sbci	r25, 0xFE	; 254
    1676:	fc 01       	movw	r30, r24
    1678:	90 81       	ld	r25, Z
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 27       	eor	r24, r25
    167e:	88 23       	and	r24, r24
    1680:	29 f1       	breq	.+74     	; 0x16cc <_ZN3DHT4readEb+0xa6>
    1682:	ce 01       	movw	r24, r28
    1684:	8e 5a       	subi	r24, 0xAE	; 174
    1686:	9e 4f       	sbci	r25, 0xFE	; 254
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	fc 01       	movw	r30, r24
    1690:	81 85       	ldd	r24, Z+9	; 0x09
    1692:	92 85       	ldd	r25, Z+10	; 0x0a
    1694:	a3 85       	ldd	r26, Z+11	; 0x0b
    1696:	b4 85       	ldd	r27, Z+12	; 0x0c
    1698:	2d 81       	ldd	r18, Y+5	; 0x05
    169a:	3e 81       	ldd	r19, Y+6	; 0x06
    169c:	4f 81       	ldd	r20, Y+7	; 0x07
    169e:	58 85       	ldd	r21, Y+8	; 0x08
    16a0:	59 01       	movw	r10, r18
    16a2:	6a 01       	movw	r12, r20
    16a4:	a8 1a       	sub	r10, r24
    16a6:	b9 0a       	sbc	r11, r25
    16a8:	ca 0a       	sbc	r12, r26
    16aa:	db 0a       	sbc	r13, r27
    16ac:	d6 01       	movw	r26, r12
    16ae:	c5 01       	movw	r24, r10
    16b0:	80 3d       	cpi	r24, 0xD0	; 208
    16b2:	97 40       	sbci	r25, 0x07	; 7
    16b4:	a1 05       	cpc	r26, r1
    16b6:	b1 05       	cpc	r27, r1
    16b8:	48 f4       	brcc	.+18     	; 0x16cc <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    16ba:	ce 01       	movw	r24, r28
    16bc:	8e 5a       	subi	r24, 0xAE	; 174
    16be:	9e 4f       	sbci	r25, 0xFE	; 254
    16c0:	fc 01       	movw	r30, r24
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	fc 01       	movw	r30, r24
    16c8:	f1 88       	ldd	r15, Z+17	; 0x11
    16ca:	5f c2       	rjmp	.+1214   	; 0x1b8a <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    16cc:	ce 01       	movw	r24, r28
    16ce:	8e 5a       	subi	r24, 0xAE	; 174
    16d0:	9e 4f       	sbci	r25, 0xFE	; 254
    16d2:	fc 01       	movw	r30, r24
    16d4:	20 81       	ld	r18, Z
    16d6:	31 81       	ldd	r19, Z+1	; 0x01
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	af 81       	ldd	r26, Y+7	; 0x07
    16de:	b8 85       	ldd	r27, Y+8	; 0x08
    16e0:	f9 01       	movw	r30, r18
    16e2:	81 87       	std	Z+9, r24	; 0x09
    16e4:	92 87       	std	Z+10, r25	; 0x0a
    16e6:	a3 87       	std	Z+11, r26	; 0x0b
    16e8:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    16ea:	ce 01       	movw	r24, r28
    16ec:	8e 5a       	subi	r24, 0xAE	; 174
    16ee:	9e 4f       	sbci	r25, 0xFE	; 254
    16f0:	fc 01       	movw	r30, r24
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	fc 01       	movw	r30, r24
    16f8:	14 82       	std	Z+4, r1	; 0x04
    16fa:	ce 01       	movw	r24, r28
    16fc:	8e 5a       	subi	r24, 0xAE	; 174
    16fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1700:	fc 01       	movw	r30, r24
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	fc 01       	movw	r30, r24
    1708:	24 81       	ldd	r18, Z+4	; 0x04
    170a:	ce 01       	movw	r24, r28
    170c:	8e 5a       	subi	r24, 0xAE	; 174
    170e:	9e 4f       	sbci	r25, 0xFE	; 254
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	fc 01       	movw	r30, r24
    1718:	23 83       	std	Z+3, r18	; 0x03
    171a:	ce 01       	movw	r24, r28
    171c:	8e 5a       	subi	r24, 0xAE	; 174
    171e:	9e 4f       	sbci	r25, 0xFE	; 254
    1720:	fc 01       	movw	r30, r24
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	fc 01       	movw	r30, r24
    1728:	23 81       	ldd	r18, Z+3	; 0x03
    172a:	ce 01       	movw	r24, r28
    172c:	8e 5a       	subi	r24, 0xAE	; 174
    172e:	9e 4f       	sbci	r25, 0xFE	; 254
    1730:	fc 01       	movw	r30, r24
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	fc 01       	movw	r30, r24
    1738:	22 83       	std	Z+2, r18	; 0x02
    173a:	ce 01       	movw	r24, r28
    173c:	8e 5a       	subi	r24, 0xAE	; 174
    173e:	9e 4f       	sbci	r25, 0xFE	; 254
    1740:	fc 01       	movw	r30, r24
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	fc 01       	movw	r30, r24
    1748:	22 81       	ldd	r18, Z+2	; 0x02
    174a:	ce 01       	movw	r24, r28
    174c:	8e 5a       	subi	r24, 0xAE	; 174
    174e:	9e 4f       	sbci	r25, 0xFE	; 254
    1750:	fc 01       	movw	r30, r24
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	fc 01       	movw	r30, r24
    1758:	21 83       	std	Z+1, r18	; 0x01
    175a:	ce 01       	movw	r24, r28
    175c:	8e 5a       	subi	r24, 0xAE	; 174
    175e:	9e 4f       	sbci	r25, 0xFE	; 254
    1760:	fc 01       	movw	r30, r24
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	fc 01       	movw	r30, r24
    1768:	21 81       	ldd	r18, Z+1	; 0x01
    176a:	ce 01       	movw	r24, r28
    176c:	8e 5a       	subi	r24, 0xAE	; 174
    176e:	9e 4f       	sbci	r25, 0xFE	; 254
    1770:	fc 01       	movw	r30, r24
    1772:	80 81       	ld	r24, Z
    1774:	91 81       	ldd	r25, Z+1	; 0x01
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    177a:	ce 01       	movw	r24, r28
    177c:	8e 5a       	subi	r24, 0xAE	; 174
    177e:	9e 4f       	sbci	r25, 0xFE	; 254
    1780:	fc 01       	movw	r30, r24
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	fc 01       	movw	r30, r24
    1788:	85 81       	ldd	r24, Z+5	; 0x05
    178a:	62 e0       	ldi	r22, 0x02	; 2
    178c:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
  delay(1);
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    179c:	ce 01       	movw	r24, r28
    179e:	8e 5a       	subi	r24, 0xAE	; 174
    17a0:	9e 4f       	sbci	r25, 0xFE	; 254
    17a2:	fc 01       	movw	r30, r24
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	fc 01       	movw	r30, r24
    17aa:	85 81       	ldd	r24, Z+5	; 0x05
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
  digitalWrite(_pin, LOW);
    17b2:	ce 01       	movw	r24, r28
    17b4:	8e 5a       	subi	r24, 0xAE	; 174
    17b6:	9e 4f       	sbci	r25, 0xFE	; 254
    17b8:	fc 01       	movw	r30, r24
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	fc 01       	movw	r30, r24
    17c0:	85 81       	ldd	r24, Z+5	; 0x05
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
  switch (_type) {
    17c8:	ce 01       	movw	r24, r28
    17ca:	8e 5a       	subi	r24, 0xAE	; 174
    17cc:	9e 4f       	sbci	r25, 0xFE	; 254
    17ce:	fc 01       	movw	r30, r24
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	fc 01       	movw	r30, r24
    17d6:	86 81       	ldd	r24, Z+6	; 0x06
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	45 97       	sbiw	r24, 0x15	; 21
    17de:	02 97       	sbiw	r24, 0x02	; 2
    17e0:	28 f4       	brcc	.+10     	; 0x17ec <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    17e2:	8c e4       	ldi	r24, 0x4C	; 76
    17e4:	94 e0       	ldi	r25, 0x04	; 4
    17e6:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
    break;
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    17ec:	64 e1       	ldi	r22, 0x14	; 20
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
    break;
    17f8:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    17fa:	ce 01       	movw	r24, r28
    17fc:	8e 5a       	subi	r24, 0xAE	; 174
    17fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1800:	fc 01       	movw	r30, r24
    1802:	80 81       	ld	r24, Z
    1804:	91 81       	ldd	r25, Z+1	; 0x01
    1806:	fc 01       	movw	r30, r24
    1808:	85 81       	ldd	r24, Z+5	; 0x05
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    1810:	ce 01       	movw	r24, r28
    1812:	8e 5a       	subi	r24, 0xAE	; 174
    1814:	9e 4f       	sbci	r25, 0xFE	; 254
    1816:	fc 01       	movw	r30, r24
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	fc 01       	movw	r30, r24
    181e:	82 89       	ldd	r24, Z+18	; 0x12
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1828:	ce 01       	movw	r24, r28
    182a:	8f 5a       	subi	r24, 0xAF	; 175
    182c:	9e 4f       	sbci	r25, 0xFE	; 254
    182e:	2c dc       	rcall	.-1960   	; 0x1088 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1830:	ce 01       	movw	r24, r28
    1832:	8e 5a       	subi	r24, 0xAE	; 174
    1834:	9e 4f       	sbci	r25, 0xFE	; 254
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	b7 d1       	rcall	.+878    	; 0x1bae <_ZN3DHT11expectPulseEb>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	21 e0       	ldi	r18, 0x01	; 1
    1846:	8f 3f       	cpi	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	af 4f       	sbci	r26, 0xFF	; 255
    184c:	bf 4f       	sbci	r27, 0xFF	; 255
    184e:	09 f0       	breq	.+2      	; 0x1852 <_ZN3DHT4readEb+0x22c>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	22 23       	and	r18, r18
    1854:	99 f0       	breq	.+38     	; 0x187c <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    1856:	ce 01       	movw	r24, r28
    1858:	8e 5a       	subi	r24, 0xAE	; 174
    185a:	9e 4f       	sbci	r25, 0xFE	; 254
    185c:	fc 01       	movw	r30, r24
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	fc 01       	movw	r30, r24
    1864:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1866:	ce 01       	movw	r24, r28
    1868:	8e 5a       	subi	r24, 0xAE	; 174
    186a:	9e 4f       	sbci	r25, 0xFE	; 254
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	fc 01       	movw	r30, r24
    1874:	f1 88       	ldd	r15, Z+17	; 0x11
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	72 c0       	rjmp	.+228    	; 0x1960 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    187c:	ce 01       	movw	r24, r28
    187e:	8e 5a       	subi	r24, 0xAE	; 174
    1880:	9e 4f       	sbci	r25, 0xFE	; 254
    1882:	fc 01       	movw	r30, r24
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	91 d1       	rcall	.+802    	; 0x1bae <_ZN3DHT11expectPulseEb>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	8f 3f       	cpi	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	af 4f       	sbci	r26, 0xFF	; 255
    1898:	bf 4f       	sbci	r27, 0xFF	; 255
    189a:	09 f0       	breq	.+2      	; 0x189e <_ZN3DHT4readEb+0x278>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	22 23       	and	r18, r18
    18a0:	99 f0       	breq	.+38     	; 0x18c8 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    18a2:	ce 01       	movw	r24, r28
    18a4:	8e 5a       	subi	r24, 0xAE	; 174
    18a6:	9e 4f       	sbci	r25, 0xFE	; 254
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	fc 01       	movw	r30, r24
    18b0:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    18b2:	ce 01       	movw	r24, r28
    18b4:	8e 5a       	subi	r24, 0xAE	; 174
    18b6:	9e 4f       	sbci	r25, 0xFE	; 254
    18b8:	fc 01       	movw	r30, r24
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	fc 01       	movw	r30, r24
    18c0:	f1 88       	ldd	r15, Z+17	; 0x11
    18c2:	00 e0       	ldi	r16, 0x00	; 0
    18c4:	10 e0       	ldi	r17, 0x00	; 0
    18c6:	4c c0       	rjmp	.+152    	; 0x1960 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    18c8:	1a 82       	std	Y+2, r1	; 0x02
    18ca:	19 82       	std	Y+1, r1	; 0x01
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	80 35       	cpi	r24, 0x50	; 80
    18d2:	91 05       	cpc	r25, r1
    18d4:	0c f0       	brlt	.+2      	; 0x18d8 <_ZN3DHT4readEb+0x2b2>
    18d6:	42 c0       	rjmp	.+132    	; 0x195c <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    18d8:	ce 01       	movw	r24, r28
    18da:	8e 5a       	subi	r24, 0xAE	; 174
    18dc:	9e 4f       	sbci	r25, 0xFE	; 254
    18de:	fc 01       	movw	r30, r24
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	63 d1       	rcall	.+710    	; 0x1bae <_ZN3DHT11expectPulseEb>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	29 81       	ldd	r18, Y+1	; 0x01
    18ee:	3a 81       	ldd	r19, Y+2	; 0x02
    18f0:	22 0f       	add	r18, r18
    18f2:	33 1f       	adc	r19, r19
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	ae 01       	movw	r20, r28
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	24 0f       	add	r18, r20
    1900:	35 1f       	adc	r19, r21
    1902:	20 5f       	subi	r18, 0xF0	; 240
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	f9 01       	movw	r30, r18
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	a2 83       	std	Z+2, r26	; 0x02
    190e:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	8c 01       	movw	r16, r24
    1916:	0f 5f       	subi	r16, 0xFF	; 255
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	ce 01       	movw	r24, r28
    191c:	8e 5a       	subi	r24, 0xAE	; 174
    191e:	9e 4f       	sbci	r25, 0xFE	; 254
    1920:	fc 01       	movw	r30, r24
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	42 d1       	rcall	.+644    	; 0x1bae <_ZN3DHT11expectPulseEb>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	98 01       	movw	r18, r16
    1930:	22 0f       	add	r18, r18
    1932:	33 1f       	adc	r19, r19
    1934:	22 0f       	add	r18, r18
    1936:	33 1f       	adc	r19, r19
    1938:	ae 01       	movw	r20, r28
    193a:	4f 5f       	subi	r20, 0xFF	; 255
    193c:	5f 4f       	sbci	r21, 0xFF	; 255
    193e:	24 0f       	add	r18, r20
    1940:	35 1f       	adc	r19, r21
    1942:	20 5f       	subi	r18, 0xF0	; 240
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	f9 01       	movw	r30, r18
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	02 96       	adiw	r24, 0x02	; 2
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	b8 cf       	rjmp	.-144    	; 0x18cc <_ZN3DHT4readEb+0x2a6>
    195c:	01 e0       	ldi	r16, 0x01	; 1
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	ce 01       	movw	r24, r28
    1962:	8f 5a       	subi	r24, 0xAF	; 175
    1964:	9e 4f       	sbci	r25, 0xFE	; 254
    1966:	9f db       	rcall	.-2242   	; 0x10a6 <_ZN13InterruptLockD1Ev>
    1968:	01 30       	cpi	r16, 0x01	; 1
    196a:	11 05       	cpc	r17, r1
    196c:	09 f0       	breq	.+2      	; 0x1970 <_ZN3DHT4readEb+0x34a>
    196e:	0d c1       	rjmp	.+538    	; 0x1b8a <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1970:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1972:	1c 82       	std	Y+4, r1	; 0x04
    1974:	1b 82       	std	Y+3, r1	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	88 97       	sbiw	r24, 0x28	; 40
    197c:	0c f0       	brlt	.+2      	; 0x1980 <_ZN3DHT4readEb+0x35a>
    197e:	a7 c0       	rjmp	.+334    	; 0x1ace <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	9e 01       	movw	r18, r28
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	82 0f       	add	r24, r18
    1998:	93 1f       	adc	r25, r19
    199a:	40 96       	adiw	r24, 0x10	; 16
    199c:	fc 01       	movw	r30, r24
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	a2 81       	ldd	r26, Z+2	; 0x02
    19a4:	b3 81       	ldd	r27, Z+3	; 0x03
    19a6:	89 87       	std	Y+9, r24	; 0x09
    19a8:	9a 87       	std	Y+10, r25	; 0x0a
    19aa:	ab 87       	std	Y+11, r26	; 0x0b
    19ac:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	9e 01       	movw	r18, r28
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	40 96       	adiw	r24, 0x10	; 16
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	a2 81       	ldd	r26, Z+2	; 0x02
    19d4:	b3 81       	ldd	r27, Z+3	; 0x03
    19d6:	8d 87       	std	Y+13, r24	; 0x0d
    19d8:	9e 87       	std	Y+14, r25	; 0x0e
    19da:	af 87       	std	Y+15, r26	; 0x0f
    19dc:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    19e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    19e6:	8f 3f       	cpi	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	af 4f       	sbci	r26, 0xFF	; 255
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	49 f0       	breq	.+18     	; 0x1a02 <_ZN3DHT4readEb+0x3dc>
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	af 85       	ldd	r26, Y+15	; 0x0f
    19f6:	b8 89       	ldd	r27, Y+16	; 0x10
    19f8:	8f 3f       	cpi	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	af 4f       	sbci	r26, 0xFF	; 255
    19fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1a00:	89 f4       	brne	.+34     	; 0x1a24 <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    1a02:	ce 01       	movw	r24, r28
    1a04:	8e 5a       	subi	r24, 0xAE	; 174
    1a06:	9e 4f       	sbci	r25, 0xFE	; 254
    1a08:	fc 01       	movw	r30, r24
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	fc 01       	movw	r30, r24
    1a10:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1a12:	ce 01       	movw	r24, r28
    1a14:	8e 5a       	subi	r24, 0xAE	; 174
    1a16:	9e 4f       	sbci	r25, 0xFE	; 254
    1a18:	fc 01       	movw	r30, r24
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	fc 01       	movw	r30, r24
    1a20:	f1 88       	ldd	r15, Z+17	; 0x11
    1a22:	b3 c0       	rjmp	.+358    	; 0x1b8a <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	99 23       	and	r25, r25
    1a2a:	0c f4       	brge	.+2      	; 0x1a2e <_ZN3DHT4readEb+0x408>
    1a2c:	07 96       	adiw	r24, 0x07	; 7
    1a2e:	95 95       	asr	r25
    1a30:	87 95       	ror	r24
    1a32:	95 95       	asr	r25
    1a34:	87 95       	ror	r24
    1a36:	95 95       	asr	r25
    1a38:	87 95       	ror	r24
    1a3a:	9e 01       	movw	r18, r28
    1a3c:	2e 5a       	subi	r18, 0xAE	; 174
    1a3e:	3e 4f       	sbci	r19, 0xFE	; 254
    1a40:	f9 01       	movw	r30, r18
    1a42:	20 81       	ld	r18, Z
    1a44:	31 81       	ldd	r19, Z+1	; 0x01
    1a46:	28 0f       	add	r18, r24
    1a48:	39 1f       	adc	r19, r25
    1a4a:	f9 01       	movw	r30, r18
    1a4c:	20 81       	ld	r18, Z
    1a4e:	42 2f       	mov	r20, r18
    1a50:	44 0f       	add	r20, r20
    1a52:	9e 01       	movw	r18, r28
    1a54:	2e 5a       	subi	r18, 0xAE	; 174
    1a56:	3e 4f       	sbci	r19, 0xFE	; 254
    1a58:	f9 01       	movw	r30, r18
    1a5a:	20 81       	ld	r18, Z
    1a5c:	31 81       	ldd	r19, Z+1	; 0x01
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	fc 01       	movw	r30, r24
    1a64:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    1a66:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a68:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a6a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a6c:	58 89       	ldd	r21, Y+16	; 0x10
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a74:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a76:	82 17       	cp	r24, r18
    1a78:	93 07       	cpc	r25, r19
    1a7a:	a4 07       	cpc	r26, r20
    1a7c:	b5 07       	cpc	r27, r21
    1a7e:	08 f5       	brcc	.+66     	; 0x1ac2 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	99 23       	and	r25, r25
    1a86:	0c f4       	brge	.+2      	; 0x1a8a <_ZN3DHT4readEb+0x464>
    1a88:	07 96       	adiw	r24, 0x07	; 7
    1a8a:	95 95       	asr	r25
    1a8c:	87 95       	ror	r24
    1a8e:	95 95       	asr	r25
    1a90:	87 95       	ror	r24
    1a92:	95 95       	asr	r25
    1a94:	87 95       	ror	r24
    1a96:	9e 01       	movw	r18, r28
    1a98:	2e 5a       	subi	r18, 0xAE	; 174
    1a9a:	3e 4f       	sbci	r19, 0xFE	; 254
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	20 81       	ld	r18, Z
    1aa0:	31 81       	ldd	r19, Z+1	; 0x01
    1aa2:	28 0f       	add	r18, r24
    1aa4:	39 1f       	adc	r19, r25
    1aa6:	f9 01       	movw	r30, r18
    1aa8:	20 81       	ld	r18, Z
    1aaa:	42 2f       	mov	r20, r18
    1aac:	41 60       	ori	r20, 0x01	; 1
    1aae:	9e 01       	movw	r18, r28
    1ab0:	2e 5a       	subi	r18, 0xAE	; 174
    1ab2:	3e 4f       	sbci	r19, 0xFE	; 254
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	20 81       	ld	r18, Z
    1ab8:	31 81       	ldd	r19, Z+1	; 0x01
    1aba:	82 0f       	add	r24, r18
    1abc:	93 1f       	adc	r25, r19
    1abe:	fc 01       	movw	r30, r24
    1ac0:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	54 cf       	rjmp	.-344    	; 0x1976 <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    1ace:	ce 01       	movw	r24, r28
    1ad0:	8e 5a       	subi	r24, 0xAE	; 174
    1ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	fc 01       	movw	r30, r24
    1adc:	84 81       	ldd	r24, Z+4	; 0x04
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	8e 5a       	subi	r24, 0xAE	; 174
    1ae6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae8:	fc 01       	movw	r30, r24
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	fc 01       	movw	r30, r24
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	ce 01       	movw	r24, r28
    1af8:	8e 5a       	subi	r24, 0xAE	; 174
    1afa:	9e 4f       	sbci	r25, 0xFE	; 254
    1afc:	fc 01       	movw	r30, r24
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	fc 01       	movw	r30, r24
    1b04:	81 81       	ldd	r24, Z+1	; 0x01
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	48 0f       	add	r20, r24
    1b0c:	59 1f       	adc	r21, r25
    1b0e:	ce 01       	movw	r24, r28
    1b10:	8e 5a       	subi	r24, 0xAE	; 174
    1b12:	9e 4f       	sbci	r25, 0xFE	; 254
    1b14:	fc 01       	movw	r30, r24
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	48 0f       	add	r20, r24
    1b24:	59 1f       	adc	r21, r25
    1b26:	ce 01       	movw	r24, r28
    1b28:	8e 5a       	subi	r24, 0xAE	; 174
    1b2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	fc 01       	movw	r30, r24
    1b34:	83 81       	ldd	r24, Z+3	; 0x03
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	84 0f       	add	r24, r20
    1b3c:	95 1f       	adc	r25, r21
    1b3e:	99 27       	eor	r25, r25
    1b40:	28 17       	cp	r18, r24
    1b42:	39 07       	cpc	r19, r25
    1b44:	91 f4       	brne	.+36     	; 0x1b6a <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1b46:	ce 01       	movw	r24, r28
    1b48:	8e 5a       	subi	r24, 0xAE	; 174
    1b4a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	fc 01       	movw	r30, r24
    1b56:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1b58:	ce 01       	movw	r24, r28
    1b5a:	8e 5a       	subi	r24, 0xAE	; 174
    1b5c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b5e:	fc 01       	movw	r30, r24
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	fc 01       	movw	r30, r24
    1b66:	f1 88       	ldd	r15, Z+17	; 0x11
    1b68:	10 c0       	rjmp	.+32     	; 0x1b8a <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	8e 5a       	subi	r24, 0xAE	; 174
    1b6e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b70:	fc 01       	movw	r30, r24
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	fc 01       	movw	r30, r24
    1b78:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	8e 5a       	subi	r24, 0xAE	; 174
    1b7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b80:	fc 01       	movw	r30, r24
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	fc 01       	movw	r30, r24
    1b88:	f1 88       	ldd	r15, Z+17	; 0x11
    1b8a:	8f 2d       	mov	r24, r15
  }
}
    1b8c:	cc 5a       	subi	r28, 0xAC	; 172
    1b8e:	de 4f       	sbci	r29, 0xFE	; 254
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	08 95       	ret

00001bae <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	2a 97       	sbiw	r28, 0x0a	; 10
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	99 87       	std	Y+9, r25	; 0x09
    1bc4:	88 87       	std	Y+8, r24	; 0x08
    1bc6:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1bc8:	1a 82       	std	Y+2, r1	; 0x02
    1bca:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1bcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bce:	88 23       	and	r24, r24
    1bd0:	29 f0       	breq	.+10     	; 0x1bdc <_ZN3DHT11expectPulseEb+0x2e>
    1bd2:	88 85       	ldd	r24, Y+8	; 0x08
    1bd4:	99 85       	ldd	r25, Y+9	; 0x09
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	87 81       	ldd	r24, Z+7	; 0x07
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <_ZN3DHT11expectPulseEb+0x30>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1be0:	88 85       	ldd	r24, Y+8	; 0x08
    1be2:	99 85       	ldd	r25, Y+9	; 0x09
    1be4:	fc 01       	movw	r30, r24
    1be6:	80 85       	ldd	r24, Z+8	; 0x08
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	86 52       	subi	r24, 0x26	; 38
    1bf2:	9e 4f       	sbci	r25, 0xFE	; 254
    1bf4:	9d 83       	std	Y+5, r25	; 0x05
    1bf6:	8c 83       	std	Y+4, r24	; 0x04
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	25 91       	lpm	r18, Z+
    1c00:	34 91       	lpm	r19, Z
    1c02:	cf 01       	movw	r24, r30
    1c04:	3f 83       	std	Y+7, r19	; 0x07
    1c06:	2e 83       	std	Y+6, r18	; 0x06
    1c08:	9d 83       	std	Y+5, r25	; 0x05
    1c0a:	8c 83       	std	Y+4, r24	; 0x04
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 81       	ld	r18, Z
    1c14:	88 85       	ldd	r24, Y+8	; 0x08
    1c16:	99 85       	ldd	r25, Y+9	; 0x09
    1c18:	fc 01       	movw	r30, r24
    1c1a:	87 81       	ldd	r24, Z+7	; 0x07
    1c1c:	28 23       	and	r18, r24
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	29 17       	cp	r18, r25
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <_ZN3DHT11expectPulseEb+0x7a>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	88 23       	and	r24, r24
    1c2a:	f9 f0       	breq	.+62     	; 0x1c6a <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	9c 01       	movw	r18, r24
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	3a 83       	std	Y+2, r19	; 0x02
    1c38:	29 83       	std	Y+1, r18	; 0x01
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	88 85       	ldd	r24, Y+8	; 0x08
    1c42:	99 85       	ldd	r25, Y+9	; 0x09
    1c44:	fc 01       	movw	r30, r24
    1c46:	85 85       	ldd	r24, Z+13	; 0x0d
    1c48:	96 85       	ldd	r25, Z+14	; 0x0e
    1c4a:	a7 85       	ldd	r26, Z+15	; 0x0f
    1c4c:	b0 89       	ldd	r27, Z+16	; 0x10
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	28 17       	cp	r18, r24
    1c52:	39 07       	cpc	r19, r25
    1c54:	4a 07       	cpc	r20, r26
    1c56:	5b 07       	cpc	r21, r27
    1c58:	08 f4       	brcc	.+2      	; 0x1c5c <_ZN3DHT11expectPulseEb+0xae>
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	66 23       	and	r22, r22
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <_ZN3DHT11expectPulseEb+0xb4>
    1c60:	bf cf       	rjmp	.-130    	; 0x1be0 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	dc 01       	movw	r26, r24
    1c68:	05 c0       	rjmp	.+10     	; 0x1c74 <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	cc 01       	movw	r24, r24
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
}
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	2a 96       	adiw	r28, 0x0a	; 10
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	1f 92       	push	r1
    1c90:	1f 92       	push	r1
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	27 ec       	ldi	r18, 0xC7	; 199
    1c9c:	32 e0       	ldi	r19, 0x02	; 2
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	31 83       	std	Z+1, r19	; 0x01
    1ca6:	20 83       	st	Z, r18
    1ca8:	00 00       	nop
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1cb4:	af 92       	push	r10
    1cb6:	bf 92       	push	r11
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	2d 97       	sbiw	r28, 0x0d	; 13
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6b 83       	std	Y+3, r22	; 0x03
    1cde:	4c 83       	std	Y+4, r20	; 0x04
    1ce0:	2d 83       	std	Y+5, r18	; 0x05
    1ce2:	ee 82       	std	Y+6, r14	; 0x06
    1ce4:	ff 82       	std	Y+7, r15	; 0x07
    1ce6:	08 87       	std	Y+8, r16	; 0x08
    1ce8:	19 87       	std	Y+9, r17	; 0x09
    1cea:	aa 86       	std	Y+10, r10	; 0x0a
    1cec:	bb 86       	std	Y+11, r11	; 0x0b
    1cee:	cc 86       	std	Y+12, r12	; 0x0c
    1cf0:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf8:	4c 81       	ldd	r20, Y+4	; 0x04
    1cfa:	6b 81       	ldd	r22, Y+3	; 0x03
    1cfc:	e3 d9       	rcall	.-3130   	; 0x10c4 <_ZN3DHTC1Ehhh>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	fc 01       	movw	r30, r24
    1d06:	23 8b       	std	Z+19, r18	; 0x13
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	74 96       	adiw	r30, 0x14	; 20
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	a8 85       	ldd	r26, Y+8	; 0x08
    1d16:	b9 85       	ldd	r27, Y+9	; 0x09
    1d18:	69 81       	ldd	r22, Y+1	; 0x01
    1d1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1c:	9c 01       	movw	r18, r24
    1d1e:	ad 01       	movw	r20, r26
    1d20:	cf 01       	movw	r24, r30
    1d22:	f6 d0       	rcall	.+492    	; 0x1f10 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	fc 01       	movw	r30, r24
    1d2a:	7d 96       	adiw	r30, 0x1d	; 29
    1d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d30:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d32:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d34:	69 81       	ldd	r22, Y+1	; 0x01
    1d36:	7a 81       	ldd	r23, Y+2	; 0x02
    1d38:	9c 01       	movw	r18, r24
    1d3a:	ad 01       	movw	r20, r26
    1d3c:	cf 01       	movw	r24, r30
    1d3e:	7e d2       	rcall	.+1276   	; 0x223c <_ZN11DHT_Unified8HumidityC1EPS_l>
    1d40:	00 00       	nop
    1d42:	2d 96       	adiw	r28, 0x0d	; 13
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	bf 90       	pop	r11
    1d60:	af 90       	pop	r10
    1d62:	08 95       	ret

00001d64 <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	1f 92       	push	r1
    1d6a:	1f 92       	push	r1
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	67 e3       	ldi	r22, 0x37	; 55
    1d7a:	f4 d9       	rcall	.-3096   	; 0x1164 <_ZN3DHT5beginEh>
    1d7c:	00 00       	nop
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1d8e:	1f 92       	push	r1
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	7c 83       	std	Y+4, r23	; 0x04
    1d9a:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	fc 01       	movw	r30, r24
    1da2:	83 89       	ldd	r24, Z+19	; 0x13
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	8c 30       	cpi	r24, 0x0C	; 12
    1daa:	91 05       	cpc	r25, r1
    1dac:	b1 f0       	breq	.+44     	; 0x1dda <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1dae:	8d 30       	cpi	r24, 0x0D	; 13
    1db0:	91 05       	cpc	r25, r1
    1db2:	1c f4       	brge	.+6      	; 0x1dba <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1db4:	0b 97       	sbiw	r24, 0x0b	; 11
    1db6:	39 f0       	breq	.+14     	; 0x1dc6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1db8:	2e c0       	rjmp	.+92     	; 0x1e16 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1dba:	85 31       	cpi	r24, 0x15	; 21
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	b9 f0       	breq	.+46     	; 0x1dee <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1dc0:	46 97       	sbiw	r24, 0x16	; 22
    1dc2:	f9 f0       	breq	.+62     	; 0x1e02 <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1dc4:	28 c0       	rjmp	.+80     	; 0x1e16 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1dc6:	2b e0       	ldi	r18, 0x0B	; 11
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	a9 01       	movw	r20, r18
    1dd0:	6e e9       	ldi	r22, 0x9E	; 158
    1dd2:	72 e0       	ldi	r23, 0x02	; 2
    1dd4:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strncpy>
    break;
    1dd8:	28 c0       	rjmp	.+80     	; 0x1e2a <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1dda:	2b e0       	ldi	r18, 0x0B	; 11
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	a9 01       	movw	r20, r18
    1de4:	64 ea       	ldi	r22, 0xA4	; 164
    1de6:	72 e0       	ldi	r23, 0x02	; 2
    1de8:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strncpy>
    break;
    1dec:	1e c0       	rjmp	.+60     	; 0x1e2a <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1dee:	2b e0       	ldi	r18, 0x0B	; 11
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	a9 01       	movw	r20, r18
    1df8:	6a ea       	ldi	r22, 0xAA	; 170
    1dfa:	72 e0       	ldi	r23, 0x02	; 2
    1dfc:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strncpy>
    break;
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1e02:	2b e0       	ldi	r18, 0x0B	; 11
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	60 eb       	ldi	r22, 0xB0	; 176
    1e0e:	72 e0       	ldi	r23, 0x02	; 2
    1e10:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strncpy>
    break;
    1e14:	0a c0       	rjmp	.+20     	; 0x1e2a <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1e16:	2b e0       	ldi	r18, 0x0B	; 11
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	a9 01       	movw	r20, r18
    1e20:	66 eb       	ldi	r22, 0xB6	; 182
    1e22:	72 e0       	ldi	r23, 0x02	; 2
    1e24:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strncpy>
    break;
    1e28:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1e2a:	8b e0       	ldi	r24, 0x0B	; 11
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e30:	3c 81       	ldd	r19, Y+4	; 0x04
    1e32:	82 0f       	add	r24, r18
    1e34:	93 1f       	adc	r25, r19
    1e36:	fc 01       	movw	r30, r24
    1e38:	10 82       	st	Z, r1
}
    1e3a:	00 00       	nop
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1e50:	1f 92       	push	r1
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	7c 83       	std	Y+4, r23	; 0x04
    1e5c:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	fc 01       	movw	r30, r24
    1e64:	83 89       	ldd	r24, Z+19	; 0x13
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	8c 30       	cpi	r24, 0x0C	; 12
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	c1 f0       	breq	.+48     	; 0x1ea0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1e70:	8d 30       	cpi	r24, 0x0D	; 13
    1e72:	91 05       	cpc	r25, r1
    1e74:	1c f4       	brge	.+6      	; 0x1e7c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1e76:	0b 97       	sbiw	r24, 0x0b	; 11
    1e78:	39 f0       	breq	.+14     	; 0x1e88 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1e7a:	36 c0       	rjmp	.+108    	; 0x1ee8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1e7c:	85 31       	cpi	r24, 0x15	; 21
    1e7e:	91 05       	cpc	r25, r1
    1e80:	d9 f0       	breq	.+54     	; 0x1eb8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1e82:	46 97       	sbiw	r24, 0x16	; 22
    1e84:	29 f1       	breq	.+74     	; 0x1ed0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1e86:	30 c0       	rjmp	.+96     	; 0x1ee8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	80 e4       	ldi	r24, 0x40	; 64
    1e8e:	92 e4       	ldi	r25, 0x42	; 66
    1e90:	af e0       	ldi	r26, 0x0F	; 15
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	f9 01       	movw	r30, r18
    1e96:	84 a3       	std	Z+36, r24	; 0x24
    1e98:	95 a3       	std	Z+37, r25	; 0x25
    1e9a:	a6 a3       	std	Z+38, r26	; 0x26
    1e9c:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e9e:	30 c0       	rjmp	.+96     	; 0x1f00 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	80 e8       	ldi	r24, 0x80	; 128
    1ea6:	94 e8       	ldi	r25, 0x84	; 132
    1ea8:	ae e1       	ldi	r26, 0x1E	; 30
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	f9 01       	movw	r30, r18
    1eae:	84 a3       	std	Z+36, r24	; 0x24
    1eb0:	95 a3       	std	Z+37, r25	; 0x25
    1eb2:	a6 a3       	std	Z+38, r26	; 0x26
    1eb4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1eb6:	24 c0       	rjmp	.+72     	; 0x1f00 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eba:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebc:	80 e8       	ldi	r24, 0x80	; 128
    1ebe:	94 e8       	ldi	r25, 0x84	; 132
    1ec0:	ae e1       	ldi	r26, 0x1E	; 30
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	84 a3       	std	Z+36, r24	; 0x24
    1ec8:	95 a3       	std	Z+37, r25	; 0x25
    1eca:	a6 a3       	std	Z+38, r26	; 0x26
    1ecc:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1ece:	18 c0       	rjmp	.+48     	; 0x1f00 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed4:	80 e8       	ldi	r24, 0x80	; 128
    1ed6:	94 e8       	ldi	r25, 0x84	; 132
    1ed8:	ae e1       	ldi	r26, 0x1E	; 30
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	f9 01       	movw	r30, r18
    1ede:	84 a3       	std	Z+36, r24	; 0x24
    1ee0:	95 a3       	std	Z+37, r25	; 0x25
    1ee2:	a6 a3       	std	Z+38, r26	; 0x26
    1ee4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1ee6:	0c c0       	rjmp	.+24     	; 0x1f00 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eea:	3c 81       	ldd	r19, Y+4	; 0x04
    1eec:	80 e8       	ldi	r24, 0x80	; 128
    1eee:	94 e8       	ldi	r25, 0x84	; 132
    1ef0:	ae e1       	ldi	r26, 0x1E	; 30
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	84 a3       	std	Z+36, r24	; 0x24
    1ef8:	95 a3       	std	Z+37, r25	; 0x25
    1efa:	a6 a3       	std	Z+38, r26	; 0x26
    1efc:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1efe:	00 00       	nop
  }
}
    1f00:	00 00       	nop
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	08 95       	ret

00001f10 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	28 97       	sbiw	r28, 0x08	; 8
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	7c 83       	std	Y+4, r23	; 0x04
    1f2a:	6b 83       	std	Y+3, r22	; 0x03
    1f2c:	2d 83       	std	Y+5, r18	; 0x05
    1f2e:	3e 83       	std	Y+6, r19	; 0x06
    1f30:	4f 83       	std	Y+7, r20	; 0x07
    1f32:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	a8 de       	rcall	.-688    	; 0x1c8a <_ZN15Adafruit_SensorC1Ev>
    1f3a:	23 ee       	ldi	r18, 0xE3	; 227
    1f3c:	32 e0       	ldi	r19, 0x02	; 2
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	fc 01       	movw	r30, r24
    1f44:	31 83       	std	Z+1, r19	; 0x01
    1f46:	20 83       	st	Z, r18
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	fc 01       	movw	r30, r24
    1f52:	34 83       	std	Z+4, r19	; 0x04
    1f54:	23 83       	std	Z+3, r18	; 0x03
    1f56:	29 81       	ldd	r18, Y+1	; 0x01
    1f58:	3a 81       	ldd	r19, Y+2	; 0x02
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	af 81       	ldd	r26, Y+7	; 0x07
    1f60:	b8 85       	ldd	r27, Y+8	; 0x08
    1f62:	f9 01       	movw	r30, r18
    1f64:	85 83       	std	Z+5, r24	; 0x05
    1f66:	96 83       	std	Z+6, r25	; 0x06
    1f68:	a7 83       	std	Z+7, r26	; 0x07
    1f6a:	b0 87       	std	Z+8, r27	; 0x08
    1f6c:	00 00       	nop
    1f6e:	28 96       	adiw	r28, 0x08	; 8
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1f86:	1f 92       	push	r1
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	7c 83       	std	Y+4, r23	; 0x04
    1f92:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	44 e2       	ldi	r20, 0x24	; 36
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1fa4:	84 e2       	ldi	r24, 0x24	; 36
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	80 83       	st	Z, r24
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	a2 83       	std	Z+2, r26	; 0x02
    1fb8:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	85 81       	ldd	r24, Z+5	; 0x05
    1fc2:	96 81       	ldd	r25, Z+6	; 0x06
    1fc4:	a7 81       	ldd	r26, Z+7	; 0x07
    1fc6:	b0 85       	ldd	r27, Z+8	; 0x08
    1fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fca:	3c 81       	ldd	r19, Y+4	; 0x04
    1fcc:	f9 01       	movw	r30, r18
    1fce:	84 83       	std	Z+4, r24	; 0x04
    1fd0:	95 83       	std	Z+5, r25	; 0x05
    1fd2:	a6 83       	std	Z+6, r26	; 0x06
    1fd4:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fda:	8d e0       	ldi	r24, 0x0D	; 13
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	80 87       	std	Z+8, r24	; 0x08
    1fe6:	91 87       	std	Z+9, r25	; 0x09
    1fe8:	a2 87       	std	Z+10, r26	; 0x0a
    1fea:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1fec:	0e 94 0b 30 	call	0x6016	; 0x6016 <millis>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	80 8b       	std	Z+16, r24	; 0x10
    1ffc:	91 8b       	std	Z+17, r25	; 0x11
    1ffe:	a2 8b       	std	Z+18, r26	; 0x12
    2000:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	fc 01       	movw	r30, r24
    2008:	83 81       	ldd	r24, Z+3	; 0x03
    200a:	94 81       	ldd	r25, Z+4	; 0x04
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	d3 d8       	rcall	.-3674   	; 0x11b8 <_ZN3DHT15readTemperatureEbb>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	f9 01       	movw	r30, r18
    201c:	84 8b       	std	Z+20, r24	; 0x14
    201e:	95 8b       	std	Z+21, r25	; 0x15
    2020:	a6 8b       	std	Z+22, r26	; 0x16
    2022:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2024:	81 e0       	ldi	r24, 0x01	; 1
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

00002034 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	00 d0       	rcall	.+0      	; 0x203a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    203a:	1f 92       	push	r1
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	7c 83       	std	Y+4, r23	; 0x04
    2046:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	48 e2       	ldi	r20, 0x28	; 40
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	fc 01       	movw	r30, r24
    205e:	83 81       	ldd	r24, Z+3	; 0x03
    2060:	94 81       	ldd	r25, Z+4	; 0x04
    2062:	2b 81       	ldd	r18, Y+3	; 0x03
    2064:	3c 81       	ldd	r19, Y+4	; 0x04
    2066:	b9 01       	movw	r22, r18
    2068:	8f de       	rcall	.-738    	; 0x1d88 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    206a:	2b 81       	ldd	r18, Y+3	; 0x03
    206c:	3c 81       	ldd	r19, Y+4	; 0x04
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	f9 01       	movw	r30, r18
    2078:	84 87       	std	Z+12, r24	; 0x0c
    207a:	95 87       	std	Z+13, r25	; 0x0d
    207c:	a6 87       	std	Z+14, r26	; 0x0e
    207e:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	fc 01       	movw	r30, r24
    2086:	85 81       	ldd	r24, Z+5	; 0x05
    2088:	96 81       	ldd	r25, Z+6	; 0x06
    208a:	a7 81       	ldd	r26, Z+7	; 0x07
    208c:	b0 85       	ldd	r27, Z+8	; 0x08
    208e:	2b 81       	ldd	r18, Y+3	; 0x03
    2090:	3c 81       	ldd	r19, Y+4	; 0x04
    2092:	f9 01       	movw	r30, r18
    2094:	80 8b       	std	Z+16, r24	; 0x10
    2096:	91 8b       	std	Z+17, r25	; 0x11
    2098:	a2 8b       	std	Z+18, r26	; 0x12
    209a:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	8d e0       	ldi	r24, 0x0D	; 13
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a0 e0       	ldi	r26, 0x00	; 0
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	f9 01       	movw	r30, r18
    20aa:	84 8b       	std	Z+20, r24	; 0x14
    20ac:	95 8b       	std	Z+21, r25	; 0x15
    20ae:	a6 8b       	std	Z+22, r26	; 0x16
    20b0:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	fc 01       	movw	r30, r24
    20b8:	83 81       	ldd	r24, Z+3	; 0x03
    20ba:	94 81       	ldd	r25, Z+4	; 0x04
    20bc:	2b 81       	ldd	r18, Y+3	; 0x03
    20be:	3c 81       	ldd	r19, Y+4	; 0x04
    20c0:	b9 01       	movw	r22, r18
    20c2:	c3 de       	rcall	.-634    	; 0x1e4a <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	fc 01       	movw	r30, r24
    20ca:	83 81       	ldd	r24, Z+3	; 0x03
    20cc:	94 81       	ldd	r25, Z+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	83 89       	ldd	r24, Z+19	; 0x13
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	8c 30       	cpi	r24, 0x0C	; 12
    20d8:	91 05       	cpc	r25, r1
    20da:	61 f1       	breq	.+88     	; 0x2134 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    20dc:	8d 30       	cpi	r24, 0x0D	; 13
    20de:	91 05       	cpc	r25, r1
    20e0:	1c f4       	brge	.+6      	; 0x20e8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    20e2:	0b 97       	sbiw	r24, 0x0b	; 11
    20e4:	49 f0       	breq	.+18     	; 0x20f8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    20e6:	8c c0       	rjmp	.+280    	; 0x2200 <__stack+0x1>
    20e8:	85 31       	cpi	r24, 0x15	; 21
    20ea:	91 05       	cpc	r25, r1
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    20ee:	44 c0       	rjmp	.+136    	; 0x2178 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x144>
    20f0:	46 97       	sbiw	r24, 0x16	; 22
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    20f4:	63 c0       	rjmp	.+198    	; 0x21bc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x188>
    20f6:	84 c0       	rjmp	.+264    	; 0x2200 <__stack+0x1>
  case DHT11:
    sensor->max_value = 50.0F;
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3c 81       	ldd	r19, Y+4	; 0x04
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a8 e4       	ldi	r26, 0x48	; 72
    2102:	b2 e4       	ldi	r27, 0x42	; 66
    2104:	f9 01       	movw	r30, r18
    2106:	80 8f       	std	Z+24, r24	; 0x18
    2108:	91 8f       	std	Z+25, r25	; 0x19
    210a:	a2 8f       	std	Z+26, r26	; 0x1a
    210c:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	fc 01       	movw	r30, r24
    2114:	14 8e       	std	Z+28, r1	; 0x1c
    2116:	15 8e       	std	Z+29, r1	; 0x1d
    2118:	16 8e       	std	Z+30, r1	; 0x1e
    211a:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	3c 81       	ldd	r19, Y+4	; 0x04
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b0 e4       	ldi	r27, 0x40	; 64
    2128:	f9 01       	movw	r30, r18
    212a:	80 a3       	std	Z+32, r24	; 0x20
    212c:	91 a3       	std	Z+33, r25	; 0x21
    212e:	a2 a3       	std	Z+34, r26	; 0x22
    2130:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2132:	7c c0       	rjmp	.+248    	; 0x222c <__stack+0x2d>
  case DHT12:
    sensor->max_value = 60.0F;
    2134:	2b 81       	ldd	r18, Y+3	; 0x03
    2136:	3c 81       	ldd	r19, Y+4	; 0x04
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e7       	ldi	r26, 0x70	; 112
    213e:	b2 e4       	ldi	r27, 0x42	; 66
    2140:	f9 01       	movw	r30, r18
    2142:	80 8f       	std	Z+24, r24	; 0x18
    2144:	91 8f       	std	Z+25, r25	; 0x19
    2146:	a2 8f       	std	Z+26, r26	; 0x1a
    2148:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    214a:	2b 81       	ldd	r18, Y+3	; 0x03
    214c:	3c 81       	ldd	r19, Y+4	; 0x04
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 ea       	ldi	r26, 0xA0	; 160
    2154:	b1 ec       	ldi	r27, 0xC1	; 193
    2156:	f9 01       	movw	r30, r18
    2158:	84 8f       	std	Z+28, r24	; 0x1c
    215a:	95 8f       	std	Z+29, r25	; 0x1d
    215c:	a6 8f       	std	Z+30, r26	; 0x1e
    215e:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    2160:	2b 81       	ldd	r18, Y+3	; 0x03
    2162:	3c 81       	ldd	r19, Y+4	; 0x04
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e0       	ldi	r26, 0x00	; 0
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	f9 01       	movw	r30, r18
    216e:	80 a3       	std	Z+32, r24	; 0x20
    2170:	91 a3       	std	Z+33, r25	; 0x21
    2172:	a2 a3       	std	Z+34, r26	; 0x22
    2174:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2176:	5a c0       	rjmp	.+180    	; 0x222c <__stack+0x2d>
  case DHT21:
    sensor->max_value = 80.0F;
    2178:	2b 81       	ldd	r18, Y+3	; 0x03
    217a:	3c 81       	ldd	r19, Y+4	; 0x04
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 ea       	ldi	r26, 0xA0	; 160
    2182:	b2 e4       	ldi	r27, 0x42	; 66
    2184:	f9 01       	movw	r30, r18
    2186:	80 8f       	std	Z+24, r24	; 0x18
    2188:	91 8f       	std	Z+25, r25	; 0x19
    218a:	a2 8f       	std	Z+26, r26	; 0x1a
    218c:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    218e:	2b 81       	ldd	r18, Y+3	; 0x03
    2190:	3c 81       	ldd	r19, Y+4	; 0x04
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e2       	ldi	r26, 0x20	; 32
    2198:	b2 ec       	ldi	r27, 0xC2	; 194
    219a:	f9 01       	movw	r30, r18
    219c:	84 8f       	std	Z+28, r24	; 0x1c
    219e:	95 8f       	std	Z+29, r25	; 0x1d
    21a0:	a6 8f       	std	Z+30, r26	; 0x1e
    21a2:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    21a4:	2b 81       	ldd	r18, Y+3	; 0x03
    21a6:	3c 81       	ldd	r19, Y+4	; 0x04
    21a8:	8d ec       	ldi	r24, 0xCD	; 205
    21aa:	9c ec       	ldi	r25, 0xCC	; 204
    21ac:	ac ec       	ldi	r26, 0xCC	; 204
    21ae:	bd e3       	ldi	r27, 0x3D	; 61
    21b0:	f9 01       	movw	r30, r18
    21b2:	80 a3       	std	Z+32, r24	; 0x20
    21b4:	91 a3       	std	Z+33, r25	; 0x21
    21b6:	a2 a3       	std	Z+34, r26	; 0x22
    21b8:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    21ba:	38 c0       	rjmp	.+112    	; 0x222c <__stack+0x2d>
  case DHT22:
    sensor->max_value = 125.0F;
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	aa ef       	ldi	r26, 0xFA	; 250
    21c6:	b2 e4       	ldi	r27, 0x42	; 66
    21c8:	f9 01       	movw	r30, r18
    21ca:	80 8f       	std	Z+24, r24	; 0x18
    21cc:	91 8f       	std	Z+25, r25	; 0x19
    21ce:	a2 8f       	std	Z+26, r26	; 0x1a
    21d0:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    21d2:	2b 81       	ldd	r18, Y+3	; 0x03
    21d4:	3c 81       	ldd	r19, Y+4	; 0x04
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e2       	ldi	r26, 0x20	; 32
    21dc:	b2 ec       	ldi	r27, 0xC2	; 194
    21de:	f9 01       	movw	r30, r18
    21e0:	84 8f       	std	Z+28, r24	; 0x1c
    21e2:	95 8f       	std	Z+29, r25	; 0x1d
    21e4:	a6 8f       	std	Z+30, r26	; 0x1e
    21e6:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	3c 81       	ldd	r19, Y+4	; 0x04
    21ec:	8d ec       	ldi	r24, 0xCD	; 205
    21ee:	9c ec       	ldi	r25, 0xCC	; 204
    21f0:	ac ec       	ldi	r26, 0xCC	; 204
    21f2:	bd e3       	ldi	r27, 0x3D	; 61
    21f4:	f9 01       	movw	r30, r18
    21f6:	80 a3       	std	Z+32, r24	; 0x20
    21f8:	91 a3       	std	Z+33, r25	; 0x21
    21fa:	a2 a3       	std	Z+34, r26	; 0x22
    21fc:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    21fe:	16 c0       	rjmp	.+44     	; 0x222c <__stack+0x2d>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	fc 01       	movw	r30, r24
    2206:	10 8e       	std	Z+24, r1	; 0x18
    2208:	11 8e       	std	Z+25, r1	; 0x19
    220a:	12 8e       	std	Z+26, r1	; 0x1a
    220c:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	fc 01       	movw	r30, r24
    2214:	14 8e       	std	Z+28, r1	; 0x1c
    2216:	15 8e       	std	Z+29, r1	; 0x1d
    2218:	16 8e       	std	Z+30, r1	; 0x1e
    221a:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	fc 01       	movw	r30, r24
    2222:	10 a2       	std	Z+32, r1	; 0x20
    2224:	11 a2       	std	Z+33, r1	; 0x21
    2226:	12 a2       	std	Z+34, r1	; 0x22
    2228:	13 a2       	std	Z+35, r1	; 0x23
    break;
    222a:	00 00       	nop
  }
}
    222c:	00 00       	nop
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	28 97       	sbiw	r28, 0x08	; 8
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	7c 83       	std	Y+4, r23	; 0x04
    2256:	6b 83       	std	Y+3, r22	; 0x03
    2258:	2d 83       	std	Y+5, r18	; 0x05
    225a:	3e 83       	std	Y+6, r19	; 0x06
    225c:	4f 83       	std	Y+7, r20	; 0x07
    225e:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	12 dd       	rcall	.-1500   	; 0x1c8a <_ZN15Adafruit_SensorC1Ev>
    2266:	25 ed       	ldi	r18, 0xD5	; 213
    2268:	32 e0       	ldi	r19, 0x02	; 2
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	fc 01       	movw	r30, r24
    2270:	31 83       	std	Z+1, r19	; 0x01
    2272:	20 83       	st	Z, r18
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	9a 81       	ldd	r25, Y+2	; 0x02
    2278:	2b 81       	ldd	r18, Y+3	; 0x03
    227a:	3c 81       	ldd	r19, Y+4	; 0x04
    227c:	fc 01       	movw	r30, r24
    227e:	34 83       	std	Z+4, r19	; 0x04
    2280:	23 83       	std	Z+3, r18	; 0x03
    2282:	29 81       	ldd	r18, Y+1	; 0x01
    2284:	3a 81       	ldd	r19, Y+2	; 0x02
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	af 81       	ldd	r26, Y+7	; 0x07
    228c:	b8 85       	ldd	r27, Y+8	; 0x08
    228e:	f9 01       	movw	r30, r18
    2290:	85 83       	std	Z+5, r24	; 0x05
    2292:	96 83       	std	Z+6, r25	; 0x06
    2294:	a7 83       	std	Z+7, r26	; 0x07
    2296:	b0 87       	std	Z+8, r27	; 0x08
    2298:	00 00       	nop
    229a:	28 96       	adiw	r28, 0x08	; 8
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    22b2:	1f 92       	push	r1
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	7c 83       	std	Y+4, r23	; 0x04
    22be:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	44 e2       	ldi	r20, 0x24	; 36
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    22d0:	84 e2       	ldi	r24, 0x24	; 36
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e0       	ldi	r26, 0x00	; 0
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	3c 81       	ldd	r19, Y+4	; 0x04
    22dc:	f9 01       	movw	r30, r18
    22de:	80 83       	st	Z, r24
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	a2 83       	std	Z+2, r26	; 0x02
    22e4:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	fc 01       	movw	r30, r24
    22ec:	85 81       	ldd	r24, Z+5	; 0x05
    22ee:	96 81       	ldd	r25, Z+6	; 0x06
    22f0:	a7 81       	ldd	r26, Z+7	; 0x07
    22f2:	b0 85       	ldd	r27, Z+8	; 0x08
    22f4:	2b 81       	ldd	r18, Y+3	; 0x03
    22f6:	3c 81       	ldd	r19, Y+4	; 0x04
    22f8:	f9 01       	movw	r30, r18
    22fa:	84 83       	std	Z+4, r24	; 0x04
    22fc:	95 83       	std	Z+5, r25	; 0x05
    22fe:	a6 83       	std	Z+6, r26	; 0x06
    2300:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    2302:	2b 81       	ldd	r18, Y+3	; 0x03
    2304:	3c 81       	ldd	r19, Y+4	; 0x04
    2306:	8c e0       	ldi	r24, 0x0C	; 12
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e0       	ldi	r26, 0x00	; 0
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	f9 01       	movw	r30, r18
    2310:	80 87       	std	Z+8, r24	; 0x08
    2312:	91 87       	std	Z+9, r25	; 0x09
    2314:	a2 87       	std	Z+10, r26	; 0x0a
    2316:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2318:	0e 94 0b 30 	call	0x6016	; 0x6016 <millis>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	f9 01       	movw	r30, r18
    2326:	80 8b       	std	Z+16, r24	; 0x10
    2328:	91 8b       	std	Z+17, r25	; 0x11
    232a:	a2 8b       	std	Z+18, r26	; 0x12
    232c:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	fc 01       	movw	r30, r24
    2334:	83 81       	ldd	r24, Z+3	; 0x03
    2336:	94 81       	ldd	r25, Z+4	; 0x04
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	cb d8       	rcall	.-3690   	; 0x14d2 <_ZN3DHT12readHumidityEb>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	f9 01       	movw	r30, r18
    2346:	84 8b       	std	Z+20, r24	; 0x14
    2348:	95 8b       	std	Z+21, r25	; 0x15
    234a:	a6 8b       	std	Z+22, r26	; 0x16
    234c:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    234e:	81 e0       	ldi	r24, 0x01	; 1
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	08 95       	ret

0000235e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	00 d0       	rcall	.+0      	; 0x2364 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    2364:	1f 92       	push	r1
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	7c 83       	std	Y+4, r23	; 0x04
    2370:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	48 e2       	ldi	r20, 0x28	; 40
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	fc 01       	movw	r30, r24
    2388:	83 81       	ldd	r24, Z+3	; 0x03
    238a:	94 81       	ldd	r25, Z+4	; 0x04
    238c:	2b 81       	ldd	r18, Y+3	; 0x03
    238e:	3c 81       	ldd	r19, Y+4	; 0x04
    2390:	b9 01       	movw	r22, r18
    2392:	fa dc       	rcall	.-1548   	; 0x1d88 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    2394:	2b 81       	ldd	r18, Y+3	; 0x03
    2396:	3c 81       	ldd	r19, Y+4	; 0x04
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a0 e0       	ldi	r26, 0x00	; 0
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	f9 01       	movw	r30, r18
    23a2:	84 87       	std	Z+12, r24	; 0x0c
    23a4:	95 87       	std	Z+13, r25	; 0x0d
    23a6:	a6 87       	std	Z+14, r26	; 0x0e
    23a8:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	fc 01       	movw	r30, r24
    23b0:	85 81       	ldd	r24, Z+5	; 0x05
    23b2:	96 81       	ldd	r25, Z+6	; 0x06
    23b4:	a7 81       	ldd	r26, Z+7	; 0x07
    23b6:	b0 85       	ldd	r27, Z+8	; 0x08
    23b8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ba:	3c 81       	ldd	r19, Y+4	; 0x04
    23bc:	f9 01       	movw	r30, r18
    23be:	80 8b       	std	Z+16, r24	; 0x10
    23c0:	91 8b       	std	Z+17, r25	; 0x11
    23c2:	a2 8b       	std	Z+18, r26	; 0x12
    23c4:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	8c e0       	ldi	r24, 0x0C	; 12
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	f9 01       	movw	r30, r18
    23d4:	84 8b       	std	Z+20, r24	; 0x14
    23d6:	95 8b       	std	Z+21, r25	; 0x15
    23d8:	a6 8b       	std	Z+22, r26	; 0x16
    23da:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	fc 01       	movw	r30, r24
    23e2:	83 81       	ldd	r24, Z+3	; 0x03
    23e4:	94 81       	ldd	r25, Z+4	; 0x04
    23e6:	2b 81       	ldd	r18, Y+3	; 0x03
    23e8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ea:	b9 01       	movw	r22, r18
    23ec:	2e dd       	rcall	.-1444   	; 0x1e4a <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	fc 01       	movw	r30, r24
    23f4:	83 81       	ldd	r24, Z+3	; 0x03
    23f6:	94 81       	ldd	r25, Z+4	; 0x04
    23f8:	fc 01       	movw	r30, r24
    23fa:	83 89       	ldd	r24, Z+19	; 0x13
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	8c 30       	cpi	r24, 0x0C	; 12
    2402:	91 05       	cpc	r25, r1
    2404:	81 f1       	breq	.+96     	; 0x2466 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    2406:	8d 30       	cpi	r24, 0x0D	; 13
    2408:	91 05       	cpc	r25, r1
    240a:	1c f4       	brge	.+6      	; 0x2412 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    240c:	0b 97       	sbiw	r24, 0x0b	; 11
    240e:	49 f0       	breq	.+18     	; 0x2422 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    2410:	88 c0       	rjmp	.+272    	; 0x2522 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    2412:	85 31       	cpi	r24, 0x15	; 21
    2414:	91 05       	cpc	r25, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    2418:	48 c0       	rjmp	.+144    	; 0x24aa <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    241a:	46 97       	sbiw	r24, 0x16	; 22
    241c:	09 f4       	brne	.+2      	; 0x2420 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    241e:	63 c0       	rjmp	.+198    	; 0x24e6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    2420:	80 c0       	rjmp	.+256    	; 0x2522 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    2422:	2b 81       	ldd	r18, Y+3	; 0x03
    2424:	3c 81       	ldd	r19, Y+4	; 0x04
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 ea       	ldi	r26, 0xA0	; 160
    242c:	b2 e4       	ldi	r27, 0x42	; 66
    242e:	f9 01       	movw	r30, r18
    2430:	80 8f       	std	Z+24, r24	; 0x18
    2432:	91 8f       	std	Z+25, r25	; 0x19
    2434:	a2 8f       	std	Z+26, r26	; 0x1a
    2436:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2438:	2b 81       	ldd	r18, Y+3	; 0x03
    243a:	3c 81       	ldd	r19, Y+4	; 0x04
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 ea       	ldi	r26, 0xA0	; 160
    2442:	b1 e4       	ldi	r27, 0x41	; 65
    2444:	f9 01       	movw	r30, r18
    2446:	84 8f       	std	Z+28, r24	; 0x1c
    2448:	95 8f       	std	Z+29, r25	; 0x1d
    244a:	a6 8f       	std	Z+30, r26	; 0x1e
    244c:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 ea       	ldi	r26, 0xA0	; 160
    2458:	b0 e4       	ldi	r27, 0x40	; 64
    245a:	f9 01       	movw	r30, r18
    245c:	80 a3       	std	Z+32, r24	; 0x20
    245e:	91 a3       	std	Z+33, r25	; 0x21
    2460:	a2 a3       	std	Z+34, r26	; 0x22
    2462:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2464:	74 c0       	rjmp	.+232    	; 0x254e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    2466:	2b 81       	ldd	r18, Y+3	; 0x03
    2468:	3c 81       	ldd	r19, Y+4	; 0x04
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	ae eb       	ldi	r26, 0xBE	; 190
    2470:	b2 e4       	ldi	r27, 0x42	; 66
    2472:	f9 01       	movw	r30, r18
    2474:	80 8f       	std	Z+24, r24	; 0x18
    2476:	91 8f       	std	Z+25, r25	; 0x19
    2478:	a2 8f       	std	Z+26, r26	; 0x1a
    247a:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    247c:	2b 81       	ldd	r18, Y+3	; 0x03
    247e:	3c 81       	ldd	r19, Y+4	; 0x04
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 ea       	ldi	r26, 0xA0	; 160
    2486:	b1 e4       	ldi	r27, 0x41	; 65
    2488:	f9 01       	movw	r30, r18
    248a:	84 8f       	std	Z+28, r24	; 0x1c
    248c:	95 8f       	std	Z+29, r25	; 0x1d
    248e:	a6 8f       	std	Z+30, r26	; 0x1e
    2490:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2492:	2b 81       	ldd	r18, Y+3	; 0x03
    2494:	3c 81       	ldd	r19, Y+4	; 0x04
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 ea       	ldi	r26, 0xA0	; 160
    249c:	b0 e4       	ldi	r27, 0x40	; 64
    249e:	f9 01       	movw	r30, r18
    24a0:	80 a3       	std	Z+32, r24	; 0x20
    24a2:	91 a3       	std	Z+33, r25	; 0x21
    24a4:	a2 a3       	std	Z+34, r26	; 0x22
    24a6:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    24a8:	52 c0       	rjmp	.+164    	; 0x254e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    24aa:	2b 81       	ldd	r18, Y+3	; 0x03
    24ac:	3c 81       	ldd	r19, Y+4	; 0x04
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a8 ec       	ldi	r26, 0xC8	; 200
    24b4:	b2 e4       	ldi	r27, 0x42	; 66
    24b6:	f9 01       	movw	r30, r18
    24b8:	80 8f       	std	Z+24, r24	; 0x18
    24ba:	91 8f       	std	Z+25, r25	; 0x19
    24bc:	a2 8f       	std	Z+26, r26	; 0x1a
    24be:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	fc 01       	movw	r30, r24
    24c6:	14 8e       	std	Z+28, r1	; 0x1c
    24c8:	15 8e       	std	Z+29, r1	; 0x1d
    24ca:	16 8e       	std	Z+30, r1	; 0x1e
    24cc:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    24ce:	2b 81       	ldd	r18, Y+3	; 0x03
    24d0:	3c 81       	ldd	r19, Y+4	; 0x04
    24d2:	8d ec       	ldi	r24, 0xCD	; 205
    24d4:	9c ec       	ldi	r25, 0xCC	; 204
    24d6:	ac ec       	ldi	r26, 0xCC	; 204
    24d8:	bd e3       	ldi	r27, 0x3D	; 61
    24da:	f9 01       	movw	r30, r18
    24dc:	80 a3       	std	Z+32, r24	; 0x20
    24de:	91 a3       	std	Z+33, r25	; 0x21
    24e0:	a2 a3       	std	Z+34, r26	; 0x22
    24e2:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    24e4:	34 c0       	rjmp	.+104    	; 0x254e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    24e6:	2b 81       	ldd	r18, Y+3	; 0x03
    24e8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a8 ec       	ldi	r26, 0xC8	; 200
    24f0:	b2 e4       	ldi	r27, 0x42	; 66
    24f2:	f9 01       	movw	r30, r18
    24f4:	80 8f       	std	Z+24, r24	; 0x18
    24f6:	91 8f       	std	Z+25, r25	; 0x19
    24f8:	a2 8f       	std	Z+26, r26	; 0x1a
    24fa:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	fc 01       	movw	r30, r24
    2502:	14 8e       	std	Z+28, r1	; 0x1c
    2504:	15 8e       	std	Z+29, r1	; 0x1d
    2506:	16 8e       	std	Z+30, r1	; 0x1e
    2508:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    250a:	2b 81       	ldd	r18, Y+3	; 0x03
    250c:	3c 81       	ldd	r19, Y+4	; 0x04
    250e:	8d ec       	ldi	r24, 0xCD	; 205
    2510:	9c ec       	ldi	r25, 0xCC	; 204
    2512:	ac ec       	ldi	r26, 0xCC	; 204
    2514:	bd e3       	ldi	r27, 0x3D	; 61
    2516:	f9 01       	movw	r30, r18
    2518:	80 a3       	std	Z+32, r24	; 0x20
    251a:	91 a3       	std	Z+33, r25	; 0x21
    251c:	a2 a3       	std	Z+34, r26	; 0x22
    251e:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2520:	16 c0       	rjmp	.+44     	; 0x254e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	fc 01       	movw	r30, r24
    2528:	10 8e       	std	Z+24, r1	; 0x18
    252a:	11 8e       	std	Z+25, r1	; 0x19
    252c:	12 8e       	std	Z+26, r1	; 0x1a
    252e:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	fc 01       	movw	r30, r24
    2536:	14 8e       	std	Z+28, r1	; 0x1c
    2538:	15 8e       	std	Z+29, r1	; 0x1d
    253a:	16 8e       	std	Z+30, r1	; 0x1e
    253c:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	fc 01       	movw	r30, r24
    2544:	10 a2       	std	Z+32, r1	; 0x20
    2546:	11 a2       	std	Z+33, r1	; 0x21
    2548:	12 a2       	std	Z+34, r1	; 0x22
    254a:	13 a2       	std	Z+35, r1	; 0x23
    break;
    254c:	00 00       	nop
  }
}
    254e:	00 00       	nop
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <_ZN5PrintC1Ev>:

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	1f 92       	push	r1
    2564:	1f 92       	push	r1
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	22 e4       	ldi	r18, 0x42	; 66
    2570:	33 e0       	ldi	r19, 0x03	; 3
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	fc 01       	movw	r30, r24
    2578:	31 83       	std	Z+1, r19	; 0x01
    257a:	20 83       	st	Z, r18
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	fc 01       	movw	r30, r24
    2582:	13 82       	std	Z+3, r1	; 0x03
    2584:	12 82       	std	Z+2, r1	; 0x02
    2586:	00 00       	nop
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <_ZN5Print17availableForWriteEv>:
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	1f 92       	push	r1
    2598:	1f 92       	push	r1
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <_ZN5Print5flushEv>:
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	1f 92       	push	r1
    25b6:	1f 92       	push	r1
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	00 00       	nop
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	08 95       	ret

000025cc <_ZN17LiquidCrystal_I2C5writeEh>:
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <_ZN17LiquidCrystal_I2C5writeEh+0x6>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	6b 83       	std	Y+3, r22	; 0x03
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	41 e0       	ldi	r20, 0x01	; 1
    25e2:	6b 81       	ldd	r22, Y+3	; 0x03
    25e4:	ba d1       	rcall	.+884    	; 0x295a <_ZN17LiquidCrystal_I2C4sendEhh>
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	08 95       	ret

000025f6 <_ZN17LiquidCrystal_I2CC1Ehhh>:
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <_ZN17LiquidCrystal_I2CC1Ehhh+0x6>
    25fc:	1f 92       	push	r1
    25fe:	1f 92       	push	r1
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	6b 83       	std	Y+3, r22	; 0x03
    260a:	4c 83       	std	Y+4, r20	; 0x04
    260c:	2d 83       	std	Y+5, r18	; 0x05
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	9a 81       	ldd	r25, Y+2	; 0x02
    2612:	a5 df       	rcall	.-182    	; 0x255e <_ZN5PrintC1Ev>
    2614:	21 ef       	ldi	r18, 0xF1	; 241
    2616:	32 e0       	ldi	r19, 0x02	; 2
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	fc 01       	movw	r30, r24
    261e:	31 83       	std	Z+1, r19	; 0x01
    2620:	20 83       	st	Z, r18
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	2b 81       	ldd	r18, Y+3	; 0x03
    2628:	fc 01       	movw	r30, r24
    262a:	24 83       	std	Z+4, r18	; 0x04
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	2c 81       	ldd	r18, Y+4	; 0x04
    2632:	fc 01       	movw	r30, r24
    2634:	21 87       	std	Z+9, r18	; 0x09
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	2d 81       	ldd	r18, Y+5	; 0x05
    263c:	fc 01       	movw	r30, r24
    263e:	22 87       	std	Z+10, r18	; 0x0a
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	fc 01       	movw	r30, r24
    2646:	13 86       	std	Z+11, r1	; 0x0b
    2648:	00 00       	nop
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	08 95       	ret

0000265a <_ZN17LiquidCrystal_I2C4initEv>:
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	1f 92       	push	r1
    2660:	1f 92       	push	r1
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	06 d0       	rcall	.+12     	; 0x267c <_ZN17LiquidCrystal_I2C9init_privEv>
    2670:	00 00       	nop
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	08 95       	ret

0000267c <_ZN17LiquidCrystal_I2C9init_privEv>:
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	1f 92       	push	r1
    2682:	1f 92       	push	r1
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	8a ef       	ldi	r24, 0xFA	; 250
    268e:	94 e0       	ldi	r25, 0x04	; 4
    2690:	0e 94 4a 28 	call	0x5094	; 0x5094 <_ZN7TwoWire5beginEv>
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	fc 01       	movw	r30, r24
    269a:	15 82       	std	Z+5, r1	; 0x05
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	fc 01       	movw	r30, r24
    26a2:	42 85       	ldd	r20, Z+10	; 0x0a
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	fc 01       	movw	r30, r24
    26aa:	31 85       	ldd	r19, Z+9	; 0x09
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	63 2f       	mov	r22, r19
    26b4:	06 d0       	rcall	.+12     	; 0x26c2 <_ZN17LiquidCrystal_I2C5beginEhhh>
    26b6:	00 00       	nop
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	08 95       	ret

000026c2 <_ZN17LiquidCrystal_I2C5beginEhhh>:
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <_ZN17LiquidCrystal_I2C5beginEhhh+0x6>
    26c8:	1f 92       	push	r1
    26ca:	1f 92       	push	r1
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	6b 83       	std	Y+3, r22	; 0x03
    26d6:	4c 83       	std	Y+4, r20	; 0x04
    26d8:	2d 83       	std	Y+5, r18	; 0x05
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	50 f0       	brcs	.+20     	; 0x26f4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x32>
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	fc 01       	movw	r30, r24
    26e6:	85 81       	ldd	r24, Z+5	; 0x05
    26e8:	28 2f       	mov	r18, r24
    26ea:	28 60       	ori	r18, 0x08	; 8
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	fc 01       	movw	r30, r24
    26f2:	25 83       	std	Z+5, r18	; 0x05
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	2c 81       	ldd	r18, Y+4	; 0x04
    26fa:	fc 01       	movw	r30, r24
    26fc:	20 87       	std	Z+8, r18	; 0x08
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	88 23       	and	r24, r24
    2702:	69 f0       	breq	.+26     	; 0x271e <_ZN17LiquidCrystal_I2C5beginEhhh+0x5c>
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	51 f4       	brne	.+20     	; 0x271e <_ZN17LiquidCrystal_I2C5beginEhhh+0x5c>
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	fc 01       	movw	r30, r24
    2710:	85 81       	ldd	r24, Z+5	; 0x05
    2712:	28 2f       	mov	r18, r24
    2714:	24 60       	ori	r18, 0x04	; 4
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	fc 01       	movw	r30, r24
    271c:	25 83       	std	Z+5, r18	; 0x05
    271e:	62 e3       	ldi	r22, 0x32	; 50
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	fc 01       	movw	r30, r24
    2730:	23 85       	ldd	r18, Z+11	; 0x0b
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	62 2f       	mov	r22, r18
    2738:	58 d1       	rcall	.+688    	; 0x29ea <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    273a:	68 ee       	ldi	r22, 0xE8	; 232
    273c:	73 e0       	ldi	r23, 0x03	; 3
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	60 e3       	ldi	r22, 0x30	; 48
    274c:	37 d1       	rcall	.+622    	; 0x29bc <_ZN17LiquidCrystal_I2C10write4bitsEh>
    274e:	84 e9       	ldi	r24, 0x94	; 148
    2750:	91 e1       	ldi	r25, 0x11	; 17
    2752:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	60 e3       	ldi	r22, 0x30	; 48
    275c:	2f d1       	rcall	.+606    	; 0x29bc <_ZN17LiquidCrystal_I2C10write4bitsEh>
    275e:	84 e9       	ldi	r24, 0x94	; 148
    2760:	91 e1       	ldi	r25, 0x11	; 17
    2762:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	60 e3       	ldi	r22, 0x30	; 48
    276c:	27 d1       	rcall	.+590    	; 0x29bc <_ZN17LiquidCrystal_I2C10write4bitsEh>
    276e:	86 e9       	ldi	r24, 0x96	; 150
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	60 e2       	ldi	r22, 0x20	; 32
    277c:	1f d1       	rcall	.+574    	; 0x29bc <_ZN17LiquidCrystal_I2C10write4bitsEh>
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	fc 01       	movw	r30, r24
    2784:	85 81       	ldd	r24, Z+5	; 0x05
    2786:	28 2f       	mov	r18, r24
    2788:	20 62       	ori	r18, 0x20	; 32
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	62 2f       	mov	r22, r18
    2790:	d0 d0       	rcall	.+416    	; 0x2932 <_ZN17LiquidCrystal_I2C7commandEh>
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	24 e0       	ldi	r18, 0x04	; 4
    2798:	fc 01       	movw	r30, r24
    279a:	26 83       	std	Z+6, r18	; 0x06
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	8f d0       	rcall	.+286    	; 0x28c0 <_ZN17LiquidCrystal_I2C7displayEv>
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	1b d0       	rcall	.+54     	; 0x27de <_ZN17LiquidCrystal_I2C5clearEv>
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	22 e0       	ldi	r18, 0x02	; 2
    27ae:	fc 01       	movw	r30, r24
    27b0:	27 83       	std	Z+7, r18	; 0x07
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	fc 01       	movw	r30, r24
    27b8:	87 81       	ldd	r24, Z+7	; 0x07
    27ba:	28 2f       	mov	r18, r24
    27bc:	24 60       	ori	r18, 0x04	; 4
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	62 2f       	mov	r22, r18
    27c4:	b6 d0       	rcall	.+364    	; 0x2932 <_ZN17LiquidCrystal_I2C7commandEh>
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	1f d0       	rcall	.+62     	; 0x280a <_ZN17LiquidCrystal_I2C4homeEv>
    27cc:	00 00       	nop
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	08 95       	ret

000027de <_ZN17LiquidCrystal_I2C5clearEv>:
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	1f 92       	push	r1
    27e4:	1f 92       	push	r1
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	9e d0       	rcall	.+316    	; 0x2932 <_ZN17LiquidCrystal_I2C7commandEh>
    27f6:	80 ed       	ldi	r24, 0xD0	; 208
    27f8:	97 e0       	ldi	r25, 0x07	; 7
    27fa:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
    27fe:	00 00       	nop
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	08 95       	ret

0000280a <_ZN17LiquidCrystal_I2C4homeEv>:
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	1f 92       	push	r1
    2810:	1f 92       	push	r1
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	88 d0       	rcall	.+272    	; 0x2932 <_ZN17LiquidCrystal_I2C7commandEh>
    2822:	80 ed       	ldi	r24, 0xD0	; 208
    2824:	97 e0       	ldi	r25, 0x07	; 7
    2826:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
    282a:	00 00       	nop
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	2c 97       	sbiw	r28, 0x0c	; 12
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	9a 87       	std	Y+10, r25	; 0x0a
    284c:	89 87       	std	Y+9, r24	; 0x09
    284e:	6b 87       	std	Y+11, r22	; 0x0b
    2850:	4c 87       	std	Y+12, r20	; 0x0c
    2852:	28 e0       	ldi	r18, 0x08	; 8
    2854:	eb eb       	ldi	r30, 0xBB	; 187
    2856:	f2 e0       	ldi	r31, 0x02	; 2
    2858:	ce 01       	movw	r24, r28
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	dc 01       	movw	r26, r24
    285e:	01 90       	ld	r0, Z+
    2860:	0d 92       	st	X+, r0
    2862:	2a 95       	dec	r18
    2864:	e1 f7       	brne	.-8      	; 0x285e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x28>
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	fc 01       	movw	r30, r24
    286c:	90 85       	ldd	r25, Z+8	; 0x08
    286e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2870:	98 17       	cp	r25, r24
    2872:	30 f4       	brcc	.+12     	; 0x2880 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x4a>
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	fc 01       	movw	r30, r24
    287a:	80 85       	ldd	r24, Z+8	; 0x08
    287c:	81 50       	subi	r24, 0x01	; 1
    287e:	8c 87       	std	Y+12, r24	; 0x0c
    2880:	8c 85       	ldd	r24, Y+12	; 0x0c
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	9e 01       	movw	r18, r28
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	3f 4f       	sbci	r19, 0xFF	; 255
    2890:	82 0f       	add	r24, r18
    2892:	93 1f       	adc	r25, r19
    2894:	fc 01       	movw	r30, r24
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	98 2f       	mov	r25, r24
    289c:	8b 85       	ldd	r24, Y+11	; 0x0b
    289e:	89 0f       	add	r24, r25
    28a0:	80 68       	ori	r24, 0x80	; 128
    28a2:	28 2f       	mov	r18, r24
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	62 2f       	mov	r22, r18
    28aa:	43 d0       	rcall	.+134    	; 0x2932 <_ZN17LiquidCrystal_I2C7commandEh>
    28ac:	00 00       	nop
    28ae:	2c 96       	adiw	r28, 0x0c	; 12
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <_ZN17LiquidCrystal_I2C7displayEv>:
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	1f 92       	push	r1
    28c6:	1f 92       	push	r1
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	fc 01       	movw	r30, r24
    28d6:	86 81       	ldd	r24, Z+6	; 0x06
    28d8:	28 2f       	mov	r18, r24
    28da:	24 60       	ori	r18, 0x04	; 4
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	fc 01       	movw	r30, r24
    28e2:	26 83       	std	Z+6, r18	; 0x06
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	fc 01       	movw	r30, r24
    28ea:	86 81       	ldd	r24, Z+6	; 0x06
    28ec:	28 2f       	mov	r18, r24
    28ee:	28 60       	ori	r18, 0x08	; 8
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	62 2f       	mov	r22, r18
    28f6:	1d d0       	rcall	.+58     	; 0x2932 <_ZN17LiquidCrystal_I2C7commandEh>
    28f8:	00 00       	nop
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <_ZN17LiquidCrystal_I2C9backlightEv>:

void LiquidCrystal_I2C::backlight(void) {
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	1f 92       	push	r1
    290a:	1f 92       	push	r1
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
	_backlightval=LCD_BACKLIGHT;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	28 e0       	ldi	r18, 0x08	; 8
    291a:	fc 01       	movw	r30, r24
    291c:	23 87       	std	Z+11, r18	; 0x0b
	expanderWrite(0);
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	62 d0       	rcall	.+196    	; 0x29ea <_ZN17LiquidCrystal_I2C13expanderWriteEh>
}
    2926:	00 00       	nop
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret

00002932 <_ZN17LiquidCrystal_I2C7commandEh>:



/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	00 d0       	rcall	.+0      	; 0x2938 <_ZN17LiquidCrystal_I2C7commandEh+0x6>
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	6b 83       	std	Y+3, r22	; 0x03
	send(value, 0);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	6b 81       	ldd	r22, Y+3	; 0x03
    294a:	07 d0       	rcall	.+14     	; 0x295a <_ZN17LiquidCrystal_I2C4sendEhh>
}
    294c:	00 00       	nop
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	08 95       	ret

0000295a <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	00 d0       	rcall	.+0      	; 0x2960 <_ZN17LiquidCrystal_I2C4sendEhh+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <_ZN17LiquidCrystal_I2C4sendEhh+0x8>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	6d 83       	std	Y+5, r22	; 0x05
    296c:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t highnib=value&0xf0;
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	80 7f       	andi	r24, 0xF0	; 240
    2972:	89 83       	std	Y+1, r24	; 0x01
	uint8_t lownib=(value<<4)&0xf0;
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	82 95       	swap	r24
    297c:	92 95       	swap	r25
    297e:	90 7f       	andi	r25, 0xF0	; 240
    2980:	98 27       	eor	r25, r24
    2982:	80 7f       	andi	r24, 0xF0	; 240
    2984:	98 27       	eor	r25, r24
    2986:	8a 83       	std	Y+2, r24	; 0x02
       write4bits((highnib)|mode);
    2988:	99 81       	ldd	r25, Y+1	; 0x01
    298a:	8e 81       	ldd	r24, Y+6	; 0x06
    298c:	29 2f       	mov	r18, r25
    298e:	28 2b       	or	r18, r24
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	62 2f       	mov	r22, r18
    2996:	12 d0       	rcall	.+36     	; 0x29bc <_ZN17LiquidCrystal_I2C10write4bitsEh>
	write4bits((lownib)|mode); 
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	8e 81       	ldd	r24, Y+6	; 0x06
    299c:	29 2f       	mov	r18, r25
    299e:	28 2b       	or	r18, r24
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	9c 81       	ldd	r25, Y+4	; 0x04
    29a4:	62 2f       	mov	r22, r18
    29a6:	0a d0       	rcall	.+20     	; 0x29bc <_ZN17LiquidCrystal_I2C10write4bitsEh>
}
    29a8:	00 00       	nop
    29aa:	26 96       	adiw	r28, 0x06	; 6
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <_ZN17LiquidCrystal_I2C10write4bitsEh>:

void LiquidCrystal_I2C::write4bits(uint8_t value) {
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <_ZN17LiquidCrystal_I2C10write4bitsEh+0x6>
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	6b 83       	std	Y+3, r22	; 0x03
	expanderWrite(value);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	6b 81       	ldd	r22, Y+3	; 0x03
    29d2:	0b d0       	rcall	.+22     	; 0x29ea <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	pulseEnable(value);
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	6b 81       	ldd	r22, Y+3	; 0x03
    29da:	30 d0       	rcall	.+96     	; 0x2a3c <_ZN17LiquidCrystal_I2C11pulseEnableEh>
}
    29dc:	00 00       	nop
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	08 95       	ret

000029ea <_ZN17LiquidCrystal_I2C13expanderWriteEh>:

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x6>
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	6b 83       	std	Y+3, r22	; 0x03
	Wire.beginTransmission(_Addr);
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	fc 01       	movw	r30, r24
    2a00:	84 81       	ldd	r24, Z+4	; 0x04
    2a02:	68 2f       	mov	r22, r24
    2a04:	8a ef       	ldi	r24, 0xFA	; 250
    2a06:	94 e0       	ldi	r25, 0x04	; 4
    2a08:	0e 94 1e 29 	call	0x523c	; 0x523c <_ZN7TwoWire17beginTransmissionEh>
	printIIC((int)(_data) | _backlightval);
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	fc 01       	movw	r30, r24
    2a12:	93 85       	ldd	r25, Z+11	; 0x0b
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	89 2b       	or	r24, r25
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	8a ef       	ldi	r24, 0xFA	; 250
    2a20:	94 e0       	ldi	r25, 0x04	; 4
    2a22:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN7TwoWire5writeEi>
	Wire.endTransmission();   
    2a26:	8a ef       	ldi	r24, 0xFA	; 250
    2a28:	94 e0       	ldi	r25, 0x04	; 4
    2a2a:	0e 94 72 29 	call	0x52e4	; 0x52e4 <_ZN7TwoWire15endTransmissionEv>
}
    2a2e:	00 00       	nop
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret

00002a3c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <_ZN17LiquidCrystal_I2C11pulseEnableEh+0x6>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	6b 83       	std	Y+3, r22	; 0x03
	expanderWrite(_data | En);	// En high
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	28 2f       	mov	r18, r24
    2a50:	24 60       	ori	r18, 0x04	; 4
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	62 2f       	mov	r22, r18
    2a58:	c8 df       	rcall	.-112    	; 0x29ea <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(1);		// enable pulse must be >450ns
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
	
	expanderWrite(_data & ~En);	// En low
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	28 2f       	mov	r18, r24
    2a66:	2b 7f       	andi	r18, 0xFB	; 251
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	62 2f       	mov	r22, r18
    2a6e:	bd df       	rcall	.-134    	; 0x29ea <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(50);		// commands need > 37us to settle
    2a70:	82 e3       	ldi	r24, 0x32	; 50
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 94 75 30 	call	0x60ea	; 0x60ea <delayMicroseconds>
} 
    2a78:	00 00       	nop
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	08 95       	ret

00002a86 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2a86:	0f 93       	push	r16
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	28 97       	sbiw	r28, 0x08	; 8
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	4b 83       	std	Y+3, r20	; 0x03
    2aa2:	5c 83       	std	Y+4, r21	; 0x04
    2aa4:	6d 83       	std	Y+5, r22	; 0x05
    2aa6:	7e 83       	std	Y+6, r23	; 0x06
    2aa8:	2f 83       	std	Y+7, r18	; 0x07
    2aaa:	08 87       	std	Y+8, r16	; 0x08
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab0:	ad 81       	ldd	r26, Y+5	; 0x05
    2ab2:	be 81       	ldd	r27, Y+6	; 0x06
    2ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab8:	08 85       	ldd	r16, Y+8	; 0x08
    2aba:	2f 81       	ldd	r18, Y+7	; 0x07
    2abc:	ac 01       	movw	r20, r24
    2abe:	bd 01       	movw	r22, r26
    2ac0:	cf 01       	movw	r24, r30
    2ac2:	0b d0       	rcall	.+22     	; 0x2ada <_ZN11SPISettings16init_MightInlineEmhh>
    2ac4:	00 00       	nop
    2ac6:	28 96       	adiw	r28, 0x08	; 8
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <_ZN11SPISettings16init_MightInlineEmhh>:
    2ada:	0f 93       	push	r16
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	65 97       	sbiw	r28, 0x15	; 21
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	9f 87       	std	Y+15, r25	; 0x0f
    2af2:	8e 87       	std	Y+14, r24	; 0x0e
    2af4:	48 8b       	std	Y+16, r20	; 0x10
    2af6:	59 8b       	std	Y+17, r21	; 0x11
    2af8:	6a 8b       	std	Y+18, r22	; 0x12
    2afa:	7b 8b       	std	Y+19, r23	; 0x13
    2afc:	2c 8b       	std	Y+20, r18	; 0x14
    2afe:	0d 8b       	std	Y+21, r16	; 0x15
    2b00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	88 89       	ldd	r24, Y+16	; 0x10
    2b0a:	99 89       	ldd	r25, Y+17	; 0x11
    2b0c:	aa 89       	ldd	r26, Y+18	; 0x12
    2b0e:	bb 89       	ldd	r27, Y+19	; 0x13
    2b10:	8b 83       	std	Y+3, r24	; 0x03
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	ad 83       	std	Y+5, r26	; 0x05
    2b16:	be 83       	std	Y+6, r27	; 0x06
    2b18:	8c 89       	ldd	r24, Y+20	; 0x14
    2b1a:	8f 83       	std	Y+7, r24	; 0x07
    2b1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2b1e:	88 87       	std	Y+8, r24	; 0x08
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	92 e1       	ldi	r25, 0x12	; 18
    2b24:	aa e7       	ldi	r26, 0x7A	; 122
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	89 87       	std	Y+9, r24	; 0x09
    2b2a:	9a 87       	std	Y+10, r25	; 0x0a
    2b2c:	ab 87       	std	Y+11, r26	; 0x0b
    2b2e:	bc 87       	std	Y+12, r27	; 0x0c
    2b30:	1d 86       	std	Y+13, r1	; 0x0d
    2b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b34:	86 30       	cpi	r24, 0x06	; 6
    2b36:	e8 f4       	brcc	.+58     	; 0x2b72 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2b38:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3c:	4d 81       	ldd	r20, Y+5	; 0x05
    2b3e:	5e 81       	ldd	r21, Y+6	; 0x06
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b46:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b48:	28 17       	cp	r18, r24
    2b4a:	39 07       	cpc	r19, r25
    2b4c:	4a 07       	cpc	r20, r26
    2b4e:	5b 07       	cpc	r21, r27
    2b50:	80 f4       	brcc	.+32     	; 0x2b72 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b58:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b5a:	b6 95       	lsr	r27
    2b5c:	a7 95       	ror	r26
    2b5e:	97 95       	ror	r25
    2b60:	87 95       	ror	r24
    2b62:	89 87       	std	Y+9, r24	; 0x09
    2b64:	9a 87       	std	Y+10, r25	; 0x0a
    2b66:	ab 87       	std	Y+11, r26	; 0x0b
    2b68:	bc 87       	std	Y+12, r27	; 0x0c
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	8f 5f       	subi	r24, 0xFF	; 255
    2b6e:	8d 87       	std	Y+13, r24	; 0x0d
    2b70:	e0 cf       	rjmp	.-64     	; 0x2b32 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b74:	86 30       	cpi	r24, 0x06	; 6
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2b78:	87 e0       	ldi	r24, 0x07	; 7
    2b7a:	8d 87       	std	Y+13, r24	; 0x0d
    2b7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	89 27       	eor	r24, r25
    2b82:	8d 87       	std	Y+13, r24	; 0x0d
    2b84:	8f 81       	ldd	r24, Y+7	; 0x07
    2b86:	88 23       	and	r24, r24
    2b88:	11 f4       	brne	.+4      	; 0x2b8e <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    2b8a:	80 e7       	ldi	r24, 0x70	; 112
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2b8e:	80 e5       	ldi	r24, 0x50	; 80
    2b90:	98 85       	ldd	r25, Y+8	; 0x08
    2b92:	9c 70       	andi	r25, 0x0C	; 12
    2b94:	29 2f       	mov	r18, r25
    2b96:	28 2b       	or	r18, r24
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	95 95       	asr	r25
    2ba0:	87 95       	ror	r24
    2ba2:	83 70       	andi	r24, 0x03	; 3
    2ba4:	82 2b       	or	r24, r18
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	fc 01       	movw	r30, r24
    2bae:	20 83       	st	Z, r18
    2bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	21 70       	andi	r18, 0x01	; 1
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	fc 01       	movw	r30, r24
    2bbc:	21 83       	std	Z+1, r18	; 0x01
    2bbe:	00 00       	nop
    2bc0:	65 96       	adiw	r28, 0x15	; 21
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9b 83       	std	Y+3, r25	; 0x03
    2be0:	8a 83       	std	Y+2, r24	; 0x02
    2be2:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2be6:	88 23       	and	r24, r24
    2be8:	31 f1       	breq	.+76     	; 0x2c36 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2bea:	8f e5       	ldi	r24, 0x5F	; 95
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	fc 01       	movw	r30, r24
    2bf0:	80 81       	ld	r24, Z
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	f8 94       	cli
    2bf6:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	c9 f4       	brne	.+50     	; 0x2c30 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    2bfe:	8d e3       	ldi	r24, 0x3D	; 61
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	fc 01       	movw	r30, r24
    2c04:	80 81       	ld	r24, Z
    2c06:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2c0a:	8d e3       	ldi	r24, 0x3D	; 61
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	2d e3       	ldi	r18, 0x3D	; 61
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	f9 01       	movw	r30, r18
    2c14:	20 81       	ld	r18, Z
    2c16:	32 2f       	mov	r19, r18
    2c18:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <_ZN8SPIClass13interruptMaskE>
    2c1c:	20 95       	com	r18
    2c1e:	23 23       	and	r18, r19
    2c20:	fc 01       	movw	r30, r24
    2c22:	20 83       	st	Z, r18
    2c24:	8f e5       	ldi	r24, 0x5F	; 95
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	29 81       	ldd	r18, Y+1	; 0x01
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	20 83       	st	Z, r18
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2c36:	8c e4       	ldi	r24, 0x4C	; 76
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	20 83       	st	Z, r18
    2c40:	8d e4       	ldi	r24, 0x4D	; 77
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	2b 81       	ldd	r18, Y+3	; 0x03
    2c46:	fc 01       	movw	r30, r24
    2c48:	20 83       	st	Z, r18
    2c4a:	00 00       	nop
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	08 95       	ret

00002c58 <_ZN8SPIClass8transferEh>:
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	1f 92       	push	r1
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	8e e4       	ldi	r24, 0x4E	; 78
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	29 81       	ldd	r18, Y+1	; 0x01
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	20 83       	st	Z, r18
    2c6e:	00 00       	nop
    2c70:	8d e4       	ldi	r24, 0x4D	; 77
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 81       	ld	r24, Z
    2c78:	80 95       	com	r24
    2c7a:	88 1f       	adc	r24, r24
    2c7c:	88 27       	eor	r24, r24
    2c7e:	88 1f       	adc	r24, r24
    2c80:	88 23       	and	r24, r24
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <_ZN8SPIClass8transferEh+0x2e>
    2c84:	f5 cf       	rjmp	.-22     	; 0x2c70 <_ZN8SPIClass8transferEh+0x18>
    2c86:	8e e4       	ldi	r24, 0x4E	; 78
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	80 81       	ld	r24, Z
    2c8e:	0f 90       	pop	r0
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <_ZN8SPIClass14endTransactionEv>:
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	1f 92       	push	r1
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2ca4:	88 23       	and	r24, r24
    2ca6:	e1 f0       	breq	.+56     	; 0x2ce0 <_ZN8SPIClass14endTransactionEv+0x4a>
    2ca8:	8f e5       	ldi	r24, 0x5F	; 95
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	fc 01       	movw	r30, r24
    2cae:	80 81       	ld	r24, Z
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	f8 94       	cli
    2cb4:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	61 f4       	brne	.+24     	; 0x2cd4 <_ZN8SPIClass14endTransactionEv+0x3e>
    2cbc:	8d e3       	ldi	r24, 0x3D	; 61
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	20 83       	st	Z, r18
    2cc8:	8f e5       	ldi	r24, 0x5F	; 95
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	29 81       	ldd	r18, Y+1	; 0x01
    2cce:	fc 01       	movw	r30, r24
    2cd0:	20 83       	st	Z, r18
    2cd2:	06 c0       	rjmp	.+12     	; 0x2ce0 <_ZN8SPIClass14endTransactionEv+0x4a>
    2cd4:	8f e5       	ldi	r24, 0x5F	; 95
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2cdc:	fc 01       	movw	r30, r24
    2cde:	20 83       	st	Z, r18
    2ce0:	00 00       	nop
    2ce2:	0f 90       	pop	r0
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	08 95       	ret

00002cea <_ZN7MFRC522C1Ehh>:
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <_ZN7MFRC522C1Ehh+0x6>
    2cf0:	1f 92       	push	r1
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	6b 83       	std	Y+3, r22	; 0x03
    2cfc:	4c 83       	std	Y+4, r20	; 0x04
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	9a 81       	ldd	r25, Y+2	; 0x02
    2d02:	2b 81       	ldd	r18, Y+3	; 0x03
    2d04:	fc 01       	movw	r30, r24
    2d06:	24 87       	std	Z+12, r18	; 0x0c
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d0e:	fc 01       	movw	r30, r24
    2d10:	25 87       	std	Z+13, r18	; 0x0d
    2d12:	00 00       	nop
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	08 95       	ret

00002d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    2d22:	0f 93       	push	r16
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
    2d34:	6d 83       	std	Y+5, r22	; 0x05
    2d36:	4e 83       	std	Y+6, r20	; 0x06
    2d38:	00 e0       	ldi	r16, 0x00	; 0
    2d3a:	21 e0       	ldi	r18, 0x01	; 1
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	ba 01       	movw	r22, r20
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	9f de       	rcall	.-706    	; 0x2a86 <_ZN11SPISettingsC1Emhh>
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	43 df       	rcall	.-378    	; 0x2bd4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	fc 01       	movw	r30, r24
    2d54:	84 85       	ldd	r24, Z+12	; 0x0c
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	8e 77       	andi	r24, 0x7E	; 126
    2d60:	7b df       	rcall	.-266    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	79 df       	rcall	.-270    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	84 85       	ldd	r24, Z+12	; 0x0c
    2d6e:	61 e0       	ldi	r22, 0x01	; 1
    2d70:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2d74:	90 df       	rcall	.-224    	; 0x2c96 <_ZN8SPIClass14endTransactionEv>
    2d76:	00 00       	nop
    2d78:	26 96       	adiw	r28, 0x06	; 6
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	0f 91       	pop	r16
    2d8a:	08 95       	ret

00002d8c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    2d8c:	0f 93       	push	r16
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	29 97       	sbiw	r28, 0x09	; 9
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	9d 83       	std	Y+5, r25	; 0x05
    2da4:	8c 83       	std	Y+4, r24	; 0x04
    2da6:	6e 83       	std	Y+6, r22	; 0x06
    2da8:	4f 83       	std	Y+7, r20	; 0x07
    2daa:	39 87       	std	Y+9, r19	; 0x09
    2dac:	28 87       	std	Y+8, r18	; 0x08
    2dae:	ce 01       	movw	r24, r28
    2db0:	02 96       	adiw	r24, 0x02	; 2
    2db2:	00 e0       	ldi	r16, 0x00	; 0
    2db4:	21 e0       	ldi	r18, 0x01	; 1
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	ba 01       	movw	r22, r20
    2dbc:	64 de       	rcall	.-824    	; 0x2a86 <_ZN11SPISettingsC1Emhh>
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	08 df       	rcall	.-496    	; 0x2bd4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc8:	fc 01       	movw	r30, r24
    2dca:	84 85       	ldd	r24, Z+12	; 0x0c
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd4:	8e 77       	andi	r24, 0x7E	; 126
    2dd6:	40 df       	rcall	.-384    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2dd8:	19 82       	std	Y+1, r1	; 0x01
    2dda:	99 81       	ldd	r25, Y+1	; 0x01
    2ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dde:	98 17       	cp	r25, r24
    2de0:	70 f4       	brcc	.+28     	; 0x2dfe <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	28 85       	ldd	r18, Y+8	; 0x08
    2dea:	39 85       	ldd	r19, Y+9	; 0x09
    2dec:	82 0f       	add	r24, r18
    2dee:	93 1f       	adc	r25, r19
    2df0:	fc 01       	movw	r30, r24
    2df2:	80 81       	ld	r24, Z
    2df4:	31 df       	rcall	.-414    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	8f 5f       	subi	r24, 0xFF	; 255
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	ee cf       	rjmp	.-36     	; 0x2dda <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	9d 81       	ldd	r25, Y+5	; 0x05
    2e02:	fc 01       	movw	r30, r24
    2e04:	84 85       	ldd	r24, Z+12	; 0x0c
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2e0c:	44 df       	rcall	.-376    	; 0x2c96 <_ZN8SPIClass14endTransactionEv>
    2e0e:	00 00       	nop
    2e10:	29 96       	adiw	r28, 0x09	; 9
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	0f 91       	pop	r16
    2e22:	08 95       	ret

00002e24 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    2e24:	0f 93       	push	r16
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	9d 83       	std	Y+5, r25	; 0x05
    2e34:	8c 83       	std	Y+4, r24	; 0x04
    2e36:	6e 83       	std	Y+6, r22	; 0x06
    2e38:	ce 01       	movw	r24, r28
    2e3a:	02 96       	adiw	r24, 0x02	; 2
    2e3c:	00 e0       	ldi	r16, 0x00	; 0
    2e3e:	21 e0       	ldi	r18, 0x01	; 1
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	ba 01       	movw	r22, r20
    2e46:	1f de       	rcall	.-962    	; 0x2a86 <_ZN11SPISettingsC1Emhh>
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4c:	c3 de       	rcall	.-634    	; 0x2bd4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e50:	9d 81       	ldd	r25, Y+5	; 0x05
    2e52:	fc 01       	movw	r30, r24
    2e54:	84 85       	ldd	r24, Z+12	; 0x0c
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e5e:	8e 77       	andi	r24, 0x7E	; 126
    2e60:	80 68       	ori	r24, 0x80	; 128
    2e62:	fa de       	rcall	.-524    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	f8 de       	rcall	.-528    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e6e:	fc 01       	movw	r30, r24
    2e70:	84 85       	ldd	r24, Z+12	; 0x0c
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2e78:	0e df       	rcall	.-484    	; 0x2c96 <_ZN8SPIClass14endTransactionEv>
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	26 96       	adiw	r28, 0x06	; 6
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	0f 91       	pop	r16
    2e8e:	08 95       	ret

00002e90 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	99 87       	std	Y+9, r25	; 0x09
    2eaa:	88 87       	std	Y+8, r24	; 0x08
    2eac:	6a 87       	std	Y+10, r22	; 0x0a
    2eae:	4b 87       	std	Y+11, r20	; 0x0b
    2eb0:	3d 87       	std	Y+13, r19	; 0x0d
    2eb2:	2c 87       	std	Y+12, r18	; 0x0c
    2eb4:	0e 87       	std	Y+14, r16	; 0x0e
    2eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    2ebc:	7e c0       	rjmp	.+252    	; 0x2fba <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    2ebe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ec0:	8e 77       	andi	r24, 0x7E	; 126
    2ec2:	80 68       	ori	r24, 0x80	; 128
    2ec4:	8c 83       	std	Y+4, r24	; 0x04
    2ec6:	19 82       	std	Y+1, r1	; 0x01
    2ec8:	ce 01       	movw	r24, r28
    2eca:	06 96       	adiw	r24, 0x06	; 6
    2ecc:	00 e0       	ldi	r16, 0x00	; 0
    2ece:	21 e0       	ldi	r18, 0x01	; 1
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	50 e0       	ldi	r21, 0x00	; 0
    2ed4:	ba 01       	movw	r22, r20
    2ed6:	d7 dd       	rcall	.-1106   	; 0x2a86 <_ZN11SPISettingsC1Emhh>
    2ed8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eda:	9f 81       	ldd	r25, Y+7	; 0x07
    2edc:	7b de       	rcall	.-778    	; 0x2bd4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2ede:	88 85       	ldd	r24, Y+8	; 0x08
    2ee0:	99 85       	ldd	r25, Y+9	; 0x09
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	84 85       	ldd	r24, Z+12	; 0x0c
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2eec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eee:	81 50       	subi	r24, 0x01	; 1
    2ef0:	8b 87       	std	Y+11, r24	; 0x0b
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	b1 de       	rcall	.-670    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2ef6:	99 81       	ldd	r25, Y+1	; 0x01
    2ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2efa:	98 17       	cp	r25, r24
    2efc:	08 f0       	brcs	.+2      	; 0x2f00 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    2efe:	48 c0       	rjmp	.+144    	; 0x2f90 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	88 23       	and	r24, r24
    2f04:	a9 f5       	brne	.+106    	; 0x2f70 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2f06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f08:	88 23       	and	r24, r24
    2f0a:	91 f1       	breq	.+100    	; 0x2f70 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2f0c:	1a 82       	std	Y+2, r1	; 0x02
    2f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f10:	8b 83       	std	Y+3, r24	; 0x03
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	88 30       	cpi	r24, 0x08	; 8
    2f16:	90 f4       	brcc	.+36     	; 0x2f3c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	2a 95       	dec	r18
    2f2a:	e2 f7       	brpl	.-8      	; 0x2f24 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	89 2b       	or	r24, r25
    2f32:	8a 83       	std	Y+2, r24	; 0x02
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	8f 5f       	subi	r24, 0xFF	; 255
    2f38:	8b 83       	std	Y+3, r24	; 0x03
    2f3a:	eb cf       	rjmp	.-42     	; 0x2f12 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    2f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3e:	8c de       	rcall	.-744    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	88 2f       	mov	r24, r24
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f4a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f4c:	82 0f       	add	r24, r18
    2f4e:	93 1f       	adc	r25, r19
    2f50:	fc 01       	movw	r30, r24
    2f52:	80 81       	ld	r24, Z
    2f54:	98 2f       	mov	r25, r24
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	80 95       	com	r24
    2f5a:	89 23       	and	r24, r25
    2f5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f60:	92 23       	and	r25, r18
    2f62:	89 2b       	or	r24, r25
    2f64:	28 2f       	mov	r18, r24
    2f66:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f68:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	20 83       	st	Z, r18
    2f6e:	0c c0       	rjmp	.+24     	; 0x2f88 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f78:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f7a:	89 01       	movw	r16, r18
    2f7c:	08 0f       	add	r16, r24
    2f7e:	19 1f       	adc	r17, r25
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	6a de       	rcall	.-812    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2f84:	f8 01       	movw	r30, r16
    2f86:	80 83       	st	Z, r24
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	b3 cf       	rjmp	.-154    	; 0x2ef6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f98:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f9a:	89 01       	movw	r16, r18
    2f9c:	08 0f       	add	r16, r24
    2f9e:	19 1f       	adc	r17, r25
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	5a de       	rcall	.-844    	; 0x2c58 <_ZN8SPIClass8transferEh>
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	80 83       	st	Z, r24
    2fa8:	88 85       	ldd	r24, Y+8	; 0x08
    2faa:	99 85       	ldd	r25, Y+9	; 0x09
    2fac:	fc 01       	movw	r30, r24
    2fae:	84 85       	ldd	r24, Z+12	; 0x0c
    2fb0:	61 e0       	ldi	r22, 0x01	; 1
    2fb2:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    2fb6:	6f de       	rcall	.-802    	; 0x2c96 <_ZN8SPIClass14endTransactionEv>
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    2fba:	00 00       	nop
    2fbc:	2e 96       	adiw	r28, 0x0e	; 14
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	1f 91       	pop	r17
    2fce:	0f 91       	pop	r16
    2fd0:	08 95       	ret

00002fd2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    2fd8:	1f 92       	push	r1
    2fda:	1f 92       	push	r1
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	9b 83       	std	Y+3, r25	; 0x03
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	6c 83       	std	Y+4, r22	; 0x04
    2fe6:	4d 83       	std	Y+5, r20	; 0x05
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	9b 81       	ldd	r25, Y+3	; 0x03
    2fec:	6c 81       	ldd	r22, Y+4	; 0x04
    2fee:	1a df       	rcall	.-460    	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	99 81       	ldd	r25, Y+1	; 0x01
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	29 2f       	mov	r18, r25
    2ff8:	28 2b       	or	r18, r24
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffe:	42 2f       	mov	r20, r18
    3000:	6c 81       	ldd	r22, Y+4	; 0x04
    3002:	8f de       	rcall	.-738    	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3004:	00 00       	nop
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	00 d0       	rcall	.+0      	; 0x301c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    301c:	1f 92       	push	r1
    301e:	1f 92       	push	r1
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	9b 83       	std	Y+3, r25	; 0x03
    3026:	8a 83       	std	Y+2, r24	; 0x02
    3028:	6c 83       	std	Y+4, r22	; 0x04
    302a:	4d 83       	std	Y+5, r20	; 0x05
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	6c 81       	ldd	r22, Y+4	; 0x04
    3032:	f8 de       	rcall	.-528    	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	98 2f       	mov	r25, r24
    303a:	90 95       	com	r25
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	89 23       	and	r24, r25
    3040:	28 2f       	mov	r18, r24
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	42 2f       	mov	r20, r18
    3048:	6c 81       	ldd	r22, Y+4	; 0x04
    304a:	6b de       	rcall	.-810    	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    304c:	00 00       	nop
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	08 95       	ret

0000305e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	2a 97       	sbiw	r28, 0x0a	; 10
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	9d 83       	std	Y+5, r25	; 0x05
    3078:	8c 83       	std	Y+4, r24	; 0x04
    307a:	7f 83       	std	Y+7, r23	; 0x07
    307c:	6e 83       	std	Y+6, r22	; 0x06
    307e:	48 87       	std	Y+8, r20	; 0x08
    3080:	3a 87       	std	Y+10, r19	; 0x0a
    3082:	29 87       	std	Y+9, r18	; 0x09
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	9d 81       	ldd	r25, Y+5	; 0x05
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	62 e0       	ldi	r22, 0x02	; 2
    308c:	4a de       	rcall	.-876    	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	9d 81       	ldd	r25, Y+5	; 0x05
    3092:	44 e0       	ldi	r20, 0x04	; 4
    3094:	6a e0       	ldi	r22, 0x0A	; 10
    3096:	45 de       	rcall	.-886    	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3098:	8c 81       	ldd	r24, Y+4	; 0x04
    309a:	9d 81       	ldd	r25, Y+5	; 0x05
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	64 e1       	ldi	r22, 0x14	; 20
    30a0:	98 df       	rcall	.-208    	; 0x2fd2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    30a2:	2e 81       	ldd	r18, Y+6	; 0x06
    30a4:	3f 81       	ldd	r19, Y+7	; 0x07
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	9d 81       	ldd	r25, Y+5	; 0x05
    30aa:	48 85       	ldd	r20, Y+8	; 0x08
    30ac:	62 e1       	ldi	r22, 0x12	; 18
    30ae:	6e de       	rcall	.-804    	; 0x2d8c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	43 e0       	ldi	r20, 0x03	; 3
    30b6:	62 e0       	ldi	r22, 0x02	; 2
    30b8:	34 de       	rcall	.-920    	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30ba:	88 e8       	ldi	r24, 0x88	; 136
    30bc:	93 e1       	ldi	r25, 0x13	; 19
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	9d 81       	ldd	r25, Y+5	; 0x05
    30c6:	6a e0       	ldi	r22, 0x0A	; 10
    30c8:	ad de       	rcall	.-678    	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    30ca:	8b 83       	std	Y+3, r24	; 0x03
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	84 70       	andi	r24, 0x04	; 4
    30d4:	99 27       	eor	r25, r25
    30d6:	89 2b       	or	r24, r25
    30d8:	79 f4       	brne	.+30     	; 0x30f8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	21 e0       	ldi	r18, 0x01	; 1
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	89 2b       	or	r24, r25
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	22 23       	and	r18, r18
    30f2:	39 f3       	breq	.-50     	; 0x30c2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    30f4:	83 e0       	ldi	r24, 0x03	; 3
    30f6:	1b c0       	rjmp	.+54     	; 0x312e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    30f8:	00 00       	nop
    30fa:	8c 81       	ldd	r24, Y+4	; 0x04
    30fc:	9d 81       	ldd	r25, Y+5	; 0x05
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	62 e0       	ldi	r22, 0x02	; 2
    3102:	0f de       	rcall	.-994    	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3104:	8c 81       	ldd	r24, Y+4	; 0x04
    3106:	9d 81       	ldd	r25, Y+5	; 0x05
    3108:	64 e4       	ldi	r22, 0x44	; 68
    310a:	8c de       	rcall	.-744    	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    310c:	28 2f       	mov	r18, r24
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	fc 01       	movw	r30, r24
    3114:	20 83       	st	Z, r18
    3116:	89 85       	ldd	r24, Y+9	; 0x09
    3118:	9a 85       	ldd	r25, Y+10	; 0x0a
    311a:	8c 01       	movw	r16, r24
    311c:	0f 5f       	subi	r16, 0xFF	; 255
    311e:	1f 4f       	sbci	r17, 0xFF	; 255
    3120:	8c 81       	ldd	r24, Y+4	; 0x04
    3122:	9d 81       	ldd	r25, Y+5	; 0x05
    3124:	62 e4       	ldi	r22, 0x42	; 66
    3126:	7e de       	rcall	.-772    	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3128:	f8 01       	movw	r30, r16
    312a:	80 83       	st	Z, r24
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	2a 96       	adiw	r28, 0x0a	; 10
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	08 95       	ret

00003144 <_ZN7MFRC5228PCD_InitEv>:
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	1f 92       	push	r1
    314a:	1f 92       	push	r1
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	9a 83       	std	Y+2, r25	; 0x02
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	9a 81       	ldd	r25, Y+2	; 0x02
    3158:	fc 01       	movw	r30, r24
    315a:	84 85       	ldd	r24, Z+12	; 0x0c
    315c:	61 e0       	ldi	r22, 0x01	; 1
    315e:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	fc 01       	movw	r30, r24
    3168:	84 85       	ldd	r24, Z+12	; 0x0c
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	fc 01       	movw	r30, r24
    3176:	85 85       	ldd	r24, Z+13	; 0x0d
    3178:	61 e0       	ldi	r22, 0x01	; 1
    317a:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	9a 81       	ldd	r25, Y+2	; 0x02
    3182:	fc 01       	movw	r30, r24
    3184:	85 85       	ldd	r24, Z+13	; 0x0d
    3186:	0e 94 a1 31 	call	0x6342	; 0x6342 <digitalRead>
    318a:	21 e0       	ldi	r18, 0x01	; 1
    318c:	89 2b       	or	r24, r25
    318e:	09 f0       	breq	.+2      	; 0x3192 <_ZN7MFRC5228PCD_InitEv+0x4e>
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	22 23       	and	r18, r18
    3194:	71 f0       	breq	.+28     	; 0x31b2 <_ZN7MFRC5228PCD_InitEv+0x6e>
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	fc 01       	movw	r30, r24
    319c:	85 85       	ldd	r24, Z+13	; 0x0d
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    31a4:	62 e3       	ldi	r22, 0x32	; 50
    31a6:	70 e0       	ldi	r23, 0x00	; 0
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
    31b0:	03 c0       	rjmp	.+6      	; 0x31b8 <_ZN7MFRC5228PCD_InitEv+0x74>
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	27 d0       	rcall	.+78     	; 0x3206 <_ZN7MFRC5229PCD_ResetEv>
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	40 e8       	ldi	r20, 0x80	; 128
    31be:	64 e5       	ldi	r22, 0x54	; 84
    31c0:	b0 dd       	rcall	.-1184   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	49 ea       	ldi	r20, 0xA9	; 169
    31c8:	66 e5       	ldi	r22, 0x56	; 86
    31ca:	ab dd       	rcall	.-1194   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	43 e0       	ldi	r20, 0x03	; 3
    31d2:	68 e5       	ldi	r22, 0x58	; 88
    31d4:	a6 dd       	rcall	.-1204   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	48 ee       	ldi	r20, 0xE8	; 232
    31dc:	6a e5       	ldi	r22, 0x5A	; 90
    31de:	a1 dd       	rcall	.-1214   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	40 e4       	ldi	r20, 0x40	; 64
    31e6:	6a e2       	ldi	r22, 0x2A	; 42
    31e8:	9c dd       	rcall	.-1224   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	4d e3       	ldi	r20, 0x3D	; 61
    31f0:	62 e2       	ldi	r22, 0x22	; 34
    31f2:	97 dd       	rcall	.-1234   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	2e d0       	rcall	.+92     	; 0x3256 <_ZN7MFRC52213PCD_AntennaOnEv>
    31fa:	00 00       	nop
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	08 95       	ret

00003206 <_ZN7MFRC5229PCD_ResetEv>:
    3206:	cf 93       	push	r28
    3208:	df 93       	push	r29
    320a:	1f 92       	push	r1
    320c:	1f 92       	push	r1
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	4f e0       	ldi	r20, 0x0F	; 15
    321c:	62 e0       	ldi	r22, 0x02	; 2
    321e:	81 dd       	rcall	.-1278   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3220:	62 e3       	ldi	r22, 0x32	; 50
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 3c 30 	call	0x6078	; 0x6078 <delay>
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	62 e0       	ldi	r22, 0x02	; 2
    3232:	f8 dd       	rcall	.-1040   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3234:	88 2f       	mov	r24, r24
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	80 71       	andi	r24, 0x10	; 16
    323a:	99 27       	eor	r25, r25
    323c:	21 e0       	ldi	r18, 0x01	; 1
    323e:	89 2b       	or	r24, r25
    3240:	09 f4       	brne	.+2      	; 0x3244 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	22 23       	and	r18, r18
    3246:	09 f0       	breq	.+2      	; 0x324a <_ZN7MFRC5229PCD_ResetEv+0x44>
    3248:	f1 cf       	rjmp	.-30     	; 0x322c <_ZN7MFRC5229PCD_ResetEv+0x26>
    324a:	00 00       	nop
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	08 95       	ret

00003256 <_ZN7MFRC52213PCD_AntennaOnEv>:
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	00 d0       	rcall	.+0      	; 0x325c <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	9b 83       	std	Y+3, r25	; 0x03
    3262:	8a 83       	std	Y+2, r24	; 0x02
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	68 e2       	ldi	r22, 0x28	; 40
    326a:	dc dd       	rcall	.-1096   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	83 70       	andi	r24, 0x03	; 3
    3276:	99 27       	eor	r25, r25
    3278:	03 97       	sbiw	r24, 0x03	; 3
    327a:	41 f0       	breq	.+16     	; 0x328c <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	28 2f       	mov	r18, r24
    3280:	23 60       	ori	r18, 0x03	; 3
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	9b 81       	ldd	r25, Y+3	; 0x03
    3286:	42 2f       	mov	r20, r18
    3288:	68 e2       	ldi	r22, 0x28	; 40
    328a:	4b dd       	rcall	.-1386   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    328c:	00 00       	nop
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	08 95       	ret

0000329a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    329a:	8f 92       	push	r8
    329c:	af 92       	push	r10
    329e:	bf 92       	push	r11
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	2e 97       	sbiw	r28, 0x0e	; 14
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	9b 83       	std	Y+3, r25	; 0x03
    32c2:	8a 83       	std	Y+2, r24	; 0x02
    32c4:	7d 83       	std	Y+5, r23	; 0x05
    32c6:	6c 83       	std	Y+4, r22	; 0x04
    32c8:	4e 83       	std	Y+6, r20	; 0x06
    32ca:	38 87       	std	Y+8, r19	; 0x08
    32cc:	2f 83       	std	Y+7, r18	; 0x07
    32ce:	1a 87       	std	Y+10, r17	; 0x0a
    32d0:	09 87       	std	Y+9, r16	; 0x09
    32d2:	fc 86       	std	Y+12, r15	; 0x0c
    32d4:	eb 86       	std	Y+11, r14	; 0x0b
    32d6:	cd 86       	std	Y+13, r12	; 0x0d
    32d8:	ae 86       	std	Y+14, r10	; 0x0e
    32da:	80 e3       	ldi	r24, 0x30	; 48
    32dc:	89 83       	std	Y+1, r24	; 0x01
    32de:	eb 85       	ldd	r30, Y+11	; 0x0b
    32e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    32e2:	69 85       	ldd	r22, Y+9	; 0x09
    32e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    32e6:	4f 81       	ldd	r20, Y+7	; 0x07
    32e8:	58 85       	ldd	r21, Y+8	; 0x08
    32ea:	2c 81       	ldd	r18, Y+4	; 0x04
    32ec:	3d 81       	ldd	r19, Y+5	; 0x05
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	9b 81       	ldd	r25, Y+3	; 0x03
    32f2:	ae 85       	ldd	r26, Y+14	; 0x0e
    32f4:	af 93       	push	r26
    32f6:	8d 84       	ldd	r8, Y+13	; 0x0d
    32f8:	5f 01       	movw	r10, r30
    32fa:	6b 01       	movw	r12, r22
    32fc:	7a 01       	movw	r14, r20
    32fe:	0e 81       	ldd	r16, Y+6	; 0x06
    3300:	49 81       	ldd	r20, Y+1	; 0x01
    3302:	6c e0       	ldi	r22, 0x0C	; 12
    3304:	13 d0       	rcall	.+38     	; 0x332c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    3306:	0f 90       	pop	r0
    3308:	2e 96       	adiw	r28, 0x0e	; 14
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	bf 90       	pop	r11
    3326:	af 90       	pop	r10
    3328:	8f 90       	pop	r8
    332a:	08 95       	ret

0000332c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    332c:	8f 92       	push	r8
    332e:	af 92       	push	r10
    3330:	bf 92       	push	r11
    3332:	cf 92       	push	r12
    3334:	df 92       	push	r13
    3336:	ef 92       	push	r14
    3338:	ff 92       	push	r15
    333a:	0f 93       	push	r16
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	68 97       	sbiw	r28, 0x18	; 24
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	9c 87       	std	Y+12, r25	; 0x0c
    3352:	8b 87       	std	Y+11, r24	; 0x0b
    3354:	6d 87       	std	Y+13, r22	; 0x0d
    3356:	4e 87       	std	Y+14, r20	; 0x0e
    3358:	38 8b       	std	Y+16, r19	; 0x10
    335a:	2f 87       	std	Y+15, r18	; 0x0f
    335c:	09 8b       	std	Y+17, r16	; 0x11
    335e:	fb 8a       	std	Y+19, r15	; 0x13
    3360:	ea 8a       	std	Y+18, r14	; 0x12
    3362:	dd 8a       	std	Y+21, r13	; 0x15
    3364:	cc 8a       	std	Y+20, r12	; 0x14
    3366:	bf 8a       	std	Y+23, r11	; 0x17
    3368:	ae 8a       	std	Y+22, r10	; 0x16
    336a:	88 8e       	std	Y+24, r8	; 0x18
    336c:	8e 89       	ldd	r24, Y+22	; 0x16
    336e:	9f 89       	ldd	r25, Y+23	; 0x17
    3370:	89 2b       	or	r24, r25
    3372:	29 f0       	breq	.+10     	; 0x337e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    3374:	8e 89       	ldd	r24, Y+22	; 0x16
    3376:	9f 89       	ldd	r25, Y+23	; 0x17
    3378:	fc 01       	movw	r30, r24
    337a:	80 81       	ld	r24, Z
    337c:	01 c0       	rjmp	.+2      	; 0x3380 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	8c 83       	std	Y+4, r24	; 0x04
    3382:	88 8d       	ldd	r24, Y+24	; 0x18
    3384:	98 2f       	mov	r25, r24
    3386:	92 95       	swap	r25
    3388:	90 7f       	andi	r25, 0xF0	; 240
    338a:	8c 81       	ldd	r24, Y+4	; 0x04
    338c:	89 0f       	add	r24, r25
    338e:	8d 83       	std	Y+5, r24	; 0x05
    3390:	8b 85       	ldd	r24, Y+11	; 0x0b
    3392:	9c 85       	ldd	r25, Y+12	; 0x0c
    3394:	40 e0       	ldi	r20, 0x00	; 0
    3396:	62 e0       	ldi	r22, 0x02	; 2
    3398:	c4 dc       	rcall	.-1656   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    339a:	8b 85       	ldd	r24, Y+11	; 0x0b
    339c:	9c 85       	ldd	r25, Y+12	; 0x0c
    339e:	4f e7       	ldi	r20, 0x7F	; 127
    33a0:	68 e0       	ldi	r22, 0x08	; 8
    33a2:	bf dc       	rcall	.-1666   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    33a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	64 e1       	ldi	r22, 0x14	; 20
    33ac:	12 de       	rcall	.-988    	; 0x2fd2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    33ae:	2f 85       	ldd	r18, Y+15	; 0x0f
    33b0:	38 89       	ldd	r19, Y+16	; 0x10
    33b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    33b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    33b6:	49 89       	ldd	r20, Y+17	; 0x11
    33b8:	62 e1       	ldi	r22, 0x12	; 18
    33ba:	e8 dc       	rcall	.-1584   	; 0x2d8c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    33bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    33be:	9c 85       	ldd	r25, Y+12	; 0x0c
    33c0:	4d 81       	ldd	r20, Y+5	; 0x05
    33c2:	6a e1       	ldi	r22, 0x1A	; 26
    33c4:	ae dc       	rcall	.-1700   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    33c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ca:	4d 85       	ldd	r20, Y+13	; 0x0d
    33cc:	62 e0       	ldi	r22, 0x02	; 2
    33ce:	a9 dc       	rcall	.-1710   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    33d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d2:	8c 30       	cpi	r24, 0x0C	; 12
    33d4:	29 f4       	brne	.+10     	; 0x33e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    33d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33da:	40 e8       	ldi	r20, 0x80	; 128
    33dc:	6a e1       	ldi	r22, 0x1A	; 26
    33de:	f9 dd       	rcall	.-1038   	; 0x2fd2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    33e0:	80 ed       	ldi	r24, 0xD0	; 208
    33e2:	97 e0       	ldi	r25, 0x07	; 7
    33e4:	9b 83       	std	Y+3, r25	; 0x03
    33e6:	8a 83       	std	Y+2, r24	; 0x02
    33e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    33ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ec:	68 e0       	ldi	r22, 0x08	; 8
    33ee:	1a dd       	rcall	.-1484   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    33f0:	8e 83       	std	Y+6, r24	; 0x06
    33f2:	9e 81       	ldd	r25, Y+6	; 0x06
    33f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    33f6:	89 23       	and	r24, r25
    33f8:	88 23       	and	r24, r24
    33fa:	c1 f4       	brne	.+48     	; 0x342c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    33fc:	8e 81       	ldd	r24, Y+6	; 0x06
    33fe:	88 2f       	mov	r24, r24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	81 70       	andi	r24, 0x01	; 1
    3404:	99 27       	eor	r25, r25
    3406:	89 2b       	or	r24, r25
    3408:	11 f0       	breq	.+4      	; 0x340e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    340a:	83 e0       	ldi	r24, 0x03	; 3
    340c:	b4 c0       	rjmp	.+360    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	9b 81       	ldd	r25, Y+3	; 0x03
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	9b 83       	std	Y+3, r25	; 0x03
    3416:	8a 83       	std	Y+2, r24	; 0x02
    3418:	21 e0       	ldi	r18, 0x01	; 1
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
    341c:	9b 81       	ldd	r25, Y+3	; 0x03
    341e:	89 2b       	or	r24, r25
    3420:	09 f0       	breq	.+2      	; 0x3424 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	22 23       	and	r18, r18
    3426:	01 f3       	breq	.-64     	; 0x33e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    3428:	83 e0       	ldi	r24, 0x03	; 3
    342a:	a5 c0       	rjmp	.+330    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    342c:	00 00       	nop
    342e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3430:	9c 85       	ldd	r25, Y+12	; 0x0c
    3432:	6c e0       	ldi	r22, 0x0C	; 12
    3434:	f7 dc       	rcall	.-1554   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3436:	8f 83       	std	Y+7, r24	; 0x07
    3438:	8f 81       	ldd	r24, Y+7	; 0x07
    343a:	88 2f       	mov	r24, r24
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	83 71       	andi	r24, 0x13	; 19
    3440:	99 27       	eor	r25, r25
    3442:	89 2b       	or	r24, r25
    3444:	11 f0       	breq	.+4      	; 0x344a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	96 c0       	rjmp	.+300    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    344a:	8a 89       	ldd	r24, Y+18	; 0x12
    344c:	9b 89       	ldd	r25, Y+19	; 0x13
    344e:	89 2b       	or	r24, r25
    3450:	71 f1       	breq	.+92     	; 0x34ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    3452:	8c 89       	ldd	r24, Y+20	; 0x14
    3454:	9d 89       	ldd	r25, Y+21	; 0x15
    3456:	89 2b       	or	r24, r25
    3458:	51 f1       	breq	.+84     	; 0x34ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    345a:	8b 85       	ldd	r24, Y+11	; 0x0b
    345c:	9c 85       	ldd	r25, Y+12	; 0x0c
    345e:	64 e1       	ldi	r22, 0x14	; 20
    3460:	e1 dc       	rcall	.-1598   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3462:	8e 83       	std	Y+6, r24	; 0x06
    3464:	8c 89       	ldd	r24, Y+20	; 0x14
    3466:	9d 89       	ldd	r25, Y+21	; 0x15
    3468:	fc 01       	movw	r30, r24
    346a:	90 81       	ld	r25, Z
    346c:	8e 81       	ldd	r24, Y+6	; 0x06
    346e:	98 17       	cp	r25, r24
    3470:	10 f4       	brcc	.+4      	; 0x3476 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    3472:	84 e0       	ldi	r24, 0x04	; 4
    3474:	80 c0       	rjmp	.+256    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3476:	8c 89       	ldd	r24, Y+20	; 0x14
    3478:	9d 89       	ldd	r25, Y+21	; 0x15
    347a:	2e 81       	ldd	r18, Y+6	; 0x06
    347c:	fc 01       	movw	r30, r24
    347e:	20 83       	st	Z, r18
    3480:	2a 89       	ldd	r18, Y+18	; 0x12
    3482:	3b 89       	ldd	r19, Y+19	; 0x13
    3484:	8b 85       	ldd	r24, Y+11	; 0x0b
    3486:	9c 85       	ldd	r25, Y+12	; 0x0c
    3488:	08 8d       	ldd	r16, Y+24	; 0x18
    348a:	4e 81       	ldd	r20, Y+6	; 0x06
    348c:	62 e1       	ldi	r22, 0x12	; 18
    348e:	00 dd       	rcall	.-1536   	; 0x2e90 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    3490:	8b 85       	ldd	r24, Y+11	; 0x0b
    3492:	9c 85       	ldd	r25, Y+12	; 0x0c
    3494:	68 e1       	ldi	r22, 0x18	; 24
    3496:	c6 dc       	rcall	.-1652   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3498:	87 70       	andi	r24, 0x07	; 7
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	8e 89       	ldd	r24, Y+22	; 0x16
    349e:	9f 89       	ldd	r25, Y+23	; 0x17
    34a0:	89 2b       	or	r24, r25
    34a2:	29 f0       	breq	.+10     	; 0x34ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    34a4:	8e 89       	ldd	r24, Y+22	; 0x16
    34a6:	9f 89       	ldd	r25, Y+23	; 0x17
    34a8:	29 81       	ldd	r18, Y+1	; 0x01
    34aa:	fc 01       	movw	r30, r24
    34ac:	20 83       	st	Z, r18
    34ae:	8f 81       	ldd	r24, Y+7	; 0x07
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	88 70       	andi	r24, 0x08	; 8
    34b6:	99 27       	eor	r25, r25
    34b8:	89 2b       	or	r24, r25
    34ba:	11 f0       	breq	.+4      	; 0x34c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	5b c0       	rjmp	.+182    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    34c0:	8a 89       	ldd	r24, Y+18	; 0x12
    34c2:	9b 89       	ldd	r25, Y+19	; 0x13
    34c4:	89 2b       	or	r24, r25
    34c6:	09 f4       	brne	.+2      	; 0x34ca <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    34c8:	55 c0       	rjmp	.+170    	; 0x3574 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    34ca:	8c 89       	ldd	r24, Y+20	; 0x14
    34cc:	9d 89       	ldd	r25, Y+21	; 0x15
    34ce:	89 2b       	or	r24, r25
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    34d2:	50 c0       	rjmp	.+160    	; 0x3574 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    34d4:	8e a1       	ldd	r24, Y+38	; 0x26
    34d6:	88 23       	and	r24, r24
    34d8:	09 f4       	brne	.+2      	; 0x34dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    34da:	4c c0       	rjmp	.+152    	; 0x3574 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    34dc:	8c 89       	ldd	r24, Y+20	; 0x14
    34de:	9d 89       	ldd	r25, Y+21	; 0x15
    34e0:	fc 01       	movw	r30, r24
    34e2:	80 81       	ld	r24, Z
    34e4:	81 30       	cpi	r24, 0x01	; 1
    34e6:	29 f4       	brne	.+10     	; 0x34f2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	84 30       	cpi	r24, 0x04	; 4
    34ec:	11 f4       	brne	.+4      	; 0x34f2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    34ee:	8f ef       	ldi	r24, 0xFF	; 255
    34f0:	42 c0       	rjmp	.+132    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    34f2:	8c 89       	ldd	r24, Y+20	; 0x14
    34f4:	9d 89       	ldd	r25, Y+21	; 0x15
    34f6:	fc 01       	movw	r30, r24
    34f8:	80 81       	ld	r24, Z
    34fa:	82 30       	cpi	r24, 0x02	; 2
    34fc:	18 f0       	brcs	.+6      	; 0x3504 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	88 23       	and	r24, r24
    3502:	11 f0       	breq	.+4      	; 0x3508 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    3504:	87 e0       	ldi	r24, 0x07	; 7
    3506:	37 c0       	rjmp	.+110    	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3508:	8c 89       	ldd	r24, Y+20	; 0x14
    350a:	9d 89       	ldd	r25, Y+21	; 0x15
    350c:	fc 01       	movw	r30, r24
    350e:	80 81       	ld	r24, Z
    3510:	4e ef       	ldi	r20, 0xFE	; 254
    3512:	48 0f       	add	r20, r24
    3514:	9e 01       	movw	r18, r28
    3516:	27 5f       	subi	r18, 0xF7	; 247
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	6a 89       	ldd	r22, Y+18	; 0x12
    351c:	7b 89       	ldd	r23, Y+19	; 0x13
    351e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3520:	9c 85       	ldd	r25, Y+12	; 0x0c
    3522:	9d dd       	rcall	.-1222   	; 0x305e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3524:	88 87       	std	Y+8, r24	; 0x08
    3526:	88 85       	ldd	r24, Y+8	; 0x08
    3528:	88 23       	and	r24, r24
    352a:	11 f0       	breq	.+4      	; 0x3530 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    352c:	88 85       	ldd	r24, Y+8	; 0x08
    352e:	23 c0       	rjmp	.+70     	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3530:	8c 89       	ldd	r24, Y+20	; 0x14
    3532:	9d 89       	ldd	r25, Y+21	; 0x15
    3534:	fc 01       	movw	r30, r24
    3536:	80 81       	ld	r24, Z
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	02 97       	sbiw	r24, 0x02	; 2
    353e:	2a 89       	ldd	r18, Y+18	; 0x12
    3540:	3b 89       	ldd	r19, Y+19	; 0x13
    3542:	82 0f       	add	r24, r18
    3544:	93 1f       	adc	r25, r19
    3546:	fc 01       	movw	r30, r24
    3548:	90 81       	ld	r25, Z
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	98 17       	cp	r25, r24
    354e:	81 f4       	brne	.+32     	; 0x3570 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    3550:	8c 89       	ldd	r24, Y+20	; 0x14
    3552:	9d 89       	ldd	r25, Y+21	; 0x15
    3554:	fc 01       	movw	r30, r24
    3556:	80 81       	ld	r24, Z
    3558:	88 2f       	mov	r24, r24
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	2a 89       	ldd	r18, Y+18	; 0x12
    3560:	3b 89       	ldd	r19, Y+19	; 0x13
    3562:	82 0f       	add	r24, r18
    3564:	93 1f       	adc	r25, r19
    3566:	fc 01       	movw	r30, r24
    3568:	90 81       	ld	r25, Z
    356a:	8a 85       	ldd	r24, Y+10	; 0x0a
    356c:	98 17       	cp	r25, r24
    356e:	11 f0       	breq	.+4      	; 0x3574 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    3570:	87 e0       	ldi	r24, 0x07	; 7
    3572:	01 c0       	rjmp	.+2      	; 0x3576 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	68 96       	adiw	r28, 0x18	; 24
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	0f 91       	pop	r16
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	df 90       	pop	r13
    358e:	cf 90       	pop	r12
    3590:	bf 90       	pop	r11
    3592:	af 90       	pop	r10
    3594:	8f 90       	pop	r8
    3596:	08 95       	ret

00003598 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	00 d0       	rcall	.+0      	; 0x359e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	9a 83       	std	Y+2, r25	; 0x02
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	7c 83       	std	Y+4, r23	; 0x04
    35aa:	6b 83       	std	Y+3, r22	; 0x03
    35ac:	5e 83       	std	Y+6, r21	; 0x06
    35ae:	4d 83       	std	Y+5, r20	; 0x05
    35b0:	2d 81       	ldd	r18, Y+5	; 0x05
    35b2:	3e 81       	ldd	r19, Y+6	; 0x06
    35b4:	4b 81       	ldd	r20, Y+3	; 0x03
    35b6:	5c 81       	ldd	r21, Y+4	; 0x04
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	9a 81       	ldd	r25, Y+2	; 0x02
    35bc:	66 e2       	ldi	r22, 0x26	; 38
    35be:	09 d0       	rcall	.+18     	; 0x35d2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    35c0:	26 96       	adiw	r28, 0x06	; 6
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    35d2:	af 92       	push	r10
    35d4:	cf 92       	push	r12
    35d6:	ef 92       	push	r14
    35d8:	ff 92       	push	r15
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	29 97       	sbiw	r28, 0x09	; 9
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	9c 83       	std	Y+4, r25	; 0x04
    35f4:	8b 83       	std	Y+3, r24	; 0x03
    35f6:	6d 83       	std	Y+5, r22	; 0x05
    35f8:	5f 83       	std	Y+7, r21	; 0x07
    35fa:	4e 83       	std	Y+6, r20	; 0x06
    35fc:	39 87       	std	Y+9, r19	; 0x09
    35fe:	28 87       	std	Y+8, r18	; 0x08
    3600:	8e 81       	ldd	r24, Y+6	; 0x06
    3602:	9f 81       	ldd	r25, Y+7	; 0x07
    3604:	89 2b       	or	r24, r25
    3606:	31 f0       	breq	.+12     	; 0x3614 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    3608:	88 85       	ldd	r24, Y+8	; 0x08
    360a:	99 85       	ldd	r25, Y+9	; 0x09
    360c:	fc 01       	movw	r30, r24
    360e:	80 81       	ld	r24, Z
    3610:	82 30       	cpi	r24, 0x02	; 2
    3612:	10 f4       	brcc	.+4      	; 0x3618 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    3614:	84 e0       	ldi	r24, 0x04	; 4
    3616:	2a c0       	rjmp	.+84     	; 0x366c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	9c 81       	ldd	r25, Y+4	; 0x04
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	6c e1       	ldi	r22, 0x1C	; 28
    3620:	fa dc       	rcall	.-1548   	; 0x3016 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    3622:	87 e0       	ldi	r24, 0x07	; 7
    3624:	8a 83       	std	Y+2, r24	; 0x02
    3626:	fe 01       	movw	r30, r28
    3628:	32 96       	adiw	r30, 0x02	; 2
    362a:	48 85       	ldd	r20, Y+8	; 0x08
    362c:	59 85       	ldd	r21, Y+9	; 0x09
    362e:	2e 81       	ldd	r18, Y+6	; 0x06
    3630:	3f 81       	ldd	r19, Y+7	; 0x07
    3632:	be 01       	movw	r22, r28
    3634:	6b 5f       	subi	r22, 0xFB	; 251
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	9c 81       	ldd	r25, Y+4	; 0x04
    363c:	a1 2c       	mov	r10, r1
    363e:	c1 2c       	mov	r12, r1
    3640:	7f 01       	movw	r14, r30
    3642:	8a 01       	movw	r16, r20
    3644:	41 e0       	ldi	r20, 0x01	; 1
    3646:	29 de       	rcall	.-942    	; 0x329a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3648:	89 83       	std	Y+1, r24	; 0x01
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	88 23       	and	r24, r24
    364e:	11 f0       	breq	.+4      	; 0x3654 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	0c c0       	rjmp	.+24     	; 0x366c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3654:	88 85       	ldd	r24, Y+8	; 0x08
    3656:	99 85       	ldd	r25, Y+9	; 0x09
    3658:	fc 01       	movw	r30, r24
    365a:	80 81       	ld	r24, Z
    365c:	82 30       	cpi	r24, 0x02	; 2
    365e:	19 f4       	brne	.+6      	; 0x3666 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	88 23       	and	r24, r24
    3664:	11 f0       	breq	.+4      	; 0x366a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	01 c0       	rjmp	.+2      	; 0x366c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	29 96       	adiw	r28, 0x09	; 9
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	cf 90       	pop	r12
    3686:	af 90       	pop	r10
    3688:	08 95       	ret

0000368a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    368a:	af 92       	push	r10
    368c:	cf 92       	push	r12
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	a1 97       	sbiw	r28, 0x21	; 33
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	9e 8f       	std	Y+30, r25	; 0x1e
    36ac:	8d 8f       	std	Y+29, r24	; 0x1d
    36ae:	78 a3       	std	Y+32, r23	; 0x20
    36b0:	6f 8f       	std	Y+31, r22	; 0x1f
    36b2:	49 a3       	std	Y+33, r20	; 0x21
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	8c 83       	std	Y+4, r24	; 0x04
    36b8:	89 a1       	ldd	r24, Y+33	; 0x21
    36ba:	81 35       	cpi	r24, 0x51	; 81
    36bc:	10 f0       	brcs	.+4      	; 0x36c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    36be:	86 e0       	ldi	r24, 0x06	; 6
    36c0:	29 c2       	rjmp	.+1106   	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    36c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	6c e1       	ldi	r22, 0x1C	; 28
    36ca:	a5 dc       	rcall	.-1718   	; 0x3016 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    36cc:	19 82       	std	Y+1, r1	; 0x01
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	88 23       	and	r24, r24
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    36d4:	14 c2       	rjmp	.+1064   	; 0x3afe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    36d6:	8c 81       	ldd	r24, Y+4	; 0x04
    36d8:	88 2f       	mov	r24, r24
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	82 30       	cpi	r24, 0x02	; 2
    36de:	91 05       	cpc	r25, r1
    36e0:	b1 f0       	breq	.+44     	; 0x370e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    36e2:	83 30       	cpi	r24, 0x03	; 3
    36e4:	91 05       	cpc	r25, r1
    36e6:	29 f1       	breq	.+74     	; 0x3732 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	49 f5       	brne	.+82     	; 0x373e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    36ec:	83 e9       	ldi	r24, 0x93	; 147
    36ee:	8a 8b       	std	Y+18, r24	; 0x12
    36f0:	1f 82       	std	Y+7, r1	; 0x07
    36f2:	89 a1       	ldd	r24, Y+33	; 0x21
    36f4:	88 23       	and	r24, r24
    36f6:	41 f0       	breq	.+16     	; 0x3708 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    36f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36fa:	98 a1       	ldd	r25, Y+32	; 0x20
    36fc:	fc 01       	movw	r30, r24
    36fe:	80 81       	ld	r24, Z
    3700:	85 30       	cpi	r24, 0x05	; 5
    3702:	10 f0       	brcs	.+4      	; 0x3708 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	01 c0       	rjmp	.+2      	; 0x370a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	8b 83       	std	Y+3, r24	; 0x03
    370c:	1a c0       	rjmp	.+52     	; 0x3742 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    370e:	85 e9       	ldi	r24, 0x95	; 149
    3710:	8a 8b       	std	Y+18, r24	; 0x12
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	8f 83       	std	Y+7, r24	; 0x07
    3716:	89 a1       	ldd	r24, Y+33	; 0x21
    3718:	88 23       	and	r24, r24
    371a:	41 f0       	breq	.+16     	; 0x372c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    371c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    371e:	98 a1       	ldd	r25, Y+32	; 0x20
    3720:	fc 01       	movw	r30, r24
    3722:	80 81       	ld	r24, Z
    3724:	88 30       	cpi	r24, 0x08	; 8
    3726:	10 f0       	brcs	.+4      	; 0x372c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	01 c0       	rjmp	.+2      	; 0x372e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	8b 83       	std	Y+3, r24	; 0x03
    3730:	08 c0       	rjmp	.+16     	; 0x3742 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3732:	87 e9       	ldi	r24, 0x97	; 151
    3734:	8a 8b       	std	Y+18, r24	; 0x12
    3736:	86 e0       	ldi	r24, 0x06	; 6
    3738:	8f 83       	std	Y+7, r24	; 0x07
    373a:	1b 82       	std	Y+3, r1	; 0x03
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    373e:	85 e0       	ldi	r24, 0x05	; 5
    3740:	e9 c1       	rjmp	.+978    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3742:	8f 81       	ldd	r24, Y+7	; 0x07
    3744:	88 0f       	add	r24, r24
    3746:	88 0f       	add	r24, r24
    3748:	88 0f       	add	r24, r24
    374a:	99 a1       	ldd	r25, Y+33	; 0x21
    374c:	f9 2f       	mov	r31, r25
    374e:	f8 1b       	sub	r31, r24
    3750:	8f 2f       	mov	r24, r31
    3752:	88 87       	std	Y+8, r24	; 0x08
    3754:	88 85       	ldd	r24, Y+8	; 0x08
    3756:	88 23       	and	r24, r24
    3758:	0c f4       	brge	.+2      	; 0x375c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    375a:	18 86       	std	Y+8, r1	; 0x08
    375c:	82 e0       	ldi	r24, 0x02	; 2
    375e:	8e 83       	std	Y+6, r24	; 0x06
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	88 23       	and	r24, r24
    3764:	71 f0       	breq	.+28     	; 0x3782 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    3766:	8e 81       	ldd	r24, Y+6	; 0x06
    3768:	91 e0       	ldi	r25, 0x01	; 1
    376a:	98 0f       	add	r25, r24
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	9e 01       	movw	r18, r28
    3774:	2e 5e       	subi	r18, 0xEE	; 238
    3776:	3f 4f       	sbci	r19, 0xFF	; 255
    3778:	82 0f       	add	r24, r18
    377a:	93 1f       	adc	r25, r19
    377c:	28 e8       	ldi	r18, 0x88	; 136
    377e:	fc 01       	movw	r30, r24
    3780:	20 83       	st	Z, r18
    3782:	88 85       	ldd	r24, Y+8	; 0x08
    3784:	88 23       	and	r24, r24
    3786:	0c f4       	brge	.+2      	; 0x378a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3788:	89 5f       	subi	r24, 0xF9	; 249
    378a:	85 95       	asr	r24
    378c:	85 95       	asr	r24
    378e:	85 95       	asr	r24
    3790:	98 2f       	mov	r25, r24
    3792:	88 85       	ldd	r24, Y+8	; 0x08
    3794:	87 70       	andi	r24, 0x07	; 7
    3796:	88 23       	and	r24, r24
    3798:	11 f0       	breq	.+4      	; 0x379e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	01 c0       	rjmp	.+2      	; 0x37a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	89 0f       	add	r24, r25
    37a2:	8c 87       	std	Y+12, r24	; 0x0c
    37a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a6:	88 23       	and	r24, r24
    37a8:	99 f1       	breq	.+102    	; 0x3810 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	88 23       	and	r24, r24
    37ae:	11 f0       	breq	.+4      	; 0x37b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    37b4:	84 e0       	ldi	r24, 0x04	; 4
    37b6:	8e 87       	std	Y+14, r24	; 0x0e
    37b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    37ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    37bc:	89 17       	cp	r24, r25
    37be:	10 f4       	brcc	.+4      	; 0x37c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    37c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37c2:	8c 87       	std	Y+12, r24	; 0x0c
    37c4:	1d 82       	std	Y+5, r1	; 0x05
    37c6:	9d 81       	ldd	r25, Y+5	; 0x05
    37c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ca:	98 17       	cp	r25, r24
    37cc:	08 f5       	brcc	.+66     	; 0x3810 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    37ce:	8e 81       	ldd	r24, Y+6	; 0x06
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	98 0f       	add	r25, r24
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	88 2f       	mov	r24, r24
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	2f 81       	ldd	r18, Y+7	; 0x07
    37dc:	42 2f       	mov	r20, r18
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	2d 81       	ldd	r18, Y+5	; 0x05
    37e2:	22 2f       	mov	r18, r18
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	24 0f       	add	r18, r20
    37e8:	35 1f       	adc	r19, r21
    37ea:	4f 8d       	ldd	r20, Y+31	; 0x1f
    37ec:	58 a1       	ldd	r21, Y+32	; 0x20
    37ee:	24 0f       	add	r18, r20
    37f0:	35 1f       	adc	r19, r21
    37f2:	2f 5f       	subi	r18, 0xFF	; 255
    37f4:	3f 4f       	sbci	r19, 0xFF	; 255
    37f6:	f9 01       	movw	r30, r18
    37f8:	40 81       	ld	r20, Z
    37fa:	9e 01       	movw	r18, r28
    37fc:	2e 5e       	subi	r18, 0xEE	; 238
    37fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3800:	82 0f       	add	r24, r18
    3802:	93 1f       	adc	r25, r19
    3804:	fc 01       	movw	r30, r24
    3806:	40 83       	st	Z, r20
    3808:	8d 81       	ldd	r24, Y+5	; 0x05
    380a:	8f 5f       	subi	r24, 0xFF	; 255
    380c:	8d 83       	std	Y+5, r24	; 0x05
    380e:	db cf       	rjmp	.-74     	; 0x37c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	88 23       	and	r24, r24
    3814:	19 f0       	breq	.+6      	; 0x381c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    3816:	88 85       	ldd	r24, Y+8	; 0x08
    3818:	88 5f       	subi	r24, 0xF8	; 248
    381a:	88 87       	std	Y+8, r24	; 0x08
    381c:	1a 82       	std	Y+2, r1	; 0x02
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	88 23       	and	r24, r24
    3822:	09 f0       	breq	.+2      	; 0x3826 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    3824:	f5 c0       	rjmp	.+490    	; 0x3a10 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    3826:	88 85       	ldd	r24, Y+8	; 0x08
    3828:	80 32       	cpi	r24, 0x20	; 32
    382a:	3c f1       	brlt	.+78     	; 0x387a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    382c:	80 e7       	ldi	r24, 0x70	; 112
    382e:	8b 8b       	std	Y+19, r24	; 0x13
    3830:	9c 89       	ldd	r25, Y+20	; 0x14
    3832:	8d 89       	ldd	r24, Y+21	; 0x15
    3834:	98 27       	eor	r25, r24
    3836:	8e 89       	ldd	r24, Y+22	; 0x16
    3838:	98 27       	eor	r25, r24
    383a:	8f 89       	ldd	r24, Y+23	; 0x17
    383c:	89 27       	eor	r24, r25
    383e:	88 8f       	std	Y+24, r24	; 0x18
    3840:	ce 01       	movw	r24, r28
    3842:	42 96       	adiw	r24, 0x12	; 18
    3844:	9c 01       	movw	r18, r24
    3846:	29 5f       	subi	r18, 0xF9	; 249
    3848:	3f 4f       	sbci	r19, 0xFF	; 255
    384a:	be 01       	movw	r22, r28
    384c:	6e 5e       	subi	r22, 0xEE	; 238
    384e:	7f 4f       	sbci	r23, 0xFF	; 255
    3850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3852:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3854:	47 e0       	ldi	r20, 0x07	; 7
    3856:	03 dc       	rcall	.-2042   	; 0x305e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3858:	8f 87       	std	Y+15, r24	; 0x0f
    385a:	8f 85       	ldd	r24, Y+15	; 0x0f
    385c:	88 23       	and	r24, r24
    385e:	11 f0       	breq	.+4      	; 0x3864 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    3860:	8f 85       	ldd	r24, Y+15	; 0x0f
    3862:	58 c1       	rjmp	.+688    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3864:	1b 8e       	std	Y+27, r1	; 0x1b
    3866:	89 e0       	ldi	r24, 0x09	; 9
    3868:	89 87       	std	Y+9, r24	; 0x09
    386a:	ce 01       	movw	r24, r28
    386c:	42 96       	adiw	r24, 0x12	; 18
    386e:	06 96       	adiw	r24, 0x06	; 6
    3870:	9b 87       	std	Y+11, r25	; 0x0b
    3872:	8a 87       	std	Y+10, r24	; 0x0a
    3874:	83 e0       	ldi	r24, 0x03	; 3
    3876:	8c 8f       	std	Y+28, r24	; 0x1c
    3878:	33 c0       	rjmp	.+102    	; 0x38e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    387a:	88 85       	ldd	r24, Y+8	; 0x08
    387c:	87 78       	andi	r24, 0x87	; 135
    387e:	88 23       	and	r24, r24
    3880:	1c f4       	brge	.+6      	; 0x3888 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3882:	81 50       	subi	r24, 0x01	; 1
    3884:	88 6f       	ori	r24, 0xF8	; 248
    3886:	8f 5f       	subi	r24, 0xFF	; 255
    3888:	8b 8f       	std	Y+27, r24	; 0x1b
    388a:	88 85       	ldd	r24, Y+8	; 0x08
    388c:	88 23       	and	r24, r24
    388e:	0c f4       	brge	.+2      	; 0x3892 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    3890:	89 5f       	subi	r24, 0xF9	; 249
    3892:	85 95       	asr	r24
    3894:	85 95       	asr	r24
    3896:	85 95       	asr	r24
    3898:	8d 83       	std	Y+5, r24	; 0x05
    389a:	8d 81       	ldd	r24, Y+5	; 0x05
    389c:	8e 5f       	subi	r24, 0xFE	; 254
    389e:	8e 83       	std	Y+6, r24	; 0x06
    38a0:	8e 81       	ldd	r24, Y+6	; 0x06
    38a2:	98 2f       	mov	r25, r24
    38a4:	92 95       	swap	r25
    38a6:	90 7f       	andi	r25, 0xF0	; 240
    38a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38aa:	89 0f       	add	r24, r25
    38ac:	8b 8b       	std	Y+19, r24	; 0x13
    38ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b0:	88 23       	and	r24, r24
    38b2:	11 f0       	breq	.+4      	; 0x38b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	9e 81       	ldd	r25, Y+6	; 0x06
    38bc:	89 0f       	add	r24, r25
    38be:	89 87       	std	Y+9, r24	; 0x09
    38c0:	8e 81       	ldd	r24, Y+6	; 0x06
    38c2:	88 2f       	mov	r24, r24
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	9e 01       	movw	r18, r28
    38c8:	2e 5e       	subi	r18, 0xEE	; 238
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	82 0f       	add	r24, r18
    38ce:	93 1f       	adc	r25, r19
    38d0:	9b 87       	std	Y+11, r25	; 0x0b
    38d2:	8a 87       	std	Y+10, r24	; 0x0a
    38d4:	99 e0       	ldi	r25, 0x09	; 9
    38d6:	8e 81       	ldd	r24, Y+6	; 0x06
    38d8:	f9 2f       	mov	r31, r25
    38da:	f8 1b       	sub	r31, r24
    38dc:	8f 2f       	mov	r24, r31
    38de:	8c 8f       	std	Y+28, r24	; 0x1c
    38e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e2:	88 8b       	std	Y+16, r24	; 0x10
    38e4:	88 89       	ldd	r24, Y+16	; 0x10
    38e6:	98 2f       	mov	r25, r24
    38e8:	92 95       	swap	r25
    38ea:	90 7f       	andi	r25, 0xF0	; 240
    38ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ee:	29 2f       	mov	r18, r25
    38f0:	28 0f       	add	r18, r24
    38f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38f6:	42 2f       	mov	r20, r18
    38f8:	6a e1       	ldi	r22, 0x1A	; 26
    38fa:	13 da       	rcall	.-3034   	; 0x2d22 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    38fc:	fe 01       	movw	r30, r28
    38fe:	7b 96       	adiw	r30, 0x1b	; 27
    3900:	ae 01       	movw	r20, r28
    3902:	44 5e       	subi	r20, 0xE4	; 228
    3904:	5f 4f       	sbci	r21, 0xFF	; 255
    3906:	2a 85       	ldd	r18, Y+10	; 0x0a
    3908:	3b 85       	ldd	r19, Y+11	; 0x0b
    390a:	be 01       	movw	r22, r28
    390c:	6e 5e       	subi	r22, 0xEE	; 238
    390e:	7f 4f       	sbci	r23, 0xFF	; 255
    3910:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3912:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3914:	a1 2c       	mov	r10, r1
    3916:	c8 88       	ldd	r12, Y+16	; 0x10
    3918:	7f 01       	movw	r14, r30
    391a:	8a 01       	movw	r16, r20
    391c:	49 85       	ldd	r20, Y+9	; 0x09
    391e:	bd dc       	rcall	.-1670   	; 0x329a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3920:	8f 87       	std	Y+15, r24	; 0x0f
    3922:	8f 85       	ldd	r24, Y+15	; 0x0f
    3924:	82 30       	cpi	r24, 0x02	; 2
    3926:	09 f0       	breq	.+2      	; 0x392a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    3928:	65 c0       	rjmp	.+202    	; 0x39f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    392a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    392e:	6c e1       	ldi	r22, 0x1C	; 28
    3930:	79 da       	rcall	.-2830   	; 0x2e24 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3932:	89 8b       	std	Y+17, r24	; 0x11
    3934:	89 89       	ldd	r24, Y+17	; 0x11
    3936:	88 2f       	mov	r24, r24
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	80 72       	andi	r24, 0x20	; 32
    393c:	99 27       	eor	r25, r25
    393e:	89 2b       	or	r24, r25
    3940:	11 f0       	breq	.+4      	; 0x3946 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	e7 c0       	rjmp	.+462    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3946:	89 89       	ldd	r24, Y+17	; 0x11
    3948:	8f 71       	andi	r24, 0x1F	; 31
    394a:	8d 87       	std	Y+13, r24	; 0x0d
    394c:	8d 85       	ldd	r24, Y+13	; 0x0d
    394e:	88 23       	and	r24, r24
    3950:	11 f4       	brne	.+4      	; 0x3956 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3952:	80 e2       	ldi	r24, 0x20	; 32
    3954:	8d 87       	std	Y+13, r24	; 0x0d
    3956:	8d 85       	ldd	r24, Y+13	; 0x0d
    3958:	28 2f       	mov	r18, r24
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	88 85       	ldd	r24, Y+8	; 0x08
    395e:	08 2e       	mov	r0, r24
    3960:	00 0c       	add	r0, r0
    3962:	99 0b       	sbc	r25, r25
    3964:	82 17       	cp	r24, r18
    3966:	93 07       	cpc	r25, r19
    3968:	14 f0       	brlt	.+4      	; 0x396e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    396a:	85 e0       	ldi	r24, 0x05	; 5
    396c:	d3 c0       	rjmp	.+422    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    396e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3970:	88 87       	std	Y+8, r24	; 0x08
    3972:	88 85       	ldd	r24, Y+8	; 0x08
    3974:	08 2e       	mov	r0, r24
    3976:	00 0c       	add	r0, r0
    3978:	99 0b       	sbc	r25, r25
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	87 70       	andi	r24, 0x07	; 7
    397e:	90 78       	andi	r25, 0x80	; 128
    3980:	99 23       	and	r25, r25
    3982:	24 f4       	brge	.+8      	; 0x398c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	88 6f       	ori	r24, 0xF8	; 248
    3988:	9f 6f       	ori	r25, 0xFF	; 255
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	8d 83       	std	Y+5, r24	; 0x05
    398e:	88 85       	ldd	r24, Y+8	; 0x08
    3990:	88 23       	and	r24, r24
    3992:	0c f4       	brge	.+2      	; 0x3996 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3994:	89 5f       	subi	r24, 0xF9	; 249
    3996:	85 95       	asr	r24
    3998:	85 95       	asr	r24
    399a:	85 95       	asr	r24
    399c:	98 2f       	mov	r25, r24
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	88 23       	and	r24, r24
    39a2:	11 f0       	breq	.+4      	; 0x39a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	89 0f       	add	r24, r25
    39ac:	8f 5f       	subi	r24, 0xFF	; 255
    39ae:	8e 83       	std	Y+6, r24	; 0x06
    39b0:	8e 81       	ldd	r24, Y+6	; 0x06
    39b2:	88 2f       	mov	r24, r24
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	2e 81       	ldd	r18, Y+6	; 0x06
    39b8:	22 2f       	mov	r18, r18
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	ae 01       	movw	r20, r28
    39be:	4e 5e       	subi	r20, 0xEE	; 238
    39c0:	5f 4f       	sbci	r21, 0xFF	; 255
    39c2:	24 0f       	add	r18, r20
    39c4:	35 1f       	adc	r19, r21
    39c6:	f9 01       	movw	r30, r18
    39c8:	20 81       	ld	r18, Z
    39ca:	62 2f       	mov	r22, r18
    39cc:	2d 81       	ldd	r18, Y+5	; 0x05
    39ce:	42 2f       	mov	r20, r18
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	21 e0       	ldi	r18, 0x01	; 1
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	4a 95       	dec	r20
    39de:	e2 f7       	brpl	.-8      	; 0x39d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    39e0:	26 2b       	or	r18, r22
    39e2:	42 2f       	mov	r20, r18
    39e4:	9e 01       	movw	r18, r28
    39e6:	2e 5e       	subi	r18, 0xEE	; 238
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	82 0f       	add	r24, r18
    39ec:	93 1f       	adc	r25, r19
    39ee:	fc 01       	movw	r30, r24
    39f0:	40 83       	st	Z, r20
    39f2:	15 cf       	rjmp	.-470    	; 0x381e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    39f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f6:	88 23       	and	r24, r24
    39f8:	11 f0       	breq	.+4      	; 0x39fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    39fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fc:	8b c0       	rjmp	.+278    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    39fe:	88 85       	ldd	r24, Y+8	; 0x08
    3a00:	80 32       	cpi	r24, 0x20	; 32
    3a02:	1c f0       	brlt	.+6      	; 0x3a0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	8a 83       	std	Y+2, r24	; 0x02
    3a08:	0a cf       	rjmp	.-492    	; 0x381e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3a0a:	80 e2       	ldi	r24, 0x20	; 32
    3a0c:	88 87       	std	Y+8, r24	; 0x08
    3a0e:	07 cf       	rjmp	.-498    	; 0x381e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3a10:	8c 89       	ldd	r24, Y+20	; 0x14
    3a12:	88 38       	cpi	r24, 0x88	; 136
    3a14:	11 f4       	brne	.+4      	; 0x3a1a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    3a16:	83 e0       	ldi	r24, 0x03	; 3
    3a18:	01 c0       	rjmp	.+2      	; 0x3a1c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	8e 83       	std	Y+6, r24	; 0x06
    3a1e:	8c 89       	ldd	r24, Y+20	; 0x14
    3a20:	88 38       	cpi	r24, 0x88	; 136
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    3a24:	83 e0       	ldi	r24, 0x03	; 3
    3a26:	01 c0       	rjmp	.+2      	; 0x3a2a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    3a28:	84 e0       	ldi	r24, 0x04	; 4
    3a2a:	8c 87       	std	Y+12, r24	; 0x0c
    3a2c:	1d 82       	std	Y+5, r1	; 0x05
    3a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a30:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a32:	98 17       	cp	r25, r24
    3a34:	00 f5       	brcc	.+64     	; 0x3a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    3a36:	8f 81       	ldd	r24, Y+7	; 0x07
    3a38:	28 2f       	mov	r18, r24
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	88 2f       	mov	r24, r24
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	82 0f       	add	r24, r18
    3a44:	93 1f       	adc	r25, r19
    3a46:	2e 81       	ldd	r18, Y+6	; 0x06
    3a48:	31 e0       	ldi	r19, 0x01	; 1
    3a4a:	32 0f       	add	r19, r18
    3a4c:	3e 83       	std	Y+6, r19	; 0x06
    3a4e:	22 2f       	mov	r18, r18
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	ae 01       	movw	r20, r28
    3a54:	4e 5e       	subi	r20, 0xEE	; 238
    3a56:	5f 4f       	sbci	r21, 0xFF	; 255
    3a58:	24 0f       	add	r18, r20
    3a5a:	35 1f       	adc	r19, r21
    3a5c:	f9 01       	movw	r30, r18
    3a5e:	40 81       	ld	r20, Z
    3a60:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a62:	38 a1       	ldd	r19, Y+32	; 0x20
    3a64:	82 0f       	add	r24, r18
    3a66:	93 1f       	adc	r25, r19
    3a68:	01 96       	adiw	r24, 0x01	; 1
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	40 83       	st	Z, r20
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	8f 5f       	subi	r24, 0xFF	; 255
    3a72:	8d 83       	std	Y+5, r24	; 0x05
    3a74:	dc cf       	rjmp	.-72     	; 0x3a2e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3a76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a78:	83 30       	cpi	r24, 0x03	; 3
    3a7a:	19 f4       	brne	.+6      	; 0x3a82 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    3a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7e:	88 23       	and	r24, r24
    3a80:	11 f0       	breq	.+4      	; 0x3a86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	47 c0       	rjmp	.+142    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3a86:	ce 01       	movw	r24, r28
    3a88:	42 96       	adiw	r24, 0x12	; 18
    3a8a:	9c 01       	movw	r18, r24
    3a8c:	2e 5f       	subi	r18, 0xFE	; 254
    3a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a90:	6a 85       	ldd	r22, Y+10	; 0x0a
    3a92:	7b 85       	ldd	r23, Y+11	; 0x0b
    3a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a98:	41 e0       	ldi	r20, 0x01	; 1
    3a9a:	e1 da       	rcall	.-2622   	; 0x305e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3a9c:	8f 87       	std	Y+15, r24	; 0x0f
    3a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa0:	88 23       	and	r24, r24
    3aa2:	11 f0       	breq	.+4      	; 0x3aa8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa6:	36 c0       	rjmp	.+108    	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3aa8:	2c 89       	ldd	r18, Y+20	; 0x14
    3aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aac:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aae:	01 96       	adiw	r24, 0x01	; 1
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	80 81       	ld	r24, Z
    3ab4:	28 17       	cp	r18, r24
    3ab6:	41 f4       	brne	.+16     	; 0x3ac8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    3ab8:	2d 89       	ldd	r18, Y+21	; 0x15
    3aba:	8a 85       	ldd	r24, Y+10	; 0x0a
    3abc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3abe:	02 96       	adiw	r24, 0x02	; 2
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	80 81       	ld	r24, Z
    3ac4:	28 17       	cp	r18, r24
    3ac6:	11 f0       	breq	.+4      	; 0x3acc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    3ac8:	87 e0       	ldi	r24, 0x07	; 7
    3aca:	24 c0       	rjmp	.+72     	; 0x3b14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3acc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ace:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	80 81       	ld	r24, Z
    3ad4:	88 2f       	mov	r24, r24
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	84 70       	andi	r24, 0x04	; 4
    3ada:	99 27       	eor	r25, r25
    3adc:	89 2b       	or	r24, r25
    3ade:	21 f0       	breq	.+8      	; 0x3ae8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    3ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae2:	8f 5f       	subi	r24, 0xFF	; 255
    3ae4:	8c 83       	std	Y+4, r24	; 0x04
    3ae6:	f3 cd       	rjmp	.-1050   	; 0x36ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	89 83       	std	Y+1, r24	; 0x01
    3aec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aee:	9b 85       	ldd	r25, Y+11	; 0x0b
    3af0:	fc 01       	movw	r30, r24
    3af2:	20 81       	ld	r18, Z
    3af4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3af6:	98 a1       	ldd	r25, Y+32	; 0x20
    3af8:	fc 01       	movw	r30, r24
    3afa:	23 87       	std	Z+11, r18	; 0x0b
    3afc:	e8 cd       	rjmp	.-1072   	; 0x36ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	89 2f       	mov	r24, r25
    3b02:	88 0f       	add	r24, r24
    3b04:	89 0f       	add	r24, r25
    3b06:	21 e0       	ldi	r18, 0x01	; 1
    3b08:	28 0f       	add	r18, r24
    3b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b0c:	98 a1       	ldd	r25, Y+32	; 0x20
    3b0e:	fc 01       	movw	r30, r24
    3b10:	20 83       	st	Z, r18
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	a1 96       	adiw	r28, 0x21	; 33
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	cd bf       	out	0x3d, r28	; 61
    3b20:	df 91       	pop	r29
    3b22:	cf 91       	pop	r28
    3b24:	1f 91       	pop	r17
    3b26:	0f 91       	pop	r16
    3b28:	ff 90       	pop	r15
    3b2a:	ef 90       	pop	r14
    3b2c:	cf 90       	pop	r12
    3b2e:	af 90       	pop	r10
    3b30:	08 95       	ret

00003b32 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	9e 83       	std	Y+6, r25	; 0x06
    3b40:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3b42:	82 e0       	ldi	r24, 0x02	; 2
    3b44:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    3b46:	ae 01       	movw	r20, r28
    3b48:	4c 5f       	subi	r20, 0xFC	; 252
    3b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4c:	9e 01       	movw	r18, r28
    3b4e:	2e 5f       	subi	r18, 0xFE	; 254
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
    3b54:	9e 81       	ldd	r25, Y+6	; 0x06
    3b56:	b9 01       	movw	r22, r18
    3b58:	1f dd       	rcall	.-1474   	; 0x3598 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    3b5a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	88 23       	and	r24, r24
    3b60:	19 f0       	breq	.+6      	; 0x3b68 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	82 30       	cpi	r24, 0x02	; 2
    3b66:	11 f4       	brne	.+4      	; 0x3b6c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	01 c0       	rjmp	.+2      	; 0x3b6e <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    3b6e:	26 96       	adiw	r28, 0x06	; 6
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	08 95       	ret

00003b80 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3b80:	cf 93       	push	r28
    3b82:	df 93       	push	r29
    3b84:	00 d0       	rcall	.+0      	; 0x3b86 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	9b 83       	std	Y+3, r25	; 0x03
    3b8c:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    3b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    3b90:	3b 81       	ldd	r19, Y+3	; 0x03
    3b92:	8a 81       	ldd	r24, Y+2	; 0x02
    3b94:	9b 81       	ldd	r25, Y+3	; 0x03
    3b96:	40 e0       	ldi	r20, 0x00	; 0
    3b98:	b9 01       	movw	r22, r18
    3b9a:	77 dd       	rcall	.-1298   	; 0x368a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    3b9c:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	99 81       	ldd	r25, Y+1	; 0x01
    3ba2:	99 23       	and	r25, r25
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	08 95       	ret

00003bb4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    3bba:	1f 92       	push	r1
    3bbc:	1f 92       	push	r1
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	7b 83       	std	Y+3, r23	; 0x03
    3bc6:	6a 83       	std	Y+2, r22	; 0x02
    3bc8:	5d 83       	std	Y+5, r21	; 0x05
    3bca:	4c 83       	std	Y+4, r20	; 0x04
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	88 2f       	mov	r24, r24
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	8d 5c       	subi	r24, 0xCD	; 205
    3bd4:	9b 4f       	sbci	r25, 0xFB	; 251
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	80 81       	ld	r24, Z
    3bda:	88 1f       	adc	r24, r24
    3bdc:	88 27       	eor	r24, r24
    3bde:	88 1f       	adc	r24, r24
    3be0:	88 23       	and	r24, r24
    3be2:	31 f0       	breq	.+12     	; 0x3bf0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    3be4:	8a 81       	ldd	r24, Y+2	; 0x02
    3be6:	9b 81       	ldd	r25, Y+3	; 0x03
    3be8:	fc 01       	movw	r30, r24
    3bea:	11 82       	std	Z+1, r1	; 0x01
    3bec:	10 82       	st	Z, r1
    3bee:	72 c0       	rjmp	.+228    	; 0x3cd4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	c9 01       	movw	r24, r18
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	82 0f       	add	r24, r18
    3bfe:	93 1f       	adc	r25, r19
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	9c 01       	movw	r18, r24
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	88 2f       	mov	r24, r24
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	8d 5c       	subi	r24, 0xCD	; 205
    3c12:	9b 4f       	sbci	r25, 0xFB	; 251
    3c14:	fc 01       	movw	r30, r24
    3c16:	80 81       	ld	r24, Z
    3c18:	08 2e       	mov	r0, r24
    3c1a:	00 0c       	add	r0, r0
    3c1c:	99 0b       	sbc	r25, r25
    3c1e:	28 0f       	add	r18, r24
    3c20:	39 1f       	adc	r19, r25
    3c22:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ServoCount>
    3c26:	88 2f       	mov	r24, r24
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	28 17       	cp	r18, r24
    3c2c:	39 07       	cpc	r19, r25
    3c2e:	4c f5       	brge	.+82     	; 0x3c82 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	28 2f       	mov	r18, r24
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	c9 01       	movw	r24, r18
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	82 0f       	add	r24, r18
    3c3e:	93 1f       	adc	r25, r19
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	88 0f       	add	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	9c 01       	movw	r18, r24
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	88 2f       	mov	r24, r24
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	8d 5c       	subi	r24, 0xCD	; 205
    3c52:	9b 4f       	sbci	r25, 0xFB	; 251
    3c54:	fc 01       	movw	r30, r24
    3c56:	80 81       	ld	r24, Z
    3c58:	08 2e       	mov	r0, r24
    3c5a:	00 0c       	add	r0, r0
    3c5c:	99 0b       	sbc	r25, r25
    3c5e:	28 0f       	add	r18, r24
    3c60:	39 1f       	adc	r19, r25
    3c62:	c9 01       	movw	r24, r18
    3c64:	88 0f       	add	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	82 0f       	add	r24, r18
    3c6a:	93 1f       	adc	r25, r19
    3c6c:	8d 55       	subi	r24, 0x5D	; 93
    3c6e:	9c 4f       	sbci	r25, 0xFC	; 252
    3c70:	fc 01       	movw	r30, r24
    3c72:	80 81       	ld	r24, Z
    3c74:	86 fb       	bst	r24, 6
    3c76:	88 27       	eor	r24, r24
    3c78:	80 f9       	bld	r24, 0
    3c7a:	81 30       	cpi	r24, 0x01	; 1
    3c7c:	11 f4       	brne	.+4      	; 0x3c82 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	01 c0       	rjmp	.+2      	; 0x3c84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	88 23       	and	r24, r24
    3c86:	31 f1       	breq	.+76     	; 0x3cd4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	28 2f       	mov	r18, r24
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	c9 01       	movw	r24, r18
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	82 0f       	add	r24, r18
    3c96:	93 1f       	adc	r25, r19
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	9c 01       	movw	r18, r24
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	88 2f       	mov	r24, r24
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	8d 5c       	subi	r24, 0xCD	; 205
    3caa:	9b 4f       	sbci	r25, 0xFB	; 251
    3cac:	fc 01       	movw	r30, r24
    3cae:	80 81       	ld	r24, Z
    3cb0:	08 2e       	mov	r0, r24
    3cb2:	00 0c       	add	r0, r0
    3cb4:	99 0b       	sbc	r25, r25
    3cb6:	28 0f       	add	r18, r24
    3cb8:	39 1f       	adc	r19, r25
    3cba:	c9 01       	movw	r24, r18
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	82 0f       	add	r24, r18
    3cc2:	93 1f       	adc	r25, r19
    3cc4:	8d 55       	subi	r24, 0x5D	; 93
    3cc6:	9c 4f       	sbci	r25, 0xFC	; 252
    3cc8:	fc 01       	movw	r30, r24
    3cca:	80 81       	ld	r24, Z
    3ccc:	8f 73       	andi	r24, 0x3F	; 63
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	88 2f       	mov	r24, r24
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	9c 01       	movw	r18, r24
    3cdc:	2d 5c       	subi	r18, 0xCD	; 205
    3cde:	3b 4f       	sbci	r19, 0xFB	; 251
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	20 81       	ld	r18, Z
    3ce4:	2f 5f       	subi	r18, 0xFF	; 255
    3ce6:	8d 5c       	subi	r24, 0xCD	; 205
    3ce8:	9b 4f       	sbci	r25, 0xFB	; 251
    3cea:	fc 01       	movw	r30, r24
    3cec:	20 83       	st	Z, r18
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	28 2f       	mov	r18, r24
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	c9 01       	movw	r24, r18
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	82 0f       	add	r24, r18
    3cfc:	93 1f       	adc	r25, r19
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	9c 01       	movw	r18, r24
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	88 2f       	mov	r24, r24
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	8d 5c       	subi	r24, 0xCD	; 205
    3d10:	9b 4f       	sbci	r25, 0xFB	; 251
    3d12:	fc 01       	movw	r30, r24
    3d14:	80 81       	ld	r24, Z
    3d16:	08 2e       	mov	r0, r24
    3d18:	00 0c       	add	r0, r0
    3d1a:	99 0b       	sbc	r25, r25
    3d1c:	28 0f       	add	r18, r24
    3d1e:	39 1f       	adc	r19, r25
    3d20:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ServoCount>
    3d24:	88 2f       	mov	r24, r24
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	28 17       	cp	r18, r24
    3d2a:	39 07       	cpc	r19, r25
    3d2c:	5c f4       	brge	.+22     	; 0x3d44 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	88 2f       	mov	r24, r24
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	8d 5c       	subi	r24, 0xCD	; 205
    3d36:	9b 4f       	sbci	r25, 0xFB	; 251
    3d38:	fc 01       	movw	r30, r24
    3d3a:	80 81       	ld	r24, Z
    3d3c:	8c 30       	cpi	r24, 0x0C	; 12
    3d3e:	14 f4       	brge	.+4      	; 0x3d44 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	01 c0       	rjmp	.+2      	; 0x3d46 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	88 23       	and	r24, r24
    3d48:	09 f4       	brne	.+2      	; 0x3d4c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    3d4a:	7f c0       	rjmp	.+254    	; 0x3e4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d50:	fc 01       	movw	r30, r24
    3d52:	40 81       	ld	r20, Z
    3d54:	51 81       	ldd	r21, Z+1	; 0x01
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	82 0f       	add	r24, r18
    3d64:	93 1f       	adc	r25, r19
    3d66:	88 0f       	add	r24, r24
    3d68:	99 1f       	adc	r25, r25
    3d6a:	88 0f       	add	r24, r24
    3d6c:	99 1f       	adc	r25, r25
    3d6e:	9c 01       	movw	r18, r24
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	88 2f       	mov	r24, r24
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	8d 5c       	subi	r24, 0xCD	; 205
    3d78:	9b 4f       	sbci	r25, 0xFB	; 251
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	80 81       	ld	r24, Z
    3d7e:	08 2e       	mov	r0, r24
    3d80:	00 0c       	add	r0, r0
    3d82:	99 0b       	sbc	r25, r25
    3d84:	28 0f       	add	r18, r24
    3d86:	39 1f       	adc	r19, r25
    3d88:	c9 01       	movw	r24, r18
    3d8a:	88 0f       	add	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	82 0f       	add	r24, r18
    3d90:	93 1f       	adc	r25, r19
    3d92:	8c 55       	subi	r24, 0x5C	; 92
    3d94:	9c 4f       	sbci	r25, 0xFC	; 252
    3d96:	fc 01       	movw	r30, r24
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	9a 01       	movw	r18, r20
    3d9e:	28 0f       	add	r18, r24
    3da0:	39 1f       	adc	r19, r25
    3da2:	8c 81       	ldd	r24, Y+4	; 0x04
    3da4:	9d 81       	ldd	r25, Y+5	; 0x05
    3da6:	fc 01       	movw	r30, r24
    3da8:	31 83       	std	Z+1, r19	; 0x01
    3daa:	20 83       	st	Z, r18
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	28 2f       	mov	r18, r24
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	c9 01       	movw	r24, r18
    3db4:	88 0f       	add	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	82 0f       	add	r24, r18
    3dba:	93 1f       	adc	r25, r19
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	9c 01       	movw	r18, r24
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	88 2f       	mov	r24, r24
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	8d 5c       	subi	r24, 0xCD	; 205
    3dce:	9b 4f       	sbci	r25, 0xFB	; 251
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	80 81       	ld	r24, Z
    3dd4:	08 2e       	mov	r0, r24
    3dd6:	00 0c       	add	r0, r0
    3dd8:	99 0b       	sbc	r25, r25
    3dda:	28 0f       	add	r18, r24
    3ddc:	39 1f       	adc	r19, r25
    3dde:	c9 01       	movw	r24, r18
    3de0:	88 0f       	add	r24, r24
    3de2:	99 1f       	adc	r25, r25
    3de4:	82 0f       	add	r24, r18
    3de6:	93 1f       	adc	r25, r19
    3de8:	8d 55       	subi	r24, 0x5D	; 93
    3dea:	9c 4f       	sbci	r25, 0xFC	; 252
    3dec:	fc 01       	movw	r30, r24
    3dee:	80 81       	ld	r24, Z
    3df0:	86 fb       	bst	r24, 6
    3df2:	88 27       	eor	r24, r24
    3df4:	80 f9       	bld	r24, 0
    3df6:	88 23       	and	r24, r24
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    3dfa:	51 c0       	rjmp	.+162    	; 0x3e9e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3dfc:	89 81       	ldd	r24, Y+1	; 0x01
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	c9 01       	movw	r24, r18
    3e04:	88 0f       	add	r24, r24
    3e06:	99 1f       	adc	r25, r25
    3e08:	82 0f       	add	r24, r18
    3e0a:	93 1f       	adc	r25, r19
    3e0c:	88 0f       	add	r24, r24
    3e0e:	99 1f       	adc	r25, r25
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	9c 01       	movw	r18, r24
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	88 2f       	mov	r24, r24
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	8d 5c       	subi	r24, 0xCD	; 205
    3e1e:	9b 4f       	sbci	r25, 0xFB	; 251
    3e20:	fc 01       	movw	r30, r24
    3e22:	80 81       	ld	r24, Z
    3e24:	08 2e       	mov	r0, r24
    3e26:	00 0c       	add	r0, r0
    3e28:	99 0b       	sbc	r25, r25
    3e2a:	28 0f       	add	r18, r24
    3e2c:	39 1f       	adc	r19, r25
    3e2e:	c9 01       	movw	r24, r18
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	82 0f       	add	r24, r18
    3e36:	93 1f       	adc	r25, r19
    3e38:	8d 55       	subi	r24, 0x5D	; 93
    3e3a:	9c 4f       	sbci	r25, 0xFC	; 252
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	80 81       	ld	r24, Z
    3e40:	8f 73       	andi	r24, 0x3F	; 63
    3e42:	61 e0       	ldi	r22, 0x01	; 1
    3e44:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    3e48:	2a c0       	rjmp	.+84     	; 0x3e9e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4e:	fc 01       	movw	r30, r24
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	04 96       	adiw	r24, 0x04	; 4
    3e56:	21 e0       	ldi	r18, 0x01	; 1
    3e58:	80 34       	cpi	r24, 0x40	; 64
    3e5a:	9c 49       	sbci	r25, 0x9C	; 156
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	22 23       	and	r18, r18
    3e62:	41 f0       	breq	.+16     	; 0x3e74 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3e64:	8c 81       	ldd	r24, Y+4	; 0x04
    3e66:	9d 81       	ldd	r25, Y+5	; 0x05
    3e68:	20 e4       	ldi	r18, 0x40	; 64
    3e6a:	3c e9       	ldi	r19, 0x9C	; 156
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	31 83       	std	Z+1, r19	; 0x01
    3e70:	20 83       	st	Z, r18
    3e72:	0d c0       	rjmp	.+26     	; 0x3e8e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	9b 81       	ldd	r25, Y+3	; 0x03
    3e78:	fc 01       	movw	r30, r24
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	9c 01       	movw	r18, r24
    3e80:	2c 5f       	subi	r18, 0xFC	; 252
    3e82:	3f 4f       	sbci	r19, 0xFF	; 255
    3e84:	8c 81       	ldd	r24, Y+4	; 0x04
    3e86:	9d 81       	ldd	r25, Y+5	; 0x05
    3e88:	fc 01       	movw	r30, r24
    3e8a:	31 83       	std	Z+1, r19	; 0x01
    3e8c:	20 83       	st	Z, r18
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	88 2f       	mov	r24, r24
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	8d 5c       	subi	r24, 0xCD	; 205
    3e96:	9b 4f       	sbci	r25, 0xFB	; 251
    3e98:	2f ef       	ldi	r18, 0xFF	; 255
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	20 83       	st	Z, r18
    3e9e:	00 00       	nop
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
    3eaa:	df 91       	pop	r29
    3eac:	cf 91       	pop	r28
    3eae:	08 95       	ret

00003eb0 <__vector_17>:
    3eb0:	1f 92       	push	r1
    3eb2:	0f 92       	push	r0
    3eb4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3eb8:	0f 92       	push	r0
    3eba:	11 24       	eor	r1, r1
    3ebc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3ec0:	0f 92       	push	r0
    3ec2:	2f 93       	push	r18
    3ec4:	3f 93       	push	r19
    3ec6:	4f 93       	push	r20
    3ec8:	5f 93       	push	r21
    3eca:	6f 93       	push	r22
    3ecc:	7f 93       	push	r23
    3ece:	8f 93       	push	r24
    3ed0:	9f 93       	push	r25
    3ed2:	af 93       	push	r26
    3ed4:	bf 93       	push	r27
    3ed6:	ef 93       	push	r30
    3ed8:	ff 93       	push	r31
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	cd b7       	in	r28, 0x3d	; 61
    3ee0:	de b7       	in	r29, 0x3e	; 62
    3ee2:	48 e8       	ldi	r20, 0x88	; 136
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	64 e8       	ldi	r22, 0x84	; 132
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	63 de       	rcall	.-826    	; 0x3bb4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3eee:	00 00       	nop
    3ef0:	df 91       	pop	r29
    3ef2:	cf 91       	pop	r28
    3ef4:	ff 91       	pop	r31
    3ef6:	ef 91       	pop	r30
    3ef8:	bf 91       	pop	r27
    3efa:	af 91       	pop	r26
    3efc:	9f 91       	pop	r25
    3efe:	8f 91       	pop	r24
    3f00:	7f 91       	pop	r23
    3f02:	6f 91       	pop	r22
    3f04:	5f 91       	pop	r21
    3f06:	4f 91       	pop	r20
    3f08:	3f 91       	pop	r19
    3f0a:	2f 91       	pop	r18
    3f0c:	0f 90       	pop	r0
    3f0e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f12:	0f 90       	pop	r0
    3f14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f18:	0f 90       	pop	r0
    3f1a:	1f 90       	pop	r1
    3f1c:	18 95       	reti

00003f1e <__vector_32>:
    3f1e:	1f 92       	push	r1
    3f20:	0f 92       	push	r0
    3f22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f26:	0f 92       	push	r0
    3f28:	11 24       	eor	r1, r1
    3f2a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f2e:	0f 92       	push	r0
    3f30:	2f 93       	push	r18
    3f32:	3f 93       	push	r19
    3f34:	4f 93       	push	r20
    3f36:	5f 93       	push	r21
    3f38:	6f 93       	push	r22
    3f3a:	7f 93       	push	r23
    3f3c:	8f 93       	push	r24
    3f3e:	9f 93       	push	r25
    3f40:	af 93       	push	r26
    3f42:	bf 93       	push	r27
    3f44:	ef 93       	push	r30
    3f46:	ff 93       	push	r31
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	48 e9       	ldi	r20, 0x98	; 152
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	64 e9       	ldi	r22, 0x94	; 148
    3f56:	70 e0       	ldi	r23, 0x00	; 0
    3f58:	82 e0       	ldi	r24, 0x02	; 2
    3f5a:	2c de       	rcall	.-936    	; 0x3bb4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3f5c:	00 00       	nop
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	ff 91       	pop	r31
    3f64:	ef 91       	pop	r30
    3f66:	bf 91       	pop	r27
    3f68:	af 91       	pop	r26
    3f6a:	9f 91       	pop	r25
    3f6c:	8f 91       	pop	r24
    3f6e:	7f 91       	pop	r23
    3f70:	6f 91       	pop	r22
    3f72:	5f 91       	pop	r21
    3f74:	4f 91       	pop	r20
    3f76:	3f 91       	pop	r19
    3f78:	2f 91       	pop	r18
    3f7a:	0f 90       	pop	r0
    3f7c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f80:	0f 90       	pop	r0
    3f82:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f86:	0f 90       	pop	r0
    3f88:	1f 90       	pop	r1
    3f8a:	18 95       	reti

00003f8c <__vector_42>:
    3f8c:	1f 92       	push	r1
    3f8e:	0f 92       	push	r0
    3f90:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f94:	0f 92       	push	r0
    3f96:	11 24       	eor	r1, r1
    3f98:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f9c:	0f 92       	push	r0
    3f9e:	2f 93       	push	r18
    3fa0:	3f 93       	push	r19
    3fa2:	4f 93       	push	r20
    3fa4:	5f 93       	push	r21
    3fa6:	6f 93       	push	r22
    3fa8:	7f 93       	push	r23
    3faa:	8f 93       	push	r24
    3fac:	9f 93       	push	r25
    3fae:	af 93       	push	r26
    3fb0:	bf 93       	push	r27
    3fb2:	ef 93       	push	r30
    3fb4:	ff 93       	push	r31
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	48 ea       	ldi	r20, 0xA8	; 168
    3fc0:	50 e0       	ldi	r21, 0x00	; 0
    3fc2:	64 ea       	ldi	r22, 0xA4	; 164
    3fc4:	70 e0       	ldi	r23, 0x00	; 0
    3fc6:	83 e0       	ldi	r24, 0x03	; 3
    3fc8:	f5 dd       	rcall	.-1046   	; 0x3bb4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3fca:	00 00       	nop
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	ff 91       	pop	r31
    3fd2:	ef 91       	pop	r30
    3fd4:	bf 91       	pop	r27
    3fd6:	af 91       	pop	r26
    3fd8:	9f 91       	pop	r25
    3fda:	8f 91       	pop	r24
    3fdc:	7f 91       	pop	r23
    3fde:	6f 91       	pop	r22
    3fe0:	5f 91       	pop	r21
    3fe2:	4f 91       	pop	r20
    3fe4:	3f 91       	pop	r19
    3fe6:	2f 91       	pop	r18
    3fe8:	0f 90       	pop	r0
    3fea:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3fee:	0f 90       	pop	r0
    3ff0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3ff4:	0f 90       	pop	r0
    3ff6:	1f 90       	pop	r1
    3ff8:	18 95       	reti

00003ffa <__vector_47>:
    3ffa:	1f 92       	push	r1
    3ffc:	0f 92       	push	r0
    3ffe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    4002:	0f 92       	push	r0
    4004:	11 24       	eor	r1, r1
    4006:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    400a:	0f 92       	push	r0
    400c:	2f 93       	push	r18
    400e:	3f 93       	push	r19
    4010:	4f 93       	push	r20
    4012:	5f 93       	push	r21
    4014:	6f 93       	push	r22
    4016:	7f 93       	push	r23
    4018:	8f 93       	push	r24
    401a:	9f 93       	push	r25
    401c:	af 93       	push	r26
    401e:	bf 93       	push	r27
    4020:	ef 93       	push	r30
    4022:	ff 93       	push	r31
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	48 e2       	ldi	r20, 0x28	; 40
    402e:	51 e0       	ldi	r21, 0x01	; 1
    4030:	64 e2       	ldi	r22, 0x24	; 36
    4032:	71 e0       	ldi	r23, 0x01	; 1
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	be dd       	rcall	.-1156   	; 0x3bb4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4038:	00 00       	nop
    403a:	df 91       	pop	r29
    403c:	cf 91       	pop	r28
    403e:	ff 91       	pop	r31
    4040:	ef 91       	pop	r30
    4042:	bf 91       	pop	r27
    4044:	af 91       	pop	r26
    4046:	9f 91       	pop	r25
    4048:	8f 91       	pop	r24
    404a:	7f 91       	pop	r23
    404c:	6f 91       	pop	r22
    404e:	5f 91       	pop	r21
    4050:	4f 91       	pop	r20
    4052:	3f 91       	pop	r19
    4054:	2f 91       	pop	r18
    4056:	0f 90       	pop	r0
    4058:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    405c:	0f 90       	pop	r0
    405e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    4062:	0f 90       	pop	r0
    4064:	1f 90       	pop	r1
    4066:	18 95       	reti

00004068 <_ZL7initISR18timer16_Sequence_t>:
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	1f 92       	push	r1
    406e:	cd b7       	in	r28, 0x3d	; 61
    4070:	de b7       	in	r29, 0x3e	; 62
    4072:	89 83       	std	Y+1, r24	; 0x01
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	81 30       	cpi	r24, 0x01	; 1
    4078:	01 f5       	brne	.+64     	; 0x40ba <_ZL7initISR18timer16_Sequence_t+0x52>
    407a:	80 e8       	ldi	r24, 0x80	; 128
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	fc 01       	movw	r30, r24
    4080:	10 82       	st	Z, r1
    4082:	81 e8       	ldi	r24, 0x81	; 129
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	22 e0       	ldi	r18, 0x02	; 2
    4088:	fc 01       	movw	r30, r24
    408a:	20 83       	st	Z, r18
    408c:	84 e8       	ldi	r24, 0x84	; 132
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	fc 01       	movw	r30, r24
    4092:	11 82       	std	Z+1, r1	; 0x01
    4094:	10 82       	st	Z, r1
    4096:	86 e3       	ldi	r24, 0x36	; 54
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	26 e3       	ldi	r18, 0x36	; 54
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	f9 01       	movw	r30, r18
    40a0:	20 81       	ld	r18, Z
    40a2:	22 60       	ori	r18, 0x02	; 2
    40a4:	fc 01       	movw	r30, r24
    40a6:	20 83       	st	Z, r18
    40a8:	8f e6       	ldi	r24, 0x6F	; 111
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	2f e6       	ldi	r18, 0x6F	; 111
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	f9 01       	movw	r30, r18
    40b2:	20 81       	ld	r18, Z
    40b4:	22 60       	ori	r18, 0x02	; 2
    40b6:	fc 01       	movw	r30, r24
    40b8:	20 83       	st	Z, r18
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	82 30       	cpi	r24, 0x02	; 2
    40be:	c1 f4       	brne	.+48     	; 0x40f0 <_ZL7initISR18timer16_Sequence_t+0x88>
    40c0:	80 e9       	ldi	r24, 0x90	; 144
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	fc 01       	movw	r30, r24
    40c6:	10 82       	st	Z, r1
    40c8:	81 e9       	ldi	r24, 0x91	; 145
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	22 e0       	ldi	r18, 0x02	; 2
    40ce:	fc 01       	movw	r30, r24
    40d0:	20 83       	st	Z, r18
    40d2:	84 e9       	ldi	r24, 0x94	; 148
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	fc 01       	movw	r30, r24
    40d8:	11 82       	std	Z+1, r1	; 0x01
    40da:	10 82       	st	Z, r1
    40dc:	88 e3       	ldi	r24, 0x38	; 56
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	22 e0       	ldi	r18, 0x02	; 2
    40e2:	fc 01       	movw	r30, r24
    40e4:	20 83       	st	Z, r18
    40e6:	81 e7       	ldi	r24, 0x71	; 113
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	22 e0       	ldi	r18, 0x02	; 2
    40ec:	fc 01       	movw	r30, r24
    40ee:	20 83       	st	Z, r18
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	83 30       	cpi	r24, 0x03	; 3
    40f4:	c1 f4       	brne	.+48     	; 0x4126 <_ZL7initISR18timer16_Sequence_t+0xbe>
    40f6:	80 ea       	ldi	r24, 0xA0	; 160
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	fc 01       	movw	r30, r24
    40fc:	10 82       	st	Z, r1
    40fe:	81 ea       	ldi	r24, 0xA1	; 161
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	22 e0       	ldi	r18, 0x02	; 2
    4104:	fc 01       	movw	r30, r24
    4106:	20 83       	st	Z, r18
    4108:	84 ea       	ldi	r24, 0xA4	; 164
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	fc 01       	movw	r30, r24
    410e:	11 82       	std	Z+1, r1	; 0x01
    4110:	10 82       	st	Z, r1
    4112:	89 e3       	ldi	r24, 0x39	; 57
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	22 e0       	ldi	r18, 0x02	; 2
    4118:	fc 01       	movw	r30, r24
    411a:	20 83       	st	Z, r18
    411c:	82 e7       	ldi	r24, 0x72	; 114
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	22 e0       	ldi	r18, 0x02	; 2
    4122:	fc 01       	movw	r30, r24
    4124:	20 83       	st	Z, r18
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	88 23       	and	r24, r24
    412a:	c1 f4       	brne	.+48     	; 0x415c <_ZL7initISR18timer16_Sequence_t+0xf4>
    412c:	80 e2       	ldi	r24, 0x20	; 32
    412e:	91 e0       	ldi	r25, 0x01	; 1
    4130:	fc 01       	movw	r30, r24
    4132:	10 82       	st	Z, r1
    4134:	81 e2       	ldi	r24, 0x21	; 33
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	22 e0       	ldi	r18, 0x02	; 2
    413a:	fc 01       	movw	r30, r24
    413c:	20 83       	st	Z, r18
    413e:	84 e2       	ldi	r24, 0x24	; 36
    4140:	91 e0       	ldi	r25, 0x01	; 1
    4142:	fc 01       	movw	r30, r24
    4144:	11 82       	std	Z+1, r1	; 0x01
    4146:	10 82       	st	Z, r1
    4148:	8a e3       	ldi	r24, 0x3A	; 58
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	22 e0       	ldi	r18, 0x02	; 2
    414e:	fc 01       	movw	r30, r24
    4150:	20 83       	st	Z, r18
    4152:	83 e7       	ldi	r24, 0x73	; 115
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	22 e0       	ldi	r18, 0x02	; 2
    4158:	fc 01       	movw	r30, r24
    415a:	20 83       	st	Z, r18
    415c:	00 00       	nop
    415e:	0f 90       	pop	r0
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	08 95       	ret

00004166 <_ZL13isTimerActive18timer16_Sequence_t>:
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
    416a:	1f 92       	push	r1
    416c:	1f 92       	push	r1
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	8a 83       	std	Y+2, r24	; 0x02
    4174:	19 82       	std	Y+1, r1	; 0x01
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	8c 30       	cpi	r24, 0x0C	; 12
    417a:	30 f5       	brcc	.+76     	; 0x41c8 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    417c:	8a 81       	ldd	r24, Y+2	; 0x02
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	c9 01       	movw	r24, r18
    4184:	88 0f       	add	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	82 0f       	add	r24, r18
    418a:	93 1f       	adc	r25, r19
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	9c 01       	movw	r18, r24
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	88 2f       	mov	r24, r24
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	28 0f       	add	r18, r24
    419e:	39 1f       	adc	r19, r25
    41a0:	c9 01       	movw	r24, r18
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	82 0f       	add	r24, r18
    41a8:	93 1f       	adc	r25, r19
    41aa:	8d 55       	subi	r24, 0x5D	; 93
    41ac:	9c 4f       	sbci	r25, 0xFC	; 252
    41ae:	fc 01       	movw	r30, r24
    41b0:	80 81       	ld	r24, Z
    41b2:	86 fb       	bst	r24, 6
    41b4:	88 27       	eor	r24, r24
    41b6:	80 f9       	bld	r24, 0
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	11 f4       	brne	.+4      	; 0x41c0 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	05 c0       	rjmp	.+10     	; 0x41ca <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	8f 5f       	subi	r24, 0xFF	; 255
    41c4:	89 83       	std	Y+1, r24	; 0x01
    41c6:	d7 cf       	rjmp	.-82     	; 0x4176 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	08 95       	ret

000041d4 <_ZN5ServoC1Ev>:
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	1f 92       	push	r1
    41da:	1f 92       	push	r1
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	9a 83       	std	Y+2, r25	; 0x02
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ServoCount>
    41e8:	80 33       	cpi	r24, 0x30	; 48
    41ea:	e8 f4       	brcc	.+58     	; 0x4226 <_ZN5ServoC1Ev+0x52>
    41ec:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <ServoCount>
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	82 0f       	add	r24, r18
    41f4:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <ServoCount>
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	9a 81       	ldd	r25, Y+2	; 0x02
    41fc:	fc 01       	movw	r30, r24
    41fe:	20 83       	st	Z, r18
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	fc 01       	movw	r30, r24
    4206:	80 81       	ld	r24, Z
    4208:	28 2f       	mov	r18, r24
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	c9 01       	movw	r24, r18
    420e:	88 0f       	add	r24, r24
    4210:	99 1f       	adc	r25, r25
    4212:	82 0f       	add	r24, r18
    4214:	93 1f       	adc	r25, r19
    4216:	8c 55       	subi	r24, 0x5C	; 92
    4218:	9c 4f       	sbci	r25, 0xFC	; 252
    421a:	28 eb       	ldi	r18, 0xB8	; 184
    421c:	3b e0       	ldi	r19, 0x0B	; 11
    421e:	fc 01       	movw	r30, r24
    4220:	31 83       	std	Z+1, r19	; 0x01
    4222:	20 83       	st	Z, r18
    4224:	05 c0       	rjmp	.+10     	; 0x4230 <_ZN5ServoC1Ev+0x5c>
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	9a 81       	ldd	r25, Y+2	; 0x02
    422a:	2f ef       	ldi	r18, 0xFF	; 255
    422c:	fc 01       	movw	r30, r24
    422e:	20 83       	st	Z, r18
    4230:	00 00       	nop
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	08 95       	ret

0000423c <_ZN5Servo6attachEi>:
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
    4240:	00 d0       	rcall	.+0      	; 0x4242 <_ZN5Servo6attachEi+0x6>
    4242:	1f 92       	push	r1
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	9a 83       	std	Y+2, r25	; 0x02
    424a:	89 83       	std	Y+1, r24	; 0x01
    424c:	7c 83       	std	Y+4, r23	; 0x04
    424e:	6b 83       	std	Y+3, r22	; 0x03
    4250:	6b 81       	ldd	r22, Y+3	; 0x03
    4252:	7c 81       	ldd	r23, Y+4	; 0x04
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	9a 81       	ldd	r25, Y+2	; 0x02
    4258:	20 e6       	ldi	r18, 0x60	; 96
    425a:	39 e0       	ldi	r19, 0x09	; 9
    425c:	40 e2       	ldi	r20, 0x20	; 32
    425e:	52 e0       	ldi	r21, 0x02	; 2
    4260:	07 d0       	rcall	.+14     	; 0x4270 <_ZN5Servo6attachEiii>
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	df 91       	pop	r29
    426c:	cf 91       	pop	r28
    426e:	08 95       	ret

00004270 <_ZN5Servo6attachEiii>:
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
    4278:	29 97       	sbiw	r28, 0x09	; 9
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	f8 94       	cli
    427e:	de bf       	out	0x3e, r29	; 62
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	cd bf       	out	0x3d, r28	; 61
    4284:	9b 83       	std	Y+3, r25	; 0x03
    4286:	8a 83       	std	Y+2, r24	; 0x02
    4288:	7d 83       	std	Y+5, r23	; 0x05
    428a:	6c 83       	std	Y+4, r22	; 0x04
    428c:	5f 83       	std	Y+7, r21	; 0x07
    428e:	4e 83       	std	Y+6, r20	; 0x06
    4290:	39 87       	std	Y+9, r19	; 0x09
    4292:	28 87       	std	Y+8, r18	; 0x08
    4294:	8a 81       	ldd	r24, Y+2	; 0x02
    4296:	9b 81       	ldd	r25, Y+3	; 0x03
    4298:	fc 01       	movw	r30, r24
    429a:	80 81       	ld	r24, Z
    429c:	80 33       	cpi	r24, 0x30	; 48
    429e:	08 f0       	brcs	.+2      	; 0x42a2 <_ZN5Servo6attachEiii+0x32>
    42a0:	6b c0       	rjmp	.+214    	; 0x4378 <_ZN5Servo6attachEiii+0x108>
    42a2:	8c 81       	ldd	r24, Y+4	; 0x04
    42a4:	61 e0       	ldi	r22, 0x01	; 1
    42a6:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
    42aa:	8a 81       	ldd	r24, Y+2	; 0x02
    42ac:	9b 81       	ldd	r25, Y+3	; 0x03
    42ae:	fc 01       	movw	r30, r24
    42b0:	80 81       	ld	r24, Z
    42b2:	28 2f       	mov	r18, r24
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	8c 81       	ldd	r24, Y+4	; 0x04
    42b8:	48 2f       	mov	r20, r24
    42ba:	4f 73       	andi	r20, 0x3F	; 63
    42bc:	c9 01       	movw	r24, r18
    42be:	88 0f       	add	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	82 0f       	add	r24, r18
    42c4:	93 1f       	adc	r25, r19
    42c6:	8d 55       	subi	r24, 0x5D	; 93
    42c8:	9c 4f       	sbci	r25, 0xFC	; 252
    42ca:	24 2f       	mov	r18, r20
    42cc:	2f 73       	andi	r18, 0x3F	; 63
    42ce:	fc 01       	movw	r30, r24
    42d0:	30 81       	ld	r19, Z
    42d2:	30 7c       	andi	r19, 0xC0	; 192
    42d4:	23 2b       	or	r18, r19
    42d6:	fc 01       	movw	r30, r24
    42d8:	20 83       	st	Z, r18
    42da:	20 e2       	ldi	r18, 0x20	; 32
    42dc:	32 e0       	ldi	r19, 0x02	; 2
    42de:	8e 81       	ldd	r24, Y+6	; 0x06
    42e0:	9f 81       	ldd	r25, Y+7	; 0x07
    42e2:	a9 01       	movw	r20, r18
    42e4:	48 1b       	sub	r20, r24
    42e6:	59 0b       	sbc	r21, r25
    42e8:	ca 01       	movw	r24, r20
    42ea:	99 23       	and	r25, r25
    42ec:	0c f4       	brge	.+2      	; 0x42f0 <_ZN5Servo6attachEiii+0x80>
    42ee:	03 96       	adiw	r24, 0x03	; 3
    42f0:	95 95       	asr	r25
    42f2:	87 95       	ror	r24
    42f4:	95 95       	asr	r25
    42f6:	87 95       	ror	r24
    42f8:	28 2f       	mov	r18, r24
    42fa:	8a 81       	ldd	r24, Y+2	; 0x02
    42fc:	9b 81       	ldd	r25, Y+3	; 0x03
    42fe:	fc 01       	movw	r30, r24
    4300:	21 83       	std	Z+1, r18	; 0x01
    4302:	20 e6       	ldi	r18, 0x60	; 96
    4304:	39 e0       	ldi	r19, 0x09	; 9
    4306:	88 85       	ldd	r24, Y+8	; 0x08
    4308:	99 85       	ldd	r25, Y+9	; 0x09
    430a:	a9 01       	movw	r20, r18
    430c:	48 1b       	sub	r20, r24
    430e:	59 0b       	sbc	r21, r25
    4310:	ca 01       	movw	r24, r20
    4312:	99 23       	and	r25, r25
    4314:	0c f4       	brge	.+2      	; 0x4318 <_ZN5Servo6attachEiii+0xa8>
    4316:	03 96       	adiw	r24, 0x03	; 3
    4318:	95 95       	asr	r25
    431a:	87 95       	ror	r24
    431c:	95 95       	asr	r25
    431e:	87 95       	ror	r24
    4320:	28 2f       	mov	r18, r24
    4322:	8a 81       	ldd	r24, Y+2	; 0x02
    4324:	9b 81       	ldd	r25, Y+3	; 0x03
    4326:	fc 01       	movw	r30, r24
    4328:	22 83       	std	Z+2, r18	; 0x02
    432a:	8a 81       	ldd	r24, Y+2	; 0x02
    432c:	9b 81       	ldd	r25, Y+3	; 0x03
    432e:	fc 01       	movw	r30, r24
    4330:	90 81       	ld	r25, Z
    4332:	8b ea       	ldi	r24, 0xAB	; 171
    4334:	98 9f       	mul	r25, r24
    4336:	81 2d       	mov	r24, r1
    4338:	11 24       	eor	r1, r1
    433a:	86 95       	lsr	r24
    433c:	86 95       	lsr	r24
    433e:	86 95       	lsr	r24
    4340:	89 83       	std	Y+1, r24	; 0x01
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	10 df       	rcall	.-480    	; 0x4166 <_ZL13isTimerActive18timer16_Sequence_t>
    4346:	98 2f       	mov	r25, r24
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	89 27       	eor	r24, r25
    434c:	88 23       	and	r24, r24
    434e:	11 f0       	breq	.+4      	; 0x4354 <_ZN5Servo6attachEiii+0xe4>
    4350:	89 81       	ldd	r24, Y+1	; 0x01
    4352:	8a de       	rcall	.-748    	; 0x4068 <_ZL7initISR18timer16_Sequence_t>
    4354:	8a 81       	ldd	r24, Y+2	; 0x02
    4356:	9b 81       	ldd	r25, Y+3	; 0x03
    4358:	fc 01       	movw	r30, r24
    435a:	80 81       	ld	r24, Z
    435c:	28 2f       	mov	r18, r24
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	c9 01       	movw	r24, r18
    4362:	88 0f       	add	r24, r24
    4364:	99 1f       	adc	r25, r25
    4366:	82 0f       	add	r24, r18
    4368:	93 1f       	adc	r25, r19
    436a:	8d 55       	subi	r24, 0x5D	; 93
    436c:	9c 4f       	sbci	r25, 0xFC	; 252
    436e:	fc 01       	movw	r30, r24
    4370:	20 81       	ld	r18, Z
    4372:	20 64       	ori	r18, 0x40	; 64
    4374:	fc 01       	movw	r30, r24
    4376:	20 83       	st	Z, r18
    4378:	8a 81       	ldd	r24, Y+2	; 0x02
    437a:	9b 81       	ldd	r25, Y+3	; 0x03
    437c:	fc 01       	movw	r30, r24
    437e:	80 81       	ld	r24, Z
    4380:	29 96       	adiw	r28, 0x09	; 9
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	cd bf       	out	0x3d, r28	; 61
    438c:	df 91       	pop	r29
    438e:	cf 91       	pop	r28
    4390:	08 95       	ret

00004392 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    4392:	6f 92       	push	r6
    4394:	7f 92       	push	r7
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	00 d0       	rcall	.+0      	; 0x43b0 <_ZN5Servo5writeEi+0x1e>
    43b0:	1f 92       	push	r1
    43b2:	cd b7       	in	r28, 0x3d	; 61
    43b4:	de b7       	in	r29, 0x3e	; 62
    43b6:	9a 83       	std	Y+2, r25	; 0x02
    43b8:	89 83       	std	Y+1, r24	; 0x01
    43ba:	7c 83       	std	Y+4, r23	; 0x04
    43bc:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    43be:	8b 81       	ldd	r24, Y+3	; 0x03
    43c0:	9c 81       	ldd	r25, Y+4	; 0x04
    43c2:	80 32       	cpi	r24, 0x20	; 32
    43c4:	92 40       	sbci	r25, 0x02	; 2
    43c6:	0c f0       	brlt	.+2      	; 0x43ca <_ZN5Servo5writeEi+0x38>
    43c8:	5c c0       	rjmp	.+184    	; 0x4482 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    43ca:	8b 81       	ldd	r24, Y+3	; 0x03
    43cc:	9c 81       	ldd	r25, Y+4	; 0x04
    43ce:	99 23       	and	r25, r25
    43d0:	14 f4       	brge	.+4      	; 0x43d6 <_ZN5Servo5writeEi+0x44>
    43d2:	1c 82       	std	Y+4, r1	; 0x04
    43d4:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    43d6:	8b 81       	ldd	r24, Y+3	; 0x03
    43d8:	9c 81       	ldd	r25, Y+4	; 0x04
    43da:	85 3b       	cpi	r24, 0xB5	; 181
    43dc:	91 05       	cpc	r25, r1
    43de:	24 f0       	brlt	.+8      	; 0x43e8 <_ZN5Servo5writeEi+0x56>
    43e0:	84 eb       	ldi	r24, 0xB4	; 180
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	9c 83       	std	Y+4, r25	; 0x04
    43e6:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	9a 81       	ldd	r25, Y+2	; 0x02
    43ec:	fc 01       	movw	r30, r24
    43ee:	82 81       	ldd	r24, Z+2	; 0x02
    43f0:	08 2e       	mov	r0, r24
    43f2:	00 0c       	add	r0, r0
    43f4:	99 0b       	sbc	r25, r25
    43f6:	28 e5       	ldi	r18, 0x58	; 88
    43f8:	32 e0       	ldi	r19, 0x02	; 2
    43fa:	a9 01       	movw	r20, r18
    43fc:	48 1b       	sub	r20, r24
    43fe:	59 0b       	sbc	r21, r25
    4400:	ca 01       	movw	r24, r20
    4402:	88 0f       	add	r24, r24
    4404:	99 1f       	adc	r25, r25
    4406:	88 0f       	add	r24, r24
    4408:	99 1f       	adc	r25, r25
    440a:	09 2e       	mov	r0, r25
    440c:	00 0c       	add	r0, r0
    440e:	aa 0b       	sbc	r26, r26
    4410:	bb 0b       	sbc	r27, r27
    4412:	29 81       	ldd	r18, Y+1	; 0x01
    4414:	3a 81       	ldd	r19, Y+2	; 0x02
    4416:	f9 01       	movw	r30, r18
    4418:	21 81       	ldd	r18, Z+1	; 0x01
    441a:	02 2e       	mov	r0, r18
    441c:	00 0c       	add	r0, r0
    441e:	33 0b       	sbc	r19, r19
    4420:	48 e8       	ldi	r20, 0x88	; 136
    4422:	50 e0       	ldi	r21, 0x00	; 0
    4424:	ba 01       	movw	r22, r20
    4426:	62 1b       	sub	r22, r18
    4428:	73 0b       	sbc	r23, r19
    442a:	9b 01       	movw	r18, r22
    442c:	22 0f       	add	r18, r18
    442e:	33 1f       	adc	r19, r19
    4430:	22 0f       	add	r18, r18
    4432:	33 1f       	adc	r19, r19
    4434:	03 2e       	mov	r0, r19
    4436:	00 0c       	add	r0, r0
    4438:	44 0b       	sbc	r20, r20
    443a:	55 0b       	sbc	r21, r21
    443c:	6b 81       	ldd	r22, Y+3	; 0x03
    443e:	7c 81       	ldd	r23, Y+4	; 0x04
    4440:	3b 01       	movw	r6, r22
    4442:	77 0f       	add	r23, r23
    4444:	88 08       	sbc	r8, r8
    4446:	99 08       	sbc	r9, r9
    4448:	6b 2f       	mov	r22, r27
    444a:	6f 93       	push	r22
    444c:	6a 2f       	mov	r22, r26
    444e:	6f 93       	push	r22
    4450:	69 2f       	mov	r22, r25
    4452:	6f 93       	push	r22
    4454:	8f 93       	push	r24
    4456:	59 01       	movw	r10, r18
    4458:	6a 01       	movw	r12, r20
    445a:	14 eb       	ldi	r17, 0xB4	; 180
    445c:	e1 2e       	mov	r14, r17
    445e:	f1 2c       	mov	r15, r1
    4460:	00 e0       	ldi	r16, 0x00	; 0
    4462:	10 e0       	ldi	r17, 0x00	; 0
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	a9 01       	movw	r20, r18
    446a:	c4 01       	movw	r24, r8
    446c:	b3 01       	movw	r22, r6
    446e:	0e 94 c9 31 	call	0x6392	; 0x6392 <_Z3maplllll>
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	9c 83       	std	Y+4, r25	; 0x04
    4480:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    4482:	2b 81       	ldd	r18, Y+3	; 0x03
    4484:	3c 81       	ldd	r19, Y+4	; 0x04
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	9a 81       	ldd	r25, Y+2	; 0x02
    448a:	b9 01       	movw	r22, r18
    448c:	14 d0       	rcall	.+40     	; 0x44b6 <_ZN5Servo17writeMicrosecondsEi>
}
    448e:	00 00       	nop
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	df 91       	pop	r29
    449a:	cf 91       	pop	r28
    449c:	1f 91       	pop	r17
    449e:	0f 91       	pop	r16
    44a0:	ff 90       	pop	r15
    44a2:	ef 90       	pop	r14
    44a4:	df 90       	pop	r13
    44a6:	cf 90       	pop	r12
    44a8:	bf 90       	pop	r11
    44aa:	af 90       	pop	r10
    44ac:	9f 90       	pop	r9
    44ae:	8f 90       	pop	r8
    44b0:	7f 90       	pop	r7
    44b2:	6f 90       	pop	r6
    44b4:	08 95       	ret

000044b6 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    44b6:	cf 93       	push	r28
    44b8:	df 93       	push	r29
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <_ZN5Servo17writeMicrosecondsEi+0x6>
    44bc:	00 d0       	rcall	.+0      	; 0x44be <_ZN5Servo17writeMicrosecondsEi+0x8>
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	9c 83       	std	Y+4, r25	; 0x04
    44c4:	8b 83       	std	Y+3, r24	; 0x03
    44c6:	7e 83       	std	Y+6, r23	; 0x06
    44c8:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    44ca:	8b 81       	ldd	r24, Y+3	; 0x03
    44cc:	9c 81       	ldd	r25, Y+4	; 0x04
    44ce:	fc 01       	movw	r30, r24
    44d0:	80 81       	ld	r24, Z
    44d2:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	80 33       	cpi	r24, 0x30	; 48
    44d8:	08 f0       	brcs	.+2      	; 0x44dc <_ZN5Servo17writeMicrosecondsEi+0x26>
    44da:	99 c0       	rjmp	.+306    	; 0x460e <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    44dc:	8b 81       	ldd	r24, Y+3	; 0x03
    44de:	9c 81       	ldd	r25, Y+4	; 0x04
    44e0:	fc 01       	movw	r30, r24
    44e2:	81 81       	ldd	r24, Z+1	; 0x01
    44e4:	08 2e       	mov	r0, r24
    44e6:	00 0c       	add	r0, r0
    44e8:	99 0b       	sbc	r25, r25
    44ea:	28 e8       	ldi	r18, 0x88	; 136
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	a9 01       	movw	r20, r18
    44f0:	48 1b       	sub	r20, r24
    44f2:	59 0b       	sbc	r21, r25
    44f4:	ca 01       	movw	r24, r20
    44f6:	9c 01       	movw	r18, r24
    44f8:	22 0f       	add	r18, r18
    44fa:	33 1f       	adc	r19, r19
    44fc:	22 0f       	add	r18, r18
    44fe:	33 1f       	adc	r19, r19
    4500:	8d 81       	ldd	r24, Y+5	; 0x05
    4502:	9e 81       	ldd	r25, Y+6	; 0x06
    4504:	82 17       	cp	r24, r18
    4506:	93 07       	cpc	r25, r19
    4508:	a4 f4       	brge	.+40     	; 0x4532 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    450a:	8b 81       	ldd	r24, Y+3	; 0x03
    450c:	9c 81       	ldd	r25, Y+4	; 0x04
    450e:	fc 01       	movw	r30, r24
    4510:	81 81       	ldd	r24, Z+1	; 0x01
    4512:	08 2e       	mov	r0, r24
    4514:	00 0c       	add	r0, r0
    4516:	99 0b       	sbc	r25, r25
    4518:	28 e8       	ldi	r18, 0x88	; 136
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	a9 01       	movw	r20, r18
    451e:	48 1b       	sub	r20, r24
    4520:	59 0b       	sbc	r21, r25
    4522:	ca 01       	movw	r24, r20
    4524:	88 0f       	add	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	88 0f       	add	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	9e 83       	std	Y+6, r25	; 0x06
    452e:	8d 83       	std	Y+5, r24	; 0x05
    4530:	2a c0       	rjmp	.+84     	; 0x4586 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    4532:	8b 81       	ldd	r24, Y+3	; 0x03
    4534:	9c 81       	ldd	r25, Y+4	; 0x04
    4536:	fc 01       	movw	r30, r24
    4538:	82 81       	ldd	r24, Z+2	; 0x02
    453a:	08 2e       	mov	r0, r24
    453c:	00 0c       	add	r0, r0
    453e:	99 0b       	sbc	r25, r25
    4540:	28 e5       	ldi	r18, 0x58	; 88
    4542:	32 e0       	ldi	r19, 0x02	; 2
    4544:	a9 01       	movw	r20, r18
    4546:	48 1b       	sub	r20, r24
    4548:	59 0b       	sbc	r21, r25
    454a:	ca 01       	movw	r24, r20
    454c:	9c 01       	movw	r18, r24
    454e:	22 0f       	add	r18, r18
    4550:	33 1f       	adc	r19, r19
    4552:	22 0f       	add	r18, r18
    4554:	33 1f       	adc	r19, r19
    4556:	8d 81       	ldd	r24, Y+5	; 0x05
    4558:	9e 81       	ldd	r25, Y+6	; 0x06
    455a:	28 17       	cp	r18, r24
    455c:	39 07       	cpc	r19, r25
    455e:	9c f4       	brge	.+38     	; 0x4586 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    4560:	8b 81       	ldd	r24, Y+3	; 0x03
    4562:	9c 81       	ldd	r25, Y+4	; 0x04
    4564:	fc 01       	movw	r30, r24
    4566:	82 81       	ldd	r24, Z+2	; 0x02
    4568:	08 2e       	mov	r0, r24
    456a:	00 0c       	add	r0, r0
    456c:	99 0b       	sbc	r25, r25
    456e:	28 e5       	ldi	r18, 0x58	; 88
    4570:	32 e0       	ldi	r19, 0x02	; 2
    4572:	a9 01       	movw	r20, r18
    4574:	48 1b       	sub	r20, r24
    4576:	59 0b       	sbc	r21, r25
    4578:	ca 01       	movw	r24, r20
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	88 0f       	add	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	9e 83       	std	Y+6, r25	; 0x06
    4584:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    4586:	8d 81       	ldd	r24, Y+5	; 0x05
    4588:	9e 81       	ldd	r25, Y+6	; 0x06
    458a:	02 97       	sbiw	r24, 0x02	; 2
    458c:	9e 83       	std	Y+6, r25	; 0x06
    458e:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    4590:	8d 81       	ldd	r24, Y+5	; 0x05
    4592:	9e 81       	ldd	r25, Y+6	; 0x06
    4594:	09 2e       	mov	r0, r25
    4596:	00 0c       	add	r0, r0
    4598:	aa 0b       	sbc	r26, r26
    459a:	bb 0b       	sbc	r27, r27
    459c:	88 0f       	add	r24, r24
    459e:	99 1f       	adc	r25, r25
    45a0:	aa 1f       	adc	r26, r26
    45a2:	bb 1f       	adc	r27, r27
    45a4:	88 0f       	add	r24, r24
    45a6:	99 1f       	adc	r25, r25
    45a8:	aa 1f       	adc	r26, r26
    45aa:	bb 1f       	adc	r27, r27
    45ac:	88 0f       	add	r24, r24
    45ae:	99 1f       	adc	r25, r25
    45b0:	aa 1f       	adc	r26, r26
    45b2:	bb 1f       	adc	r27, r27
    45b4:	88 0f       	add	r24, r24
    45b6:	99 1f       	adc	r25, r25
    45b8:	aa 1f       	adc	r26, r26
    45ba:	bb 1f       	adc	r27, r27
    45bc:	bb 23       	and	r27, r27
    45be:	1c f4       	brge	.+6      	; 0x45c6 <_ZN5Servo17writeMicrosecondsEi+0x110>
    45c0:	07 96       	adiw	r24, 0x07	; 7
    45c2:	a1 1d       	adc	r26, r1
    45c4:	b1 1d       	adc	r27, r1
    45c6:	68 94       	set
    45c8:	12 f8       	bld	r1, 2
    45ca:	b5 95       	asr	r27
    45cc:	a7 95       	ror	r26
    45ce:	97 95       	ror	r25
    45d0:	87 95       	ror	r24
    45d2:	16 94       	lsr	r1
    45d4:	d1 f7       	brne	.-12     	; 0x45ca <_ZN5Servo17writeMicrosecondsEi+0x114>
    45d6:	9e 83       	std	Y+6, r25	; 0x06
    45d8:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    45da:	8f e5       	ldi	r24, 0x5F	; 95
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	fc 01       	movw	r30, r24
    45e0:	80 81       	ld	r24, Z
    45e2:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    45e4:	f8 94       	cli
    servos[channel].ticks = value;
    45e6:	89 81       	ldd	r24, Y+1	; 0x01
    45e8:	28 2f       	mov	r18, r24
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	4d 81       	ldd	r20, Y+5	; 0x05
    45ee:	5e 81       	ldd	r21, Y+6	; 0x06
    45f0:	c9 01       	movw	r24, r18
    45f2:	88 0f       	add	r24, r24
    45f4:	99 1f       	adc	r25, r25
    45f6:	82 0f       	add	r24, r18
    45f8:	93 1f       	adc	r25, r19
    45fa:	8c 55       	subi	r24, 0x5C	; 92
    45fc:	9c 4f       	sbci	r25, 0xFC	; 252
    45fe:	fc 01       	movw	r30, r24
    4600:	51 83       	std	Z+1, r21	; 0x01
    4602:	40 83       	st	Z, r20
    SREG = oldSREG;
    4604:	8f e5       	ldi	r24, 0x5F	; 95
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	2a 81       	ldd	r18, Y+2	; 0x02
    460a:	fc 01       	movw	r30, r24
    460c:	20 83       	st	Z, r18
  }
}
    460e:	00 00       	nop
    4610:	26 96       	adiw	r28, 0x06	; 6
    4612:	0f b6       	in	r0, 0x3f	; 63
    4614:	f8 94       	cli
    4616:	de bf       	out	0x3e, r29	; 62
    4618:	0f be       	out	0x3f, r0	; 63
    461a:	cd bf       	out	0x3d, r28	; 61
    461c:	df 91       	pop	r29
    461e:	cf 91       	pop	r28
    4620:	08 95       	ret

00004622 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    4622:	2f 92       	push	r2
    4624:	3f 92       	push	r3
    4626:	4f 92       	push	r4
    4628:	5f 92       	push	r5
    462a:	6f 92       	push	r6
    462c:	7f 92       	push	r7
    462e:	8f 92       	push	r8
    4630:	9f 92       	push	r9
    4632:	af 92       	push	r10
    4634:	bf 92       	push	r11
    4636:	cf 92       	push	r12
    4638:	df 92       	push	r13
    463a:	ef 92       	push	r14
    463c:	ff 92       	push	r15
    463e:	0f 93       	push	r16
    4640:	1f 93       	push	r17
    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
    4646:	1f 92       	push	r1
    4648:	1f 92       	push	r1
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
    464e:	9a 83       	std	Y+2, r25	; 0x02
    4650:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    4652:	89 81       	ldd	r24, Y+1	; 0x01
    4654:	9a 81       	ldd	r25, Y+2	; 0x02
    4656:	fc 01       	movw	r30, r24
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	08 2e       	mov	r0, r24
    465c:	00 0c       	add	r0, r0
    465e:	99 0b       	sbc	r25, r25
    4660:	28 e5       	ldi	r18, 0x58	; 88
    4662:	32 e0       	ldi	r19, 0x02	; 2
    4664:	a9 01       	movw	r20, r18
    4666:	48 1b       	sub	r20, r24
    4668:	59 0b       	sbc	r21, r25
    466a:	ca 01       	movw	r24, r20
    466c:	88 0f       	add	r24, r24
    466e:	99 1f       	adc	r25, r25
    4670:	88 0f       	add	r24, r24
    4672:	99 1f       	adc	r25, r25
    4674:	1c 01       	movw	r2, r24
    4676:	99 0f       	add	r25, r25
    4678:	44 08       	sbc	r4, r4
    467a:	55 08       	sbc	r5, r5
    467c:	89 81       	ldd	r24, Y+1	; 0x01
    467e:	9a 81       	ldd	r25, Y+2	; 0x02
    4680:	fc 01       	movw	r30, r24
    4682:	81 81       	ldd	r24, Z+1	; 0x01
    4684:	08 2e       	mov	r0, r24
    4686:	00 0c       	add	r0, r0
    4688:	99 0b       	sbc	r25, r25
    468a:	28 e8       	ldi	r18, 0x88	; 136
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	a9 01       	movw	r20, r18
    4690:	48 1b       	sub	r20, r24
    4692:	59 0b       	sbc	r21, r25
    4694:	ca 01       	movw	r24, r20
    4696:	88 0f       	add	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	3c 01       	movw	r6, r24
    46a0:	99 0f       	add	r25, r25
    46a2:	88 08       	sbc	r8, r8
    46a4:	99 08       	sbc	r9, r9
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	9a 81       	ldd	r25, Y+2	; 0x02
    46aa:	30 d0       	rcall	.+96     	; 0x470c <_ZN5Servo16readMicrosecondsEv>
    46ac:	01 96       	adiw	r24, 0x01	; 1
    46ae:	09 2e       	mov	r0, r25
    46b0:	00 0c       	add	r0, r0
    46b2:	aa 0b       	sbc	r26, r26
    46b4:	bb 0b       	sbc	r27, r27
    46b6:	1f 92       	push	r1
    46b8:	1f 92       	push	r1
    46ba:	1f 92       	push	r1
    46bc:	24 eb       	ldi	r18, 0xB4	; 180
    46be:	2f 93       	push	r18
    46c0:	a1 2c       	mov	r10, r1
    46c2:	b1 2c       	mov	r11, r1
    46c4:	65 01       	movw	r12, r10
    46c6:	82 01       	movw	r16, r4
    46c8:	71 01       	movw	r14, r2
    46ca:	a4 01       	movw	r20, r8
    46cc:	93 01       	movw	r18, r6
    46ce:	bc 01       	movw	r22, r24
    46d0:	cd 01       	movw	r24, r26
    46d2:	0e 94 c9 31 	call	0x6392	; 0x6392 <_Z3maplllll>
    46d6:	0f 90       	pop	r0
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
}
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	ef 90       	pop	r14
    46f2:	df 90       	pop	r13
    46f4:	cf 90       	pop	r12
    46f6:	bf 90       	pop	r11
    46f8:	af 90       	pop	r10
    46fa:	9f 90       	pop	r9
    46fc:	8f 90       	pop	r8
    46fe:	7f 90       	pop	r7
    4700:	6f 90       	pop	r6
    4702:	5f 90       	pop	r5
    4704:	4f 90       	pop	r4
    4706:	3f 90       	pop	r3
    4708:	2f 90       	pop	r2
    470a:	08 95       	ret

0000470c <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	00 d0       	rcall	.+0      	; 0x4712 <_ZN5Servo16readMicrosecondsEv+0x6>
    4712:	1f 92       	push	r1
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	9c 83       	std	Y+4, r25	; 0x04
    471a:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    471c:	8b 81       	ldd	r24, Y+3	; 0x03
    471e:	9c 81       	ldd	r25, Y+4	; 0x04
    4720:	fc 01       	movw	r30, r24
    4722:	80 81       	ld	r24, Z
    4724:	8f 3f       	cpi	r24, 0xFF	; 255
    4726:	01 f1       	breq	.+64     	; 0x4768 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    4728:	8b 81       	ldd	r24, Y+3	; 0x03
    472a:	9c 81       	ldd	r25, Y+4	; 0x04
    472c:	fc 01       	movw	r30, r24
    472e:	80 81       	ld	r24, Z
    4730:	28 2f       	mov	r18, r24
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	c9 01       	movw	r24, r18
    4736:	88 0f       	add	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	82 0f       	add	r24, r18
    473c:	93 1f       	adc	r25, r19
    473e:	8c 55       	subi	r24, 0x5C	; 92
    4740:	9c 4f       	sbci	r25, 0xFC	; 252
    4742:	fc 01       	movw	r30, r24
    4744:	80 81       	ld	r24, Z
    4746:	91 81       	ldd	r25, Z+1	; 0x01
    4748:	88 0f       	add	r24, r24
    474a:	99 1f       	adc	r25, r25
    474c:	88 0f       	add	r24, r24
    474e:	99 1f       	adc	r25, r25
    4750:	88 0f       	add	r24, r24
    4752:	99 1f       	adc	r25, r25
    4754:	92 95       	swap	r25
    4756:	82 95       	swap	r24
    4758:	8f 70       	andi	r24, 0x0F	; 15
    475a:	89 27       	eor	r24, r25
    475c:	9f 70       	andi	r25, 0x0F	; 15
    475e:	89 27       	eor	r24, r25
    4760:	02 96       	adiw	r24, 0x02	; 2
    4762:	9a 83       	std	Y+2, r25	; 0x02
    4764:	89 83       	std	Y+1, r24	; 0x01
    4766:	02 c0       	rjmp	.+4      	; 0x476c <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    4768:	1a 82       	std	Y+2, r1	; 0x02
    476a:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    476c:	89 81       	ldd	r24, Y+1	; 0x01
    476e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	df 91       	pop	r29
    477a:	cf 91       	pop	r28
    477c:	08 95       	ret

0000477e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    477e:	cf 93       	push	r28
    4780:	df 93       	push	r29
    4782:	cd b7       	in	r28, 0x3d	; 61
    4784:	de b7       	in	r29, 0x3e	; 62
    4786:	2f 97       	sbiw	r28, 0x0f	; 15
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4792:	8f e5       	ldi	r24, 0x5F	; 95
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	fc 01       	movw	r30, r24
    4798:	80 81       	ld	r24, Z
    479a:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    479c:	f8 94       	cli
  if (!initialized) {
    479e:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <_ZN8SPIClass11initializedE>
    47a2:	88 23       	and	r24, r24
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <_ZN8SPIClass5beginEv+0x2a>
    47a6:	5b c0       	rjmp	.+182    	; 0x485e <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    47a8:	89 ec       	ldi	r24, 0xC9	; 201
    47aa:	91 e0       	ldi	r25, 0x01	; 1
    47ac:	9b 83       	std	Y+3, r25	; 0x03
    47ae:	8a 83       	std	Y+2, r24	; 0x02
    47b0:	8a 81       	ldd	r24, Y+2	; 0x02
    47b2:	9b 81       	ldd	r25, Y+3	; 0x03
    47b4:	fc 01       	movw	r30, r24
    47b6:	84 91       	lpm	r24, Z
    47b8:	8c 83       	std	Y+4, r24	; 0x04
    47ba:	8c 81       	ldd	r24, Y+4	; 0x04
    47bc:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    47be:	83 e8       	ldi	r24, 0x83	; 131
    47c0:	91 e0       	ldi	r25, 0x01	; 1
    47c2:	9f 83       	std	Y+7, r25	; 0x07
    47c4:	8e 83       	std	Y+6, r24	; 0x06
    47c6:	8e 81       	ldd	r24, Y+6	; 0x06
    47c8:	9f 81       	ldd	r25, Y+7	; 0x07
    47ca:	fc 01       	movw	r30, r24
    47cc:	84 91       	lpm	r24, Z
    47ce:	88 87       	std	Y+8, r24	; 0x08
    47d0:	88 85       	ldd	r24, Y+8	; 0x08
    47d2:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    47d4:	8d 81       	ldd	r24, Y+5	; 0x05
    47d6:	88 2f       	mov	r24, r24
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	88 0f       	add	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	82 5f       	subi	r24, 0xF2	; 242
    47e0:	9d 4f       	sbci	r25, 0xFD	; 253
    47e2:	9b 87       	std	Y+11, r25	; 0x0b
    47e4:	8a 87       	std	Y+10, r24	; 0x0a
    47e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    47e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    47ea:	fc 01       	movw	r30, r24
    47ec:	25 91       	lpm	r18, Z+
    47ee:	34 91       	lpm	r19, Z
    47f0:	cf 01       	movw	r24, r30
    47f2:	3d 87       	std	Y+13, r19	; 0x0d
    47f4:	2c 87       	std	Y+12, r18	; 0x0c
    47f6:	9b 87       	std	Y+11, r25	; 0x0b
    47f8:	8a 87       	std	Y+10, r24	; 0x0a
    47fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    47fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    47fe:	9f 87       	std	Y+15, r25	; 0x0f
    4800:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4802:	8e 85       	ldd	r24, Y+14	; 0x0e
    4804:	9f 85       	ldd	r25, Y+15	; 0x0f
    4806:	fc 01       	movw	r30, r24
    4808:	90 81       	ld	r25, Z
    480a:	89 85       	ldd	r24, Y+9	; 0x09
    480c:	98 23       	and	r25, r24
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	99 23       	and	r25, r25
    4812:	09 f0       	breq	.+2      	; 0x4816 <_ZN8SPIClass5beginEv+0x98>
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	88 23       	and	r24, r24
    4818:	21 f0       	breq	.+8      	; 0x4822 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    481a:	61 e0       	ldi	r22, 0x01	; 1
    481c:	85 e3       	ldi	r24, 0x35	; 53
    481e:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	85 e3       	ldi	r24, 0x35	; 53
    4826:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    482a:	8c e4       	ldi	r24, 0x4C	; 76
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	2c e4       	ldi	r18, 0x4C	; 76
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	f9 01       	movw	r30, r18
    4834:	20 81       	ld	r18, Z
    4836:	20 61       	ori	r18, 0x10	; 16
    4838:	fc 01       	movw	r30, r24
    483a:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    483c:	8c e4       	ldi	r24, 0x4C	; 76
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	2c e4       	ldi	r18, 0x4C	; 76
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	f9 01       	movw	r30, r18
    4846:	20 81       	ld	r18, Z
    4848:	20 64       	ori	r18, 0x40	; 64
    484a:	fc 01       	movw	r30, r24
    484c:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    484e:	61 e0       	ldi	r22, 0x01	; 1
    4850:	84 e3       	ldi	r24, 0x34	; 52
    4852:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
    pinMode(MOSI, OUTPUT);
    4856:	61 e0       	ldi	r22, 0x01	; 1
    4858:	83 e3       	ldi	r24, 0x33	; 51
    485a:	0e 94 37 31 	call	0x626e	; 0x626e <pinMode>
  }
  initialized++; // reference count
    485e:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <_ZN8SPIClass11initializedE>
    4862:	8f 5f       	subi	r24, 0xFF	; 255
    4864:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4868:	8f e5       	ldi	r24, 0x5F	; 95
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	29 81       	ldd	r18, Y+1	; 0x01
    486e:	fc 01       	movw	r30, r24
    4870:	20 83       	st	Z, r18
}
    4872:	00 00       	nop
    4874:	2f 96       	adiw	r28, 0x0f	; 15
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	08 95       	ret

00004886 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4886:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_sendStop>
    4890:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
    4894:	61 e0       	ldi	r22, 0x01	; 1
    4896:	84 e1       	ldi	r24, 0x14	; 20
    4898:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    489c:	61 e0       	ldi	r22, 0x01	; 1
    489e:	85 e1       	ldi	r24, 0x15	; 21
    48a0:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    48a4:	e9 eb       	ldi	r30, 0xB9	; 185
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	80 81       	ld	r24, Z
    48aa:	8e 7f       	andi	r24, 0xFE	; 254
    48ac:	80 83       	st	Z, r24
    48ae:	80 81       	ld	r24, Z
    48b0:	8d 7f       	andi	r24, 0xFD	; 253
    48b2:	80 83       	st	Z, r24
    48b4:	88 e4       	ldi	r24, 0x48	; 72
    48b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    48ba:	85 e4       	ldi	r24, 0x45	; 69
    48bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    48c0:	08 95       	ret

000048c2 <twi_disable>:
    48c2:	ec eb       	ldi	r30, 0xBC	; 188
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	80 81       	ld	r24, Z
    48c8:	8a 7b       	andi	r24, 0xBA	; 186
    48ca:	80 83       	st	Z, r24
    48cc:	60 e0       	ldi	r22, 0x00	; 0
    48ce:	84 e1       	ldi	r24, 0x14	; 20
    48d0:	0e 94 73 31 	call	0x62e6	; 0x62e6 <digitalWrite>
    48d4:	60 e0       	ldi	r22, 0x00	; 0
    48d6:	85 e1       	ldi	r24, 0x15	; 21
    48d8:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <digitalWrite>

000048dc <twi_transmit>:
    48dc:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <twi_txBufferLength>
    48e0:	26 2f       	mov	r18, r22
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	24 0f       	add	r18, r20
    48e6:	31 1d       	adc	r19, r1
    48e8:	21 32       	cpi	r18, 0x21	; 33
    48ea:	31 05       	cpc	r19, r1
    48ec:	dc f4       	brge	.+54     	; 0x4924 <twi_transmit+0x48>
    48ee:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <twi_state>
    48f2:	24 30       	cpi	r18, 0x04	; 4
    48f4:	c9 f4       	brne	.+50     	; 0x4928 <twi_transmit+0x4c>
    48f6:	fc 01       	movw	r30, r24
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	86 17       	cp	r24, r22
    48fe:	58 f4       	brcc	.+22     	; 0x4916 <twi_transmit+0x3a>
    4900:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <twi_txBufferLength>
    4904:	21 91       	ld	r18, Z+
    4906:	dc 01       	movw	r26, r24
    4908:	a0 5a       	subi	r26, 0xA0	; 160
    490a:	bb 4f       	sbci	r27, 0xFB	; 251
    490c:	a3 0f       	add	r26, r19
    490e:	b1 1d       	adc	r27, r1
    4910:	2c 93       	st	X, r18
    4912:	01 96       	adiw	r24, 0x01	; 1
    4914:	f3 cf       	rjmp	.-26     	; 0x48fc <twi_transmit+0x20>
    4916:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <twi_txBufferLength>
    491a:	68 0f       	add	r22, r24
    491c:	60 93 5e 04 	sts	0x045E, r22	; 0x80045e <twi_txBufferLength>
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	08 95       	ret
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	08 95       	ret
    4928:	82 e0       	ldi	r24, 0x02	; 2
    492a:	08 95       	ret

0000492c <twi_attachSlaveRxEvent>:
    492c:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <twi_onSlaveReceive+0x1>
    4930:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <twi_onSlaveReceive>
    4934:	08 95       	ret

00004936 <twi_attachSlaveTxEvent>:
    4936:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <twi_onSlaveTransmit+0x1>
    493a:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <twi_onSlaveTransmit>
    493e:	08 95       	ret

00004940 <twi_releaseBus>:
    4940:	85 ec       	ldi	r24, 0xC5	; 197
    4942:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4946:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
    494a:	08 95       	ret

0000494c <twi_handleTimeout>:
    494c:	cf 93       	push	r28
    494e:	df 93       	push	r29
    4950:	91 e0       	ldi	r25, 0x01	; 1
    4952:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <twi_timed_out_flag>
    4956:	88 23       	and	r24, r24
    4958:	51 f0       	breq	.+20     	; 0x496e <twi_handleTimeout+0x22>
    495a:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    495e:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4962:	af df       	rcall	.-162    	; 0x48c2 <twi_disable>
    4964:	90 df       	rcall	.-224    	; 0x4886 <twi_init>
    4966:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    496a:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	08 95       	ret

00004974 <twi_readFrom>:
    4974:	4f 92       	push	r4
    4976:	5f 92       	push	r5
    4978:	6f 92       	push	r6
    497a:	7f 92       	push	r7
    497c:	8f 92       	push	r8
    497e:	9f 92       	push	r9
    4980:	af 92       	push	r10
    4982:	bf 92       	push	r11
    4984:	cf 92       	push	r12
    4986:	df 92       	push	r13
    4988:	ef 92       	push	r14
    498a:	ff 92       	push	r15
    498c:	0f 93       	push	r16
    498e:	1f 93       	push	r17
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	f8 2e       	mov	r15, r24
    4996:	16 2f       	mov	r17, r22
    4998:	07 2f       	mov	r16, r23
    499a:	c4 2f       	mov	r28, r20
    499c:	e2 2e       	mov	r14, r18
    499e:	41 32       	cpi	r20, 0x21	; 33
    49a0:	08 f0       	brcs	.+2      	; 0x49a4 <twi_readFrom+0x30>
    49a2:	bc c0       	rjmp	.+376    	; 0x4b1c <twi_readFrom+0x1a8>
    49a4:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    49a8:	4b 01       	movw	r8, r22
    49aa:	5c 01       	movw	r10, r24
    49ac:	d0 91 af 04 	lds	r29, 0x04AF	; 0x8004af <twi_state>
    49b0:	dd 23       	and	r29, r29
    49b2:	29 f1       	breq	.+74     	; 0x49fe <twi_readFrom+0x8a>
    49b4:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    49b8:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    49bc:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    49c0:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    49c4:	89 2b       	or	r24, r25
    49c6:	8a 2b       	or	r24, r26
    49c8:	8b 2b       	or	r24, r27
    49ca:	81 f3       	breq	.-32     	; 0x49ac <twi_readFrom+0x38>
    49cc:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    49d0:	40 90 a8 04 	lds	r4, 0x04A8	; 0x8004a8 <twi_timeout_us>
    49d4:	50 90 a9 04 	lds	r5, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    49d8:	60 90 aa 04 	lds	r6, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    49dc:	70 90 ab 04 	lds	r7, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    49e0:	dc 01       	movw	r26, r24
    49e2:	cb 01       	movw	r24, r22
    49e4:	88 19       	sub	r24, r8
    49e6:	99 09       	sbc	r25, r9
    49e8:	aa 09       	sbc	r26, r10
    49ea:	bb 09       	sbc	r27, r11
    49ec:	48 16       	cp	r4, r24
    49ee:	59 06       	cpc	r5, r25
    49f0:	6a 06       	cpc	r6, r26
    49f2:	7b 06       	cpc	r7, r27
    49f4:	d8 f6       	brcc	.-74     	; 0x49ac <twi_readFrom+0x38>
    49f6:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    49fa:	a8 df       	rcall	.-176    	; 0x494c <twi_handleTimeout>
    49fc:	8f c0       	rjmp	.+286    	; 0x4b1c <twi_readFrom+0x1a8>
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
    4a04:	e0 92 ad 04 	sts	0x04AD, r14	; 0x8004ad <twi_sendStop>
    4a08:	9f ef       	ldi	r25, 0xFF	; 255
    4a0a:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <twi_error>
    4a0e:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_masterBufferIndex>
    4a12:	9c 0f       	add	r25, r28
    4a14:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <twi_masterBufferLength>
    4a18:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <twi_slarw>
    4a1c:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <twi_slarw>
    4a20:	8f 2d       	mov	r24, r15
    4a22:	88 0f       	add	r24, r24
    4a24:	89 2b       	or	r24, r25
    4a26:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <twi_slarw>
    4a2a:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_inRepStart>
    4a2e:	81 30       	cpi	r24, 0x01	; 1
    4a30:	89 f5       	brne	.+98     	; 0x4a94 <twi_readFrom+0x120>
    4a32:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
    4a36:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4a3a:	6b 01       	movw	r12, r22
    4a3c:	7c 01       	movw	r14, r24
    4a3e:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_slarw>
    4a42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4a46:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4a4a:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4a4e:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4a52:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4a56:	89 2b       	or	r24, r25
    4a58:	8a 2b       	or	r24, r26
    4a5a:	8b 2b       	or	r24, r27
    4a5c:	a9 f0       	breq	.+42     	; 0x4a88 <twi_readFrom+0x114>
    4a5e:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4a62:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4a66:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4a6a:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4a6e:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	8c 19       	sub	r24, r12
    4a78:	9d 09       	sbc	r25, r13
    4a7a:	ae 09       	sbc	r26, r14
    4a7c:	bf 09       	sbc	r27, r15
    4a7e:	88 16       	cp	r8, r24
    4a80:	99 06       	cpc	r9, r25
    4a82:	aa 06       	cpc	r10, r26
    4a84:	bb 06       	cpc	r11, r27
    4a86:	90 f1       	brcs	.+100    	; 0x4aec <twi_readFrom+0x178>
    4a88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a8c:	83 fd       	sbrc	r24, 3
    4a8e:	d7 cf       	rjmp	.-82     	; 0x4a3e <twi_readFrom+0xca>
    4a90:	85 ec       	ldi	r24, 0xC5	; 197
    4a92:	01 c0       	rjmp	.+2      	; 0x4a96 <twi_readFrom+0x122>
    4a94:	85 ee       	ldi	r24, 0xE5	; 229
    4a96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a9a:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4a9e:	6b 01       	movw	r12, r22
    4aa0:	7c 01       	movw	r14, r24
    4aa2:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <twi_state>
    4aa6:	81 30       	cpi	r24, 0x01	; 1
    4aa8:	29 f5       	brne	.+74     	; 0x4af4 <twi_readFrom+0x180>
    4aaa:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4aae:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4ab2:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4ab6:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4aba:	89 2b       	or	r24, r25
    4abc:	8a 2b       	or	r24, r26
    4abe:	8b 2b       	or	r24, r27
    4ac0:	81 f3       	breq	.-32     	; 0x4aa2 <twi_readFrom+0x12e>
    4ac2:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4ac6:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4aca:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4ace:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4ad2:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	8c 19       	sub	r24, r12
    4adc:	9d 09       	sbc	r25, r13
    4ade:	ae 09       	sbc	r26, r14
    4ae0:	bf 09       	sbc	r27, r15
    4ae2:	88 16       	cp	r8, r24
    4ae4:	99 06       	cpc	r9, r25
    4ae6:	aa 06       	cpc	r10, r26
    4ae8:	bb 06       	cpc	r11, r27
    4aea:	d8 f6       	brcc	.-74     	; 0x4aa2 <twi_readFrom+0x12e>
    4aec:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4af0:	2d df       	rcall	.-422    	; 0x494c <twi_handleTimeout>
    4af2:	15 c0       	rjmp	.+42     	; 0x4b1e <twi_readFrom+0x1aa>
    4af4:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4af8:	8c 17       	cp	r24, r28
    4afa:	10 f4       	brcc	.+4      	; 0x4b00 <twi_readFrom+0x18c>
    4afc:	c0 91 81 04 	lds	r28, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4b00:	a2 e8       	ldi	r26, 0x82	; 130
    4b02:	b4 e0       	ldi	r27, 0x04	; 4
    4b04:	91 2f       	mov	r25, r17
    4b06:	e1 2f       	mov	r30, r17
    4b08:	f0 2f       	mov	r31, r16
    4b0a:	8e 2f       	mov	r24, r30
    4b0c:	89 1b       	sub	r24, r25
    4b0e:	8c 17       	cp	r24, r28
    4b10:	18 f4       	brcc	.+6      	; 0x4b18 <twi_readFrom+0x1a4>
    4b12:	8d 91       	ld	r24, X+
    4b14:	81 93       	st	Z+, r24
    4b16:	f9 cf       	rjmp	.-14     	; 0x4b0a <twi_readFrom+0x196>
    4b18:	dc 2f       	mov	r29, r28
    4b1a:	01 c0       	rjmp	.+2      	; 0x4b1e <twi_readFrom+0x1aa>
    4b1c:	d0 e0       	ldi	r29, 0x00	; 0
    4b1e:	8d 2f       	mov	r24, r29
    4b20:	df 91       	pop	r29
    4b22:	cf 91       	pop	r28
    4b24:	1f 91       	pop	r17
    4b26:	0f 91       	pop	r16
    4b28:	ff 90       	pop	r15
    4b2a:	ef 90       	pop	r14
    4b2c:	df 90       	pop	r13
    4b2e:	cf 90       	pop	r12
    4b30:	bf 90       	pop	r11
    4b32:	af 90       	pop	r10
    4b34:	9f 90       	pop	r9
    4b36:	8f 90       	pop	r8
    4b38:	7f 90       	pop	r7
    4b3a:	6f 90       	pop	r6
    4b3c:	5f 90       	pop	r5
    4b3e:	4f 90       	pop	r4
    4b40:	08 95       	ret

00004b42 <twi_writeTo>:
    4b42:	4f 92       	push	r4
    4b44:	5f 92       	push	r5
    4b46:	6f 92       	push	r6
    4b48:	7f 92       	push	r7
    4b4a:	8f 92       	push	r8
    4b4c:	9f 92       	push	r9
    4b4e:	af 92       	push	r10
    4b50:	bf 92       	push	r11
    4b52:	cf 92       	push	r12
    4b54:	df 92       	push	r13
    4b56:	ef 92       	push	r14
    4b58:	ff 92       	push	r15
    4b5a:	0f 93       	push	r16
    4b5c:	1f 93       	push	r17
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	41 32       	cpi	r20, 0x21	; 33
    4b64:	08 f0       	brcs	.+2      	; 0x4b68 <twi_writeTo+0x26>
    4b66:	c5 c0       	rjmp	.+394    	; 0x4cf2 <twi_writeTo+0x1b0>
    4b68:	12 2f       	mov	r17, r18
    4b6a:	f4 2e       	mov	r15, r20
    4b6c:	d7 2e       	mov	r13, r23
    4b6e:	e6 2e       	mov	r14, r22
    4b70:	d8 2f       	mov	r29, r24
    4b72:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4b76:	4b 01       	movw	r8, r22
    4b78:	5c 01       	movw	r10, r24
    4b7a:	c0 91 af 04 	lds	r28, 0x04AF	; 0x8004af <twi_state>
    4b7e:	cc 23       	and	r28, r28
    4b80:	11 f1       	breq	.+68     	; 0x4bc6 <twi_writeTo+0x84>
    4b82:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4b86:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4b8a:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4b8e:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4b92:	89 2b       	or	r24, r25
    4b94:	8a 2b       	or	r24, r26
    4b96:	8b 2b       	or	r24, r27
    4b98:	81 f3       	breq	.-32     	; 0x4b7a <twi_writeTo+0x38>
    4b9a:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4b9e:	40 90 a8 04 	lds	r4, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4ba2:	50 90 a9 04 	lds	r5, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4ba6:	60 90 aa 04 	lds	r6, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4baa:	70 90 ab 04 	lds	r7, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	88 19       	sub	r24, r8
    4bb4:	99 09       	sbc	r25, r9
    4bb6:	aa 09       	sbc	r26, r10
    4bb8:	bb 09       	sbc	r27, r11
    4bba:	48 16       	cp	r4, r24
    4bbc:	59 06       	cpc	r5, r25
    4bbe:	6a 06       	cpc	r6, r26
    4bc0:	7b 06       	cpc	r7, r27
    4bc2:	d8 f6       	brcc	.-74     	; 0x4b7a <twi_writeTo+0x38>
    4bc4:	83 c0       	rjmp	.+262    	; 0x4ccc <twi_writeTo+0x18a>
    4bc6:	82 e0       	ldi	r24, 0x02	; 2
    4bc8:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
    4bcc:	00 93 ad 04 	sts	0x04AD, r16	; 0x8004ad <twi_sendStop>
    4bd0:	8f ef       	ldi	r24, 0xFF	; 255
    4bd2:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_error>
    4bd6:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_masterBufferIndex>
    4bda:	f0 92 80 04 	sts	0x0480, r15	; 0x800480 <twi_masterBufferLength>
    4bde:	9e 2d       	mov	r25, r14
    4be0:	a2 e8       	ldi	r26, 0x82	; 130
    4be2:	b4 e0       	ldi	r27, 0x04	; 4
    4be4:	ee 2d       	mov	r30, r14
    4be6:	fd 2d       	mov	r31, r13
    4be8:	8e 2f       	mov	r24, r30
    4bea:	89 1b       	sub	r24, r25
    4bec:	8f 15       	cp	r24, r15
    4bee:	18 f4       	brcc	.+6      	; 0x4bf6 <twi_writeTo+0xb4>
    4bf0:	81 91       	ld	r24, Z+
    4bf2:	8d 93       	st	X+, r24
    4bf4:	f9 cf       	rjmp	.-14     	; 0x4be8 <twi_writeTo+0xa6>
    4bf6:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <twi_slarw>
    4bfa:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <twi_slarw>
    4bfe:	dd 0f       	add	r29, r29
    4c00:	d9 2b       	or	r29, r25
    4c02:	d0 93 ae 04 	sts	0x04AE, r29	; 0x8004ae <twi_slarw>
    4c06:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_inRepStart>
    4c0a:	81 30       	cpi	r24, 0x01	; 1
    4c0c:	89 f5       	brne	.+98     	; 0x4c70 <twi_writeTo+0x12e>
    4c0e:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
    4c12:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4c16:	6b 01       	movw	r12, r22
    4c18:	7c 01       	movw	r14, r24
    4c1a:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_slarw>
    4c1e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c22:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4c26:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4c2a:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4c2e:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4c32:	89 2b       	or	r24, r25
    4c34:	8a 2b       	or	r24, r26
    4c36:	8b 2b       	or	r24, r27
    4c38:	a9 f0       	breq	.+42     	; 0x4c64 <twi_writeTo+0x122>
    4c3a:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4c3e:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4c42:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4c46:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4c4a:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4c4e:	dc 01       	movw	r26, r24
    4c50:	cb 01       	movw	r24, r22
    4c52:	8c 19       	sub	r24, r12
    4c54:	9d 09       	sbc	r25, r13
    4c56:	ae 09       	sbc	r26, r14
    4c58:	bf 09       	sbc	r27, r15
    4c5a:	88 16       	cp	r8, r24
    4c5c:	99 06       	cpc	r9, r25
    4c5e:	aa 06       	cpc	r10, r26
    4c60:	bb 06       	cpc	r11, r27
    4c62:	a0 f1       	brcs	.+104    	; 0x4ccc <twi_writeTo+0x18a>
    4c64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c68:	83 fd       	sbrc	r24, 3
    4c6a:	d7 cf       	rjmp	.-82     	; 0x4c1a <twi_writeTo+0xd8>
    4c6c:	85 ec       	ldi	r24, 0xC5	; 197
    4c6e:	01 c0       	rjmp	.+2      	; 0x4c72 <twi_writeTo+0x130>
    4c70:	85 ee       	ldi	r24, 0xE5	; 229
    4c72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c76:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4c7a:	6b 01       	movw	r12, r22
    4c7c:	7c 01       	movw	r14, r24
    4c7e:	11 23       	and	r17, r17
    4c80:	51 f1       	breq	.+84     	; 0x4cd6 <twi_writeTo+0x194>
    4c82:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <twi_state>
    4c86:	82 30       	cpi	r24, 0x02	; 2
    4c88:	31 f5       	brne	.+76     	; 0x4cd6 <twi_writeTo+0x194>
    4c8a:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4c8e:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4c92:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4c96:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4c9a:	89 2b       	or	r24, r25
    4c9c:	8a 2b       	or	r24, r26
    4c9e:	8b 2b       	or	r24, r27
    4ca0:	71 f3       	breq	.-36     	; 0x4c7e <twi_writeTo+0x13c>
    4ca2:	0e 94 17 30 	call	0x602e	; 0x602e <micros>
    4ca6:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4caa:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4cae:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4cb2:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	8c 19       	sub	r24, r12
    4cbc:	9d 09       	sbc	r25, r13
    4cbe:	ae 09       	sbc	r26, r14
    4cc0:	bf 09       	sbc	r27, r15
    4cc2:	88 16       	cp	r8, r24
    4cc4:	99 06       	cpc	r9, r25
    4cc6:	aa 06       	cpc	r10, r26
    4cc8:	bb 06       	cpc	r11, r27
    4cca:	c8 f6       	brcc	.-78     	; 0x4c7e <twi_writeTo+0x13c>
    4ccc:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4cd0:	3d de       	rcall	.-902    	; 0x494c <twi_handleTimeout>
    4cd2:	c5 e0       	ldi	r28, 0x05	; 5
    4cd4:	13 c0       	rjmp	.+38     	; 0x4cfc <twi_writeTo+0x1ba>
    4cd6:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_error>
    4cda:	8f 3f       	cpi	r24, 0xFF	; 255
    4cdc:	79 f0       	breq	.+30     	; 0x4cfc <twi_writeTo+0x1ba>
    4cde:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_error>
    4ce2:	80 32       	cpi	r24, 0x20	; 32
    4ce4:	41 f0       	breq	.+16     	; 0x4cf6 <twi_writeTo+0x1b4>
    4ce6:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_error>
    4cea:	80 33       	cpi	r24, 0x30	; 48
    4cec:	31 f0       	breq	.+12     	; 0x4cfa <twi_writeTo+0x1b8>
    4cee:	c4 e0       	ldi	r28, 0x04	; 4
    4cf0:	05 c0       	rjmp	.+10     	; 0x4cfc <twi_writeTo+0x1ba>
    4cf2:	c1 e0       	ldi	r28, 0x01	; 1
    4cf4:	03 c0       	rjmp	.+6      	; 0x4cfc <twi_writeTo+0x1ba>
    4cf6:	c2 e0       	ldi	r28, 0x02	; 2
    4cf8:	01 c0       	rjmp	.+2      	; 0x4cfc <twi_writeTo+0x1ba>
    4cfa:	c3 e0       	ldi	r28, 0x03	; 3
    4cfc:	8c 2f       	mov	r24, r28
    4cfe:	df 91       	pop	r29
    4d00:	cf 91       	pop	r28
    4d02:	1f 91       	pop	r17
    4d04:	0f 91       	pop	r16
    4d06:	ff 90       	pop	r15
    4d08:	ef 90       	pop	r14
    4d0a:	df 90       	pop	r13
    4d0c:	cf 90       	pop	r12
    4d0e:	bf 90       	pop	r11
    4d10:	af 90       	pop	r10
    4d12:	9f 90       	pop	r9
    4d14:	8f 90       	pop	r8
    4d16:	7f 90       	pop	r7
    4d18:	6f 90       	pop	r6
    4d1a:	5f 90       	pop	r5
    4d1c:	4f 90       	pop	r4
    4d1e:	08 95       	ret

00004d20 <twi_stop>:
    4d20:	85 ed       	ldi	r24, 0xD5	; 213
    4d22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d26:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4d2a:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4d2e:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4d32:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4d36:	07 96       	adiw	r24, 0x07	; 7
    4d38:	a1 1d       	adc	r26, r1
    4d3a:	b1 1d       	adc	r27, r1
    4d3c:	23 e0       	ldi	r18, 0x03	; 3
    4d3e:	b6 95       	lsr	r27
    4d40:	a7 95       	ror	r26
    4d42:	97 95       	ror	r25
    4d44:	87 95       	ror	r24
    4d46:	2a 95       	dec	r18
    4d48:	d1 f7       	brne	.-12     	; 0x4d3e <twi_stop+0x1e>
    4d4a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d4e:	24 ff       	sbrs	r18, 4
    4d50:	1b c0       	rjmp	.+54     	; 0x4d88 <twi_stop+0x68>
    4d52:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4d56:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4d5a:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4d5e:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4d62:	45 2b       	or	r20, r21
    4d64:	46 2b       	or	r20, r22
    4d66:	47 2b       	or	r20, r23
    4d68:	81 f3       	breq	.-32     	; 0x4d4a <twi_stop+0x2a>
    4d6a:	00 97       	sbiw	r24, 0x00	; 0
    4d6c:	a1 05       	cpc	r26, r1
    4d6e:	b1 05       	cpc	r27, r1
    4d70:	41 f0       	breq	.+16     	; 0x4d82 <twi_stop+0x62>
    4d72:	25 e3       	ldi	r18, 0x35	; 53
    4d74:	2a 95       	dec	r18
    4d76:	f1 f7       	brne	.-4      	; 0x4d74 <twi_stop+0x54>
    4d78:	00 00       	nop
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	a1 09       	sbc	r26, r1
    4d7e:	b1 09       	sbc	r27, r1
    4d80:	e4 cf       	rjmp	.-56     	; 0x4d4a <twi_stop+0x2a>
    4d82:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4d86:	e2 cd       	rjmp	.-1084   	; 0x494c <twi_handleTimeout>
    4d88:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
    4d8c:	08 95       	ret

00004d8e <__vector_39>:

ISR(TWI_vect)
{
    4d8e:	1f 92       	push	r1
    4d90:	0f 92       	push	r0
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	0f 92       	push	r0
    4d96:	11 24       	eor	r1, r1
    4d98:	0b b6       	in	r0, 0x3b	; 59
    4d9a:	0f 92       	push	r0
    4d9c:	2f 93       	push	r18
    4d9e:	3f 93       	push	r19
    4da0:	4f 93       	push	r20
    4da2:	5f 93       	push	r21
    4da4:	6f 93       	push	r22
    4da6:	7f 93       	push	r23
    4da8:	8f 93       	push	r24
    4daa:	9f 93       	push	r25
    4dac:	af 93       	push	r26
    4dae:	bf 93       	push	r27
    4db0:	ef 93       	push	r30
    4db2:	ff 93       	push	r31
  switch(TW_STATUS){
    4db4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4db8:	88 7f       	andi	r24, 0xF8	; 248
    4dba:	80 36       	cpi	r24, 0x60	; 96
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <__vector_39+0x32>
    4dbe:	9d c0       	rjmp	.+314    	; 0x4efa <__vector_39+0x16c>
    4dc0:	70 f5       	brcc	.+92     	; 0x4e1e <__vector_39+0x90>
    4dc2:	88 32       	cpi	r24, 0x28	; 40
    4dc4:	09 f4       	brne	.+2      	; 0x4dc8 <__vector_39+0x3a>
    4dc6:	5c c0       	rjmp	.+184    	; 0x4e80 <__vector_39+0xf2>
    4dc8:	90 f4       	brcc	.+36     	; 0x4dee <__vector_39+0x60>
    4dca:	80 31       	cpi	r24, 0x10	; 16
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <__vector_39+0x42>
    4dce:	55 c0       	rjmp	.+170    	; 0x4e7a <__vector_39+0xec>
    4dd0:	38 f4       	brcc	.+14     	; 0x4de0 <__vector_39+0x52>
    4dd2:	88 23       	and	r24, r24
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <__vector_39+0x4a>
    4dd6:	f3 c0       	rjmp	.+486    	; 0x4fbe <__vector_39+0x230>
    4dd8:	88 30       	cpi	r24, 0x08	; 8
    4dda:	09 f4       	brne	.+2      	; 0x4dde <__vector_39+0x50>
    4ddc:	4e c0       	rjmp	.+156    	; 0x4e7a <__vector_39+0xec>
    4dde:	f2 c0       	rjmp	.+484    	; 0x4fc4 <__vector_39+0x236>
    4de0:	88 31       	cpi	r24, 0x18	; 24
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <__vector_39+0x58>
    4de4:	4d c0       	rjmp	.+154    	; 0x4e80 <__vector_39+0xf2>
    4de6:	80 32       	cpi	r24, 0x20	; 32
    4de8:	09 f4       	brne	.+2      	; 0x4dec <__vector_39+0x5e>
    4dea:	5e c0       	rjmp	.+188    	; 0x4ea8 <__vector_39+0x11a>
    4dec:	eb c0       	rjmp	.+470    	; 0x4fc4 <__vector_39+0x236>
    4dee:	80 34       	cpi	r24, 0x40	; 64
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <__vector_39+0x66>
    4df2:	69 c0       	rjmp	.+210    	; 0x4ec6 <__vector_39+0x138>
    4df4:	50 f4       	brcc	.+20     	; 0x4e0a <__vector_39+0x7c>
    4df6:	80 33       	cpi	r24, 0x30	; 48
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <__vector_39+0x6e>
    4dfa:	56 c0       	rjmp	.+172    	; 0x4ea8 <__vector_39+0x11a>
    4dfc:	88 33       	cpi	r24, 0x38	; 56
    4dfe:	09 f0       	breq	.+2      	; 0x4e02 <__vector_39+0x74>
    4e00:	e1 c0       	rjmp	.+450    	; 0x4fc4 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4e02:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_error>
      twi_releaseBus();
    4e06:	9c dd       	rcall	.-1224   	; 0x4940 <twi_releaseBus>
      break;
    4e08:	dd c0       	rjmp	.+442    	; 0x4fc4 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4e0a:	80 35       	cpi	r24, 0x50	; 80
    4e0c:	09 f4       	brne	.+2      	; 0x4e10 <__vector_39+0x82>
    4e0e:	4f c0       	rjmp	.+158    	; 0x4eae <__vector_39+0x120>
    4e10:	88 35       	cpi	r24, 0x58	; 88
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <__vector_39+0x88>
    4e14:	5d c0       	rjmp	.+186    	; 0x4ed0 <__vector_39+0x142>
    4e16:	88 34       	cpi	r24, 0x48	; 72
    4e18:	09 f0       	breq	.+2      	; 0x4e1c <__vector_39+0x8e>
    4e1a:	d4 c0       	rjmp	.+424    	; 0x4fc4 <__vector_39+0x236>
    4e1c:	d2 c0       	rjmp	.+420    	; 0x4fc2 <__vector_39+0x234>
    4e1e:	88 39       	cpi	r24, 0x98	; 152
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <__vector_39+0x96>
    4e22:	c3 c0       	rjmp	.+390    	; 0x4faa <__vector_39+0x21c>
    4e24:	a8 f4       	brcc	.+42     	; 0x4e50 <__vector_39+0xc2>
    4e26:	88 37       	cpi	r24, 0x78	; 120
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <__vector_39+0x9e>
    4e2a:	67 c0       	rjmp	.+206    	; 0x4efa <__vector_39+0x16c>
    4e2c:	38 f4       	brcc	.+14     	; 0x4e3c <__vector_39+0xae>
    4e2e:	88 36       	cpi	r24, 0x68	; 104
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <__vector_39+0xa6>
    4e32:	63 c0       	rjmp	.+198    	; 0x4efa <__vector_39+0x16c>
    4e34:	80 37       	cpi	r24, 0x70	; 112
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <__vector_39+0xac>
    4e38:	60 c0       	rjmp	.+192    	; 0x4efa <__vector_39+0x16c>
    4e3a:	c4 c0       	rjmp	.+392    	; 0x4fc4 <__vector_39+0x236>
    4e3c:	88 38       	cpi	r24, 0x88	; 136
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <__vector_39+0xb4>
    4e40:	b4 c0       	rjmp	.+360    	; 0x4faa <__vector_39+0x21c>
    4e42:	80 39       	cpi	r24, 0x90	; 144
    4e44:	09 f4       	brne	.+2      	; 0x4e48 <__vector_39+0xba>
    4e46:	5f c0       	rjmp	.+190    	; 0x4f06 <__vector_39+0x178>
    4e48:	80 38       	cpi	r24, 0x80	; 128
    4e4a:	09 f0       	breq	.+2      	; 0x4e4e <__vector_39+0xc0>
    4e4c:	bb c0       	rjmp	.+374    	; 0x4fc4 <__vector_39+0x236>
    4e4e:	5b c0       	rjmp	.+182    	; 0x4f06 <__vector_39+0x178>
    4e50:	80 3b       	cpi	r24, 0xB0	; 176
    4e52:	09 f4       	brne	.+2      	; 0x4e56 <__vector_39+0xc8>
    4e54:	82 c0       	rjmp	.+260    	; 0x4f5a <__vector_39+0x1cc>
    4e56:	38 f4       	brcc	.+14     	; 0x4e66 <__vector_39+0xd8>
    4e58:	80 3a       	cpi	r24, 0xA0	; 160
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <__vector_39+0xd0>
    4e5c:	66 c0       	rjmp	.+204    	; 0x4f2a <__vector_39+0x19c>
    4e5e:	88 3a       	cpi	r24, 0xA8	; 168
    4e60:	09 f4       	brne	.+2      	; 0x4e64 <__vector_39+0xd6>
    4e62:	7b c0       	rjmp	.+246    	; 0x4f5a <__vector_39+0x1cc>
    4e64:	af c0       	rjmp	.+350    	; 0x4fc4 <__vector_39+0x236>
    4e66:	80 3c       	cpi	r24, 0xC0	; 192
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <__vector_39+0xde>
    4e6a:	a3 c0       	rjmp	.+326    	; 0x4fb2 <__vector_39+0x224>
    4e6c:	88 3c       	cpi	r24, 0xC8	; 200
    4e6e:	09 f4       	brne	.+2      	; 0x4e72 <__vector_39+0xe4>
    4e70:	a0 c0       	rjmp	.+320    	; 0x4fb2 <__vector_39+0x224>
    4e72:	88 3b       	cpi	r24, 0xB8	; 184
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <__vector_39+0xea>
    4e76:	86 c0       	rjmp	.+268    	; 0x4f84 <__vector_39+0x1f6>
    4e78:	a5 c0       	rjmp	.+330    	; 0x4fc4 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4e7a:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_slarw>
    4e7e:	10 c0       	rjmp	.+32     	; 0x4ea0 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e80:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4e84:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <twi_masterBufferLength>
    4e88:	98 17       	cp	r25, r24
    4e8a:	70 f5       	brcc	.+92     	; 0x4ee8 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4e8c:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	8e 0f       	add	r24, r30
    4e94:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_masterBufferIndex>
    4e98:	f0 e0       	ldi	r31, 0x00	; 0
    4e9a:	ee 57       	subi	r30, 0x7E	; 126
    4e9c:	fb 4f       	sbci	r31, 0xFB	; 251
    4e9e:	80 81       	ld	r24, Z
    4ea0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4ea4:	85 ec       	ldi	r24, 0xC5	; 197
    4ea6:	82 c0       	rjmp	.+260    	; 0x4fac <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4ea8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_error>
    4eac:	8a c0       	rjmp	.+276    	; 0x4fc2 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4eae:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	8e 0f       	add	r24, r30
    4eb6:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_masterBufferIndex>
    4eba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	ee 57       	subi	r30, 0x7E	; 126
    4ec2:	fb 4f       	sbci	r31, 0xFB	; 251
    4ec4:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4ec6:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4eca:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <twi_masterBufferLength>
    4ece:	6a c0       	rjmp	.+212    	; 0x4fa4 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4ed0:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	8e 0f       	add	r24, r30
    4ed8:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_masterBufferIndex>
    4edc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ee0:	f0 e0       	ldi	r31, 0x00	; 0
    4ee2:	ee 57       	subi	r30, 0x7E	; 126
    4ee4:	fb 4f       	sbci	r31, 0xFB	; 251
    4ee6:	80 83       	st	Z, r24
      if (twi_sendStop){
    4ee8:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_sendStop>
    4eec:	81 11       	cpse	r24, r1
    4eee:	69 c0       	rjmp	.+210    	; 0x4fc2 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4ef6:	84 ea       	ldi	r24, 0xA4	; 164
    4ef8:	5d c0       	rjmp	.+186    	; 0x4fb4 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4efa:	83 e0       	ldi	r24, 0x03	; 3
    4efc:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4f00:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <twi_rxBufferIndex>
    4f04:	cf cf       	rjmp	.-98     	; 0x4ea4 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f06:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f0a:	80 32       	cpi	r24, 0x20	; 32
    4f0c:	08 f0       	brcs	.+2      	; 0x4f10 <__vector_39+0x182>
    4f0e:	4d c0       	rjmp	.+154    	; 0x4faa <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4f10:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	8e 0f       	add	r24, r30
    4f18:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <twi_rxBufferIndex>
    4f1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f20:	f0 e0       	ldi	r31, 0x00	; 0
    4f22:	e2 5c       	subi	r30, 0xC2	; 194
    4f24:	fb 4f       	sbci	r31, 0xFB	; 251
    4f26:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4f28:	bd cf       	rjmp	.-134    	; 0x4ea4 <__vector_39+0x116>
    4f2a:	0a dd       	rcall	.-1516   	; 0x4940 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f2c:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f30:	80 32       	cpi	r24, 0x20	; 32
    4f32:	30 f4       	brcc	.+12     	; 0x4f40 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4f34:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f38:	f0 e0       	ldi	r31, 0x00	; 0
    4f3a:	e2 5c       	subi	r30, 0xC2	; 194
    4f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    4f3e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4f40:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f44:	70 e0       	ldi	r23, 0x00	; 0
    4f46:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <twi_onSlaveReceive>
    4f4a:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <twi_onSlaveReceive+0x1>
    4f4e:	8e e3       	ldi	r24, 0x3E	; 62
    4f50:	94 e0       	ldi	r25, 0x04	; 4
    4f52:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4f54:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <twi_rxBufferIndex>
      break;
    4f58:	35 c0       	rjmp	.+106    	; 0x4fc4 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4f5a:	84 e0       	ldi	r24, 0x04	; 4
    4f5c:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4f60:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4f64:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4f68:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <twi_onSlaveTransmit>
    4f6c:	f0 91 a5 04 	lds	r31, 0x04A5	; 0x8004a5 <twi_onSlaveTransmit+0x1>
    4f70:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4f72:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <twi_txBufferLength>
    4f76:	81 11       	cpse	r24, r1
    4f78:	05 c0       	rjmp	.+10     	; 0x4f84 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4f80:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4f84:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <twi_txBufferIndex>
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	8e 0f       	add	r24, r30
    4f8c:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <twi_txBufferIndex>
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	e0 5a       	subi	r30, 0xA0	; 160
    4f94:	fb 4f       	sbci	r31, 0xFB	; 251
    4f96:	80 81       	ld	r24, Z
    4f98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4f9c:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <twi_txBufferIndex>
    4fa0:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <twi_txBufferLength>
    4fa4:	98 17       	cp	r25, r24
    4fa6:	08 f4       	brcc	.+2      	; 0x4faa <__vector_39+0x21c>
    4fa8:	7d cf       	rjmp	.-262    	; 0x4ea4 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4faa:	85 e8       	ldi	r24, 0x85	; 133
    4fac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fb0:	09 c0       	rjmp	.+18     	; 0x4fc4 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4fb2:	85 ec       	ldi	r24, 0xC5	; 197
    4fb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4fb8:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
      break;
    4fbc:	03 c0       	rjmp	.+6      	; 0x4fc4 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4fbe:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_error>
      twi_stop();
    4fc2:	ae de       	rcall	.-676    	; 0x4d20 <twi_stop>
      break;
  }
}
    4fc4:	ff 91       	pop	r31
    4fc6:	ef 91       	pop	r30
    4fc8:	bf 91       	pop	r27
    4fca:	af 91       	pop	r26
    4fcc:	9f 91       	pop	r25
    4fce:	8f 91       	pop	r24
    4fd0:	7f 91       	pop	r23
    4fd2:	6f 91       	pop	r22
    4fd4:	5f 91       	pop	r21
    4fd6:	4f 91       	pop	r20
    4fd8:	3f 91       	pop	r19
    4fda:	2f 91       	pop	r18
    4fdc:	0f 90       	pop	r0
    4fde:	0b be       	out	0x3b, r0	; 59
    4fe0:	0f 90       	pop	r0
    4fe2:	0f be       	out	0x3f, r0	; 63
    4fe4:	0f 90       	pop	r0
    4fe6:	1f 90       	pop	r1
    4fe8:	18 95       	reti

00004fea <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    4fea:	cf 93       	push	r28
    4fec:	df 93       	push	r29
    4fee:	00 d0       	rcall	.+0      	; 0x4ff0 <_ZN5Print13setWriteErrorEi+0x6>
    4ff0:	1f 92       	push	r1
    4ff2:	cd b7       	in	r28, 0x3d	; 61
    4ff4:	de b7       	in	r29, 0x3e	; 62
    4ff6:	9a 83       	std	Y+2, r25	; 0x02
    4ff8:	89 83       	std	Y+1, r24	; 0x01
    4ffa:	7c 83       	std	Y+4, r23	; 0x04
    4ffc:	6b 83       	std	Y+3, r22	; 0x03
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	9a 81       	ldd	r25, Y+2	; 0x02
    5002:	2b 81       	ldd	r18, Y+3	; 0x03
    5004:	3c 81       	ldd	r19, Y+4	; 0x04
    5006:	fc 01       	movw	r30, r24
    5008:	33 83       	std	Z+3, r19	; 0x03
    500a:	22 83       	std	Z+2, r18	; 0x02
    500c:	00 00       	nop
    500e:	0f 90       	pop	r0
    5010:	0f 90       	pop	r0
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	df 91       	pop	r29
    5018:	cf 91       	pop	r28
    501a:	08 95       	ret

0000501c <_ZN6StreamC1Ev>:
    501c:	cf 93       	push	r28
    501e:	df 93       	push	r29
    5020:	1f 92       	push	r1
    5022:	1f 92       	push	r1
    5024:	cd b7       	in	r28, 0x3d	; 61
    5026:	de b7       	in	r29, 0x3e	; 62
    5028:	9a 83       	std	Y+2, r25	; 0x02
    502a:	89 83       	std	Y+1, r24	; 0x01
    502c:	89 81       	ldd	r24, Y+1	; 0x01
    502e:	9a 81       	ldd	r25, Y+2	; 0x02
    5030:	0e 94 af 12 	call	0x255e	; 0x255e <_ZN5PrintC1Ev>
    5034:	2f e0       	ldi	r18, 0x0F	; 15
    5036:	33 e0       	ldi	r19, 0x03	; 3
    5038:	89 81       	ldd	r24, Y+1	; 0x01
    503a:	9a 81       	ldd	r25, Y+2	; 0x02
    503c:	fc 01       	movw	r30, r24
    503e:	31 83       	std	Z+1, r19	; 0x01
    5040:	20 83       	st	Z, r18
    5042:	29 81       	ldd	r18, Y+1	; 0x01
    5044:	3a 81       	ldd	r19, Y+2	; 0x02
    5046:	88 ee       	ldi	r24, 0xE8	; 232
    5048:	93 e0       	ldi	r25, 0x03	; 3
    504a:	a0 e0       	ldi	r26, 0x00	; 0
    504c:	b0 e0       	ldi	r27, 0x00	; 0
    504e:	f9 01       	movw	r30, r18
    5050:	84 83       	std	Z+4, r24	; 0x04
    5052:	95 83       	std	Z+5, r25	; 0x05
    5054:	a6 83       	std	Z+6, r26	; 0x06
    5056:	b7 83       	std	Z+7, r27	; 0x07
    5058:	00 00       	nop
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	df 91       	pop	r29
    5060:	cf 91       	pop	r28
    5062:	08 95       	ret

00005064 <_ZN7TwoWireC1Ev>:
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	1f 92       	push	r1
    506a:	1f 92       	push	r1
    506c:	cd b7       	in	r28, 0x3d	; 61
    506e:	de b7       	in	r29, 0x3e	; 62
    5070:	9a 83       	std	Y+2, r25	; 0x02
    5072:	89 83       	std	Y+1, r24	; 0x01
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	9a 81       	ldd	r25, Y+2	; 0x02
    5078:	d1 df       	rcall	.-94     	; 0x501c <_ZN6StreamC1Ev>
    507a:	2d ef       	ldi	r18, 0xFD	; 253
    507c:	32 e0       	ldi	r19, 0x02	; 2
    507e:	89 81       	ldd	r24, Y+1	; 0x01
    5080:	9a 81       	ldd	r25, Y+2	; 0x02
    5082:	fc 01       	movw	r30, r24
    5084:	31 83       	std	Z+1, r19	; 0x01
    5086:	20 83       	st	Z, r18
    5088:	00 00       	nop
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	df 91       	pop	r29
    5090:	cf 91       	pop	r28
    5092:	08 95       	ret

00005094 <_ZN7TwoWire5beginEv>:
    5094:	cf 93       	push	r28
    5096:	df 93       	push	r29
    5098:	1f 92       	push	r1
    509a:	1f 92       	push	r1
    509c:	cd b7       	in	r28, 0x3d	; 61
    509e:	de b7       	in	r29, 0x3e	; 62
    50a0:	9a 83       	std	Y+2, r25	; 0x02
    50a2:	89 83       	std	Y+1, r24	; 0x01
    50a4:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    50a8:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    50ac:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    50b0:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    50b4:	e8 db       	rcall	.-2096   	; 0x4886 <twi_init>
    50b6:	89 ec       	ldi	r24, 0xC9	; 201
    50b8:	9a e2       	ldi	r25, 0x2A	; 42
    50ba:	3d dc       	rcall	.-1926   	; 0x4936 <twi_attachSlaveTxEvent>
    50bc:	8c e7       	ldi	r24, 0x7C	; 124
    50be:	9a e2       	ldi	r25, 0x2A	; 42
    50c0:	35 dc       	rcall	.-1942   	; 0x492c <twi_attachSlaveRxEvent>
    50c2:	00 00       	nop
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	df 91       	pop	r29
    50ca:	cf 91       	pop	r28
    50cc:	08 95       	ret

000050ce <_ZN7TwoWire11requestFromEhhmhh>:
    50ce:	cf 92       	push	r12
    50d0:	ef 92       	push	r14
    50d2:	0f 93       	push	r16
    50d4:	1f 93       	push	r17
    50d6:	cf 93       	push	r28
    50d8:	df 93       	push	r29
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
    50de:	2b 97       	sbiw	r28, 0x0b	; 11
    50e0:	0f b6       	in	r0, 0x3f	; 63
    50e2:	f8 94       	cli
    50e4:	de bf       	out	0x3e, r29	; 62
    50e6:	0f be       	out	0x3f, r0	; 63
    50e8:	cd bf       	out	0x3d, r28	; 61
    50ea:	9b 83       	std	Y+3, r25	; 0x03
    50ec:	8a 83       	std	Y+2, r24	; 0x02
    50ee:	6c 83       	std	Y+4, r22	; 0x04
    50f0:	4d 83       	std	Y+5, r20	; 0x05
    50f2:	0e 83       	std	Y+6, r16	; 0x06
    50f4:	1f 83       	std	Y+7, r17	; 0x07
    50f6:	28 87       	std	Y+8, r18	; 0x08
    50f8:	39 87       	std	Y+9, r19	; 0x09
    50fa:	ea 86       	std	Y+10, r14	; 0x0a
    50fc:	cb 86       	std	Y+11, r12	; 0x0b
    50fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5100:	88 23       	and	r24, r24
    5102:	d9 f1       	breq	.+118    	; 0x517a <_ZN7TwoWire11requestFromEhhmhh+0xac>
    5104:	8a 81       	ldd	r24, Y+2	; 0x02
    5106:	9b 81       	ldd	r25, Y+3	; 0x03
    5108:	6c 81       	ldd	r22, Y+4	; 0x04
    510a:	98 d0       	rcall	.+304    	; 0x523c <_ZN7TwoWire17beginTransmissionEh>
    510c:	8a 85       	ldd	r24, Y+10	; 0x0a
    510e:	84 30       	cpi	r24, 0x04	; 4
    5110:	10 f0       	brcs	.+4      	; 0x5116 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    5112:	83 e0       	ldi	r24, 0x03	; 3
    5114:	8a 87       	std	Y+10, r24	; 0x0a
    5116:	8a 85       	ldd	r24, Y+10	; 0x0a
    5118:	9f ef       	ldi	r25, 0xFF	; 255
    511a:	98 0f       	add	r25, r24
    511c:	9a 87       	std	Y+10, r25	; 0x0a
    511e:	91 e0       	ldi	r25, 0x01	; 1
    5120:	88 23       	and	r24, r24
    5122:	09 f4       	brne	.+2      	; 0x5126 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	99 23       	and	r25, r25
    5128:	21 f1       	breq	.+72     	; 0x5172 <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    512a:	8a 81       	ldd	r24, Y+2	; 0x02
    512c:	9b 81       	ldd	r25, Y+3	; 0x03
    512e:	fc 01       	movw	r30, r24
    5130:	80 81       	ld	r24, Z
    5132:	91 81       	ldd	r25, Z+1	; 0x01
    5134:	fc 01       	movw	r30, r24
    5136:	20 81       	ld	r18, Z
    5138:	31 81       	ldd	r19, Z+1	; 0x01
    513a:	8a 85       	ldd	r24, Y+10	; 0x0a
    513c:	88 2f       	mov	r24, r24
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	ac 01       	movw	r20, r24
    5142:	44 0f       	add	r20, r20
    5144:	55 1f       	adc	r21, r21
    5146:	44 0f       	add	r20, r20
    5148:	55 1f       	adc	r21, r21
    514a:	44 0f       	add	r20, r20
    514c:	55 1f       	adc	r21, r21
    514e:	8e 81       	ldd	r24, Y+6	; 0x06
    5150:	9f 81       	ldd	r25, Y+7	; 0x07
    5152:	a8 85       	ldd	r26, Y+8	; 0x08
    5154:	b9 85       	ldd	r27, Y+9	; 0x09
    5156:	04 c0       	rjmp	.+8      	; 0x5160 <_ZN7TwoWire11requestFromEhhmhh+0x92>
    5158:	b6 95       	lsr	r27
    515a:	a7 95       	ror	r26
    515c:	97 95       	ror	r25
    515e:	87 95       	ror	r24
    5160:	4a 95       	dec	r20
    5162:	d2 f7       	brpl	.-12     	; 0x5158 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    5164:	48 2f       	mov	r20, r24
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	9b 81       	ldd	r25, Y+3	; 0x03
    516a:	64 2f       	mov	r22, r20
    516c:	f9 01       	movw	r30, r18
    516e:	19 95       	eicall
    5170:	d2 cf       	rjmp	.-92     	; 0x5116 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    5172:	8a 81       	ldd	r24, Y+2	; 0x02
    5174:	9b 81       	ldd	r25, Y+3	; 0x03
    5176:	60 e0       	ldi	r22, 0x00	; 0
    5178:	91 d0       	rcall	.+290    	; 0x529c <_ZN7TwoWire15endTransmissionEh>
    517a:	8d 81       	ldd	r24, Y+5	; 0x05
    517c:	81 32       	cpi	r24, 0x21	; 33
    517e:	10 f0       	brcs	.+4      	; 0x5184 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    5180:	80 e2       	ldi	r24, 0x20	; 32
    5182:	8d 83       	std	Y+5, r24	; 0x05
    5184:	2b 85       	ldd	r18, Y+11	; 0x0b
    5186:	4d 81       	ldd	r20, Y+5	; 0x05
    5188:	60 eb       	ldi	r22, 0xB0	; 176
    518a:	74 e0       	ldi	r23, 0x04	; 4
    518c:	8c 81       	ldd	r24, Y+4	; 0x04
    518e:	f2 db       	rcall	.-2076   	; 0x4974 <twi_readFrom>
    5190:	89 83       	std	Y+1, r24	; 0x01
    5192:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    519c:	89 81       	ldd	r24, Y+1	; 0x01
    519e:	2b 96       	adiw	r28, 0x0b	; 11
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	f8 94       	cli
    51a4:	de bf       	out	0x3e, r29	; 62
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	df 91       	pop	r29
    51ac:	cf 91       	pop	r28
    51ae:	1f 91       	pop	r17
    51b0:	0f 91       	pop	r16
    51b2:	ef 90       	pop	r14
    51b4:	cf 90       	pop	r12
    51b6:	08 95       	ret

000051b8 <_ZN7TwoWire11requestFromEhhh>:
    51b8:	cf 92       	push	r12
    51ba:	ef 92       	push	r14
    51bc:	0f 93       	push	r16
    51be:	1f 93       	push	r17
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	00 d0       	rcall	.+0      	; 0x51c6 <_ZN7TwoWire11requestFromEhhh+0xe>
    51c6:	1f 92       	push	r1
    51c8:	1f 92       	push	r1
    51ca:	cd b7       	in	r28, 0x3d	; 61
    51cc:	de b7       	in	r29, 0x3e	; 62
    51ce:	9a 83       	std	Y+2, r25	; 0x02
    51d0:	89 83       	std	Y+1, r24	; 0x01
    51d2:	6b 83       	std	Y+3, r22	; 0x03
    51d4:	4c 83       	std	Y+4, r20	; 0x04
    51d6:	2d 83       	std	Y+5, r18	; 0x05
    51d8:	89 81       	ldd	r24, Y+1	; 0x01
    51da:	9a 81       	ldd	r25, Y+2	; 0x02
    51dc:	cd 80       	ldd	r12, Y+5	; 0x05
    51de:	e1 2c       	mov	r14, r1
    51e0:	00 e0       	ldi	r16, 0x00	; 0
    51e2:	10 e0       	ldi	r17, 0x00	; 0
    51e4:	98 01       	movw	r18, r16
    51e6:	4c 81       	ldd	r20, Y+4	; 0x04
    51e8:	6b 81       	ldd	r22, Y+3	; 0x03
    51ea:	71 df       	rcall	.-286    	; 0x50ce <_ZN7TwoWire11requestFromEhhmhh>
    51ec:	0f 90       	pop	r0
    51ee:	0f 90       	pop	r0
    51f0:	0f 90       	pop	r0
    51f2:	0f 90       	pop	r0
    51f4:	0f 90       	pop	r0
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	ef 90       	pop	r14
    5200:	cf 90       	pop	r12
    5202:	08 95       	ret

00005204 <_ZN7TwoWire11requestFromEii>:
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	00 d0       	rcall	.+0      	; 0x520a <_ZN7TwoWire11requestFromEii+0x6>
    520a:	00 d0       	rcall	.+0      	; 0x520c <_ZN7TwoWire11requestFromEii+0x8>
    520c:	cd b7       	in	r28, 0x3d	; 61
    520e:	de b7       	in	r29, 0x3e	; 62
    5210:	9a 83       	std	Y+2, r25	; 0x02
    5212:	89 83       	std	Y+1, r24	; 0x01
    5214:	7c 83       	std	Y+4, r23	; 0x04
    5216:	6b 83       	std	Y+3, r22	; 0x03
    5218:	5e 83       	std	Y+6, r21	; 0x06
    521a:	4d 83       	std	Y+5, r20	; 0x05
    521c:	4d 81       	ldd	r20, Y+5	; 0x05
    521e:	3b 81       	ldd	r19, Y+3	; 0x03
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	9a 81       	ldd	r25, Y+2	; 0x02
    5224:	21 e0       	ldi	r18, 0x01	; 1
    5226:	63 2f       	mov	r22, r19
    5228:	c7 df       	rcall	.-114    	; 0x51b8 <_ZN7TwoWire11requestFromEhhh>
    522a:	26 96       	adiw	r28, 0x06	; 6
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	f8 94       	cli
    5230:	de bf       	out	0x3e, r29	; 62
    5232:	0f be       	out	0x3f, r0	; 63
    5234:	cd bf       	out	0x3d, r28	; 61
    5236:	df 91       	pop	r29
    5238:	cf 91       	pop	r28
    523a:	08 95       	ret

0000523c <_ZN7TwoWire17beginTransmissionEh>:
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	00 d0       	rcall	.+0      	; 0x5242 <_ZN7TwoWire17beginTransmissionEh+0x6>
    5242:	cd b7       	in	r28, 0x3d	; 61
    5244:	de b7       	in	r29, 0x3e	; 62
    5246:	9a 83       	std	Y+2, r25	; 0x02
    5248:	89 83       	std	Y+1, r24	; 0x01
    524a:	6b 83       	std	Y+3, r22	; 0x03
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    5252:	8b 81       	ldd	r24, Y+3	; 0x03
    5254:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <_ZN7TwoWire9txAddressE>
    5258:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    525c:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    5260:	00 00       	nop
    5262:	0f 90       	pop	r0
    5264:	0f 90       	pop	r0
    5266:	0f 90       	pop	r0
    5268:	df 91       	pop	r29
    526a:	cf 91       	pop	r28
    526c:	08 95       	ret

0000526e <_ZN7TwoWire17beginTransmissionEi>:
    526e:	cf 93       	push	r28
    5270:	df 93       	push	r29
    5272:	00 d0       	rcall	.+0      	; 0x5274 <_ZN7TwoWire17beginTransmissionEi+0x6>
    5274:	1f 92       	push	r1
    5276:	cd b7       	in	r28, 0x3d	; 61
    5278:	de b7       	in	r29, 0x3e	; 62
    527a:	9a 83       	std	Y+2, r25	; 0x02
    527c:	89 83       	std	Y+1, r24	; 0x01
    527e:	7c 83       	std	Y+4, r23	; 0x04
    5280:	6b 83       	std	Y+3, r22	; 0x03
    5282:	2b 81       	ldd	r18, Y+3	; 0x03
    5284:	89 81       	ldd	r24, Y+1	; 0x01
    5286:	9a 81       	ldd	r25, Y+2	; 0x02
    5288:	62 2f       	mov	r22, r18
    528a:	d8 df       	rcall	.-80     	; 0x523c <_ZN7TwoWire17beginTransmissionEh>
    528c:	00 00       	nop
    528e:	0f 90       	pop	r0
    5290:	0f 90       	pop	r0
    5292:	0f 90       	pop	r0
    5294:	0f 90       	pop	r0
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	08 95       	ret

0000529c <_ZN7TwoWire15endTransmissionEh>:
    529c:	0f 93       	push	r16
    529e:	cf 93       	push	r28
    52a0:	df 93       	push	r29
    52a2:	00 d0       	rcall	.+0      	; 0x52a4 <_ZN7TwoWire15endTransmissionEh+0x8>
    52a4:	1f 92       	push	r1
    52a6:	cd b7       	in	r28, 0x3d	; 61
    52a8:	de b7       	in	r29, 0x3e	; 62
    52aa:	9b 83       	std	Y+3, r25	; 0x03
    52ac:	8a 83       	std	Y+2, r24	; 0x02
    52ae:	6c 83       	std	Y+4, r22	; 0x04
    52b0:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    52b4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <_ZN7TwoWire9txAddressE>
    52b8:	0c 81       	ldd	r16, Y+4	; 0x04
    52ba:	21 e0       	ldi	r18, 0x01	; 1
    52bc:	49 2f       	mov	r20, r25
    52be:	63 ed       	ldi	r22, 0xD3	; 211
    52c0:	74 e0       	ldi	r23, 0x04	; 4
    52c2:	3f dc       	rcall	.-1922   	; 0x4b42 <twi_writeTo>
    52c4:	89 83       	std	Y+1, r24	; 0x01
    52c6:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    52ca:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    52ce:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    52d2:	89 81       	ldd	r24, Y+1	; 0x01
    52d4:	0f 90       	pop	r0
    52d6:	0f 90       	pop	r0
    52d8:	0f 90       	pop	r0
    52da:	0f 90       	pop	r0
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	0f 91       	pop	r16
    52e2:	08 95       	ret

000052e4 <_ZN7TwoWire15endTransmissionEv>:
    52e4:	cf 93       	push	r28
    52e6:	df 93       	push	r29
    52e8:	1f 92       	push	r1
    52ea:	1f 92       	push	r1
    52ec:	cd b7       	in	r28, 0x3d	; 61
    52ee:	de b7       	in	r29, 0x3e	; 62
    52f0:	9a 83       	std	Y+2, r25	; 0x02
    52f2:	89 83       	std	Y+1, r24	; 0x01
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
    52f6:	9a 81       	ldd	r25, Y+2	; 0x02
    52f8:	61 e0       	ldi	r22, 0x01	; 1
    52fa:	d0 df       	rcall	.-96     	; 0x529c <_ZN7TwoWire15endTransmissionEh>
    52fc:	0f 90       	pop	r0
    52fe:	0f 90       	pop	r0
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	08 95       	ret

00005306 <_ZN7TwoWire5writeEh>:
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	00 d0       	rcall	.+0      	; 0x530c <_ZN7TwoWire5writeEh+0x6>
    530c:	cd b7       	in	r28, 0x3d	; 61
    530e:	de b7       	in	r29, 0x3e	; 62
    5310:	9a 83       	std	Y+2, r25	; 0x02
    5312:	89 83       	std	Y+1, r24	; 0x01
    5314:	6b 83       	std	Y+3, r22	; 0x03
    5316:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    531a:	88 23       	and	r24, r24
    531c:	f9 f0       	breq	.+62     	; 0x535c <_ZN7TwoWire5writeEh+0x56>
    531e:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    5322:	80 32       	cpi	r24, 0x20	; 32
    5324:	40 f0       	brcs	.+16     	; 0x5336 <_ZN7TwoWire5writeEh+0x30>
    5326:	89 81       	ldd	r24, Y+1	; 0x01
    5328:	9a 81       	ldd	r25, Y+2	; 0x02
    532a:	61 e0       	ldi	r22, 0x01	; 1
    532c:	70 e0       	ldi	r23, 0x00	; 0
    532e:	5d de       	rcall	.-838    	; 0x4fea <_ZN5Print13setWriteErrorEi>
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	19 c0       	rjmp	.+50     	; 0x5368 <_ZN7TwoWire5writeEh+0x62>
    5336:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    533a:	88 2f       	mov	r24, r24
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	2b 81       	ldd	r18, Y+3	; 0x03
    5340:	8d 52       	subi	r24, 0x2D	; 45
    5342:	9b 4f       	sbci	r25, 0xFB	; 251
    5344:	fc 01       	movw	r30, r24
    5346:	20 83       	st	Z, r18
    5348:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    534c:	8f 5f       	subi	r24, 0xFF	; 255
    534e:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5352:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5356:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    535a:	04 c0       	rjmp	.+8      	; 0x5364 <_ZN7TwoWire5writeEh+0x5e>
    535c:	ce 01       	movw	r24, r28
    535e:	03 96       	adiw	r24, 0x03	; 3
    5360:	61 e0       	ldi	r22, 0x01	; 1
    5362:	bc da       	rcall	.-2696   	; 0x48dc <twi_transmit>
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	0f 90       	pop	r0
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	08 95       	ret

00005374 <_ZN7TwoWire5writeEPKhj>:
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
    537c:	28 97       	sbiw	r28, 0x08	; 8
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	f8 94       	cli
    5382:	de bf       	out	0x3e, r29	; 62
    5384:	0f be       	out	0x3f, r0	; 63
    5386:	cd bf       	out	0x3d, r28	; 61
    5388:	9c 83       	std	Y+4, r25	; 0x04
    538a:	8b 83       	std	Y+3, r24	; 0x03
    538c:	7e 83       	std	Y+6, r23	; 0x06
    538e:	6d 83       	std	Y+5, r22	; 0x05
    5390:	58 87       	std	Y+8, r21	; 0x08
    5392:	4f 83       	std	Y+7, r20	; 0x07
    5394:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    5398:	88 23       	and	r24, r24
    539a:	21 f1       	breq	.+72     	; 0x53e4 <_ZN7TwoWire5writeEPKhj+0x70>
    539c:	1a 82       	std	Y+2, r1	; 0x02
    539e:	19 82       	std	Y+1, r1	; 0x01
    53a0:	29 81       	ldd	r18, Y+1	; 0x01
    53a2:	3a 81       	ldd	r19, Y+2	; 0x02
    53a4:	8f 81       	ldd	r24, Y+7	; 0x07
    53a6:	98 85       	ldd	r25, Y+8	; 0x08
    53a8:	28 17       	cp	r18, r24
    53aa:	39 07       	cpc	r19, r25
    53ac:	00 f5       	brcc	.+64     	; 0x53ee <_ZN7TwoWire5writeEPKhj+0x7a>
    53ae:	8b 81       	ldd	r24, Y+3	; 0x03
    53b0:	9c 81       	ldd	r25, Y+4	; 0x04
    53b2:	fc 01       	movw	r30, r24
    53b4:	80 81       	ld	r24, Z
    53b6:	91 81       	ldd	r25, Z+1	; 0x01
    53b8:	fc 01       	movw	r30, r24
    53ba:	20 81       	ld	r18, Z
    53bc:	31 81       	ldd	r19, Z+1	; 0x01
    53be:	4d 81       	ldd	r20, Y+5	; 0x05
    53c0:	5e 81       	ldd	r21, Y+6	; 0x06
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	9a 81       	ldd	r25, Y+2	; 0x02
    53c6:	84 0f       	add	r24, r20
    53c8:	95 1f       	adc	r25, r21
    53ca:	fc 01       	movw	r30, r24
    53cc:	40 81       	ld	r20, Z
    53ce:	8b 81       	ldd	r24, Y+3	; 0x03
    53d0:	9c 81       	ldd	r25, Y+4	; 0x04
    53d2:	64 2f       	mov	r22, r20
    53d4:	f9 01       	movw	r30, r18
    53d6:	19 95       	eicall
    53d8:	89 81       	ldd	r24, Y+1	; 0x01
    53da:	9a 81       	ldd	r25, Y+2	; 0x02
    53dc:	01 96       	adiw	r24, 0x01	; 1
    53de:	9a 83       	std	Y+2, r25	; 0x02
    53e0:	89 83       	std	Y+1, r24	; 0x01
    53e2:	de cf       	rjmp	.-68     	; 0x53a0 <_ZN7TwoWire5writeEPKhj+0x2c>
    53e4:	2f 81       	ldd	r18, Y+7	; 0x07
    53e6:	8d 81       	ldd	r24, Y+5	; 0x05
    53e8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ea:	62 2f       	mov	r22, r18
    53ec:	77 da       	rcall	.-2834   	; 0x48dc <twi_transmit>
    53ee:	8f 81       	ldd	r24, Y+7	; 0x07
    53f0:	98 85       	ldd	r25, Y+8	; 0x08
    53f2:	28 96       	adiw	r28, 0x08	; 8
    53f4:	0f b6       	in	r0, 0x3f	; 63
    53f6:	f8 94       	cli
    53f8:	de bf       	out	0x3e, r29	; 62
    53fa:	0f be       	out	0x3f, r0	; 63
    53fc:	cd bf       	out	0x3d, r28	; 61
    53fe:	df 91       	pop	r29
    5400:	cf 91       	pop	r28
    5402:	08 95       	ret

00005404 <_ZN7TwoWire9availableEv>:
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
    5408:	1f 92       	push	r1
    540a:	1f 92       	push	r1
    540c:	cd b7       	in	r28, 0x3d	; 61
    540e:	de b7       	in	r29, 0x3e	; 62
    5410:	9a 83       	std	Y+2, r25	; 0x02
    5412:	89 83       	std	Y+1, r24	; 0x01
    5414:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    5418:	28 2f       	mov	r18, r24
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5420:	88 2f       	mov	r24, r24
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	a9 01       	movw	r20, r18
    5426:	48 1b       	sub	r20, r24
    5428:	59 0b       	sbc	r21, r25
    542a:	ca 01       	movw	r24, r20
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	08 95       	ret

00005436 <_ZN7TwoWire4readEv>:
    5436:	cf 93       	push	r28
    5438:	df 93       	push	r29
    543a:	00 d0       	rcall	.+0      	; 0x543c <_ZN7TwoWire4readEv+0x6>
    543c:	1f 92       	push	r1
    543e:	cd b7       	in	r28, 0x3d	; 61
    5440:	de b7       	in	r29, 0x3e	; 62
    5442:	9c 83       	std	Y+4, r25	; 0x04
    5444:	8b 83       	std	Y+3, r24	; 0x03
    5446:	8f ef       	ldi	r24, 0xFF	; 255
    5448:	9f ef       	ldi	r25, 0xFF	; 255
    544a:	9a 83       	std	Y+2, r25	; 0x02
    544c:	89 83       	std	Y+1, r24	; 0x01
    544e:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5452:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    5456:	98 17       	cp	r25, r24
    5458:	88 f4       	brcc	.+34     	; 0x547c <_ZN7TwoWire4readEv+0x46>
    545a:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    545e:	88 2f       	mov	r24, r24
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	80 55       	subi	r24, 0x50	; 80
    5464:	9b 4f       	sbci	r25, 0xFB	; 251
    5466:	fc 01       	movw	r30, r24
    5468:	80 81       	ld	r24, Z
    546a:	88 2f       	mov	r24, r24
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	9a 83       	std	Y+2, r25	; 0x02
    5470:	89 83       	std	Y+1, r24	; 0x01
    5472:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5476:	8f 5f       	subi	r24, 0xFF	; 255
    5478:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    547c:	89 81       	ldd	r24, Y+1	; 0x01
    547e:	9a 81       	ldd	r25, Y+2	; 0x02
    5480:	0f 90       	pop	r0
    5482:	0f 90       	pop	r0
    5484:	0f 90       	pop	r0
    5486:	0f 90       	pop	r0
    5488:	df 91       	pop	r29
    548a:	cf 91       	pop	r28
    548c:	08 95       	ret

0000548e <_ZN7TwoWire4peekEv>:
    548e:	cf 93       	push	r28
    5490:	df 93       	push	r29
    5492:	00 d0       	rcall	.+0      	; 0x5494 <_ZN7TwoWire4peekEv+0x6>
    5494:	1f 92       	push	r1
    5496:	cd b7       	in	r28, 0x3d	; 61
    5498:	de b7       	in	r29, 0x3e	; 62
    549a:	9c 83       	std	Y+4, r25	; 0x04
    549c:	8b 83       	std	Y+3, r24	; 0x03
    549e:	8f ef       	ldi	r24, 0xFF	; 255
    54a0:	9f ef       	ldi	r25, 0xFF	; 255
    54a2:	9a 83       	std	Y+2, r25	; 0x02
    54a4:	89 83       	std	Y+1, r24	; 0x01
    54a6:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    54aa:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    54ae:	98 17       	cp	r25, r24
    54b0:	60 f4       	brcc	.+24     	; 0x54ca <_ZN7TwoWire4peekEv+0x3c>
    54b2:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    54b6:	88 2f       	mov	r24, r24
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	80 55       	subi	r24, 0x50	; 80
    54bc:	9b 4f       	sbci	r25, 0xFB	; 251
    54be:	fc 01       	movw	r30, r24
    54c0:	80 81       	ld	r24, Z
    54c2:	88 2f       	mov	r24, r24
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	9a 83       	std	Y+2, r25	; 0x02
    54c8:	89 83       	std	Y+1, r24	; 0x01
    54ca:	89 81       	ldd	r24, Y+1	; 0x01
    54cc:	9a 81       	ldd	r25, Y+2	; 0x02
    54ce:	0f 90       	pop	r0
    54d0:	0f 90       	pop	r0
    54d2:	0f 90       	pop	r0
    54d4:	0f 90       	pop	r0
    54d6:	df 91       	pop	r29
    54d8:	cf 91       	pop	r28
    54da:	08 95       	ret

000054dc <_ZN7TwoWire5flushEv>:
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	1f 92       	push	r1
    54e2:	1f 92       	push	r1
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
    54e8:	9a 83       	std	Y+2, r25	; 0x02
    54ea:	89 83       	std	Y+1, r24	; 0x01
    54ec:	00 00       	nop
    54ee:	0f 90       	pop	r0
    54f0:	0f 90       	pop	r0
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	08 95       	ret

000054f8 <_ZN7TwoWire16onReceiveServiceEPhi>:
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	00 d0       	rcall	.+0      	; 0x54fe <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    54fe:	1f 92       	push	r1
    5500:	1f 92       	push	r1
    5502:	cd b7       	in	r28, 0x3d	; 61
    5504:	de b7       	in	r29, 0x3e	; 62
    5506:	9b 83       	std	Y+3, r25	; 0x03
    5508:	8a 83       	std	Y+2, r24	; 0x02
    550a:	7d 83       	std	Y+5, r23	; 0x05
    550c:	6c 83       	std	Y+4, r22	; 0x04
    550e:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN7TwoWire14user_onReceiveE>
    5512:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <_ZN7TwoWire14user_onReceiveE+0x1>
    5516:	89 2b       	or	r24, r25
    5518:	89 f1       	breq	.+98     	; 0x557c <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    551a:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    551e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    5522:	98 17       	cp	r25, r24
    5524:	68 f1       	brcs	.+90     	; 0x5580 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    5526:	19 82       	std	Y+1, r1	; 0x01
    5528:	89 81       	ldd	r24, Y+1	; 0x01
    552a:	28 2f       	mov	r18, r24
    552c:	30 e0       	ldi	r19, 0x00	; 0
    552e:	8c 81       	ldd	r24, Y+4	; 0x04
    5530:	9d 81       	ldd	r25, Y+5	; 0x05
    5532:	28 17       	cp	r18, r24
    5534:	39 07       	cpc	r19, r25
    5536:	a4 f4       	brge	.+40     	; 0x5560 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    5538:	89 81       	ldd	r24, Y+1	; 0x01
    553a:	88 2f       	mov	r24, r24
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	29 81       	ldd	r18, Y+1	; 0x01
    5540:	22 2f       	mov	r18, r18
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	4a 81       	ldd	r20, Y+2	; 0x02
    5546:	5b 81       	ldd	r21, Y+3	; 0x03
    5548:	24 0f       	add	r18, r20
    554a:	35 1f       	adc	r19, r21
    554c:	f9 01       	movw	r30, r18
    554e:	20 81       	ld	r18, Z
    5550:	80 55       	subi	r24, 0x50	; 80
    5552:	9b 4f       	sbci	r25, 0xFB	; 251
    5554:	fc 01       	movw	r30, r24
    5556:	20 83       	st	Z, r18
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	8f 5f       	subi	r24, 0xFF	; 255
    555c:	89 83       	std	Y+1, r24	; 0x01
    555e:	e4 cf       	rjmp	.-56     	; 0x5528 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    5560:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5564:	8c 81       	ldd	r24, Y+4	; 0x04
    5566:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    556a:	20 91 f8 04 	lds	r18, 0x04F8	; 0x8004f8 <_ZN7TwoWire14user_onReceiveE>
    556e:	30 91 f9 04 	lds	r19, 0x04F9	; 0x8004f9 <_ZN7TwoWire14user_onReceiveE+0x1>
    5572:	8c 81       	ldd	r24, Y+4	; 0x04
    5574:	9d 81       	ldd	r25, Y+5	; 0x05
    5576:	f9 01       	movw	r30, r18
    5578:	19 95       	eicall
    557a:	03 c0       	rjmp	.+6      	; 0x5582 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    557c:	00 00       	nop
    557e:	01 c0       	rjmp	.+2      	; 0x5582 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    5580:	00 00       	nop
    5582:	0f 90       	pop	r0
    5584:	0f 90       	pop	r0
    5586:	0f 90       	pop	r0
    5588:	0f 90       	pop	r0
    558a:	0f 90       	pop	r0
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	08 95       	ret

00005592 <_ZN7TwoWire16onRequestServiceEv>:
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	cd b7       	in	r28, 0x3d	; 61
    5598:	de b7       	in	r29, 0x3e	; 62
    559a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14user_onRequestE>
    559e:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <_ZN7TwoWire14user_onRequestE+0x1>
    55a2:	89 2b       	or	r24, r25
    55a4:	59 f0       	breq	.+22     	; 0x55bc <_ZN7TwoWire16onRequestServiceEv+0x2a>
    55a6:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    55aa:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    55ae:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14user_onRequestE>
    55b2:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <_ZN7TwoWire14user_onRequestE+0x1>
    55b6:	fc 01       	movw	r30, r24
    55b8:	19 95       	eicall
    55ba:	01 c0       	rjmp	.+2      	; 0x55be <_ZN7TwoWire16onRequestServiceEv+0x2c>
    55bc:	00 00       	nop
    55be:	df 91       	pop	r29
    55c0:	cf 91       	pop	r28
    55c2:	08 95       	ret

000055c4 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    55c4:	cf 93       	push	r28
    55c6:	df 93       	push	r29
    55c8:	00 d0       	rcall	.+0      	; 0x55ca <_Z41__static_initialization_and_destruction_0ii+0x6>
    55ca:	1f 92       	push	r1
    55cc:	cd b7       	in	r28, 0x3d	; 61
    55ce:	de b7       	in	r29, 0x3e	; 62
    55d0:	9a 83       	std	Y+2, r25	; 0x02
    55d2:	89 83       	std	Y+1, r24	; 0x01
    55d4:	7c 83       	std	Y+4, r23	; 0x04
    55d6:	6b 83       	std	Y+3, r22	; 0x03
    55d8:	89 81       	ldd	r24, Y+1	; 0x01
    55da:	9a 81       	ldd	r25, Y+2	; 0x02
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	39 f4       	brne	.+14     	; 0x55ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
    55e0:	8b 81       	ldd	r24, Y+3	; 0x03
    55e2:	9c 81       	ldd	r25, Y+4	; 0x04
    55e4:	01 96       	adiw	r24, 0x01	; 1
    55e6:	19 f4       	brne	.+6      	; 0x55ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
    55e8:	8a ef       	ldi	r24, 0xFA	; 250
    55ea:	94 e0       	ldi	r25, 0x04	; 4
    55ec:	3b dd       	rcall	.-1418   	; 0x5064 <_ZN7TwoWireC1Ev>
    55ee:	00 00       	nop
    55f0:	0f 90       	pop	r0
    55f2:	0f 90       	pop	r0
    55f4:	0f 90       	pop	r0
    55f6:	0f 90       	pop	r0
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	08 95       	ret

000055fe <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	cd b7       	in	r28, 0x3d	; 61
    5604:	de b7       	in	r29, 0x3e	; 62
    5606:	6f ef       	ldi	r22, 0xFF	; 255
    5608:	7f ef       	ldi	r23, 0xFF	; 255
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	da df       	rcall	.-76     	; 0x55c4 <_Z41__static_initialization_and_destruction_0ii>
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	08 95       	ret

00005616 <__subsf3>:
    5616:	50 58       	subi	r21, 0x80	; 128

00005618 <__addsf3>:
    5618:	bb 27       	eor	r27, r27
    561a:	aa 27       	eor	r26, r26
    561c:	0e d0       	rcall	.+28     	; 0x563a <__addsf3x>
    561e:	09 c1       	rjmp	.+530    	; 0x5832 <__fp_round>
    5620:	fa d0       	rcall	.+500    	; 0x5816 <__fp_pscA>
    5622:	30 f0       	brcs	.+12     	; 0x5630 <__addsf3+0x18>
    5624:	ff d0       	rcall	.+510    	; 0x5824 <__fp_pscB>
    5626:	20 f0       	brcs	.+8      	; 0x5630 <__addsf3+0x18>
    5628:	31 f4       	brne	.+12     	; 0x5636 <__addsf3+0x1e>
    562a:	9f 3f       	cpi	r25, 0xFF	; 255
    562c:	11 f4       	brne	.+4      	; 0x5632 <__addsf3+0x1a>
    562e:	1e f4       	brtc	.+6      	; 0x5636 <__addsf3+0x1e>
    5630:	ef c0       	rjmp	.+478    	; 0x5810 <__fp_nan>
    5632:	0e f4       	brtc	.+2      	; 0x5636 <__addsf3+0x1e>
    5634:	e0 95       	com	r30
    5636:	e7 fb       	bst	r30, 7
    5638:	e5 c0       	rjmp	.+458    	; 0x5804 <__fp_inf>

0000563a <__addsf3x>:
    563a:	e9 2f       	mov	r30, r25
    563c:	0b d1       	rcall	.+534    	; 0x5854 <__fp_split3>
    563e:	80 f3       	brcs	.-32     	; 0x5620 <__addsf3+0x8>
    5640:	ba 17       	cp	r27, r26
    5642:	62 07       	cpc	r22, r18
    5644:	73 07       	cpc	r23, r19
    5646:	84 07       	cpc	r24, r20
    5648:	95 07       	cpc	r25, r21
    564a:	18 f0       	brcs	.+6      	; 0x5652 <__addsf3x+0x18>
    564c:	71 f4       	brne	.+28     	; 0x566a <__addsf3x+0x30>
    564e:	9e f5       	brtc	.+102    	; 0x56b6 <__addsf3x+0x7c>
    5650:	23 c1       	rjmp	.+582    	; 0x5898 <__fp_zero>
    5652:	0e f4       	brtc	.+2      	; 0x5656 <__addsf3x+0x1c>
    5654:	e0 95       	com	r30
    5656:	0b 2e       	mov	r0, r27
    5658:	ba 2f       	mov	r27, r26
    565a:	a0 2d       	mov	r26, r0
    565c:	0b 01       	movw	r0, r22
    565e:	b9 01       	movw	r22, r18
    5660:	90 01       	movw	r18, r0
    5662:	0c 01       	movw	r0, r24
    5664:	ca 01       	movw	r24, r20
    5666:	a0 01       	movw	r20, r0
    5668:	11 24       	eor	r1, r1
    566a:	ff 27       	eor	r31, r31
    566c:	59 1b       	sub	r21, r25
    566e:	99 f0       	breq	.+38     	; 0x5696 <__addsf3x+0x5c>
    5670:	59 3f       	cpi	r21, 0xF9	; 249
    5672:	50 f4       	brcc	.+20     	; 0x5688 <__addsf3x+0x4e>
    5674:	50 3e       	cpi	r21, 0xE0	; 224
    5676:	68 f1       	brcs	.+90     	; 0x56d2 <__addsf3x+0x98>
    5678:	1a 16       	cp	r1, r26
    567a:	f0 40       	sbci	r31, 0x00	; 0
    567c:	a2 2f       	mov	r26, r18
    567e:	23 2f       	mov	r18, r19
    5680:	34 2f       	mov	r19, r20
    5682:	44 27       	eor	r20, r20
    5684:	58 5f       	subi	r21, 0xF8	; 248
    5686:	f3 cf       	rjmp	.-26     	; 0x566e <__addsf3x+0x34>
    5688:	46 95       	lsr	r20
    568a:	37 95       	ror	r19
    568c:	27 95       	ror	r18
    568e:	a7 95       	ror	r26
    5690:	f0 40       	sbci	r31, 0x00	; 0
    5692:	53 95       	inc	r21
    5694:	c9 f7       	brne	.-14     	; 0x5688 <__addsf3x+0x4e>
    5696:	7e f4       	brtc	.+30     	; 0x56b6 <__addsf3x+0x7c>
    5698:	1f 16       	cp	r1, r31
    569a:	ba 0b       	sbc	r27, r26
    569c:	62 0b       	sbc	r22, r18
    569e:	73 0b       	sbc	r23, r19
    56a0:	84 0b       	sbc	r24, r20
    56a2:	ba f0       	brmi	.+46     	; 0x56d2 <__addsf3x+0x98>
    56a4:	91 50       	subi	r25, 0x01	; 1
    56a6:	a1 f0       	breq	.+40     	; 0x56d0 <__addsf3x+0x96>
    56a8:	ff 0f       	add	r31, r31
    56aa:	bb 1f       	adc	r27, r27
    56ac:	66 1f       	adc	r22, r22
    56ae:	77 1f       	adc	r23, r23
    56b0:	88 1f       	adc	r24, r24
    56b2:	c2 f7       	brpl	.-16     	; 0x56a4 <__addsf3x+0x6a>
    56b4:	0e c0       	rjmp	.+28     	; 0x56d2 <__addsf3x+0x98>
    56b6:	ba 0f       	add	r27, r26
    56b8:	62 1f       	adc	r22, r18
    56ba:	73 1f       	adc	r23, r19
    56bc:	84 1f       	adc	r24, r20
    56be:	48 f4       	brcc	.+18     	; 0x56d2 <__addsf3x+0x98>
    56c0:	87 95       	ror	r24
    56c2:	77 95       	ror	r23
    56c4:	67 95       	ror	r22
    56c6:	b7 95       	ror	r27
    56c8:	f7 95       	ror	r31
    56ca:	9e 3f       	cpi	r25, 0xFE	; 254
    56cc:	08 f0       	brcs	.+2      	; 0x56d0 <__addsf3x+0x96>
    56ce:	b3 cf       	rjmp	.-154    	; 0x5636 <__addsf3+0x1e>
    56d0:	93 95       	inc	r25
    56d2:	88 0f       	add	r24, r24
    56d4:	08 f0       	brcs	.+2      	; 0x56d8 <__addsf3x+0x9e>
    56d6:	99 27       	eor	r25, r25
    56d8:	ee 0f       	add	r30, r30
    56da:	97 95       	ror	r25
    56dc:	87 95       	ror	r24
    56de:	08 95       	ret

000056e0 <__fixsfsi>:
    56e0:	04 d0       	rcall	.+8      	; 0x56ea <__fixunssfsi>
    56e2:	68 94       	set
    56e4:	b1 11       	cpse	r27, r1
    56e6:	d9 c0       	rjmp	.+434    	; 0x589a <__fp_szero>
    56e8:	08 95       	ret

000056ea <__fixunssfsi>:
    56ea:	bc d0       	rcall	.+376    	; 0x5864 <__fp_splitA>
    56ec:	88 f0       	brcs	.+34     	; 0x5710 <__fixunssfsi+0x26>
    56ee:	9f 57       	subi	r25, 0x7F	; 127
    56f0:	90 f0       	brcs	.+36     	; 0x5716 <__fixunssfsi+0x2c>
    56f2:	b9 2f       	mov	r27, r25
    56f4:	99 27       	eor	r25, r25
    56f6:	b7 51       	subi	r27, 0x17	; 23
    56f8:	a0 f0       	brcs	.+40     	; 0x5722 <__fixunssfsi+0x38>
    56fa:	d1 f0       	breq	.+52     	; 0x5730 <__fixunssfsi+0x46>
    56fc:	66 0f       	add	r22, r22
    56fe:	77 1f       	adc	r23, r23
    5700:	88 1f       	adc	r24, r24
    5702:	99 1f       	adc	r25, r25
    5704:	1a f0       	brmi	.+6      	; 0x570c <__fixunssfsi+0x22>
    5706:	ba 95       	dec	r27
    5708:	c9 f7       	brne	.-14     	; 0x56fc <__fixunssfsi+0x12>
    570a:	12 c0       	rjmp	.+36     	; 0x5730 <__fixunssfsi+0x46>
    570c:	b1 30       	cpi	r27, 0x01	; 1
    570e:	81 f0       	breq	.+32     	; 0x5730 <__fixunssfsi+0x46>
    5710:	c3 d0       	rcall	.+390    	; 0x5898 <__fp_zero>
    5712:	b1 e0       	ldi	r27, 0x01	; 1
    5714:	08 95       	ret
    5716:	c0 c0       	rjmp	.+384    	; 0x5898 <__fp_zero>
    5718:	67 2f       	mov	r22, r23
    571a:	78 2f       	mov	r23, r24
    571c:	88 27       	eor	r24, r24
    571e:	b8 5f       	subi	r27, 0xF8	; 248
    5720:	39 f0       	breq	.+14     	; 0x5730 <__fixunssfsi+0x46>
    5722:	b9 3f       	cpi	r27, 0xF9	; 249
    5724:	cc f3       	brlt	.-14     	; 0x5718 <__fixunssfsi+0x2e>
    5726:	86 95       	lsr	r24
    5728:	77 95       	ror	r23
    572a:	67 95       	ror	r22
    572c:	b3 95       	inc	r27
    572e:	d9 f7       	brne	.-10     	; 0x5726 <__fixunssfsi+0x3c>
    5730:	3e f4       	brtc	.+14     	; 0x5740 <__fixunssfsi+0x56>
    5732:	90 95       	com	r25
    5734:	80 95       	com	r24
    5736:	70 95       	com	r23
    5738:	61 95       	neg	r22
    573a:	7f 4f       	sbci	r23, 0xFF	; 255
    573c:	8f 4f       	sbci	r24, 0xFF	; 255
    573e:	9f 4f       	sbci	r25, 0xFF	; 255
    5740:	08 95       	ret

00005742 <__floatunsisf>:
    5742:	e8 94       	clt
    5744:	09 c0       	rjmp	.+18     	; 0x5758 <__floatsisf+0x12>

00005746 <__floatsisf>:
    5746:	97 fb       	bst	r25, 7
    5748:	3e f4       	brtc	.+14     	; 0x5758 <__floatsisf+0x12>
    574a:	90 95       	com	r25
    574c:	80 95       	com	r24
    574e:	70 95       	com	r23
    5750:	61 95       	neg	r22
    5752:	7f 4f       	sbci	r23, 0xFF	; 255
    5754:	8f 4f       	sbci	r24, 0xFF	; 255
    5756:	9f 4f       	sbci	r25, 0xFF	; 255
    5758:	99 23       	and	r25, r25
    575a:	a9 f0       	breq	.+42     	; 0x5786 <__floatsisf+0x40>
    575c:	f9 2f       	mov	r31, r25
    575e:	96 e9       	ldi	r25, 0x96	; 150
    5760:	bb 27       	eor	r27, r27
    5762:	93 95       	inc	r25
    5764:	f6 95       	lsr	r31
    5766:	87 95       	ror	r24
    5768:	77 95       	ror	r23
    576a:	67 95       	ror	r22
    576c:	b7 95       	ror	r27
    576e:	f1 11       	cpse	r31, r1
    5770:	f8 cf       	rjmp	.-16     	; 0x5762 <__floatsisf+0x1c>
    5772:	fa f4       	brpl	.+62     	; 0x57b2 <__floatsisf+0x6c>
    5774:	bb 0f       	add	r27, r27
    5776:	11 f4       	brne	.+4      	; 0x577c <__floatsisf+0x36>
    5778:	60 ff       	sbrs	r22, 0
    577a:	1b c0       	rjmp	.+54     	; 0x57b2 <__floatsisf+0x6c>
    577c:	6f 5f       	subi	r22, 0xFF	; 255
    577e:	7f 4f       	sbci	r23, 0xFF	; 255
    5780:	8f 4f       	sbci	r24, 0xFF	; 255
    5782:	9f 4f       	sbci	r25, 0xFF	; 255
    5784:	16 c0       	rjmp	.+44     	; 0x57b2 <__floatsisf+0x6c>
    5786:	88 23       	and	r24, r24
    5788:	11 f0       	breq	.+4      	; 0x578e <__floatsisf+0x48>
    578a:	96 e9       	ldi	r25, 0x96	; 150
    578c:	11 c0       	rjmp	.+34     	; 0x57b0 <__floatsisf+0x6a>
    578e:	77 23       	and	r23, r23
    5790:	21 f0       	breq	.+8      	; 0x579a <__floatsisf+0x54>
    5792:	9e e8       	ldi	r25, 0x8E	; 142
    5794:	87 2f       	mov	r24, r23
    5796:	76 2f       	mov	r23, r22
    5798:	05 c0       	rjmp	.+10     	; 0x57a4 <__floatsisf+0x5e>
    579a:	66 23       	and	r22, r22
    579c:	71 f0       	breq	.+28     	; 0x57ba <__floatsisf+0x74>
    579e:	96 e8       	ldi	r25, 0x86	; 134
    57a0:	86 2f       	mov	r24, r22
    57a2:	70 e0       	ldi	r23, 0x00	; 0
    57a4:	60 e0       	ldi	r22, 0x00	; 0
    57a6:	2a f0       	brmi	.+10     	; 0x57b2 <__floatsisf+0x6c>
    57a8:	9a 95       	dec	r25
    57aa:	66 0f       	add	r22, r22
    57ac:	77 1f       	adc	r23, r23
    57ae:	88 1f       	adc	r24, r24
    57b0:	da f7       	brpl	.-10     	; 0x57a8 <__floatsisf+0x62>
    57b2:	88 0f       	add	r24, r24
    57b4:	96 95       	lsr	r25
    57b6:	87 95       	ror	r24
    57b8:	97 f9       	bld	r25, 7
    57ba:	08 95       	ret

000057bc <__fp_cmp>:
    57bc:	99 0f       	add	r25, r25
    57be:	00 08       	sbc	r0, r0
    57c0:	55 0f       	add	r21, r21
    57c2:	aa 0b       	sbc	r26, r26
    57c4:	e0 e8       	ldi	r30, 0x80	; 128
    57c6:	fe ef       	ldi	r31, 0xFE	; 254
    57c8:	16 16       	cp	r1, r22
    57ca:	17 06       	cpc	r1, r23
    57cc:	e8 07       	cpc	r30, r24
    57ce:	f9 07       	cpc	r31, r25
    57d0:	c0 f0       	brcs	.+48     	; 0x5802 <__fp_cmp+0x46>
    57d2:	12 16       	cp	r1, r18
    57d4:	13 06       	cpc	r1, r19
    57d6:	e4 07       	cpc	r30, r20
    57d8:	f5 07       	cpc	r31, r21
    57da:	98 f0       	brcs	.+38     	; 0x5802 <__fp_cmp+0x46>
    57dc:	62 1b       	sub	r22, r18
    57de:	73 0b       	sbc	r23, r19
    57e0:	84 0b       	sbc	r24, r20
    57e2:	95 0b       	sbc	r25, r21
    57e4:	39 f4       	brne	.+14     	; 0x57f4 <__fp_cmp+0x38>
    57e6:	0a 26       	eor	r0, r26
    57e8:	61 f0       	breq	.+24     	; 0x5802 <__fp_cmp+0x46>
    57ea:	23 2b       	or	r18, r19
    57ec:	24 2b       	or	r18, r20
    57ee:	25 2b       	or	r18, r21
    57f0:	21 f4       	brne	.+8      	; 0x57fa <__fp_cmp+0x3e>
    57f2:	08 95       	ret
    57f4:	0a 26       	eor	r0, r26
    57f6:	09 f4       	brne	.+2      	; 0x57fa <__fp_cmp+0x3e>
    57f8:	a1 40       	sbci	r26, 0x01	; 1
    57fa:	a6 95       	lsr	r26
    57fc:	8f ef       	ldi	r24, 0xFF	; 255
    57fe:	81 1d       	adc	r24, r1
    5800:	81 1d       	adc	r24, r1
    5802:	08 95       	ret

00005804 <__fp_inf>:
    5804:	97 f9       	bld	r25, 7
    5806:	9f 67       	ori	r25, 0x7F	; 127
    5808:	80 e8       	ldi	r24, 0x80	; 128
    580a:	70 e0       	ldi	r23, 0x00	; 0
    580c:	60 e0       	ldi	r22, 0x00	; 0
    580e:	08 95       	ret

00005810 <__fp_nan>:
    5810:	9f ef       	ldi	r25, 0xFF	; 255
    5812:	80 ec       	ldi	r24, 0xC0	; 192
    5814:	08 95       	ret

00005816 <__fp_pscA>:
    5816:	00 24       	eor	r0, r0
    5818:	0a 94       	dec	r0
    581a:	16 16       	cp	r1, r22
    581c:	17 06       	cpc	r1, r23
    581e:	18 06       	cpc	r1, r24
    5820:	09 06       	cpc	r0, r25
    5822:	08 95       	ret

00005824 <__fp_pscB>:
    5824:	00 24       	eor	r0, r0
    5826:	0a 94       	dec	r0
    5828:	12 16       	cp	r1, r18
    582a:	13 06       	cpc	r1, r19
    582c:	14 06       	cpc	r1, r20
    582e:	05 06       	cpc	r0, r21
    5830:	08 95       	ret

00005832 <__fp_round>:
    5832:	09 2e       	mov	r0, r25
    5834:	03 94       	inc	r0
    5836:	00 0c       	add	r0, r0
    5838:	11 f4       	brne	.+4      	; 0x583e <__fp_round+0xc>
    583a:	88 23       	and	r24, r24
    583c:	52 f0       	brmi	.+20     	; 0x5852 <__fp_round+0x20>
    583e:	bb 0f       	add	r27, r27
    5840:	40 f4       	brcc	.+16     	; 0x5852 <__fp_round+0x20>
    5842:	bf 2b       	or	r27, r31
    5844:	11 f4       	brne	.+4      	; 0x584a <__fp_round+0x18>
    5846:	60 ff       	sbrs	r22, 0
    5848:	04 c0       	rjmp	.+8      	; 0x5852 <__fp_round+0x20>
    584a:	6f 5f       	subi	r22, 0xFF	; 255
    584c:	7f 4f       	sbci	r23, 0xFF	; 255
    584e:	8f 4f       	sbci	r24, 0xFF	; 255
    5850:	9f 4f       	sbci	r25, 0xFF	; 255
    5852:	08 95       	ret

00005854 <__fp_split3>:
    5854:	57 fd       	sbrc	r21, 7
    5856:	90 58       	subi	r25, 0x80	; 128
    5858:	44 0f       	add	r20, r20
    585a:	55 1f       	adc	r21, r21
    585c:	59 f0       	breq	.+22     	; 0x5874 <__fp_splitA+0x10>
    585e:	5f 3f       	cpi	r21, 0xFF	; 255
    5860:	71 f0       	breq	.+28     	; 0x587e <__fp_splitA+0x1a>
    5862:	47 95       	ror	r20

00005864 <__fp_splitA>:
    5864:	88 0f       	add	r24, r24
    5866:	97 fb       	bst	r25, 7
    5868:	99 1f       	adc	r25, r25
    586a:	61 f0       	breq	.+24     	; 0x5884 <__fp_splitA+0x20>
    586c:	9f 3f       	cpi	r25, 0xFF	; 255
    586e:	79 f0       	breq	.+30     	; 0x588e <__fp_splitA+0x2a>
    5870:	87 95       	ror	r24
    5872:	08 95       	ret
    5874:	12 16       	cp	r1, r18
    5876:	13 06       	cpc	r1, r19
    5878:	14 06       	cpc	r1, r20
    587a:	55 1f       	adc	r21, r21
    587c:	f2 cf       	rjmp	.-28     	; 0x5862 <__fp_split3+0xe>
    587e:	46 95       	lsr	r20
    5880:	f1 df       	rcall	.-30     	; 0x5864 <__fp_splitA>
    5882:	08 c0       	rjmp	.+16     	; 0x5894 <__fp_splitA+0x30>
    5884:	16 16       	cp	r1, r22
    5886:	17 06       	cpc	r1, r23
    5888:	18 06       	cpc	r1, r24
    588a:	99 1f       	adc	r25, r25
    588c:	f1 cf       	rjmp	.-30     	; 0x5870 <__fp_splitA+0xc>
    588e:	86 95       	lsr	r24
    5890:	71 05       	cpc	r23, r1
    5892:	61 05       	cpc	r22, r1
    5894:	08 94       	sec
    5896:	08 95       	ret

00005898 <__fp_zero>:
    5898:	e8 94       	clt

0000589a <__fp_szero>:
    589a:	bb 27       	eor	r27, r27
    589c:	66 27       	eor	r22, r22
    589e:	77 27       	eor	r23, r23
    58a0:	cb 01       	movw	r24, r22
    58a2:	97 f9       	bld	r25, 7
    58a4:	08 95       	ret

000058a6 <__mulsf3>:
    58a6:	0b d0       	rcall	.+22     	; 0x58be <__mulsf3x>
    58a8:	c4 cf       	rjmp	.-120    	; 0x5832 <__fp_round>
    58aa:	b5 df       	rcall	.-150    	; 0x5816 <__fp_pscA>
    58ac:	28 f0       	brcs	.+10     	; 0x58b8 <__mulsf3+0x12>
    58ae:	ba df       	rcall	.-140    	; 0x5824 <__fp_pscB>
    58b0:	18 f0       	brcs	.+6      	; 0x58b8 <__mulsf3+0x12>
    58b2:	95 23       	and	r25, r21
    58b4:	09 f0       	breq	.+2      	; 0x58b8 <__mulsf3+0x12>
    58b6:	a6 cf       	rjmp	.-180    	; 0x5804 <__fp_inf>
    58b8:	ab cf       	rjmp	.-170    	; 0x5810 <__fp_nan>
    58ba:	11 24       	eor	r1, r1
    58bc:	ee cf       	rjmp	.-36     	; 0x589a <__fp_szero>

000058be <__mulsf3x>:
    58be:	ca df       	rcall	.-108    	; 0x5854 <__fp_split3>
    58c0:	a0 f3       	brcs	.-24     	; 0x58aa <__mulsf3+0x4>

000058c2 <__mulsf3_pse>:
    58c2:	95 9f       	mul	r25, r21
    58c4:	d1 f3       	breq	.-12     	; 0x58ba <__mulsf3+0x14>
    58c6:	95 0f       	add	r25, r21
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	55 1f       	adc	r21, r21
    58cc:	62 9f       	mul	r22, r18
    58ce:	f0 01       	movw	r30, r0
    58d0:	72 9f       	mul	r23, r18
    58d2:	bb 27       	eor	r27, r27
    58d4:	f0 0d       	add	r31, r0
    58d6:	b1 1d       	adc	r27, r1
    58d8:	63 9f       	mul	r22, r19
    58da:	aa 27       	eor	r26, r26
    58dc:	f0 0d       	add	r31, r0
    58de:	b1 1d       	adc	r27, r1
    58e0:	aa 1f       	adc	r26, r26
    58e2:	64 9f       	mul	r22, r20
    58e4:	66 27       	eor	r22, r22
    58e6:	b0 0d       	add	r27, r0
    58e8:	a1 1d       	adc	r26, r1
    58ea:	66 1f       	adc	r22, r22
    58ec:	82 9f       	mul	r24, r18
    58ee:	22 27       	eor	r18, r18
    58f0:	b0 0d       	add	r27, r0
    58f2:	a1 1d       	adc	r26, r1
    58f4:	62 1f       	adc	r22, r18
    58f6:	73 9f       	mul	r23, r19
    58f8:	b0 0d       	add	r27, r0
    58fa:	a1 1d       	adc	r26, r1
    58fc:	62 1f       	adc	r22, r18
    58fe:	83 9f       	mul	r24, r19
    5900:	a0 0d       	add	r26, r0
    5902:	61 1d       	adc	r22, r1
    5904:	22 1f       	adc	r18, r18
    5906:	74 9f       	mul	r23, r20
    5908:	33 27       	eor	r19, r19
    590a:	a0 0d       	add	r26, r0
    590c:	61 1d       	adc	r22, r1
    590e:	23 1f       	adc	r18, r19
    5910:	84 9f       	mul	r24, r20
    5912:	60 0d       	add	r22, r0
    5914:	21 1d       	adc	r18, r1
    5916:	82 2f       	mov	r24, r18
    5918:	76 2f       	mov	r23, r22
    591a:	6a 2f       	mov	r22, r26
    591c:	11 24       	eor	r1, r1
    591e:	9f 57       	subi	r25, 0x7F	; 127
    5920:	50 40       	sbci	r21, 0x00	; 0
    5922:	8a f0       	brmi	.+34     	; 0x5946 <__mulsf3_pse+0x84>
    5924:	e1 f0       	breq	.+56     	; 0x595e <__mulsf3_pse+0x9c>
    5926:	88 23       	and	r24, r24
    5928:	4a f0       	brmi	.+18     	; 0x593c <__mulsf3_pse+0x7a>
    592a:	ee 0f       	add	r30, r30
    592c:	ff 1f       	adc	r31, r31
    592e:	bb 1f       	adc	r27, r27
    5930:	66 1f       	adc	r22, r22
    5932:	77 1f       	adc	r23, r23
    5934:	88 1f       	adc	r24, r24
    5936:	91 50       	subi	r25, 0x01	; 1
    5938:	50 40       	sbci	r21, 0x00	; 0
    593a:	a9 f7       	brne	.-22     	; 0x5926 <__mulsf3_pse+0x64>
    593c:	9e 3f       	cpi	r25, 0xFE	; 254
    593e:	51 05       	cpc	r21, r1
    5940:	70 f0       	brcs	.+28     	; 0x595e <__mulsf3_pse+0x9c>
    5942:	60 cf       	rjmp	.-320    	; 0x5804 <__fp_inf>
    5944:	aa cf       	rjmp	.-172    	; 0x589a <__fp_szero>
    5946:	5f 3f       	cpi	r21, 0xFF	; 255
    5948:	ec f3       	brlt	.-6      	; 0x5944 <__mulsf3_pse+0x82>
    594a:	98 3e       	cpi	r25, 0xE8	; 232
    594c:	dc f3       	brlt	.-10     	; 0x5944 <__mulsf3_pse+0x82>
    594e:	86 95       	lsr	r24
    5950:	77 95       	ror	r23
    5952:	67 95       	ror	r22
    5954:	b7 95       	ror	r27
    5956:	f7 95       	ror	r31
    5958:	e7 95       	ror	r30
    595a:	9f 5f       	subi	r25, 0xFF	; 255
    595c:	c1 f7       	brne	.-16     	; 0x594e <__mulsf3_pse+0x8c>
    595e:	fe 2b       	or	r31, r30
    5960:	88 0f       	add	r24, r24
    5962:	91 1d       	adc	r25, r1
    5964:	96 95       	lsr	r25
    5966:	87 95       	ror	r24
    5968:	97 f9       	bld	r25, 7
    596a:	08 95       	ret

0000596c <__unordsf2>:
    596c:	27 df       	rcall	.-434    	; 0x57bc <__fp_cmp>
    596e:	88 0b       	sbc	r24, r24
    5970:	99 0b       	sbc	r25, r25
    5972:	08 95       	ret

00005974 <__cxa_pure_virtual>:
    5974:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <abort>

00005978 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5978:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    597a:	91 8d       	ldd	r25, Z+25	; 0x19
    597c:	22 8d       	ldd	r18, Z+26	; 0x1a
    597e:	89 2f       	mov	r24, r25
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	80 5c       	subi	r24, 0xC0	; 192
    5984:	9f 4f       	sbci	r25, 0xFF	; 255
    5986:	82 1b       	sub	r24, r18
    5988:	91 09       	sbc	r25, r1
}
    598a:	8f 73       	andi	r24, 0x3F	; 63
    598c:	99 27       	eor	r25, r25
    598e:	08 95       	ret

00005990 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    5990:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5992:	91 8d       	ldd	r25, Z+25	; 0x19
    5994:	82 8d       	ldd	r24, Z+26	; 0x1a
    5996:	98 17       	cp	r25, r24
    5998:	31 f0       	breq	.+12     	; 0x59a6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    599a:	82 8d       	ldd	r24, Z+26	; 0x1a
    599c:	e8 0f       	add	r30, r24
    599e:	f1 1d       	adc	r31, r1
    59a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    59a6:	8f ef       	ldi	r24, 0xFF	; 255
    59a8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    59aa:	08 95       	ret

000059ac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    59ac:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    59ae:	91 8d       	ldd	r25, Z+25	; 0x19
    59b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    59b2:	98 17       	cp	r25, r24
    59b4:	61 f0       	breq	.+24     	; 0x59ce <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    59b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    59b8:	df 01       	movw	r26, r30
    59ba:	a8 0f       	add	r26, r24
    59bc:	b1 1d       	adc	r27, r1
    59be:	5d 96       	adiw	r26, 0x1d	; 29
    59c0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    59c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    59c4:	9f 5f       	subi	r25, 0xFF	; 255
    59c6:	9f 73       	andi	r25, 0x3F	; 63
    59c8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    59ce:	8f ef       	ldi	r24, 0xFF	; 255
    59d0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    59d2:	08 95       	ret

000059d4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    59d4:	fc 01       	movw	r30, r24
    59d6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    59d8:	44 8d       	ldd	r20, Z+28	; 0x1c
    59da:	25 2f       	mov	r18, r21
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	84 2f       	mov	r24, r20
    59e0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    59e2:	82 1b       	sub	r24, r18
    59e4:	93 0b       	sbc	r25, r19
    59e6:	54 17       	cp	r21, r20
    59e8:	10 f0       	brcs	.+4      	; 0x59ee <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    59ea:	cf 96       	adiw	r24, 0x3f	; 63
    59ec:	08 95       	ret
  return tail - head - 1;
    59ee:	01 97       	sbiw	r24, 0x01	; 1
}
    59f0:	08 95       	ret

000059f2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    59f2:	86 e8       	ldi	r24, 0x86	; 134
    59f4:	9e e2       	ldi	r25, 0x2E	; 46
    59f6:	89 2b       	or	r24, r25
    59f8:	39 f0       	breq	.+14     	; 0x5a08 <_Z14serialEventRunv+0x16>
    59fa:	80 e0       	ldi	r24, 0x00	; 0
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	89 2b       	or	r24, r25
    5a00:	19 f0       	breq	.+6      	; 0x5a08 <_Z14serialEventRunv+0x16>
    5a02:	84 d1       	rcall	.+776    	; 0x5d0c <_Z17Serial0_availablev>
    5a04:	81 11       	cpse	r24, r1
    5a06:	25 c0       	rjmp	.+74     	; 0x5a52 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5a08:	80 e0       	ldi	r24, 0x00	; 0
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	89 2b       	or	r24, r25
    5a0e:	41 f0       	breq	.+16     	; 0x5a20 <_Z14serialEventRunv+0x2e>
    5a10:	80 e0       	ldi	r24, 0x00	; 0
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	89 2b       	or	r24, r25
    5a16:	21 f0       	breq	.+8      	; 0x5a20 <_Z14serialEventRunv+0x2e>
    5a18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a1c:	81 11       	cpse	r24, r1
    5a1e:	1c c0       	rjmp	.+56     	; 0x5a58 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5a20:	80 e0       	ldi	r24, 0x00	; 0
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	89 2b       	or	r24, r25
    5a26:	41 f0       	breq	.+16     	; 0x5a38 <_Z14serialEventRunv+0x46>
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	89 2b       	or	r24, r25
    5a2e:	21 f0       	breq	.+8      	; 0x5a38 <_Z14serialEventRunv+0x46>
    5a30:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a34:	81 11       	cpse	r24, r1
    5a36:	13 c0       	rjmp	.+38     	; 0x5a5e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5a38:	80 e0       	ldi	r24, 0x00	; 0
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	89 2b       	or	r24, r25
    5a3e:	a1 f0       	breq	.+40     	; 0x5a68 <_Z14serialEventRunv+0x76>
    5a40:	80 e0       	ldi	r24, 0x00	; 0
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	89 2b       	or	r24, r25
    5a46:	81 f0       	breq	.+32     	; 0x5a68 <_Z14serialEventRunv+0x76>
    5a48:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a4c:	81 11       	cpse	r24, r1
    5a4e:	0a c0       	rjmp	.+20     	; 0x5a64 <_Z14serialEventRunv+0x72>
    5a50:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5a52:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a56:	d8 cf       	rjmp	.-80     	; 0x5a08 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5a58:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a5c:	e1 cf       	rjmp	.-62     	; 0x5a20 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5a5e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a62:	ea cf       	rjmp	.-44     	; 0x5a38 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5a64:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5a68:	08 95       	ret

00005a6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5a6a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5a6c:	84 8d       	ldd	r24, Z+28	; 0x1c
    5a6e:	df 01       	movw	r26, r30
    5a70:	a8 0f       	add	r26, r24
    5a72:	b1 1d       	adc	r27, r1
    5a74:	a3 5a       	subi	r26, 0xA3	; 163
    5a76:	bf 4f       	sbci	r27, 0xFF	; 255
    5a78:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5a7a:	84 8d       	ldd	r24, Z+28	; 0x1c
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	01 96       	adiw	r24, 0x01	; 1
    5a80:	8f 73       	andi	r24, 0x3F	; 63
    5a82:	99 27       	eor	r25, r25
    5a84:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5a86:	a6 89       	ldd	r26, Z+22	; 0x16
    5a88:	b7 89       	ldd	r27, Z+23	; 0x17
    5a8a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5a8c:	a0 89       	ldd	r26, Z+16	; 0x10
    5a8e:	b1 89       	ldd	r27, Z+17	; 0x11
    5a90:	8c 91       	ld	r24, X
    5a92:	83 70       	andi	r24, 0x03	; 3
    5a94:	80 64       	ori	r24, 0x40	; 64
    5a96:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5a98:	93 8d       	ldd	r25, Z+27	; 0x1b
    5a9a:	84 8d       	ldd	r24, Z+28	; 0x1c
    5a9c:	98 13       	cpse	r25, r24
    5a9e:	06 c0       	rjmp	.+12     	; 0x5aac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5aa0:	02 88       	ldd	r0, Z+18	; 0x12
    5aa2:	f3 89       	ldd	r31, Z+19	; 0x13
    5aa4:	e0 2d       	mov	r30, r0
    5aa6:	80 81       	ld	r24, Z
    5aa8:	8f 7d       	andi	r24, 0xDF	; 223
    5aaa:	80 83       	st	Z, r24
    5aac:	08 95       	ret

00005aae <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    5aae:	ef 92       	push	r14
    5ab0:	ff 92       	push	r15
    5ab2:	0f 93       	push	r16
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	ec 01       	movw	r28, r24
  _written = true;
    5abc:	81 e0       	ldi	r24, 0x01	; 1
    5abe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5ac0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5ac2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5ac4:	98 13       	cpse	r25, r24
    5ac6:	05 c0       	rjmp	.+10     	; 0x5ad2 <_ZN14HardwareSerial5writeEh+0x24>
    5ac8:	e8 89       	ldd	r30, Y+16	; 0x10
    5aca:	f9 89       	ldd	r31, Y+17	; 0x11
    5acc:	80 81       	ld	r24, Z
    5ace:	85 fd       	sbrc	r24, 5
    5ad0:	25 c0       	rjmp	.+74     	; 0x5b1c <_ZN14HardwareSerial5writeEh+0x6e>
    5ad2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5ad4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5ad6:	10 e0       	ldi	r17, 0x00	; 0
    5ad8:	0f 5f       	subi	r16, 0xFF	; 255
    5ada:	1f 4f       	sbci	r17, 0xFF	; 255
    5adc:	0f 73       	andi	r16, 0x3F	; 63
    5ade:	11 27       	eor	r17, r17
    5ae0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5ae2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5ae4:	e8 12       	cpse	r14, r24
    5ae6:	0b c0       	rjmp	.+22     	; 0x5afe <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5ae8:	0f b6       	in	r0, 0x3f	; 63
    5aea:	07 fc       	sbrc	r0, 7
    5aec:	fa cf       	rjmp	.-12     	; 0x5ae2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5aee:	e8 89       	ldd	r30, Y+16	; 0x10
    5af0:	f9 89       	ldd	r31, Y+17	; 0x11
    5af2:	80 81       	ld	r24, Z
    5af4:	85 ff       	sbrs	r24, 5
    5af6:	f5 cf       	rjmp	.-22     	; 0x5ae2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5af8:	ce 01       	movw	r24, r28
    5afa:	b7 df       	rcall	.-146    	; 0x5a6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5afc:	f2 cf       	rjmp	.-28     	; 0x5ae2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b00:	fe 01       	movw	r30, r28
    5b02:	e8 0f       	add	r30, r24
    5b04:	f1 1d       	adc	r31, r1
    5b06:	e3 5a       	subi	r30, 0xA3	; 163
    5b08:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5b0c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5b0e:	f8 94       	cli
    _tx_buffer_head = i;
    5b10:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5b12:	ea 89       	ldd	r30, Y+18	; 0x12
    5b14:	fb 89       	ldd	r31, Y+19	; 0x13
    5b16:	80 81       	ld	r24, Z
    5b18:	80 62       	ori	r24, 0x20	; 32
    5b1a:	0a c0       	rjmp	.+20     	; 0x5b30 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5b1c:	9f b7       	in	r25, 0x3f	; 63
    5b1e:	f8 94       	cli
      *_udr = c;
    5b20:	ee 89       	ldd	r30, Y+22	; 0x16
    5b22:	ff 89       	ldd	r31, Y+23	; 0x17
    5b24:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5b26:	e8 89       	ldd	r30, Y+16	; 0x10
    5b28:	f9 89       	ldd	r31, Y+17	; 0x11
    5b2a:	80 81       	ld	r24, Z
    5b2c:	83 70       	andi	r24, 0x03	; 3
    5b2e:	80 64       	ori	r24, 0x40	; 64
    5b30:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5b32:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	df 91       	pop	r29
    5b3a:	cf 91       	pop	r28
    5b3c:	1f 91       	pop	r17
    5b3e:	0f 91       	pop	r16
    5b40:	ff 90       	pop	r15
    5b42:	ef 90       	pop	r14
    5b44:	08 95       	ret

00005b46 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5b4c:	88 8d       	ldd	r24, Y+24	; 0x18
    5b4e:	88 23       	and	r24, r24
    5b50:	c1 f0       	breq	.+48     	; 0x5b82 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5b52:	ea 89       	ldd	r30, Y+18	; 0x12
    5b54:	fb 89       	ldd	r31, Y+19	; 0x13
    5b56:	80 81       	ld	r24, Z
    5b58:	85 fd       	sbrc	r24, 5
    5b5a:	05 c0       	rjmp	.+10     	; 0x5b66 <_ZN14HardwareSerial5flushEv+0x20>
    5b5c:	a8 89       	ldd	r26, Y+16	; 0x10
    5b5e:	b9 89       	ldd	r27, Y+17	; 0x11
    5b60:	8c 91       	ld	r24, X
    5b62:	86 fd       	sbrc	r24, 6
    5b64:	0e c0       	rjmp	.+28     	; 0x5b82 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5b66:	0f b6       	in	r0, 0x3f	; 63
    5b68:	07 fc       	sbrc	r0, 7
    5b6a:	f5 cf       	rjmp	.-22     	; 0x5b56 <_ZN14HardwareSerial5flushEv+0x10>
    5b6c:	80 81       	ld	r24, Z
    5b6e:	85 ff       	sbrs	r24, 5
    5b70:	f2 cf       	rjmp	.-28     	; 0x5b56 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5b72:	a8 89       	ldd	r26, Y+16	; 0x10
    5b74:	b9 89       	ldd	r27, Y+17	; 0x11
    5b76:	8c 91       	ld	r24, X
    5b78:	85 ff       	sbrs	r24, 5
    5b7a:	ed cf       	rjmp	.-38     	; 0x5b56 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5b7c:	ce 01       	movw	r24, r28
    5b7e:	75 df       	rcall	.-278    	; 0x5a6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5b80:	e8 cf       	rjmp	.-48     	; 0x5b52 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5b82:	df 91       	pop	r29
    5b84:	cf 91       	pop	r28
    5b86:	08 95       	ret

00005b88 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5b88:	cf 92       	push	r12
    5b8a:	df 92       	push	r13
    5b8c:	ef 92       	push	r14
    5b8e:	ff 92       	push	r15
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	ec 01       	movw	r28, r24
    5b98:	6a 01       	movw	r12, r20
    5b9a:	7b 01       	movw	r14, r22
    5b9c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5b9e:	e8 89       	ldd	r30, Y+16	; 0x10
    5ba0:	f9 89       	ldd	r31, Y+17	; 0x11
    5ba2:	82 e0       	ldi	r24, 0x02	; 2
    5ba4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5ba6:	41 15       	cp	r20, r1
    5ba8:	51 4e       	sbci	r21, 0xE1	; 225
    5baa:	61 05       	cpc	r22, r1
    5bac:	71 05       	cpc	r23, r1
    5bae:	a9 f0       	breq	.+42     	; 0x5bda <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5bb0:	60 e0       	ldi	r22, 0x00	; 0
    5bb2:	79 e0       	ldi	r23, 0x09	; 9
    5bb4:	8d e3       	ldi	r24, 0x3D	; 61
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	a7 01       	movw	r20, r14
    5bba:	96 01       	movw	r18, r12
    5bbc:	62 d6       	rcall	.+3268   	; 0x6882 <__udivmodsi4>
    5bbe:	da 01       	movw	r26, r20
    5bc0:	c9 01       	movw	r24, r18
    5bc2:	01 97       	sbiw	r24, 0x01	; 1
    5bc4:	a1 09       	sbc	r26, r1
    5bc6:	b1 09       	sbc	r27, r1
    5bc8:	b6 95       	lsr	r27
    5bca:	a7 95       	ror	r26
    5bcc:	97 95       	ror	r25
    5bce:	87 95       	ror	r24
    5bd0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5bd2:	21 15       	cp	r18, r1
    5bd4:	80 e1       	ldi	r24, 0x10	; 16
    5bd6:	38 07       	cpc	r19, r24
    5bd8:	a0 f0       	brcs	.+40     	; 0x5c02 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5bda:	e8 89       	ldd	r30, Y+16	; 0x10
    5bdc:	f9 89       	ldd	r31, Y+17	; 0x11
    5bde:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5be0:	60 e8       	ldi	r22, 0x80	; 128
    5be2:	74 e8       	ldi	r23, 0x84	; 132
    5be4:	8e e1       	ldi	r24, 0x1E	; 30
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	a7 01       	movw	r20, r14
    5bea:	96 01       	movw	r18, r12
    5bec:	4a d6       	rcall	.+3220   	; 0x6882 <__udivmodsi4>
    5bee:	da 01       	movw	r26, r20
    5bf0:	c9 01       	movw	r24, r18
    5bf2:	01 97       	sbiw	r24, 0x01	; 1
    5bf4:	a1 09       	sbc	r26, r1
    5bf6:	b1 09       	sbc	r27, r1
    5bf8:	b6 95       	lsr	r27
    5bfa:	a7 95       	ror	r26
    5bfc:	97 95       	ror	r25
    5bfe:	87 95       	ror	r24
    5c00:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5c02:	ec 85       	ldd	r30, Y+12	; 0x0c
    5c04:	fd 85       	ldd	r31, Y+13	; 0x0d
    5c06:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5c08:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c0c:	20 83       	st	Z, r18

  _written = false;
    5c0e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5c10:	ec 89       	ldd	r30, Y+20	; 0x14
    5c12:	fd 89       	ldd	r31, Y+21	; 0x15
    5c14:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5c16:	ea 89       	ldd	r30, Y+18	; 0x12
    5c18:	fb 89       	ldd	r31, Y+19	; 0x13
    5c1a:	80 81       	ld	r24, Z
    5c1c:	80 61       	ori	r24, 0x10	; 16
    5c1e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5c20:	ea 89       	ldd	r30, Y+18	; 0x12
    5c22:	fb 89       	ldd	r31, Y+19	; 0x13
    5c24:	80 81       	ld	r24, Z
    5c26:	88 60       	ori	r24, 0x08	; 8
    5c28:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5c2a:	ea 89       	ldd	r30, Y+18	; 0x12
    5c2c:	fb 89       	ldd	r31, Y+19	; 0x13
    5c2e:	80 81       	ld	r24, Z
    5c30:	80 68       	ori	r24, 0x80	; 128
    5c32:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5c34:	ea 89       	ldd	r30, Y+18	; 0x12
    5c36:	fb 89       	ldd	r31, Y+19	; 0x13
    5c38:	80 81       	ld	r24, Z
    5c3a:	8f 7d       	andi	r24, 0xDF	; 223
    5c3c:	80 83       	st	Z, r24
}
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	1f 91       	pop	r17
    5c44:	ff 90       	pop	r15
    5c46:	ef 90       	pop	r14
    5c48:	df 90       	pop	r13
    5c4a:	cf 90       	pop	r12
    5c4c:	08 95       	ret

00005c4e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5c4e:	1f 92       	push	r1
    5c50:	0f 92       	push	r0
    5c52:	0f b6       	in	r0, 0x3f	; 63
    5c54:	0f 92       	push	r0
    5c56:	11 24       	eor	r1, r1
    5c58:	0b b6       	in	r0, 0x3b	; 59
    5c5a:	0f 92       	push	r0
    5c5c:	2f 93       	push	r18
    5c5e:	8f 93       	push	r24
    5c60:	9f 93       	push	r25
    5c62:	ef 93       	push	r30
    5c64:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5c66:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <Serial+0x10>
    5c6a:	f0 91 17 05 	lds	r31, 0x0517	; 0x800517 <Serial+0x11>
    5c6e:	80 81       	ld	r24, Z
    5c70:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Serial+0x16>
    5c74:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Serial+0x17>
    5c78:	82 fd       	sbrc	r24, 2
    5c7a:	12 c0       	rjmp	.+36     	; 0x5ca0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5c7c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5c7e:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Serial+0x19>
    5c82:	8f 5f       	subi	r24, 0xFF	; 255
    5c84:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5c86:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <Serial+0x1a>
    5c8a:	82 17       	cp	r24, r18
    5c8c:	51 f0       	breq	.+20     	; 0x5ca2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    5c8e:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <Serial+0x19>
    5c92:	f0 e0       	ldi	r31, 0x00	; 0
    5c94:	ea 5f       	subi	r30, 0xFA	; 250
    5c96:	fa 4f       	sbci	r31, 0xFA	; 250
    5c98:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5c9a:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <Serial+0x19>
    5c9e:	01 c0       	rjmp	.+2      	; 0x5ca2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5ca0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5ca2:	ff 91       	pop	r31
    5ca4:	ef 91       	pop	r30
    5ca6:	9f 91       	pop	r25
    5ca8:	8f 91       	pop	r24
    5caa:	2f 91       	pop	r18
    5cac:	0f 90       	pop	r0
    5cae:	0b be       	out	0x3b, r0	; 59
    5cb0:	0f 90       	pop	r0
    5cb2:	0f be       	out	0x3f, r0	; 63
    5cb4:	0f 90       	pop	r0
    5cb6:	1f 90       	pop	r1
    5cb8:	18 95       	reti

00005cba <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5cba:	1f 92       	push	r1
    5cbc:	0f 92       	push	r0
    5cbe:	0f b6       	in	r0, 0x3f	; 63
    5cc0:	0f 92       	push	r0
    5cc2:	11 24       	eor	r1, r1
    5cc4:	0b b6       	in	r0, 0x3b	; 59
    5cc6:	0f 92       	push	r0
    5cc8:	2f 93       	push	r18
    5cca:	3f 93       	push	r19
    5ccc:	4f 93       	push	r20
    5cce:	5f 93       	push	r21
    5cd0:	6f 93       	push	r22
    5cd2:	7f 93       	push	r23
    5cd4:	8f 93       	push	r24
    5cd6:	9f 93       	push	r25
    5cd8:	af 93       	push	r26
    5cda:	bf 93       	push	r27
    5cdc:	ef 93       	push	r30
    5cde:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5ce0:	86 e0       	ldi	r24, 0x06	; 6
    5ce2:	95 e0       	ldi	r25, 0x05	; 5
    5ce4:	c2 de       	rcall	.-636    	; 0x5a6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5ce6:	ff 91       	pop	r31
    5ce8:	ef 91       	pop	r30
    5cea:	bf 91       	pop	r27
    5cec:	af 91       	pop	r26
    5cee:	9f 91       	pop	r25
    5cf0:	8f 91       	pop	r24
    5cf2:	7f 91       	pop	r23
    5cf4:	6f 91       	pop	r22
    5cf6:	5f 91       	pop	r21
    5cf8:	4f 91       	pop	r20
    5cfa:	3f 91       	pop	r19
    5cfc:	2f 91       	pop	r18
    5cfe:	0f 90       	pop	r0
    5d00:	0b be       	out	0x3b, r0	; 59
    5d02:	0f 90       	pop	r0
    5d04:	0f be       	out	0x3f, r0	; 63
    5d06:	0f 90       	pop	r0
    5d08:	1f 90       	pop	r1
    5d0a:	18 95       	reti

00005d0c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5d0c:	86 e0       	ldi	r24, 0x06	; 6
    5d0e:	95 e0       	ldi	r25, 0x05	; 5
    5d10:	33 de       	rcall	.-922    	; 0x5978 <_ZN14HardwareSerial9availableEv>
    5d12:	21 e0       	ldi	r18, 0x01	; 1
    5d14:	89 2b       	or	r24, r25
    5d16:	09 f4       	brne	.+2      	; 0x5d1a <_Z17Serial0_availablev+0xe>
    5d18:	20 e0       	ldi	r18, 0x00	; 0
}
    5d1a:	82 2f       	mov	r24, r18
    5d1c:	08 95       	ret

00005d1e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5d1e:	e6 e0       	ldi	r30, 0x06	; 6
    5d20:	f5 e0       	ldi	r31, 0x05	; 5
    5d22:	13 82       	std	Z+3, r1	; 0x03
    5d24:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5d26:	88 ee       	ldi	r24, 0xE8	; 232
    5d28:	93 e0       	ldi	r25, 0x03	; 3
    5d2a:	a0 e0       	ldi	r26, 0x00	; 0
    5d2c:	b0 e0       	ldi	r27, 0x00	; 0
    5d2e:	84 83       	std	Z+4, r24	; 0x04
    5d30:	95 83       	std	Z+5, r25	; 0x05
    5d32:	a6 83       	std	Z+6, r26	; 0x06
    5d34:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5d36:	81 e2       	ldi	r24, 0x21	; 33
    5d38:	93 e0       	ldi	r25, 0x03	; 3
    5d3a:	91 83       	std	Z+1, r25	; 0x01
    5d3c:	80 83       	st	Z, r24
    5d3e:	85 ec       	ldi	r24, 0xC5	; 197
    5d40:	90 e0       	ldi	r25, 0x00	; 0
    5d42:	95 87       	std	Z+13, r25	; 0x0d
    5d44:	84 87       	std	Z+12, r24	; 0x0c
    5d46:	84 ec       	ldi	r24, 0xC4	; 196
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	97 87       	std	Z+15, r25	; 0x0f
    5d4c:	86 87       	std	Z+14, r24	; 0x0e
    5d4e:	80 ec       	ldi	r24, 0xC0	; 192
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	91 8b       	std	Z+17, r25	; 0x11
    5d54:	80 8b       	std	Z+16, r24	; 0x10
    5d56:	81 ec       	ldi	r24, 0xC1	; 193
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	93 8b       	std	Z+19, r25	; 0x13
    5d5c:	82 8b       	std	Z+18, r24	; 0x12
    5d5e:	82 ec       	ldi	r24, 0xC2	; 194
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	95 8b       	std	Z+21, r25	; 0x15
    5d64:	84 8b       	std	Z+20, r24	; 0x14
    5d66:	86 ec       	ldi	r24, 0xC6	; 198
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	97 8b       	std	Z+23, r25	; 0x17
    5d6c:	86 8b       	std	Z+22, r24	; 0x16
    5d6e:	11 8e       	std	Z+25, r1	; 0x19
    5d70:	12 8e       	std	Z+26, r1	; 0x1a
    5d72:	13 8e       	std	Z+27, r1	; 0x1b
    5d74:	14 8e       	std	Z+28, r1	; 0x1c
    5d76:	08 95       	ret

00005d78 <initVariant>:
    5d78:	08 95       	ret

00005d7a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5d7a:	c2 d1       	rcall	.+900    	; 0x6100 <init>

	initVariant();
    5d7c:	fd df       	rcall	.-6      	; 0x5d78 <initVariant>
    5d7e:	0e 94 65 03 	call	0x6ca	; 0x6ca <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5d82:	c9 ef       	ldi	r28, 0xF9	; 249
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5d84:	dc e2       	ldi	r29, 0x2C	; 44
    5d86:	0e 94 16 04 	call	0x82c	; 0x82c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5d8a:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5d8c:	e1 f3       	breq	.-8      	; 0x5d86 <main+0xc>
    5d8e:	31 de       	rcall	.-926    	; 0x59f2 <_Z14serialEventRunv>
    5d90:	fa cf       	rjmp	.-12     	; 0x5d86 <main+0xc>

00005d92 <_ZdlPv>:
    5d92:	6e c6       	rjmp	.+3292   	; 0x6a70 <free>

00005d94 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5d94:	cf 92       	push	r12
    5d96:	df 92       	push	r13
    5d98:	ef 92       	push	r14
    5d9a:	ff 92       	push	r15
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	6c 01       	movw	r12, r24
    5da6:	7a 01       	movw	r14, r20
    5da8:	8b 01       	movw	r16, r22
    5daa:	c0 e0       	ldi	r28, 0x00	; 0
    5dac:	d0 e0       	ldi	r29, 0x00	; 0
    5dae:	ce 15       	cp	r28, r14
    5db0:	df 05       	cpc	r29, r15
    5db2:	81 f0       	breq	.+32     	; 0x5dd4 <_ZN5Print5writeEPKhj+0x40>
    5db4:	d8 01       	movw	r26, r16
    5db6:	6d 91       	ld	r22, X+
    5db8:	8d 01       	movw	r16, r26
    5dba:	d6 01       	movw	r26, r12
    5dbc:	ed 91       	ld	r30, X+
    5dbe:	fc 91       	ld	r31, X
    5dc0:	01 90       	ld	r0, Z+
    5dc2:	f0 81       	ld	r31, Z
    5dc4:	e0 2d       	mov	r30, r0
    5dc6:	c6 01       	movw	r24, r12
    5dc8:	19 95       	eicall
    5dca:	89 2b       	or	r24, r25
    5dcc:	11 f0       	breq	.+4      	; 0x5dd2 <_ZN5Print5writeEPKhj+0x3e>
    5dce:	21 96       	adiw	r28, 0x01	; 1
    5dd0:	ee cf       	rjmp	.-36     	; 0x5dae <_ZN5Print5writeEPKhj+0x1a>
    5dd2:	7e 01       	movw	r14, r28
    5dd4:	c7 01       	movw	r24, r14
    5dd6:	df 91       	pop	r29
    5dd8:	cf 91       	pop	r28
    5dda:	1f 91       	pop	r17
    5ddc:	0f 91       	pop	r16
    5dde:	ff 90       	pop	r15
    5de0:	ef 90       	pop	r14
    5de2:	df 90       	pop	r13
    5de4:	cf 90       	pop	r12
    5de6:	08 95       	ret

00005de8 <_ZN5Print5printERK6String>:
    5de8:	db 01       	movw	r26, r22
    5dea:	14 96       	adiw	r26, 0x04	; 4
    5dec:	4d 91       	ld	r20, X+
    5dee:	5c 91       	ld	r21, X
    5df0:	15 97       	sbiw	r26, 0x05	; 5
    5df2:	6d 91       	ld	r22, X+
    5df4:	7c 91       	ld	r23, X
    5df6:	dc 01       	movw	r26, r24
    5df8:	ed 91       	ld	r30, X+
    5dfa:	fc 91       	ld	r31, X
    5dfc:	02 80       	ldd	r0, Z+2	; 0x02
    5dfe:	f3 81       	ldd	r31, Z+3	; 0x03
    5e00:	e0 2d       	mov	r30, r0
    5e02:	19 94       	eijmp

00005e04 <_ZN5Print5printEc>:
    5e04:	dc 01       	movw	r26, r24
    5e06:	ed 91       	ld	r30, X+
    5e08:	fc 91       	ld	r31, X
    5e0a:	01 90       	ld	r0, Z+
    5e0c:	f0 81       	ld	r31, Z
    5e0e:	e0 2d       	mov	r30, r0
    5e10:	19 94       	eijmp

00005e12 <_ZN5Print7printlnEv>:
    5e12:	6f e2       	ldi	r22, 0x2F	; 47
    5e14:	73 e0       	ldi	r23, 0x03	; 3
    5e16:	0c 94 df 01 	jmp	0x3be	; 0x3be <_ZN5Print5writeEPKc>

00005e1a <_ZN5Print7printlnERK6String>:
    5e1a:	0f 93       	push	r16
    5e1c:	1f 93       	push	r17
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	ec 01       	movw	r28, r24
    5e24:	e1 df       	rcall	.-62     	; 0x5de8 <_ZN5Print5printERK6String>
    5e26:	8c 01       	movw	r16, r24
    5e28:	ce 01       	movw	r24, r28
    5e2a:	f3 df       	rcall	.-26     	; 0x5e12 <_ZN5Print7printlnEv>
    5e2c:	80 0f       	add	r24, r16
    5e2e:	91 1f       	adc	r25, r17
    5e30:	df 91       	pop	r29
    5e32:	cf 91       	pop	r28
    5e34:	1f 91       	pop	r17
    5e36:	0f 91       	pop	r16
    5e38:	08 95       	ret

00005e3a <_ZN5Print7printlnEPKc>:
    5e3a:	0f 93       	push	r16
    5e3c:	1f 93       	push	r17
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	ec 01       	movw	r28, r24
    5e44:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN5Print5writeEPKc>
    5e48:	8c 01       	movw	r16, r24
    5e4a:	ce 01       	movw	r24, r28
    5e4c:	e2 df       	rcall	.-60     	; 0x5e12 <_ZN5Print7printlnEv>
    5e4e:	80 0f       	add	r24, r16
    5e50:	91 1f       	adc	r25, r17
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	1f 91       	pop	r17
    5e58:	0f 91       	pop	r16
    5e5a:	08 95       	ret

00005e5c <_ZN5Print11printNumberEmh>:
    5e5c:	8f 92       	push	r8
    5e5e:	9f 92       	push	r9
    5e60:	af 92       	push	r10
    5e62:	bf 92       	push	r11
    5e64:	ef 92       	push	r14
    5e66:	ff 92       	push	r15
    5e68:	0f 93       	push	r16
    5e6a:	1f 93       	push	r17
    5e6c:	cf 93       	push	r28
    5e6e:	df 93       	push	r29
    5e70:	cd b7       	in	r28, 0x3d	; 61
    5e72:	de b7       	in	r29, 0x3e	; 62
    5e74:	a1 97       	sbiw	r28, 0x21	; 33
    5e76:	0f b6       	in	r0, 0x3f	; 63
    5e78:	f8 94       	cli
    5e7a:	de bf       	out	0x3e, r29	; 62
    5e7c:	0f be       	out	0x3f, r0	; 63
    5e7e:	cd bf       	out	0x3d, r28	; 61
    5e80:	7c 01       	movw	r14, r24
    5e82:	fa 01       	movw	r30, r20
    5e84:	cb 01       	movw	r24, r22
    5e86:	19 a2       	std	Y+33, r1	; 0x21
    5e88:	22 30       	cpi	r18, 0x02	; 2
    5e8a:	08 f4       	brcc	.+2      	; 0x5e8e <_ZN5Print11printNumberEmh+0x32>
    5e8c:	2a e0       	ldi	r18, 0x0A	; 10
    5e8e:	8e 01       	movw	r16, r28
    5e90:	0f 5d       	subi	r16, 0xDF	; 223
    5e92:	1f 4f       	sbci	r17, 0xFF	; 255
    5e94:	82 2e       	mov	r8, r18
    5e96:	91 2c       	mov	r9, r1
    5e98:	a1 2c       	mov	r10, r1
    5e9a:	b1 2c       	mov	r11, r1
    5e9c:	bf 01       	movw	r22, r30
    5e9e:	a5 01       	movw	r20, r10
    5ea0:	94 01       	movw	r18, r8
    5ea2:	ef d4       	rcall	.+2526   	; 0x6882 <__udivmodsi4>
    5ea4:	f9 01       	movw	r30, r18
    5ea6:	ca 01       	movw	r24, r20
    5ea8:	01 50       	subi	r16, 0x01	; 1
    5eaa:	11 09       	sbc	r17, r1
    5eac:	6a 30       	cpi	r22, 0x0A	; 10
    5eae:	10 f4       	brcc	.+4      	; 0x5eb4 <_ZN5Print11printNumberEmh+0x58>
    5eb0:	60 5d       	subi	r22, 0xD0	; 208
    5eb2:	01 c0       	rjmp	.+2      	; 0x5eb6 <_ZN5Print11printNumberEmh+0x5a>
    5eb4:	69 5c       	subi	r22, 0xC9	; 201
    5eb6:	d8 01       	movw	r26, r16
    5eb8:	6c 93       	st	X, r22
    5eba:	23 2b       	or	r18, r19
    5ebc:	24 2b       	or	r18, r20
    5ebe:	25 2b       	or	r18, r21
    5ec0:	69 f7       	brne	.-38     	; 0x5e9c <_ZN5Print11printNumberEmh+0x40>
    5ec2:	b8 01       	movw	r22, r16
    5ec4:	c7 01       	movw	r24, r14
    5ec6:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN5Print5writeEPKc>
    5eca:	a1 96       	adiw	r28, 0x21	; 33
    5ecc:	0f b6       	in	r0, 0x3f	; 63
    5ece:	f8 94       	cli
    5ed0:	de bf       	out	0x3e, r29	; 62
    5ed2:	0f be       	out	0x3f, r0	; 63
    5ed4:	cd bf       	out	0x3d, r28	; 61
    5ed6:	df 91       	pop	r29
    5ed8:	cf 91       	pop	r28
    5eda:	1f 91       	pop	r17
    5edc:	0f 91       	pop	r16
    5ede:	ff 90       	pop	r15
    5ee0:	ef 90       	pop	r14
    5ee2:	bf 90       	pop	r11
    5ee4:	af 90       	pop	r10
    5ee6:	9f 90       	pop	r9
    5ee8:	8f 90       	pop	r8
    5eea:	08 95       	ret

00005eec <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    5eec:	cf 92       	push	r12
    5eee:	df 92       	push	r13
    5ef0:	ef 92       	push	r14
    5ef2:	ff 92       	push	r15
    5ef4:	0f 93       	push	r16
    5ef6:	1f 93       	push	r17
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
  if (base == 0) {
    5efc:	21 15       	cp	r18, r1
    5efe:	31 05       	cpc	r19, r1
    5f00:	81 f4       	brne	.+32     	; 0x5f22 <_ZN5Print5printEli+0x36>
    return write(n);
    5f02:	dc 01       	movw	r26, r24
    5f04:	ed 91       	ld	r30, X+
    5f06:	fc 91       	ld	r31, X
    5f08:	01 90       	ld	r0, Z+
    5f0a:	f0 81       	ld	r31, Z
    5f0c:	e0 2d       	mov	r30, r0
    5f0e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5f10:	df 91       	pop	r29
    5f12:	cf 91       	pop	r28
    5f14:	1f 91       	pop	r17
    5f16:	0f 91       	pop	r16
    5f18:	ff 90       	pop	r15
    5f1a:	ef 90       	pop	r14
    5f1c:	df 90       	pop	r13
    5f1e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    5f20:	19 94       	eijmp
  } else if (base == 10) {
    5f22:	2a 30       	cpi	r18, 0x0A	; 10
    5f24:	31 05       	cpc	r19, r1
    5f26:	f1 f4       	brne	.+60     	; 0x5f64 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    5f28:	77 ff       	sbrs	r23, 7
    5f2a:	1b c0       	rjmp	.+54     	; 0x5f62 <_ZN5Print5printEli+0x76>
    5f2c:	6a 01       	movw	r12, r20
    5f2e:	7b 01       	movw	r14, r22
    5f30:	ec 01       	movw	r28, r24
      int t = print('-');
    5f32:	6d e2       	ldi	r22, 0x2D	; 45
    5f34:	67 df       	rcall	.-306    	; 0x5e04 <_ZN5Print5printEc>
    5f36:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    5f38:	44 27       	eor	r20, r20
    5f3a:	55 27       	eor	r21, r21
    5f3c:	ba 01       	movw	r22, r20
    5f3e:	4c 19       	sub	r20, r12
    5f40:	5d 09       	sbc	r21, r13
    5f42:	6e 09       	sbc	r22, r14
    5f44:	7f 09       	sbc	r23, r15
    5f46:	2a e0       	ldi	r18, 0x0A	; 10
    5f48:	ce 01       	movw	r24, r28
    5f4a:	88 df       	rcall	.-240    	; 0x5e5c <_ZN5Print11printNumberEmh>
    5f4c:	80 0f       	add	r24, r16
    5f4e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5f50:	df 91       	pop	r29
    5f52:	cf 91       	pop	r28
    5f54:	1f 91       	pop	r17
    5f56:	0f 91       	pop	r16
    5f58:	ff 90       	pop	r15
    5f5a:	ef 90       	pop	r14
    5f5c:	df 90       	pop	r13
    5f5e:	cf 90       	pop	r12
    5f60:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    5f62:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    5f64:	df 91       	pop	r29
    5f66:	cf 91       	pop	r28
    5f68:	1f 91       	pop	r17
    5f6a:	0f 91       	pop	r16
    5f6c:	ff 90       	pop	r15
    5f6e:	ef 90       	pop	r14
    5f70:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    5f72:	cf 90       	pop	r12
    5f74:	73 cf       	rjmp	.-282    	; 0x5e5c <_ZN5Print11printNumberEmh>

00005f76 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    5f76:	9a 01       	movw	r18, r20
  return print((long) n, base);
    5f78:	ab 01       	movw	r20, r22
    5f7a:	77 0f       	add	r23, r23
    5f7c:	66 0b       	sbc	r22, r22
    5f7e:	77 0b       	sbc	r23, r23
    5f80:	b5 cf       	rjmp	.-150    	; 0x5eec <_ZN5Print5printEli>

00005f82 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5f82:	1f 92       	push	r1
    5f84:	0f 92       	push	r0
    5f86:	0f b6       	in	r0, 0x3f	; 63
    5f88:	0f 92       	push	r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	2f 93       	push	r18
    5f8e:	3f 93       	push	r19
    5f90:	8f 93       	push	r24
    5f92:	9f 93       	push	r25
    5f94:	af 93       	push	r26
    5f96:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5f98:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <timer0_millis>
    5f9c:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <timer0_millis+0x1>
    5fa0:	a0 91 a6 05 	lds	r26, 0x05A6	; 0x8005a6 <timer0_millis+0x2>
    5fa4:	b0 91 a7 05 	lds	r27, 0x05A7	; 0x8005a7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5fa8:	30 91 a3 05 	lds	r19, 0x05A3	; 0x8005a3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5fac:	23 e0       	ldi	r18, 0x03	; 3
    5fae:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5fb0:	2d 37       	cpi	r18, 0x7D	; 125
    5fb2:	20 f4       	brcc	.+8      	; 0x5fbc <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5fb4:	01 96       	adiw	r24, 0x01	; 1
    5fb6:	a1 1d       	adc	r26, r1
    5fb8:	b1 1d       	adc	r27, r1
    5fba:	05 c0       	rjmp	.+10     	; 0x5fc6 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5fbc:	26 e8       	ldi	r18, 0x86	; 134
    5fbe:	23 0f       	add	r18, r19
		m += 1;
    5fc0:	02 96       	adiw	r24, 0x02	; 2
    5fc2:	a1 1d       	adc	r26, r1
    5fc4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5fc6:	20 93 a3 05 	sts	0x05A3, r18	; 0x8005a3 <timer0_fract>
	timer0_millis = m;
    5fca:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <timer0_millis>
    5fce:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <timer0_millis+0x1>
    5fd2:	a0 93 a6 05 	sts	0x05A6, r26	; 0x8005a6 <timer0_millis+0x2>
    5fd6:	b0 93 a7 05 	sts	0x05A7, r27	; 0x8005a7 <timer0_millis+0x3>
	timer0_overflow_count++;
    5fda:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <timer0_overflow_count>
    5fde:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <timer0_overflow_count+0x1>
    5fe2:	a0 91 aa 05 	lds	r26, 0x05AA	; 0x8005aa <timer0_overflow_count+0x2>
    5fe6:	b0 91 ab 05 	lds	r27, 0x05AB	; 0x8005ab <timer0_overflow_count+0x3>
    5fea:	01 96       	adiw	r24, 0x01	; 1
    5fec:	a1 1d       	adc	r26, r1
    5fee:	b1 1d       	adc	r27, r1
    5ff0:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <timer0_overflow_count>
    5ff4:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <timer0_overflow_count+0x1>
    5ff8:	a0 93 aa 05 	sts	0x05AA, r26	; 0x8005aa <timer0_overflow_count+0x2>
    5ffc:	b0 93 ab 05 	sts	0x05AB, r27	; 0x8005ab <timer0_overflow_count+0x3>
}
    6000:	bf 91       	pop	r27
    6002:	af 91       	pop	r26
    6004:	9f 91       	pop	r25
    6006:	8f 91       	pop	r24
    6008:	3f 91       	pop	r19
    600a:	2f 91       	pop	r18
    600c:	0f 90       	pop	r0
    600e:	0f be       	out	0x3f, r0	; 63
    6010:	0f 90       	pop	r0
    6012:	1f 90       	pop	r1
    6014:	18 95       	reti

00006016 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6016:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6018:	f8 94       	cli
	m = timer0_millis;
    601a:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <timer0_millis>
    601e:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <timer0_millis+0x1>
    6022:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <timer0_millis+0x2>
    6026:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <timer0_millis+0x3>
	SREG = oldSREG;
    602a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    602c:	08 95       	ret

0000602e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    602e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6030:	f8 94       	cli
	m = timer0_overflow_count;
    6032:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <timer0_overflow_count>
    6036:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <timer0_overflow_count+0x1>
    603a:	a0 91 aa 05 	lds	r26, 0x05AA	; 0x8005aa <timer0_overflow_count+0x2>
    603e:	b0 91 ab 05 	lds	r27, 0x05AB	; 0x8005ab <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6042:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6044:	a8 9b       	sbis	0x15, 0	; 21
    6046:	05 c0       	rjmp	.+10     	; 0x6052 <micros+0x24>
    6048:	2f 3f       	cpi	r18, 0xFF	; 255
    604a:	19 f0       	breq	.+6      	; 0x6052 <micros+0x24>
		m++;
    604c:	01 96       	adiw	r24, 0x01	; 1
    604e:	a1 1d       	adc	r26, r1
    6050:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6052:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6054:	ba 2f       	mov	r27, r26
    6056:	a9 2f       	mov	r26, r25
    6058:	98 2f       	mov	r25, r24
    605a:	88 27       	eor	r24, r24
    605c:	82 0f       	add	r24, r18
    605e:	91 1d       	adc	r25, r1
    6060:	a1 1d       	adc	r26, r1
    6062:	b1 1d       	adc	r27, r1
    6064:	bc 01       	movw	r22, r24
    6066:	cd 01       	movw	r24, r26
    6068:	42 e0       	ldi	r20, 0x02	; 2
    606a:	66 0f       	add	r22, r22
    606c:	77 1f       	adc	r23, r23
    606e:	88 1f       	adc	r24, r24
    6070:	99 1f       	adc	r25, r25
    6072:	4a 95       	dec	r20
    6074:	d1 f7       	brne	.-12     	; 0x606a <micros+0x3c>
}
    6076:	08 95       	ret

00006078 <delay>:

void delay(unsigned long ms)
{
    6078:	8f 92       	push	r8
    607a:	9f 92       	push	r9
    607c:	af 92       	push	r10
    607e:	bf 92       	push	r11
    6080:	cf 92       	push	r12
    6082:	df 92       	push	r13
    6084:	ef 92       	push	r14
    6086:	ff 92       	push	r15
    6088:	6b 01       	movw	r12, r22
    608a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    608c:	d0 df       	rcall	.-96     	; 0x602e <micros>
    608e:	4b 01       	movw	r8, r22
    6090:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6092:	c1 14       	cp	r12, r1
    6094:	d1 04       	cpc	r13, r1
    6096:	e1 04       	cpc	r14, r1
    6098:	f1 04       	cpc	r15, r1
		yield();
    609a:	f1 f0       	breq	.+60     	; 0x60d8 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    609c:	e2 d3       	rcall	.+1988   	; 0x6862 <yield>
    609e:	c7 df       	rcall	.-114    	; 0x602e <micros>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	88 19       	sub	r24, r8
    60a6:	99 09       	sbc	r25, r9
    60a8:	aa 09       	sbc	r26, r10
    60aa:	bb 09       	sbc	r27, r11
    60ac:	88 3e       	cpi	r24, 0xE8	; 232
    60ae:	93 40       	sbci	r25, 0x03	; 3
    60b0:	a1 05       	cpc	r26, r1
    60b2:	b1 05       	cpc	r27, r1
    60b4:	70 f3       	brcs	.-36     	; 0x6092 <delay+0x1a>
			ms--;
    60b6:	21 e0       	ldi	r18, 0x01	; 1
    60b8:	c2 1a       	sub	r12, r18
    60ba:	d1 08       	sbc	r13, r1
    60bc:	e1 08       	sbc	r14, r1
    60be:	f1 08       	sbc	r15, r1
			start += 1000;
    60c0:	88 ee       	ldi	r24, 0xE8	; 232
    60c2:	88 0e       	add	r8, r24
    60c4:	83 e0       	ldi	r24, 0x03	; 3
    60c6:	98 1e       	adc	r9, r24
    60c8:	a1 1c       	adc	r10, r1
    60ca:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    60cc:	c1 14       	cp	r12, r1
    60ce:	d1 04       	cpc	r13, r1
    60d0:	e1 04       	cpc	r14, r1
    60d2:	f1 04       	cpc	r15, r1
    60d4:	21 f7       	brne	.-56     	; 0x609e <delay+0x26>
    60d6:	dd cf       	rjmp	.-70     	; 0x6092 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    60d8:	ff 90       	pop	r15
    60da:	ef 90       	pop	r14
    60dc:	df 90       	pop	r13
    60de:	cf 90       	pop	r12
    60e0:	bf 90       	pop	r11
    60e2:	af 90       	pop	r10
    60e4:	9f 90       	pop	r9
    60e6:	8f 90       	pop	r8
    60e8:	08 95       	ret

000060ea <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    60ea:	82 30       	cpi	r24, 0x02	; 2
    60ec:	91 05       	cpc	r25, r1
    60ee:	38 f0       	brcs	.+14     	; 0x60fe <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    60f0:	88 0f       	add	r24, r24
    60f2:	99 1f       	adc	r25, r25
    60f4:	88 0f       	add	r24, r24
    60f6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    60f8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    60fa:	01 97       	sbiw	r24, 0x01	; 1
    60fc:	f1 f7       	brne	.-4      	; 0x60fa <delayMicroseconds+0x10>
    60fe:	08 95       	ret

00006100 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6100:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6102:	84 b5       	in	r24, 0x24	; 36
    6104:	82 60       	ori	r24, 0x02	; 2
    6106:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6108:	84 b5       	in	r24, 0x24	; 36
    610a:	81 60       	ori	r24, 0x01	; 1
    610c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    610e:	85 b5       	in	r24, 0x25	; 37
    6110:	82 60       	ori	r24, 0x02	; 2
    6112:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6114:	85 b5       	in	r24, 0x25	; 37
    6116:	81 60       	ori	r24, 0x01	; 1
    6118:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    611a:	ee e6       	ldi	r30, 0x6E	; 110
    611c:	f0 e0       	ldi	r31, 0x00	; 0
    611e:	80 81       	ld	r24, Z
    6120:	81 60       	ori	r24, 0x01	; 1
    6122:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6124:	e1 e8       	ldi	r30, 0x81	; 129
    6126:	f0 e0       	ldi	r31, 0x00	; 0
    6128:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    612a:	80 81       	ld	r24, Z
    612c:	82 60       	ori	r24, 0x02	; 2
    612e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6130:	80 81       	ld	r24, Z
    6132:	81 60       	ori	r24, 0x01	; 1
    6134:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6136:	e0 e8       	ldi	r30, 0x80	; 128
    6138:	f0 e0       	ldi	r31, 0x00	; 0
    613a:	80 81       	ld	r24, Z
    613c:	81 60       	ori	r24, 0x01	; 1
    613e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6140:	e1 eb       	ldi	r30, 0xB1	; 177
    6142:	f0 e0       	ldi	r31, 0x00	; 0
    6144:	80 81       	ld	r24, Z
    6146:	84 60       	ori	r24, 0x04	; 4
    6148:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    614a:	e0 eb       	ldi	r30, 0xB0	; 176
    614c:	f0 e0       	ldi	r31, 0x00	; 0
    614e:	80 81       	ld	r24, Z
    6150:	81 60       	ori	r24, 0x01	; 1
    6152:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6154:	e1 e9       	ldi	r30, 0x91	; 145
    6156:	f0 e0       	ldi	r31, 0x00	; 0
    6158:	80 81       	ld	r24, Z
    615a:	82 60       	ori	r24, 0x02	; 2
    615c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    615e:	80 81       	ld	r24, Z
    6160:	81 60       	ori	r24, 0x01	; 1
    6162:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    6164:	e0 e9       	ldi	r30, 0x90	; 144
    6166:	f0 e0       	ldi	r31, 0x00	; 0
    6168:	80 81       	ld	r24, Z
    616a:	81 60       	ori	r24, 0x01	; 1
    616c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    616e:	e1 ea       	ldi	r30, 0xA1	; 161
    6170:	f0 e0       	ldi	r31, 0x00	; 0
    6172:	80 81       	ld	r24, Z
    6174:	82 60       	ori	r24, 0x02	; 2
    6176:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6178:	80 81       	ld	r24, Z
    617a:	81 60       	ori	r24, 0x01	; 1
    617c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    617e:	e0 ea       	ldi	r30, 0xA0	; 160
    6180:	f0 e0       	ldi	r31, 0x00	; 0
    6182:	80 81       	ld	r24, Z
    6184:	81 60       	ori	r24, 0x01	; 1
    6186:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6188:	e1 e2       	ldi	r30, 0x21	; 33
    618a:	f1 e0       	ldi	r31, 0x01	; 1
    618c:	80 81       	ld	r24, Z
    618e:	82 60       	ori	r24, 0x02	; 2
    6190:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    6192:	80 81       	ld	r24, Z
    6194:	81 60       	ori	r24, 0x01	; 1
    6196:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6198:	e0 e2       	ldi	r30, 0x20	; 32
    619a:	f1 e0       	ldi	r31, 0x01	; 1
    619c:	80 81       	ld	r24, Z
    619e:	81 60       	ori	r24, 0x01	; 1
    61a0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    61a2:	ea e7       	ldi	r30, 0x7A	; 122
    61a4:	f0 e0       	ldi	r31, 0x00	; 0
    61a6:	80 81       	ld	r24, Z
    61a8:	84 60       	ori	r24, 0x04	; 4
    61aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    61ac:	80 81       	ld	r24, Z
    61ae:	82 60       	ori	r24, 0x02	; 2
    61b0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    61b2:	80 81       	ld	r24, Z
    61b4:	81 60       	ori	r24, 0x01	; 1
    61b6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    61b8:	80 81       	ld	r24, Z
    61ba:	80 68       	ori	r24, 0x80	; 128
    61bc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    61be:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    61c2:	08 95       	ret

000061c4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	fc 01       	movw	r30, r24
    61c8:	31 97       	sbiw	r30, 0x01	; 1
    61ca:	e2 31       	cpi	r30, 0x12	; 18
    61cc:	f1 05       	cpc	r31, r1
    61ce:	08 f0       	brcs	.+2      	; 0x61d2 <turnOffPWM+0xe>
    61d0:	4d c0       	rjmp	.+154    	; 0x626c <turnOffPWM+0xa8>
    61d2:	88 27       	eor	r24, r24
    61d4:	ee 58       	subi	r30, 0x8E	; 142
    61d6:	ff 4f       	sbci	r31, 0xFF	; 255
    61d8:	8f 4f       	sbci	r24, 0xFF	; 255
    61da:	91 c3       	rjmp	.+1826   	; 0x68fe <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    61dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    61e0:	8f 77       	andi	r24, 0x7F	; 127
    61e2:	03 c0       	rjmp	.+6      	; 0x61ea <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    61e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    61e8:	8f 7d       	andi	r24, 0xDF	; 223
    61ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    61ee:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    61f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    61f4:	87 7f       	andi	r24, 0xF7	; 247
    61f6:	f9 cf       	rjmp	.-14     	; 0x61ea <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    61f8:	84 b5       	in	r24, 0x24	; 36
    61fa:	8f 77       	andi	r24, 0x7F	; 127
    61fc:	02 c0       	rjmp	.+4      	; 0x6202 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    61fe:	84 b5       	in	r24, 0x24	; 36
    6200:	8f 7d       	andi	r24, 0xDF	; 223
    6202:	84 bd       	out	0x24, r24	; 36
    6204:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6206:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    620a:	8f 77       	andi	r24, 0x7F	; 127
    620c:	03 c0       	rjmp	.+6      	; 0x6214 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    620e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6212:	8f 7d       	andi	r24, 0xDF	; 223
    6214:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6218:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    621a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    621e:	8f 77       	andi	r24, 0x7F	; 127
    6220:	07 c0       	rjmp	.+14     	; 0x6230 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6222:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6226:	8f 7d       	andi	r24, 0xDF	; 223
    6228:	03 c0       	rjmp	.+6      	; 0x6230 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    622a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    622e:	87 7f       	andi	r24, 0xF7	; 247
    6230:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6234:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6236:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    623a:	8f 77       	andi	r24, 0x7F	; 127
    623c:	07 c0       	rjmp	.+14     	; 0x624c <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    623e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6242:	8f 7d       	andi	r24, 0xDF	; 223
    6244:	03 c0       	rjmp	.+6      	; 0x624c <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6246:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    624a:	87 7f       	andi	r24, 0xF7	; 247
    624c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6250:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6252:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6256:	8f 77       	andi	r24, 0x7F	; 127
    6258:	07 c0       	rjmp	.+14     	; 0x6268 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    625a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    625e:	8f 7d       	andi	r24, 0xDF	; 223
    6260:	03 c0       	rjmp	.+6      	; 0x6268 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6262:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6266:	87 7f       	andi	r24, 0xF7	; 247
    6268:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    626c:	08 95       	ret

0000626e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    626e:	cf 93       	push	r28
    6270:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	fc 01       	movw	r30, r24
    6276:	e2 5b       	subi	r30, 0xB2	; 178
    6278:	fe 4f       	sbci	r31, 0xFE	; 254
    627a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    627c:	fc 01       	movw	r30, r24
    627e:	ec 56       	subi	r30, 0x6C	; 108
    6280:	fe 4f       	sbci	r31, 0xFE	; 254
    6282:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6284:	88 23       	and	r24, r24
    6286:	61 f1       	breq	.+88     	; 0x62e0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	88 0f       	add	r24, r24
    628c:	99 1f       	adc	r25, r25
    628e:	fc 01       	movw	r30, r24
    6290:	e2 5f       	subi	r30, 0xF2	; 242
    6292:	fd 4f       	sbci	r31, 0xFD	; 253
    6294:	c5 91       	lpm	r28, Z+
    6296:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6298:	fc 01       	movw	r30, r24
    629a:	ec 50       	subi	r30, 0x0C	; 12
    629c:	fe 4f       	sbci	r31, 0xFE	; 254
    629e:	a5 91       	lpm	r26, Z+
    62a0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    62a2:	61 11       	cpse	r22, r1
    62a4:	09 c0       	rjmp	.+18     	; 0x62b8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    62a6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    62a8:	f8 94       	cli
		*reg &= ~bit;
    62aa:	88 81       	ld	r24, Y
    62ac:	20 95       	com	r18
    62ae:	82 23       	and	r24, r18
    62b0:	88 83       	st	Y, r24
		*out &= ~bit;
    62b2:	ec 91       	ld	r30, X
    62b4:	2e 23       	and	r18, r30
    62b6:	0b c0       	rjmp	.+22     	; 0x62ce <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    62b8:	62 30       	cpi	r22, 0x02	; 2
    62ba:	61 f4       	brne	.+24     	; 0x62d4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    62bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    62be:	f8 94       	cli
		*reg &= ~bit;
    62c0:	88 81       	ld	r24, Y
    62c2:	32 2f       	mov	r19, r18
    62c4:	30 95       	com	r19
    62c6:	83 23       	and	r24, r19
    62c8:	88 83       	st	Y, r24
		*out |= bit;
    62ca:	ec 91       	ld	r30, X
    62cc:	2e 2b       	or	r18, r30
    62ce:	2c 93       	st	X, r18
		SREG = oldSREG;
    62d0:	9f bf       	out	0x3f, r25	; 63
    62d2:	06 c0       	rjmp	.+12     	; 0x62e0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    62d4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    62d6:	f8 94       	cli
		*reg |= bit;
    62d8:	e8 81       	ld	r30, Y
    62da:	2e 2b       	or	r18, r30
    62dc:	28 83       	st	Y, r18
		SREG = oldSREG;
    62de:	8f bf       	out	0x3f, r24	; 63
	}
}
    62e0:	df 91       	pop	r29
    62e2:	cf 91       	pop	r28
    62e4:	08 95       	ret

000062e6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    62e6:	1f 93       	push	r17
    62e8:	cf 93       	push	r28
    62ea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    62ec:	28 2f       	mov	r18, r24
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	f9 01       	movw	r30, r18
    62f2:	e8 5f       	subi	r30, 0xF8	; 248
    62f4:	fe 4f       	sbci	r31, 0xFE	; 254
    62f6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    62f8:	f9 01       	movw	r30, r18
    62fa:	e2 5b       	subi	r30, 0xB2	; 178
    62fc:	fe 4f       	sbci	r31, 0xFE	; 254
    62fe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6300:	f9 01       	movw	r30, r18
    6302:	ec 56       	subi	r30, 0x6C	; 108
    6304:	fe 4f       	sbci	r31, 0xFE	; 254
    6306:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6308:	cc 23       	and	r28, r28
    630a:	b9 f0       	breq	.+46     	; 0x633a <digitalWrite+0x54>
    630c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    630e:	81 11       	cpse	r24, r1
    6310:	59 df       	rcall	.-334    	; 0x61c4 <turnOffPWM>

	out = portOutputRegister(port);
    6312:	ec 2f       	mov	r30, r28
    6314:	f0 e0       	ldi	r31, 0x00	; 0
    6316:	ee 0f       	add	r30, r30
    6318:	ff 1f       	adc	r31, r31
    631a:	ec 50       	subi	r30, 0x0C	; 12
    631c:	fe 4f       	sbci	r31, 0xFE	; 254
    631e:	a5 91       	lpm	r26, Z+
    6320:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6322:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6324:	f8 94       	cli

	if (val == LOW) {
    6326:	11 11       	cpse	r17, r1
    6328:	04 c0       	rjmp	.+8      	; 0x6332 <digitalWrite+0x4c>
		*out &= ~bit;
    632a:	8c 91       	ld	r24, X
    632c:	d0 95       	com	r29
    632e:	d8 23       	and	r29, r24
    6330:	02 c0       	rjmp	.+4      	; 0x6336 <digitalWrite+0x50>
	} else {
		*out |= bit;
    6332:	ec 91       	ld	r30, X
    6334:	de 2b       	or	r29, r30
    6336:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6338:	9f bf       	out	0x3f, r25	; 63
}
    633a:	df 91       	pop	r29
    633c:	cf 91       	pop	r28
    633e:	1f 91       	pop	r17
    6340:	08 95       	ret

00006342 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6342:	cf 93       	push	r28
    6344:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6346:	28 2f       	mov	r18, r24
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	f9 01       	movw	r30, r18
    634c:	e8 5f       	subi	r30, 0xF8	; 248
    634e:	fe 4f       	sbci	r31, 0xFE	; 254
    6350:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6352:	f9 01       	movw	r30, r18
    6354:	e2 5b       	subi	r30, 0xB2	; 178
    6356:	fe 4f       	sbci	r31, 0xFE	; 254
    6358:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    635a:	f9 01       	movw	r30, r18
    635c:	ec 56       	subi	r30, 0x6C	; 108
    635e:	fe 4f       	sbci	r31, 0xFE	; 254
    6360:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6362:	cc 23       	and	r28, r28
    6364:	89 f0       	breq	.+34     	; 0x6388 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6366:	81 11       	cpse	r24, r1
    6368:	2d df       	rcall	.-422    	; 0x61c4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    636a:	ec 2f       	mov	r30, r28
    636c:	f0 e0       	ldi	r31, 0x00	; 0
    636e:	ee 0f       	add	r30, r30
    6370:	ff 1f       	adc	r31, r31
    6372:	e6 52       	subi	r30, 0x26	; 38
    6374:	fe 4f       	sbci	r31, 0xFE	; 254
    6376:	a5 91       	lpm	r26, Z+
    6378:	b4 91       	lpm	r27, Z
    637a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    637c:	ed 23       	and	r30, r29
    637e:	81 e0       	ldi	r24, 0x01	; 1
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	21 f4       	brne	.+8      	; 0x638c <digitalRead+0x4a>
    6384:	80 e0       	ldi	r24, 0x00	; 0
    6386:	02 c0       	rjmp	.+4      	; 0x638c <digitalRead+0x4a>
    6388:	80 e0       	ldi	r24, 0x00	; 0
    638a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    638c:	df 91       	pop	r29
    638e:	cf 91       	pop	r28
    6390:	08 95       	ret

00006392 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6392:	4f 92       	push	r4
    6394:	5f 92       	push	r5
    6396:	6f 92       	push	r6
    6398:	7f 92       	push	r7
    639a:	af 92       	push	r10
    639c:	bf 92       	push	r11
    639e:	cf 92       	push	r12
    63a0:	df 92       	push	r13
    63a2:	ef 92       	push	r14
    63a4:	ff 92       	push	r15
    63a6:	0f 93       	push	r16
    63a8:	1f 93       	push	r17
    63aa:	cf 93       	push	r28
    63ac:	df 93       	push	r29
    63ae:	cd b7       	in	r28, 0x3d	; 61
    63b0:	de b7       	in	r29, 0x3e	; 62
    63b2:	29 01       	movw	r4, r18
    63b4:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    63b6:	9b 01       	movw	r18, r22
    63b8:	ac 01       	movw	r20, r24
    63ba:	24 19       	sub	r18, r4
    63bc:	35 09       	sbc	r19, r5
    63be:	46 09       	sbc	r20, r6
    63c0:	57 09       	sbc	r21, r7
    63c2:	8a 89       	ldd	r24, Y+18	; 0x12
    63c4:	9b 89       	ldd	r25, Y+19	; 0x13
    63c6:	ac 89       	ldd	r26, Y+20	; 0x14
    63c8:	bd 89       	ldd	r27, Y+21	; 0x15
    63ca:	bc 01       	movw	r22, r24
    63cc:	cd 01       	movw	r24, r26
    63ce:	6a 19       	sub	r22, r10
    63d0:	7b 09       	sbc	r23, r11
    63d2:	8c 09       	sbc	r24, r12
    63d4:	9d 09       	sbc	r25, r13
    63d6:	46 d2       	rcall	.+1164   	; 0x6864 <__mulsi3>
    63d8:	a8 01       	movw	r20, r16
    63da:	97 01       	movw	r18, r14
    63dc:	24 19       	sub	r18, r4
    63de:	35 09       	sbc	r19, r5
    63e0:	46 09       	sbc	r20, r6
    63e2:	57 09       	sbc	r21, r7
    63e4:	70 d2       	rcall	.+1248   	; 0x68c6 <__divmodsi4>
    63e6:	ca 01       	movw	r24, r20
    63e8:	b9 01       	movw	r22, r18
    63ea:	6a 0d       	add	r22, r10
    63ec:	7b 1d       	adc	r23, r11
    63ee:	8c 1d       	adc	r24, r12
    63f0:	9d 1d       	adc	r25, r13
}
    63f2:	df 91       	pop	r29
    63f4:	cf 91       	pop	r28
    63f6:	1f 91       	pop	r17
    63f8:	0f 91       	pop	r16
    63fa:	ff 90       	pop	r15
    63fc:	ef 90       	pop	r14
    63fe:	df 90       	pop	r13
    6400:	cf 90       	pop	r12
    6402:	bf 90       	pop	r11
    6404:	af 90       	pop	r10
    6406:	7f 90       	pop	r7
    6408:	6f 90       	pop	r6
    640a:	5f 90       	pop	r5
    640c:	4f 90       	pop	r4
    640e:	08 95       	ret

00006410 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    6410:	08 95       	ret

00006412 <_ZN6StringD1Ev>:
    6412:	fc 01       	movw	r30, r24
    6414:	80 81       	ld	r24, Z
    6416:	91 81       	ldd	r25, Z+1	; 0x01
    6418:	00 97       	sbiw	r24, 0x00	; 0
    641a:	09 f0       	breq	.+2      	; 0x641e <_ZN6StringD1Ev+0xc>
    641c:	29 c3       	rjmp	.+1618   	; 0x6a70 <free>
    641e:	08 95       	ret

00006420 <_ZN6String10invalidateEv>:
    6420:	cf 93       	push	r28
    6422:	df 93       	push	r29
    6424:	ec 01       	movw	r28, r24
    6426:	88 81       	ld	r24, Y
    6428:	99 81       	ldd	r25, Y+1	; 0x01
    642a:	00 97       	sbiw	r24, 0x00	; 0
    642c:	09 f0       	breq	.+2      	; 0x6430 <_ZN6String10invalidateEv+0x10>
    642e:	20 d3       	rcall	.+1600   	; 0x6a70 <free>
    6430:	19 82       	std	Y+1, r1	; 0x01
    6432:	18 82       	st	Y, r1
    6434:	1d 82       	std	Y+5, r1	; 0x05
    6436:	1c 82       	std	Y+4, r1	; 0x04
    6438:	1b 82       	std	Y+3, r1	; 0x03
    643a:	1a 82       	std	Y+2, r1	; 0x02
    643c:	df 91       	pop	r29
    643e:	cf 91       	pop	r28
    6440:	08 95       	ret

00006442 <_ZN6String12changeBufferEj>:
    6442:	0f 93       	push	r16
    6444:	1f 93       	push	r17
    6446:	cf 93       	push	r28
    6448:	df 93       	push	r29
    644a:	ec 01       	movw	r28, r24
    644c:	8b 01       	movw	r16, r22
    644e:	6f 5f       	subi	r22, 0xFF	; 255
    6450:	7f 4f       	sbci	r23, 0xFF	; 255
    6452:	88 81       	ld	r24, Y
    6454:	99 81       	ldd	r25, Y+1	; 0x01
    6456:	95 d3       	rcall	.+1834   	; 0x6b82 <realloc>
    6458:	00 97       	sbiw	r24, 0x00	; 0
    645a:	31 f0       	breq	.+12     	; 0x6468 <_ZN6String12changeBufferEj+0x26>
    645c:	99 83       	std	Y+1, r25	; 0x01
    645e:	88 83       	st	Y, r24
    6460:	1b 83       	std	Y+3, r17	; 0x03
    6462:	0a 83       	std	Y+2, r16	; 0x02
    6464:	81 e0       	ldi	r24, 0x01	; 1
    6466:	01 c0       	rjmp	.+2      	; 0x646a <_ZN6String12changeBufferEj+0x28>
    6468:	80 e0       	ldi	r24, 0x00	; 0
    646a:	df 91       	pop	r29
    646c:	cf 91       	pop	r28
    646e:	1f 91       	pop	r17
    6470:	0f 91       	pop	r16
    6472:	08 95       	ret

00006474 <_ZN6String7reserveEj>:
    6474:	cf 93       	push	r28
    6476:	df 93       	push	r29
    6478:	ec 01       	movw	r28, r24
    647a:	88 81       	ld	r24, Y
    647c:	99 81       	ldd	r25, Y+1	; 0x01
    647e:	89 2b       	or	r24, r25
    6480:	29 f0       	breq	.+10     	; 0x648c <_ZN6String7reserveEj+0x18>
    6482:	8a 81       	ldd	r24, Y+2	; 0x02
    6484:	9b 81       	ldd	r25, Y+3	; 0x03
    6486:	86 17       	cp	r24, r22
    6488:	97 07       	cpc	r25, r23
    648a:	58 f4       	brcc	.+22     	; 0x64a2 <_ZN6String7reserveEj+0x2e>
    648c:	ce 01       	movw	r24, r28
    648e:	d9 df       	rcall	.-78     	; 0x6442 <_ZN6String12changeBufferEj>
    6490:	88 23       	and	r24, r24
    6492:	41 f0       	breq	.+16     	; 0x64a4 <_ZN6String7reserveEj+0x30>
    6494:	8c 81       	ldd	r24, Y+4	; 0x04
    6496:	9d 81       	ldd	r25, Y+5	; 0x05
    6498:	89 2b       	or	r24, r25
    649a:	19 f4       	brne	.+6      	; 0x64a2 <_ZN6String7reserveEj+0x2e>
    649c:	e8 81       	ld	r30, Y
    649e:	f9 81       	ldd	r31, Y+1	; 0x01
    64a0:	10 82       	st	Z, r1
    64a2:	81 e0       	ldi	r24, 0x01	; 1
    64a4:	df 91       	pop	r29
    64a6:	cf 91       	pop	r28
    64a8:	08 95       	ret

000064aa <_ZN6String4copyEPKcj>:
    64aa:	ef 92       	push	r14
    64ac:	ff 92       	push	r15
    64ae:	0f 93       	push	r16
    64b0:	1f 93       	push	r17
    64b2:	cf 93       	push	r28
    64b4:	df 93       	push	r29
    64b6:	ec 01       	movw	r28, r24
    64b8:	7b 01       	movw	r14, r22
    64ba:	8a 01       	movw	r16, r20
    64bc:	ba 01       	movw	r22, r20
    64be:	da df       	rcall	.-76     	; 0x6474 <_ZN6String7reserveEj>
    64c0:	81 11       	cpse	r24, r1
    64c2:	03 c0       	rjmp	.+6      	; 0x64ca <_ZN6String4copyEPKcj+0x20>
    64c4:	ce 01       	movw	r24, r28
    64c6:	ac df       	rcall	.-168    	; 0x6420 <_ZN6String10invalidateEv>
    64c8:	06 c0       	rjmp	.+12     	; 0x64d6 <_ZN6String4copyEPKcj+0x2c>
    64ca:	1d 83       	std	Y+5, r17	; 0x05
    64cc:	0c 83       	std	Y+4, r16	; 0x04
    64ce:	b7 01       	movw	r22, r14
    64d0:	88 81       	ld	r24, Y
    64d2:	99 81       	ldd	r25, Y+1	; 0x01
    64d4:	5b d4       	rcall	.+2230   	; 0x6d8c <strcpy>
    64d6:	ce 01       	movw	r24, r28
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	1f 91       	pop	r17
    64de:	0f 91       	pop	r16
    64e0:	ff 90       	pop	r15
    64e2:	ef 90       	pop	r14
    64e4:	08 95       	ret

000064e6 <_ZN6StringC1EPKc>:
    64e6:	fc 01       	movw	r30, r24
    64e8:	11 82       	std	Z+1, r1	; 0x01
    64ea:	10 82       	st	Z, r1
    64ec:	13 82       	std	Z+3, r1	; 0x03
    64ee:	12 82       	std	Z+2, r1	; 0x02
    64f0:	15 82       	std	Z+5, r1	; 0x05
    64f2:	14 82       	std	Z+4, r1	; 0x04
    64f4:	61 15       	cp	r22, r1
    64f6:	71 05       	cpc	r23, r1
    64f8:	49 f0       	breq	.+18     	; 0x650c <_ZN6StringC1EPKc+0x26>
    64fa:	fb 01       	movw	r30, r22
    64fc:	01 90       	ld	r0, Z+
    64fe:	00 20       	and	r0, r0
    6500:	e9 f7       	brne	.-6      	; 0x64fc <_ZN6StringC1EPKc+0x16>
    6502:	31 97       	sbiw	r30, 0x01	; 1
    6504:	af 01       	movw	r20, r30
    6506:	46 1b       	sub	r20, r22
    6508:	57 0b       	sbc	r21, r23
    650a:	cf cf       	rjmp	.-98     	; 0x64aa <_ZN6String4copyEPKcj>
    650c:	08 95       	ret

0000650e <_ZN6String4moveERS_>:
    650e:	0f 93       	push	r16
    6510:	1f 93       	push	r17
    6512:	cf 93       	push	r28
    6514:	df 93       	push	r29
    6516:	8c 01       	movw	r16, r24
    6518:	eb 01       	movw	r28, r22
    651a:	fc 01       	movw	r30, r24
    651c:	80 81       	ld	r24, Z
    651e:	91 81       	ldd	r25, Z+1	; 0x01
    6520:	00 97       	sbiw	r24, 0x00	; 0
    6522:	c1 f0       	breq	.+48     	; 0x6554 <_ZN6String4moveERS_+0x46>
    6524:	68 81       	ld	r22, Y
    6526:	79 81       	ldd	r23, Y+1	; 0x01
    6528:	61 15       	cp	r22, r1
    652a:	71 05       	cpc	r23, r1
    652c:	91 f0       	breq	.+36     	; 0x6552 <_ZN6String4moveERS_+0x44>
    652e:	28 e0       	ldi	r18, 0x08	; 8
    6530:	32 e3       	ldi	r19, 0x32	; 50
    6532:	23 2b       	or	r18, r19
    6534:	71 f0       	breq	.+28     	; 0x6552 <_ZN6String4moveERS_+0x44>
    6536:	42 81       	ldd	r20, Z+2	; 0x02
    6538:	53 81       	ldd	r21, Z+3	; 0x03
    653a:	2c 81       	ldd	r18, Y+4	; 0x04
    653c:	3d 81       	ldd	r19, Y+5	; 0x05
    653e:	42 17       	cp	r20, r18
    6540:	53 07       	cpc	r21, r19
    6542:	38 f0       	brcs	.+14     	; 0x6552 <_ZN6String4moveERS_+0x44>
    6544:	23 d4       	rcall	.+2118   	; 0x6d8c <strcpy>
    6546:	8c 81       	ldd	r24, Y+4	; 0x04
    6548:	9d 81       	ldd	r25, Y+5	; 0x05
    654a:	f8 01       	movw	r30, r16
    654c:	95 83       	std	Z+5, r25	; 0x05
    654e:	84 83       	std	Z+4, r24	; 0x04
    6550:	12 c0       	rjmp	.+36     	; 0x6576 <_ZN6String4moveERS_+0x68>
    6552:	8e d2       	rcall	.+1308   	; 0x6a70 <free>
    6554:	88 81       	ld	r24, Y
    6556:	99 81       	ldd	r25, Y+1	; 0x01
    6558:	f8 01       	movw	r30, r16
    655a:	91 83       	std	Z+1, r25	; 0x01
    655c:	80 83       	st	Z, r24
    655e:	8a 81       	ldd	r24, Y+2	; 0x02
    6560:	9b 81       	ldd	r25, Y+3	; 0x03
    6562:	93 83       	std	Z+3, r25	; 0x03
    6564:	82 83       	std	Z+2, r24	; 0x02
    6566:	8c 81       	ldd	r24, Y+4	; 0x04
    6568:	9d 81       	ldd	r25, Y+5	; 0x05
    656a:	95 83       	std	Z+5, r25	; 0x05
    656c:	84 83       	std	Z+4, r24	; 0x04
    656e:	19 82       	std	Y+1, r1	; 0x01
    6570:	18 82       	st	Y, r1
    6572:	1b 82       	std	Y+3, r1	; 0x03
    6574:	1a 82       	std	Y+2, r1	; 0x02
    6576:	1d 82       	std	Y+5, r1	; 0x05
    6578:	1c 82       	std	Y+4, r1	; 0x04
    657a:	df 91       	pop	r29
    657c:	cf 91       	pop	r28
    657e:	1f 91       	pop	r17
    6580:	0f 91       	pop	r16
    6582:	08 95       	ret

00006584 <_ZN6StringaSEOS_>:
    6584:	cf 93       	push	r28
    6586:	df 93       	push	r29
    6588:	ec 01       	movw	r28, r24
    658a:	86 17       	cp	r24, r22
    658c:	97 07       	cpc	r25, r23
    658e:	09 f0       	breq	.+2      	; 0x6592 <_ZN6StringaSEOS_+0xe>
    6590:	be df       	rcall	.-132    	; 0x650e <_ZN6String4moveERS_>
    6592:	ce 01       	movw	r24, r28
    6594:	df 91       	pop	r29
    6596:	cf 91       	pop	r28
    6598:	08 95       	ret

0000659a <_ZN6StringaSEPKc>:
    659a:	cf 93       	push	r28
    659c:	df 93       	push	r29
    659e:	ec 01       	movw	r28, r24
    65a0:	61 15       	cp	r22, r1
    65a2:	71 05       	cpc	r23, r1
    65a4:	51 f0       	breq	.+20     	; 0x65ba <_ZN6StringaSEPKc+0x20>
    65a6:	fb 01       	movw	r30, r22
    65a8:	01 90       	ld	r0, Z+
    65aa:	00 20       	and	r0, r0
    65ac:	e9 f7       	brne	.-6      	; 0x65a8 <_ZN6StringaSEPKc+0xe>
    65ae:	31 97       	sbiw	r30, 0x01	; 1
    65b0:	af 01       	movw	r20, r30
    65b2:	46 1b       	sub	r20, r22
    65b4:	57 0b       	sbc	r21, r23
    65b6:	79 df       	rcall	.-270    	; 0x64aa <_ZN6String4copyEPKcj>
    65b8:	01 c0       	rjmp	.+2      	; 0x65bc <_ZN6StringaSEPKc+0x22>
    65ba:	32 df       	rcall	.-412    	; 0x6420 <_ZN6String10invalidateEv>
    65bc:	ce 01       	movw	r24, r28
    65be:	df 91       	pop	r29
    65c0:	cf 91       	pop	r28
    65c2:	08 95       	ret

000065c4 <_ZN6StringC1Ehh>:
    65c4:	0f 93       	push	r16
    65c6:	1f 93       	push	r17
    65c8:	cf 93       	push	r28
    65ca:	df 93       	push	r29
    65cc:	cd b7       	in	r28, 0x3d	; 61
    65ce:	de b7       	in	r29, 0x3e	; 62
    65d0:	29 97       	sbiw	r28, 0x09	; 9
    65d2:	0f b6       	in	r0, 0x3f	; 63
    65d4:	f8 94       	cli
    65d6:	de bf       	out	0x3e, r29	; 62
    65d8:	0f be       	out	0x3f, r0	; 63
    65da:	cd bf       	out	0x3d, r28	; 61
    65dc:	8c 01       	movw	r16, r24
    65de:	86 2f       	mov	r24, r22
    65e0:	f8 01       	movw	r30, r16
    65e2:	11 82       	std	Z+1, r1	; 0x01
    65e4:	10 82       	st	Z, r1
    65e6:	13 82       	std	Z+3, r1	; 0x03
    65e8:	12 82       	std	Z+2, r1	; 0x02
    65ea:	15 82       	std	Z+5, r1	; 0x05
    65ec:	14 82       	std	Z+4, r1	; 0x04
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	be 01       	movw	r22, r28
    65f2:	6f 5f       	subi	r22, 0xFF	; 255
    65f4:	7f 4f       	sbci	r23, 0xFF	; 255
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	f2 d3       	rcall	.+2020   	; 0x6dde <utoa>
    65fa:	be 01       	movw	r22, r28
    65fc:	6f 5f       	subi	r22, 0xFF	; 255
    65fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6600:	c8 01       	movw	r24, r16
    6602:	cb df       	rcall	.-106    	; 0x659a <_ZN6StringaSEPKc>
    6604:	29 96       	adiw	r28, 0x09	; 9
    6606:	0f b6       	in	r0, 0x3f	; 63
    6608:	f8 94       	cli
    660a:	de bf       	out	0x3e, r29	; 62
    660c:	0f be       	out	0x3f, r0	; 63
    660e:	cd bf       	out	0x3d, r28	; 61
    6610:	df 91       	pop	r29
    6612:	cf 91       	pop	r28
    6614:	1f 91       	pop	r17
    6616:	0f 91       	pop	r16
    6618:	08 95       	ret

0000661a <_ZN6String6concatEPKcj>:
    661a:	ef 92       	push	r14
    661c:	ff 92       	push	r15
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
    6626:	61 15       	cp	r22, r1
    6628:	71 05       	cpc	r23, r1
    662a:	11 f4       	brne	.+4      	; 0x6630 <_ZN6String6concatEPKcj+0x16>
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	1a c0       	rjmp	.+52     	; 0x6664 <_ZN6String6concatEPKcj+0x4a>
    6630:	41 15       	cp	r20, r1
    6632:	51 05       	cpc	r21, r1
    6634:	b1 f0       	breq	.+44     	; 0x6662 <_ZN6String6concatEPKcj+0x48>
    6636:	7b 01       	movw	r14, r22
    6638:	ec 01       	movw	r28, r24
    663a:	8c 81       	ldd	r24, Y+4	; 0x04
    663c:	9d 81       	ldd	r25, Y+5	; 0x05
    663e:	8a 01       	movw	r16, r20
    6640:	08 0f       	add	r16, r24
    6642:	19 1f       	adc	r17, r25
    6644:	b8 01       	movw	r22, r16
    6646:	ce 01       	movw	r24, r28
    6648:	15 df       	rcall	.-470    	; 0x6474 <_ZN6String7reserveEj>
    664a:	88 23       	and	r24, r24
    664c:	79 f3       	breq	.-34     	; 0x662c <_ZN6String6concatEPKcj+0x12>
    664e:	28 81       	ld	r18, Y
    6650:	39 81       	ldd	r19, Y+1	; 0x01
    6652:	8c 81       	ldd	r24, Y+4	; 0x04
    6654:	9d 81       	ldd	r25, Y+5	; 0x05
    6656:	b7 01       	movw	r22, r14
    6658:	82 0f       	add	r24, r18
    665a:	93 1f       	adc	r25, r19
    665c:	97 d3       	rcall	.+1838   	; 0x6d8c <strcpy>
    665e:	1d 83       	std	Y+5, r17	; 0x05
    6660:	0c 83       	std	Y+4, r16	; 0x04
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	df 91       	pop	r29
    6666:	cf 91       	pop	r28
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	ff 90       	pop	r15
    666e:	ef 90       	pop	r14
    6670:	08 95       	ret

00006672 <_ZN6String6concatERKS_>:
    6672:	fb 01       	movw	r30, r22
    6674:	44 81       	ldd	r20, Z+4	; 0x04
    6676:	55 81       	ldd	r21, Z+5	; 0x05
    6678:	60 81       	ld	r22, Z
    667a:	71 81       	ldd	r23, Z+1	; 0x01
    667c:	ce cf       	rjmp	.-100    	; 0x661a <_ZN6String6concatEPKcj>

0000667e <_ZN6String6concatEc>:
    667e:	cf 93       	push	r28
    6680:	df 93       	push	r29
    6682:	1f 92       	push	r1
    6684:	1f 92       	push	r1
    6686:	cd b7       	in	r28, 0x3d	; 61
    6688:	de b7       	in	r29, 0x3e	; 62
    668a:	69 83       	std	Y+1, r22	; 0x01
    668c:	1a 82       	std	Y+2, r1	; 0x02
    668e:	41 e0       	ldi	r20, 0x01	; 1
    6690:	50 e0       	ldi	r21, 0x00	; 0
    6692:	be 01       	movw	r22, r28
    6694:	6f 5f       	subi	r22, 0xFF	; 255
    6696:	7f 4f       	sbci	r23, 0xFF	; 255
    6698:	c0 df       	rcall	.-128    	; 0x661a <_ZN6String6concatEPKcj>
    669a:	0f 90       	pop	r0
    669c:	0f 90       	pop	r0
    669e:	df 91       	pop	r29
    66a0:	cf 91       	pop	r28
    66a2:	08 95       	ret

000066a4 <_ZN6String6concatEi>:
    66a4:	ef 92       	push	r14
    66a6:	ff 92       	push	r15
    66a8:	0f 93       	push	r16
    66aa:	1f 93       	push	r17
    66ac:	cf 93       	push	r28
    66ae:	df 93       	push	r29
    66b0:	cd b7       	in	r28, 0x3d	; 61
    66b2:	de b7       	in	r29, 0x3e	; 62
    66b4:	28 97       	sbiw	r28, 0x08	; 8
    66b6:	0f b6       	in	r0, 0x3f	; 63
    66b8:	f8 94       	cli
    66ba:	de bf       	out	0x3e, r29	; 62
    66bc:	0f be       	out	0x3f, r0	; 63
    66be:	cd bf       	out	0x3d, r28	; 61
    66c0:	7c 01       	movw	r14, r24
    66c2:	cb 01       	movw	r24, r22
    66c4:	4a e0       	ldi	r20, 0x0A	; 10
    66c6:	8e 01       	movw	r16, r28
    66c8:	0f 5f       	subi	r16, 0xFF	; 255
    66ca:	1f 4f       	sbci	r17, 0xFF	; 255
    66cc:	b8 01       	movw	r22, r16
    66ce:	7d d3       	rcall	.+1786   	; 0x6dca <__itoa_ncheck>
    66d0:	f8 01       	movw	r30, r16
    66d2:	01 90       	ld	r0, Z+
    66d4:	00 20       	and	r0, r0
    66d6:	e9 f7       	brne	.-6      	; 0x66d2 <_ZN6String6concatEi+0x2e>
    66d8:	31 97       	sbiw	r30, 0x01	; 1
    66da:	af 01       	movw	r20, r30
    66dc:	40 1b       	sub	r20, r16
    66de:	51 0b       	sbc	r21, r17
    66e0:	b8 01       	movw	r22, r16
    66e2:	c7 01       	movw	r24, r14
    66e4:	9a df       	rcall	.-204    	; 0x661a <_ZN6String6concatEPKcj>
    66e6:	28 96       	adiw	r28, 0x08	; 8
    66e8:	0f b6       	in	r0, 0x3f	; 63
    66ea:	f8 94       	cli
    66ec:	de bf       	out	0x3e, r29	; 62
    66ee:	0f be       	out	0x3f, r0	; 63
    66f0:	cd bf       	out	0x3d, r28	; 61
    66f2:	df 91       	pop	r29
    66f4:	cf 91       	pop	r28
    66f6:	1f 91       	pop	r17
    66f8:	0f 91       	pop	r16
    66fa:	ff 90       	pop	r15
    66fc:	ef 90       	pop	r14
    66fe:	08 95       	ret

00006700 <_ZNK6String9compareToERKS_>:
    6700:	cf 93       	push	r28
    6702:	df 93       	push	r29
    6704:	dc 01       	movw	r26, r24
    6706:	ed 91       	ld	r30, X+
    6708:	fc 91       	ld	r31, X
    670a:	eb 01       	movw	r28, r22
    670c:	a8 81       	ld	r26, Y
    670e:	b9 81       	ldd	r27, Y+1	; 0x01
    6710:	30 97       	sbiw	r30, 0x00	; 0
    6712:	11 f0       	breq	.+4      	; 0x6718 <_ZNK6String9compareToERKS_+0x18>
    6714:	10 97       	sbiw	r26, 0x00	; 0
    6716:	c9 f4       	brne	.+50     	; 0x674a <_ZNK6String9compareToERKS_+0x4a>
    6718:	10 97       	sbiw	r26, 0x00	; 0
    671a:	59 f0       	breq	.+22     	; 0x6732 <_ZNK6String9compareToERKS_+0x32>
    671c:	eb 01       	movw	r28, r22
    671e:	2c 81       	ldd	r18, Y+4	; 0x04
    6720:	3d 81       	ldd	r19, Y+5	; 0x05
    6722:	23 2b       	or	r18, r19
    6724:	31 f0       	breq	.+12     	; 0x6732 <_ZNK6String9compareToERKS_+0x32>
    6726:	8c 91       	ld	r24, X
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	91 95       	neg	r25
    672c:	81 95       	neg	r24
    672e:	91 09       	sbc	r25, r1
    6730:	13 c0       	rjmp	.+38     	; 0x6758 <_ZNK6String9compareToERKS_+0x58>
    6732:	30 97       	sbiw	r30, 0x00	; 0
    6734:	79 f0       	breq	.+30     	; 0x6754 <_ZNK6String9compareToERKS_+0x54>
    6736:	dc 01       	movw	r26, r24
    6738:	14 96       	adiw	r26, 0x04	; 4
    673a:	8d 91       	ld	r24, X+
    673c:	9c 91       	ld	r25, X
    673e:	15 97       	sbiw	r26, 0x05	; 5
    6740:	89 2b       	or	r24, r25
    6742:	41 f0       	breq	.+16     	; 0x6754 <_ZNK6String9compareToERKS_+0x54>
    6744:	80 81       	ld	r24, Z
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	07 c0       	rjmp	.+14     	; 0x6758 <_ZNK6String9compareToERKS_+0x58>
    674a:	bd 01       	movw	r22, r26
    674c:	cf 01       	movw	r24, r30
    674e:	df 91       	pop	r29
    6750:	cf 91       	pop	r28
    6752:	13 c3       	rjmp	.+1574   	; 0x6d7a <strcmp>
    6754:	80 e0       	ldi	r24, 0x00	; 0
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	df 91       	pop	r29
    675a:	cf 91       	pop	r28
    675c:	08 95       	ret

0000675e <_ZNK6String6equalsERKS_>:
    675e:	fc 01       	movw	r30, r24
    6760:	44 81       	ldd	r20, Z+4	; 0x04
    6762:	55 81       	ldd	r21, Z+5	; 0x05
    6764:	fb 01       	movw	r30, r22
    6766:	24 81       	ldd	r18, Z+4	; 0x04
    6768:	35 81       	ldd	r19, Z+5	; 0x05
    676a:	42 17       	cp	r20, r18
    676c:	53 07       	cpc	r21, r19
    676e:	21 f4       	brne	.+8      	; 0x6778 <_ZNK6String6equalsERKS_+0x1a>
    6770:	c7 df       	rcall	.-114    	; 0x6700 <_ZNK6String9compareToERKS_>
    6772:	21 e0       	ldi	r18, 0x01	; 1
    6774:	89 2b       	or	r24, r25
    6776:	09 f0       	breq	.+2      	; 0x677a <_ZNK6String6equalsERKS_+0x1c>
    6778:	20 e0       	ldi	r18, 0x00	; 0
    677a:	82 2f       	mov	r24, r18
    677c:	08 95       	ret

0000677e <_ZNK6String6equalsEPKc>:
    677e:	fc 01       	movw	r30, r24
    6780:	24 81       	ldd	r18, Z+4	; 0x04
    6782:	35 81       	ldd	r19, Z+5	; 0x05
    6784:	23 2b       	or	r18, r19
    6786:	31 f4       	brne	.+12     	; 0x6794 <_ZNK6String6equalsEPKc+0x16>
    6788:	21 e0       	ldi	r18, 0x01	; 1
    678a:	61 15       	cp	r22, r1
    678c:	71 05       	cpc	r23, r1
    678e:	99 f0       	breq	.+38     	; 0x67b6 <_ZNK6String6equalsEPKc+0x38>
    6790:	fb 01       	movw	r30, r22
    6792:	08 c0       	rjmp	.+16     	; 0x67a4 <_ZNK6String6equalsEPKc+0x26>
    6794:	fc 01       	movw	r30, r24
    6796:	80 81       	ld	r24, Z
    6798:	91 81       	ldd	r25, Z+1	; 0x01
    679a:	61 15       	cp	r22, r1
    679c:	71 05       	cpc	r23, r1
    679e:	31 f4       	brne	.+12     	; 0x67ac <_ZNK6String6equalsEPKc+0x2e>
    67a0:	21 e0       	ldi	r18, 0x01	; 1
    67a2:	fc 01       	movw	r30, r24
    67a4:	80 81       	ld	r24, Z
    67a6:	88 23       	and	r24, r24
    67a8:	31 f0       	breq	.+12     	; 0x67b6 <_ZNK6String6equalsEPKc+0x38>
    67aa:	04 c0       	rjmp	.+8      	; 0x67b4 <_ZNK6String6equalsEPKc+0x36>
    67ac:	e6 d2       	rcall	.+1484   	; 0x6d7a <strcmp>
    67ae:	21 e0       	ldi	r18, 0x01	; 1
    67b0:	89 2b       	or	r24, r25
    67b2:	09 f0       	breq	.+2      	; 0x67b6 <_ZNK6String6equalsEPKc+0x38>
    67b4:	20 e0       	ldi	r18, 0x00	; 0
    67b6:	82 2f       	mov	r24, r18
    67b8:	08 95       	ret

000067ba <_ZNK6String9substringEjj>:
    67ba:	bf 92       	push	r11
    67bc:	cf 92       	push	r12
    67be:	df 92       	push	r13
    67c0:	ef 92       	push	r14
    67c2:	ff 92       	push	r15
    67c4:	0f 93       	push	r16
    67c6:	1f 93       	push	r17
    67c8:	cf 93       	push	r28
    67ca:	df 93       	push	r29
    67cc:	7c 01       	movw	r14, r24
    67ce:	6b 01       	movw	r12, r22
    67d0:	8a 01       	movw	r16, r20
    67d2:	e9 01       	movw	r28, r18
    67d4:	24 17       	cp	r18, r20
    67d6:	35 07       	cpc	r19, r21
    67d8:	20 f4       	brcc	.+8      	; 0x67e2 <_ZNK6String9substringEjj+0x28>
    67da:	81 2f       	mov	r24, r17
    67dc:	89 01       	movw	r16, r18
    67de:	c4 2f       	mov	r28, r20
    67e0:	d8 2f       	mov	r29, r24
    67e2:	61 e3       	ldi	r22, 0x31	; 49
    67e4:	73 e0       	ldi	r23, 0x03	; 3
    67e6:	c7 01       	movw	r24, r14
    67e8:	7e de       	rcall	.-772    	; 0x64e6 <_ZN6StringC1EPKc>
    67ea:	d6 01       	movw	r26, r12
    67ec:	14 96       	adiw	r26, 0x04	; 4
    67ee:	8d 91       	ld	r24, X+
    67f0:	9c 91       	ld	r25, X
    67f2:	15 97       	sbiw	r26, 0x05	; 5
    67f4:	08 17       	cp	r16, r24
    67f6:	19 07       	cpc	r17, r25
    67f8:	c0 f4       	brcc	.+48     	; 0x682a <_ZNK6String9substringEjj+0x70>
    67fa:	8c 17       	cp	r24, r28
    67fc:	9d 07       	cpc	r25, r29
    67fe:	08 f4       	brcc	.+2      	; 0x6802 <_ZNK6String9substringEjj+0x48>
    6800:	ec 01       	movw	r28, r24
    6802:	d6 01       	movw	r26, r12
    6804:	ed 91       	ld	r30, X+
    6806:	fc 91       	ld	r31, X
    6808:	11 97       	sbiw	r26, 0x01	; 1
    680a:	ec 0f       	add	r30, r28
    680c:	fd 1f       	adc	r31, r29
    680e:	b0 80       	ld	r11, Z
    6810:	10 82       	st	Z, r1
    6812:	6d 91       	ld	r22, X+
    6814:	7c 91       	ld	r23, X
    6816:	60 0f       	add	r22, r16
    6818:	71 1f       	adc	r23, r17
    681a:	c7 01       	movw	r24, r14
    681c:	be de       	rcall	.-644    	; 0x659a <_ZN6StringaSEPKc>
    681e:	d6 01       	movw	r26, r12
    6820:	ed 91       	ld	r30, X+
    6822:	fc 91       	ld	r31, X
    6824:	ec 0f       	add	r30, r28
    6826:	fd 1f       	adc	r31, r29
    6828:	b0 82       	st	Z, r11
    682a:	c7 01       	movw	r24, r14
    682c:	df 91       	pop	r29
    682e:	cf 91       	pop	r28
    6830:	1f 91       	pop	r17
    6832:	0f 91       	pop	r16
    6834:	ff 90       	pop	r15
    6836:	ef 90       	pop	r14
    6838:	df 90       	pop	r13
    683a:	cf 90       	pop	r12
    683c:	bf 90       	pop	r11
    683e:	08 95       	ret

00006840 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    6840:	cf 93       	push	r28
    6842:	df 93       	push	r29
	if (!buffer) return;
    6844:	fc 01       	movw	r30, r24
    6846:	c0 81       	ld	r28, Z
    6848:	d1 81       	ldd	r29, Z+1	; 0x01
    684a:	20 97       	sbiw	r28, 0x00	; 0
    684c:	39 f0       	breq	.+14     	; 0x685c <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    684e:	88 81       	ld	r24, Y
    6850:	88 23       	and	r24, r24
    6852:	21 f0       	breq	.+8      	; 0x685c <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	79 d2       	rcall	.+1266   	; 0x6d4a <toupper>
    6858:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    685a:	f9 cf       	rjmp	.-14     	; 0x684e <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    685c:	df 91       	pop	r29
    685e:	cf 91       	pop	r28
    6860:	08 95       	ret

00006862 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6862:	08 95       	ret

00006864 <__mulsi3>:
    6864:	db 01       	movw	r26, r22
    6866:	8f 93       	push	r24
    6868:	9f 93       	push	r25
    686a:	51 d0       	rcall	.+162    	; 0x690e <__muluhisi3>
    686c:	bf 91       	pop	r27
    686e:	af 91       	pop	r26
    6870:	a2 9f       	mul	r26, r18
    6872:	80 0d       	add	r24, r0
    6874:	91 1d       	adc	r25, r1
    6876:	a3 9f       	mul	r26, r19
    6878:	90 0d       	add	r25, r0
    687a:	b2 9f       	mul	r27, r18
    687c:	90 0d       	add	r25, r0
    687e:	11 24       	eor	r1, r1
    6880:	08 95       	ret

00006882 <__udivmodsi4>:
    6882:	a1 e2       	ldi	r26, 0x21	; 33
    6884:	1a 2e       	mov	r1, r26
    6886:	aa 1b       	sub	r26, r26
    6888:	bb 1b       	sub	r27, r27
    688a:	fd 01       	movw	r30, r26
    688c:	0d c0       	rjmp	.+26     	; 0x68a8 <__udivmodsi4_ep>

0000688e <__udivmodsi4_loop>:
    688e:	aa 1f       	adc	r26, r26
    6890:	bb 1f       	adc	r27, r27
    6892:	ee 1f       	adc	r30, r30
    6894:	ff 1f       	adc	r31, r31
    6896:	a2 17       	cp	r26, r18
    6898:	b3 07       	cpc	r27, r19
    689a:	e4 07       	cpc	r30, r20
    689c:	f5 07       	cpc	r31, r21
    689e:	20 f0       	brcs	.+8      	; 0x68a8 <__udivmodsi4_ep>
    68a0:	a2 1b       	sub	r26, r18
    68a2:	b3 0b       	sbc	r27, r19
    68a4:	e4 0b       	sbc	r30, r20
    68a6:	f5 0b       	sbc	r31, r21

000068a8 <__udivmodsi4_ep>:
    68a8:	66 1f       	adc	r22, r22
    68aa:	77 1f       	adc	r23, r23
    68ac:	88 1f       	adc	r24, r24
    68ae:	99 1f       	adc	r25, r25
    68b0:	1a 94       	dec	r1
    68b2:	69 f7       	brne	.-38     	; 0x688e <__udivmodsi4_loop>
    68b4:	60 95       	com	r22
    68b6:	70 95       	com	r23
    68b8:	80 95       	com	r24
    68ba:	90 95       	com	r25
    68bc:	9b 01       	movw	r18, r22
    68be:	ac 01       	movw	r20, r24
    68c0:	bd 01       	movw	r22, r26
    68c2:	cf 01       	movw	r24, r30
    68c4:	08 95       	ret

000068c6 <__divmodsi4>:
    68c6:	05 2e       	mov	r0, r21
    68c8:	97 fb       	bst	r25, 7
    68ca:	16 f4       	brtc	.+4      	; 0x68d0 <__divmodsi4+0xa>
    68cc:	00 94       	com	r0
    68ce:	0f d0       	rcall	.+30     	; 0x68ee <__negsi2>
    68d0:	57 fd       	sbrc	r21, 7
    68d2:	05 d0       	rcall	.+10     	; 0x68de <__divmodsi4_neg2>
    68d4:	d6 df       	rcall	.-84     	; 0x6882 <__udivmodsi4>
    68d6:	07 fc       	sbrc	r0, 7
    68d8:	02 d0       	rcall	.+4      	; 0x68de <__divmodsi4_neg2>
    68da:	46 f4       	brtc	.+16     	; 0x68ec <__divmodsi4_exit>
    68dc:	08 c0       	rjmp	.+16     	; 0x68ee <__negsi2>

000068de <__divmodsi4_neg2>:
    68de:	50 95       	com	r21
    68e0:	40 95       	com	r20
    68e2:	30 95       	com	r19
    68e4:	21 95       	neg	r18
    68e6:	3f 4f       	sbci	r19, 0xFF	; 255
    68e8:	4f 4f       	sbci	r20, 0xFF	; 255
    68ea:	5f 4f       	sbci	r21, 0xFF	; 255

000068ec <__divmodsi4_exit>:
    68ec:	08 95       	ret

000068ee <__negsi2>:
    68ee:	90 95       	com	r25
    68f0:	80 95       	com	r24
    68f2:	70 95       	com	r23
    68f4:	61 95       	neg	r22
    68f6:	7f 4f       	sbci	r23, 0xFF	; 255
    68f8:	8f 4f       	sbci	r24, 0xFF	; 255
    68fa:	9f 4f       	sbci	r25, 0xFF	; 255
    68fc:	08 95       	ret

000068fe <__tablejump2__>:
    68fe:	ee 0f       	add	r30, r30
    6900:	ff 1f       	adc	r31, r31
    6902:	88 1f       	adc	r24, r24
    6904:	8b bf       	out	0x3b, r24	; 59
    6906:	07 90       	elpm	r0, Z+
    6908:	f6 91       	elpm	r31, Z
    690a:	e0 2d       	mov	r30, r0
    690c:	19 94       	eijmp

0000690e <__muluhisi3>:
    690e:	09 d0       	rcall	.+18     	; 0x6922 <__umulhisi3>
    6910:	a5 9f       	mul	r26, r21
    6912:	90 0d       	add	r25, r0
    6914:	b4 9f       	mul	r27, r20
    6916:	90 0d       	add	r25, r0
    6918:	a4 9f       	mul	r26, r20
    691a:	80 0d       	add	r24, r0
    691c:	91 1d       	adc	r25, r1
    691e:	11 24       	eor	r1, r1
    6920:	08 95       	ret

00006922 <__umulhisi3>:
    6922:	a2 9f       	mul	r26, r18
    6924:	b0 01       	movw	r22, r0
    6926:	b3 9f       	mul	r27, r19
    6928:	c0 01       	movw	r24, r0
    692a:	a3 9f       	mul	r26, r19
    692c:	70 0d       	add	r23, r0
    692e:	81 1d       	adc	r24, r1
    6930:	11 24       	eor	r1, r1
    6932:	91 1d       	adc	r25, r1
    6934:	b2 9f       	mul	r27, r18
    6936:	70 0d       	add	r23, r0
    6938:	81 1d       	adc	r24, r1
    693a:	11 24       	eor	r1, r1
    693c:	91 1d       	adc	r25, r1
    693e:	08 95       	ret

00006940 <malloc>:
    6940:	0f 93       	push	r16
    6942:	1f 93       	push	r17
    6944:	cf 93       	push	r28
    6946:	df 93       	push	r29
    6948:	82 30       	cpi	r24, 0x02	; 2
    694a:	91 05       	cpc	r25, r1
    694c:	10 f4       	brcc	.+4      	; 0x6952 <malloc+0x12>
    694e:	82 e0       	ldi	r24, 0x02	; 2
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <__flp>
    6956:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <__flp+0x1>
    695a:	20 e0       	ldi	r18, 0x00	; 0
    695c:	30 e0       	ldi	r19, 0x00	; 0
    695e:	a0 e0       	ldi	r26, 0x00	; 0
    6960:	b0 e0       	ldi	r27, 0x00	; 0
    6962:	30 97       	sbiw	r30, 0x00	; 0
    6964:	19 f1       	breq	.+70     	; 0x69ac <malloc+0x6c>
    6966:	40 81       	ld	r20, Z
    6968:	51 81       	ldd	r21, Z+1	; 0x01
    696a:	02 81       	ldd	r16, Z+2	; 0x02
    696c:	13 81       	ldd	r17, Z+3	; 0x03
    696e:	48 17       	cp	r20, r24
    6970:	59 07       	cpc	r21, r25
    6972:	c8 f0       	brcs	.+50     	; 0x69a6 <malloc+0x66>
    6974:	84 17       	cp	r24, r20
    6976:	95 07       	cpc	r25, r21
    6978:	69 f4       	brne	.+26     	; 0x6994 <malloc+0x54>
    697a:	10 97       	sbiw	r26, 0x00	; 0
    697c:	31 f0       	breq	.+12     	; 0x698a <malloc+0x4a>
    697e:	12 96       	adiw	r26, 0x02	; 2
    6980:	0c 93       	st	X, r16
    6982:	12 97       	sbiw	r26, 0x02	; 2
    6984:	13 96       	adiw	r26, 0x03	; 3
    6986:	1c 93       	st	X, r17
    6988:	27 c0       	rjmp	.+78     	; 0x69d8 <malloc+0x98>
    698a:	00 93 ae 05 	sts	0x05AE, r16	; 0x8005ae <__flp>
    698e:	10 93 af 05 	sts	0x05AF, r17	; 0x8005af <__flp+0x1>
    6992:	22 c0       	rjmp	.+68     	; 0x69d8 <malloc+0x98>
    6994:	21 15       	cp	r18, r1
    6996:	31 05       	cpc	r19, r1
    6998:	19 f0       	breq	.+6      	; 0x69a0 <malloc+0x60>
    699a:	42 17       	cp	r20, r18
    699c:	53 07       	cpc	r21, r19
    699e:	18 f4       	brcc	.+6      	; 0x69a6 <malloc+0x66>
    69a0:	9a 01       	movw	r18, r20
    69a2:	bd 01       	movw	r22, r26
    69a4:	ef 01       	movw	r28, r30
    69a6:	df 01       	movw	r26, r30
    69a8:	f8 01       	movw	r30, r16
    69aa:	db cf       	rjmp	.-74     	; 0x6962 <malloc+0x22>
    69ac:	21 15       	cp	r18, r1
    69ae:	31 05       	cpc	r19, r1
    69b0:	f9 f0       	breq	.+62     	; 0x69f0 <malloc+0xb0>
    69b2:	28 1b       	sub	r18, r24
    69b4:	39 0b       	sbc	r19, r25
    69b6:	24 30       	cpi	r18, 0x04	; 4
    69b8:	31 05       	cpc	r19, r1
    69ba:	80 f4       	brcc	.+32     	; 0x69dc <malloc+0x9c>
    69bc:	8a 81       	ldd	r24, Y+2	; 0x02
    69be:	9b 81       	ldd	r25, Y+3	; 0x03
    69c0:	61 15       	cp	r22, r1
    69c2:	71 05       	cpc	r23, r1
    69c4:	21 f0       	breq	.+8      	; 0x69ce <malloc+0x8e>
    69c6:	fb 01       	movw	r30, r22
    69c8:	93 83       	std	Z+3, r25	; 0x03
    69ca:	82 83       	std	Z+2, r24	; 0x02
    69cc:	04 c0       	rjmp	.+8      	; 0x69d6 <malloc+0x96>
    69ce:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <__flp+0x1>
    69d2:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <__flp>
    69d6:	fe 01       	movw	r30, r28
    69d8:	32 96       	adiw	r30, 0x02	; 2
    69da:	44 c0       	rjmp	.+136    	; 0x6a64 <malloc+0x124>
    69dc:	fe 01       	movw	r30, r28
    69de:	e2 0f       	add	r30, r18
    69e0:	f3 1f       	adc	r31, r19
    69e2:	81 93       	st	Z+, r24
    69e4:	91 93       	st	Z+, r25
    69e6:	22 50       	subi	r18, 0x02	; 2
    69e8:	31 09       	sbc	r19, r1
    69ea:	39 83       	std	Y+1, r19	; 0x01
    69ec:	28 83       	st	Y, r18
    69ee:	3a c0       	rjmp	.+116    	; 0x6a64 <malloc+0x124>
    69f0:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    69f4:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    69f8:	23 2b       	or	r18, r19
    69fa:	41 f4       	brne	.+16     	; 0x6a0c <malloc+0xcc>
    69fc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6a00:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6a04:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <__brkval+0x1>
    6a08:	20 93 ac 05 	sts	0x05AC, r18	; 0x8005ac <__brkval>
    6a0c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6a10:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6a14:	21 15       	cp	r18, r1
    6a16:	31 05       	cpc	r19, r1
    6a18:	41 f4       	brne	.+16     	; 0x6a2a <malloc+0xea>
    6a1a:	2d b7       	in	r18, 0x3d	; 61
    6a1c:	3e b7       	in	r19, 0x3e	; 62
    6a1e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6a22:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6a26:	24 1b       	sub	r18, r20
    6a28:	35 0b       	sbc	r19, r21
    6a2a:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <__brkval>
    6a2e:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <__brkval+0x1>
    6a32:	e2 17       	cp	r30, r18
    6a34:	f3 07       	cpc	r31, r19
    6a36:	a0 f4       	brcc	.+40     	; 0x6a60 <malloc+0x120>
    6a38:	2e 1b       	sub	r18, r30
    6a3a:	3f 0b       	sbc	r19, r31
    6a3c:	28 17       	cp	r18, r24
    6a3e:	39 07       	cpc	r19, r25
    6a40:	78 f0       	brcs	.+30     	; 0x6a60 <malloc+0x120>
    6a42:	ac 01       	movw	r20, r24
    6a44:	4e 5f       	subi	r20, 0xFE	; 254
    6a46:	5f 4f       	sbci	r21, 0xFF	; 255
    6a48:	24 17       	cp	r18, r20
    6a4a:	35 07       	cpc	r19, r21
    6a4c:	48 f0       	brcs	.+18     	; 0x6a60 <malloc+0x120>
    6a4e:	4e 0f       	add	r20, r30
    6a50:	5f 1f       	adc	r21, r31
    6a52:	50 93 ad 05 	sts	0x05AD, r21	; 0x8005ad <__brkval+0x1>
    6a56:	40 93 ac 05 	sts	0x05AC, r20	; 0x8005ac <__brkval>
    6a5a:	81 93       	st	Z+, r24
    6a5c:	91 93       	st	Z+, r25
    6a5e:	02 c0       	rjmp	.+4      	; 0x6a64 <malloc+0x124>
    6a60:	e0 e0       	ldi	r30, 0x00	; 0
    6a62:	f0 e0       	ldi	r31, 0x00	; 0
    6a64:	cf 01       	movw	r24, r30
    6a66:	df 91       	pop	r29
    6a68:	cf 91       	pop	r28
    6a6a:	1f 91       	pop	r17
    6a6c:	0f 91       	pop	r16
    6a6e:	08 95       	ret

00006a70 <free>:
    6a70:	cf 93       	push	r28
    6a72:	df 93       	push	r29
    6a74:	00 97       	sbiw	r24, 0x00	; 0
    6a76:	09 f4       	brne	.+2      	; 0x6a7a <free+0xa>
    6a78:	81 c0       	rjmp	.+258    	; 0x6b7c <free+0x10c>
    6a7a:	fc 01       	movw	r30, r24
    6a7c:	32 97       	sbiw	r30, 0x02	; 2
    6a7e:	13 82       	std	Z+3, r1	; 0x03
    6a80:	12 82       	std	Z+2, r1	; 0x02
    6a82:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <__flp>
    6a86:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <__flp+0x1>
    6a8a:	10 97       	sbiw	r26, 0x00	; 0
    6a8c:	81 f4       	brne	.+32     	; 0x6aae <free+0x3e>
    6a8e:	20 81       	ld	r18, Z
    6a90:	31 81       	ldd	r19, Z+1	; 0x01
    6a92:	82 0f       	add	r24, r18
    6a94:	93 1f       	adc	r25, r19
    6a96:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    6a9a:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    6a9e:	28 17       	cp	r18, r24
    6aa0:	39 07       	cpc	r19, r25
    6aa2:	51 f5       	brne	.+84     	; 0x6af8 <free+0x88>
    6aa4:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__brkval+0x1>
    6aa8:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__brkval>
    6aac:	67 c0       	rjmp	.+206    	; 0x6b7c <free+0x10c>
    6aae:	ed 01       	movw	r28, r26
    6ab0:	20 e0       	ldi	r18, 0x00	; 0
    6ab2:	30 e0       	ldi	r19, 0x00	; 0
    6ab4:	ce 17       	cp	r28, r30
    6ab6:	df 07       	cpc	r29, r31
    6ab8:	40 f4       	brcc	.+16     	; 0x6aca <free+0x5a>
    6aba:	4a 81       	ldd	r20, Y+2	; 0x02
    6abc:	5b 81       	ldd	r21, Y+3	; 0x03
    6abe:	9e 01       	movw	r18, r28
    6ac0:	41 15       	cp	r20, r1
    6ac2:	51 05       	cpc	r21, r1
    6ac4:	f1 f0       	breq	.+60     	; 0x6b02 <free+0x92>
    6ac6:	ea 01       	movw	r28, r20
    6ac8:	f5 cf       	rjmp	.-22     	; 0x6ab4 <free+0x44>
    6aca:	d3 83       	std	Z+3, r29	; 0x03
    6acc:	c2 83       	std	Z+2, r28	; 0x02
    6ace:	40 81       	ld	r20, Z
    6ad0:	51 81       	ldd	r21, Z+1	; 0x01
    6ad2:	84 0f       	add	r24, r20
    6ad4:	95 1f       	adc	r25, r21
    6ad6:	c8 17       	cp	r28, r24
    6ad8:	d9 07       	cpc	r29, r25
    6ada:	59 f4       	brne	.+22     	; 0x6af2 <free+0x82>
    6adc:	88 81       	ld	r24, Y
    6ade:	99 81       	ldd	r25, Y+1	; 0x01
    6ae0:	84 0f       	add	r24, r20
    6ae2:	95 1f       	adc	r25, r21
    6ae4:	02 96       	adiw	r24, 0x02	; 2
    6ae6:	91 83       	std	Z+1, r25	; 0x01
    6ae8:	80 83       	st	Z, r24
    6aea:	8a 81       	ldd	r24, Y+2	; 0x02
    6aec:	9b 81       	ldd	r25, Y+3	; 0x03
    6aee:	93 83       	std	Z+3, r25	; 0x03
    6af0:	82 83       	std	Z+2, r24	; 0x02
    6af2:	21 15       	cp	r18, r1
    6af4:	31 05       	cpc	r19, r1
    6af6:	29 f4       	brne	.+10     	; 0x6b02 <free+0x92>
    6af8:	f0 93 af 05 	sts	0x05AF, r31	; 0x8005af <__flp+0x1>
    6afc:	e0 93 ae 05 	sts	0x05AE, r30	; 0x8005ae <__flp>
    6b00:	3d c0       	rjmp	.+122    	; 0x6b7c <free+0x10c>
    6b02:	e9 01       	movw	r28, r18
    6b04:	fb 83       	std	Y+3, r31	; 0x03
    6b06:	ea 83       	std	Y+2, r30	; 0x02
    6b08:	49 91       	ld	r20, Y+
    6b0a:	59 91       	ld	r21, Y+
    6b0c:	c4 0f       	add	r28, r20
    6b0e:	d5 1f       	adc	r29, r21
    6b10:	ec 17       	cp	r30, r28
    6b12:	fd 07       	cpc	r31, r29
    6b14:	61 f4       	brne	.+24     	; 0x6b2e <free+0xbe>
    6b16:	80 81       	ld	r24, Z
    6b18:	91 81       	ldd	r25, Z+1	; 0x01
    6b1a:	84 0f       	add	r24, r20
    6b1c:	95 1f       	adc	r25, r21
    6b1e:	02 96       	adiw	r24, 0x02	; 2
    6b20:	e9 01       	movw	r28, r18
    6b22:	99 83       	std	Y+1, r25	; 0x01
    6b24:	88 83       	st	Y, r24
    6b26:	82 81       	ldd	r24, Z+2	; 0x02
    6b28:	93 81       	ldd	r25, Z+3	; 0x03
    6b2a:	9b 83       	std	Y+3, r25	; 0x03
    6b2c:	8a 83       	std	Y+2, r24	; 0x02
    6b2e:	e0 e0       	ldi	r30, 0x00	; 0
    6b30:	f0 e0       	ldi	r31, 0x00	; 0
    6b32:	12 96       	adiw	r26, 0x02	; 2
    6b34:	8d 91       	ld	r24, X+
    6b36:	9c 91       	ld	r25, X
    6b38:	13 97       	sbiw	r26, 0x03	; 3
    6b3a:	00 97       	sbiw	r24, 0x00	; 0
    6b3c:	19 f0       	breq	.+6      	; 0x6b44 <free+0xd4>
    6b3e:	fd 01       	movw	r30, r26
    6b40:	dc 01       	movw	r26, r24
    6b42:	f7 cf       	rjmp	.-18     	; 0x6b32 <free+0xc2>
    6b44:	8d 91       	ld	r24, X+
    6b46:	9c 91       	ld	r25, X
    6b48:	11 97       	sbiw	r26, 0x01	; 1
    6b4a:	9d 01       	movw	r18, r26
    6b4c:	2e 5f       	subi	r18, 0xFE	; 254
    6b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b50:	82 0f       	add	r24, r18
    6b52:	93 1f       	adc	r25, r19
    6b54:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    6b58:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    6b5c:	28 17       	cp	r18, r24
    6b5e:	39 07       	cpc	r19, r25
    6b60:	69 f4       	brne	.+26     	; 0x6b7c <free+0x10c>
    6b62:	30 97       	sbiw	r30, 0x00	; 0
    6b64:	29 f4       	brne	.+10     	; 0x6b70 <free+0x100>
    6b66:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <__flp+0x1>
    6b6a:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <__flp>
    6b6e:	02 c0       	rjmp	.+4      	; 0x6b74 <free+0x104>
    6b70:	13 82       	std	Z+3, r1	; 0x03
    6b72:	12 82       	std	Z+2, r1	; 0x02
    6b74:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <__brkval+0x1>
    6b78:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <__brkval>
    6b7c:	df 91       	pop	r29
    6b7e:	cf 91       	pop	r28
    6b80:	08 95       	ret

00006b82 <realloc>:
    6b82:	6f 92       	push	r6
    6b84:	7f 92       	push	r7
    6b86:	8f 92       	push	r8
    6b88:	9f 92       	push	r9
    6b8a:	af 92       	push	r10
    6b8c:	bf 92       	push	r11
    6b8e:	cf 92       	push	r12
    6b90:	df 92       	push	r13
    6b92:	ef 92       	push	r14
    6b94:	ff 92       	push	r15
    6b96:	0f 93       	push	r16
    6b98:	1f 93       	push	r17
    6b9a:	cf 93       	push	r28
    6b9c:	df 93       	push	r29
    6b9e:	00 97       	sbiw	r24, 0x00	; 0
    6ba0:	81 f4       	brne	.+32     	; 0x6bc2 <realloc+0x40>
    6ba2:	cb 01       	movw	r24, r22
    6ba4:	df 91       	pop	r29
    6ba6:	cf 91       	pop	r28
    6ba8:	1f 91       	pop	r17
    6baa:	0f 91       	pop	r16
    6bac:	ff 90       	pop	r15
    6bae:	ef 90       	pop	r14
    6bb0:	df 90       	pop	r13
    6bb2:	cf 90       	pop	r12
    6bb4:	bf 90       	pop	r11
    6bb6:	af 90       	pop	r10
    6bb8:	9f 90       	pop	r9
    6bba:	8f 90       	pop	r8
    6bbc:	7f 90       	pop	r7
    6bbe:	6f 90       	pop	r6
    6bc0:	bf ce       	rjmp	.-642    	; 0x6940 <malloc>
    6bc2:	fc 01       	movw	r30, r24
    6bc4:	e6 0f       	add	r30, r22
    6bc6:	f7 1f       	adc	r31, r23
    6bc8:	9c 01       	movw	r18, r24
    6bca:	22 50       	subi	r18, 0x02	; 2
    6bcc:	31 09       	sbc	r19, r1
    6bce:	e2 17       	cp	r30, r18
    6bd0:	f3 07       	cpc	r31, r19
    6bd2:	08 f4       	brcc	.+2      	; 0x6bd6 <realloc+0x54>
    6bd4:	a5 c0       	rjmp	.+330    	; 0x6d20 <realloc+0x19e>
    6bd6:	ec 01       	movw	r28, r24
    6bd8:	d9 01       	movw	r26, r18
    6bda:	0d 91       	ld	r16, X+
    6bdc:	1c 91       	ld	r17, X
    6bde:	11 97       	sbiw	r26, 0x01	; 1
    6be0:	06 17       	cp	r16, r22
    6be2:	17 07       	cpc	r17, r23
    6be4:	a8 f0       	brcs	.+42     	; 0x6c10 <realloc+0x8e>
    6be6:	05 30       	cpi	r16, 0x05	; 5
    6be8:	11 05       	cpc	r17, r1
    6bea:	08 f4       	brcc	.+2      	; 0x6bee <realloc+0x6c>
    6bec:	97 c0       	rjmp	.+302    	; 0x6d1c <realloc+0x19a>
    6bee:	c8 01       	movw	r24, r16
    6bf0:	04 97       	sbiw	r24, 0x04	; 4
    6bf2:	86 17       	cp	r24, r22
    6bf4:	97 07       	cpc	r25, r23
    6bf6:	08 f4       	brcc	.+2      	; 0x6bfa <realloc+0x78>
    6bf8:	91 c0       	rjmp	.+290    	; 0x6d1c <realloc+0x19a>
    6bfa:	02 50       	subi	r16, 0x02	; 2
    6bfc:	11 09       	sbc	r17, r1
    6bfe:	06 1b       	sub	r16, r22
    6c00:	17 0b       	sbc	r17, r23
    6c02:	01 93       	st	Z+, r16
    6c04:	11 93       	st	Z+, r17
    6c06:	6d 93       	st	X+, r22
    6c08:	7c 93       	st	X, r23
    6c0a:	cf 01       	movw	r24, r30
    6c0c:	31 df       	rcall	.-414    	; 0x6a70 <free>
    6c0e:	86 c0       	rjmp	.+268    	; 0x6d1c <realloc+0x19a>
    6c10:	5b 01       	movw	r10, r22
    6c12:	a0 1a       	sub	r10, r16
    6c14:	b1 0a       	sbc	r11, r17
    6c16:	4c 01       	movw	r8, r24
    6c18:	80 0e       	add	r8, r16
    6c1a:	91 1e       	adc	r9, r17
    6c1c:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <__flp>
    6c20:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <__flp+0x1>
    6c24:	61 2c       	mov	r6, r1
    6c26:	71 2c       	mov	r7, r1
    6c28:	e1 2c       	mov	r14, r1
    6c2a:	f1 2c       	mov	r15, r1
    6c2c:	10 97       	sbiw	r26, 0x00	; 0
    6c2e:	09 f4       	brne	.+2      	; 0x6c32 <realloc+0xb0>
    6c30:	46 c0       	rjmp	.+140    	; 0x6cbe <realloc+0x13c>
    6c32:	8d 91       	ld	r24, X+
    6c34:	9c 91       	ld	r25, X
    6c36:	11 97       	sbiw	r26, 0x01	; 1
    6c38:	a8 15       	cp	r26, r8
    6c3a:	b9 05       	cpc	r27, r9
    6c3c:	b1 f5       	brne	.+108    	; 0x6caa <realloc+0x128>
    6c3e:	6c 01       	movw	r12, r24
    6c40:	42 e0       	ldi	r20, 0x02	; 2
    6c42:	c4 0e       	add	r12, r20
    6c44:	d1 1c       	adc	r13, r1
    6c46:	ca 14       	cp	r12, r10
    6c48:	db 04       	cpc	r13, r11
    6c4a:	78 f1       	brcs	.+94     	; 0x6caa <realloc+0x128>
    6c4c:	4c 01       	movw	r8, r24
    6c4e:	8a 18       	sub	r8, r10
    6c50:	9b 08       	sbc	r9, r11
    6c52:	64 01       	movw	r12, r8
    6c54:	42 e0       	ldi	r20, 0x02	; 2
    6c56:	c4 0e       	add	r12, r20
    6c58:	d1 1c       	adc	r13, r1
    6c5a:	12 96       	adiw	r26, 0x02	; 2
    6c5c:	bc 90       	ld	r11, X
    6c5e:	12 97       	sbiw	r26, 0x02	; 2
    6c60:	13 96       	adiw	r26, 0x03	; 3
    6c62:	ac 91       	ld	r26, X
    6c64:	b5 e0       	ldi	r27, 0x05	; 5
    6c66:	cb 16       	cp	r12, r27
    6c68:	d1 04       	cpc	r13, r1
    6c6a:	40 f0       	brcs	.+16     	; 0x6c7c <realloc+0xfa>
    6c6c:	b2 82       	std	Z+2, r11	; 0x02
    6c6e:	a3 83       	std	Z+3, r26	; 0x03
    6c70:	91 82       	std	Z+1, r9	; 0x01
    6c72:	80 82       	st	Z, r8
    6c74:	d9 01       	movw	r26, r18
    6c76:	6d 93       	st	X+, r22
    6c78:	7c 93       	st	X, r23
    6c7a:	09 c0       	rjmp	.+18     	; 0x6c8e <realloc+0x10c>
    6c7c:	0e 5f       	subi	r16, 0xFE	; 254
    6c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    6c80:	80 0f       	add	r24, r16
    6c82:	91 1f       	adc	r25, r17
    6c84:	f9 01       	movw	r30, r18
    6c86:	91 83       	std	Z+1, r25	; 0x01
    6c88:	80 83       	st	Z, r24
    6c8a:	eb 2d       	mov	r30, r11
    6c8c:	fa 2f       	mov	r31, r26
    6c8e:	e1 14       	cp	r14, r1
    6c90:	f1 04       	cpc	r15, r1
    6c92:	31 f0       	breq	.+12     	; 0x6ca0 <realloc+0x11e>
    6c94:	d7 01       	movw	r26, r14
    6c96:	13 96       	adiw	r26, 0x03	; 3
    6c98:	fc 93       	st	X, r31
    6c9a:	ee 93       	st	-X, r30
    6c9c:	12 97       	sbiw	r26, 0x02	; 2
    6c9e:	3e c0       	rjmp	.+124    	; 0x6d1c <realloc+0x19a>
    6ca0:	f0 93 af 05 	sts	0x05AF, r31	; 0x8005af <__flp+0x1>
    6ca4:	e0 93 ae 05 	sts	0x05AE, r30	; 0x8005ae <__flp>
    6ca8:	39 c0       	rjmp	.+114    	; 0x6d1c <realloc+0x19a>
    6caa:	68 16       	cp	r6, r24
    6cac:	79 06       	cpc	r7, r25
    6cae:	08 f4       	brcc	.+2      	; 0x6cb2 <realloc+0x130>
    6cb0:	3c 01       	movw	r6, r24
    6cb2:	7d 01       	movw	r14, r26
    6cb4:	12 96       	adiw	r26, 0x02	; 2
    6cb6:	0d 90       	ld	r0, X+
    6cb8:	bc 91       	ld	r27, X
    6cba:	a0 2d       	mov	r26, r0
    6cbc:	b7 cf       	rjmp	.-146    	; 0x6c2c <realloc+0xaa>
    6cbe:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <__brkval>
    6cc2:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <__brkval+0x1>
    6cc6:	88 16       	cp	r8, r24
    6cc8:	99 06       	cpc	r9, r25
    6cca:	e1 f4       	brne	.+56     	; 0x6d04 <realloc+0x182>
    6ccc:	66 16       	cp	r6, r22
    6cce:	77 06       	cpc	r7, r23
    6cd0:	c8 f4       	brcc	.+50     	; 0x6d04 <realloc+0x182>
    6cd2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6cd6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6cda:	00 97       	sbiw	r24, 0x00	; 0
    6cdc:	41 f4       	brne	.+16     	; 0x6cee <realloc+0x16c>
    6cde:	8d b7       	in	r24, 0x3d	; 61
    6ce0:	9e b7       	in	r25, 0x3e	; 62
    6ce2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6ce6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6cea:	84 1b       	sub	r24, r20
    6cec:	95 0b       	sbc	r25, r21
    6cee:	e8 17       	cp	r30, r24
    6cf0:	f9 07       	cpc	r31, r25
    6cf2:	b0 f4       	brcc	.+44     	; 0x6d20 <realloc+0x19e>
    6cf4:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__brkval+0x1>
    6cf8:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__brkval>
    6cfc:	f9 01       	movw	r30, r18
    6cfe:	71 83       	std	Z+1, r23	; 0x01
    6d00:	60 83       	st	Z, r22
    6d02:	0c c0       	rjmp	.+24     	; 0x6d1c <realloc+0x19a>
    6d04:	cb 01       	movw	r24, r22
    6d06:	1c de       	rcall	.-968    	; 0x6940 <malloc>
    6d08:	7c 01       	movw	r14, r24
    6d0a:	00 97       	sbiw	r24, 0x00	; 0
    6d0c:	49 f0       	breq	.+18     	; 0x6d20 <realloc+0x19e>
    6d0e:	a8 01       	movw	r20, r16
    6d10:	be 01       	movw	r22, r28
    6d12:	23 d0       	rcall	.+70     	; 0x6d5a <memcpy>
    6d14:	ce 01       	movw	r24, r28
    6d16:	ac de       	rcall	.-680    	; 0x6a70 <free>
    6d18:	c7 01       	movw	r24, r14
    6d1a:	04 c0       	rjmp	.+8      	; 0x6d24 <realloc+0x1a2>
    6d1c:	ce 01       	movw	r24, r28
    6d1e:	02 c0       	rjmp	.+4      	; 0x6d24 <realloc+0x1a2>
    6d20:	80 e0       	ldi	r24, 0x00	; 0
    6d22:	90 e0       	ldi	r25, 0x00	; 0
    6d24:	df 91       	pop	r29
    6d26:	cf 91       	pop	r28
    6d28:	1f 91       	pop	r17
    6d2a:	0f 91       	pop	r16
    6d2c:	ff 90       	pop	r15
    6d2e:	ef 90       	pop	r14
    6d30:	df 90       	pop	r13
    6d32:	cf 90       	pop	r12
    6d34:	bf 90       	pop	r11
    6d36:	af 90       	pop	r10
    6d38:	9f 90       	pop	r9
    6d3a:	8f 90       	pop	r8
    6d3c:	7f 90       	pop	r7
    6d3e:	6f 90       	pop	r6
    6d40:	08 95       	ret

00006d42 <abort>:
    6d42:	81 e0       	ldi	r24, 0x01	; 1
    6d44:	90 e0       	ldi	r25, 0x00	; 0
    6d46:	f8 94       	cli
    6d48:	7d c0       	rjmp	.+250    	; 0x6e44 <__do_global_dtors>

00006d4a <toupper>:
    6d4a:	91 11       	cpse	r25, r1
    6d4c:	08 95       	ret
    6d4e:	81 56       	subi	r24, 0x61	; 97
    6d50:	8a 51       	subi	r24, 0x1A	; 26
    6d52:	08 f4       	brcc	.+2      	; 0x6d56 <toupper+0xc>
    6d54:	80 52       	subi	r24, 0x20	; 32
    6d56:	85 58       	subi	r24, 0x85	; 133
    6d58:	08 95       	ret

00006d5a <memcpy>:
    6d5a:	fb 01       	movw	r30, r22
    6d5c:	dc 01       	movw	r26, r24
    6d5e:	02 c0       	rjmp	.+4      	; 0x6d64 <memcpy+0xa>
    6d60:	01 90       	ld	r0, Z+
    6d62:	0d 92       	st	X+, r0
    6d64:	41 50       	subi	r20, 0x01	; 1
    6d66:	50 40       	sbci	r21, 0x00	; 0
    6d68:	d8 f7       	brcc	.-10     	; 0x6d60 <memcpy+0x6>
    6d6a:	08 95       	ret

00006d6c <memset>:
    6d6c:	dc 01       	movw	r26, r24
    6d6e:	01 c0       	rjmp	.+2      	; 0x6d72 <memset+0x6>
    6d70:	6d 93       	st	X+, r22
    6d72:	41 50       	subi	r20, 0x01	; 1
    6d74:	50 40       	sbci	r21, 0x00	; 0
    6d76:	e0 f7       	brcc	.-8      	; 0x6d70 <memset+0x4>
    6d78:	08 95       	ret

00006d7a <strcmp>:
    6d7a:	fb 01       	movw	r30, r22
    6d7c:	dc 01       	movw	r26, r24
    6d7e:	8d 91       	ld	r24, X+
    6d80:	01 90       	ld	r0, Z+
    6d82:	80 19       	sub	r24, r0
    6d84:	01 10       	cpse	r0, r1
    6d86:	d9 f3       	breq	.-10     	; 0x6d7e <strcmp+0x4>
    6d88:	99 0b       	sbc	r25, r25
    6d8a:	08 95       	ret

00006d8c <strcpy>:
    6d8c:	fb 01       	movw	r30, r22
    6d8e:	dc 01       	movw	r26, r24
    6d90:	01 90       	ld	r0, Z+
    6d92:	0d 92       	st	X+, r0
    6d94:	00 20       	and	r0, r0
    6d96:	e1 f7       	brne	.-8      	; 0x6d90 <strcpy+0x4>
    6d98:	08 95       	ret

00006d9a <strlen>:
    6d9a:	fc 01       	movw	r30, r24
    6d9c:	01 90       	ld	r0, Z+
    6d9e:	00 20       	and	r0, r0
    6da0:	e9 f7       	brne	.-6      	; 0x6d9c <strlen+0x2>
    6da2:	80 95       	com	r24
    6da4:	90 95       	com	r25
    6da6:	8e 0f       	add	r24, r30
    6da8:	9f 1f       	adc	r25, r31
    6daa:	08 95       	ret

00006dac <strncpy>:
    6dac:	fb 01       	movw	r30, r22
    6dae:	dc 01       	movw	r26, r24
    6db0:	41 50       	subi	r20, 0x01	; 1
    6db2:	50 40       	sbci	r21, 0x00	; 0
    6db4:	48 f0       	brcs	.+18     	; 0x6dc8 <strncpy+0x1c>
    6db6:	01 90       	ld	r0, Z+
    6db8:	0d 92       	st	X+, r0
    6dba:	00 20       	and	r0, r0
    6dbc:	c9 f7       	brne	.-14     	; 0x6db0 <strncpy+0x4>
    6dbe:	01 c0       	rjmp	.+2      	; 0x6dc2 <strncpy+0x16>
    6dc0:	1d 92       	st	X+, r1
    6dc2:	41 50       	subi	r20, 0x01	; 1
    6dc4:	50 40       	sbci	r21, 0x00	; 0
    6dc6:	e0 f7       	brcc	.-8      	; 0x6dc0 <strncpy+0x14>
    6dc8:	08 95       	ret

00006dca <__itoa_ncheck>:
    6dca:	bb 27       	eor	r27, r27
    6dcc:	4a 30       	cpi	r20, 0x0A	; 10
    6dce:	31 f4       	brne	.+12     	; 0x6ddc <__itoa_ncheck+0x12>
    6dd0:	99 23       	and	r25, r25
    6dd2:	22 f4       	brpl	.+8      	; 0x6ddc <__itoa_ncheck+0x12>
    6dd4:	bd e2       	ldi	r27, 0x2D	; 45
    6dd6:	90 95       	com	r25
    6dd8:	81 95       	neg	r24
    6dda:	9f 4f       	sbci	r25, 0xFF	; 255
    6ddc:	0b c0       	rjmp	.+22     	; 0x6df4 <__utoa_common>

00006dde <utoa>:
    6dde:	45 32       	cpi	r20, 0x25	; 37
    6de0:	51 05       	cpc	r21, r1
    6de2:	18 f4       	brcc	.+6      	; 0x6dea <utoa+0xc>
    6de4:	42 30       	cpi	r20, 0x02	; 2
    6de6:	08 f0       	brcs	.+2      	; 0x6dea <utoa+0xc>
    6de8:	04 c0       	rjmp	.+8      	; 0x6df2 <__utoa_ncheck>
    6dea:	fb 01       	movw	r30, r22
    6dec:	10 82       	st	Z, r1
    6dee:	cb 01       	movw	r24, r22
    6df0:	08 95       	ret

00006df2 <__utoa_ncheck>:
    6df2:	bb 27       	eor	r27, r27

00006df4 <__utoa_common>:
    6df4:	fb 01       	movw	r30, r22
    6df6:	55 27       	eor	r21, r21
    6df8:	aa 27       	eor	r26, r26
    6dfa:	88 0f       	add	r24, r24
    6dfc:	99 1f       	adc	r25, r25
    6dfe:	aa 1f       	adc	r26, r26
    6e00:	a4 17       	cp	r26, r20
    6e02:	10 f0       	brcs	.+4      	; 0x6e08 <__utoa_common+0x14>
    6e04:	a4 1b       	sub	r26, r20
    6e06:	83 95       	inc	r24
    6e08:	50 51       	subi	r21, 0x10	; 16
    6e0a:	b9 f7       	brne	.-18     	; 0x6dfa <__utoa_common+0x6>
    6e0c:	a0 5d       	subi	r26, 0xD0	; 208
    6e0e:	aa 33       	cpi	r26, 0x3A	; 58
    6e10:	08 f0       	brcs	.+2      	; 0x6e14 <__utoa_common+0x20>
    6e12:	a9 5d       	subi	r26, 0xD9	; 217
    6e14:	a1 93       	st	Z+, r26
    6e16:	00 97       	sbiw	r24, 0x00	; 0
    6e18:	79 f7       	brne	.-34     	; 0x6df8 <__utoa_common+0x4>
    6e1a:	b1 11       	cpse	r27, r1
    6e1c:	b1 93       	st	Z+, r27
    6e1e:	11 92       	st	Z+, r1
    6e20:	cb 01       	movw	r24, r22
    6e22:	00 c0       	rjmp	.+0      	; 0x6e24 <strrev>

00006e24 <strrev>:
    6e24:	dc 01       	movw	r26, r24
    6e26:	fc 01       	movw	r30, r24
    6e28:	67 2f       	mov	r22, r23
    6e2a:	71 91       	ld	r23, Z+
    6e2c:	77 23       	and	r23, r23
    6e2e:	e1 f7       	brne	.-8      	; 0x6e28 <strrev+0x4>
    6e30:	32 97       	sbiw	r30, 0x02	; 2
    6e32:	04 c0       	rjmp	.+8      	; 0x6e3c <strrev+0x18>
    6e34:	7c 91       	ld	r23, X
    6e36:	6d 93       	st	X+, r22
    6e38:	70 83       	st	Z, r23
    6e3a:	62 91       	ld	r22, -Z
    6e3c:	ae 17       	cp	r26, r30
    6e3e:	bf 07       	cpc	r27, r31
    6e40:	c8 f3       	brcs	.-14     	; 0x6e34 <strrev+0x10>
    6e42:	08 95       	ret

00006e44 <__do_global_dtors>:
    6e44:	11 e0       	ldi	r17, 0x01	; 1
    6e46:	c7 e1       	ldi	r28, 0x17	; 23
    6e48:	d1 e0       	ldi	r29, 0x01	; 1
    6e4a:	00 e0       	ldi	r16, 0x00	; 0
    6e4c:	05 c0       	rjmp	.+10     	; 0x6e58 <__do_global_dtors+0x14>
    6e4e:	80 2f       	mov	r24, r16
    6e50:	fe 01       	movw	r30, r28
    6e52:	55 dd       	rcall	.-1366   	; 0x68fe <__tablejump2__>
    6e54:	21 96       	adiw	r28, 0x01	; 1
    6e56:	01 1d       	adc	r16, r1
    6e58:	c8 31       	cpi	r28, 0x18	; 24
    6e5a:	d1 07       	cpc	r29, r17
    6e5c:	80 e0       	ldi	r24, 0x00	; 0
    6e5e:	08 07       	cpc	r16, r24
    6e60:	b1 f7       	brne	.-20     	; 0x6e4e <__do_global_dtors+0xa>
    6e62:	f8 94       	cli

00006e64 <__stop_program>:
    6e64:	ff cf       	rjmp	.-2      	; 0x6e64 <__stop_program>
