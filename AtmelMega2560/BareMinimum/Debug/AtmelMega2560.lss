
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800200  000066ca  0000675e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  008002ee  008002ee  0000684c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000684c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000687c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c80  00000000  00000000  000068bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000189e2  00000000  00000000  0000753c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004114  00000000  00000000  0001ff1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000779a  00000000  00000000  00024032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003074  00000000  00000000  0002b7cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058ed  00000000  00000000  0002e840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b673  00000000  00000000  0003412d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 34 2b 	jmp	0x5668	; 0x5668 <__vector_25>
      68:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ad 2d       	mov	r26, r13
      e6:	b0 2d       	mov	r27, r0
      e8:	9f 2d       	mov	r25, r15
      ea:	a3 2d       	mov	r26, r3
      ec:	a9 2d       	mov	r26, r9
      ee:	e7 2d       	mov	r30, r7
      f0:	b4 2d       	mov	r27, r4
      f2:	b8 2d       	mov	r27, r8
      f4:	be 2d       	mov	r27, r14
      f6:	c2 2d       	mov	r28, r2
      f8:	c6 2d       	mov	r28, r6
      fa:	cc 2d       	mov	r28, r12
      fc:	d0 2d       	mov	r29, r0
      fe:	d4 2d       	mov	r29, r4
     100:	e7 2d       	mov	r30, r7
     102:	da 2d       	mov	r29, r10
     104:	de 2d       	mov	r29, r14
     106:	e2 2d       	mov	r30, r2

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	97 07       	cpc	r25, r23
     22a:	0c 28       	or	r0, r12
     22c:	9c 2b       	or	r25, r28

0000022e <__ctors_end>:
     22e:	a3 07       	cpc	r26, r19

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	12 e0       	ldi	r17, 0x02	; 2
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	ea ec       	ldi	r30, 0xCA	; 202
     248:	f6 e6       	ldi	r31, 0x66	; 102
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ae 3e       	cpi	r26, 0xEE	; 238
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	ae ee       	ldi	r26, 0xEE	; 238
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a8 34       	cpi	r26, 0x48	; 72
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 bb 30 	call	0x6176	; 0x6176 <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 ca 2b 	call	0x5794	; 0x5794 <main>
     28e:	0c 94 54 33 	jmp	0x66a8	; 0x66a8 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <_ZN6StringpLEc+0x6>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	9a 83       	std	Y+2, r25	; 0x02
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	6b 83       	std	Y+3, r22	; 0x03
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	6b 81       	ldd	r22, Y+3	; 0x03
     2aa:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6String6concatEc>
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <_ZNK6StringeqERKS_+0x6>
     2c4:	1f 92       	push	r1
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	7c 83       	std	Y+4, r23	; 0x04
     2d0:	6b 83       	std	Y+3, r22	; 0x03
     2d2:	2b 81       	ldd	r18, Y+3	; 0x03
     2d4:	3c 81       	ldd	r19, Y+4	; 0x04
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	9a 81       	ldd	r25, Y+2	; 0x02
     2da:	b9 01       	movw	r22, r18
     2dc:	0e 94 eb 2f 	call	0x5fd6	; 0x5fd6 <_ZNK6String6equalsERKS_>
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_ZNK6StringeqEPKc>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <_ZNK6StringeqEPKc+0x6>
     2f4:	1f 92       	push	r1
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	9a 83       	std	Y+2, r25	; 0x02
     2fc:	89 83       	std	Y+1, r24	; 0x01
     2fe:	7c 83       	std	Y+4, r23	; 0x04
     300:	6b 83       	std	Y+3, r22	; 0x03
     302:	2b 81       	ldd	r18, Y+3	; 0x03
     304:	3c 81       	ldd	r19, Y+4	; 0x04
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	b9 01       	movw	r22, r18
     30c:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <_ZNK6String6equalsEPKc>
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <_ZNK6String9substringEj+0x6>
     324:	00 d0       	rcall	.+0      	; 0x326 <_ZNK6String9substringEj+0x8>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	7c 83       	std	Y+4, r23	; 0x04
     330:	6b 83       	std	Y+3, r22	; 0x03
     332:	5e 83       	std	Y+6, r21	; 0x06
     334:	4d 83       	std	Y+5, r20	; 0x05
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	fc 01       	movw	r30, r24
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	35 81       	ldd	r19, Z+5	; 0x05
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	9a 81       	ldd	r25, Y+2	; 0x02
     344:	4d 81       	ldd	r20, Y+5	; 0x05
     346:	5e 81       	ldd	r21, Y+6	; 0x06
     348:	6b 81       	ldd	r22, Y+3	; 0x03
     34a:	7c 81       	ldd	r23, Y+4	; 0x04
     34c:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZNK6String9substringEjj>
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	26 96       	adiw	r28, 0x06	; 6
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN5Print5writeEPKc+0xa>
     370:	1f 92       	push	r1
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	7c 83       	std	Y+4, r23	; 0x04
     37c:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	89 2b       	or	r24, r25
     384:	19 f4       	brne	.+6      	; 0x38c <_ZN5Print5writeEPKc+0x26>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	15 c0       	rjmp	.+42     	; 0x3b6 <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	9a 81       	ldd	r25, Y+2	; 0x02
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	91 81       	ldd	r25, Z+1	; 0x01
     396:	02 96       	adiw	r24, 0x02	; 2
     398:	fc 01       	movw	r30, r24
     39a:	00 81       	ld	r16, Z
     39c:	11 81       	ldd	r17, Z+1	; 0x01
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	0e 94 09 33 	call	0x6612	; 0x6612 <strlen>
     3a6:	ac 01       	movw	r20, r24
     3a8:	2b 81       	ldd	r18, Y+3	; 0x03
     3aa:	3c 81       	ldd	r19, Y+4	; 0x04
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	b9 01       	movw	r22, r18
     3b2:	f8 01       	movw	r30, r16
     3b4:	19 95       	eicall
    }
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <_ZN14HardwareSerial5beginEm+0x6>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <_ZN14HardwareSerial5beginEm+0x8>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	4b 83       	std	Y+3, r20	; 0x03
     3da:	5c 83       	std	Y+4, r21	; 0x04
     3dc:	6d 83       	std	Y+5, r22	; 0x05
     3de:	7e 83       	std	Y+6, r23	; 0x06
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	9c 81       	ldd	r25, Y+4	; 0x04
     3e4:	ad 81       	ldd	r26, Y+5	; 0x05
     3e6:	be 81       	ldd	r27, Y+6	; 0x06
     3e8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ea:	fa 81       	ldd	r31, Y+2	; 0x02
     3ec:	26 e0       	ldi	r18, 0x06	; 6
     3ee:	ac 01       	movw	r20, r24
     3f0:	bd 01       	movw	r22, r26
     3f2:	cf 01       	movw	r24, r30
     3f4:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <_ZN14HardwareSerial5beginEmh>
     3f8:	00 00       	nop
     3fa:	26 96       	adiw	r28, 0x06	; 6
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	1f 92       	push	r1
     412:	1f 92       	push	r1
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	1f 92       	push	r1
     42e:	1f 92       	push	r1
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	26 e7       	ldi	r18, 0x76	; 118
     43a:	32 e0       	ldi	r19, 0x02	; 2
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	fc 01       	movw	r30, r24
     442:	31 83       	std	Z+1, r19	; 0x01
     444:	20 83       	st	Z, r18
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	89 2b       	or	r24, r25
     44c:	21 f0       	breq	.+8      	; 0x456 <_ZN15Adafruit_SensorD1Ev+0x2e>
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_ZdlPv>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <_ZN15Adafruit_SensorD0Ev>:
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	1f 92       	push	r1
     466:	1f 92       	push	r1
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	9a 83       	std	Y+2, r25	; 0x02
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	d9 df       	rcall	.-78     	; 0x428 <_ZN15Adafruit_SensorD1Ev>
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_ZdlPv>
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     498:	00 00       	nop
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <_ZN15Adafruit_SensorC1ERKS_+0x6>
     4ac:	1f 92       	push	r1
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	9a 83       	std	Y+2, r25	; 0x02
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	7c 83       	std	Y+4, r23	; 0x04
     4b8:	6b 83       	std	Y+3, r22	; 0x03
     4ba:	26 e7       	ldi	r18, 0x76	; 118
     4bc:	32 e0       	ldi	r19, 0x02	; 2
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	fc 01       	movw	r30, r24
     4c4:	31 83       	std	Z+1, r19	; 0x01
     4c6:	20 83       	st	Z, r18
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	9c 81       	ldd	r25, Y+4	; 0x04
     4cc:	fc 01       	movw	r30, r24
     4ce:	22 81       	ldd	r18, Z+2	; 0x02
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	fc 01       	movw	r30, r24
     4d6:	22 83       	std	Z+2, r18	; 0x02
     4d8:	00 00       	nop
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     4ee:	1f 92       	push	r1
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
     4f8:	7c 83       	std	Y+4, r23	; 0x04
     4fa:	6b 83       	std	Y+3, r22	; 0x03
     4fc:	2b 81       	ldd	r18, Y+3	; 0x03
     4fe:	3c 81       	ldd	r19, Y+4	; 0x04
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	b9 01       	movw	r22, r18
     506:	cf df       	rcall	.-98     	; 0x4a6 <_ZN15Adafruit_SensorC1ERKS_>
     508:	22 e9       	ldi	r18, 0x92	; 146
     50a:	32 e0       	ldi	r19, 0x02	; 2
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	fc 01       	movw	r30, r24
     512:	31 83       	std	Z+1, r19	; 0x01
     514:	20 83       	st	Z, r18
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	fc 01       	movw	r30, r24
     51c:	23 81       	ldd	r18, Z+3	; 0x03
     51e:	34 81       	ldd	r19, Z+4	; 0x04
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	fc 01       	movw	r30, r24
     526:	34 83       	std	Z+4, r19	; 0x04
     528:	23 83       	std	Z+3, r18	; 0x03
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	fc 01       	movw	r30, r24
     530:	85 81       	ldd	r24, Z+5	; 0x05
     532:	96 81       	ldd	r25, Z+6	; 0x06
     534:	a7 81       	ldd	r26, Z+7	; 0x07
     536:	b0 85       	ldd	r27, Z+8	; 0x08
     538:	29 81       	ldd	r18, Y+1	; 0x01
     53a:	3a 81       	ldd	r19, Y+2	; 0x02
     53c:	f9 01       	movw	r30, r18
     53e:	85 83       	std	Z+5, r24	; 0x05
     540:	96 83       	std	Z+6, r25	; 0x06
     542:	a7 83       	std	Z+7, r26	; 0x07
     544:	b0 87       	std	Z+8, r27	; 0x08
     546:	00 00       	nop
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	00 d0       	rcall	.+0      	; 0x55c <_ZN11DHT_Unified11temperatureEv+0x6>
     55c:	1f 92       	push	r1
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	9a 83       	std	Y+2, r25	; 0x02
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	7c 83       	std	Y+4, r23	; 0x04
     568:	6b 83       	std	Y+3, r22	; 0x03
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	9c 01       	movw	r18, r24
     570:	2c 5e       	subi	r18, 0xEC	; 236
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	b9 01       	movw	r22, r18
     57a:	b6 df       	rcall	.-148    	; 0x4e8 <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	00 d0       	rcall	.+0      	; 0x594 <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     594:	1f 92       	push	r1
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	7c 83       	std	Y+4, r23	; 0x04
     5a0:	6b 83       	std	Y+3, r22	; 0x03
     5a2:	2b 81       	ldd	r18, Y+3	; 0x03
     5a4:	3c 81       	ldd	r19, Y+4	; 0x04
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	b9 01       	movw	r22, r18
     5ac:	7c df       	rcall	.-264    	; 0x4a6 <_ZN15Adafruit_SensorC1ERKS_>
     5ae:	24 e8       	ldi	r18, 0x84	; 132
     5b0:	32 e0       	ldi	r19, 0x02	; 2
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	fc 01       	movw	r30, r24
     5b8:	31 83       	std	Z+1, r19	; 0x01
     5ba:	20 83       	st	Z, r18
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	fc 01       	movw	r30, r24
     5c2:	23 81       	ldd	r18, Z+3	; 0x03
     5c4:	34 81       	ldd	r19, Z+4	; 0x04
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	fc 01       	movw	r30, r24
     5cc:	34 83       	std	Z+4, r19	; 0x04
     5ce:	23 83       	std	Z+3, r18	; 0x03
     5d0:	8b 81       	ldd	r24, Y+3	; 0x03
     5d2:	9c 81       	ldd	r25, Y+4	; 0x04
     5d4:	fc 01       	movw	r30, r24
     5d6:	85 81       	ldd	r24, Z+5	; 0x05
     5d8:	96 81       	ldd	r25, Z+6	; 0x06
     5da:	a7 81       	ldd	r26, Z+7	; 0x07
     5dc:	b0 85       	ldd	r27, Z+8	; 0x08
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	3a 81       	ldd	r19, Y+2	; 0x02
     5e2:	f9 01       	movw	r30, r18
     5e4:	85 83       	std	Z+5, r24	; 0x05
     5e6:	96 83       	std	Z+6, r25	; 0x06
     5e8:	a7 83       	std	Z+7, r26	; 0x07
     5ea:	b0 87       	std	Z+8, r27	; 0x08
     5ec:	00 00       	nop
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	00 d0       	rcall	.+0      	; 0x602 <_ZN11DHT_Unified8humidityEv+0x6>
     602:	1f 92       	push	r1
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	7c 83       	std	Y+4, r23	; 0x04
     60e:	6b 83       	std	Y+3, r22	; 0x03
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	9c 01       	movw	r18, r24
     616:	23 5e       	subi	r18, 0xE3	; 227
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	b9 01       	movw	r22, r18
     620:	b6 df       	rcall	.-148    	; 0x58e <_ZN11DHT_Unified8HumidityC1ERKS0_>
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	00 d0       	rcall	.+0      	; 0x63a <_ZN7TwoWire5writeEi+0x6>
     63a:	1f 92       	push	r1
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	7c 83       	std	Y+4, r23	; 0x04
     646:	6b 83       	std	Y+3, r22	; 0x03
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	fc 01       	movw	r30, r24
     654:	20 81       	ld	r18, Z
     656:	31 81       	ldd	r19, Z+1	; 0x01
     658:	4b 81       	ldd	r20, Y+3	; 0x03
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	64 2f       	mov	r22, r20
     660:	f9 01       	movw	r30, r18
     662:	19 95       	eicall
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	eb 97       	sbiw	r28, 0x3b	; 59
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     686:	40 e8       	ldi	r20, 0x80	; 128
     688:	55 e2       	ldi	r21, 0x25	; 37
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	8e e9       	ldi	r24, 0x9E	; 158
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	9a de       	rcall	.-716    	; 0x3c8 <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     694:	82 e9       	ldi	r24, 0x92	; 146
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	0e 94 57 25 	call	0x4aae	; 0x4aae <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     69c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6a0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     6aa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6ae:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     6b8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     6bc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     6c6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     6ca:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	6f d2       	rcall	.+1246   	; 0xbb6 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     6d8:	8e ee       	ldi	r24, 0xEE	; 238
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     6e0:	ce 01       	movw	r24, r28
     6e2:	0b 96       	adiw	r24, 0x0b	; 11
     6e4:	6e ee       	ldi	r22, 0xEE	; 238
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	36 df       	rcall	.-404    	; 0x556 <_ZN11DHT_Unified11temperatureEv>
     6ea:	9e 01       	movw	r18, r28
     6ec:	2c 5e       	subi	r18, 0xEC	; 236
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	ce 01       	movw	r24, r28
     6f2:	0b 96       	adiw	r24, 0x0b	; 11
     6f4:	b9 01       	movw	r22, r18
     6f6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     6fa:	ce 01       	movw	r24, r28
     6fc:	0b 96       	adiw	r24, 0x0b	; 11
     6fe:	b1 d3       	rcall	.+1890   	; 0xe62 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     700:	ce 01       	movw	r24, r28
     702:	02 96       	adiw	r24, 0x02	; 2
     704:	6e ee       	ldi	r22, 0xEE	; 238
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	79 df       	rcall	.-270    	; 0x5fc <_ZN11DHT_Unified8humidityEv>
     70a:	9e 01       	movw	r18, r28
     70c:	2c 5e       	subi	r18, 0xEC	; 236
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	ce 01       	movw	r24, r28
     712:	02 96       	adiw	r24, 0x02	; 2
     714:	b9 01       	movw	r22, r18
     716:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     71a:	ce 01       	movw	r24, r28
     71c:	02 96       	adiw	r24, 0x02	; 2
     71e:	d4 d3       	rcall	.+1960   	; 0xec8 <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     720:	88 ad       	ldd	r24, Y+56	; 0x38
     722:	99 ad       	ldd	r25, Y+57	; 0x39
     724:	aa ad       	ldd	r26, Y+58	; 0x3a
     726:	bb ad       	ldd	r27, Y+59	; 0x3b
     728:	28 ee       	ldi	r18, 0xE8	; 232
     72a:	33 e0       	ldi	r19, 0x03	; 3
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	bc 01       	movw	r22, r24
     732:	cd 01       	movw	r24, r26
     734:	0e 94 9f 30 	call	0x613e	; 0x613e <__divmodsi4>
     738:	da 01       	movw	r26, r20
     73a:	c9 01       	movw	r24, r18
     73c:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <delayMS>
     740:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <delayMS+0x1>
     744:	a0 93 16 03 	sts	0x0316, r26	; 0x800316 <delayMS+0x2>
     748:	b0 93 17 03 	sts	0x0317, r27	; 0x800317 <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     74c:	8e e9       	ldi	r24, 0x9E	; 158
     74e:	94 e0       	ldi	r25, 0x04	; 4
     750:	5d de       	rcall	.-838    	; 0x40c <_ZN14HardwareSerialcvbEv>
     752:	98 2f       	mov	r25, r24
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	89 27       	eor	r24, r25
     758:	88 23       	and	r24, r24
     75a:	09 f0       	breq	.+2      	; 0x75e <setup+0xec>
     75c:	f7 cf       	rjmp	.-18     	; 0x74c <setup+0xda>
  SPI.begin();         // Init SPI bus
     75e:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     762:	8e e1       	ldi	r24, 0x1E	; 30
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     76a:	19 82       	std	Y+1, r1	; 0x01
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	86 30       	cpi	r24, 0x06	; 6
     770:	60 f4       	brcc	.+24     	; 0x78a <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	84 5d       	subi	r24, 0xD4	; 212
     77a:	9c 4f       	sbci	r25, 0xFC	; 252
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	f1 cf       	rjmp	.-30     	; 0x76c <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     78a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     78e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     792:	bc 01       	movw	r22, r24
     794:	88 e3       	ldi	r24, 0x38	; 56
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	88 e3       	ldi	r24, 0x38	; 56
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN5Servo5writeEi>

#pragma endregion Servo Motor
 
}
     7a8:	00 00       	nop
     7aa:	eb 96       	adiw	r28, 0x3b	; 59
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <loop>:

void loop()
{
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	ed 97       	sbiw	r28, 0x3d	; 61
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     7d2:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <delayMS>
     7d6:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <delayMS+0x1>
     7da:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <delayMS+0x2>
     7de:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <delayMS+0x3>
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     7ea:	ce 01       	movw	r24, r28
     7ec:	0b 96       	adiw	r24, 0x0b	; 11
     7ee:	6e ee       	ldi	r22, 0xEE	; 238
     7f0:	72 e0       	ldi	r23, 0x02	; 2
     7f2:	b1 de       	rcall	.-670    	; 0x556 <_ZN11DHT_Unified11temperatureEv>
     7f4:	9e 01       	movw	r18, r28
     7f6:	2c 5e       	subi	r18, 0xEC	; 236
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	ce 01       	movw	r24, r28
     7fc:	0b 96       	adiw	r24, 0x0b	; 11
     7fe:	b9 01       	movw	r22, r18
     800:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     804:	ce 01       	movw	r24, r28
     806:	0b 96       	adiw	r24, 0x0b	; 11
     808:	2c d3       	rcall	.+1624   	; 0xe62 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     80a:	88 a5       	ldd	r24, Y+40	; 0x28
     80c:	99 a5       	ldd	r25, Y+41	; 0x29
     80e:	aa a5       	ldd	r26, Y+42	; 0x2a
     810:	bb a5       	ldd	r27, Y+43	; 0x2b
     812:	11 e0       	ldi	r17, 0x01	; 1
     814:	9c 01       	movw	r18, r24
     816:	ad 01       	movw	r20, r26
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	0e 94 c3 29 	call	0x5386	; 0x5386 <__unordsf2>
     820:	88 23       	and	r24, r24
     822:	09 f4       	brne	.+2      	; 0x826 <loop+0x6a>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	11 23       	and	r17, r17
     828:	39 f0       	breq	.+14     	; 0x838 <loop+0x7c>
	{
		DhtSencorTemp = 420;
     82a:	84 ea       	ldi	r24, 0xA4	; 164
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <DhtSencorTemp+0x1>
     832:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <DhtSencorTemp>
     836:	0e c0       	rjmp	.+28     	; 0x854 <loop+0x98>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     838:	88 a5       	ldd	r24, Y+40	; 0x28
     83a:	99 a5       	ldd	r25, Y+41	; 0x29
     83c:	aa a5       	ldd	r26, Y+42	; 0x2a
     83e:	bb a5       	ldd	r27, Y+43	; 0x2b
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 7d 28 	call	0x50fa	; 0x50fa <__fixsfsi>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <DhtSencorTemp+0x1>
     850:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     854:	ce 01       	movw	r24, r28
     856:	02 96       	adiw	r24, 0x02	; 2
     858:	6e ee       	ldi	r22, 0xEE	; 238
     85a:	72 e0       	ldi	r23, 0x02	; 2
     85c:	cf de       	rcall	.-610    	; 0x5fc <_ZN11DHT_Unified8humidityEv>
     85e:	9e 01       	movw	r18, r28
     860:	2c 5e       	subi	r18, 0xEC	; 236
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	02 96       	adiw	r24, 0x02	; 2
     868:	b9 01       	movw	r22, r18
     86a:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     86e:	ce 01       	movw	r24, r28
     870:	02 96       	adiw	r24, 0x02	; 2
     872:	2a d3       	rcall	.+1620   	; 0xec8 <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     874:	88 a5       	ldd	r24, Y+40	; 0x28
     876:	99 a5       	ldd	r25, Y+41	; 0x29
     878:	aa a5       	ldd	r26, Y+42	; 0x2a
     87a:	bb a5       	ldd	r27, Y+43	; 0x2b
     87c:	11 e0       	ldi	r17, 0x01	; 1
     87e:	9c 01       	movw	r18, r24
     880:	ad 01       	movw	r20, r26
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	0e 94 c3 29 	call	0x5386	; 0x5386 <__unordsf2>
     88a:	88 23       	and	r24, r24
     88c:	09 f4       	brne	.+2      	; 0x890 <loop+0xd4>
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	11 23       	and	r17, r17
     892:	39 f0       	breq	.+14     	; 0x8a2 <loop+0xe6>
	{
		DhtSencorHum = 360;
     894:	88 e6       	ldi	r24, 0x68	; 104
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <DhtSencorHum+0x1>
     89c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <DhtSencorHum>
     8a0:	0e c0       	rjmp	.+28     	; 0x8be <loop+0x102>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     8a2:	88 a5       	ldd	r24, Y+40	; 0x28
     8a4:	99 a5       	ldd	r25, Y+41	; 0x29
     8a6:	aa a5       	ldd	r26, Y+42	; 0x2a
     8a8:	bb a5       	ldd	r27, Y+43	; 0x2b
     8aa:	bc 01       	movw	r22, r24
     8ac:	cd 01       	movw	r24, r26
     8ae:	0e 94 7d 28 	call	0x50fa	; 0x50fa <__fixsfsi>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <DhtSencorHum+0x1>
     8ba:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <DhtSencorHum>
	//Serial.print("Temp: ");
	//Serial.println(DhtSencorTemp);
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);
  
  Wire.beginTransmission(4);		// transmit to device #4
     8be:	64 e0       	ldi	r22, 0x04	; 4
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	82 e9       	ldi	r24, 0x92	; 146
     8c4:	94 e0       	ldi	r25, 0x04	; 4
     8c6:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     8ca:	6e e0       	ldi	r22, 0x0E	; 14
     8cc:	72 e0       	ldi	r23, 0x02	; 2
     8ce:	82 e9       	ldi	r24, 0x92	; 146
     8d0:	94 e0       	ldi	r25, 0x04	; 4
     8d2:	49 dd       	rcall	.-1390   	; 0x366 <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     8d4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <DhtSencorTemp>
     8d8:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <DhtSencorTemp+0x1>
     8dc:	bc 01       	movw	r22, r24
     8de:	82 e9       	ldi	r24, 0x92	; 146
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	a8 de       	rcall	.-688    	; 0x634 <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     8e4:	82 e9       	ldi	r24, 0x92	; 146
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     8ec:	64 e0       	ldi	r22, 0x04	; 4
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	82 e9       	ldi	r24, 0x92	; 146
     8f2:	94 e0       	ldi	r25, 0x04	; 4
     8f4:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");			// sends some bytes
     8f8:	65 e1       	ldi	r22, 0x15	; 21
     8fa:	72 e0       	ldi	r23, 0x02	; 2
     8fc:	82 e9       	ldi	r24, 0x92	; 146
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	32 dd       	rcall	.-1436   	; 0x366 <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorHum);		    // sends some bytes
     902:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <DhtSencorHum>
     906:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <DhtSencorHum+0x1>
     90a:	bc 01       	movw	r22, r24
     90c:	82 e9       	ldi	r24, 0x92	; 146
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	91 de       	rcall	.-734    	; 0x634 <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     912:	82 e9       	ldi	r24, 0x92	; 146
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 6);		// request 6 bytes from slave device #4
     91a:	46 e0       	ldi	r20, 0x06	; 6
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	64 e0       	ldi	r22, 0x04	; 4
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	82 e9       	ldi	r24, 0x92	; 146
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <_ZN7TwoWire11requestFromEii>

	String keyword =  "";
     92a:	ce 01       	movw	r24, r28
     92c:	c8 96       	adiw	r24, 0x38	; 56
     92e:	6b e1       	ldi	r22, 0x1B	; 27
     930:	72 e0       	ldi	r23, 0x02	; 2
     932:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN6StringC1EPKc>
	// slave may send less than requested
	while (Wire.available()) 
     936:	82 e9       	ldi	r24, 0x92	; 146
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_ZN7TwoWire9availableEv>
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	89 2b       	or	r24, r25
     942:	09 f4       	brne	.+2      	; 0x946 <loop+0x18a>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	22 23       	and	r18, r18
     948:	51 f0       	breq	.+20     	; 0x95e <loop+0x1a2>
	{ 
		char request_c = Wire.read();		// receive a byte as character
     94a:	82 e9       	ldi	r24, 0x92	; 146
     94c:	94 e0       	ldi	r25, 0x04	; 4
     94e:	0e 94 28 27 	call	0x4e50	; 0x4e50 <_ZN7TwoWire4readEv>
		keyword += request_c;
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	ce 01       	movw	r24, r28
     956:	c8 96       	adiw	r24, 0x38	; 56
     958:	69 81       	ldd	r22, Y+1	; 0x01
	
	Wire.requestFrom(4, 6);		// request 6 bytes from slave device #4

	String keyword =  "";
	// slave may send less than requested
	while (Wire.available()) 
     95a:	9c dc       	rcall	.-1736   	; 0x294 <_ZN6StringpLEc>
		char request_c = Wire.read();		// receive a byte as character
		keyword += request_c;
	}
	 
	// Verify incoming data
	if (keyword == "TOGGLE")
     95c:	ec cf       	rjmp	.-40     	; 0x936 <loop+0x17a>
     95e:	ce 01       	movw	r24, r28
     960:	c8 96       	adiw	r24, 0x38	; 56
     962:	6c e1       	ldi	r22, 0x1C	; 28
     964:	72 e0       	ldi	r23, 0x02	; 2
     966:	c3 dc       	rcall	.-1658   	; 0x2ee <_ZNK6StringeqEPKc>
     968:	98 2f       	mov	r25, r24
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	99 23       	and	r25, r25
     96e:	09 f4       	brne	.+2      	; 0x972 <loop+0x1b6>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	88 23       	and	r24, r24
	{
		// toggle servo position
		moveServo();
     974:	09 f0       	breq	.+2      	; 0x978 <loop+0x1bc>
     976:	54 d1       	rcall	.+680    	; 0xc20 <_Z9moveServov>
	}
	 
	delay(500);
     978:	64 ef       	ldi	r22, 0xF4	; 244
     97a:	71 e0       	ldi	r23, 0x01	; 1
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     984:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <isCardValid+0x1>
     988:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <isCardValid>

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     98c:	8e e1       	ldi	r24, 0x1E	; 30
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     994:	98 2f       	mov	r25, r24
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	89 27       	eor	r24, r25
     99a:	88 23       	and	r24, r24
     99c:	49 f4       	brne	.+18     	; 0x9b0 <loop+0x1f4>
     99e:	8e e1       	ldi	r24, 0x1E	; 30
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN7MFRC52219PICC_ReadCardSerialEv>
     9a6:	98 2f       	mov	r25, r24
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	89 27       	eor	r24, r25
     9ac:	88 23       	and	r24, r24
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <loop+0x1f8>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <loop+0x1fa>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	88 23       	and	r24, r24
     9b8:	59 f0       	breq	.+22     	; 0x9d0 <loop+0x214>
	{
		delay(50);
     9ba:	62 e3       	ldi	r22, 0x32	; 50
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
		isCardValid = 0;
     9c6:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <isCardValid+0x1>
     9ca:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <isCardValid>
	}
	else 
	{
		isCardValid = RfidValidater();
     9ce:	19 c0       	rjmp	.+50     	; 0xa02 <loop+0x246>
     9d0:	2d d0       	rcall	.+90     	; 0xa2c <_Z13RfidValidaterv>
     9d2:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <isCardValid+0x1>

		// if card/chip is valid
		if (isCardValid == 1)
     9d6:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <isCardValid>
     9da:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <isCardValid>
     9de:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <isCardValid+0x1>
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <loop+0x234>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
				
			// Move servo
			moveServo();
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	6a d1       	rcall	.+724    	; 0xcc0 <_Z12makeBipSoundi>
     9ec:	19 d1       	rcall	.+562    	; 0xc20 <_Z9moveServov>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <loop+0x246>
     9f0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <isCardValid>
     9f4:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <isCardValid+0x1>
     9f8:	02 97       	sbiw	r24, 0x02	; 2
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     9fa:	19 f4       	brne	.+6      	; 0xa02 <loop+0x246>
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	5f d1       	rcall	.+702    	; 0xcc0 <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     a02:	68 ee       	ldi	r22, 0xE8	; 232
     a04:	73 e0       	ldi	r23, 0x03	; 3
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 6);		// request 6 bytes from slave device #4

	String keyword =  "";
     a0e:	ce 01       	movw	r24, r28
     a10:	c8 96       	adiw	r24, 0x38	; 56
     a12:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN6StringD1Ev>
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
}
     a16:	00 00       	nop
     a18:	ed 96       	adiw	r28, 0x3d	; 61
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	08 95       	ret

00000a2c <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	69 97       	sbiw	r28, 0x19	; 25
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     a44:	ce 01       	movw	r24, r28
     a46:	44 96       	adiw	r24, 0x14	; 20
     a48:	6b e1       	ldi	r22, 0x1B	; 27
     a4a:	72 e0       	ldi	r23, 0x02	; 2
     a4c:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     a50:	19 82       	std	Y+1, r1	; 0x01
     a52:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <mfrc522>
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	89 17       	cp	r24, r25
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <_Z13RfidValidaterv+0x32>
     a5c:	5f c0       	rjmp	.+190    	; 0xb1c <_Z13RfidValidaterv+0xf0>
	{
		Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	88 2f       	mov	r24, r24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	81 5e       	subi	r24, 0xE1	; 225
     a66:	9c 4f       	sbci	r25, 0xFC	; 252
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	80 31       	cpi	r24, 0x10	; 16
     a6e:	18 f4       	brcc	.+6      	; 0xa76 <_Z13RfidValidaterv+0x4a>
     a70:	83 e2       	ldi	r24, 0x23	; 35
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <_Z13RfidValidaterv+0x4e>
     a76:	86 e2       	ldi	r24, 0x26	; 38
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	bc 01       	movw	r22, r24
     a7c:	8e e9       	ldi	r24, 0x9E	; 158
     a7e:	94 e0       	ldi	r25, 0x04	; 4
     a80:	0e 94 01 2c 	call	0x5802	; 0x5802 <_ZN5Print5printEPKc>
		Serial.print(mfrc522.uid.uidByte[i], HEX);
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	81 5e       	subi	r24, 0xE1	; 225
     a8c:	9c 4f       	sbci	r25, 0xFC	; 252
     a8e:	fc 01       	movw	r30, r24
     a90:	80 81       	ld	r24, Z
     a92:	40 e1       	ldi	r20, 0x10	; 16
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	68 2f       	mov	r22, r24
     a98:	8e e9       	ldi	r24, 0x9E	; 158
     a9a:	94 e0       	ldi	r25, 0x04	; 4
     a9c:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN5Print5printEhi>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	81 5e       	subi	r24, 0xE1	; 225
     aa8:	9c 4f       	sbci	r25, 0xFC	; 252
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	80 31       	cpi	r24, 0x10	; 16
     ab0:	18 f4       	brcc	.+6      	; 0xab8 <_Z13RfidValidaterv+0x8c>
     ab2:	83 e2       	ldi	r24, 0x23	; 35
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <_Z13RfidValidaterv+0x90>
     ab8:	86 e2       	ldi	r24, 0x26	; 38
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	9e 01       	movw	r18, r28
     abe:	22 5f       	subi	r18, 0xF2	; 242
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	bc 01       	movw	r22, r24
     ac4:	c9 01       	movw	r24, r18
     ac6:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN6StringC1EPKc>
     aca:	9e 01       	movw	r18, r28
     acc:	22 5f       	subi	r18, 0xF2	; 242
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	ce 01       	movw	r24, r28
     ad2:	44 96       	adiw	r24, 0x14	; 20
     ad4:	b9 01       	movw	r22, r18
     ad6:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <_ZN6String6concatERKS_>
     ada:	ce 01       	movw	r24, r28
     adc:	0e 96       	adiw	r24, 0x0e	; 14
     ade:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	88 2f       	mov	r24, r24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	81 5e       	subi	r24, 0xE1	; 225
     aea:	9c 4f       	sbci	r25, 0xFC	; 252
     aec:	fc 01       	movw	r30, r24
     aee:	20 81       	ld	r18, Z
     af0:	ce 01       	movw	r24, r28
     af2:	08 96       	adiw	r24, 0x08	; 8
     af4:	40 e1       	ldi	r20, 0x10	; 16
     af6:	62 2f       	mov	r22, r18
     af8:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN6StringC1Ehh>
     afc:	9e 01       	movw	r18, r28
     afe:	28 5f       	subi	r18, 0xF8	; 248
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	ce 01       	movw	r24, r28
     b04:	44 96       	adiw	r24, 0x14	; 20
     b06:	b9 01       	movw	r22, r18
     b08:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <_ZN6String6concatERKS_>
     b0c:	ce 01       	movw	r24, r28
     b0e:	08 96       	adiw	r24, 0x08	; 8
     b10:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	8f 5f       	subi	r24, 0xFF	; 255
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	9b cf       	rjmp	.-202    	; 0xa52 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     b1c:	ce 01       	movw	r24, r28
     b1e:	44 96       	adiw	r24, 0x14	; 20
     b20:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     b24:	ce 01       	movw	r24, r28
     b26:	02 96       	adiw	r24, 0x02	; 2
     b28:	9e 01       	movw	r18, r28
     b2a:	2c 5e       	subi	r18, 0xEC	; 236
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	b9 01       	movw	r22, r18
     b34:	f4 db       	rcall	.-2072   	; 0x31e <_ZNK6String9substringEj>
     b36:	ce 01       	movw	r24, r28
     b38:	02 96       	adiw	r24, 0x02	; 2
     b3a:	62 e3       	ldi	r22, 0x32	; 50
     b3c:	73 e0       	ldi	r23, 0x03	; 3
     b3e:	bf db       	rcall	.-2178   	; 0x2be <_ZNK6StringeqERKS_>
     b40:	11 e0       	ldi	r17, 0x01	; 1
     b42:	88 23       	and	r24, r24
     b44:	09 f4       	brne	.+2      	; 0xb48 <_Z13RfidValidaterv+0x11c>
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	ce 01       	movw	r24, r28
     b4a:	02 96       	adiw	r24, 0x02	; 2
     b4c:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN6StringD1Ev>
     b50:	11 23       	and	r17, r17
     b52:	89 f0       	breq	.+34     	; 0xb76 <_Z13RfidValidaterv+0x14a>
	{
		Serial.println();
     b54:	8e e9       	ldi	r24, 0x9E	; 158
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	0e 94 03 2c 	call	0x5806	; 0x5806 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     b5c:	68 e2       	ldi	r22, 0x28	; 40
     b5e:	72 e0       	ldi	r23, 0x02	; 2
     b60:	8e e9       	ldi	r24, 0x9E	; 158
     b62:	94 e0       	ldi	r25, 0x04	; 4
     b64:	0e 94 07 2c 	call	0x580e	; 0x580e <_ZN5Print7printlnEPKc>
		Serial.println();
     b68:	8e e9       	ldi	r24, 0x9E	; 158
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	0e 94 03 2c 	call	0x5806	; 0x5806 <_ZN5Print7printlnEv>
		return 1;
     b70:	01 e0       	ldi	r16, 0x01	; 1
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	10 c0       	rjmp	.+32     	; 0xb96 <_Z13RfidValidaterv+0x16a>
	}
	else
	{
		Serial.println();
     b76:	8e e9       	ldi	r24, 0x9E	; 158
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 03 2c 	call	0x5806	; 0x5806 <_ZN5Print7printlnEv>
		Serial.println(" Access denied");
     b7e:	6a e3       	ldi	r22, 0x3A	; 58
     b80:	72 e0       	ldi	r23, 0x02	; 2
     b82:	8e e9       	ldi	r24, 0x9E	; 158
     b84:	94 e0       	ldi	r25, 0x04	; 4
     b86:	0e 94 07 2c 	call	0x580e	; 0x580e <_ZN5Print7printlnEPKc>
		Serial.println();
     b8a:	8e e9       	ldi	r24, 0x9E	; 158
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	0e 94 03 2c 	call	0x5806	; 0x5806 <_ZN5Print7printlnEv>
		return 2;
     b92:	02 e0       	ldi	r16, 0x02	; 2
     b94:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     b96:	ce 01       	movw	r24, r28
     b98:	44 96       	adiw	r24, 0x14	; 20
     b9a:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN6StringD1Ev>
     b9e:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     ba0:	69 96       	adiw	r28, 0x19	; 25
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	1f 92       	push	r1
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     bc2:	99 81       	ldd	r25, Y+1	; 0x01
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	89 27       	eor	r24, r25
     bc8:	88 23       	and	r24, r24
     bca:	71 f0       	breq	.+28     	; 0xbe8 <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     bcc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     bd0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     bda:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     bde:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
	}
	if (status == true)
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 23       	and	r24, r24
     bec:	71 f0       	breq	.+28     	; 0xc0a <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     bee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     bf2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     bfc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     c00:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
	}
	delay(100);
     c0a:	64 e6       	ldi	r22, 0x64	; 100
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
}
     c16:	00 00       	nop
     c18:	0f 90       	pop	r0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     c28:	88 e3       	ldi	r24, 0x38	; 56
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <_ZN5Servo4readEv>
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	84 3b       	cpi	r24, 0xB4	; 180
     c34:	91 05       	cpc	r25, r1
     c36:	09 f0       	breq	.+2      	; 0xc3a <_Z9moveServov+0x1a>
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	22 23       	and	r18, r18
     c3c:	81 f0       	breq	.+32     	; 0xc5e <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     c3e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c42:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
		servo.write(0);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	88 e3       	ldi	r24, 0x38	; 56
     c52:	93 e0       	ldi	r25, 0x03	; 3
     c54:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	ad df       	rcall	.-166    	; 0xbb6 <_Z11SetRfidLedsb>
     c5c:	27 c0       	rjmp	.+78     	; 0xcac <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     c5e:	88 e3       	ldi	r24, 0x38	; 56
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <_ZN5Servo4readEv>
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	89 2b       	or	r24, r25
     c6a:	09 f0       	breq	.+2      	; 0xc6e <_Z9moveServov+0x4e>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	22 23       	and	r18, r18
     c70:	81 f0       	breq	.+32     	; 0xc92 <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     c72:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c76:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
		servo.write(180);
     c80:	64 eb       	ldi	r22, 0xB4	; 180
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	88 e3       	ldi	r24, 0x38	; 56
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	93 df       	rcall	.-218    	; 0xbb6 <_Z11SetRfidLedsb>
     c90:	0d c0       	rjmp	.+26     	; 0xcac <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     c92:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c96:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
		servo.write(180);
     ca0:	64 eb       	ldi	r22, 0xB4	; 180
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	88 e3       	ldi	r24, 0x38	; 56
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN5Servo5writeEi>
	}
	delay(100);
     cac:	64 e6       	ldi	r22, 0x64	; 100
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
}
     cb8:	00 00       	nop
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <_Z12makeBipSoundi+0x6>
     cc6:	1f 92       	push	r1
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	a9 f4       	brne	.+42     	; 0xd02 <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     cd8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     cdc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
		delay(100);
     ce6:	64 e6       	ldi	r22, 0x64	; 100
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     cf2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     cf6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
     d00:	35 c0       	rjmp	.+106    	; 0xd6c <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	02 97       	sbiw	r24, 0x02	; 2
     d08:	31 f5       	brne	.+76     	; 0xd56 <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d0a:	1a 82       	std	Y+2, r1	; 0x02
     d0c:	19 82       	std	Y+1, r1	; 0x01
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	03 97       	sbiw	r24, 0x03	; 3
     d14:	5c f5       	brge	.+86     	; 0xd6c <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     d16:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d1a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
			delay(100);						// tone length
     d24:	64 e6       	ldi	r22, 0x64	; 100
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     d30:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d34:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
			delay(50);						// Interval between tones
     d3e:	62 e3       	ldi	r22, 0x32	; 50
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	dc cf       	rjmp	.-72     	; 0xd0e <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	03 97       	sbiw	r24, 0x03	; 3
     d5c:	39 f4       	brne	.+14     	; 0xd6c <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     d5e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d62:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
	}
	delay(100);
     d6c:	64 e6       	ldi	r22, 0x64	; 100
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
     d78:	00 00       	nop
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	1f 92       	push	r1
     d8e:	1f 92       	push	r1
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	4d 96       	adiw	r24, 0x1d	; 29
     d9e:	94 d0       	rcall	.+296    	; 0xec8 <_ZN11DHT_Unified8HumidityD1Ev>
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	44 96       	adiw	r24, 0x14	; 20
     da6:	5d d0       	rcall	.+186    	; 0xe62 <_ZN11DHT_Unified11TemperatureD1Ev>
     da8:	00 00       	nop
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <_Z41__static_initialization_and_destruction_0ii>:
     db4:	af 92       	push	r10
     db6:	bf 92       	push	r11
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <_Z41__static_initialization_and_destruction_0ii+0x16>
     dca:	1f 92       	push	r1
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	7c 83       	std	Y+4, r23	; 0x04
     dd6:	6b 83       	std	Y+3, r22	; 0x03
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	11 f5       	brne	.+68     	; 0xe24 <_Z41__static_initialization_and_destruction_0ii+0x70>
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	f1 f4       	brne	.+60     	; 0xe24 <_Z41__static_initialization_and_destruction_0ii+0x70>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     de8:	aa 24       	eor	r10, r10
     dea:	aa 94       	dec	r10
     dec:	ba 2c       	mov	r11, r10
     dee:	65 01       	movw	r12, r10
     df0:	ee 24       	eor	r14, r14
     df2:	ea 94       	dec	r14
     df4:	fe 2c       	mov	r15, r14
     df6:	87 01       	movw	r16, r14
     df8:	26 e0       	ldi	r18, 0x06	; 6
     dfa:	4b e0       	ldi	r20, 0x0B	; 11
     dfc:	62 e0       	ldi	r22, 0x02	; 2
     dfe:	8e ee       	ldi	r24, 0xEE	; 238
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	c3 d6       	rcall	.+3462   	; 0x1b8a <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     e04:	45 e0       	ldi	r20, 0x05	; 5
     e06:	65 e3       	ldi	r22, 0x35	; 53
     e08:	8e e1       	ldi	r24, 0x1E	; 30
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 4c 13 	call	0x2698	; 0x2698 <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e10:	69 e4       	ldi	r22, 0x49	; 73
     e12:	72 e0       	ldi	r23, 0x02	; 2
     e14:	82 e3       	ldi	r24, 0x32	; 50
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     e1c:	88 e3       	ldi	r24, 0x38	; 56
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <_ZN5ServoC1Ev>
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	89 2b       	or	r24, r25
     e2a:	59 f4       	brne	.+22     	; 0xe42 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	39 f4       	brne	.+14     	; 0xe42 <_Z41__static_initialization_and_destruction_0ii+0x8e>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e34:	82 e3       	ldi	r24, 0x32	; 50
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     e3c:	8e ee       	ldi	r24, 0xEE	; 238
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	a3 df       	rcall	.-186    	; 0xd88 <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     e42:	00 00       	nop
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	08 95       	ret

00000e62 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	1f 92       	push	r1
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	22 e9       	ldi	r18, 0x92	; 146
     e74:	32 e0       	ldi	r19, 0x02	; 2
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	fc 01       	movw	r30, r24
     e7c:	31 83       	std	Z+1, r19	; 0x01
     e7e:	20 83       	st	Z, r18
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	d1 da       	rcall	.-2654   	; 0x428 <_ZN15Adafruit_SensorD1Ev>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	89 2b       	or	r24, r25
     e8c:	21 f0       	breq	.+8      	; 0xe96 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_ZdlPv>
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <_ZN11DHT_Unified11TemperatureD0Ev>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	1f 92       	push	r1
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	d6 df       	rcall	.-84     	; 0xe62 <_ZN11DHT_Unified11TemperatureD1Ev>
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_ZdlPv>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	1f 92       	push	r1
     ece:	1f 92       	push	r1
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	24 e8       	ldi	r18, 0x84	; 132
     eda:	32 e0       	ldi	r19, 0x02	; 2
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	fc 01       	movw	r30, r24
     ee2:	31 83       	std	Z+1, r19	; 0x01
     ee4:	20 83       	st	Z, r18
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	9e da       	rcall	.-2756   	; 0x428 <_ZN15Adafruit_SensorD1Ev>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	89 2b       	or	r24, r25
     ef2:	21 f0       	breq	.+8      	; 0xefc <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_ZdlPv>
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <_ZN11DHT_Unified8HumidityD0Ev>:
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	1f 92       	push	r1
     f0c:	1f 92       	push	r1
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	d6 df       	rcall	.-84     	; 0xec8 <_ZN11DHT_Unified8HumidityD1Ev>
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_ZdlPv>
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <_GLOBAL__sub_I_x>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	3a df       	rcall	.-396    	; 0xdb4 <_Z41__static_initialization_and_destruction_0ii>
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <_GLOBAL__sub_D_x>:
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	7f ef       	ldi	r23, 0xFF	; 255
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	2e df       	rcall	.-420    	; 0xdb4 <_Z41__static_initialization_and_destruction_0ii>
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	1f 92       	push	r1
     f64:	1f 92       	push	r1
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	f8 94       	cli
     f70:	00 00       	nop
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <_ZN13InterruptLockD1Ev>:
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	1f 92       	push	r1
     f82:	1f 92       	push	r1
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	78 94       	sei
     f8e:	00 00       	nop
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <_ZN3DHTC1Ehhh>:
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	2b 97       	sbiw	r28, 0x0b	; 11
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	98 87       	std	Y+8, r25	; 0x08
     fb0:	8f 83       	std	Y+7, r24	; 0x07
     fb2:	69 87       	std	Y+9, r22	; 0x09
     fb4:	4a 87       	std	Y+10, r20	; 0x0a
     fb6:	2b 87       	std	Y+11, r18	; 0x0b
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	98 85       	ldd	r25, Y+8	; 0x08
     fbc:	29 85       	ldd	r18, Y+9	; 0x09
     fbe:	fc 01       	movw	r30, r24
     fc0:	25 83       	std	Z+5, r18	; 0x05
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	2a 85       	ldd	r18, Y+10	; 0x0a
     fc8:	fc 01       	movw	r30, r24
     fca:	26 83       	std	Z+6, r18	; 0x06
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	82 5b       	subi	r24, 0xB2	; 178
     fd4:	9e 4f       	sbci	r25, 0xFE	; 254
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	fc 01       	movw	r30, r24
     fe0:	84 91       	lpm	r24, Z
     fe2:	8b 83       	std	Y+3, r24	; 0x03
     fe4:	8f 81       	ldd	r24, Y+7	; 0x07
     fe6:	98 85       	ldd	r25, Y+8	; 0x08
     fe8:	2b 81       	ldd	r18, Y+3	; 0x03
     fea:	fc 01       	movw	r30, r24
     fec:	27 83       	std	Z+7, r18	; 0x07
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	8c 56       	subi	r24, 0x6C	; 108
     ff6:	9e 4f       	sbci	r25, 0xFE	; 254
     ff8:	9d 83       	std	Y+5, r25	; 0x05
     ffa:	8c 83       	std	Y+4, r24	; 0x04
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	fc 01       	movw	r30, r24
    1002:	84 91       	lpm	r24, Z
    1004:	8e 83       	std	Y+6, r24	; 0x06
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	98 85       	ldd	r25, Y+8	; 0x08
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	fc 01       	movw	r30, r24
    100e:	20 87       	std	Z+8, r18	; 0x08
    1010:	2f 81       	ldd	r18, Y+7	; 0x07
    1012:	38 85       	ldd	r19, Y+8	; 0x08
    1014:	80 e8       	ldi	r24, 0x80	; 128
    1016:	9e e3       	ldi	r25, 0x3E	; 62
    1018:	a0 e0       	ldi	r26, 0x00	; 0
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	f9 01       	movw	r30, r18
    101e:	85 87       	std	Z+13, r24	; 0x0d
    1020:	96 87       	std	Z+14, r25	; 0x0e
    1022:	a7 87       	std	Z+15, r26	; 0x0f
    1024:	b0 8b       	std	Z+16, r27	; 0x10
    1026:	00 00       	nop
    1028:	2b 96       	adiw	r28, 0x0b	; 11
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <_ZN3DHT5beginEh>:
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <_ZN3DHT5beginEh+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6b 83       	std	Y+3, r22	; 0x03
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	fc 01       	movw	r30, r24
    1050:	85 81       	ldd	r24, Z+5	; 0x05
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
    1058:	0e 94 bc 2c 	call	0x5978	; 0x5978 <millis>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	80 5d       	subi	r24, 0xD0	; 208
    1062:	97 40       	sbci	r25, 0x07	; 7
    1064:	a1 09       	sbc	r26, r1
    1066:	b1 09       	sbc	r27, r1
    1068:	29 81       	ldd	r18, Y+1	; 0x01
    106a:	3a 81       	ldd	r19, Y+2	; 0x02
    106c:	f9 01       	movw	r30, r18
    106e:	81 87       	std	Z+9, r24	; 0x09
    1070:	92 87       	std	Z+10, r25	; 0x0a
    1072:	a3 87       	std	Z+11, r26	; 0x0b
    1074:	b4 87       	std	Z+12, r27	; 0x0c
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	fc 01       	movw	r30, r24
    107e:	22 8b       	std	Z+18, r18	; 0x12
    1080:	00 00       	nop
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <_ZN3DHT15readTemperatureEbb>:
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	28 97       	sbiw	r28, 0x08	; 8
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	6f 83       	std	Y+7, r22	; 0x07
    10a8:	48 87       	std	Y+8, r20	; 0x08
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 ec       	ldi	r26, 0xC0	; 192
    10b0:	bf e7       	ldi	r27, 0x7F	; 127
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	ab 83       	std	Y+3, r26	; 0x03
    10b8:	bc 83       	std	Y+4, r27	; 0x04
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	68 85       	ldd	r22, Y+8	; 0x08
    10c0:	1d d2       	rcall	.+1082   	; 0x14fc <_ZN3DHT4readEb>
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <_ZN3DHT15readTemperatureEbb+0x3a>
    10c6:	34 c1       	rjmp	.+616    	; 0x1330 <_ZN3DHT15readTemperatureEbb+0x2a2>
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	fc 01       	movw	r30, r24
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	8c 30       	cpi	r24, 0x0C	; 12
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <_ZN3DHT15readTemperatureEbb+0x4e>
    10da:	72 c0       	rjmp	.+228    	; 0x11c0 <_ZN3DHT15readTemperatureEbb+0x132>
    10dc:	8d 30       	cpi	r24, 0x0D	; 13
    10de:	91 05       	cpc	r25, r1
    10e0:	1c f4       	brge	.+6      	; 0x10e8 <_ZN3DHT15readTemperatureEbb+0x5a>
    10e2:	0b 97       	sbiw	r24, 0x0b	; 11
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <_ZN3DHT15readTemperatureEbb+0x64>
    10e6:	24 c1       	rjmp	.+584    	; 0x1330 <_ZN3DHT15readTemperatureEbb+0x2a2>
    10e8:	45 97       	sbiw	r24, 0x15	; 21
    10ea:	02 97       	sbiw	r24, 0x02	; 2
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <_ZN3DHT15readTemperatureEbb+0x62>
    10ee:	20 c1       	rjmp	.+576    	; 0x1330 <_ZN3DHT15readTemperatureEbb+0x2a2>
    10f0:	c7 c0       	rjmp	.+398    	; 0x1280 <_ZN3DHT15readTemperatureEbb+0x1f2>
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	fc 01       	movw	r30, r24
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 ae 28 	call	0x515c	; 0x515c <__floatunsisf>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	ab 83       	std	Y+3, r26	; 0x03
    1114:	bc 83       	std	Y+4, r27	; 0x04
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	fc 01       	movw	r30, r24
    111c:	83 81       	ldd	r24, Z+3	; 0x03
    111e:	88 23       	and	r24, r24
    1120:	84 f4       	brge	.+32     	; 0x1142 <_ZN3DHT15readTemperatureEbb+0xb4>
    1122:	29 81       	ldd	r18, Y+1	; 0x01
    1124:	3a 81       	ldd	r19, Y+2	; 0x02
    1126:	4b 81       	ldd	r20, Y+3	; 0x03
    1128:	5c 81       	ldd	r21, Y+4	; 0x04
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	80 e8       	ldi	r24, 0x80	; 128
    1130:	9f eb       	ldi	r25, 0xBF	; 191
    1132:	0e 94 18 28 	call	0x5030	; 0x5030 <__subsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	ab 83       	std	Y+3, r26	; 0x03
    1140:	bc 83       	std	Y+4, r27	; 0x04
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	fc 01       	movw	r30, r24
    1148:	83 81       	ldd	r24, Z+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	8f 70       	andi	r24, 0x0F	; 15
    1150:	99 27       	eor	r25, r25
    1152:	09 2e       	mov	r0, r25
    1154:	00 0c       	add	r0, r0
    1156:	aa 0b       	sbc	r26, r26
    1158:	bb 0b       	sbc	r27, r27
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	0e 94 b0 28 	call	0x5160	; 0x5160 <__floatsisf>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	2d ec       	ldi	r18, 0xCD	; 205
    1168:	3c ec       	ldi	r19, 0xCC	; 204
    116a:	4c ec       	ldi	r20, 0xCC	; 204
    116c:	5d e3       	ldi	r21, 0x3D	; 61
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9c 01       	movw	r18, r24
    117c:	ad 01       	movw	r20, r26
    117e:	69 81       	ldd	r22, Y+1	; 0x01
    1180:	7a 81       	ldd	r23, Y+2	; 0x02
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	0e 94 19 28 	call	0x5032	; 0x5032 <__addsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	ab 83       	std	Y+3, r26	; 0x03
    1194:	bc 83       	std	Y+4, r27	; 0x04
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	88 23       	and	r24, r24
    119a:	09 f4       	brne	.+2      	; 0x119e <_ZN3DHT15readTemperatureEbb+0x110>
    119c:	c4 c0       	rjmp	.+392    	; 0x1326 <_ZN3DHT15readTemperatureEbb+0x298>
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	ab 81       	ldd	r26, Y+3	; 0x03
    11a4:	bc 81       	ldd	r27, Y+4	; 0x04
    11a6:	2d 81       	ldd	r18, Y+5	; 0x05
    11a8:	3e 81       	ldd	r19, Y+6	; 0x06
    11aa:	ac 01       	movw	r20, r24
    11ac:	bd 01       	movw	r22, r26
    11ae:	c9 01       	movw	r24, r18
    11b0:	ce d0       	rcall	.+412    	; 0x134e <_ZN3DHT11convertCtoFEf>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	ab 83       	std	Y+3, r26	; 0x03
    11bc:	bc 83       	std	Y+4, r27	; 0x04
    11be:	b3 c0       	rjmp	.+358    	; 0x1326 <_ZN3DHT15readTemperatureEbb+0x298>
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	fc 01       	movw	r30, r24
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 ae 28 	call	0x515c	; 0x515c <__floatunsisf>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	ab 83       	std	Y+3, r26	; 0x03
    11e2:	bc 83       	std	Y+4, r27	; 0x04
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	fc 01       	movw	r30, r24
    11ea:	83 81       	ldd	r24, Z+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	8f 70       	andi	r24, 0x0F	; 15
    11f2:	99 27       	eor	r25, r25
    11f4:	09 2e       	mov	r0, r25
    11f6:	00 0c       	add	r0, r0
    11f8:	aa 0b       	sbc	r26, r26
    11fa:	bb 0b       	sbc	r27, r27
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 b0 28 	call	0x5160	; 0x5160 <__floatsisf>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	2d ec       	ldi	r18, 0xCD	; 205
    120a:	3c ec       	ldi	r19, 0xCC	; 204
    120c:	4c ec       	ldi	r20, 0xCC	; 204
    120e:	5d e3       	ldi	r21, 0x3D	; 61
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9c 01       	movw	r18, r24
    121e:	ad 01       	movw	r20, r26
    1220:	69 81       	ldd	r22, Y+1	; 0x01
    1222:	7a 81       	ldd	r23, Y+2	; 0x02
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	0e 94 19 28 	call	0x5032	; 0x5032 <__addsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	ab 83       	std	Y+3, r26	; 0x03
    1236:	bc 83       	std	Y+4, r27	; 0x04
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	fc 01       	movw	r30, r24
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	88 23       	and	r24, r24
    1242:	4c f4       	brge	.+18     	; 0x1256 <_ZN3DHT15readTemperatureEbb+0x1c8>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	ab 81       	ldd	r26, Y+3	; 0x03
    124a:	bc 81       	ldd	r27, Y+4	; 0x04
    124c:	b0 58       	subi	r27, 0x80	; 128
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	ab 83       	std	Y+3, r26	; 0x03
    1254:	bc 83       	std	Y+4, r27	; 0x04
    1256:	8f 81       	ldd	r24, Y+7	; 0x07
    1258:	88 23       	and	r24, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <_ZN3DHT15readTemperatureEbb+0x1d0>
    125c:	66 c0       	rjmp	.+204    	; 0x132a <_ZN3DHT15readTemperatureEbb+0x29c>
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	ab 81       	ldd	r26, Y+3	; 0x03
    1264:	bc 81       	ldd	r27, Y+4	; 0x04
    1266:	2d 81       	ldd	r18, Y+5	; 0x05
    1268:	3e 81       	ldd	r19, Y+6	; 0x06
    126a:	ac 01       	movw	r20, r24
    126c:	bd 01       	movw	r22, r26
    126e:	c9 01       	movw	r24, r18
    1270:	6e d0       	rcall	.+220    	; 0x134e <_ZN3DHT11convertCtoFEf>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	ab 83       	std	Y+3, r26	; 0x03
    127c:	bc 83       	std	Y+4, r27	; 0x04
    127e:	55 c0       	rjmp	.+170    	; 0x132a <_ZN3DHT15readTemperatureEbb+0x29c>
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	fc 01       	movw	r30, r24
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	8f 77       	andi	r24, 0x7F	; 127
    128e:	99 27       	eor	r25, r25
    1290:	38 2f       	mov	r19, r24
    1292:	22 27       	eor	r18, r18
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	fc 01       	movw	r30, r24
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	82 2b       	or	r24, r18
    12a2:	93 2b       	or	r25, r19
    12a4:	cc 01       	movw	r24, r24
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 ae 28 	call	0x515c	; 0x515c <__floatunsisf>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	ab 83       	std	Y+3, r26	; 0x03
    12bc:	bc 83       	std	Y+4, r27	; 0x04
    12be:	2d ec       	ldi	r18, 0xCD	; 205
    12c0:	3c ec       	ldi	r19, 0xCC	; 204
    12c2:	4c ec       	ldi	r20, 0xCC	; 204
    12c4:	5d e3       	ldi	r21, 0x3D	; 61
    12c6:	69 81       	ldd	r22, Y+1	; 0x01
    12c8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	ab 83       	std	Y+3, r26	; 0x03
    12dc:	bc 83       	std	Y+4, r27	; 0x04
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	fc 01       	movw	r30, r24
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	88 23       	and	r24, r24
    12e8:	4c f4       	brge	.+18     	; 0x12fc <_ZN3DHT15readTemperatureEbb+0x26e>
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	ab 81       	ldd	r26, Y+3	; 0x03
    12f0:	bc 81       	ldd	r27, Y+4	; 0x04
    12f2:	b0 58       	subi	r27, 0x80	; 128
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	ab 83       	std	Y+3, r26	; 0x03
    12fa:	bc 83       	std	Y+4, r27	; 0x04
    12fc:	8f 81       	ldd	r24, Y+7	; 0x07
    12fe:	88 23       	and	r24, r24
    1300:	b1 f0       	breq	.+44     	; 0x132e <_ZN3DHT15readTemperatureEbb+0x2a0>
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	ab 81       	ldd	r26, Y+3	; 0x03
    1308:	bc 81       	ldd	r27, Y+4	; 0x04
    130a:	2d 81       	ldd	r18, Y+5	; 0x05
    130c:	3e 81       	ldd	r19, Y+6	; 0x06
    130e:	ac 01       	movw	r20, r24
    1310:	bd 01       	movw	r22, r26
    1312:	c9 01       	movw	r24, r18
    1314:	1c d0       	rcall	.+56     	; 0x134e <_ZN3DHT11convertCtoFEf>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	ab 83       	std	Y+3, r26	; 0x03
    1320:	bc 83       	std	Y+4, r27	; 0x04
    1322:	00 00       	nop
    1324:	04 c0       	rjmp	.+8      	; 0x132e <_ZN3DHT15readTemperatureEbb+0x2a0>
    1326:	00 00       	nop
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <_ZN3DHT15readTemperatureEbb+0x2a2>
    132a:	00 00       	nop
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <_ZN3DHT15readTemperatureEbb+0x2a2>
    132e:	00 00       	nop
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	ab 81       	ldd	r26, Y+3	; 0x03
    1336:	bc 81       	ldd	r27, Y+4	; 0x04
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	28 96       	adiw	r28, 0x08	; 8
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <_ZN3DHT11convertCtoFEf>:
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <_ZN3DHT11convertCtoFEf+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <_ZN3DHT11convertCtoFEf+0x8>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	4b 83       	std	Y+3, r20	; 0x03
    1360:	5c 83       	std	Y+4, r21	; 0x04
    1362:	6d 83       	std	Y+5, r22	; 0x05
    1364:	7e 83       	std	Y+6, r23	; 0x06
    1366:	26 e6       	ldi	r18, 0x66	; 102
    1368:	36 e6       	ldi	r19, 0x66	; 102
    136a:	46 ee       	ldi	r20, 0xE6	; 230
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	6b 81       	ldd	r22, Y+3	; 0x03
    1370:	7c 81       	ldd	r23, Y+4	; 0x04
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	52 e4       	ldi	r21, 0x42	; 66
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 19 28 	call	0x5032	; 0x5032 <__addsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	26 96       	adiw	r28, 0x06	; 6
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <_ZN3DHT12readHumidityEb>:
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	27 97       	sbiw	r28, 0x07	; 7
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	6f 83       	std	Y+7, r22	; 0x07
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a0 ec       	ldi	r26, 0xC0	; 192
    13d0:	bf e7       	ldi	r27, 0x7F	; 127
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	ab 83       	std	Y+3, r26	; 0x03
    13d8:	bc 83       	std	Y+4, r27	; 0x04
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	6f 81       	ldd	r22, Y+7	; 0x07
    13e0:	8d d0       	rcall	.+282    	; 0x14fc <_ZN3DHT4readEb>
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <_ZN3DHT12readHumidityEb+0x40>
    13e6:	77 c0       	rjmp	.+238    	; 0x14d6 <_ZN3DHT12readHumidityEb+0x12e>
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	fc 01       	movw	r30, r24
    13ee:	86 81       	ldd	r24, Z+6	; 0x06
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	8b 30       	cpi	r24, 0x0B	; 11
    13f6:	91 05       	cpc	r25, r1
    13f8:	0c f4       	brge	.+2      	; 0x13fc <_ZN3DHT12readHumidityEb+0x54>
    13fa:	6d c0       	rjmp	.+218    	; 0x14d6 <_ZN3DHT12readHumidityEb+0x12e>
    13fc:	8d 30       	cpi	r24, 0x0D	; 13
    13fe:	91 05       	cpc	r25, r1
    1400:	2c f0       	brlt	.+10     	; 0x140c <_ZN3DHT12readHumidityEb+0x64>
    1402:	45 97       	sbiw	r24, 0x15	; 21
    1404:	02 97       	sbiw	r24, 0x02	; 2
    1406:	08 f0       	brcs	.+2      	; 0x140a <_ZN3DHT12readHumidityEb+0x62>
    1408:	66 c0       	rjmp	.+204    	; 0x14d6 <_ZN3DHT12readHumidityEb+0x12e>
    140a:	37 c0       	rjmp	.+110    	; 0x147a <_ZN3DHT12readHumidityEb+0xd2>
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	fc 01       	movw	r30, r24
    1412:	80 81       	ld	r24, Z
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	09 2e       	mov	r0, r25
    141a:	00 0c       	add	r0, r0
    141c:	aa 0b       	sbc	r26, r26
    141e:	bb 0b       	sbc	r27, r27
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 b0 28 	call	0x5160	; 0x5160 <__floatsisf>
    1428:	6b 01       	movw	r12, r22
    142a:	7c 01       	movw	r14, r24
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	fc 01       	movw	r30, r24
    1432:	81 81       	ldd	r24, Z+1	; 0x01
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	09 2e       	mov	r0, r25
    143a:	00 0c       	add	r0, r0
    143c:	aa 0b       	sbc	r26, r26
    143e:	bb 0b       	sbc	r27, r27
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 b0 28 	call	0x5160	; 0x5160 <__floatsisf>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	2d ec       	ldi	r18, 0xCD	; 205
    144e:	3c ec       	ldi	r19, 0xCC	; 204
    1450:	4c ec       	ldi	r20, 0xCC	; 204
    1452:	5d e3       	ldi	r21, 0x3D	; 61
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 01       	movw	r18, r24
    1462:	ad 01       	movw	r20, r26
    1464:	c7 01       	movw	r24, r14
    1466:	b6 01       	movw	r22, r12
    1468:	0e 94 19 28 	call	0x5032	; 0x5032 <__addsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	ab 83       	std	Y+3, r26	; 0x03
    1476:	bc 83       	std	Y+4, r27	; 0x04
    1478:	2e c0       	rjmp	.+92     	; 0x14d6 <_ZN3DHT12readHumidityEb+0x12e>
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	38 2f       	mov	r19, r24
    1488:	22 27       	eor	r18, r18
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	fc 01       	movw	r30, r24
    1490:	81 81       	ldd	r24, Z+1	; 0x01
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	82 2b       	or	r24, r18
    1498:	93 2b       	or	r25, r19
    149a:	cc 01       	movw	r24, r24
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 ae 28 	call	0x515c	; 0x515c <__floatunsisf>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	ab 83       	std	Y+3, r26	; 0x03
    14b2:	bc 83       	std	Y+4, r27	; 0x04
    14b4:	2d ec       	ldi	r18, 0xCD	; 205
    14b6:	3c ec       	ldi	r19, 0xCC	; 204
    14b8:	4c ec       	ldi	r20, 0xCC	; 204
    14ba:	5d e3       	ldi	r21, 0x3D	; 61
    14bc:	69 81       	ldd	r22, Y+1	; 0x01
    14be:	7a 81       	ldd	r23, Y+2	; 0x02
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	ab 83       	std	Y+3, r26	; 0x03
    14d2:	bc 83       	std	Y+4, r27	; 0x04
    14d4:	00 00       	nop
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	ab 81       	ldd	r26, Y+3	; 0x03
    14dc:	bc 81       	ldd	r27, Y+4	; 0x04
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	27 96       	adiw	r28, 0x07	; 7
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	cf 90       	pop	r12
    14fa:	08 95       	ret

000014fc <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	c4 55       	subi	r28, 0x54	; 84
    1514:	d1 40       	sbci	r29, 0x01	; 1
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	9e 01       	movw	r18, r28
    1522:	2e 5a       	subi	r18, 0xAE	; 174
    1524:	3e 4f       	sbci	r19, 0xFE	; 254
    1526:	f9 01       	movw	r30, r18
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	ce 01       	movw	r24, r28
    152e:	8c 5a       	subi	r24, 0xAC	; 172
    1530:	9e 4f       	sbci	r25, 0xFE	; 254
    1532:	fc 01       	movw	r30, r24
    1534:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1536:	0e 94 bc 2c 	call	0x5978	; 0x5978 <millis>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	af 83       	std	Y+7, r26	; 0x07
    1544:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1546:	ce 01       	movw	r24, r28
    1548:	8c 5a       	subi	r24, 0xAC	; 172
    154a:	9e 4f       	sbci	r25, 0xFE	; 254
    154c:	fc 01       	movw	r30, r24
    154e:	90 81       	ld	r25, Z
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	89 27       	eor	r24, r25
    1554:	88 23       	and	r24, r24
    1556:	29 f1       	breq	.+74     	; 0x15a2 <_ZN3DHT4readEb+0xa6>
    1558:	ce 01       	movw	r24, r28
    155a:	8e 5a       	subi	r24, 0xAE	; 174
    155c:	9e 4f       	sbci	r25, 0xFE	; 254
    155e:	fc 01       	movw	r30, r24
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	fc 01       	movw	r30, r24
    1566:	81 85       	ldd	r24, Z+9	; 0x09
    1568:	92 85       	ldd	r25, Z+10	; 0x0a
    156a:	a3 85       	ldd	r26, Z+11	; 0x0b
    156c:	b4 85       	ldd	r27, Z+12	; 0x0c
    156e:	2d 81       	ldd	r18, Y+5	; 0x05
    1570:	3e 81       	ldd	r19, Y+6	; 0x06
    1572:	4f 81       	ldd	r20, Y+7	; 0x07
    1574:	58 85       	ldd	r21, Y+8	; 0x08
    1576:	59 01       	movw	r10, r18
    1578:	6a 01       	movw	r12, r20
    157a:	a8 1a       	sub	r10, r24
    157c:	b9 0a       	sbc	r11, r25
    157e:	ca 0a       	sbc	r12, r26
    1580:	db 0a       	sbc	r13, r27
    1582:	d6 01       	movw	r26, r12
    1584:	c5 01       	movw	r24, r10
    1586:	80 3d       	cpi	r24, 0xD0	; 208
    1588:	97 40       	sbci	r25, 0x07	; 7
    158a:	a1 05       	cpc	r26, r1
    158c:	b1 05       	cpc	r27, r1
    158e:	48 f4       	brcc	.+18     	; 0x15a2 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    1590:	ce 01       	movw	r24, r28
    1592:	8e 5a       	subi	r24, 0xAE	; 174
    1594:	9e 4f       	sbci	r25, 0xFE	; 254
    1596:	fc 01       	movw	r30, r24
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	fc 01       	movw	r30, r24
    159e:	f1 88       	ldd	r15, Z+17	; 0x11
    15a0:	5f c2       	rjmp	.+1214   	; 0x1a60 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    15a2:	ce 01       	movw	r24, r28
    15a4:	8e 5a       	subi	r24, 0xAE	; 174
    15a6:	9e 4f       	sbci	r25, 0xFE	; 254
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	af 81       	ldd	r26, Y+7	; 0x07
    15b4:	b8 85       	ldd	r27, Y+8	; 0x08
    15b6:	f9 01       	movw	r30, r18
    15b8:	81 87       	std	Z+9, r24	; 0x09
    15ba:	92 87       	std	Z+10, r25	; 0x0a
    15bc:	a3 87       	std	Z+11, r26	; 0x0b
    15be:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    15c0:	ce 01       	movw	r24, r28
    15c2:	8e 5a       	subi	r24, 0xAE	; 174
    15c4:	9e 4f       	sbci	r25, 0xFE	; 254
    15c6:	fc 01       	movw	r30, r24
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	fc 01       	movw	r30, r24
    15ce:	14 82       	std	Z+4, r1	; 0x04
    15d0:	ce 01       	movw	r24, r28
    15d2:	8e 5a       	subi	r24, 0xAE	; 174
    15d4:	9e 4f       	sbci	r25, 0xFE	; 254
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	fc 01       	movw	r30, r24
    15de:	24 81       	ldd	r18, Z+4	; 0x04
    15e0:	ce 01       	movw	r24, r28
    15e2:	8e 5a       	subi	r24, 0xAE	; 174
    15e4:	9e 4f       	sbci	r25, 0xFE	; 254
    15e6:	fc 01       	movw	r30, r24
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	fc 01       	movw	r30, r24
    15ee:	23 83       	std	Z+3, r18	; 0x03
    15f0:	ce 01       	movw	r24, r28
    15f2:	8e 5a       	subi	r24, 0xAE	; 174
    15f4:	9e 4f       	sbci	r25, 0xFE	; 254
    15f6:	fc 01       	movw	r30, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	fc 01       	movw	r30, r24
    15fe:	23 81       	ldd	r18, Z+3	; 0x03
    1600:	ce 01       	movw	r24, r28
    1602:	8e 5a       	subi	r24, 0xAE	; 174
    1604:	9e 4f       	sbci	r25, 0xFE	; 254
    1606:	fc 01       	movw	r30, r24
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	fc 01       	movw	r30, r24
    160e:	22 83       	std	Z+2, r18	; 0x02
    1610:	ce 01       	movw	r24, r28
    1612:	8e 5a       	subi	r24, 0xAE	; 174
    1614:	9e 4f       	sbci	r25, 0xFE	; 254
    1616:	fc 01       	movw	r30, r24
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	fc 01       	movw	r30, r24
    161e:	22 81       	ldd	r18, Z+2	; 0x02
    1620:	ce 01       	movw	r24, r28
    1622:	8e 5a       	subi	r24, 0xAE	; 174
    1624:	9e 4f       	sbci	r25, 0xFE	; 254
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	fc 01       	movw	r30, r24
    162e:	21 83       	std	Z+1, r18	; 0x01
    1630:	ce 01       	movw	r24, r28
    1632:	8e 5a       	subi	r24, 0xAE	; 174
    1634:	9e 4f       	sbci	r25, 0xFE	; 254
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	fc 01       	movw	r30, r24
    163e:	21 81       	ldd	r18, Z+1	; 0x01
    1640:	ce 01       	movw	r24, r28
    1642:	8e 5a       	subi	r24, 0xAE	; 174
    1644:	9e 4f       	sbci	r25, 0xFE	; 254
    1646:	fc 01       	movw	r30, r24
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	fc 01       	movw	r30, r24
    164e:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1650:	ce 01       	movw	r24, r28
    1652:	8e 5a       	subi	r24, 0xAE	; 174
    1654:	9e 4f       	sbci	r25, 0xFE	; 254
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	fc 01       	movw	r30, r24
    165e:	85 81       	ldd	r24, Z+5	; 0x05
    1660:	62 e0       	ldi	r22, 0x02	; 2
    1662:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
  delay(1);
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    1672:	ce 01       	movw	r24, r28
    1674:	8e 5a       	subi	r24, 0xAE	; 174
    1676:	9e 4f       	sbci	r25, 0xFE	; 254
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	fc 01       	movw	r30, r24
    1680:	85 81       	ldd	r24, Z+5	; 0x05
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
  digitalWrite(_pin, LOW);
    1688:	ce 01       	movw	r24, r28
    168a:	8e 5a       	subi	r24, 0xAE	; 174
    168c:	9e 4f       	sbci	r25, 0xFE	; 254
    168e:	fc 01       	movw	r30, r24
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	fc 01       	movw	r30, r24
    1696:	85 81       	ldd	r24, Z+5	; 0x05
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
  switch (_type) {
    169e:	ce 01       	movw	r24, r28
    16a0:	8e 5a       	subi	r24, 0xAE	; 174
    16a2:	9e 4f       	sbci	r25, 0xFE	; 254
    16a4:	fc 01       	movw	r30, r24
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	fc 01       	movw	r30, r24
    16ac:	86 81       	ldd	r24, Z+6	; 0x06
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	45 97       	sbiw	r24, 0x15	; 21
    16b4:	02 97       	sbiw	r24, 0x02	; 2
    16b6:	28 f4       	brcc	.+10     	; 0x16c2 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    16b8:	8c e4       	ldi	r24, 0x4C	; 76
    16ba:	94 e0       	ldi	r25, 0x04	; 4
    16bc:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <delayMicroseconds>
    break;
    16c0:	07 c0       	rjmp	.+14     	; 0x16d0 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    16c2:	64 e1       	ldi	r22, 0x14	; 20
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
    break;
    16ce:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    16d0:	ce 01       	movw	r24, r28
    16d2:	8e 5a       	subi	r24, 0xAE	; 174
    16d4:	9e 4f       	sbci	r25, 0xFE	; 254
    16d6:	fc 01       	movw	r30, r24
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	fc 01       	movw	r30, r24
    16de:	85 81       	ldd	r24, Z+5	; 0x05
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    16e6:	ce 01       	movw	r24, r28
    16e8:	8e 5a       	subi	r24, 0xAE	; 174
    16ea:	9e 4f       	sbci	r25, 0xFE	; 254
    16ec:	fc 01       	movw	r30, r24
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	fc 01       	movw	r30, r24
    16f4:	82 89       	ldd	r24, Z+18	; 0x12
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    16fe:	ce 01       	movw	r24, r28
    1700:	8f 5a       	subi	r24, 0xAF	; 175
    1702:	9e 4f       	sbci	r25, 0xFE	; 254
    1704:	2c dc       	rcall	.-1960   	; 0xf5e <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1706:	ce 01       	movw	r24, r28
    1708:	8e 5a       	subi	r24, 0xAE	; 174
    170a:	9e 4f       	sbci	r25, 0xFE	; 254
    170c:	fc 01       	movw	r30, r24
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	b7 d1       	rcall	.+878    	; 0x1a84 <_ZN3DHT11expectPulseEb>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	8f 3f       	cpi	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	af 4f       	sbci	r26, 0xFF	; 255
    1722:	bf 4f       	sbci	r27, 0xFF	; 255
    1724:	09 f0       	breq	.+2      	; 0x1728 <_ZN3DHT4readEb+0x22c>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	22 23       	and	r18, r18
    172a:	99 f0       	breq	.+38     	; 0x1752 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    172c:	ce 01       	movw	r24, r28
    172e:	8e 5a       	subi	r24, 0xAE	; 174
    1730:	9e 4f       	sbci	r25, 0xFE	; 254
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	fc 01       	movw	r30, r24
    173a:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    173c:	ce 01       	movw	r24, r28
    173e:	8e 5a       	subi	r24, 0xAE	; 174
    1740:	9e 4f       	sbci	r25, 0xFE	; 254
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	fc 01       	movw	r30, r24
    174a:	f1 88       	ldd	r15, Z+17	; 0x11
    174c:	00 e0       	ldi	r16, 0x00	; 0
    174e:	10 e0       	ldi	r17, 0x00	; 0
    1750:	72 c0       	rjmp	.+228    	; 0x1836 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1752:	ce 01       	movw	r24, r28
    1754:	8e 5a       	subi	r24, 0xAE	; 174
    1756:	9e 4f       	sbci	r25, 0xFE	; 254
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	91 d1       	rcall	.+802    	; 0x1a84 <_ZN3DHT11expectPulseEb>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	8f 3f       	cpi	r24, 0xFF	; 255
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	af 4f       	sbci	r26, 0xFF	; 255
    176e:	bf 4f       	sbci	r27, 0xFF	; 255
    1770:	09 f0       	breq	.+2      	; 0x1774 <_ZN3DHT4readEb+0x278>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	22 23       	and	r18, r18
    1776:	99 f0       	breq	.+38     	; 0x179e <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    1778:	ce 01       	movw	r24, r28
    177a:	8e 5a       	subi	r24, 0xAE	; 174
    177c:	9e 4f       	sbci	r25, 0xFE	; 254
    177e:	fc 01       	movw	r30, r24
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	fc 01       	movw	r30, r24
    1786:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1788:	ce 01       	movw	r24, r28
    178a:	8e 5a       	subi	r24, 0xAE	; 174
    178c:	9e 4f       	sbci	r25, 0xFE	; 254
    178e:	fc 01       	movw	r30, r24
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	fc 01       	movw	r30, r24
    1796:	f1 88       	ldd	r15, Z+17	; 0x11
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	4c c0       	rjmp	.+152    	; 0x1836 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    179e:	1a 82       	std	Y+2, r1	; 0x02
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	80 35       	cpi	r24, 0x50	; 80
    17a8:	91 05       	cpc	r25, r1
    17aa:	0c f0       	brlt	.+2      	; 0x17ae <_ZN3DHT4readEb+0x2b2>
    17ac:	42 c0       	rjmp	.+132    	; 0x1832 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    17ae:	ce 01       	movw	r24, r28
    17b0:	8e 5a       	subi	r24, 0xAE	; 174
    17b2:	9e 4f       	sbci	r25, 0xFE	; 254
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	63 d1       	rcall	.+710    	; 0x1a84 <_ZN3DHT11expectPulseEb>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	29 81       	ldd	r18, Y+1	; 0x01
    17c4:	3a 81       	ldd	r19, Y+2	; 0x02
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	ae 01       	movw	r20, r28
    17d0:	4f 5f       	subi	r20, 0xFF	; 255
    17d2:	5f 4f       	sbci	r21, 0xFF	; 255
    17d4:	24 0f       	add	r18, r20
    17d6:	35 1f       	adc	r19, r21
    17d8:	20 5f       	subi	r18, 0xF0	; 240
    17da:	3f 4f       	sbci	r19, 0xFF	; 255
    17dc:	f9 01       	movw	r30, r18
    17de:	80 83       	st	Z, r24
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	a2 83       	std	Z+2, r26	; 0x02
    17e4:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	8c 01       	movw	r16, r24
    17ec:	0f 5f       	subi	r16, 0xFF	; 255
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	ce 01       	movw	r24, r28
    17f2:	8e 5a       	subi	r24, 0xAE	; 174
    17f4:	9e 4f       	sbci	r25, 0xFE	; 254
    17f6:	fc 01       	movw	r30, r24
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	42 d1       	rcall	.+644    	; 0x1a84 <_ZN3DHT11expectPulseEb>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	98 01       	movw	r18, r16
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	ae 01       	movw	r20, r28
    1810:	4f 5f       	subi	r20, 0xFF	; 255
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
    1814:	24 0f       	add	r18, r20
    1816:	35 1f       	adc	r19, r21
    1818:	20 5f       	subi	r18, 0xF0	; 240
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	f9 01       	movw	r30, r18
    181e:	80 83       	st	Z, r24
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	a2 83       	std	Z+2, r26	; 0x02
    1824:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	02 96       	adiw	r24, 0x02	; 2
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	b8 cf       	rjmp	.-144    	; 0x17a2 <_ZN3DHT4readEb+0x2a6>
    1832:	01 e0       	ldi	r16, 0x01	; 1
    1834:	10 e0       	ldi	r17, 0x00	; 0
    1836:	ce 01       	movw	r24, r28
    1838:	8f 5a       	subi	r24, 0xAF	; 175
    183a:	9e 4f       	sbci	r25, 0xFE	; 254
    183c:	9f db       	rcall	.-2242   	; 0xf7c <_ZN13InterruptLockD1Ev>
    183e:	01 30       	cpi	r16, 0x01	; 1
    1840:	11 05       	cpc	r17, r1
    1842:	09 f0       	breq	.+2      	; 0x1846 <_ZN3DHT4readEb+0x34a>
    1844:	0d c1       	rjmp	.+538    	; 0x1a60 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1846:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1848:	1c 82       	std	Y+4, r1	; 0x04
    184a:	1b 82       	std	Y+3, r1	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	88 97       	sbiw	r24, 0x28	; 40
    1852:	0c f0       	brlt	.+2      	; 0x1856 <_ZN3DHT4readEb+0x35a>
    1854:	a7 c0       	rjmp	.+334    	; 0x19a4 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	9e 01       	movw	r18, r28
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	40 96       	adiw	r24, 0x10	; 16
    1872:	fc 01       	movw	r30, r24
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	a2 81       	ldd	r26, Z+2	; 0x02
    187a:	b3 81       	ldd	r27, Z+3	; 0x03
    187c:	89 87       	std	Y+9, r24	; 0x09
    187e:	9a 87       	std	Y+10, r25	; 0x0a
    1880:	ab 87       	std	Y+11, r26	; 0x0b
    1882:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	9e 01       	movw	r18, r28
    1898:	2f 5f       	subi	r18, 0xFF	; 255
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	40 96       	adiw	r24, 0x10	; 16
    18a2:	fc 01       	movw	r30, r24
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	a2 81       	ldd	r26, Z+2	; 0x02
    18aa:	b3 81       	ldd	r27, Z+3	; 0x03
    18ac:	8d 87       	std	Y+13, r24	; 0x0d
    18ae:	9e 87       	std	Y+14, r25	; 0x0e
    18b0:	af 87       	std	Y+15, r26	; 0x0f
    18b2:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    18ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	af 4f       	sbci	r26, 0xFF	; 255
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	49 f0       	breq	.+18     	; 0x18d8 <_ZN3DHT4readEb+0x3dc>
    18c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ca:	af 85       	ldd	r26, Y+15	; 0x0f
    18cc:	b8 89       	ldd	r27, Y+16	; 0x10
    18ce:	8f 3f       	cpi	r24, 0xFF	; 255
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	af 4f       	sbci	r26, 0xFF	; 255
    18d4:	bf 4f       	sbci	r27, 0xFF	; 255
    18d6:	89 f4       	brne	.+34     	; 0x18fa <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    18d8:	ce 01       	movw	r24, r28
    18da:	8e 5a       	subi	r24, 0xAE	; 174
    18dc:	9e 4f       	sbci	r25, 0xFE	; 254
    18de:	fc 01       	movw	r30, r24
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	fc 01       	movw	r30, r24
    18e6:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    18e8:	ce 01       	movw	r24, r28
    18ea:	8e 5a       	subi	r24, 0xAE	; 174
    18ec:	9e 4f       	sbci	r25, 0xFE	; 254
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	fc 01       	movw	r30, r24
    18f6:	f1 88       	ldd	r15, Z+17	; 0x11
    18f8:	b3 c0       	rjmp	.+358    	; 0x1a60 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	99 23       	and	r25, r25
    1900:	0c f4       	brge	.+2      	; 0x1904 <_ZN3DHT4readEb+0x408>
    1902:	07 96       	adiw	r24, 0x07	; 7
    1904:	95 95       	asr	r25
    1906:	87 95       	ror	r24
    1908:	95 95       	asr	r25
    190a:	87 95       	ror	r24
    190c:	95 95       	asr	r25
    190e:	87 95       	ror	r24
    1910:	9e 01       	movw	r18, r28
    1912:	2e 5a       	subi	r18, 0xAE	; 174
    1914:	3e 4f       	sbci	r19, 0xFE	; 254
    1916:	f9 01       	movw	r30, r18
    1918:	20 81       	ld	r18, Z
    191a:	31 81       	ldd	r19, Z+1	; 0x01
    191c:	28 0f       	add	r18, r24
    191e:	39 1f       	adc	r19, r25
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	42 2f       	mov	r20, r18
    1926:	44 0f       	add	r20, r20
    1928:	9e 01       	movw	r18, r28
    192a:	2e 5a       	subi	r18, 0xAE	; 174
    192c:	3e 4f       	sbci	r19, 0xFE	; 254
    192e:	f9 01       	movw	r30, r18
    1930:	20 81       	ld	r18, Z
    1932:	31 81       	ldd	r19, Z+1	; 0x01
    1934:	82 0f       	add	r24, r18
    1936:	93 1f       	adc	r25, r19
    1938:	fc 01       	movw	r30, r24
    193a:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    193c:	2d 85       	ldd	r18, Y+13	; 0x0d
    193e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1940:	4f 85       	ldd	r20, Y+15	; 0x0f
    1942:	58 89       	ldd	r21, Y+16	; 0x10
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	ab 85       	ldd	r26, Y+11	; 0x0b
    194a:	bc 85       	ldd	r27, Y+12	; 0x0c
    194c:	82 17       	cp	r24, r18
    194e:	93 07       	cpc	r25, r19
    1950:	a4 07       	cpc	r26, r20
    1952:	b5 07       	cpc	r27, r21
    1954:	08 f5       	brcc	.+66     	; 0x1998 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	99 23       	and	r25, r25
    195c:	0c f4       	brge	.+2      	; 0x1960 <_ZN3DHT4readEb+0x464>
    195e:	07 96       	adiw	r24, 0x07	; 7
    1960:	95 95       	asr	r25
    1962:	87 95       	ror	r24
    1964:	95 95       	asr	r25
    1966:	87 95       	ror	r24
    1968:	95 95       	asr	r25
    196a:	87 95       	ror	r24
    196c:	9e 01       	movw	r18, r28
    196e:	2e 5a       	subi	r18, 0xAE	; 174
    1970:	3e 4f       	sbci	r19, 0xFE	; 254
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	31 81       	ldd	r19, Z+1	; 0x01
    1978:	28 0f       	add	r18, r24
    197a:	39 1f       	adc	r19, r25
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	42 2f       	mov	r20, r18
    1982:	41 60       	ori	r20, 0x01	; 1
    1984:	9e 01       	movw	r18, r28
    1986:	2e 5a       	subi	r18, 0xAE	; 174
    1988:	3e 4f       	sbci	r19, 0xFE	; 254
    198a:	f9 01       	movw	r30, r18
    198c:	20 81       	ld	r18, Z
    198e:	31 81       	ldd	r19, Z+1	; 0x01
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	fc 01       	movw	r30, r24
    1996:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    19a2:	54 cf       	rjmp	.-344    	; 0x184c <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    19a4:	ce 01       	movw	r24, r28
    19a6:	8e 5a       	subi	r24, 0xAE	; 174
    19a8:	9e 4f       	sbci	r25, 0xFE	; 254
    19aa:	fc 01       	movw	r30, r24
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	fc 01       	movw	r30, r24
    19b2:	84 81       	ldd	r24, Z+4	; 0x04
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	ce 01       	movw	r24, r28
    19ba:	8e 5a       	subi	r24, 0xAE	; 174
    19bc:	9e 4f       	sbci	r25, 0xFE	; 254
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	fc 01       	movw	r30, r24
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	ce 01       	movw	r24, r28
    19ce:	8e 5a       	subi	r24, 0xAE	; 174
    19d0:	9e 4f       	sbci	r25, 0xFE	; 254
    19d2:	fc 01       	movw	r30, r24
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	fc 01       	movw	r30, r24
    19da:	81 81       	ldd	r24, Z+1	; 0x01
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	48 0f       	add	r20, r24
    19e2:	59 1f       	adc	r21, r25
    19e4:	ce 01       	movw	r24, r28
    19e6:	8e 5a       	subi	r24, 0xAE	; 174
    19e8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ea:	fc 01       	movw	r30, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	fc 01       	movw	r30, r24
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	48 0f       	add	r20, r24
    19fa:	59 1f       	adc	r21, r25
    19fc:	ce 01       	movw	r24, r28
    19fe:	8e 5a       	subi	r24, 0xAE	; 174
    1a00:	9e 4f       	sbci	r25, 0xFE	; 254
    1a02:	fc 01       	movw	r30, r24
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	fc 01       	movw	r30, r24
    1a0a:	83 81       	ldd	r24, Z+3	; 0x03
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	84 0f       	add	r24, r20
    1a12:	95 1f       	adc	r25, r21
    1a14:	99 27       	eor	r25, r25
    1a16:	28 17       	cp	r18, r24
    1a18:	39 07       	cpc	r19, r25
    1a1a:	91 f4       	brne	.+36     	; 0x1a40 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	8e 5a       	subi	r24, 0xAE	; 174
    1a20:	9e 4f       	sbci	r25, 0xFE	; 254
    1a22:	fc 01       	movw	r30, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	21 e0       	ldi	r18, 0x01	; 1
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1a2e:	ce 01       	movw	r24, r28
    1a30:	8e 5a       	subi	r24, 0xAE	; 174
    1a32:	9e 4f       	sbci	r25, 0xFE	; 254
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	f1 88       	ldd	r15, Z+17	; 0x11
    1a3e:	10 c0       	rjmp	.+32     	; 0x1a60 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1a40:	ce 01       	movw	r24, r28
    1a42:	8e 5a       	subi	r24, 0xAE	; 174
    1a44:	9e 4f       	sbci	r25, 0xFE	; 254
    1a46:	fc 01       	movw	r30, r24
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1a50:	ce 01       	movw	r24, r28
    1a52:	8e 5a       	subi	r24, 0xAE	; 174
    1a54:	9e 4f       	sbci	r25, 0xFE	; 254
    1a56:	fc 01       	movw	r30, r24
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	f1 88       	ldd	r15, Z+17	; 0x11
    1a60:	8f 2d       	mov	r24, r15
  }
}
    1a62:	cc 5a       	subi	r28, 0xAC	; 172
    1a64:	de 4f       	sbci	r29, 0xFE	; 254
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
    1a7e:	bf 90       	pop	r11
    1a80:	af 90       	pop	r10
    1a82:	08 95       	ret

00001a84 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	99 87       	std	Y+9, r25	; 0x09
    1a9a:	88 87       	std	Y+8, r24	; 0x08
    1a9c:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1a9e:	1a 82       	std	Y+2, r1	; 0x02
    1aa0:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1aa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa4:	88 23       	and	r24, r24
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <_ZN3DHT11expectPulseEb+0x2e>
    1aa8:	88 85       	ldd	r24, Y+8	; 0x08
    1aaa:	99 85       	ldd	r25, Y+9	; 0x09
    1aac:	fc 01       	movw	r30, r24
    1aae:	87 81       	ldd	r24, Z+7	; 0x07
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <_ZN3DHT11expectPulseEb+0x30>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1ab6:	88 85       	ldd	r24, Y+8	; 0x08
    1ab8:	99 85       	ldd	r25, Y+9	; 0x09
    1aba:	fc 01       	movw	r30, r24
    1abc:	80 85       	ldd	r24, Z+8	; 0x08
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	86 52       	subi	r24, 0x26	; 38
    1ac8:	9e 4f       	sbci	r25, 0xFE	; 254
    1aca:	9d 83       	std	Y+5, r25	; 0x05
    1acc:	8c 83       	std	Y+4, r24	; 0x04
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	25 91       	lpm	r18, Z+
    1ad6:	34 91       	lpm	r19, Z
    1ad8:	cf 01       	movw	r24, r30
    1ada:	3f 83       	std	Y+7, r19	; 0x07
    1adc:	2e 83       	std	Y+6, r18	; 0x06
    1ade:	9d 83       	std	Y+5, r25	; 0x05
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
    1ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	20 81       	ld	r18, Z
    1aea:	88 85       	ldd	r24, Y+8	; 0x08
    1aec:	99 85       	ldd	r25, Y+9	; 0x09
    1aee:	fc 01       	movw	r30, r24
    1af0:	87 81       	ldd	r24, Z+7	; 0x07
    1af2:	28 23       	and	r18, r24
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	29 17       	cp	r18, r25
    1afa:	09 f0       	breq	.+2      	; 0x1afe <_ZN3DHT11expectPulseEb+0x7a>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	88 23       	and	r24, r24
    1b00:	f9 f0       	breq	.+62     	; 0x1b40 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	9c 01       	movw	r18, r24
    1b08:	2f 5f       	subi	r18, 0xFF	; 255
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	3a 83       	std	Y+2, r19	; 0x02
    1b0e:	29 83       	std	Y+1, r18	; 0x01
    1b10:	9c 01       	movw	r18, r24
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	88 85       	ldd	r24, Y+8	; 0x08
    1b18:	99 85       	ldd	r25, Y+9	; 0x09
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b1e:	96 85       	ldd	r25, Z+14	; 0x0e
    1b20:	a7 85       	ldd	r26, Z+15	; 0x0f
    1b22:	b0 89       	ldd	r27, Z+16	; 0x10
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	28 17       	cp	r18, r24
    1b28:	39 07       	cpc	r19, r25
    1b2a:	4a 07       	cpc	r20, r26
    1b2c:	5b 07       	cpc	r21, r27
    1b2e:	08 f4       	brcc	.+2      	; 0x1b32 <_ZN3DHT11expectPulseEb+0xae>
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	66 23       	and	r22, r22
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_ZN3DHT11expectPulseEb+0xb4>
    1b36:	bf cf       	rjmp	.-130    	; 0x1ab6 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	cc 01       	movw	r24, r24
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
}
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	2a 96       	adiw	r28, 0x0a	; 10
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	1f 92       	push	r1
    1b66:	1f 92       	push	r1
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	26 e7       	ldi	r18, 0x76	; 118
    1b72:	32 e0       	ldi	r19, 0x02	; 2
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	fc 01       	movw	r30, r24
    1b7a:	31 83       	std	Z+1, r19	; 0x01
    1b7c:	20 83       	st	Z, r18
    1b7e:	00 00       	nop
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1b8a:	af 92       	push	r10
    1b8c:	bf 92       	push	r11
    1b8e:	cf 92       	push	r12
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	2d 97       	sbiw	r28, 0x0d	; 13
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	6b 83       	std	Y+3, r22	; 0x03
    1bb4:	4c 83       	std	Y+4, r20	; 0x04
    1bb6:	2d 83       	std	Y+5, r18	; 0x05
    1bb8:	ee 82       	std	Y+6, r14	; 0x06
    1bba:	ff 82       	std	Y+7, r15	; 0x07
    1bbc:	08 87       	std	Y+8, r16	; 0x08
    1bbe:	19 87       	std	Y+9, r17	; 0x09
    1bc0:	aa 86       	std	Y+10, r10	; 0x0a
    1bc2:	bb 86       	std	Y+11, r11	; 0x0b
    1bc4:	cc 86       	std	Y+12, r12	; 0x0c
    1bc6:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bce:	4c 81       	ldd	r20, Y+4	; 0x04
    1bd0:	6b 81       	ldd	r22, Y+3	; 0x03
    1bd2:	e3 d9       	rcall	.-3130   	; 0xf9a <_ZN3DHTC1Ehhh>
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	fc 01       	movw	r30, r24
    1bdc:	23 8b       	std	Z+19, r18	; 0x13
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	fc 01       	movw	r30, r24
    1be4:	74 96       	adiw	r30, 0x14	; 20
    1be6:	8e 81       	ldd	r24, Y+6	; 0x06
    1be8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bea:	a8 85       	ldd	r26, Y+8	; 0x08
    1bec:	b9 85       	ldd	r27, Y+9	; 0x09
    1bee:	69 81       	ldd	r22, Y+1	; 0x01
    1bf0:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf2:	9c 01       	movw	r18, r24
    1bf4:	ad 01       	movw	r20, r26
    1bf6:	cf 01       	movw	r24, r30
    1bf8:	f6 d0       	rcall	.+492    	; 0x1de6 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	fc 01       	movw	r30, r24
    1c00:	7d 96       	adiw	r30, 0x1d	; 29
    1c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c06:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c08:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c0a:	69 81       	ldd	r22, Y+1	; 0x01
    1c0c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c0e:	9c 01       	movw	r18, r24
    1c10:	ad 01       	movw	r20, r26
    1c12:	cf 01       	movw	r24, r30
    1c14:	7e d2       	rcall	.+1276   	; 0x2112 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1c16:	00 00       	nop
    1c18:	2d 96       	adiw	r28, 0x0d	; 13
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	bf 90       	pop	r11
    1c36:	af 90       	pop	r10
    1c38:	08 95       	ret

00001c3a <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	1f 92       	push	r1
    1c40:	1f 92       	push	r1
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	67 e3       	ldi	r22, 0x37	; 55
    1c50:	f4 d9       	rcall	.-3096   	; 0x103a <_ZN3DHT5beginEh>
    1c52:	00 00       	nop
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1c64:	1f 92       	push	r1
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	7c 83       	std	Y+4, r23	; 0x04
    1c70:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	fc 01       	movw	r30, r24
    1c78:	83 89       	ldd	r24, Z+19	; 0x13
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	8c 30       	cpi	r24, 0x0C	; 12
    1c80:	91 05       	cpc	r25, r1
    1c82:	b1 f0       	breq	.+44     	; 0x1cb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1c84:	8d 30       	cpi	r24, 0x0D	; 13
    1c86:	91 05       	cpc	r25, r1
    1c88:	1c f4       	brge	.+6      	; 0x1c90 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1c8a:	0b 97       	sbiw	r24, 0x0b	; 11
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1c8e:	2e c0       	rjmp	.+92     	; 0x1cec <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1c90:	85 31       	cpi	r24, 0x15	; 21
    1c92:	91 05       	cpc	r25, r1
    1c94:	b9 f0       	breq	.+46     	; 0x1cc4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1c96:	46 97       	sbiw	r24, 0x16	; 22
    1c98:	f9 f0       	breq	.+62     	; 0x1cd8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1c9a:	28 c0       	rjmp	.+80     	; 0x1cec <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1c9c:	2b e0       	ldi	r18, 0x0B	; 11
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	a9 01       	movw	r20, r18
    1ca6:	65 e5       	ldi	r22, 0x55	; 85
    1ca8:	72 e0       	ldi	r23, 0x02	; 2
    1caa:	0e 94 12 33 	call	0x6624	; 0x6624 <strncpy>
    break;
    1cae:	28 c0       	rjmp	.+80     	; 0x1d00 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1cb0:	2b e0       	ldi	r18, 0x0B	; 11
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	a9 01       	movw	r20, r18
    1cba:	6b e5       	ldi	r22, 0x5B	; 91
    1cbc:	72 e0       	ldi	r23, 0x02	; 2
    1cbe:	0e 94 12 33 	call	0x6624	; 0x6624 <strncpy>
    break;
    1cc2:	1e c0       	rjmp	.+60     	; 0x1d00 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1cc4:	2b e0       	ldi	r18, 0x0B	; 11
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	a9 01       	movw	r20, r18
    1cce:	61 e6       	ldi	r22, 0x61	; 97
    1cd0:	72 e0       	ldi	r23, 0x02	; 2
    1cd2:	0e 94 12 33 	call	0x6624	; 0x6624 <strncpy>
    break;
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1cd8:	2b e0       	ldi	r18, 0x0B	; 11
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	67 e6       	ldi	r22, 0x67	; 103
    1ce4:	72 e0       	ldi	r23, 0x02	; 2
    1ce6:	0e 94 12 33 	call	0x6624	; 0x6624 <strncpy>
    break;
    1cea:	0a c0       	rjmp	.+20     	; 0x1d00 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1cec:	2b e0       	ldi	r18, 0x0B	; 11
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	6d e6       	ldi	r22, 0x6D	; 109
    1cf8:	72 e0       	ldi	r23, 0x02	; 2
    1cfa:	0e 94 12 33 	call	0x6624	; 0x6624 <strncpy>
    break;
    1cfe:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1d00:	8b e0       	ldi	r24, 0x0B	; 11
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	10 82       	st	Z, r1
}
    1d10:	00 00       	nop
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1d26:	1f 92       	push	r1
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	7c 83       	std	Y+4, r23	; 0x04
    1d32:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	fc 01       	movw	r30, r24
    1d3a:	83 89       	ldd	r24, Z+19	; 0x13
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	8c 30       	cpi	r24, 0x0C	; 12
    1d42:	91 05       	cpc	r25, r1
    1d44:	c1 f0       	breq	.+48     	; 0x1d76 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1d46:	8d 30       	cpi	r24, 0x0D	; 13
    1d48:	91 05       	cpc	r25, r1
    1d4a:	1c f4       	brge	.+6      	; 0x1d52 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1d4c:	0b 97       	sbiw	r24, 0x0b	; 11
    1d4e:	39 f0       	breq	.+14     	; 0x1d5e <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1d50:	36 c0       	rjmp	.+108    	; 0x1dbe <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1d52:	85 31       	cpi	r24, 0x15	; 21
    1d54:	91 05       	cpc	r25, r1
    1d56:	d9 f0       	breq	.+54     	; 0x1d8e <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1d58:	46 97       	sbiw	r24, 0x16	; 22
    1d5a:	29 f1       	breq	.+74     	; 0x1da6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1d5c:	30 c0       	rjmp	.+96     	; 0x1dbe <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	80 e4       	ldi	r24, 0x40	; 64
    1d64:	92 e4       	ldi	r25, 0x42	; 66
    1d66:	af e0       	ldi	r26, 0x0F	; 15
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	f9 01       	movw	r30, r18
    1d6c:	84 a3       	std	Z+36, r24	; 0x24
    1d6e:	95 a3       	std	Z+37, r25	; 0x25
    1d70:	a6 a3       	std	Z+38, r26	; 0x26
    1d72:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d74:	30 c0       	rjmp	.+96     	; 0x1dd6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	80 e8       	ldi	r24, 0x80	; 128
    1d7c:	94 e8       	ldi	r25, 0x84	; 132
    1d7e:	ae e1       	ldi	r26, 0x1E	; 30
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	f9 01       	movw	r30, r18
    1d84:	84 a3       	std	Z+36, r24	; 0x24
    1d86:	95 a3       	std	Z+37, r25	; 0x25
    1d88:	a6 a3       	std	Z+38, r26	; 0x26
    1d8a:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1d8c:	24 c0       	rjmp	.+72     	; 0x1dd6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	80 e8       	ldi	r24, 0x80	; 128
    1d94:	94 e8       	ldi	r25, 0x84	; 132
    1d96:	ae e1       	ldi	r26, 0x1E	; 30
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	84 a3       	std	Z+36, r24	; 0x24
    1d9e:	95 a3       	std	Z+37, r25	; 0x25
    1da0:	a6 a3       	std	Z+38, r26	; 0x26
    1da2:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1da4:	18 c0       	rjmp	.+48     	; 0x1dd6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1da6:	2b 81       	ldd	r18, Y+3	; 0x03
    1da8:	3c 81       	ldd	r19, Y+4	; 0x04
    1daa:	80 e8       	ldi	r24, 0x80	; 128
    1dac:	94 e8       	ldi	r25, 0x84	; 132
    1dae:	ae e1       	ldi	r26, 0x1E	; 30
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	f9 01       	movw	r30, r18
    1db4:	84 a3       	std	Z+36, r24	; 0x24
    1db6:	95 a3       	std	Z+37, r25	; 0x25
    1db8:	a6 a3       	std	Z+38, r26	; 0x26
    1dba:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1dbc:	0c c0       	rjmp	.+24     	; 0x1dd6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	80 e8       	ldi	r24, 0x80	; 128
    1dc4:	94 e8       	ldi	r25, 0x84	; 132
    1dc6:	ae e1       	ldi	r26, 0x1E	; 30
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	f9 01       	movw	r30, r18
    1dcc:	84 a3       	std	Z+36, r24	; 0x24
    1dce:	95 a3       	std	Z+37, r25	; 0x25
    1dd0:	a6 a3       	std	Z+38, r26	; 0x26
    1dd2:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1dd4:	00 00       	nop
  }
}
    1dd6:	00 00       	nop
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	28 97       	sbiw	r28, 0x08	; 8
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	7c 83       	std	Y+4, r23	; 0x04
    1e00:	6b 83       	std	Y+3, r22	; 0x03
    1e02:	2d 83       	std	Y+5, r18	; 0x05
    1e04:	3e 83       	std	Y+6, r19	; 0x06
    1e06:	4f 83       	std	Y+7, r20	; 0x07
    1e08:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	a8 de       	rcall	.-688    	; 0x1b60 <_ZN15Adafruit_SensorC1Ev>
    1e10:	22 e9       	ldi	r18, 0x92	; 146
    1e12:	32 e0       	ldi	r19, 0x02	; 2
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	fc 01       	movw	r30, r24
    1e1a:	31 83       	std	Z+1, r19	; 0x01
    1e1c:	20 83       	st	Z, r18
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	2b 81       	ldd	r18, Y+3	; 0x03
    1e24:	3c 81       	ldd	r19, Y+4	; 0x04
    1e26:	fc 01       	movw	r30, r24
    1e28:	34 83       	std	Z+4, r19	; 0x04
    1e2a:	23 83       	std	Z+3, r18	; 0x03
    1e2c:	29 81       	ldd	r18, Y+1	; 0x01
    1e2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	af 81       	ldd	r26, Y+7	; 0x07
    1e36:	b8 85       	ldd	r27, Y+8	; 0x08
    1e38:	f9 01       	movw	r30, r18
    1e3a:	85 83       	std	Z+5, r24	; 0x05
    1e3c:	96 83       	std	Z+6, r25	; 0x06
    1e3e:	a7 83       	std	Z+7, r26	; 0x07
    1e40:	b0 87       	std	Z+8, r27	; 0x08
    1e42:	00 00       	nop
    1e44:	28 96       	adiw	r28, 0x08	; 8
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	7c 83       	std	Y+4, r23	; 0x04
    1e68:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	44 e2       	ldi	r20, 0x24	; 36
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1e7a:	84 e2       	ldi	r24, 0x24	; 36
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e0       	ldi	r26, 0x00	; 0
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	f9 01       	movw	r30, r18
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	fc 01       	movw	r30, r24
    1e96:	85 81       	ldd	r24, Z+5	; 0x05
    1e98:	96 81       	ldd	r25, Z+6	; 0x06
    1e9a:	a7 81       	ldd	r26, Z+7	; 0x07
    1e9c:	b0 85       	ldd	r27, Z+8	; 0x08
    1e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	84 83       	std	Z+4, r24	; 0x04
    1ea6:	95 83       	std	Z+5, r25	; 0x05
    1ea8:	a6 83       	std	Z+6, r26	; 0x06
    1eaa:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb0:	8d e0       	ldi	r24, 0x0D	; 13
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	f9 01       	movw	r30, r18
    1eba:	80 87       	std	Z+8, r24	; 0x08
    1ebc:	91 87       	std	Z+9, r25	; 0x09
    1ebe:	a2 87       	std	Z+10, r26	; 0x0a
    1ec0:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1ec2:	0e 94 bc 2c 	call	0x5978	; 0x5978 <millis>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	f9 01       	movw	r30, r18
    1ed0:	80 8b       	std	Z+16, r24	; 0x10
    1ed2:	91 8b       	std	Z+17, r25	; 0x11
    1ed4:	a2 8b       	std	Z+18, r26	; 0x12
    1ed6:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	fc 01       	movw	r30, r24
    1ede:	83 81       	ldd	r24, Z+3	; 0x03
    1ee0:	94 81       	ldd	r25, Z+4	; 0x04
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	d3 d8       	rcall	.-3674   	; 0x108e <_ZN3DHT15readTemperatureEbb>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	2b 81       	ldd	r18, Y+3	; 0x03
    1eee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	84 8b       	std	Z+20, r24	; 0x14
    1ef4:	95 8b       	std	Z+21, r25	; 0x15
    1ef6:	a6 8b       	std	Z+22, r26	; 0x16
    1ef8:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	08 95       	ret

00001f0a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1f10:	1f 92       	push	r1
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	7c 83       	std	Y+4, r23	; 0x04
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	48 e2       	ldi	r20, 0x28	; 40
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	fc 01       	movw	r30, r24
    1f34:	83 81       	ldd	r24, Z+3	; 0x03
    1f36:	94 81       	ldd	r25, Z+4	; 0x04
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	b9 01       	movw	r22, r18
    1f3e:	8f de       	rcall	.-738    	; 0x1c5e <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	84 87       	std	Z+12, r24	; 0x0c
    1f50:	95 87       	std	Z+13, r25	; 0x0d
    1f52:	a6 87       	std	Z+14, r26	; 0x0e
    1f54:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	85 81       	ldd	r24, Z+5	; 0x05
    1f5e:	96 81       	ldd	r25, Z+6	; 0x06
    1f60:	a7 81       	ldd	r26, Z+7	; 0x07
    1f62:	b0 85       	ldd	r27, Z+8	; 0x08
    1f64:	2b 81       	ldd	r18, Y+3	; 0x03
    1f66:	3c 81       	ldd	r19, Y+4	; 0x04
    1f68:	f9 01       	movw	r30, r18
    1f6a:	80 8b       	std	Z+16, r24	; 0x10
    1f6c:	91 8b       	std	Z+17, r25	; 0x11
    1f6e:	a2 8b       	std	Z+18, r26	; 0x12
    1f70:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	8d e0       	ldi	r24, 0x0D	; 13
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a0 e0       	ldi	r26, 0x00	; 0
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	f9 01       	movw	r30, r18
    1f80:	84 8b       	std	Z+20, r24	; 0x14
    1f82:	95 8b       	std	Z+21, r25	; 0x15
    1f84:	a6 8b       	std	Z+22, r26	; 0x16
    1f86:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	83 81       	ldd	r24, Z+3	; 0x03
    1f90:	94 81       	ldd	r25, Z+4	; 0x04
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	b9 01       	movw	r22, r18
    1f98:	c3 de       	rcall	.-634    	; 0x1d20 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	83 81       	ldd	r24, Z+3	; 0x03
    1fa2:	94 81       	ldd	r25, Z+4	; 0x04
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	83 89       	ldd	r24, Z+19	; 0x13
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	8c 30       	cpi	r24, 0x0C	; 12
    1fae:	91 05       	cpc	r25, r1
    1fb0:	61 f1       	breq	.+88     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1fb2:	8d 30       	cpi	r24, 0x0D	; 13
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	1c f4       	brge	.+6      	; 0x1fbe <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    1fb8:	0b 97       	sbiw	r24, 0x0b	; 11
    1fba:	49 f0       	breq	.+18     	; 0x1fce <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    1fbc:	8c c0       	rjmp	.+280    	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
    1fbe:	85 31       	cpi	r24, 0x15	; 21
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    1fc4:	44 c0       	rjmp	.+136    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    1fc6:	46 97       	sbiw	r24, 0x16	; 22
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    1fca:	63 c0       	rjmp	.+198    	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    1fcc:	84 c0       	rjmp	.+264    	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
  case DHT11:
    sensor->max_value = 50.0F;
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a8 e4       	ldi	r26, 0x48	; 72
    1fd8:	b2 e4       	ldi	r27, 0x42	; 66
    1fda:	f9 01       	movw	r30, r18
    1fdc:	80 8f       	std	Z+24, r24	; 0x18
    1fde:	91 8f       	std	Z+25, r25	; 0x19
    1fe0:	a2 8f       	std	Z+26, r26	; 0x1a
    1fe2:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	fc 01       	movw	r30, r24
    1fea:	14 8e       	std	Z+28, r1	; 0x1c
    1fec:	15 8e       	std	Z+29, r1	; 0x1d
    1fee:	16 8e       	std	Z+30, r1	; 0x1e
    1ff0:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e4       	ldi	r27, 0x40	; 64
    1ffe:	f9 01       	movw	r30, r18
    2000:	80 a3       	std	Z+32, r24	; 0x20
    2002:	91 a3       	std	Z+33, r25	; 0x21
    2004:	a2 a3       	std	Z+34, r26	; 0x22
    2006:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2008:	7c c0       	rjmp	.+248    	; 0x2102 <__DATA_REGION_LENGTH__+0x102>
  case DHT12:
    sensor->max_value = 60.0F;
    200a:	2b 81       	ldd	r18, Y+3	; 0x03
    200c:	3c 81       	ldd	r19, Y+4	; 0x04
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e7       	ldi	r26, 0x70	; 112
    2014:	b2 e4       	ldi	r27, 0x42	; 66
    2016:	f9 01       	movw	r30, r18
    2018:	80 8f       	std	Z+24, r24	; 0x18
    201a:	91 8f       	std	Z+25, r25	; 0x19
    201c:	a2 8f       	std	Z+26, r26	; 0x1a
    201e:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    2020:	2b 81       	ldd	r18, Y+3	; 0x03
    2022:	3c 81       	ldd	r19, Y+4	; 0x04
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 ea       	ldi	r26, 0xA0	; 160
    202a:	b1 ec       	ldi	r27, 0xC1	; 193
    202c:	f9 01       	movw	r30, r18
    202e:	84 8f       	std	Z+28, r24	; 0x1c
    2030:	95 8f       	std	Z+29, r25	; 0x1d
    2032:	a6 8f       	std	Z+30, r26	; 0x1e
    2034:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    2036:	2b 81       	ldd	r18, Y+3	; 0x03
    2038:	3c 81       	ldd	r19, Y+4	; 0x04
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 e0       	ldi	r26, 0x00	; 0
    2040:	bf e3       	ldi	r27, 0x3F	; 63
    2042:	f9 01       	movw	r30, r18
    2044:	80 a3       	std	Z+32, r24	; 0x20
    2046:	91 a3       	std	Z+33, r25	; 0x21
    2048:	a2 a3       	std	Z+34, r26	; 0x22
    204a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    204c:	5a c0       	rjmp	.+180    	; 0x2102 <__DATA_REGION_LENGTH__+0x102>
  case DHT21:
    sensor->max_value = 80.0F;
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 ea       	ldi	r26, 0xA0	; 160
    2058:	b2 e4       	ldi	r27, 0x42	; 66
    205a:	f9 01       	movw	r30, r18
    205c:	80 8f       	std	Z+24, r24	; 0x18
    205e:	91 8f       	std	Z+25, r25	; 0x19
    2060:	a2 8f       	std	Z+26, r26	; 0x1a
    2062:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e2       	ldi	r26, 0x20	; 32
    206e:	b2 ec       	ldi	r27, 0xC2	; 194
    2070:	f9 01       	movw	r30, r18
    2072:	84 8f       	std	Z+28, r24	; 0x1c
    2074:	95 8f       	std	Z+29, r25	; 0x1d
    2076:	a6 8f       	std	Z+30, r26	; 0x1e
    2078:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    207a:	2b 81       	ldd	r18, Y+3	; 0x03
    207c:	3c 81       	ldd	r19, Y+4	; 0x04
    207e:	8d ec       	ldi	r24, 0xCD	; 205
    2080:	9c ec       	ldi	r25, 0xCC	; 204
    2082:	ac ec       	ldi	r26, 0xCC	; 204
    2084:	bd e3       	ldi	r27, 0x3D	; 61
    2086:	f9 01       	movw	r30, r18
    2088:	80 a3       	std	Z+32, r24	; 0x20
    208a:	91 a3       	std	Z+33, r25	; 0x21
    208c:	a2 a3       	std	Z+34, r26	; 0x22
    208e:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2090:	38 c0       	rjmp	.+112    	; 0x2102 <__DATA_REGION_LENGTH__+0x102>
  case DHT22:
    sensor->max_value = 125.0F;
    2092:	2b 81       	ldd	r18, Y+3	; 0x03
    2094:	3c 81       	ldd	r19, Y+4	; 0x04
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	aa ef       	ldi	r26, 0xFA	; 250
    209c:	b2 e4       	ldi	r27, 0x42	; 66
    209e:	f9 01       	movw	r30, r18
    20a0:	80 8f       	std	Z+24, r24	; 0x18
    20a2:	91 8f       	std	Z+25, r25	; 0x19
    20a4:	a2 8f       	std	Z+26, r26	; 0x1a
    20a6:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    20a8:	2b 81       	ldd	r18, Y+3	; 0x03
    20aa:	3c 81       	ldd	r19, Y+4	; 0x04
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e2       	ldi	r26, 0x20	; 32
    20b2:	b2 ec       	ldi	r27, 0xC2	; 194
    20b4:	f9 01       	movw	r30, r18
    20b6:	84 8f       	std	Z+28, r24	; 0x1c
    20b8:	95 8f       	std	Z+29, r25	; 0x1d
    20ba:	a6 8f       	std	Z+30, r26	; 0x1e
    20bc:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    20be:	2b 81       	ldd	r18, Y+3	; 0x03
    20c0:	3c 81       	ldd	r19, Y+4	; 0x04
    20c2:	8d ec       	ldi	r24, 0xCD	; 205
    20c4:	9c ec       	ldi	r25, 0xCC	; 204
    20c6:	ac ec       	ldi	r26, 0xCC	; 204
    20c8:	bd e3       	ldi	r27, 0x3D	; 61
    20ca:	f9 01       	movw	r30, r18
    20cc:	80 a3       	std	Z+32, r24	; 0x20
    20ce:	91 a3       	std	Z+33, r25	; 0x21
    20d0:	a2 a3       	std	Z+34, r26	; 0x22
    20d2:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    20d4:	16 c0       	rjmp	.+44     	; 0x2102 <__DATA_REGION_LENGTH__+0x102>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	fc 01       	movw	r30, r24
    20dc:	10 8e       	std	Z+24, r1	; 0x18
    20de:	11 8e       	std	Z+25, r1	; 0x19
    20e0:	12 8e       	std	Z+26, r1	; 0x1a
    20e2:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	14 8e       	std	Z+28, r1	; 0x1c
    20ec:	15 8e       	std	Z+29, r1	; 0x1d
    20ee:	16 8e       	std	Z+30, r1	; 0x1e
    20f0:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	fc 01       	movw	r30, r24
    20f8:	10 a2       	std	Z+32, r1	; 0x20
    20fa:	11 a2       	std	Z+33, r1	; 0x21
    20fc:	12 a2       	std	Z+34, r1	; 0x22
    20fe:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2100:	00 00       	nop
  }
}
    2102:	00 00       	nop
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	08 95       	ret

00002112 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	28 97       	sbiw	r28, 0x08	; 8
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	7c 83       	std	Y+4, r23	; 0x04
    212c:	6b 83       	std	Y+3, r22	; 0x03
    212e:	2d 83       	std	Y+5, r18	; 0x05
    2130:	3e 83       	std	Y+6, r19	; 0x06
    2132:	4f 83       	std	Y+7, r20	; 0x07
    2134:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	12 dd       	rcall	.-1500   	; 0x1b60 <_ZN15Adafruit_SensorC1Ev>
    213c:	24 e8       	ldi	r18, 0x84	; 132
    213e:	32 e0       	ldi	r19, 0x02	; 2
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	fc 01       	movw	r30, r24
    2146:	31 83       	std	Z+1, r19	; 0x01
    2148:	20 83       	st	Z, r18
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	fc 01       	movw	r30, r24
    2154:	34 83       	std	Z+4, r19	; 0x04
    2156:	23 83       	std	Z+3, r18	; 0x03
    2158:	29 81       	ldd	r18, Y+1	; 0x01
    215a:	3a 81       	ldd	r19, Y+2	; 0x02
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	af 81       	ldd	r26, Y+7	; 0x07
    2162:	b8 85       	ldd	r27, Y+8	; 0x08
    2164:	f9 01       	movw	r30, r18
    2166:	85 83       	std	Z+5, r24	; 0x05
    2168:	96 83       	std	Z+6, r25	; 0x06
    216a:	a7 83       	std	Z+7, r26	; 0x07
    216c:	b0 87       	std	Z+8, r27	; 0x08
    216e:	00 00       	nop
    2170:	28 96       	adiw	r28, 0x08	; 8
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	00 d0       	rcall	.+0      	; 0x2188 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    2188:	1f 92       	push	r1
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	7c 83       	std	Y+4, r23	; 0x04
    2194:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	44 e2       	ldi	r20, 0x24	; 36
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    21a6:	84 e2       	ldi	r24, 0x24	; 36
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e0       	ldi	r26, 0x00	; 0
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	3c 81       	ldd	r19, Y+4	; 0x04
    21b2:	f9 01       	movw	r30, r18
    21b4:	80 83       	st	Z, r24
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	a2 83       	std	Z+2, r26	; 0x02
    21ba:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	fc 01       	movw	r30, r24
    21c2:	85 81       	ldd	r24, Z+5	; 0x05
    21c4:	96 81       	ldd	r25, Z+6	; 0x06
    21c6:	a7 81       	ldd	r26, Z+7	; 0x07
    21c8:	b0 85       	ldd	r27, Z+8	; 0x08
    21ca:	2b 81       	ldd	r18, Y+3	; 0x03
    21cc:	3c 81       	ldd	r19, Y+4	; 0x04
    21ce:	f9 01       	movw	r30, r18
    21d0:	84 83       	std	Z+4, r24	; 0x04
    21d2:	95 83       	std	Z+5, r25	; 0x05
    21d4:	a6 83       	std	Z+6, r26	; 0x06
    21d6:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    21d8:	2b 81       	ldd	r18, Y+3	; 0x03
    21da:	3c 81       	ldd	r19, Y+4	; 0x04
    21dc:	8c e0       	ldi	r24, 0x0C	; 12
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	f9 01       	movw	r30, r18
    21e6:	80 87       	std	Z+8, r24	; 0x08
    21e8:	91 87       	std	Z+9, r25	; 0x09
    21ea:	a2 87       	std	Z+10, r26	; 0x0a
    21ec:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    21ee:	0e 94 bc 2c 	call	0x5978	; 0x5978 <millis>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	f9 01       	movw	r30, r18
    21fc:	80 8b       	std	Z+16, r24	; 0x10
    21fe:	91 8b       	std	Z+17, r25	; 0x11
    2200:	a2 8b       	std	Z+18, r26	; 0x12
    2202:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	fc 01       	movw	r30, r24
    220a:	83 81       	ldd	r24, Z+3	; 0x03
    220c:	94 81       	ldd	r25, Z+4	; 0x04
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	cb d8       	rcall	.-3690   	; 0x13a8 <_ZN3DHT12readHumidityEb>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	2b 81       	ldd	r18, Y+3	; 0x03
    2218:	3c 81       	ldd	r19, Y+4	; 0x04
    221a:	f9 01       	movw	r30, r18
    221c:	84 8b       	std	Z+20, r24	; 0x14
    221e:	95 8b       	std	Z+21, r25	; 0x15
    2220:	a6 8b       	std	Z+22, r26	; 0x16
    2222:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2224:	81 e0       	ldi	r24, 0x01	; 1
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	00 d0       	rcall	.+0      	; 0x223a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    223a:	1f 92       	push	r1
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	7c 83       	std	Y+4, r23	; 0x04
    2246:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	48 e2       	ldi	r20, 0x28	; 40
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	fc 01       	movw	r30, r24
    225e:	83 81       	ldd	r24, Z+3	; 0x03
    2260:	94 81       	ldd	r25, Z+4	; 0x04
    2262:	2b 81       	ldd	r18, Y+3	; 0x03
    2264:	3c 81       	ldd	r19, Y+4	; 0x04
    2266:	b9 01       	movw	r22, r18
    2268:	fa dc       	rcall	.-1548   	; 0x1c5e <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    226a:	2b 81       	ldd	r18, Y+3	; 0x03
    226c:	3c 81       	ldd	r19, Y+4	; 0x04
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	f9 01       	movw	r30, r18
    2278:	84 87       	std	Z+12, r24	; 0x0c
    227a:	95 87       	std	Z+13, r25	; 0x0d
    227c:	a6 87       	std	Z+14, r26	; 0x0e
    227e:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	fc 01       	movw	r30, r24
    2286:	85 81       	ldd	r24, Z+5	; 0x05
    2288:	96 81       	ldd	r25, Z+6	; 0x06
    228a:	a7 81       	ldd	r26, Z+7	; 0x07
    228c:	b0 85       	ldd	r27, Z+8	; 0x08
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	3c 81       	ldd	r19, Y+4	; 0x04
    2292:	f9 01       	movw	r30, r18
    2294:	80 8b       	std	Z+16, r24	; 0x10
    2296:	91 8b       	std	Z+17, r25	; 0x11
    2298:	a2 8b       	std	Z+18, r26	; 0x12
    229a:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    229c:	2b 81       	ldd	r18, Y+3	; 0x03
    229e:	3c 81       	ldd	r19, Y+4	; 0x04
    22a0:	8c e0       	ldi	r24, 0x0C	; 12
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e0       	ldi	r26, 0x00	; 0
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	f9 01       	movw	r30, r18
    22aa:	84 8b       	std	Z+20, r24	; 0x14
    22ac:	95 8b       	std	Z+21, r25	; 0x15
    22ae:	a6 8b       	std	Z+22, r26	; 0x16
    22b0:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	fc 01       	movw	r30, r24
    22b8:	83 81       	ldd	r24, Z+3	; 0x03
    22ba:	94 81       	ldd	r25, Z+4	; 0x04
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	b9 01       	movw	r22, r18
    22c2:	2e dd       	rcall	.-1444   	; 0x1d20 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	fc 01       	movw	r30, r24
    22ca:	83 81       	ldd	r24, Z+3	; 0x03
    22cc:	94 81       	ldd	r25, Z+4	; 0x04
    22ce:	fc 01       	movw	r30, r24
    22d0:	83 89       	ldd	r24, Z+19	; 0x13
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	8c 30       	cpi	r24, 0x0C	; 12
    22d8:	91 05       	cpc	r25, r1
    22da:	81 f1       	breq	.+96     	; 0x233c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    22dc:	8d 30       	cpi	r24, 0x0D	; 13
    22de:	91 05       	cpc	r25, r1
    22e0:	1c f4       	brge	.+6      	; 0x22e8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    22e2:	0b 97       	sbiw	r24, 0x0b	; 11
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    22e6:	88 c0       	rjmp	.+272    	; 0x23f8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    22e8:	85 31       	cpi	r24, 0x15	; 21
    22ea:	91 05       	cpc	r25, r1
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    22ee:	48 c0       	rjmp	.+144    	; 0x2380 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    22f0:	46 97       	sbiw	r24, 0x16	; 22
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    22f4:	63 c0       	rjmp	.+198    	; 0x23bc <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    22f6:	80 c0       	rjmp	.+256    	; 0x23f8 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    22f8:	2b 81       	ldd	r18, Y+3	; 0x03
    22fa:	3c 81       	ldd	r19, Y+4	; 0x04
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 ea       	ldi	r26, 0xA0	; 160
    2302:	b2 e4       	ldi	r27, 0x42	; 66
    2304:	f9 01       	movw	r30, r18
    2306:	80 8f       	std	Z+24, r24	; 0x18
    2308:	91 8f       	std	Z+25, r25	; 0x19
    230a:	a2 8f       	std	Z+26, r26	; 0x1a
    230c:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    230e:	2b 81       	ldd	r18, Y+3	; 0x03
    2310:	3c 81       	ldd	r19, Y+4	; 0x04
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 ea       	ldi	r26, 0xA0	; 160
    2318:	b1 e4       	ldi	r27, 0x41	; 65
    231a:	f9 01       	movw	r30, r18
    231c:	84 8f       	std	Z+28, r24	; 0x1c
    231e:	95 8f       	std	Z+29, r25	; 0x1d
    2320:	a6 8f       	std	Z+30, r26	; 0x1e
    2322:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2324:	2b 81       	ldd	r18, Y+3	; 0x03
    2326:	3c 81       	ldd	r19, Y+4	; 0x04
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 ea       	ldi	r26, 0xA0	; 160
    232e:	b0 e4       	ldi	r27, 0x40	; 64
    2330:	f9 01       	movw	r30, r18
    2332:	80 a3       	std	Z+32, r24	; 0x20
    2334:	91 a3       	std	Z+33, r25	; 0x21
    2336:	a2 a3       	std	Z+34, r26	; 0x22
    2338:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    233a:	74 c0       	rjmp	.+232    	; 0x2424 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	ae eb       	ldi	r26, 0xBE	; 190
    2346:	b2 e4       	ldi	r27, 0x42	; 66
    2348:	f9 01       	movw	r30, r18
    234a:	80 8f       	std	Z+24, r24	; 0x18
    234c:	91 8f       	std	Z+25, r25	; 0x19
    234e:	a2 8f       	std	Z+26, r26	; 0x1a
    2350:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	3c 81       	ldd	r19, Y+4	; 0x04
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 ea       	ldi	r26, 0xA0	; 160
    235c:	b1 e4       	ldi	r27, 0x41	; 65
    235e:	f9 01       	movw	r30, r18
    2360:	84 8f       	std	Z+28, r24	; 0x1c
    2362:	95 8f       	std	Z+29, r25	; 0x1d
    2364:	a6 8f       	std	Z+30, r26	; 0x1e
    2366:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2368:	2b 81       	ldd	r18, Y+3	; 0x03
    236a:	3c 81       	ldd	r19, Y+4	; 0x04
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 ea       	ldi	r26, 0xA0	; 160
    2372:	b0 e4       	ldi	r27, 0x40	; 64
    2374:	f9 01       	movw	r30, r18
    2376:	80 a3       	std	Z+32, r24	; 0x20
    2378:	91 a3       	std	Z+33, r25	; 0x21
    237a:	a2 a3       	std	Z+34, r26	; 0x22
    237c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    237e:	52 c0       	rjmp	.+164    	; 0x2424 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    2380:	2b 81       	ldd	r18, Y+3	; 0x03
    2382:	3c 81       	ldd	r19, Y+4	; 0x04
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a8 ec       	ldi	r26, 0xC8	; 200
    238a:	b2 e4       	ldi	r27, 0x42	; 66
    238c:	f9 01       	movw	r30, r18
    238e:	80 8f       	std	Z+24, r24	; 0x18
    2390:	91 8f       	std	Z+25, r25	; 0x19
    2392:	a2 8f       	std	Z+26, r26	; 0x1a
    2394:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	fc 01       	movw	r30, r24
    239c:	14 8e       	std	Z+28, r1	; 0x1c
    239e:	15 8e       	std	Z+29, r1	; 0x1d
    23a0:	16 8e       	std	Z+30, r1	; 0x1e
    23a2:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    23a4:	2b 81       	ldd	r18, Y+3	; 0x03
    23a6:	3c 81       	ldd	r19, Y+4	; 0x04
    23a8:	8d ec       	ldi	r24, 0xCD	; 205
    23aa:	9c ec       	ldi	r25, 0xCC	; 204
    23ac:	ac ec       	ldi	r26, 0xCC	; 204
    23ae:	bd e3       	ldi	r27, 0x3D	; 61
    23b0:	f9 01       	movw	r30, r18
    23b2:	80 a3       	std	Z+32, r24	; 0x20
    23b4:	91 a3       	std	Z+33, r25	; 0x21
    23b6:	a2 a3       	std	Z+34, r26	; 0x22
    23b8:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    23ba:	34 c0       	rjmp	.+104    	; 0x2424 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	3c 81       	ldd	r19, Y+4	; 0x04
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a8 ec       	ldi	r26, 0xC8	; 200
    23c6:	b2 e4       	ldi	r27, 0x42	; 66
    23c8:	f9 01       	movw	r30, r18
    23ca:	80 8f       	std	Z+24, r24	; 0x18
    23cc:	91 8f       	std	Z+25, r25	; 0x19
    23ce:	a2 8f       	std	Z+26, r26	; 0x1a
    23d0:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	fc 01       	movw	r30, r24
    23d8:	14 8e       	std	Z+28, r1	; 0x1c
    23da:	15 8e       	std	Z+29, r1	; 0x1d
    23dc:	16 8e       	std	Z+30, r1	; 0x1e
    23de:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    23e0:	2b 81       	ldd	r18, Y+3	; 0x03
    23e2:	3c 81       	ldd	r19, Y+4	; 0x04
    23e4:	8d ec       	ldi	r24, 0xCD	; 205
    23e6:	9c ec       	ldi	r25, 0xCC	; 204
    23e8:	ac ec       	ldi	r26, 0xCC	; 204
    23ea:	bd e3       	ldi	r27, 0x3D	; 61
    23ec:	f9 01       	movw	r30, r18
    23ee:	80 a3       	std	Z+32, r24	; 0x20
    23f0:	91 a3       	std	Z+33, r25	; 0x21
    23f2:	a2 a3       	std	Z+34, r26	; 0x22
    23f4:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    23f6:	16 c0       	rjmp	.+44     	; 0x2424 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	fc 01       	movw	r30, r24
    23fe:	10 8e       	std	Z+24, r1	; 0x18
    2400:	11 8e       	std	Z+25, r1	; 0x19
    2402:	12 8e       	std	Z+26, r1	; 0x1a
    2404:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	fc 01       	movw	r30, r24
    240c:	14 8e       	std	Z+28, r1	; 0x1c
    240e:	15 8e       	std	Z+29, r1	; 0x1d
    2410:	16 8e       	std	Z+30, r1	; 0x1e
    2412:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	fc 01       	movw	r30, r24
    241a:	10 a2       	std	Z+32, r1	; 0x20
    241c:	11 a2       	std	Z+33, r1	; 0x21
    241e:	12 a2       	std	Z+34, r1	; 0x22
    2420:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2422:	00 00       	nop
  }
}
    2424:	00 00       	nop
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

00002434 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2434:	0f 93       	push	r16
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	28 97       	sbiw	r28, 0x08	; 8
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	4b 83       	std	Y+3, r20	; 0x03
    2450:	5c 83       	std	Y+4, r21	; 0x04
    2452:	6d 83       	std	Y+5, r22	; 0x05
    2454:	7e 83       	std	Y+6, r23	; 0x06
    2456:	2f 83       	std	Y+7, r18	; 0x07
    2458:	08 87       	std	Y+8, r16	; 0x08
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	ad 81       	ldd	r26, Y+5	; 0x05
    2460:	be 81       	ldd	r27, Y+6	; 0x06
    2462:	e9 81       	ldd	r30, Y+1	; 0x01
    2464:	fa 81       	ldd	r31, Y+2	; 0x02
    2466:	08 85       	ldd	r16, Y+8	; 0x08
    2468:	2f 81       	ldd	r18, Y+7	; 0x07
    246a:	ac 01       	movw	r20, r24
    246c:	bd 01       	movw	r22, r26
    246e:	cf 01       	movw	r24, r30
    2470:	0b d0       	rcall	.+22     	; 0x2488 <_ZN11SPISettings16init_MightInlineEmhh>
    2472:	00 00       	nop
    2474:	28 96       	adiw	r28, 0x08	; 8
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	0f 91       	pop	r16
    2486:	08 95       	ret

00002488 <_ZN11SPISettings16init_MightInlineEmhh>:
    2488:	0f 93       	push	r16
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	65 97       	sbiw	r28, 0x15	; 21
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	9f 87       	std	Y+15, r25	; 0x0f
    24a0:	8e 87       	std	Y+14, r24	; 0x0e
    24a2:	48 8b       	std	Y+16, r20	; 0x10
    24a4:	59 8b       	std	Y+17, r21	; 0x11
    24a6:	6a 8b       	std	Y+18, r22	; 0x12
    24a8:	7b 8b       	std	Y+19, r23	; 0x13
    24aa:	2c 8b       	std	Y+20, r18	; 0x14
    24ac:	0d 8b       	std	Y+21, r16	; 0x15
    24ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	88 89       	ldd	r24, Y+16	; 0x10
    24b8:	99 89       	ldd	r25, Y+17	; 0x11
    24ba:	aa 89       	ldd	r26, Y+18	; 0x12
    24bc:	bb 89       	ldd	r27, Y+19	; 0x13
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	ad 83       	std	Y+5, r26	; 0x05
    24c4:	be 83       	std	Y+6, r27	; 0x06
    24c6:	8c 89       	ldd	r24, Y+20	; 0x14
    24c8:	8f 83       	std	Y+7, r24	; 0x07
    24ca:	8d 89       	ldd	r24, Y+21	; 0x15
    24cc:	88 87       	std	Y+8, r24	; 0x08
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	92 e1       	ldi	r25, 0x12	; 18
    24d2:	aa e7       	ldi	r26, 0x7A	; 122
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	89 87       	std	Y+9, r24	; 0x09
    24d8:	9a 87       	std	Y+10, r25	; 0x0a
    24da:	ab 87       	std	Y+11, r26	; 0x0b
    24dc:	bc 87       	std	Y+12, r27	; 0x0c
    24de:	1d 86       	std	Y+13, r1	; 0x0d
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	86 30       	cpi	r24, 0x06	; 6
    24e4:	e8 f4       	brcc	.+58     	; 0x2520 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    24e6:	2b 81       	ldd	r18, Y+3	; 0x03
    24e8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ea:	4d 81       	ldd	r20, Y+5	; 0x05
    24ec:	5e 81       	ldd	r21, Y+6	; 0x06
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    24f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	4a 07       	cpc	r20, r26
    24fc:	5b 07       	cpc	r21, r27
    24fe:	80 f4       	brcc	.+32     	; 0x2520 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	ab 85       	ldd	r26, Y+11	; 0x0b
    2506:	bc 85       	ldd	r27, Y+12	; 0x0c
    2508:	b6 95       	lsr	r27
    250a:	a7 95       	ror	r26
    250c:	97 95       	ror	r25
    250e:	87 95       	ror	r24
    2510:	89 87       	std	Y+9, r24	; 0x09
    2512:	9a 87       	std	Y+10, r25	; 0x0a
    2514:	ab 87       	std	Y+11, r26	; 0x0b
    2516:	bc 87       	std	Y+12, r27	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	8f 5f       	subi	r24, 0xFF	; 255
    251c:	8d 87       	std	Y+13, r24	; 0x0d
    251e:	e0 cf       	rjmp	.-64     	; 0x24e0 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	86 30       	cpi	r24, 0x06	; 6
    2524:	11 f4       	brne	.+4      	; 0x252a <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2526:	87 e0       	ldi	r24, 0x07	; 7
    2528:	8d 87       	std	Y+13, r24	; 0x0d
    252a:	9d 85       	ldd	r25, Y+13	; 0x0d
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	89 27       	eor	r24, r25
    2530:	8d 87       	std	Y+13, r24	; 0x0d
    2532:	8f 81       	ldd	r24, Y+7	; 0x07
    2534:	88 23       	and	r24, r24
    2536:	11 f4       	brne	.+4      	; 0x253c <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    2538:	80 e7       	ldi	r24, 0x70	; 112
    253a:	01 c0       	rjmp	.+2      	; 0x253e <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    253c:	80 e5       	ldi	r24, 0x50	; 80
    253e:	98 85       	ldd	r25, Y+8	; 0x08
    2540:	9c 70       	andi	r25, 0x0C	; 12
    2542:	29 2f       	mov	r18, r25
    2544:	28 2b       	or	r18, r24
    2546:	8d 85       	ldd	r24, Y+13	; 0x0d
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	95 95       	asr	r25
    254e:	87 95       	ror	r24
    2550:	83 70       	andi	r24, 0x03	; 3
    2552:	82 2b       	or	r24, r18
    2554:	28 2f       	mov	r18, r24
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	fc 01       	movw	r30, r24
    255c:	20 83       	st	Z, r18
    255e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2560:	28 2f       	mov	r18, r24
    2562:	21 70       	andi	r18, 0x01	; 1
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	fc 01       	movw	r30, r24
    256a:	21 83       	std	Z+1, r18	; 0x01
    256c:	00 00       	nop
    256e:	65 96       	adiw	r28, 0x15	; 21
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	00 d0       	rcall	.+0      	; 0x2588 <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9b 83       	std	Y+3, r25	; 0x03
    258e:	8a 83       	std	Y+2, r24	; 0x02
    2590:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    2594:	88 23       	and	r24, r24
    2596:	31 f1       	breq	.+76     	; 0x25e4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2598:	8f e5       	ldi	r24, 0x5F	; 95
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	80 81       	ld	r24, Z
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	f8 94       	cli
    25a4:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	c9 f4       	brne	.+50     	; 0x25de <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    25ac:	8d e3       	ldi	r24, 0x3D	; 61
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	fc 01       	movw	r30, r24
    25b2:	80 81       	ld	r24, Z
    25b4:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    25b8:	8d e3       	ldi	r24, 0x3D	; 61
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	2d e3       	ldi	r18, 0x3D	; 61
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	f9 01       	movw	r30, r18
    25c2:	20 81       	ld	r18, Z
    25c4:	32 2f       	mov	r19, r18
    25c6:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <_ZN8SPIClass13interruptMaskE>
    25ca:	20 95       	com	r18
    25cc:	23 23       	and	r18, r19
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
    25d2:	8f e5       	ldi	r24, 0x5F	; 95
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	29 81       	ldd	r18, Y+1	; 0x01
    25d8:	fc 01       	movw	r30, r24
    25da:	20 83       	st	Z, r18
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    25e4:	8c e4       	ldi	r24, 0x4C	; 76
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	2a 81       	ldd	r18, Y+2	; 0x02
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
    25ee:	8d e4       	ldi	r24, 0x4D	; 77
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	2b 81       	ldd	r18, Y+3	; 0x03
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18
    25f8:	00 00       	nop
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <_ZN8SPIClass8transferEh>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	1f 92       	push	r1
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	8e e4       	ldi	r24, 0x4E	; 78
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	29 81       	ldd	r18, Y+1	; 0x01
    2618:	fc 01       	movw	r30, r24
    261a:	20 83       	st	Z, r18
    261c:	00 00       	nop
    261e:	8d e4       	ldi	r24, 0x4D	; 77
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	fc 01       	movw	r30, r24
    2624:	80 81       	ld	r24, Z
    2626:	80 95       	com	r24
    2628:	88 1f       	adc	r24, r24
    262a:	88 27       	eor	r24, r24
    262c:	88 1f       	adc	r24, r24
    262e:	88 23       	and	r24, r24
    2630:	09 f0       	breq	.+2      	; 0x2634 <_ZN8SPIClass8transferEh+0x2e>
    2632:	f5 cf       	rjmp	.-22     	; 0x261e <_ZN8SPIClass8transferEh+0x18>
    2634:	8e e4       	ldi	r24, 0x4E	; 78
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	fc 01       	movw	r30, r24
    263a:	80 81       	ld	r24, Z
    263c:	0f 90       	pop	r0
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <_ZN8SPIClass14endTransactionEv>:
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	1f 92       	push	r1
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    2652:	88 23       	and	r24, r24
    2654:	e1 f0       	breq	.+56     	; 0x268e <_ZN8SPIClass14endTransactionEv+0x4a>
    2656:	8f e5       	ldi	r24, 0x5F	; 95
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	fc 01       	movw	r30, r24
    265c:	80 81       	ld	r24, Z
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	f8 94       	cli
    2662:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	61 f4       	brne	.+24     	; 0x2682 <_ZN8SPIClass14endTransactionEv+0x3e>
    266a:	8d e3       	ldi	r24, 0x3D	; 61
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    2672:	fc 01       	movw	r30, r24
    2674:	20 83       	st	Z, r18
    2676:	8f e5       	ldi	r24, 0x5F	; 95
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	29 81       	ldd	r18, Y+1	; 0x01
    267c:	fc 01       	movw	r30, r24
    267e:	20 83       	st	Z, r18
    2680:	06 c0       	rjmp	.+12     	; 0x268e <_ZN8SPIClass14endTransactionEv+0x4a>
    2682:	8f e5       	ldi	r24, 0x5F	; 95
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    268a:	fc 01       	movw	r30, r24
    268c:	20 83       	st	Z, r18
    268e:	00 00       	nop
    2690:	0f 90       	pop	r0
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	08 95       	ret

00002698 <_ZN7MFRC522C1Ehh>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	00 d0       	rcall	.+0      	; 0x269e <_ZN7MFRC522C1Ehh+0x6>
    269e:	1f 92       	push	r1
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	6b 83       	std	Y+3, r22	; 0x03
    26aa:	4c 83       	std	Y+4, r20	; 0x04
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	2b 81       	ldd	r18, Y+3	; 0x03
    26b2:	fc 01       	movw	r30, r24
    26b4:	24 87       	std	Z+12, r18	; 0x0c
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	2c 81       	ldd	r18, Y+4	; 0x04
    26bc:	fc 01       	movw	r30, r24
    26be:	25 87       	std	Z+13, r18	; 0x0d
    26c0:	00 00       	nop
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    26d0:	0f 93       	push	r16
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	6d 83       	std	Y+5, r22	; 0x05
    26e4:	4e 83       	std	Y+6, r20	; 0x06
    26e6:	00 e0       	ldi	r16, 0x00	; 0
    26e8:	21 e0       	ldi	r18, 0x01	; 1
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	ba 01       	movw	r22, r20
    26f0:	ce 01       	movw	r24, r28
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	9f de       	rcall	.-706    	; 0x2434 <_ZN11SPISettingsC1Emhh>
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	43 df       	rcall	.-378    	; 0x2582 <_ZN8SPIClass16beginTransactionE11SPISettings>
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	fc 01       	movw	r30, r24
    2702:	84 85       	ldd	r24, Z+12	; 0x0c
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	8e 77       	andi	r24, 0x7E	; 126
    270e:	7b df       	rcall	.-266    	; 0x2606 <_ZN8SPIClass8transferEh>
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	79 df       	rcall	.-270    	; 0x2606 <_ZN8SPIClass8transferEh>
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	fc 01       	movw	r30, r24
    271a:	84 85       	ldd	r24, Z+12	; 0x0c
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    2722:	90 df       	rcall	.-224    	; 0x2644 <_ZN8SPIClass14endTransactionEv>
    2724:	00 00       	nop
    2726:	26 96       	adiw	r28, 0x06	; 6
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	0f 91       	pop	r16
    2738:	08 95       	ret

0000273a <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    273a:	0f 93       	push	r16
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	29 97       	sbiw	r28, 0x09	; 9
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	9d 83       	std	Y+5, r25	; 0x05
    2752:	8c 83       	std	Y+4, r24	; 0x04
    2754:	6e 83       	std	Y+6, r22	; 0x06
    2756:	4f 83       	std	Y+7, r20	; 0x07
    2758:	39 87       	std	Y+9, r19	; 0x09
    275a:	28 87       	std	Y+8, r18	; 0x08
    275c:	ce 01       	movw	r24, r28
    275e:	02 96       	adiw	r24, 0x02	; 2
    2760:	00 e0       	ldi	r16, 0x00	; 0
    2762:	21 e0       	ldi	r18, 0x01	; 1
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	ba 01       	movw	r22, r20
    276a:	64 de       	rcall	.-824    	; 0x2434 <_ZN11SPISettingsC1Emhh>
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	9b 81       	ldd	r25, Y+3	; 0x03
    2770:	08 df       	rcall	.-496    	; 0x2582 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2772:	8c 81       	ldd	r24, Y+4	; 0x04
    2774:	9d 81       	ldd	r25, Y+5	; 0x05
    2776:	fc 01       	movw	r30, r24
    2778:	84 85       	ldd	r24, Z+12	; 0x0c
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    2780:	8e 81       	ldd	r24, Y+6	; 0x06
    2782:	8e 77       	andi	r24, 0x7E	; 126
    2784:	40 df       	rcall	.-384    	; 0x2606 <_ZN8SPIClass8transferEh>
    2786:	19 82       	std	Y+1, r1	; 0x01
    2788:	99 81       	ldd	r25, Y+1	; 0x01
    278a:	8f 81       	ldd	r24, Y+7	; 0x07
    278c:	98 17       	cp	r25, r24
    278e:	70 f4       	brcc	.+28     	; 0x27ac <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	28 85       	ldd	r18, Y+8	; 0x08
    2798:	39 85       	ldd	r19, Y+9	; 0x09
    279a:	82 0f       	add	r24, r18
    279c:	93 1f       	adc	r25, r19
    279e:	fc 01       	movw	r30, r24
    27a0:	80 81       	ld	r24, Z
    27a2:	31 df       	rcall	.-414    	; 0x2606 <_ZN8SPIClass8transferEh>
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	ee cf       	rjmp	.-36     	; 0x2788 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    27ac:	8c 81       	ldd	r24, Y+4	; 0x04
    27ae:	9d 81       	ldd	r25, Y+5	; 0x05
    27b0:	fc 01       	movw	r30, r24
    27b2:	84 85       	ldd	r24, Z+12	; 0x0c
    27b4:	61 e0       	ldi	r22, 0x01	; 1
    27b6:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    27ba:	44 df       	rcall	.-376    	; 0x2644 <_ZN8SPIClass14endTransactionEv>
    27bc:	00 00       	nop
    27be:	29 96       	adiw	r28, 0x09	; 9
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    27d2:	0f 93       	push	r16
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	00 d0       	rcall	.+0      	; 0x27da <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    27da:	00 d0       	rcall	.+0      	; 0x27dc <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9d 83       	std	Y+5, r25	; 0x05
    27e2:	8c 83       	std	Y+4, r24	; 0x04
    27e4:	6e 83       	std	Y+6, r22	; 0x06
    27e6:	ce 01       	movw	r24, r28
    27e8:	02 96       	adiw	r24, 0x02	; 2
    27ea:	00 e0       	ldi	r16, 0x00	; 0
    27ec:	21 e0       	ldi	r18, 0x01	; 1
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	ba 01       	movw	r22, r20
    27f4:	1f de       	rcall	.-962    	; 0x2434 <_ZN11SPISettingsC1Emhh>
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	c3 de       	rcall	.-634    	; 0x2582 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	fc 01       	movw	r30, r24
    2802:	84 85       	ldd	r24, Z+12	; 0x0c
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    280a:	8e 81       	ldd	r24, Y+6	; 0x06
    280c:	8e 77       	andi	r24, 0x7E	; 126
    280e:	80 68       	ori	r24, 0x80	; 128
    2810:	fa de       	rcall	.-524    	; 0x2606 <_ZN8SPIClass8transferEh>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	f8 de       	rcall	.-528    	; 0x2606 <_ZN8SPIClass8transferEh>
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	fc 01       	movw	r30, r24
    281e:	84 85       	ldd	r24, Z+12	; 0x0c
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    2826:	0e df       	rcall	.-484    	; 0x2644 <_ZN8SPIClass14endTransactionEv>
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	26 96       	adiw	r28, 0x06	; 6
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	0f 91       	pop	r16
    283c:	08 95       	ret

0000283e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	2e 97       	sbiw	r28, 0x0e	; 14
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	99 87       	std	Y+9, r25	; 0x09
    2858:	88 87       	std	Y+8, r24	; 0x08
    285a:	6a 87       	std	Y+10, r22	; 0x0a
    285c:	4b 87       	std	Y+11, r20	; 0x0b
    285e:	3d 87       	std	Y+13, r19	; 0x0d
    2860:	2c 87       	std	Y+12, r18	; 0x0c
    2862:	0e 87       	std	Y+14, r16	; 0x0e
    2864:	8b 85       	ldd	r24, Y+11	; 0x0b
    2866:	88 23       	and	r24, r24
    2868:	09 f4       	brne	.+2      	; 0x286c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    286a:	7e c0       	rjmp	.+252    	; 0x2968 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    286c:	8a 85       	ldd	r24, Y+10	; 0x0a
    286e:	8e 77       	andi	r24, 0x7E	; 126
    2870:	80 68       	ori	r24, 0x80	; 128
    2872:	8c 83       	std	Y+4, r24	; 0x04
    2874:	19 82       	std	Y+1, r1	; 0x01
    2876:	ce 01       	movw	r24, r28
    2878:	06 96       	adiw	r24, 0x06	; 6
    287a:	00 e0       	ldi	r16, 0x00	; 0
    287c:	21 e0       	ldi	r18, 0x01	; 1
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	ba 01       	movw	r22, r20
    2884:	d7 dd       	rcall	.-1106   	; 0x2434 <_ZN11SPISettingsC1Emhh>
    2886:	8e 81       	ldd	r24, Y+6	; 0x06
    2888:	9f 81       	ldd	r25, Y+7	; 0x07
    288a:	7b de       	rcall	.-778    	; 0x2582 <_ZN8SPIClass16beginTransactionE11SPISettings>
    288c:	88 85       	ldd	r24, Y+8	; 0x08
    288e:	99 85       	ldd	r25, Y+9	; 0x09
    2890:	fc 01       	movw	r30, r24
    2892:	84 85       	ldd	r24, Z+12	; 0x0c
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    289a:	8b 85       	ldd	r24, Y+11	; 0x0b
    289c:	81 50       	subi	r24, 0x01	; 1
    289e:	8b 87       	std	Y+11, r24	; 0x0b
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	b1 de       	rcall	.-670    	; 0x2606 <_ZN8SPIClass8transferEh>
    28a4:	99 81       	ldd	r25, Y+1	; 0x01
    28a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a8:	98 17       	cp	r25, r24
    28aa:	08 f0       	brcs	.+2      	; 0x28ae <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    28ac:	48 c0       	rjmp	.+144    	; 0x293e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	88 23       	and	r24, r24
    28b2:	a9 f5       	brne	.+106    	; 0x291e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    28b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    28b6:	88 23       	and	r24, r24
    28b8:	91 f1       	breq	.+100    	; 0x291e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    28ba:	1a 82       	std	Y+2, r1	; 0x02
    28bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    28be:	8b 83       	std	Y+3, r24	; 0x03
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	88 30       	cpi	r24, 0x08	; 8
    28c4:	90 f4       	brcc	.+36     	; 0x28ea <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	2a 95       	dec	r18
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    28da:	98 2f       	mov	r25, r24
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	89 2b       	or	r24, r25
    28e0:	8a 83       	std	Y+2, r24	; 0x02
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	eb cf       	rjmp	.-42     	; 0x28c0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	8c de       	rcall	.-744    	; 0x2606 <_ZN8SPIClass8transferEh>
    28ee:	8d 83       	std	Y+5, r24	; 0x05
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	88 2f       	mov	r24, r24
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    28f8:	3d 85       	ldd	r19, Y+13	; 0x0d
    28fa:	82 0f       	add	r24, r18
    28fc:	93 1f       	adc	r25, r19
    28fe:	fc 01       	movw	r30, r24
    2900:	80 81       	ld	r24, Z
    2902:	98 2f       	mov	r25, r24
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	80 95       	com	r24
    2908:	89 23       	and	r24, r25
    290a:	2d 81       	ldd	r18, Y+5	; 0x05
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	92 23       	and	r25, r18
    2910:	89 2b       	or	r24, r25
    2912:	28 2f       	mov	r18, r24
    2914:	8c 85       	ldd	r24, Y+12	; 0x0c
    2916:	9d 85       	ldd	r25, Y+13	; 0x0d
    2918:	fc 01       	movw	r30, r24
    291a:	20 83       	st	Z, r18
    291c:	0c c0       	rjmp	.+24     	; 0x2936 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	2c 85       	ldd	r18, Y+12	; 0x0c
    2926:	3d 85       	ldd	r19, Y+13	; 0x0d
    2928:	89 01       	movw	r16, r18
    292a:	08 0f       	add	r16, r24
    292c:	19 1f       	adc	r17, r25
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	6a de       	rcall	.-812    	; 0x2606 <_ZN8SPIClass8transferEh>
    2932:	f8 01       	movw	r30, r16
    2934:	80 83       	st	Z, r24
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	b3 cf       	rjmp	.-154    	; 0x28a4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	2c 85       	ldd	r18, Y+12	; 0x0c
    2946:	3d 85       	ldd	r19, Y+13	; 0x0d
    2948:	89 01       	movw	r16, r18
    294a:	08 0f       	add	r16, r24
    294c:	19 1f       	adc	r17, r25
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	5a de       	rcall	.-844    	; 0x2606 <_ZN8SPIClass8transferEh>
    2952:	f8 01       	movw	r30, r16
    2954:	80 83       	st	Z, r24
    2956:	88 85       	ldd	r24, Y+8	; 0x08
    2958:	99 85       	ldd	r25, Y+9	; 0x09
    295a:	fc 01       	movw	r30, r24
    295c:	84 85       	ldd	r24, Z+12	; 0x0c
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    2964:	6f de       	rcall	.-802    	; 0x2644 <_ZN8SPIClass14endTransactionEv>
    2966:	01 c0       	rjmp	.+2      	; 0x296a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    2968:	00 00       	nop
    296a:	2e 96       	adiw	r28, 0x0e	; 14
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	08 95       	ret

00002980 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	00 d0       	rcall	.+0      	; 0x2986 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    2986:	1f 92       	push	r1
    2988:	1f 92       	push	r1
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	9b 83       	std	Y+3, r25	; 0x03
    2990:	8a 83       	std	Y+2, r24	; 0x02
    2992:	6c 83       	std	Y+4, r22	; 0x04
    2994:	4d 83       	std	Y+5, r20	; 0x05
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	6c 81       	ldd	r22, Y+4	; 0x04
    299c:	1a df       	rcall	.-460    	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	99 81       	ldd	r25, Y+1	; 0x01
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	29 2f       	mov	r18, r25
    29a6:	28 2b       	or	r18, r24
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	42 2f       	mov	r20, r18
    29ae:	6c 81       	ldd	r22, Y+4	; 0x04
    29b0:	8f de       	rcall	.-738    	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    29b2:	00 00       	nop
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    29ca:	1f 92       	push	r1
    29cc:	1f 92       	push	r1
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	9b 83       	std	Y+3, r25	; 0x03
    29d4:	8a 83       	std	Y+2, r24	; 0x02
    29d6:	6c 83       	std	Y+4, r22	; 0x04
    29d8:	4d 83       	std	Y+5, r20	; 0x05
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	9b 81       	ldd	r25, Y+3	; 0x03
    29de:	6c 81       	ldd	r22, Y+4	; 0x04
    29e0:	f8 de       	rcall	.-528    	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	98 2f       	mov	r25, r24
    29e8:	90 95       	com	r25
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	89 23       	and	r24, r25
    29ee:	28 2f       	mov	r18, r24
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	42 2f       	mov	r20, r18
    29f6:	6c 81       	ldd	r22, Y+4	; 0x04
    29f8:	6b de       	rcall	.-810    	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    29fa:	00 00       	nop
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	2a 97       	sbiw	r28, 0x0a	; 10
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	9d 83       	std	Y+5, r25	; 0x05
    2a26:	8c 83       	std	Y+4, r24	; 0x04
    2a28:	7f 83       	std	Y+7, r23	; 0x07
    2a2a:	6e 83       	std	Y+6, r22	; 0x06
    2a2c:	48 87       	std	Y+8, r20	; 0x08
    2a2e:	3a 87       	std	Y+10, r19	; 0x0a
    2a30:	29 87       	std	Y+9, r18	; 0x09
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	62 e0       	ldi	r22, 0x02	; 2
    2a3a:	4a de       	rcall	.-876    	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	44 e0       	ldi	r20, 0x04	; 4
    2a42:	6a e0       	ldi	r22, 0x0A	; 10
    2a44:	45 de       	rcall	.-886    	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	64 e1       	ldi	r22, 0x14	; 20
    2a4e:	98 df       	rcall	.-208    	; 0x2980 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2a50:	2e 81       	ldd	r18, Y+6	; 0x06
    2a52:	3f 81       	ldd	r19, Y+7	; 0x07
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	9d 81       	ldd	r25, Y+5	; 0x05
    2a58:	48 85       	ldd	r20, Y+8	; 0x08
    2a5a:	62 e1       	ldi	r22, 0x12	; 18
    2a5c:	6e de       	rcall	.-804    	; 0x273a <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a60:	9d 81       	ldd	r25, Y+5	; 0x05
    2a62:	43 e0       	ldi	r20, 0x03	; 3
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	34 de       	rcall	.-920    	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a68:	88 e8       	ldi	r24, 0x88	; 136
    2a6a:	93 e1       	ldi	r25, 0x13	; 19
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	6a e0       	ldi	r22, 0x0A	; 10
    2a76:	ad de       	rcall	.-678    	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2a78:	8b 83       	std	Y+3, r24	; 0x03
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	88 2f       	mov	r24, r24
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	84 70       	andi	r24, 0x04	; 4
    2a82:	99 27       	eor	r25, r25
    2a84:	89 2b       	or	r24, r25
    2a86:	79 f4       	brne	.+30     	; 0x2aa6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	21 e0       	ldi	r18, 0x01	; 1
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	89 2b       	or	r24, r25
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	22 23       	and	r18, r18
    2aa0:	39 f3       	breq	.-50     	; 0x2a70 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    2aa2:	83 e0       	ldi	r24, 0x03	; 3
    2aa4:	1b c0       	rjmp	.+54     	; 0x2adc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    2aa6:	00 00       	nop
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	62 e0       	ldi	r22, 0x02	; 2
    2ab0:	0f de       	rcall	.-994    	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab6:	64 e4       	ldi	r22, 0x44	; 68
    2ab8:	8c de       	rcall	.-744    	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2aba:	28 2f       	mov	r18, r24
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	20 83       	st	Z, r18
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	8c 01       	movw	r16, r24
    2aca:	0f 5f       	subi	r16, 0xFF	; 255
    2acc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ace:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad2:	62 e4       	ldi	r22, 0x42	; 66
    2ad4:	7e de       	rcall	.-772    	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	80 83       	st	Z, r24
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	2a 96       	adiw	r28, 0x0a	; 10
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	08 95       	ret

00002af2 <_ZN7MFRC5228PCD_InitEv>:
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	1f 92       	push	r1
    2af8:	1f 92       	push	r1
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	9a 81       	ldd	r25, Y+2	; 0x02
    2b06:	fc 01       	movw	r30, r24
    2b08:	84 85       	ldd	r24, Z+12	; 0x0c
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	fc 01       	movw	r30, r24
    2b16:	84 85       	ldd	r24, Z+12	; 0x0c
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	fc 01       	movw	r30, r24
    2b24:	85 85       	ldd	r24, Z+13	; 0x0d
    2b26:	61 e0       	ldi	r22, 0x01	; 1
    2b28:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	fc 01       	movw	r30, r24
    2b32:	85 85       	ldd	r24, Z+13	; 0x0d
    2b34:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <digitalRead>
    2b38:	21 e0       	ldi	r18, 0x01	; 1
    2b3a:	89 2b       	or	r24, r25
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <_ZN7MFRC5228PCD_InitEv+0x4e>
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	22 23       	and	r18, r18
    2b42:	71 f0       	breq	.+28     	; 0x2b60 <_ZN7MFRC5228PCD_InitEv+0x6e>
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	9a 81       	ldd	r25, Y+2	; 0x02
    2b48:	fc 01       	movw	r30, r24
    2b4a:	85 85       	ldd	r24, Z+13	; 0x0d
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    2b52:	62 e3       	ldi	r22, 0x32	; 50
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <_ZN7MFRC5228PCD_InitEv+0x74>
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	27 d0       	rcall	.+78     	; 0x2bb4 <_ZN7MFRC5229PCD_ResetEv>
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	40 e8       	ldi	r20, 0x80	; 128
    2b6c:	64 e5       	ldi	r22, 0x54	; 84
    2b6e:	b0 dd       	rcall	.-1184   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	49 ea       	ldi	r20, 0xA9	; 169
    2b76:	66 e5       	ldi	r22, 0x56	; 86
    2b78:	ab dd       	rcall	.-1194   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	43 e0       	ldi	r20, 0x03	; 3
    2b80:	68 e5       	ldi	r22, 0x58	; 88
    2b82:	a6 dd       	rcall	.-1204   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	48 ee       	ldi	r20, 0xE8	; 232
    2b8a:	6a e5       	ldi	r22, 0x5A	; 90
    2b8c:	a1 dd       	rcall	.-1214   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	40 e4       	ldi	r20, 0x40	; 64
    2b94:	6a e2       	ldi	r22, 0x2A	; 42
    2b96:	9c dd       	rcall	.-1224   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	4d e3       	ldi	r20, 0x3D	; 61
    2b9e:	62 e2       	ldi	r22, 0x22	; 34
    2ba0:	97 dd       	rcall	.-1234   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	2e d0       	rcall	.+92     	; 0x2c04 <_ZN7MFRC52213PCD_AntennaOnEv>
    2ba8:	00 00       	nop
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <_ZN7MFRC5229PCD_ResetEv>:
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	1f 92       	push	r1
    2bba:	1f 92       	push	r1
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	4f e0       	ldi	r20, 0x0F	; 15
    2bca:	62 e0       	ldi	r22, 0x02	; 2
    2bcc:	81 dd       	rcall	.-1278   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bce:	62 e3       	ldi	r22, 0x32	; 50
    2bd0:	70 e0       	ldi	r23, 0x00	; 0
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 ed 2c 	call	0x59da	; 0x59da <delay>
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	62 e0       	ldi	r22, 0x02	; 2
    2be0:	f8 dd       	rcall	.-1040   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2be2:	88 2f       	mov	r24, r24
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	80 71       	andi	r24, 0x10	; 16
    2be8:	99 27       	eor	r25, r25
    2bea:	21 e0       	ldi	r18, 0x01	; 1
    2bec:	89 2b       	or	r24, r25
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	22 23       	and	r18, r18
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <_ZN7MFRC5229PCD_ResetEv+0x44>
    2bf6:	f1 cf       	rjmp	.-30     	; 0x2bda <_ZN7MFRC5229PCD_ResetEv+0x26>
    2bf8:	00 00       	nop
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	08 95       	ret

00002c04 <_ZN7MFRC52213PCD_AntennaOnEv>:
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	9b 83       	std	Y+3, r25	; 0x03
    2c10:	8a 83       	std	Y+2, r24	; 0x02
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	9b 81       	ldd	r25, Y+3	; 0x03
    2c16:	68 e2       	ldi	r22, 0x28	; 40
    2c18:	dc dd       	rcall	.-1096   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	83 70       	andi	r24, 0x03	; 3
    2c24:	99 27       	eor	r25, r25
    2c26:	03 97       	sbiw	r24, 0x03	; 3
    2c28:	41 f0       	breq	.+16     	; 0x2c3a <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	23 60       	ori	r18, 0x03	; 3
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	42 2f       	mov	r20, r18
    2c36:	68 e2       	ldi	r22, 0x28	; 40
    2c38:	4b dd       	rcall	.-1386   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c3a:	00 00       	nop
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2c48:	8f 92       	push	r8
    2c4a:	af 92       	push	r10
    2c4c:	bf 92       	push	r11
    2c4e:	cf 92       	push	r12
    2c50:	df 92       	push	r13
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	cf 93       	push	r28
    2c5c:	df 93       	push	r29
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	2e 97       	sbiw	r28, 0x0e	; 14
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	9b 83       	std	Y+3, r25	; 0x03
    2c70:	8a 83       	std	Y+2, r24	; 0x02
    2c72:	7d 83       	std	Y+5, r23	; 0x05
    2c74:	6c 83       	std	Y+4, r22	; 0x04
    2c76:	4e 83       	std	Y+6, r20	; 0x06
    2c78:	38 87       	std	Y+8, r19	; 0x08
    2c7a:	2f 83       	std	Y+7, r18	; 0x07
    2c7c:	1a 87       	std	Y+10, r17	; 0x0a
    2c7e:	09 87       	std	Y+9, r16	; 0x09
    2c80:	fc 86       	std	Y+12, r15	; 0x0c
    2c82:	eb 86       	std	Y+11, r14	; 0x0b
    2c84:	cd 86       	std	Y+13, r12	; 0x0d
    2c86:	ae 86       	std	Y+14, r10	; 0x0e
    2c88:	80 e3       	ldi	r24, 0x30	; 48
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c8e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c90:	69 85       	ldd	r22, Y+9	; 0x09
    2c92:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c94:	4f 81       	ldd	r20, Y+7	; 0x07
    2c96:	58 85       	ldd	r21, Y+8	; 0x08
    2c98:	2c 81       	ldd	r18, Y+4	; 0x04
    2c9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ca2:	af 93       	push	r26
    2ca4:	8d 84       	ldd	r8, Y+13	; 0x0d
    2ca6:	5f 01       	movw	r10, r30
    2ca8:	6b 01       	movw	r12, r22
    2caa:	7a 01       	movw	r14, r20
    2cac:	0e 81       	ldd	r16, Y+6	; 0x06
    2cae:	49 81       	ldd	r20, Y+1	; 0x01
    2cb0:	6c e0       	ldi	r22, 0x0C	; 12
    2cb2:	13 d0       	rcall	.+38     	; 0x2cda <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2cb4:	0f 90       	pop	r0
    2cb6:	2e 96       	adiw	r28, 0x0e	; 14
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	bf 90       	pop	r11
    2cd4:	af 90       	pop	r10
    2cd6:	8f 90       	pop	r8
    2cd8:	08 95       	ret

00002cda <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2cda:	8f 92       	push	r8
    2cdc:	af 92       	push	r10
    2cde:	bf 92       	push	r11
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	68 97       	sbiw	r28, 0x18	; 24
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	9c 87       	std	Y+12, r25	; 0x0c
    2d00:	8b 87       	std	Y+11, r24	; 0x0b
    2d02:	6d 87       	std	Y+13, r22	; 0x0d
    2d04:	4e 87       	std	Y+14, r20	; 0x0e
    2d06:	38 8b       	std	Y+16, r19	; 0x10
    2d08:	2f 87       	std	Y+15, r18	; 0x0f
    2d0a:	09 8b       	std	Y+17, r16	; 0x11
    2d0c:	fb 8a       	std	Y+19, r15	; 0x13
    2d0e:	ea 8a       	std	Y+18, r14	; 0x12
    2d10:	dd 8a       	std	Y+21, r13	; 0x15
    2d12:	cc 8a       	std	Y+20, r12	; 0x14
    2d14:	bf 8a       	std	Y+23, r11	; 0x17
    2d16:	ae 8a       	std	Y+22, r10	; 0x16
    2d18:	88 8e       	std	Y+24, r8	; 0x18
    2d1a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d1c:	9f 89       	ldd	r25, Y+23	; 0x17
    2d1e:	89 2b       	or	r24, r25
    2d20:	29 f0       	breq	.+10     	; 0x2d2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    2d22:	8e 89       	ldd	r24, Y+22	; 0x16
    2d24:	9f 89       	ldd	r25, Y+23	; 0x17
    2d26:	fc 01       	movw	r30, r24
    2d28:	80 81       	ld	r24, Z
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	8c 83       	std	Y+4, r24	; 0x04
    2d30:	88 8d       	ldd	r24, Y+24	; 0x18
    2d32:	98 2f       	mov	r25, r24
    2d34:	92 95       	swap	r25
    2d36:	90 7f       	andi	r25, 0xF0	; 240
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	89 0f       	add	r24, r25
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d40:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	62 e0       	ldi	r22, 0x02	; 2
    2d46:	c4 dc       	rcall	.-1656   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	68 e0       	ldi	r22, 0x08	; 8
    2d50:	bf dc       	rcall	.-1666   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d54:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	64 e1       	ldi	r22, 0x14	; 20
    2d5a:	12 de       	rcall	.-988    	; 0x2980 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2d5c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d5e:	38 89       	ldd	r19, Y+16	; 0x10
    2d60:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d62:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d64:	49 89       	ldd	r20, Y+17	; 0x11
    2d66:	62 e1       	ldi	r22, 0x12	; 18
    2d68:	e8 dc       	rcall	.-1584   	; 0x273a <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d6e:	4d 81       	ldd	r20, Y+5	; 0x05
    2d70:	6a e1       	ldi	r22, 0x1A	; 26
    2d72:	ae dc       	rcall	.-1700   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d78:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	a9 dc       	rcall	.-1710   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	8c 30       	cpi	r24, 0x0C	; 12
    2d82:	29 f4       	brne	.+10     	; 0x2d8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2d84:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d86:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d88:	40 e8       	ldi	r20, 0x80	; 128
    2d8a:	6a e1       	ldi	r22, 0x1A	; 26
    2d8c:	f9 dd       	rcall	.-1038   	; 0x2980 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2d8e:	80 ed       	ldi	r24, 0xD0	; 208
    2d90:	97 e0       	ldi	r25, 0x07	; 7
    2d92:	9b 83       	std	Y+3, r25	; 0x03
    2d94:	8a 83       	std	Y+2, r24	; 0x02
    2d96:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d98:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d9a:	68 e0       	ldi	r22, 0x08	; 8
    2d9c:	1a dd       	rcall	.-1484   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d9e:	8e 83       	std	Y+6, r24	; 0x06
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2da4:	89 23       	and	r24, r25
    2da6:	88 23       	and	r24, r24
    2da8:	c1 f4       	brne	.+48     	; 0x2dda <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    2daa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	81 70       	andi	r24, 0x01	; 1
    2db2:	99 27       	eor	r25, r25
    2db4:	89 2b       	or	r24, r25
    2db6:	11 f0       	breq	.+4      	; 0x2dbc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2db8:	83 e0       	ldi	r24, 0x03	; 3
    2dba:	b4 c0       	rjmp	.+360    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9b 83       	std	Y+3, r25	; 0x03
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
    2dc6:	21 e0       	ldi	r18, 0x01	; 1
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	9b 81       	ldd	r25, Y+3	; 0x03
    2dcc:	89 2b       	or	r24, r25
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	22 23       	and	r18, r18
    2dd4:	01 f3       	breq	.-64     	; 0x2d96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    2dd6:	83 e0       	ldi	r24, 0x03	; 3
    2dd8:	a5 c0       	rjmp	.+330    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2dda:	00 00       	nop
    2ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dde:	9c 85       	ldd	r25, Y+12	; 0x0c
    2de0:	6c e0       	ldi	r22, 0x0C	; 12
    2de2:	f7 dc       	rcall	.-1554   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2de4:	8f 83       	std	Y+7, r24	; 0x07
    2de6:	8f 81       	ldd	r24, Y+7	; 0x07
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	83 71       	andi	r24, 0x13	; 19
    2dee:	99 27       	eor	r25, r25
    2df0:	89 2b       	or	r24, r25
    2df2:	11 f0       	breq	.+4      	; 0x2df8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	96 c0       	rjmp	.+300    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2df8:	8a 89       	ldd	r24, Y+18	; 0x12
    2dfa:	9b 89       	ldd	r25, Y+19	; 0x13
    2dfc:	89 2b       	or	r24, r25
    2dfe:	71 f1       	breq	.+92     	; 0x2e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e00:	8c 89       	ldd	r24, Y+20	; 0x14
    2e02:	9d 89       	ldd	r25, Y+21	; 0x15
    2e04:	89 2b       	or	r24, r25
    2e06:	51 f1       	breq	.+84     	; 0x2e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e0c:	64 e1       	ldi	r22, 0x14	; 20
    2e0e:	e1 dc       	rcall	.-1598   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e10:	8e 83       	std	Y+6, r24	; 0x06
    2e12:	8c 89       	ldd	r24, Y+20	; 0x14
    2e14:	9d 89       	ldd	r25, Y+21	; 0x15
    2e16:	fc 01       	movw	r30, r24
    2e18:	90 81       	ld	r25, Z
    2e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1c:	98 17       	cp	r25, r24
    2e1e:	10 f4       	brcc	.+4      	; 0x2e24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    2e20:	84 e0       	ldi	r24, 0x04	; 4
    2e22:	80 c0       	rjmp	.+256    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e24:	8c 89       	ldd	r24, Y+20	; 0x14
    2e26:	9d 89       	ldd	r25, Y+21	; 0x15
    2e28:	2e 81       	ldd	r18, Y+6	; 0x06
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	20 83       	st	Z, r18
    2e2e:	2a 89       	ldd	r18, Y+18	; 0x12
    2e30:	3b 89       	ldd	r19, Y+19	; 0x13
    2e32:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e34:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e36:	08 8d       	ldd	r16, Y+24	; 0x18
    2e38:	4e 81       	ldd	r20, Y+6	; 0x06
    2e3a:	62 e1       	ldi	r22, 0x12	; 18
    2e3c:	00 dd       	rcall	.-1536   	; 0x283e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    2e3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e40:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e42:	68 e1       	ldi	r22, 0x18	; 24
    2e44:	c6 dc       	rcall	.-1652   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e46:	87 70       	andi	r24, 0x07	; 7
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e4c:	9f 89       	ldd	r25, Y+23	; 0x17
    2e4e:	89 2b       	or	r24, r25
    2e50:	29 f0       	breq	.+10     	; 0x2e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e52:	8e 89       	ldd	r24, Y+22	; 0x16
    2e54:	9f 89       	ldd	r25, Y+23	; 0x17
    2e56:	29 81       	ldd	r18, Y+1	; 0x01
    2e58:	fc 01       	movw	r30, r24
    2e5a:	20 83       	st	Z, r18
    2e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	88 70       	andi	r24, 0x08	; 8
    2e64:	99 27       	eor	r25, r25
    2e66:	89 2b       	or	r24, r25
    2e68:	11 f0       	breq	.+4      	; 0x2e6e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    2e6a:	82 e0       	ldi	r24, 0x02	; 2
    2e6c:	5b c0       	rjmp	.+182    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e6e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e70:	9b 89       	ldd	r25, Y+19	; 0x13
    2e72:	89 2b       	or	r24, r25
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    2e76:	55 c0       	rjmp	.+170    	; 0x2f22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e78:	8c 89       	ldd	r24, Y+20	; 0x14
    2e7a:	9d 89       	ldd	r25, Y+21	; 0x15
    2e7c:	89 2b       	or	r24, r25
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    2e80:	50 c0       	rjmp	.+160    	; 0x2f22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e82:	8e a1       	ldd	r24, Y+38	; 0x26
    2e84:	88 23       	and	r24, r24
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    2e88:	4c c0       	rjmp	.+152    	; 0x2f22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e8a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e8c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e8e:	fc 01       	movw	r30, r24
    2e90:	80 81       	ld	r24, Z
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	29 f4       	brne	.+10     	; 0x2ea0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	11 f4       	brne	.+4      	; 0x2ea0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2e9c:	8f ef       	ldi	r24, 0xFF	; 255
    2e9e:	42 c0       	rjmp	.+132    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ea0:	8c 89       	ldd	r24, Y+20	; 0x14
    2ea2:	9d 89       	ldd	r25, Y+21	; 0x15
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	80 81       	ld	r24, Z
    2ea8:	82 30       	cpi	r24, 0x02	; 2
    2eaa:	18 f0       	brcs	.+6      	; 0x2eb2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	88 23       	and	r24, r24
    2eb0:	11 f0       	breq	.+4      	; 0x2eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    2eb2:	87 e0       	ldi	r24, 0x07	; 7
    2eb4:	37 c0       	rjmp	.+110    	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2eb6:	8c 89       	ldd	r24, Y+20	; 0x14
    2eb8:	9d 89       	ldd	r25, Y+21	; 0x15
    2eba:	fc 01       	movw	r30, r24
    2ebc:	80 81       	ld	r24, Z
    2ebe:	4e ef       	ldi	r20, 0xFE	; 254
    2ec0:	48 0f       	add	r20, r24
    2ec2:	9e 01       	movw	r18, r28
    2ec4:	27 5f       	subi	r18, 0xF7	; 247
    2ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec8:	6a 89       	ldd	r22, Y+18	; 0x12
    2eca:	7b 89       	ldd	r23, Y+19	; 0x13
    2ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ece:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ed0:	9d dd       	rcall	.-1222   	; 0x2a0c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2ed2:	88 87       	std	Y+8, r24	; 0x08
    2ed4:	88 85       	ldd	r24, Y+8	; 0x08
    2ed6:	88 23       	and	r24, r24
    2ed8:	11 f0       	breq	.+4      	; 0x2ede <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    2eda:	88 85       	ldd	r24, Y+8	; 0x08
    2edc:	23 c0       	rjmp	.+70     	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ede:	8c 89       	ldd	r24, Y+20	; 0x14
    2ee0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	02 97       	sbiw	r24, 0x02	; 2
    2eec:	2a 89       	ldd	r18, Y+18	; 0x12
    2eee:	3b 89       	ldd	r19, Y+19	; 0x13
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	90 81       	ld	r25, Z
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	98 17       	cp	r25, r24
    2efc:	81 f4       	brne	.+32     	; 0x2f1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    2efe:	8c 89       	ldd	r24, Y+20	; 0x14
    2f00:	9d 89       	ldd	r25, Y+21	; 0x15
    2f02:	fc 01       	movw	r30, r24
    2f04:	80 81       	ld	r24, Z
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	2a 89       	ldd	r18, Y+18	; 0x12
    2f0e:	3b 89       	ldd	r19, Y+19	; 0x13
    2f10:	82 0f       	add	r24, r18
    2f12:	93 1f       	adc	r25, r19
    2f14:	fc 01       	movw	r30, r24
    2f16:	90 81       	ld	r25, Z
    2f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f1a:	98 17       	cp	r25, r24
    2f1c:	11 f0       	breq	.+4      	; 0x2f22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2f1e:	87 e0       	ldi	r24, 0x07	; 7
    2f20:	01 c0       	rjmp	.+2      	; 0x2f24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	68 96       	adiw	r28, 0x18	; 24
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	bf 90       	pop	r11
    2f40:	af 90       	pop	r10
    2f42:	8f 90       	pop	r8
    2f44:	08 95       	ret

00002f46 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	7c 83       	std	Y+4, r23	; 0x04
    2f58:	6b 83       	std	Y+3, r22	; 0x03
    2f5a:	5e 83       	std	Y+6, r21	; 0x06
    2f5c:	4d 83       	std	Y+5, r20	; 0x05
    2f5e:	2d 81       	ldd	r18, Y+5	; 0x05
    2f60:	3e 81       	ldd	r19, Y+6	; 0x06
    2f62:	4b 81       	ldd	r20, Y+3	; 0x03
    2f64:	5c 81       	ldd	r21, Y+4	; 0x04
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6a:	66 e2       	ldi	r22, 0x26	; 38
    2f6c:	09 d0       	rcall	.+18     	; 0x2f80 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    2f6e:	26 96       	adiw	r28, 0x06	; 6
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	08 95       	ret

00002f80 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2f80:	af 92       	push	r10
    2f82:	cf 92       	push	r12
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	29 97       	sbiw	r28, 0x09	; 9
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
    2fa4:	6d 83       	std	Y+5, r22	; 0x05
    2fa6:	5f 83       	std	Y+7, r21	; 0x07
    2fa8:	4e 83       	std	Y+6, r20	; 0x06
    2faa:	39 87       	std	Y+9, r19	; 0x09
    2fac:	28 87       	std	Y+8, r18	; 0x08
    2fae:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb2:	89 2b       	or	r24, r25
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    2fb6:	88 85       	ldd	r24, Y+8	; 0x08
    2fb8:	99 85       	ldd	r25, Y+9	; 0x09
    2fba:	fc 01       	movw	r30, r24
    2fbc:	80 81       	ld	r24, Z
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	10 f4       	brcc	.+4      	; 0x2fc6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    2fc2:	84 e0       	ldi	r24, 0x04	; 4
    2fc4:	2a c0       	rjmp	.+84     	; 0x301a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	6c e1       	ldi	r22, 0x1C	; 28
    2fce:	fa dc       	rcall	.-1548   	; 0x29c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    2fd0:	87 e0       	ldi	r24, 0x07	; 7
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	32 96       	adiw	r30, 0x02	; 2
    2fd8:	48 85       	ldd	r20, Y+8	; 0x08
    2fda:	59 85       	ldd	r21, Y+9	; 0x09
    2fdc:	2e 81       	ldd	r18, Y+6	; 0x06
    2fde:	3f 81       	ldd	r19, Y+7	; 0x07
    2fe0:	be 01       	movw	r22, r28
    2fe2:	6b 5f       	subi	r22, 0xFB	; 251
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	a1 2c       	mov	r10, r1
    2fec:	c1 2c       	mov	r12, r1
    2fee:	7f 01       	movw	r14, r30
    2ff0:	8a 01       	movw	r16, r20
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	29 de       	rcall	.-942    	; 0x2c48 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	88 23       	and	r24, r24
    2ffc:	11 f0       	breq	.+4      	; 0x3002 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	0c c0       	rjmp	.+24     	; 0x301a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3002:	88 85       	ldd	r24, Y+8	; 0x08
    3004:	99 85       	ldd	r25, Y+9	; 0x09
    3006:	fc 01       	movw	r30, r24
    3008:	80 81       	ld	r24, Z
    300a:	82 30       	cpi	r24, 0x02	; 2
    300c:	19 f4       	brne	.+6      	; 0x3014 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	88 23       	and	r24, r24
    3012:	11 f0       	breq	.+4      	; 0x3018 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	01 c0       	rjmp	.+2      	; 0x301a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	29 96       	adiw	r28, 0x09	; 9
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	ff 90       	pop	r15
    3030:	ef 90       	pop	r14
    3032:	cf 90       	pop	r12
    3034:	af 90       	pop	r10
    3036:	08 95       	ret

00003038 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    3038:	af 92       	push	r10
    303a:	cf 92       	push	r12
    303c:	ef 92       	push	r14
    303e:	ff 92       	push	r15
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	a1 97       	sbiw	r28, 0x21	; 33
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	9e 8f       	std	Y+30, r25	; 0x1e
    305a:	8d 8f       	std	Y+29, r24	; 0x1d
    305c:	78 a3       	std	Y+32, r23	; 0x20
    305e:	6f 8f       	std	Y+31, r22	; 0x1f
    3060:	49 a3       	std	Y+33, r20	; 0x21
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	8c 83       	std	Y+4, r24	; 0x04
    3066:	89 a1       	ldd	r24, Y+33	; 0x21
    3068:	81 35       	cpi	r24, 0x51	; 81
    306a:	10 f0       	brcs	.+4      	; 0x3070 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    306c:	86 e0       	ldi	r24, 0x06	; 6
    306e:	29 c2       	rjmp	.+1106   	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3072:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	6c e1       	ldi	r22, 0x1C	; 28
    3078:	a5 dc       	rcall	.-1718   	; 0x29c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    307a:	19 82       	std	Y+1, r1	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	88 23       	and	r24, r24
    3080:	09 f0       	breq	.+2      	; 0x3084 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    3082:	14 c2       	rjmp	.+1064   	; 0x34ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	88 2f       	mov	r24, r24
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	82 30       	cpi	r24, 0x02	; 2
    308c:	91 05       	cpc	r25, r1
    308e:	b1 f0       	breq	.+44     	; 0x30bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    3090:	83 30       	cpi	r24, 0x03	; 3
    3092:	91 05       	cpc	r25, r1
    3094:	29 f1       	breq	.+74     	; 0x30e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	49 f5       	brne	.+82     	; 0x30ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    309a:	83 e9       	ldi	r24, 0x93	; 147
    309c:	8a 8b       	std	Y+18, r24	; 0x12
    309e:	1f 82       	std	Y+7, r1	; 0x07
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	88 23       	and	r24, r24
    30a4:	41 f0       	breq	.+16     	; 0x30b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    30a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a8:	98 a1       	ldd	r25, Y+32	; 0x20
    30aa:	fc 01       	movw	r30, r24
    30ac:	80 81       	ld	r24, Z
    30ae:	85 30       	cpi	r24, 0x05	; 5
    30b0:	10 f0       	brcs	.+4      	; 0x30b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	8b 83       	std	Y+3, r24	; 0x03
    30ba:	1a c0       	rjmp	.+52     	; 0x30f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    30bc:	85 e9       	ldi	r24, 0x95	; 149
    30be:	8a 8b       	std	Y+18, r24	; 0x12
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	8f 83       	std	Y+7, r24	; 0x07
    30c4:	89 a1       	ldd	r24, Y+33	; 0x21
    30c6:	88 23       	and	r24, r24
    30c8:	41 f0       	breq	.+16     	; 0x30da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    30ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30cc:	98 a1       	ldd	r25, Y+32	; 0x20
    30ce:	fc 01       	movw	r30, r24
    30d0:	80 81       	ld	r24, Z
    30d2:	88 30       	cpi	r24, 0x08	; 8
    30d4:	10 f0       	brcs	.+4      	; 0x30da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	08 c0       	rjmp	.+16     	; 0x30f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    30e0:	87 e9       	ldi	r24, 0x97	; 151
    30e2:	8a 8b       	std	Y+18, r24	; 0x12
    30e4:	86 e0       	ldi	r24, 0x06	; 6
    30e6:	8f 83       	std	Y+7, r24	; 0x07
    30e8:	1b 82       	std	Y+3, r1	; 0x03
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    30ec:	85 e0       	ldi	r24, 0x05	; 5
    30ee:	e9 c1       	rjmp	.+978    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    30f0:	8f 81       	ldd	r24, Y+7	; 0x07
    30f2:	88 0f       	add	r24, r24
    30f4:	88 0f       	add	r24, r24
    30f6:	88 0f       	add	r24, r24
    30f8:	99 a1       	ldd	r25, Y+33	; 0x21
    30fa:	f9 2f       	mov	r31, r25
    30fc:	f8 1b       	sub	r31, r24
    30fe:	8f 2f       	mov	r24, r31
    3100:	88 87       	std	Y+8, r24	; 0x08
    3102:	88 85       	ldd	r24, Y+8	; 0x08
    3104:	88 23       	and	r24, r24
    3106:	0c f4       	brge	.+2      	; 0x310a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    3108:	18 86       	std	Y+8, r1	; 0x08
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	8e 83       	std	Y+6, r24	; 0x06
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	88 23       	and	r24, r24
    3112:	71 f0       	breq	.+28     	; 0x3130 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    3114:	8e 81       	ldd	r24, Y+6	; 0x06
    3116:	91 e0       	ldi	r25, 0x01	; 1
    3118:	98 0f       	add	r25, r24
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9e 01       	movw	r18, r28
    3122:	2e 5e       	subi	r18, 0xEE	; 238
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	82 0f       	add	r24, r18
    3128:	93 1f       	adc	r25, r19
    312a:	28 e8       	ldi	r18, 0x88	; 136
    312c:	fc 01       	movw	r30, r24
    312e:	20 83       	st	Z, r18
    3130:	88 85       	ldd	r24, Y+8	; 0x08
    3132:	88 23       	and	r24, r24
    3134:	0c f4       	brge	.+2      	; 0x3138 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3136:	89 5f       	subi	r24, 0xF9	; 249
    3138:	85 95       	asr	r24
    313a:	85 95       	asr	r24
    313c:	85 95       	asr	r24
    313e:	98 2f       	mov	r25, r24
    3140:	88 85       	ldd	r24, Y+8	; 0x08
    3142:	87 70       	andi	r24, 0x07	; 7
    3144:	88 23       	and	r24, r24
    3146:	11 f0       	breq	.+4      	; 0x314c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	01 c0       	rjmp	.+2      	; 0x314e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	89 0f       	add	r24, r25
    3150:	8c 87       	std	Y+12, r24	; 0x0c
    3152:	8c 85       	ldd	r24, Y+12	; 0x0c
    3154:	88 23       	and	r24, r24
    3156:	99 f1       	breq	.+102    	; 0x31be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	88 23       	and	r24, r24
    315c:	11 f0       	breq	.+4      	; 0x3162 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    315e:	83 e0       	ldi	r24, 0x03	; 3
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    3162:	84 e0       	ldi	r24, 0x04	; 4
    3164:	8e 87       	std	Y+14, r24	; 0x0e
    3166:	9c 85       	ldd	r25, Y+12	; 0x0c
    3168:	8e 85       	ldd	r24, Y+14	; 0x0e
    316a:	89 17       	cp	r24, r25
    316c:	10 f4       	brcc	.+4      	; 0x3172 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    316e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3170:	8c 87       	std	Y+12, r24	; 0x0c
    3172:	1d 82       	std	Y+5, r1	; 0x05
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	8c 85       	ldd	r24, Y+12	; 0x0c
    3178:	98 17       	cp	r25, r24
    317a:	08 f5       	brcc	.+66     	; 0x31be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    317c:	8e 81       	ldd	r24, Y+6	; 0x06
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	98 0f       	add	r25, r24
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	88 2f       	mov	r24, r24
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	2f 81       	ldd	r18, Y+7	; 0x07
    318a:	42 2f       	mov	r20, r18
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	2d 81       	ldd	r18, Y+5	; 0x05
    3190:	22 2f       	mov	r18, r18
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	24 0f       	add	r18, r20
    3196:	35 1f       	adc	r19, r21
    3198:	4f 8d       	ldd	r20, Y+31	; 0x1f
    319a:	58 a1       	ldd	r21, Y+32	; 0x20
    319c:	24 0f       	add	r18, r20
    319e:	35 1f       	adc	r19, r21
    31a0:	2f 5f       	subi	r18, 0xFF	; 255
    31a2:	3f 4f       	sbci	r19, 0xFF	; 255
    31a4:	f9 01       	movw	r30, r18
    31a6:	40 81       	ld	r20, Z
    31a8:	9e 01       	movw	r18, r28
    31aa:	2e 5e       	subi	r18, 0xEE	; 238
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	82 0f       	add	r24, r18
    31b0:	93 1f       	adc	r25, r19
    31b2:	fc 01       	movw	r30, r24
    31b4:	40 83       	st	Z, r20
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	8f 5f       	subi	r24, 0xFF	; 255
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	db cf       	rjmp	.-74     	; 0x3174 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	88 23       	and	r24, r24
    31c2:	19 f0       	breq	.+6      	; 0x31ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    31c4:	88 85       	ldd	r24, Y+8	; 0x08
    31c6:	88 5f       	subi	r24, 0xF8	; 248
    31c8:	88 87       	std	Y+8, r24	; 0x08
    31ca:	1a 82       	std	Y+2, r1	; 0x02
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	88 23       	and	r24, r24
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    31d2:	f5 c0       	rjmp	.+490    	; 0x33be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    31d4:	88 85       	ldd	r24, Y+8	; 0x08
    31d6:	80 32       	cpi	r24, 0x20	; 32
    31d8:	3c f1       	brlt	.+78     	; 0x3228 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    31da:	80 e7       	ldi	r24, 0x70	; 112
    31dc:	8b 8b       	std	Y+19, r24	; 0x13
    31de:	9c 89       	ldd	r25, Y+20	; 0x14
    31e0:	8d 89       	ldd	r24, Y+21	; 0x15
    31e2:	98 27       	eor	r25, r24
    31e4:	8e 89       	ldd	r24, Y+22	; 0x16
    31e6:	98 27       	eor	r25, r24
    31e8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ea:	89 27       	eor	r24, r25
    31ec:	88 8f       	std	Y+24, r24	; 0x18
    31ee:	ce 01       	movw	r24, r28
    31f0:	42 96       	adiw	r24, 0x12	; 18
    31f2:	9c 01       	movw	r18, r24
    31f4:	29 5f       	subi	r18, 0xF9	; 249
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	be 01       	movw	r22, r28
    31fa:	6e 5e       	subi	r22, 0xEE	; 238
    31fc:	7f 4f       	sbci	r23, 0xFF	; 255
    31fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3202:	47 e0       	ldi	r20, 0x07	; 7
    3204:	03 dc       	rcall	.-2042   	; 0x2a0c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3206:	8f 87       	std	Y+15, r24	; 0x0f
    3208:	8f 85       	ldd	r24, Y+15	; 0x0f
    320a:	88 23       	and	r24, r24
    320c:	11 f0       	breq	.+4      	; 0x3212 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    320e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3210:	58 c1       	rjmp	.+688    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3212:	1b 8e       	std	Y+27, r1	; 0x1b
    3214:	89 e0       	ldi	r24, 0x09	; 9
    3216:	89 87       	std	Y+9, r24	; 0x09
    3218:	ce 01       	movw	r24, r28
    321a:	42 96       	adiw	r24, 0x12	; 18
    321c:	06 96       	adiw	r24, 0x06	; 6
    321e:	9b 87       	std	Y+11, r25	; 0x0b
    3220:	8a 87       	std	Y+10, r24	; 0x0a
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	8c 8f       	std	Y+28, r24	; 0x1c
    3226:	33 c0       	rjmp	.+102    	; 0x328e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    3228:	88 85       	ldd	r24, Y+8	; 0x08
    322a:	87 78       	andi	r24, 0x87	; 135
    322c:	88 23       	and	r24, r24
    322e:	1c f4       	brge	.+6      	; 0x3236 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3230:	81 50       	subi	r24, 0x01	; 1
    3232:	88 6f       	ori	r24, 0xF8	; 248
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	8b 8f       	std	Y+27, r24	; 0x1b
    3238:	88 85       	ldd	r24, Y+8	; 0x08
    323a:	88 23       	and	r24, r24
    323c:	0c f4       	brge	.+2      	; 0x3240 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    323e:	89 5f       	subi	r24, 0xF9	; 249
    3240:	85 95       	asr	r24
    3242:	85 95       	asr	r24
    3244:	85 95       	asr	r24
    3246:	8d 83       	std	Y+5, r24	; 0x05
    3248:	8d 81       	ldd	r24, Y+5	; 0x05
    324a:	8e 5f       	subi	r24, 0xFE	; 254
    324c:	8e 83       	std	Y+6, r24	; 0x06
    324e:	8e 81       	ldd	r24, Y+6	; 0x06
    3250:	98 2f       	mov	r25, r24
    3252:	92 95       	swap	r25
    3254:	90 7f       	andi	r25, 0xF0	; 240
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	89 0f       	add	r24, r25
    325a:	8b 8b       	std	Y+19, r24	; 0x13
    325c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325e:	88 23       	and	r24, r24
    3260:	11 f0       	breq	.+4      	; 0x3266 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	01 c0       	rjmp	.+2      	; 0x3268 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	9e 81       	ldd	r25, Y+6	; 0x06
    326a:	89 0f       	add	r24, r25
    326c:	89 87       	std	Y+9, r24	; 0x09
    326e:	8e 81       	ldd	r24, Y+6	; 0x06
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9e 01       	movw	r18, r28
    3276:	2e 5e       	subi	r18, 0xEE	; 238
    3278:	3f 4f       	sbci	r19, 0xFF	; 255
    327a:	82 0f       	add	r24, r18
    327c:	93 1f       	adc	r25, r19
    327e:	9b 87       	std	Y+11, r25	; 0x0b
    3280:	8a 87       	std	Y+10, r24	; 0x0a
    3282:	99 e0       	ldi	r25, 0x09	; 9
    3284:	8e 81       	ldd	r24, Y+6	; 0x06
    3286:	f9 2f       	mov	r31, r25
    3288:	f8 1b       	sub	r31, r24
    328a:	8f 2f       	mov	r24, r31
    328c:	8c 8f       	std	Y+28, r24	; 0x1c
    328e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3290:	88 8b       	std	Y+16, r24	; 0x10
    3292:	88 89       	ldd	r24, Y+16	; 0x10
    3294:	98 2f       	mov	r25, r24
    3296:	92 95       	swap	r25
    3298:	90 7f       	andi	r25, 0xF0	; 240
    329a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    329c:	29 2f       	mov	r18, r25
    329e:	28 0f       	add	r18, r24
    32a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32a4:	42 2f       	mov	r20, r18
    32a6:	6a e1       	ldi	r22, 0x1A	; 26
    32a8:	13 da       	rcall	.-3034   	; 0x26d0 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    32aa:	fe 01       	movw	r30, r28
    32ac:	7b 96       	adiw	r30, 0x1b	; 27
    32ae:	ae 01       	movw	r20, r28
    32b0:	44 5e       	subi	r20, 0xE4	; 228
    32b2:	5f 4f       	sbci	r21, 0xFF	; 255
    32b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    32b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    32b8:	be 01       	movw	r22, r28
    32ba:	6e 5e       	subi	r22, 0xEE	; 238
    32bc:	7f 4f       	sbci	r23, 0xFF	; 255
    32be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32c2:	a1 2c       	mov	r10, r1
    32c4:	c8 88       	ldd	r12, Y+16	; 0x10
    32c6:	7f 01       	movw	r14, r30
    32c8:	8a 01       	movw	r16, r20
    32ca:	49 85       	ldd	r20, Y+9	; 0x09
    32cc:	bd dc       	rcall	.-1670   	; 0x2c48 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    32ce:	8f 87       	std	Y+15, r24	; 0x0f
    32d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d2:	82 30       	cpi	r24, 0x02	; 2
    32d4:	09 f0       	breq	.+2      	; 0x32d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    32d6:	65 c0       	rjmp	.+202    	; 0x33a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    32d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32dc:	6c e1       	ldi	r22, 0x1C	; 28
    32de:	79 da       	rcall	.-2830   	; 0x27d2 <_ZN7MFRC52216PCD_ReadRegisterEh>
    32e0:	89 8b       	std	Y+17, r24	; 0x11
    32e2:	89 89       	ldd	r24, Y+17	; 0x11
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	80 72       	andi	r24, 0x20	; 32
    32ea:	99 27       	eor	r25, r25
    32ec:	89 2b       	or	r24, r25
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	e7 c0       	rjmp	.+462    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    32f4:	89 89       	ldd	r24, Y+17	; 0x11
    32f6:	8f 71       	andi	r24, 0x1F	; 31
    32f8:	8d 87       	std	Y+13, r24	; 0x0d
    32fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fc:	88 23       	and	r24, r24
    32fe:	11 f4       	brne	.+4      	; 0x3304 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3300:	80 e2       	ldi	r24, 0x20	; 32
    3302:	8d 87       	std	Y+13, r24	; 0x0d
    3304:	8d 85       	ldd	r24, Y+13	; 0x0d
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	88 85       	ldd	r24, Y+8	; 0x08
    330c:	08 2e       	mov	r0, r24
    330e:	00 0c       	add	r0, r0
    3310:	99 0b       	sbc	r25, r25
    3312:	82 17       	cp	r24, r18
    3314:	93 07       	cpc	r25, r19
    3316:	14 f0       	brlt	.+4      	; 0x331c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    3318:	85 e0       	ldi	r24, 0x05	; 5
    331a:	d3 c0       	rjmp	.+422    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    331c:	8d 85       	ldd	r24, Y+13	; 0x0d
    331e:	88 87       	std	Y+8, r24	; 0x08
    3320:	88 85       	ldd	r24, Y+8	; 0x08
    3322:	08 2e       	mov	r0, r24
    3324:	00 0c       	add	r0, r0
    3326:	99 0b       	sbc	r25, r25
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	87 70       	andi	r24, 0x07	; 7
    332c:	90 78       	andi	r25, 0x80	; 128
    332e:	99 23       	and	r25, r25
    3330:	24 f4       	brge	.+8      	; 0x333a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	88 6f       	ori	r24, 0xF8	; 248
    3336:	9f 6f       	ori	r25, 0xFF	; 255
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	8d 83       	std	Y+5, r24	; 0x05
    333c:	88 85       	ldd	r24, Y+8	; 0x08
    333e:	88 23       	and	r24, r24
    3340:	0c f4       	brge	.+2      	; 0x3344 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3342:	89 5f       	subi	r24, 0xF9	; 249
    3344:	85 95       	asr	r24
    3346:	85 95       	asr	r24
    3348:	85 95       	asr	r24
    334a:	98 2f       	mov	r25, r24
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	88 23       	and	r24, r24
    3350:	11 f0       	breq	.+4      	; 0x3356 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	89 0f       	add	r24, r25
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	8e 83       	std	Y+6, r24	; 0x06
    335e:	8e 81       	ldd	r24, Y+6	; 0x06
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	2e 81       	ldd	r18, Y+6	; 0x06
    3366:	22 2f       	mov	r18, r18
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	ae 01       	movw	r20, r28
    336c:	4e 5e       	subi	r20, 0xEE	; 238
    336e:	5f 4f       	sbci	r21, 0xFF	; 255
    3370:	24 0f       	add	r18, r20
    3372:	35 1f       	adc	r19, r21
    3374:	f9 01       	movw	r30, r18
    3376:	20 81       	ld	r18, Z
    3378:	62 2f       	mov	r22, r18
    337a:	2d 81       	ldd	r18, Y+5	; 0x05
    337c:	42 2f       	mov	r20, r18
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	21 e0       	ldi	r18, 0x01	; 1
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	02 c0       	rjmp	.+4      	; 0x338a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    3386:	22 0f       	add	r18, r18
    3388:	33 1f       	adc	r19, r19
    338a:	4a 95       	dec	r20
    338c:	e2 f7       	brpl	.-8      	; 0x3386 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    338e:	26 2b       	or	r18, r22
    3390:	42 2f       	mov	r20, r18
    3392:	9e 01       	movw	r18, r28
    3394:	2e 5e       	subi	r18, 0xEE	; 238
    3396:	3f 4f       	sbci	r19, 0xFF	; 255
    3398:	82 0f       	add	r24, r18
    339a:	93 1f       	adc	r25, r19
    339c:	fc 01       	movw	r30, r24
    339e:	40 83       	st	Z, r20
    33a0:	15 cf       	rjmp	.-470    	; 0x31cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a4:	88 23       	and	r24, r24
    33a6:	11 f0       	breq	.+4      	; 0x33ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    33a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33aa:	8b c0       	rjmp	.+278    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33ac:	88 85       	ldd	r24, Y+8	; 0x08
    33ae:	80 32       	cpi	r24, 0x20	; 32
    33b0:	1c f0       	brlt	.+6      	; 0x33b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	8a 83       	std	Y+2, r24	; 0x02
    33b6:	0a cf       	rjmp	.-492    	; 0x31cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33b8:	80 e2       	ldi	r24, 0x20	; 32
    33ba:	88 87       	std	Y+8, r24	; 0x08
    33bc:	07 cf       	rjmp	.-498    	; 0x31cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33be:	8c 89       	ldd	r24, Y+20	; 0x14
    33c0:	88 38       	cpi	r24, 0x88	; 136
    33c2:	11 f4       	brne	.+4      	; 0x33c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    33c4:	83 e0       	ldi	r24, 0x03	; 3
    33c6:	01 c0       	rjmp	.+2      	; 0x33ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	8e 83       	std	Y+6, r24	; 0x06
    33cc:	8c 89       	ldd	r24, Y+20	; 0x14
    33ce:	88 38       	cpi	r24, 0x88	; 136
    33d0:	11 f4       	brne	.+4      	; 0x33d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    33d6:	84 e0       	ldi	r24, 0x04	; 4
    33d8:	8c 87       	std	Y+12, r24	; 0x0c
    33da:	1d 82       	std	Y+5, r1	; 0x05
    33dc:	9d 81       	ldd	r25, Y+5	; 0x05
    33de:	8c 85       	ldd	r24, Y+12	; 0x0c
    33e0:	98 17       	cp	r25, r24
    33e2:	00 f5       	brcc	.+64     	; 0x3424 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    33e4:	8f 81       	ldd	r24, Y+7	; 0x07
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	8d 81       	ldd	r24, Y+5	; 0x05
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	82 0f       	add	r24, r18
    33f2:	93 1f       	adc	r25, r19
    33f4:	2e 81       	ldd	r18, Y+6	; 0x06
    33f6:	31 e0       	ldi	r19, 0x01	; 1
    33f8:	32 0f       	add	r19, r18
    33fa:	3e 83       	std	Y+6, r19	; 0x06
    33fc:	22 2f       	mov	r18, r18
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	ae 01       	movw	r20, r28
    3402:	4e 5e       	subi	r20, 0xEE	; 238
    3404:	5f 4f       	sbci	r21, 0xFF	; 255
    3406:	24 0f       	add	r18, r20
    3408:	35 1f       	adc	r19, r21
    340a:	f9 01       	movw	r30, r18
    340c:	40 81       	ld	r20, Z
    340e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3410:	38 a1       	ldd	r19, Y+32	; 0x20
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	fc 01       	movw	r30, r24
    341a:	40 83       	st	Z, r20
    341c:	8d 81       	ldd	r24, Y+5	; 0x05
    341e:	8f 5f       	subi	r24, 0xFF	; 255
    3420:	8d 83       	std	Y+5, r24	; 0x05
    3422:	dc cf       	rjmp	.-72     	; 0x33dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3424:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3426:	83 30       	cpi	r24, 0x03	; 3
    3428:	19 f4       	brne	.+6      	; 0x3430 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    342a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342c:	88 23       	and	r24, r24
    342e:	11 f0       	breq	.+4      	; 0x3434 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	47 c0       	rjmp	.+142    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3434:	ce 01       	movw	r24, r28
    3436:	42 96       	adiw	r24, 0x12	; 18
    3438:	9c 01       	movw	r18, r24
    343a:	2e 5f       	subi	r18, 0xFE	; 254
    343c:	3f 4f       	sbci	r19, 0xFF	; 255
    343e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3440:	7b 85       	ldd	r23, Y+11	; 0x0b
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	e1 da       	rcall	.-2622   	; 0x2a0c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    344a:	8f 87       	std	Y+15, r24	; 0x0f
    344c:	8f 85       	ldd	r24, Y+15	; 0x0f
    344e:	88 23       	and	r24, r24
    3450:	11 f0       	breq	.+4      	; 0x3456 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3452:	8f 85       	ldd	r24, Y+15	; 0x0f
    3454:	36 c0       	rjmp	.+108    	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3456:	2c 89       	ldd	r18, Y+20	; 0x14
    3458:	8a 85       	ldd	r24, Y+10	; 0x0a
    345a:	9b 85       	ldd	r25, Y+11	; 0x0b
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	fc 01       	movw	r30, r24
    3460:	80 81       	ld	r24, Z
    3462:	28 17       	cp	r18, r24
    3464:	41 f4       	brne	.+16     	; 0x3476 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    3466:	2d 89       	ldd	r18, Y+21	; 0x15
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	9b 85       	ldd	r25, Y+11	; 0x0b
    346c:	02 96       	adiw	r24, 0x02	; 2
    346e:	fc 01       	movw	r30, r24
    3470:	80 81       	ld	r24, Z
    3472:	28 17       	cp	r18, r24
    3474:	11 f0       	breq	.+4      	; 0x347a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    3476:	87 e0       	ldi	r24, 0x07	; 7
    3478:	24 c0       	rjmp	.+72     	; 0x34c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    347a:	8a 85       	ldd	r24, Y+10	; 0x0a
    347c:	9b 85       	ldd	r25, Y+11	; 0x0b
    347e:	fc 01       	movw	r30, r24
    3480:	80 81       	ld	r24, Z
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	84 70       	andi	r24, 0x04	; 4
    3488:	99 27       	eor	r25, r25
    348a:	89 2b       	or	r24, r25
    348c:	21 f0       	breq	.+8      	; 0x3496 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    348e:	8c 81       	ldd	r24, Y+4	; 0x04
    3490:	8f 5f       	subi	r24, 0xFF	; 255
    3492:	8c 83       	std	Y+4, r24	; 0x04
    3494:	f3 cd       	rjmp	.-1050   	; 0x307c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	8a 85       	ldd	r24, Y+10	; 0x0a
    349c:	9b 85       	ldd	r25, Y+11	; 0x0b
    349e:	fc 01       	movw	r30, r24
    34a0:	20 81       	ld	r18, Z
    34a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a4:	98 a1       	ldd	r25, Y+32	; 0x20
    34a6:	fc 01       	movw	r30, r24
    34a8:	23 87       	std	Z+11, r18	; 0x0b
    34aa:	e8 cd       	rjmp	.-1072   	; 0x307c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    34ac:	9c 81       	ldd	r25, Y+4	; 0x04
    34ae:	89 2f       	mov	r24, r25
    34b0:	88 0f       	add	r24, r24
    34b2:	89 0f       	add	r24, r25
    34b4:	21 e0       	ldi	r18, 0x01	; 1
    34b6:	28 0f       	add	r18, r24
    34b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ba:	98 a1       	ldd	r25, Y+32	; 0x20
    34bc:	fc 01       	movw	r30, r24
    34be:	20 83       	st	Z, r18
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	a1 96       	adiw	r28, 0x21	; 33
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	cf 90       	pop	r12
    34dc:	af 90       	pop	r10
    34de:	08 95       	ret

000034e0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	9e 83       	std	Y+6, r25	; 0x06
    34ee:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    34f0:	82 e0       	ldi	r24, 0x02	; 2
    34f2:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    34f4:	ae 01       	movw	r20, r28
    34f6:	4c 5f       	subi	r20, 0xFC	; 252
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255
    34fa:	9e 01       	movw	r18, r28
    34fc:	2e 5f       	subi	r18, 0xFE	; 254
    34fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	b9 01       	movw	r22, r18
    3506:	1f dd       	rcall	.-1474   	; 0x2f46 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    3508:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	88 23       	and	r24, r24
    350e:	19 f0       	breq	.+6      	; 0x3516 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	82 30       	cpi	r24, 0x02	; 2
    3514:	11 f4       	brne	.+4      	; 0x351a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	01 c0       	rjmp	.+2      	; 0x351c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    351a:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    351c:	26 96       	adiw	r28, 0x06	; 6
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	08 95       	ret

0000352e <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	00 d0       	rcall	.+0      	; 0x3534 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	9b 83       	std	Y+3, r25	; 0x03
    353a:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    353c:	2a 81       	ldd	r18, Y+2	; 0x02
    353e:	3b 81       	ldd	r19, Y+3	; 0x03
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	9b 81       	ldd	r25, Y+3	; 0x03
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	b9 01       	movw	r22, r18
    3548:	77 dd       	rcall	.-1298   	; 0x3038 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    354a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	99 81       	ldd	r25, Y+1	; 0x01
    3550:	99 23       	and	r25, r25
    3552:	09 f0       	breq	.+2      	; 0x3556 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3554:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	08 95       	ret

00003562 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	00 d0       	rcall	.+0      	; 0x3568 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    3568:	1f 92       	push	r1
    356a:	1f 92       	push	r1
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	89 83       	std	Y+1, r24	; 0x01
    3572:	7b 83       	std	Y+3, r23	; 0x03
    3574:	6a 83       	std	Y+2, r22	; 0x02
    3576:	5d 83       	std	Y+5, r21	; 0x05
    3578:	4c 83       	std	Y+4, r20	; 0x04
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	85 53       	subi	r24, 0x35	; 53
    3582:	9c 4f       	sbci	r25, 0xFC	; 252
    3584:	fc 01       	movw	r30, r24
    3586:	80 81       	ld	r24, Z
    3588:	88 1f       	adc	r24, r24
    358a:	88 27       	eor	r24, r24
    358c:	88 1f       	adc	r24, r24
    358e:	88 23       	and	r24, r24
    3590:	31 f0       	breq	.+12     	; 0x359e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	9b 81       	ldd	r25, Y+3	; 0x03
    3596:	fc 01       	movw	r30, r24
    3598:	11 82       	std	Z+1, r1	; 0x01
    359a:	10 82       	st	Z, r1
    359c:	72 c0       	rjmp	.+228    	; 0x3682 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	c9 01       	movw	r24, r18
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	82 0f       	add	r24, r18
    35ac:	93 1f       	adc	r25, r19
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	9c 01       	movw	r18, r24
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	88 2f       	mov	r24, r24
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	85 53       	subi	r24, 0x35	; 53
    35c0:	9c 4f       	sbci	r25, 0xFC	; 252
    35c2:	fc 01       	movw	r30, r24
    35c4:	80 81       	ld	r24, Z
    35c6:	08 2e       	mov	r0, r24
    35c8:	00 0c       	add	r0, r0
    35ca:	99 0b       	sbc	r25, r25
    35cc:	28 0f       	add	r18, r24
    35ce:	39 1f       	adc	r19, r25
    35d0:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <ServoCount>
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	28 17       	cp	r18, r24
    35da:	39 07       	cpc	r19, r25
    35dc:	4c f5       	brge	.+82     	; 0x3630 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	c9 01       	movw	r24, r18
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	82 0f       	add	r24, r18
    35ec:	93 1f       	adc	r25, r19
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	9c 01       	movw	r18, r24
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	88 2f       	mov	r24, r24
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	85 53       	subi	r24, 0x35	; 53
    3600:	9c 4f       	sbci	r25, 0xFC	; 252
    3602:	fc 01       	movw	r30, r24
    3604:	80 81       	ld	r24, Z
    3606:	08 2e       	mov	r0, r24
    3608:	00 0c       	add	r0, r0
    360a:	99 0b       	sbc	r25, r25
    360c:	28 0f       	add	r18, r24
    360e:	39 1f       	adc	r19, r25
    3610:	c9 01       	movw	r24, r18
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	82 0f       	add	r24, r18
    3618:	93 1f       	adc	r25, r19
    361a:	85 5c       	subi	r24, 0xC5	; 197
    361c:	9c 4f       	sbci	r25, 0xFC	; 252
    361e:	fc 01       	movw	r30, r24
    3620:	80 81       	ld	r24, Z
    3622:	86 fb       	bst	r24, 6
    3624:	88 27       	eor	r24, r24
    3626:	80 f9       	bld	r24, 0
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	11 f4       	brne	.+4      	; 0x3630 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	88 23       	and	r24, r24
    3634:	31 f1       	breq	.+76     	; 0x3682 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	c9 01       	movw	r24, r18
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	82 0f       	add	r24, r18
    3644:	93 1f       	adc	r25, r19
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	88 0f       	add	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	9c 01       	movw	r18, r24
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	85 53       	subi	r24, 0x35	; 53
    3658:	9c 4f       	sbci	r25, 0xFC	; 252
    365a:	fc 01       	movw	r30, r24
    365c:	80 81       	ld	r24, Z
    365e:	08 2e       	mov	r0, r24
    3660:	00 0c       	add	r0, r0
    3662:	99 0b       	sbc	r25, r25
    3664:	28 0f       	add	r18, r24
    3666:	39 1f       	adc	r19, r25
    3668:	c9 01       	movw	r24, r18
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	82 0f       	add	r24, r18
    3670:	93 1f       	adc	r25, r19
    3672:	85 5c       	subi	r24, 0xC5	; 197
    3674:	9c 4f       	sbci	r25, 0xFC	; 252
    3676:	fc 01       	movw	r30, r24
    3678:	80 81       	ld	r24, Z
    367a:	8f 73       	andi	r24, 0x3F	; 63
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	88 2f       	mov	r24, r24
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9c 01       	movw	r18, r24
    368a:	25 53       	subi	r18, 0x35	; 53
    368c:	3c 4f       	sbci	r19, 0xFC	; 252
    368e:	f9 01       	movw	r30, r18
    3690:	20 81       	ld	r18, Z
    3692:	2f 5f       	subi	r18, 0xFF	; 255
    3694:	85 53       	subi	r24, 0x35	; 53
    3696:	9c 4f       	sbci	r25, 0xFC	; 252
    3698:	fc 01       	movw	r30, r24
    369a:	20 83       	st	Z, r18
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	c9 01       	movw	r24, r18
    36a4:	88 0f       	add	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	82 0f       	add	r24, r18
    36aa:	93 1f       	adc	r25, r19
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	9c 01       	movw	r18, r24
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	88 2f       	mov	r24, r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	85 53       	subi	r24, 0x35	; 53
    36be:	9c 4f       	sbci	r25, 0xFC	; 252
    36c0:	fc 01       	movw	r30, r24
    36c2:	80 81       	ld	r24, Z
    36c4:	08 2e       	mov	r0, r24
    36c6:	00 0c       	add	r0, r0
    36c8:	99 0b       	sbc	r25, r25
    36ca:	28 0f       	add	r18, r24
    36cc:	39 1f       	adc	r19, r25
    36ce:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <ServoCount>
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	28 17       	cp	r18, r24
    36d8:	39 07       	cpc	r19, r25
    36da:	5c f4       	brge	.+22     	; 0x36f2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	85 53       	subi	r24, 0x35	; 53
    36e4:	9c 4f       	sbci	r25, 0xFC	; 252
    36e6:	fc 01       	movw	r30, r24
    36e8:	80 81       	ld	r24, Z
    36ea:	8c 30       	cpi	r24, 0x0C	; 12
    36ec:	14 f4       	brge	.+4      	; 0x36f2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	88 23       	and	r24, r24
    36f6:	09 f4       	brne	.+2      	; 0x36fa <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    36f8:	7f c0       	rjmp	.+254    	; 0x37f8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	9b 81       	ldd	r25, Y+3	; 0x03
    36fe:	fc 01       	movw	r30, r24
    3700:	40 81       	ld	r20, Z
    3702:	51 81       	ldd	r21, Z+1	; 0x01
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	28 2f       	mov	r18, r24
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	c9 01       	movw	r24, r18
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	82 0f       	add	r24, r18
    3712:	93 1f       	adc	r25, r19
    3714:	88 0f       	add	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	9c 01       	movw	r18, r24
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	85 53       	subi	r24, 0x35	; 53
    3726:	9c 4f       	sbci	r25, 0xFC	; 252
    3728:	fc 01       	movw	r30, r24
    372a:	80 81       	ld	r24, Z
    372c:	08 2e       	mov	r0, r24
    372e:	00 0c       	add	r0, r0
    3730:	99 0b       	sbc	r25, r25
    3732:	28 0f       	add	r18, r24
    3734:	39 1f       	adc	r19, r25
    3736:	c9 01       	movw	r24, r18
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	82 0f       	add	r24, r18
    373e:	93 1f       	adc	r25, r19
    3740:	84 5c       	subi	r24, 0xC4	; 196
    3742:	9c 4f       	sbci	r25, 0xFC	; 252
    3744:	fc 01       	movw	r30, r24
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	9a 01       	movw	r18, r20
    374c:	28 0f       	add	r18, r24
    374e:	39 1f       	adc	r19, r25
    3750:	8c 81       	ldd	r24, Y+4	; 0x04
    3752:	9d 81       	ldd	r25, Y+5	; 0x05
    3754:	fc 01       	movw	r30, r24
    3756:	31 83       	std	Z+1, r19	; 0x01
    3758:	20 83       	st	Z, r18
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	c9 01       	movw	r24, r18
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	88 0f       	add	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	9c 01       	movw	r18, r24
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	88 2f       	mov	r24, r24
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	85 53       	subi	r24, 0x35	; 53
    377c:	9c 4f       	sbci	r25, 0xFC	; 252
    377e:	fc 01       	movw	r30, r24
    3780:	80 81       	ld	r24, Z
    3782:	08 2e       	mov	r0, r24
    3784:	00 0c       	add	r0, r0
    3786:	99 0b       	sbc	r25, r25
    3788:	28 0f       	add	r18, r24
    378a:	39 1f       	adc	r19, r25
    378c:	c9 01       	movw	r24, r18
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	82 0f       	add	r24, r18
    3794:	93 1f       	adc	r25, r19
    3796:	85 5c       	subi	r24, 0xC5	; 197
    3798:	9c 4f       	sbci	r25, 0xFC	; 252
    379a:	fc 01       	movw	r30, r24
    379c:	80 81       	ld	r24, Z
    379e:	86 fb       	bst	r24, 6
    37a0:	88 27       	eor	r24, r24
    37a2:	80 f9       	bld	r24, 0
    37a4:	88 23       	and	r24, r24
    37a6:	09 f4       	brne	.+2      	; 0x37aa <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    37a8:	51 c0       	rjmp	.+162    	; 0x384c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	c9 01       	movw	r24, r18
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	82 0f       	add	r24, r18
    37b8:	93 1f       	adc	r25, r19
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	9c 01       	movw	r18, r24
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	85 53       	subi	r24, 0x35	; 53
    37cc:	9c 4f       	sbci	r25, 0xFC	; 252
    37ce:	fc 01       	movw	r30, r24
    37d0:	80 81       	ld	r24, Z
    37d2:	08 2e       	mov	r0, r24
    37d4:	00 0c       	add	r0, r0
    37d6:	99 0b       	sbc	r25, r25
    37d8:	28 0f       	add	r18, r24
    37da:	39 1f       	adc	r19, r25
    37dc:	c9 01       	movw	r24, r18
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	82 0f       	add	r24, r18
    37e4:	93 1f       	adc	r25, r19
    37e6:	85 5c       	subi	r24, 0xC5	; 197
    37e8:	9c 4f       	sbci	r25, 0xFC	; 252
    37ea:	fc 01       	movw	r30, r24
    37ec:	80 81       	ld	r24, Z
    37ee:	8f 73       	andi	r24, 0x3F	; 63
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    37f6:	2a c0       	rjmp	.+84     	; 0x384c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	9b 81       	ldd	r25, Y+3	; 0x03
    37fc:	fc 01       	movw	r30, r24
    37fe:	80 81       	ld	r24, Z
    3800:	91 81       	ldd	r25, Z+1	; 0x01
    3802:	04 96       	adiw	r24, 0x04	; 4
    3804:	21 e0       	ldi	r18, 0x01	; 1
    3806:	80 34       	cpi	r24, 0x40	; 64
    3808:	9c 49       	sbci	r25, 0x9C	; 156
    380a:	08 f0       	brcs	.+2      	; 0x380e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	22 23       	and	r18, r18
    3810:	41 f0       	breq	.+16     	; 0x3822 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3812:	8c 81       	ldd	r24, Y+4	; 0x04
    3814:	9d 81       	ldd	r25, Y+5	; 0x05
    3816:	20 e4       	ldi	r18, 0x40	; 64
    3818:	3c e9       	ldi	r19, 0x9C	; 156
    381a:	fc 01       	movw	r30, r24
    381c:	31 83       	std	Z+1, r19	; 0x01
    381e:	20 83       	st	Z, r18
    3820:	0d c0       	rjmp	.+26     	; 0x383c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	9b 81       	ldd	r25, Y+3	; 0x03
    3826:	fc 01       	movw	r30, r24
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	9c 01       	movw	r18, r24
    382e:	2c 5f       	subi	r18, 0xFC	; 252
    3830:	3f 4f       	sbci	r19, 0xFF	; 255
    3832:	8c 81       	ldd	r24, Y+4	; 0x04
    3834:	9d 81       	ldd	r25, Y+5	; 0x05
    3836:	fc 01       	movw	r30, r24
    3838:	31 83       	std	Z+1, r19	; 0x01
    383a:	20 83       	st	Z, r18
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	88 2f       	mov	r24, r24
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	85 53       	subi	r24, 0x35	; 53
    3844:	9c 4f       	sbci	r25, 0xFC	; 252
    3846:	2f ef       	ldi	r18, 0xFF	; 255
    3848:	fc 01       	movw	r30, r24
    384a:	20 83       	st	Z, r18
    384c:	00 00       	nop
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	08 95       	ret

0000385e <__vector_17>:
    385e:	1f 92       	push	r1
    3860:	0f 92       	push	r0
    3862:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3866:	0f 92       	push	r0
    3868:	11 24       	eor	r1, r1
    386a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    386e:	0f 92       	push	r0
    3870:	2f 93       	push	r18
    3872:	3f 93       	push	r19
    3874:	4f 93       	push	r20
    3876:	5f 93       	push	r21
    3878:	6f 93       	push	r22
    387a:	7f 93       	push	r23
    387c:	8f 93       	push	r24
    387e:	9f 93       	push	r25
    3880:	af 93       	push	r26
    3882:	bf 93       	push	r27
    3884:	ef 93       	push	r30
    3886:	ff 93       	push	r31
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	48 e8       	ldi	r20, 0x88	; 136
    3892:	50 e0       	ldi	r21, 0x00	; 0
    3894:	64 e8       	ldi	r22, 0x84	; 132
    3896:	70 e0       	ldi	r23, 0x00	; 0
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	63 de       	rcall	.-826    	; 0x3562 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    389c:	00 00       	nop
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	ff 91       	pop	r31
    38a4:	ef 91       	pop	r30
    38a6:	bf 91       	pop	r27
    38a8:	af 91       	pop	r26
    38aa:	9f 91       	pop	r25
    38ac:	8f 91       	pop	r24
    38ae:	7f 91       	pop	r23
    38b0:	6f 91       	pop	r22
    38b2:	5f 91       	pop	r21
    38b4:	4f 91       	pop	r20
    38b6:	3f 91       	pop	r19
    38b8:	2f 91       	pop	r18
    38ba:	0f 90       	pop	r0
    38bc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38c0:	0f 90       	pop	r0
    38c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38c6:	0f 90       	pop	r0
    38c8:	1f 90       	pop	r1
    38ca:	18 95       	reti

000038cc <__vector_32>:
    38cc:	1f 92       	push	r1
    38ce:	0f 92       	push	r0
    38d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38d4:	0f 92       	push	r0
    38d6:	11 24       	eor	r1, r1
    38d8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38dc:	0f 92       	push	r0
    38de:	2f 93       	push	r18
    38e0:	3f 93       	push	r19
    38e2:	4f 93       	push	r20
    38e4:	5f 93       	push	r21
    38e6:	6f 93       	push	r22
    38e8:	7f 93       	push	r23
    38ea:	8f 93       	push	r24
    38ec:	9f 93       	push	r25
    38ee:	af 93       	push	r26
    38f0:	bf 93       	push	r27
    38f2:	ef 93       	push	r30
    38f4:	ff 93       	push	r31
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	cd b7       	in	r28, 0x3d	; 61
    38fc:	de b7       	in	r29, 0x3e	; 62
    38fe:	48 e9       	ldi	r20, 0x98	; 152
    3900:	50 e0       	ldi	r21, 0x00	; 0
    3902:	64 e9       	ldi	r22, 0x94	; 148
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	82 e0       	ldi	r24, 0x02	; 2
    3908:	2c de       	rcall	.-936    	; 0x3562 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    390a:	00 00       	nop
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	ff 91       	pop	r31
    3912:	ef 91       	pop	r30
    3914:	bf 91       	pop	r27
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	7f 91       	pop	r23
    391e:	6f 91       	pop	r22
    3920:	5f 91       	pop	r21
    3922:	4f 91       	pop	r20
    3924:	3f 91       	pop	r19
    3926:	2f 91       	pop	r18
    3928:	0f 90       	pop	r0
    392a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    392e:	0f 90       	pop	r0
    3930:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3934:	0f 90       	pop	r0
    3936:	1f 90       	pop	r1
    3938:	18 95       	reti

0000393a <__vector_42>:
    393a:	1f 92       	push	r1
    393c:	0f 92       	push	r0
    393e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3942:	0f 92       	push	r0
    3944:	11 24       	eor	r1, r1
    3946:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    394a:	0f 92       	push	r0
    394c:	2f 93       	push	r18
    394e:	3f 93       	push	r19
    3950:	4f 93       	push	r20
    3952:	5f 93       	push	r21
    3954:	6f 93       	push	r22
    3956:	7f 93       	push	r23
    3958:	8f 93       	push	r24
    395a:	9f 93       	push	r25
    395c:	af 93       	push	r26
    395e:	bf 93       	push	r27
    3960:	ef 93       	push	r30
    3962:	ff 93       	push	r31
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	48 ea       	ldi	r20, 0xA8	; 168
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	64 ea       	ldi	r22, 0xA4	; 164
    3972:	70 e0       	ldi	r23, 0x00	; 0
    3974:	83 e0       	ldi	r24, 0x03	; 3
    3976:	f5 dd       	rcall	.-1046   	; 0x3562 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3978:	00 00       	nop
    397a:	df 91       	pop	r29
    397c:	cf 91       	pop	r28
    397e:	ff 91       	pop	r31
    3980:	ef 91       	pop	r30
    3982:	bf 91       	pop	r27
    3984:	af 91       	pop	r26
    3986:	9f 91       	pop	r25
    3988:	8f 91       	pop	r24
    398a:	7f 91       	pop	r23
    398c:	6f 91       	pop	r22
    398e:	5f 91       	pop	r21
    3990:	4f 91       	pop	r20
    3992:	3f 91       	pop	r19
    3994:	2f 91       	pop	r18
    3996:	0f 90       	pop	r0
    3998:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    399c:	0f 90       	pop	r0
    399e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39a2:	0f 90       	pop	r0
    39a4:	1f 90       	pop	r1
    39a6:	18 95       	reti

000039a8 <__vector_47>:
    39a8:	1f 92       	push	r1
    39aa:	0f 92       	push	r0
    39ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39b0:	0f 92       	push	r0
    39b2:	11 24       	eor	r1, r1
    39b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    39b8:	0f 92       	push	r0
    39ba:	2f 93       	push	r18
    39bc:	3f 93       	push	r19
    39be:	4f 93       	push	r20
    39c0:	5f 93       	push	r21
    39c2:	6f 93       	push	r22
    39c4:	7f 93       	push	r23
    39c6:	8f 93       	push	r24
    39c8:	9f 93       	push	r25
    39ca:	af 93       	push	r26
    39cc:	bf 93       	push	r27
    39ce:	ef 93       	push	r30
    39d0:	ff 93       	push	r31
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	48 e2       	ldi	r20, 0x28	; 40
    39dc:	51 e0       	ldi	r21, 0x01	; 1
    39de:	64 e2       	ldi	r22, 0x24	; 36
    39e0:	71 e0       	ldi	r23, 0x01	; 1
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	be dd       	rcall	.-1156   	; 0x3562 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    39e6:	00 00       	nop
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	ff 91       	pop	r31
    39ee:	ef 91       	pop	r30
    39f0:	bf 91       	pop	r27
    39f2:	af 91       	pop	r26
    39f4:	9f 91       	pop	r25
    39f6:	8f 91       	pop	r24
    39f8:	7f 91       	pop	r23
    39fa:	6f 91       	pop	r22
    39fc:	5f 91       	pop	r21
    39fe:	4f 91       	pop	r20
    3a00:	3f 91       	pop	r19
    3a02:	2f 91       	pop	r18
    3a04:	0f 90       	pop	r0
    3a06:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a0a:	0f 90       	pop	r0
    3a0c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a10:	0f 90       	pop	r0
    3a12:	1f 90       	pop	r1
    3a14:	18 95       	reti

00003a16 <_ZL7initISR18timer16_Sequence_t>:
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	1f 92       	push	r1
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	81 30       	cpi	r24, 0x01	; 1
    3a26:	01 f5       	brne	.+64     	; 0x3a68 <_ZL7initISR18timer16_Sequence_t+0x52>
    3a28:	80 e8       	ldi	r24, 0x80	; 128
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	10 82       	st	Z, r1
    3a30:	81 e8       	ldi	r24, 0x81	; 129
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	22 e0       	ldi	r18, 0x02	; 2
    3a36:	fc 01       	movw	r30, r24
    3a38:	20 83       	st	Z, r18
    3a3a:	84 e8       	ldi	r24, 0x84	; 132
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	fc 01       	movw	r30, r24
    3a40:	11 82       	std	Z+1, r1	; 0x01
    3a42:	10 82       	st	Z, r1
    3a44:	86 e3       	ldi	r24, 0x36	; 54
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	26 e3       	ldi	r18, 0x36	; 54
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	f9 01       	movw	r30, r18
    3a4e:	20 81       	ld	r18, Z
    3a50:	22 60       	ori	r18, 0x02	; 2
    3a52:	fc 01       	movw	r30, r24
    3a54:	20 83       	st	Z, r18
    3a56:	8f e6       	ldi	r24, 0x6F	; 111
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	2f e6       	ldi	r18, 0x6F	; 111
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	f9 01       	movw	r30, r18
    3a60:	20 81       	ld	r18, Z
    3a62:	22 60       	ori	r18, 0x02	; 2
    3a64:	fc 01       	movw	r30, r24
    3a66:	20 83       	st	Z, r18
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	82 30       	cpi	r24, 0x02	; 2
    3a6c:	c1 f4       	brne	.+48     	; 0x3a9e <_ZL7initISR18timer16_Sequence_t+0x88>
    3a6e:	80 e9       	ldi	r24, 0x90	; 144
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	fc 01       	movw	r30, r24
    3a74:	10 82       	st	Z, r1
    3a76:	81 e9       	ldi	r24, 0x91	; 145
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	22 e0       	ldi	r18, 0x02	; 2
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	20 83       	st	Z, r18
    3a80:	84 e9       	ldi	r24, 0x94	; 148
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	fc 01       	movw	r30, r24
    3a86:	11 82       	std	Z+1, r1	; 0x01
    3a88:	10 82       	st	Z, r1
    3a8a:	88 e3       	ldi	r24, 0x38	; 56
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	22 e0       	ldi	r18, 0x02	; 2
    3a90:	fc 01       	movw	r30, r24
    3a92:	20 83       	st	Z, r18
    3a94:	81 e7       	ldi	r24, 0x71	; 113
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	22 e0       	ldi	r18, 0x02	; 2
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	20 83       	st	Z, r18
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	83 30       	cpi	r24, 0x03	; 3
    3aa2:	c1 f4       	brne	.+48     	; 0x3ad4 <_ZL7initISR18timer16_Sequence_t+0xbe>
    3aa4:	80 ea       	ldi	r24, 0xA0	; 160
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	10 82       	st	Z, r1
    3aac:	81 ea       	ldi	r24, 0xA1	; 161
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	22 e0       	ldi	r18, 0x02	; 2
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	20 83       	st	Z, r18
    3ab6:	84 ea       	ldi	r24, 0xA4	; 164
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	fc 01       	movw	r30, r24
    3abc:	11 82       	std	Z+1, r1	; 0x01
    3abe:	10 82       	st	Z, r1
    3ac0:	89 e3       	ldi	r24, 0x39	; 57
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	22 e0       	ldi	r18, 0x02	; 2
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	20 83       	st	Z, r18
    3aca:	82 e7       	ldi	r24, 0x72	; 114
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	22 e0       	ldi	r18, 0x02	; 2
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	20 83       	st	Z, r18
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	88 23       	and	r24, r24
    3ad8:	c1 f4       	brne	.+48     	; 0x3b0a <_ZL7initISR18timer16_Sequence_t+0xf4>
    3ada:	80 e2       	ldi	r24, 0x20	; 32
    3adc:	91 e0       	ldi	r25, 0x01	; 1
    3ade:	fc 01       	movw	r30, r24
    3ae0:	10 82       	st	Z, r1
    3ae2:	81 e2       	ldi	r24, 0x21	; 33
    3ae4:	91 e0       	ldi	r25, 0x01	; 1
    3ae6:	22 e0       	ldi	r18, 0x02	; 2
    3ae8:	fc 01       	movw	r30, r24
    3aea:	20 83       	st	Z, r18
    3aec:	84 e2       	ldi	r24, 0x24	; 36
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	fc 01       	movw	r30, r24
    3af2:	11 82       	std	Z+1, r1	; 0x01
    3af4:	10 82       	st	Z, r1
    3af6:	8a e3       	ldi	r24, 0x3A	; 58
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	22 e0       	ldi	r18, 0x02	; 2
    3afc:	fc 01       	movw	r30, r24
    3afe:	20 83       	st	Z, r18
    3b00:	83 e7       	ldi	r24, 0x73	; 115
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	22 e0       	ldi	r18, 0x02	; 2
    3b06:	fc 01       	movw	r30, r24
    3b08:	20 83       	st	Z, r18
    3b0a:	00 00       	nop
    3b0c:	0f 90       	pop	r0
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	08 95       	ret

00003b14 <_ZL13isTimerActive18timer16_Sequence_t>:
    3b14:	cf 93       	push	r28
    3b16:	df 93       	push	r29
    3b18:	1f 92       	push	r1
    3b1a:	1f 92       	push	r1
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
    3b20:	8a 83       	std	Y+2, r24	; 0x02
    3b22:	19 82       	std	Y+1, r1	; 0x01
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	8c 30       	cpi	r24, 0x0C	; 12
    3b28:	30 f5       	brcc	.+76     	; 0x3b76 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	c9 01       	movw	r24, r18
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	82 0f       	add	r24, r18
    3b38:	93 1f       	adc	r25, r19
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	9c 01       	movw	r18, r24
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	88 2f       	mov	r24, r24
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	28 0f       	add	r18, r24
    3b4c:	39 1f       	adc	r19, r25
    3b4e:	c9 01       	movw	r24, r18
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	82 0f       	add	r24, r18
    3b56:	93 1f       	adc	r25, r19
    3b58:	85 5c       	subi	r24, 0xC5	; 197
    3b5a:	9c 4f       	sbci	r25, 0xFC	; 252
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	80 81       	ld	r24, Z
    3b60:	86 fb       	bst	r24, 6
    3b62:	88 27       	eor	r24, r24
    3b64:	80 f9       	bld	r24, 0
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	11 f4       	brne	.+4      	; 0x3b6e <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	05 c0       	rjmp	.+10     	; 0x3b78 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	8f 5f       	subi	r24, 0xFF	; 255
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	d7 cf       	rjmp	.-82     	; 0x3b24 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	08 95       	ret

00003b82 <_ZN5ServoC1Ev>:
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	1f 92       	push	r1
    3b88:	1f 92       	push	r1
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <ServoCount>
    3b96:	80 33       	cpi	r24, 0x30	; 48
    3b98:	e8 f4       	brcc	.+58     	; 0x3bd4 <_ZN5ServoC1Ev+0x52>
    3b9a:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <ServoCount>
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	82 0f       	add	r24, r18
    3ba2:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <ServoCount>
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	fc 01       	movw	r30, r24
    3bac:	20 83       	st	Z, r18
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	80 81       	ld	r24, Z
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	c9 01       	movw	r24, r18
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	82 0f       	add	r24, r18
    3bc2:	93 1f       	adc	r25, r19
    3bc4:	84 5c       	subi	r24, 0xC4	; 196
    3bc6:	9c 4f       	sbci	r25, 0xFC	; 252
    3bc8:	28 eb       	ldi	r18, 0xB8	; 184
    3bca:	3b e0       	ldi	r19, 0x0B	; 11
    3bcc:	fc 01       	movw	r30, r24
    3bce:	31 83       	std	Z+1, r19	; 0x01
    3bd0:	20 83       	st	Z, r18
    3bd2:	05 c0       	rjmp	.+10     	; 0x3bde <_ZN5ServoC1Ev+0x5c>
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	2f ef       	ldi	r18, 0xFF	; 255
    3bda:	fc 01       	movw	r30, r24
    3bdc:	20 83       	st	Z, r18
    3bde:	00 00       	nop
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	08 95       	ret

00003bea <_ZN5Servo6attachEi>:
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <_ZN5Servo6attachEi+0x6>
    3bf0:	1f 92       	push	r1
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	7c 83       	std	Y+4, r23	; 0x04
    3bfc:	6b 83       	std	Y+3, r22	; 0x03
    3bfe:	6b 81       	ldd	r22, Y+3	; 0x03
    3c00:	7c 81       	ldd	r23, Y+4	; 0x04
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	9a 81       	ldd	r25, Y+2	; 0x02
    3c06:	20 e6       	ldi	r18, 0x60	; 96
    3c08:	39 e0       	ldi	r19, 0x09	; 9
    3c0a:	40 e2       	ldi	r20, 0x20	; 32
    3c0c:	52 e0       	ldi	r21, 0x02	; 2
    3c0e:	07 d0       	rcall	.+14     	; 0x3c1e <_ZN5Servo6attachEiii>
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	08 95       	ret

00003c1e <_ZN5Servo6attachEiii>:
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	29 97       	sbiw	r28, 0x09	; 9
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	9b 83       	std	Y+3, r25	; 0x03
    3c34:	8a 83       	std	Y+2, r24	; 0x02
    3c36:	7d 83       	std	Y+5, r23	; 0x05
    3c38:	6c 83       	std	Y+4, r22	; 0x04
    3c3a:	5f 83       	std	Y+7, r21	; 0x07
    3c3c:	4e 83       	std	Y+6, r20	; 0x06
    3c3e:	39 87       	std	Y+9, r19	; 0x09
    3c40:	28 87       	std	Y+8, r18	; 0x08
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	9b 81       	ldd	r25, Y+3	; 0x03
    3c46:	fc 01       	movw	r30, r24
    3c48:	80 81       	ld	r24, Z
    3c4a:	80 33       	cpi	r24, 0x30	; 48
    3c4c:	08 f0       	brcs	.+2      	; 0x3c50 <_ZN5Servo6attachEiii+0x32>
    3c4e:	6b c0       	rjmp	.+214    	; 0x3d26 <_ZN5Servo6attachEiii+0x108>
    3c50:	8c 81       	ldd	r24, Y+4	; 0x04
    3c52:	61 e0       	ldi	r22, 0x01	; 1
    3c54:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
    3c58:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	80 81       	ld	r24, Z
    3c60:	28 2f       	mov	r18, r24
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	8c 81       	ldd	r24, Y+4	; 0x04
    3c66:	48 2f       	mov	r20, r24
    3c68:	4f 73       	andi	r20, 0x3F	; 63
    3c6a:	c9 01       	movw	r24, r18
    3c6c:	88 0f       	add	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	82 0f       	add	r24, r18
    3c72:	93 1f       	adc	r25, r19
    3c74:	85 5c       	subi	r24, 0xC5	; 197
    3c76:	9c 4f       	sbci	r25, 0xFC	; 252
    3c78:	24 2f       	mov	r18, r20
    3c7a:	2f 73       	andi	r18, 0x3F	; 63
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	30 81       	ld	r19, Z
    3c80:	30 7c       	andi	r19, 0xC0	; 192
    3c82:	23 2b       	or	r18, r19
    3c84:	fc 01       	movw	r30, r24
    3c86:	20 83       	st	Z, r18
    3c88:	20 e2       	ldi	r18, 0x20	; 32
    3c8a:	32 e0       	ldi	r19, 0x02	; 2
    3c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c90:	a9 01       	movw	r20, r18
    3c92:	48 1b       	sub	r20, r24
    3c94:	59 0b       	sbc	r21, r25
    3c96:	ca 01       	movw	r24, r20
    3c98:	99 23       	and	r25, r25
    3c9a:	0c f4       	brge	.+2      	; 0x3c9e <_ZN5Servo6attachEiii+0x80>
    3c9c:	03 96       	adiw	r24, 0x03	; 3
    3c9e:	95 95       	asr	r25
    3ca0:	87 95       	ror	r24
    3ca2:	95 95       	asr	r25
    3ca4:	87 95       	ror	r24
    3ca6:	28 2f       	mov	r18, r24
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	9b 81       	ldd	r25, Y+3	; 0x03
    3cac:	fc 01       	movw	r30, r24
    3cae:	21 83       	std	Z+1, r18	; 0x01
    3cb0:	20 e6       	ldi	r18, 0x60	; 96
    3cb2:	39 e0       	ldi	r19, 0x09	; 9
    3cb4:	88 85       	ldd	r24, Y+8	; 0x08
    3cb6:	99 85       	ldd	r25, Y+9	; 0x09
    3cb8:	a9 01       	movw	r20, r18
    3cba:	48 1b       	sub	r20, r24
    3cbc:	59 0b       	sbc	r21, r25
    3cbe:	ca 01       	movw	r24, r20
    3cc0:	99 23       	and	r25, r25
    3cc2:	0c f4       	brge	.+2      	; 0x3cc6 <_ZN5Servo6attachEiii+0xa8>
    3cc4:	03 96       	adiw	r24, 0x03	; 3
    3cc6:	95 95       	asr	r25
    3cc8:	87 95       	ror	r24
    3cca:	95 95       	asr	r25
    3ccc:	87 95       	ror	r24
    3cce:	28 2f       	mov	r18, r24
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	22 83       	std	Z+2, r18	; 0x02
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	9b 81       	ldd	r25, Y+3	; 0x03
    3cdc:	fc 01       	movw	r30, r24
    3cde:	90 81       	ld	r25, Z
    3ce0:	8b ea       	ldi	r24, 0xAB	; 171
    3ce2:	98 9f       	mul	r25, r24
    3ce4:	81 2d       	mov	r24, r1
    3ce6:	11 24       	eor	r1, r1
    3ce8:	86 95       	lsr	r24
    3cea:	86 95       	lsr	r24
    3cec:	86 95       	lsr	r24
    3cee:	89 83       	std	Y+1, r24	; 0x01
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	10 df       	rcall	.-480    	; 0x3b14 <_ZL13isTimerActive18timer16_Sequence_t>
    3cf4:	98 2f       	mov	r25, r24
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	89 27       	eor	r24, r25
    3cfa:	88 23       	and	r24, r24
    3cfc:	11 f0       	breq	.+4      	; 0x3d02 <_ZN5Servo6attachEiii+0xe4>
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	8a de       	rcall	.-748    	; 0x3a16 <_ZL7initISR18timer16_Sequence_t>
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	9b 81       	ldd	r25, Y+3	; 0x03
    3d06:	fc 01       	movw	r30, r24
    3d08:	80 81       	ld	r24, Z
    3d0a:	28 2f       	mov	r18, r24
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	c9 01       	movw	r24, r18
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	82 0f       	add	r24, r18
    3d16:	93 1f       	adc	r25, r19
    3d18:	85 5c       	subi	r24, 0xC5	; 197
    3d1a:	9c 4f       	sbci	r25, 0xFC	; 252
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	20 81       	ld	r18, Z
    3d20:	20 64       	ori	r18, 0x40	; 64
    3d22:	fc 01       	movw	r30, r24
    3d24:	20 83       	st	Z, r18
    3d26:	8a 81       	ldd	r24, Y+2	; 0x02
    3d28:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	80 81       	ld	r24, Z
    3d2e:	29 96       	adiw	r28, 0x09	; 9
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	08 95       	ret

00003d40 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    3d40:	6f 92       	push	r6
    3d42:	7f 92       	push	r7
    3d44:	8f 92       	push	r8
    3d46:	9f 92       	push	r9
    3d48:	af 92       	push	r10
    3d4a:	bf 92       	push	r11
    3d4c:	cf 92       	push	r12
    3d4e:	df 92       	push	r13
    3d50:	ef 92       	push	r14
    3d52:	ff 92       	push	r15
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <_ZN5Servo5writeEi+0x1e>
    3d5e:	1f 92       	push	r1
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	9a 83       	std	Y+2, r25	; 0x02
    3d66:	89 83       	std	Y+1, r24	; 0x01
    3d68:	7c 83       	std	Y+4, r23	; 0x04
    3d6a:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d70:	80 32       	cpi	r24, 0x20	; 32
    3d72:	92 40       	sbci	r25, 0x02	; 2
    3d74:	0c f0       	brlt	.+2      	; 0x3d78 <_ZN5Servo5writeEi+0x38>
    3d76:	5c c0       	rjmp	.+184    	; 0x3e30 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    3d78:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7c:	99 23       	and	r25, r25
    3d7e:	14 f4       	brge	.+4      	; 0x3d84 <_ZN5Servo5writeEi+0x44>
    3d80:	1c 82       	std	Y+4, r1	; 0x04
    3d82:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    3d84:	8b 81       	ldd	r24, Y+3	; 0x03
    3d86:	9c 81       	ldd	r25, Y+4	; 0x04
    3d88:	85 3b       	cpi	r24, 0xB5	; 181
    3d8a:	91 05       	cpc	r25, r1
    3d8c:	24 f0       	brlt	.+8      	; 0x3d96 <_ZN5Servo5writeEi+0x56>
    3d8e:	84 eb       	ldi	r24, 0xB4	; 180
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	9c 83       	std	Y+4, r25	; 0x04
    3d94:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	82 81       	ldd	r24, Z+2	; 0x02
    3d9e:	08 2e       	mov	r0, r24
    3da0:	00 0c       	add	r0, r0
    3da2:	99 0b       	sbc	r25, r25
    3da4:	28 e5       	ldi	r18, 0x58	; 88
    3da6:	32 e0       	ldi	r19, 0x02	; 2
    3da8:	a9 01       	movw	r20, r18
    3daa:	48 1b       	sub	r20, r24
    3dac:	59 0b       	sbc	r21, r25
    3dae:	ca 01       	movw	r24, r20
    3db0:	88 0f       	add	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	88 0f       	add	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	09 2e       	mov	r0, r25
    3dba:	00 0c       	add	r0, r0
    3dbc:	aa 0b       	sbc	r26, r26
    3dbe:	bb 0b       	sbc	r27, r27
    3dc0:	29 81       	ldd	r18, Y+1	; 0x01
    3dc2:	3a 81       	ldd	r19, Y+2	; 0x02
    3dc4:	f9 01       	movw	r30, r18
    3dc6:	21 81       	ldd	r18, Z+1	; 0x01
    3dc8:	02 2e       	mov	r0, r18
    3dca:	00 0c       	add	r0, r0
    3dcc:	33 0b       	sbc	r19, r19
    3dce:	48 e8       	ldi	r20, 0x88	; 136
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	ba 01       	movw	r22, r20
    3dd4:	62 1b       	sub	r22, r18
    3dd6:	73 0b       	sbc	r23, r19
    3dd8:	9b 01       	movw	r18, r22
    3dda:	22 0f       	add	r18, r18
    3ddc:	33 1f       	adc	r19, r19
    3dde:	22 0f       	add	r18, r18
    3de0:	33 1f       	adc	r19, r19
    3de2:	03 2e       	mov	r0, r19
    3de4:	00 0c       	add	r0, r0
    3de6:	44 0b       	sbc	r20, r20
    3de8:	55 0b       	sbc	r21, r21
    3dea:	6b 81       	ldd	r22, Y+3	; 0x03
    3dec:	7c 81       	ldd	r23, Y+4	; 0x04
    3dee:	3b 01       	movw	r6, r22
    3df0:	77 0f       	add	r23, r23
    3df2:	88 08       	sbc	r8, r8
    3df4:	99 08       	sbc	r9, r9
    3df6:	6b 2f       	mov	r22, r27
    3df8:	6f 93       	push	r22
    3dfa:	6a 2f       	mov	r22, r26
    3dfc:	6f 93       	push	r22
    3dfe:	69 2f       	mov	r22, r25
    3e00:	6f 93       	push	r22
    3e02:	8f 93       	push	r24
    3e04:	59 01       	movw	r10, r18
    3e06:	6a 01       	movw	r12, r20
    3e08:	14 eb       	ldi	r17, 0xB4	; 180
    3e0a:	e1 2e       	mov	r14, r17
    3e0c:	f1 2c       	mov	r15, r1
    3e0e:	00 e0       	ldi	r16, 0x00	; 0
    3e10:	10 e0       	ldi	r17, 0x00	; 0
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	a9 01       	movw	r20, r18
    3e18:	c4 01       	movw	r24, r8
    3e1a:	b3 01       	movw	r22, r6
    3e1c:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <_Z3maplllll>
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	9c 83       	std	Y+4, r25	; 0x04
    3e2e:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    3e30:	2b 81       	ldd	r18, Y+3	; 0x03
    3e32:	3c 81       	ldd	r19, Y+4	; 0x04
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	9a 81       	ldd	r25, Y+2	; 0x02
    3e38:	b9 01       	movw	r22, r18
    3e3a:	14 d0       	rcall	.+40     	; 0x3e64 <_ZN5Servo17writeMicrosecondsEi>
}
    3e3c:	00 00       	nop
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	ff 90       	pop	r15
    3e50:	ef 90       	pop	r14
    3e52:	df 90       	pop	r13
    3e54:	cf 90       	pop	r12
    3e56:	bf 90       	pop	r11
    3e58:	af 90       	pop	r10
    3e5a:	9f 90       	pop	r9
    3e5c:	8f 90       	pop	r8
    3e5e:	7f 90       	pop	r7
    3e60:	6f 90       	pop	r6
    3e62:	08 95       	ret

00003e64 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	00 d0       	rcall	.+0      	; 0x3e6a <_ZN5Servo17writeMicrosecondsEi+0x6>
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <_ZN5Servo17writeMicrosecondsEi+0x8>
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	9c 83       	std	Y+4, r25	; 0x04
    3e72:	8b 83       	std	Y+3, r24	; 0x03
    3e74:	7e 83       	std	Y+6, r23	; 0x06
    3e76:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3e78:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	80 81       	ld	r24, Z
    3e80:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	80 33       	cpi	r24, 0x30	; 48
    3e86:	08 f0       	brcs	.+2      	; 0x3e8a <_ZN5Servo17writeMicrosecondsEi+0x26>
    3e88:	99 c0       	rjmp	.+306    	; 0x3fbc <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8e:	fc 01       	movw	r30, r24
    3e90:	81 81       	ldd	r24, Z+1	; 0x01
    3e92:	08 2e       	mov	r0, r24
    3e94:	00 0c       	add	r0, r0
    3e96:	99 0b       	sbc	r25, r25
    3e98:	28 e8       	ldi	r18, 0x88	; 136
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	a9 01       	movw	r20, r18
    3e9e:	48 1b       	sub	r20, r24
    3ea0:	59 0b       	sbc	r21, r25
    3ea2:	ca 01       	movw	r24, r20
    3ea4:	9c 01       	movw	r18, r24
    3ea6:	22 0f       	add	r18, r18
    3ea8:	33 1f       	adc	r19, r19
    3eaa:	22 0f       	add	r18, r18
    3eac:	33 1f       	adc	r19, r19
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	82 17       	cp	r24, r18
    3eb4:	93 07       	cpc	r25, r19
    3eb6:	a4 f4       	brge	.+40     	; 0x3ee0 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    3eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eba:	9c 81       	ldd	r25, Y+4	; 0x04
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	81 81       	ldd	r24, Z+1	; 0x01
    3ec0:	08 2e       	mov	r0, r24
    3ec2:	00 0c       	add	r0, r0
    3ec4:	99 0b       	sbc	r25, r25
    3ec6:	28 e8       	ldi	r18, 0x88	; 136
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	a9 01       	movw	r20, r18
    3ecc:	48 1b       	sub	r20, r24
    3ece:	59 0b       	sbc	r21, r25
    3ed0:	ca 01       	movw	r24, r20
    3ed2:	88 0f       	add	r24, r24
    3ed4:	99 1f       	adc	r25, r25
    3ed6:	88 0f       	add	r24, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	9e 83       	std	Y+6, r25	; 0x06
    3edc:	8d 83       	std	Y+5, r24	; 0x05
    3ede:	2a c0       	rjmp	.+84     	; 0x3f34 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    3ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	82 81       	ldd	r24, Z+2	; 0x02
    3ee8:	08 2e       	mov	r0, r24
    3eea:	00 0c       	add	r0, r0
    3eec:	99 0b       	sbc	r25, r25
    3eee:	28 e5       	ldi	r18, 0x58	; 88
    3ef0:	32 e0       	ldi	r19, 0x02	; 2
    3ef2:	a9 01       	movw	r20, r18
    3ef4:	48 1b       	sub	r20, r24
    3ef6:	59 0b       	sbc	r21, r25
    3ef8:	ca 01       	movw	r24, r20
    3efa:	9c 01       	movw	r18, r24
    3efc:	22 0f       	add	r18, r18
    3efe:	33 1f       	adc	r19, r19
    3f00:	22 0f       	add	r18, r18
    3f02:	33 1f       	adc	r19, r19
    3f04:	8d 81       	ldd	r24, Y+5	; 0x05
    3f06:	9e 81       	ldd	r25, Y+6	; 0x06
    3f08:	28 17       	cp	r18, r24
    3f0a:	39 07       	cpc	r19, r25
    3f0c:	9c f4       	brge	.+38     	; 0x3f34 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    3f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f10:	9c 81       	ldd	r25, Y+4	; 0x04
    3f12:	fc 01       	movw	r30, r24
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	08 2e       	mov	r0, r24
    3f18:	00 0c       	add	r0, r0
    3f1a:	99 0b       	sbc	r25, r25
    3f1c:	28 e5       	ldi	r18, 0x58	; 88
    3f1e:	32 e0       	ldi	r19, 0x02	; 2
    3f20:	a9 01       	movw	r20, r18
    3f22:	48 1b       	sub	r20, r24
    3f24:	59 0b       	sbc	r21, r25
    3f26:	ca 01       	movw	r24, r20
    3f28:	88 0f       	add	r24, r24
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	88 0f       	add	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	9e 83       	std	Y+6, r25	; 0x06
    3f32:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    3f34:	8d 81       	ldd	r24, Y+5	; 0x05
    3f36:	9e 81       	ldd	r25, Y+6	; 0x06
    3f38:	02 97       	sbiw	r24, 0x02	; 2
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f40:	9e 81       	ldd	r25, Y+6	; 0x06
    3f42:	09 2e       	mov	r0, r25
    3f44:	00 0c       	add	r0, r0
    3f46:	aa 0b       	sbc	r26, r26
    3f48:	bb 0b       	sbc	r27, r27
    3f4a:	88 0f       	add	r24, r24
    3f4c:	99 1f       	adc	r25, r25
    3f4e:	aa 1f       	adc	r26, r26
    3f50:	bb 1f       	adc	r27, r27
    3f52:	88 0f       	add	r24, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	aa 1f       	adc	r26, r26
    3f58:	bb 1f       	adc	r27, r27
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	aa 1f       	adc	r26, r26
    3f60:	bb 1f       	adc	r27, r27
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	aa 1f       	adc	r26, r26
    3f68:	bb 1f       	adc	r27, r27
    3f6a:	bb 23       	and	r27, r27
    3f6c:	1c f4       	brge	.+6      	; 0x3f74 <_ZN5Servo17writeMicrosecondsEi+0x110>
    3f6e:	07 96       	adiw	r24, 0x07	; 7
    3f70:	a1 1d       	adc	r26, r1
    3f72:	b1 1d       	adc	r27, r1
    3f74:	68 94       	set
    3f76:	12 f8       	bld	r1, 2
    3f78:	b5 95       	asr	r27
    3f7a:	a7 95       	ror	r26
    3f7c:	97 95       	ror	r25
    3f7e:	87 95       	ror	r24
    3f80:	16 94       	lsr	r1
    3f82:	d1 f7       	brne	.-12     	; 0x3f78 <_ZN5Servo17writeMicrosecondsEi+0x114>
    3f84:	9e 83       	std	Y+6, r25	; 0x06
    3f86:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    3f88:	8f e5       	ldi	r24, 0x5F	; 95
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	80 81       	ld	r24, Z
    3f90:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    3f92:	f8 94       	cli
    servos[channel].ticks = value;
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	28 2f       	mov	r18, r24
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	4d 81       	ldd	r20, Y+5	; 0x05
    3f9c:	5e 81       	ldd	r21, Y+6	; 0x06
    3f9e:	c9 01       	movw	r24, r18
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	82 0f       	add	r24, r18
    3fa6:	93 1f       	adc	r25, r19
    3fa8:	84 5c       	subi	r24, 0xC4	; 196
    3faa:	9c 4f       	sbci	r25, 0xFC	; 252
    3fac:	fc 01       	movw	r30, r24
    3fae:	51 83       	std	Z+1, r21	; 0x01
    3fb0:	40 83       	st	Z, r20
    SREG = oldSREG;
    3fb2:	8f e5       	ldi	r24, 0x5F	; 95
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	2a 81       	ldd	r18, Y+2	; 0x02
    3fb8:	fc 01       	movw	r30, r24
    3fba:	20 83       	st	Z, r18
  }
}
    3fbc:	00 00       	nop
    3fbe:	26 96       	adiw	r28, 0x06	; 6
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	de bf       	out	0x3e, r29	; 62
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	08 95       	ret

00003fd0 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    3fd0:	2f 92       	push	r2
    3fd2:	3f 92       	push	r3
    3fd4:	4f 92       	push	r4
    3fd6:	5f 92       	push	r5
    3fd8:	6f 92       	push	r6
    3fda:	7f 92       	push	r7
    3fdc:	8f 92       	push	r8
    3fde:	9f 92       	push	r9
    3fe0:	af 92       	push	r10
    3fe2:	bf 92       	push	r11
    3fe4:	cf 92       	push	r12
    3fe6:	df 92       	push	r13
    3fe8:	ef 92       	push	r14
    3fea:	ff 92       	push	r15
    3fec:	0f 93       	push	r16
    3fee:	1f 93       	push	r17
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	1f 92       	push	r1
    3ff6:	1f 92       	push	r1
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	9a 83       	std	Y+2, r25	; 0x02
    3ffe:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	9a 81       	ldd	r25, Y+2	; 0x02
    4004:	fc 01       	movw	r30, r24
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	08 2e       	mov	r0, r24
    400a:	00 0c       	add	r0, r0
    400c:	99 0b       	sbc	r25, r25
    400e:	28 e5       	ldi	r18, 0x58	; 88
    4010:	32 e0       	ldi	r19, 0x02	; 2
    4012:	a9 01       	movw	r20, r18
    4014:	48 1b       	sub	r20, r24
    4016:	59 0b       	sbc	r21, r25
    4018:	ca 01       	movw	r24, r20
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	1c 01       	movw	r2, r24
    4024:	99 0f       	add	r25, r25
    4026:	44 08       	sbc	r4, r4
    4028:	55 08       	sbc	r5, r5
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	9a 81       	ldd	r25, Y+2	; 0x02
    402e:	fc 01       	movw	r30, r24
    4030:	81 81       	ldd	r24, Z+1	; 0x01
    4032:	08 2e       	mov	r0, r24
    4034:	00 0c       	add	r0, r0
    4036:	99 0b       	sbc	r25, r25
    4038:	28 e8       	ldi	r18, 0x88	; 136
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	a9 01       	movw	r20, r18
    403e:	48 1b       	sub	r20, r24
    4040:	59 0b       	sbc	r21, r25
    4042:	ca 01       	movw	r24, r20
    4044:	88 0f       	add	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	88 0f       	add	r24, r24
    404a:	99 1f       	adc	r25, r25
    404c:	3c 01       	movw	r6, r24
    404e:	99 0f       	add	r25, r25
    4050:	88 08       	sbc	r8, r8
    4052:	99 08       	sbc	r9, r9
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	9a 81       	ldd	r25, Y+2	; 0x02
    4058:	30 d0       	rcall	.+96     	; 0x40ba <_ZN5Servo16readMicrosecondsEv>
    405a:	01 96       	adiw	r24, 0x01	; 1
    405c:	09 2e       	mov	r0, r25
    405e:	00 0c       	add	r0, r0
    4060:	aa 0b       	sbc	r26, r26
    4062:	bb 0b       	sbc	r27, r27
    4064:	1f 92       	push	r1
    4066:	1f 92       	push	r1
    4068:	1f 92       	push	r1
    406a:	24 eb       	ldi	r18, 0xB4	; 180
    406c:	2f 93       	push	r18
    406e:	a1 2c       	mov	r10, r1
    4070:	b1 2c       	mov	r11, r1
    4072:	65 01       	movw	r12, r10
    4074:	82 01       	movw	r16, r4
    4076:	71 01       	movw	r14, r2
    4078:	a4 01       	movw	r20, r8
    407a:	93 01       	movw	r18, r6
    407c:	bc 01       	movw	r22, r24
    407e:	cd 01       	movw	r24, r26
    4080:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <_Z3maplllll>
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
}
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	ff 90       	pop	r15
    409e:	ef 90       	pop	r14
    40a0:	df 90       	pop	r13
    40a2:	cf 90       	pop	r12
    40a4:	bf 90       	pop	r11
    40a6:	af 90       	pop	r10
    40a8:	9f 90       	pop	r9
    40aa:	8f 90       	pop	r8
    40ac:	7f 90       	pop	r7
    40ae:	6f 90       	pop	r6
    40b0:	5f 90       	pop	r5
    40b2:	4f 90       	pop	r4
    40b4:	3f 90       	pop	r3
    40b6:	2f 90       	pop	r2
    40b8:	08 95       	ret

000040ba <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <_ZN5Servo16readMicrosecondsEv+0x6>
    40c0:	1f 92       	push	r1
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	9c 83       	std	Y+4, r25	; 0x04
    40c8:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	9c 81       	ldd	r25, Y+4	; 0x04
    40ce:	fc 01       	movw	r30, r24
    40d0:	80 81       	ld	r24, Z
    40d2:	8f 3f       	cpi	r24, 0xFF	; 255
    40d4:	01 f1       	breq	.+64     	; 0x4116 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    40d6:	8b 81       	ldd	r24, Y+3	; 0x03
    40d8:	9c 81       	ldd	r25, Y+4	; 0x04
    40da:	fc 01       	movw	r30, r24
    40dc:	80 81       	ld	r24, Z
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	c9 01       	movw	r24, r18
    40e4:	88 0f       	add	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	82 0f       	add	r24, r18
    40ea:	93 1f       	adc	r25, r19
    40ec:	84 5c       	subi	r24, 0xC4	; 196
    40ee:	9c 4f       	sbci	r25, 0xFC	; 252
    40f0:	fc 01       	movw	r30, r24
    40f2:	80 81       	ld	r24, Z
    40f4:	91 81       	ldd	r25, Z+1	; 0x01
    40f6:	88 0f       	add	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	88 0f       	add	r24, r24
    40fc:	99 1f       	adc	r25, r25
    40fe:	88 0f       	add	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	92 95       	swap	r25
    4104:	82 95       	swap	r24
    4106:	8f 70       	andi	r24, 0x0F	; 15
    4108:	89 27       	eor	r24, r25
    410a:	9f 70       	andi	r25, 0x0F	; 15
    410c:	89 27       	eor	r24, r25
    410e:	02 96       	adiw	r24, 0x02	; 2
    4110:	9a 83       	std	Y+2, r25	; 0x02
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	02 c0       	rjmp	.+4      	; 0x411a <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    4116:	1a 82       	std	Y+2, r1	; 0x02
    4118:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	2f 97       	sbiw	r28, 0x0f	; 15
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4140:	8f e5       	ldi	r24, 0x5F	; 95
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	fc 01       	movw	r30, r24
    4146:	80 81       	ld	r24, Z
    4148:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    414a:	f8 94       	cli
  if (!initialized) {
    414c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN8SPIClass11initializedE>
    4150:	88 23       	and	r24, r24
    4152:	09 f0       	breq	.+2      	; 0x4156 <_ZN8SPIClass5beginEv+0x2a>
    4154:	5b c0       	rjmp	.+182    	; 0x420c <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4156:	89 ec       	ldi	r24, 0xC9	; 201
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	9b 83       	std	Y+3, r25	; 0x03
    415c:	8a 83       	std	Y+2, r24	; 0x02
    415e:	8a 81       	ldd	r24, Y+2	; 0x02
    4160:	9b 81       	ldd	r25, Y+3	; 0x03
    4162:	fc 01       	movw	r30, r24
    4164:	84 91       	lpm	r24, Z
    4166:	8c 83       	std	Y+4, r24	; 0x04
    4168:	8c 81       	ldd	r24, Y+4	; 0x04
    416a:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    416c:	83 e8       	ldi	r24, 0x83	; 131
    416e:	91 e0       	ldi	r25, 0x01	; 1
    4170:	9f 83       	std	Y+7, r25	; 0x07
    4172:	8e 83       	std	Y+6, r24	; 0x06
    4174:	8e 81       	ldd	r24, Y+6	; 0x06
    4176:	9f 81       	ldd	r25, Y+7	; 0x07
    4178:	fc 01       	movw	r30, r24
    417a:	84 91       	lpm	r24, Z
    417c:	88 87       	std	Y+8, r24	; 0x08
    417e:	88 85       	ldd	r24, Y+8	; 0x08
    4180:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    4182:	8d 81       	ldd	r24, Y+5	; 0x05
    4184:	88 2f       	mov	r24, r24
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	82 5f       	subi	r24, 0xF2	; 242
    418e:	9d 4f       	sbci	r25, 0xFD	; 253
    4190:	9b 87       	std	Y+11, r25	; 0x0b
    4192:	8a 87       	std	Y+10, r24	; 0x0a
    4194:	8a 85       	ldd	r24, Y+10	; 0x0a
    4196:	9b 85       	ldd	r25, Y+11	; 0x0b
    4198:	fc 01       	movw	r30, r24
    419a:	25 91       	lpm	r18, Z+
    419c:	34 91       	lpm	r19, Z
    419e:	cf 01       	movw	r24, r30
    41a0:	3d 87       	std	Y+13, r19	; 0x0d
    41a2:	2c 87       	std	Y+12, r18	; 0x0c
    41a4:	9b 87       	std	Y+11, r25	; 0x0b
    41a6:	8a 87       	std	Y+10, r24	; 0x0a
    41a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    41aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    41ac:	9f 87       	std	Y+15, r25	; 0x0f
    41ae:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    41b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    41b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    41b4:	fc 01       	movw	r30, r24
    41b6:	90 81       	ld	r25, Z
    41b8:	89 85       	ldd	r24, Y+9	; 0x09
    41ba:	98 23       	and	r25, r24
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	99 23       	and	r25, r25
    41c0:	09 f0       	breq	.+2      	; 0x41c4 <_ZN8SPIClass5beginEv+0x98>
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	88 23       	and	r24, r24
    41c6:	21 f0       	breq	.+8      	; 0x41d0 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	85 e3       	ldi	r24, 0x35	; 53
    41cc:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    41d0:	61 e0       	ldi	r22, 0x01	; 1
    41d2:	85 e3       	ldi	r24, 0x35	; 53
    41d4:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    41d8:	8c e4       	ldi	r24, 0x4C	; 76
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	2c e4       	ldi	r18, 0x4C	; 76
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	f9 01       	movw	r30, r18
    41e2:	20 81       	ld	r18, Z
    41e4:	20 61       	ori	r18, 0x10	; 16
    41e6:	fc 01       	movw	r30, r24
    41e8:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    41ea:	8c e4       	ldi	r24, 0x4C	; 76
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	2c e4       	ldi	r18, 0x4C	; 76
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	f9 01       	movw	r30, r18
    41f4:	20 81       	ld	r18, Z
    41f6:	20 64       	ori	r18, 0x40	; 64
    41f8:	fc 01       	movw	r30, r24
    41fa:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    41fc:	61 e0       	ldi	r22, 0x01	; 1
    41fe:	84 e3       	ldi	r24, 0x34	; 52
    4200:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
    pinMode(MOSI, OUTPUT);
    4204:	61 e0       	ldi	r22, 0x01	; 1
    4206:	83 e3       	ldi	r24, 0x33	; 51
    4208:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <pinMode>
  }
  initialized++; // reference count
    420c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN8SPIClass11initializedE>
    4210:	8f 5f       	subi	r24, 0xFF	; 255
    4212:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4216:	8f e5       	ldi	r24, 0x5F	; 95
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	29 81       	ldd	r18, Y+1	; 0x01
    421c:	fc 01       	movw	r30, r24
    421e:	20 83       	st	Z, r18
}
    4220:	00 00       	nop
    4222:	2f 96       	adiw	r28, 0x0f	; 15
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	08 95       	ret

00004234 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4234:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_sendStop>
    423e:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_inRepStart>
    4242:	61 e0       	ldi	r22, 0x01	; 1
    4244:	84 e1       	ldi	r24, 0x14	; 20
    4246:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	85 e1       	ldi	r24, 0x15	; 21
    424e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    4252:	e9 eb       	ldi	r30, 0xB9	; 185
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 81       	ld	r24, Z
    4258:	8e 7f       	andi	r24, 0xFE	; 254
    425a:	80 83       	st	Z, r24
    425c:	80 81       	ld	r24, Z
    425e:	8d 7f       	andi	r24, 0xFD	; 253
    4260:	80 83       	st	Z, r24
    4262:	88 e4       	ldi	r24, 0x48	; 72
    4264:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4268:	85 e4       	ldi	r24, 0x45	; 69
    426a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    426e:	08 95       	ret

00004270 <twi_disable>:
    4270:	ec eb       	ldi	r30, 0xBC	; 188
    4272:	f0 e0       	ldi	r31, 0x00	; 0
    4274:	80 81       	ld	r24, Z
    4276:	8a 7b       	andi	r24, 0xBA	; 186
    4278:	80 83       	st	Z, r24
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	84 e1       	ldi	r24, 0x14	; 20
    427e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <digitalWrite>
    4282:	60 e0       	ldi	r22, 0x00	; 0
    4284:	85 e1       	ldi	r24, 0x15	; 21
    4286:	0c 94 24 2e 	jmp	0x5c48	; 0x5c48 <digitalWrite>

0000428a <twi_transmit>:
    428a:	40 91 f6 03 	lds	r20, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    428e:	26 2f       	mov	r18, r22
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	24 0f       	add	r18, r20
    4294:	31 1d       	adc	r19, r1
    4296:	21 32       	cpi	r18, 0x21	; 33
    4298:	31 05       	cpc	r19, r1
    429a:	dc f4       	brge	.+54     	; 0x42d2 <twi_transmit+0x48>
    429c:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <twi_state>
    42a0:	24 30       	cpi	r18, 0x04	; 4
    42a2:	c9 f4       	brne	.+50     	; 0x42d6 <twi_transmit+0x4c>
    42a4:	fc 01       	movw	r30, r24
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	86 17       	cp	r24, r22
    42ac:	58 f4       	brcc	.+22     	; 0x42c4 <twi_transmit+0x3a>
    42ae:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    42b2:	21 91       	ld	r18, Z+
    42b4:	dc 01       	movw	r26, r24
    42b6:	a8 50       	subi	r26, 0x08	; 8
    42b8:	bc 4f       	sbci	r27, 0xFC	; 252
    42ba:	a3 0f       	add	r26, r19
    42bc:	b1 1d       	adc	r27, r1
    42be:	2c 93       	st	X, r18
    42c0:	01 96       	adiw	r24, 0x01	; 1
    42c2:	f3 cf       	rjmp	.-26     	; 0x42aa <twi_transmit+0x20>
    42c4:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    42c8:	68 0f       	add	r22, r24
    42ca:	60 93 f6 03 	sts	0x03F6, r22	; 0x8003f6 <twi_txBufferLength>
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	08 95       	ret
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	08 95       	ret
    42d6:	82 e0       	ldi	r24, 0x02	; 2
    42d8:	08 95       	ret

000042da <twi_attachSlaveRxEvent>:
    42da:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <twi_onSlaveReceive+0x1>
    42de:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <twi_onSlaveReceive>
    42e2:	08 95       	ret

000042e4 <twi_attachSlaveTxEvent>:
    42e4:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <twi_onSlaveTransmit+0x1>
    42e8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_onSlaveTransmit>
    42ec:	08 95       	ret

000042ee <twi_releaseBus>:
    42ee:	85 ec       	ldi	r24, 0xC5	; 197
    42f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    42f4:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
    42f8:	08 95       	ret

000042fa <twi_handleTimeout>:
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	91 e0       	ldi	r25, 0x01	; 1
    4300:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <twi_timed_out_flag>
    4304:	88 23       	and	r24, r24
    4306:	51 f0       	breq	.+20     	; 0x431c <twi_handleTimeout+0x22>
    4308:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    430c:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4310:	af df       	rcall	.-162    	; 0x4270 <twi_disable>
    4312:	90 df       	rcall	.-224    	; 0x4234 <twi_init>
    4314:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4318:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	08 95       	ret

00004322 <twi_readFrom>:
    4322:	4f 92       	push	r4
    4324:	5f 92       	push	r5
    4326:	6f 92       	push	r6
    4328:	7f 92       	push	r7
    432a:	8f 92       	push	r8
    432c:	9f 92       	push	r9
    432e:	af 92       	push	r10
    4330:	bf 92       	push	r11
    4332:	cf 92       	push	r12
    4334:	df 92       	push	r13
    4336:	ef 92       	push	r14
    4338:	ff 92       	push	r15
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	f8 2e       	mov	r15, r24
    4344:	16 2f       	mov	r17, r22
    4346:	07 2f       	mov	r16, r23
    4348:	c4 2f       	mov	r28, r20
    434a:	e2 2e       	mov	r14, r18
    434c:	41 32       	cpi	r20, 0x21	; 33
    434e:	08 f0       	brcs	.+2      	; 0x4352 <twi_readFrom+0x30>
    4350:	bc c0       	rjmp	.+376    	; 0x44ca <twi_readFrom+0x1a8>
    4352:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    4356:	4b 01       	movw	r8, r22
    4358:	5c 01       	movw	r10, r24
    435a:	d0 91 47 04 	lds	r29, 0x0447	; 0x800447 <twi_state>
    435e:	dd 23       	and	r29, r29
    4360:	29 f1       	breq	.+74     	; 0x43ac <twi_readFrom+0x8a>
    4362:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    4366:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    436a:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    436e:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4372:	89 2b       	or	r24, r25
    4374:	8a 2b       	or	r24, r26
    4376:	8b 2b       	or	r24, r27
    4378:	81 f3       	breq	.-32     	; 0x435a <twi_readFrom+0x38>
    437a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    437e:	40 90 40 04 	lds	r4, 0x0440	; 0x800440 <twi_timeout_us>
    4382:	50 90 41 04 	lds	r5, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4386:	60 90 42 04 	lds	r6, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    438a:	70 90 43 04 	lds	r7, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	88 19       	sub	r24, r8
    4394:	99 09       	sbc	r25, r9
    4396:	aa 09       	sbc	r26, r10
    4398:	bb 09       	sbc	r27, r11
    439a:	48 16       	cp	r4, r24
    439c:	59 06       	cpc	r5, r25
    439e:	6a 06       	cpc	r6, r26
    43a0:	7b 06       	cpc	r7, r27
    43a2:	d8 f6       	brcc	.-74     	; 0x435a <twi_readFrom+0x38>
    43a4:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    43a8:	a8 df       	rcall	.-176    	; 0x42fa <twi_handleTimeout>
    43aa:	8f c0       	rjmp	.+286    	; 0x44ca <twi_readFrom+0x1a8>
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
    43b2:	e0 92 45 04 	sts	0x0445, r14	; 0x800445 <twi_sendStop>
    43b6:	9f ef       	ldi	r25, 0xFF	; 255
    43b8:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <twi_error>
    43bc:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_masterBufferIndex>
    43c0:	9c 0f       	add	r25, r28
    43c2:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <twi_masterBufferLength>
    43c6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_slarw>
    43ca:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <twi_slarw>
    43ce:	8f 2d       	mov	r24, r15
    43d0:	88 0f       	add	r24, r24
    43d2:	89 2b       	or	r24, r25
    43d4:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_slarw>
    43d8:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_inRepStart>
    43dc:	81 30       	cpi	r24, 0x01	; 1
    43de:	89 f5       	brne	.+98     	; 0x4442 <twi_readFrom+0x120>
    43e0:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_inRepStart>
    43e4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    43e8:	6b 01       	movw	r12, r22
    43ea:	7c 01       	movw	r14, r24
    43ec:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_slarw>
    43f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    43f4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    43f8:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    43fc:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4400:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4404:	89 2b       	or	r24, r25
    4406:	8a 2b       	or	r24, r26
    4408:	8b 2b       	or	r24, r27
    440a:	a9 f0       	breq	.+42     	; 0x4436 <twi_readFrom+0x114>
    440c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    4410:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    4414:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4418:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    441c:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	8c 19       	sub	r24, r12
    4426:	9d 09       	sbc	r25, r13
    4428:	ae 09       	sbc	r26, r14
    442a:	bf 09       	sbc	r27, r15
    442c:	88 16       	cp	r8, r24
    442e:	99 06       	cpc	r9, r25
    4430:	aa 06       	cpc	r10, r26
    4432:	bb 06       	cpc	r11, r27
    4434:	90 f1       	brcs	.+100    	; 0x449a <twi_readFrom+0x178>
    4436:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    443a:	83 fd       	sbrc	r24, 3
    443c:	d7 cf       	rjmp	.-82     	; 0x43ec <twi_readFrom+0xca>
    443e:	85 ec       	ldi	r24, 0xC5	; 197
    4440:	01 c0       	rjmp	.+2      	; 0x4444 <twi_readFrom+0x122>
    4442:	85 ee       	ldi	r24, 0xE5	; 229
    4444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4448:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    444c:	6b 01       	movw	r12, r22
    444e:	7c 01       	movw	r14, r24
    4450:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_state>
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	29 f5       	brne	.+74     	; 0x44a2 <twi_readFrom+0x180>
    4458:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    445c:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4460:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4464:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4468:	89 2b       	or	r24, r25
    446a:	8a 2b       	or	r24, r26
    446c:	8b 2b       	or	r24, r27
    446e:	81 f3       	breq	.-32     	; 0x4450 <twi_readFrom+0x12e>
    4470:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    4474:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    4478:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    447c:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4480:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	8c 19       	sub	r24, r12
    448a:	9d 09       	sbc	r25, r13
    448c:	ae 09       	sbc	r26, r14
    448e:	bf 09       	sbc	r27, r15
    4490:	88 16       	cp	r8, r24
    4492:	99 06       	cpc	r9, r25
    4494:	aa 06       	cpc	r10, r26
    4496:	bb 06       	cpc	r11, r27
    4498:	d8 f6       	brcc	.-74     	; 0x4450 <twi_readFrom+0x12e>
    449a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    449e:	2d df       	rcall	.-422    	; 0x42fa <twi_handleTimeout>
    44a0:	15 c0       	rjmp	.+42     	; 0x44cc <twi_readFrom+0x1aa>
    44a2:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <twi_masterBufferIndex>
    44a6:	8c 17       	cp	r24, r28
    44a8:	10 f4       	brcc	.+4      	; 0x44ae <twi_readFrom+0x18c>
    44aa:	c0 91 19 04 	lds	r28, 0x0419	; 0x800419 <twi_masterBufferIndex>
    44ae:	aa e1       	ldi	r26, 0x1A	; 26
    44b0:	b4 e0       	ldi	r27, 0x04	; 4
    44b2:	91 2f       	mov	r25, r17
    44b4:	e1 2f       	mov	r30, r17
    44b6:	f0 2f       	mov	r31, r16
    44b8:	8e 2f       	mov	r24, r30
    44ba:	89 1b       	sub	r24, r25
    44bc:	8c 17       	cp	r24, r28
    44be:	18 f4       	brcc	.+6      	; 0x44c6 <twi_readFrom+0x1a4>
    44c0:	8d 91       	ld	r24, X+
    44c2:	81 93       	st	Z+, r24
    44c4:	f9 cf       	rjmp	.-14     	; 0x44b8 <twi_readFrom+0x196>
    44c6:	dc 2f       	mov	r29, r28
    44c8:	01 c0       	rjmp	.+2      	; 0x44cc <twi_readFrom+0x1aa>
    44ca:	d0 e0       	ldi	r29, 0x00	; 0
    44cc:	8d 2f       	mov	r24, r29
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	ff 90       	pop	r15
    44d8:	ef 90       	pop	r14
    44da:	df 90       	pop	r13
    44dc:	cf 90       	pop	r12
    44de:	bf 90       	pop	r11
    44e0:	af 90       	pop	r10
    44e2:	9f 90       	pop	r9
    44e4:	8f 90       	pop	r8
    44e6:	7f 90       	pop	r7
    44e8:	6f 90       	pop	r6
    44ea:	5f 90       	pop	r5
    44ec:	4f 90       	pop	r4
    44ee:	08 95       	ret

000044f0 <twi_writeTo>:
    44f0:	4f 92       	push	r4
    44f2:	5f 92       	push	r5
    44f4:	6f 92       	push	r6
    44f6:	7f 92       	push	r7
    44f8:	8f 92       	push	r8
    44fa:	9f 92       	push	r9
    44fc:	af 92       	push	r10
    44fe:	bf 92       	push	r11
    4500:	cf 92       	push	r12
    4502:	df 92       	push	r13
    4504:	ef 92       	push	r14
    4506:	ff 92       	push	r15
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	41 32       	cpi	r20, 0x21	; 33
    4512:	08 f0       	brcs	.+2      	; 0x4516 <twi_writeTo+0x26>
    4514:	c5 c0       	rjmp	.+394    	; 0x46a0 <twi_writeTo+0x1b0>
    4516:	12 2f       	mov	r17, r18
    4518:	f4 2e       	mov	r15, r20
    451a:	d7 2e       	mov	r13, r23
    451c:	e6 2e       	mov	r14, r22
    451e:	d8 2f       	mov	r29, r24
    4520:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    4524:	4b 01       	movw	r8, r22
    4526:	5c 01       	movw	r10, r24
    4528:	c0 91 47 04 	lds	r28, 0x0447	; 0x800447 <twi_state>
    452c:	cc 23       	and	r28, r28
    452e:	11 f1       	breq	.+68     	; 0x4574 <twi_writeTo+0x84>
    4530:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    4534:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4538:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    453c:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4540:	89 2b       	or	r24, r25
    4542:	8a 2b       	or	r24, r26
    4544:	8b 2b       	or	r24, r27
    4546:	81 f3       	breq	.-32     	; 0x4528 <twi_writeTo+0x38>
    4548:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    454c:	40 90 40 04 	lds	r4, 0x0440	; 0x800440 <twi_timeout_us>
    4550:	50 90 41 04 	lds	r5, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4554:	60 90 42 04 	lds	r6, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4558:	70 90 43 04 	lds	r7, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	88 19       	sub	r24, r8
    4562:	99 09       	sbc	r25, r9
    4564:	aa 09       	sbc	r26, r10
    4566:	bb 09       	sbc	r27, r11
    4568:	48 16       	cp	r4, r24
    456a:	59 06       	cpc	r5, r25
    456c:	6a 06       	cpc	r6, r26
    456e:	7b 06       	cpc	r7, r27
    4570:	d8 f6       	brcc	.-74     	; 0x4528 <twi_writeTo+0x38>
    4572:	83 c0       	rjmp	.+262    	; 0x467a <twi_writeTo+0x18a>
    4574:	82 e0       	ldi	r24, 0x02	; 2
    4576:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
    457a:	00 93 45 04 	sts	0x0445, r16	; 0x800445 <twi_sendStop>
    457e:	8f ef       	ldi	r24, 0xFF	; 255
    4580:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_error>
    4584:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_masterBufferIndex>
    4588:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <twi_masterBufferLength>
    458c:	9e 2d       	mov	r25, r14
    458e:	aa e1       	ldi	r26, 0x1A	; 26
    4590:	b4 e0       	ldi	r27, 0x04	; 4
    4592:	ee 2d       	mov	r30, r14
    4594:	fd 2d       	mov	r31, r13
    4596:	8e 2f       	mov	r24, r30
    4598:	89 1b       	sub	r24, r25
    459a:	8f 15       	cp	r24, r15
    459c:	18 f4       	brcc	.+6      	; 0x45a4 <twi_writeTo+0xb4>
    459e:	81 91       	ld	r24, Z+
    45a0:	8d 93       	st	X+, r24
    45a2:	f9 cf       	rjmp	.-14     	; 0x4596 <twi_writeTo+0xa6>
    45a4:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_slarw>
    45a8:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <twi_slarw>
    45ac:	dd 0f       	add	r29, r29
    45ae:	d9 2b       	or	r29, r25
    45b0:	d0 93 46 04 	sts	0x0446, r29	; 0x800446 <twi_slarw>
    45b4:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_inRepStart>
    45b8:	81 30       	cpi	r24, 0x01	; 1
    45ba:	89 f5       	brne	.+98     	; 0x461e <twi_writeTo+0x12e>
    45bc:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_inRepStart>
    45c0:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    45c4:	6b 01       	movw	r12, r22
    45c6:	7c 01       	movw	r14, r24
    45c8:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_slarw>
    45cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    45d0:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    45d4:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    45d8:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    45dc:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    45e0:	89 2b       	or	r24, r25
    45e2:	8a 2b       	or	r24, r26
    45e4:	8b 2b       	or	r24, r27
    45e6:	a9 f0       	breq	.+42     	; 0x4612 <twi_writeTo+0x122>
    45e8:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    45ec:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    45f0:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    45f4:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    45f8:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	8c 19       	sub	r24, r12
    4602:	9d 09       	sbc	r25, r13
    4604:	ae 09       	sbc	r26, r14
    4606:	bf 09       	sbc	r27, r15
    4608:	88 16       	cp	r8, r24
    460a:	99 06       	cpc	r9, r25
    460c:	aa 06       	cpc	r10, r26
    460e:	bb 06       	cpc	r11, r27
    4610:	a0 f1       	brcs	.+104    	; 0x467a <twi_writeTo+0x18a>
    4612:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4616:	83 fd       	sbrc	r24, 3
    4618:	d7 cf       	rjmp	.-82     	; 0x45c8 <twi_writeTo+0xd8>
    461a:	85 ec       	ldi	r24, 0xC5	; 197
    461c:	01 c0       	rjmp	.+2      	; 0x4620 <twi_writeTo+0x130>
    461e:	85 ee       	ldi	r24, 0xE5	; 229
    4620:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4624:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    4628:	6b 01       	movw	r12, r22
    462a:	7c 01       	movw	r14, r24
    462c:	11 23       	and	r17, r17
    462e:	51 f1       	breq	.+84     	; 0x4684 <twi_writeTo+0x194>
    4630:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_state>
    4634:	82 30       	cpi	r24, 0x02	; 2
    4636:	31 f5       	brne	.+76     	; 0x4684 <twi_writeTo+0x194>
    4638:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    463c:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4640:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4644:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4648:	89 2b       	or	r24, r25
    464a:	8a 2b       	or	r24, r26
    464c:	8b 2b       	or	r24, r27
    464e:	71 f3       	breq	.-36     	; 0x462c <twi_writeTo+0x13c>
    4650:	0e 94 c8 2c 	call	0x5990	; 0x5990 <micros>
    4654:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    4658:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    465c:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4660:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	8c 19       	sub	r24, r12
    466a:	9d 09       	sbc	r25, r13
    466c:	ae 09       	sbc	r26, r14
    466e:	bf 09       	sbc	r27, r15
    4670:	88 16       	cp	r8, r24
    4672:	99 06       	cpc	r9, r25
    4674:	aa 06       	cpc	r10, r26
    4676:	bb 06       	cpc	r11, r27
    4678:	c8 f6       	brcc	.-78     	; 0x462c <twi_writeTo+0x13c>
    467a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    467e:	3d de       	rcall	.-902    	; 0x42fa <twi_handleTimeout>
    4680:	c5 e0       	ldi	r28, 0x05	; 5
    4682:	13 c0       	rjmp	.+38     	; 0x46aa <twi_writeTo+0x1ba>
    4684:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_error>
    4688:	8f 3f       	cpi	r24, 0xFF	; 255
    468a:	79 f0       	breq	.+30     	; 0x46aa <twi_writeTo+0x1ba>
    468c:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_error>
    4690:	80 32       	cpi	r24, 0x20	; 32
    4692:	41 f0       	breq	.+16     	; 0x46a4 <twi_writeTo+0x1b4>
    4694:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_error>
    4698:	80 33       	cpi	r24, 0x30	; 48
    469a:	31 f0       	breq	.+12     	; 0x46a8 <twi_writeTo+0x1b8>
    469c:	c4 e0       	ldi	r28, 0x04	; 4
    469e:	05 c0       	rjmp	.+10     	; 0x46aa <twi_writeTo+0x1ba>
    46a0:	c1 e0       	ldi	r28, 0x01	; 1
    46a2:	03 c0       	rjmp	.+6      	; 0x46aa <twi_writeTo+0x1ba>
    46a4:	c2 e0       	ldi	r28, 0x02	; 2
    46a6:	01 c0       	rjmp	.+2      	; 0x46aa <twi_writeTo+0x1ba>
    46a8:	c3 e0       	ldi	r28, 0x03	; 3
    46aa:	8c 2f       	mov	r24, r28
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	ff 90       	pop	r15
    46b6:	ef 90       	pop	r14
    46b8:	df 90       	pop	r13
    46ba:	cf 90       	pop	r12
    46bc:	bf 90       	pop	r11
    46be:	af 90       	pop	r10
    46c0:	9f 90       	pop	r9
    46c2:	8f 90       	pop	r8
    46c4:	7f 90       	pop	r7
    46c6:	6f 90       	pop	r6
    46c8:	5f 90       	pop	r5
    46ca:	4f 90       	pop	r4
    46cc:	08 95       	ret

000046ce <twi_stop>:
    46ce:	85 ed       	ldi	r24, 0xD5	; 213
    46d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46d4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    46d8:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    46dc:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    46e0:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    46e4:	07 96       	adiw	r24, 0x07	; 7
    46e6:	a1 1d       	adc	r26, r1
    46e8:	b1 1d       	adc	r27, r1
    46ea:	23 e0       	ldi	r18, 0x03	; 3
    46ec:	b6 95       	lsr	r27
    46ee:	a7 95       	ror	r26
    46f0:	97 95       	ror	r25
    46f2:	87 95       	ror	r24
    46f4:	2a 95       	dec	r18
    46f6:	d1 f7       	brne	.-12     	; 0x46ec <twi_stop+0x1e>
    46f8:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46fc:	24 ff       	sbrs	r18, 4
    46fe:	1b c0       	rjmp	.+54     	; 0x4736 <twi_stop+0x68>
    4700:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <twi_timeout_us>
    4704:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4708:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    470c:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4710:	45 2b       	or	r20, r21
    4712:	46 2b       	or	r20, r22
    4714:	47 2b       	or	r20, r23
    4716:	81 f3       	breq	.-32     	; 0x46f8 <twi_stop+0x2a>
    4718:	00 97       	sbiw	r24, 0x00	; 0
    471a:	a1 05       	cpc	r26, r1
    471c:	b1 05       	cpc	r27, r1
    471e:	41 f0       	breq	.+16     	; 0x4730 <twi_stop+0x62>
    4720:	25 e3       	ldi	r18, 0x35	; 53
    4722:	2a 95       	dec	r18
    4724:	f1 f7       	brne	.-4      	; 0x4722 <twi_stop+0x54>
    4726:	00 00       	nop
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	a1 09       	sbc	r26, r1
    472c:	b1 09       	sbc	r27, r1
    472e:	e4 cf       	rjmp	.-56     	; 0x46f8 <twi_stop+0x2a>
    4730:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    4734:	e2 cd       	rjmp	.-1084   	; 0x42fa <twi_handleTimeout>
    4736:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
    473a:	08 95       	ret

0000473c <__vector_39>:

ISR(TWI_vect)
{
    473c:	1f 92       	push	r1
    473e:	0f 92       	push	r0
    4740:	0f b6       	in	r0, 0x3f	; 63
    4742:	0f 92       	push	r0
    4744:	11 24       	eor	r1, r1
    4746:	0b b6       	in	r0, 0x3b	; 59
    4748:	0f 92       	push	r0
    474a:	2f 93       	push	r18
    474c:	3f 93       	push	r19
    474e:	4f 93       	push	r20
    4750:	5f 93       	push	r21
    4752:	6f 93       	push	r22
    4754:	7f 93       	push	r23
    4756:	8f 93       	push	r24
    4758:	9f 93       	push	r25
    475a:	af 93       	push	r26
    475c:	bf 93       	push	r27
    475e:	ef 93       	push	r30
    4760:	ff 93       	push	r31
  switch(TW_STATUS){
    4762:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4766:	88 7f       	andi	r24, 0xF8	; 248
    4768:	80 36       	cpi	r24, 0x60	; 96
    476a:	09 f4       	brne	.+2      	; 0x476e <__vector_39+0x32>
    476c:	9d c0       	rjmp	.+314    	; 0x48a8 <__vector_39+0x16c>
    476e:	70 f5       	brcc	.+92     	; 0x47cc <__vector_39+0x90>
    4770:	88 32       	cpi	r24, 0x28	; 40
    4772:	09 f4       	brne	.+2      	; 0x4776 <__vector_39+0x3a>
    4774:	5c c0       	rjmp	.+184    	; 0x482e <__vector_39+0xf2>
    4776:	90 f4       	brcc	.+36     	; 0x479c <__vector_39+0x60>
    4778:	80 31       	cpi	r24, 0x10	; 16
    477a:	09 f4       	brne	.+2      	; 0x477e <__vector_39+0x42>
    477c:	55 c0       	rjmp	.+170    	; 0x4828 <__vector_39+0xec>
    477e:	38 f4       	brcc	.+14     	; 0x478e <__vector_39+0x52>
    4780:	88 23       	and	r24, r24
    4782:	09 f4       	brne	.+2      	; 0x4786 <__vector_39+0x4a>
    4784:	f3 c0       	rjmp	.+486    	; 0x496c <__vector_39+0x230>
    4786:	88 30       	cpi	r24, 0x08	; 8
    4788:	09 f4       	brne	.+2      	; 0x478c <__vector_39+0x50>
    478a:	4e c0       	rjmp	.+156    	; 0x4828 <__vector_39+0xec>
    478c:	f2 c0       	rjmp	.+484    	; 0x4972 <__vector_39+0x236>
    478e:	88 31       	cpi	r24, 0x18	; 24
    4790:	09 f4       	brne	.+2      	; 0x4794 <__vector_39+0x58>
    4792:	4d c0       	rjmp	.+154    	; 0x482e <__vector_39+0xf2>
    4794:	80 32       	cpi	r24, 0x20	; 32
    4796:	09 f4       	brne	.+2      	; 0x479a <__vector_39+0x5e>
    4798:	5e c0       	rjmp	.+188    	; 0x4856 <__vector_39+0x11a>
    479a:	eb c0       	rjmp	.+470    	; 0x4972 <__vector_39+0x236>
    479c:	80 34       	cpi	r24, 0x40	; 64
    479e:	09 f4       	brne	.+2      	; 0x47a2 <__vector_39+0x66>
    47a0:	69 c0       	rjmp	.+210    	; 0x4874 <__vector_39+0x138>
    47a2:	50 f4       	brcc	.+20     	; 0x47b8 <__vector_39+0x7c>
    47a4:	80 33       	cpi	r24, 0x30	; 48
    47a6:	09 f4       	brne	.+2      	; 0x47aa <__vector_39+0x6e>
    47a8:	56 c0       	rjmp	.+172    	; 0x4856 <__vector_39+0x11a>
    47aa:	88 33       	cpi	r24, 0x38	; 56
    47ac:	09 f0       	breq	.+2      	; 0x47b0 <__vector_39+0x74>
    47ae:	e1 c0       	rjmp	.+450    	; 0x4972 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    47b0:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_error>
      twi_releaseBus();
    47b4:	9c dd       	rcall	.-1224   	; 0x42ee <twi_releaseBus>
      break;
    47b6:	dd c0       	rjmp	.+442    	; 0x4972 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    47b8:	80 35       	cpi	r24, 0x50	; 80
    47ba:	09 f4       	brne	.+2      	; 0x47be <__vector_39+0x82>
    47bc:	4f c0       	rjmp	.+158    	; 0x485c <__vector_39+0x120>
    47be:	88 35       	cpi	r24, 0x58	; 88
    47c0:	09 f4       	brne	.+2      	; 0x47c4 <__vector_39+0x88>
    47c2:	5d c0       	rjmp	.+186    	; 0x487e <__vector_39+0x142>
    47c4:	88 34       	cpi	r24, 0x48	; 72
    47c6:	09 f0       	breq	.+2      	; 0x47ca <__vector_39+0x8e>
    47c8:	d4 c0       	rjmp	.+424    	; 0x4972 <__vector_39+0x236>
    47ca:	d2 c0       	rjmp	.+420    	; 0x4970 <__vector_39+0x234>
    47cc:	88 39       	cpi	r24, 0x98	; 152
    47ce:	09 f4       	brne	.+2      	; 0x47d2 <__vector_39+0x96>
    47d0:	c3 c0       	rjmp	.+390    	; 0x4958 <__vector_39+0x21c>
    47d2:	a8 f4       	brcc	.+42     	; 0x47fe <__vector_39+0xc2>
    47d4:	88 37       	cpi	r24, 0x78	; 120
    47d6:	09 f4       	brne	.+2      	; 0x47da <__vector_39+0x9e>
    47d8:	67 c0       	rjmp	.+206    	; 0x48a8 <__vector_39+0x16c>
    47da:	38 f4       	brcc	.+14     	; 0x47ea <__vector_39+0xae>
    47dc:	88 36       	cpi	r24, 0x68	; 104
    47de:	09 f4       	brne	.+2      	; 0x47e2 <__vector_39+0xa6>
    47e0:	63 c0       	rjmp	.+198    	; 0x48a8 <__vector_39+0x16c>
    47e2:	80 37       	cpi	r24, 0x70	; 112
    47e4:	09 f4       	brne	.+2      	; 0x47e8 <__vector_39+0xac>
    47e6:	60 c0       	rjmp	.+192    	; 0x48a8 <__vector_39+0x16c>
    47e8:	c4 c0       	rjmp	.+392    	; 0x4972 <__vector_39+0x236>
    47ea:	88 38       	cpi	r24, 0x88	; 136
    47ec:	09 f4       	brne	.+2      	; 0x47f0 <__vector_39+0xb4>
    47ee:	b4 c0       	rjmp	.+360    	; 0x4958 <__vector_39+0x21c>
    47f0:	80 39       	cpi	r24, 0x90	; 144
    47f2:	09 f4       	brne	.+2      	; 0x47f6 <__vector_39+0xba>
    47f4:	5f c0       	rjmp	.+190    	; 0x48b4 <__vector_39+0x178>
    47f6:	80 38       	cpi	r24, 0x80	; 128
    47f8:	09 f0       	breq	.+2      	; 0x47fc <__vector_39+0xc0>
    47fa:	bb c0       	rjmp	.+374    	; 0x4972 <__vector_39+0x236>
    47fc:	5b c0       	rjmp	.+182    	; 0x48b4 <__vector_39+0x178>
    47fe:	80 3b       	cpi	r24, 0xB0	; 176
    4800:	09 f4       	brne	.+2      	; 0x4804 <__vector_39+0xc8>
    4802:	82 c0       	rjmp	.+260    	; 0x4908 <__vector_39+0x1cc>
    4804:	38 f4       	brcc	.+14     	; 0x4814 <__vector_39+0xd8>
    4806:	80 3a       	cpi	r24, 0xA0	; 160
    4808:	09 f4       	brne	.+2      	; 0x480c <__vector_39+0xd0>
    480a:	66 c0       	rjmp	.+204    	; 0x48d8 <__vector_39+0x19c>
    480c:	88 3a       	cpi	r24, 0xA8	; 168
    480e:	09 f4       	brne	.+2      	; 0x4812 <__vector_39+0xd6>
    4810:	7b c0       	rjmp	.+246    	; 0x4908 <__vector_39+0x1cc>
    4812:	af c0       	rjmp	.+350    	; 0x4972 <__vector_39+0x236>
    4814:	80 3c       	cpi	r24, 0xC0	; 192
    4816:	09 f4       	brne	.+2      	; 0x481a <__vector_39+0xde>
    4818:	a3 c0       	rjmp	.+326    	; 0x4960 <__vector_39+0x224>
    481a:	88 3c       	cpi	r24, 0xC8	; 200
    481c:	09 f4       	brne	.+2      	; 0x4820 <__vector_39+0xe4>
    481e:	a0 c0       	rjmp	.+320    	; 0x4960 <__vector_39+0x224>
    4820:	88 3b       	cpi	r24, 0xB8	; 184
    4822:	09 f4       	brne	.+2      	; 0x4826 <__vector_39+0xea>
    4824:	86 c0       	rjmp	.+268    	; 0x4932 <__vector_39+0x1f6>
    4826:	a5 c0       	rjmp	.+330    	; 0x4972 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4828:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_slarw>
    482c:	10 c0       	rjmp	.+32     	; 0x484e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    482e:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4832:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_masterBufferLength>
    4836:	98 17       	cp	r25, r24
    4838:	70 f5       	brcc	.+92     	; 0x4896 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    483a:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <twi_masterBufferIndex>
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	8e 0f       	add	r24, r30
    4842:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_masterBufferIndex>
    4846:	f0 e0       	ldi	r31, 0x00	; 0
    4848:	e6 5e       	subi	r30, 0xE6	; 230
    484a:	fb 4f       	sbci	r31, 0xFB	; 251
    484c:	80 81       	ld	r24, Z
    484e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4852:	85 ec       	ldi	r24, 0xC5	; 197
    4854:	82 c0       	rjmp	.+260    	; 0x495a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4856:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_error>
    485a:	8a c0       	rjmp	.+276    	; 0x4970 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    485c:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	8e 0f       	add	r24, r30
    4864:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_masterBufferIndex>
    4868:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	e6 5e       	subi	r30, 0xE6	; 230
    4870:	fb 4f       	sbci	r31, 0xFB	; 251
    4872:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4874:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4878:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_masterBufferLength>
    487c:	6a c0       	rjmp	.+212    	; 0x4952 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    487e:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	8e 0f       	add	r24, r30
    4886:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_masterBufferIndex>
    488a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	e6 5e       	subi	r30, 0xE6	; 230
    4892:	fb 4f       	sbci	r31, 0xFB	; 251
    4894:	80 83       	st	Z, r24
      if (twi_sendStop){
    4896:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_sendStop>
    489a:	81 11       	cpse	r24, r1
    489c:	69 c0       	rjmp	.+210    	; 0x4970 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    48a4:	84 ea       	ldi	r24, 0xA4	; 164
    48a6:	5d c0       	rjmp	.+186    	; 0x4962 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    48a8:	83 e0       	ldi	r24, 0x03	; 3
    48aa:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    48ae:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_rxBufferIndex>
    48b2:	cf cf       	rjmp	.-98     	; 0x4852 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    48b4:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    48b8:	80 32       	cpi	r24, 0x20	; 32
    48ba:	08 f0       	brcs	.+2      	; 0x48be <__vector_39+0x182>
    48bc:	4d c0       	rjmp	.+154    	; 0x4958 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    48be:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	8e 0f       	add	r24, r30
    48c6:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_rxBufferIndex>
    48ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	ea 52       	subi	r30, 0x2A	; 42
    48d2:	fc 4f       	sbci	r31, 0xFC	; 252
    48d4:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    48d6:	bd cf       	rjmp	.-134    	; 0x4852 <__vector_39+0x116>
    48d8:	0a dd       	rcall	.-1516   	; 0x42ee <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    48da:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    48de:	80 32       	cpi	r24, 0x20	; 32
    48e0:	30 f4       	brcc	.+12     	; 0x48ee <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    48e2:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    48e6:	f0 e0       	ldi	r31, 0x00	; 0
    48e8:	ea 52       	subi	r30, 0x2A	; 42
    48ea:	fc 4f       	sbci	r31, 0xFC	; 252
    48ec:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    48ee:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    48f2:	70 e0       	ldi	r23, 0x00	; 0
    48f4:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <twi_onSlaveReceive>
    48f8:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <twi_onSlaveReceive+0x1>
    48fc:	86 ed       	ldi	r24, 0xD6	; 214
    48fe:	93 e0       	ldi	r25, 0x03	; 3
    4900:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4902:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_rxBufferIndex>
      break;
    4906:	35 c0       	rjmp	.+106    	; 0x4972 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4908:	84 e0       	ldi	r24, 0x04	; 4
    490a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    490e:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4912:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4916:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <twi_onSlaveTransmit>
    491a:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <twi_onSlaveTransmit+0x1>
    491e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4920:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    4924:	81 11       	cpse	r24, r1
    4926:	05 c0       	rjmp	.+10     	; 0x4932 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    492e:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4932:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_txBufferIndex>
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	8e 0f       	add	r24, r30
    493a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_txBufferIndex>
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	e8 50       	subi	r30, 0x08	; 8
    4942:	fc 4f       	sbci	r31, 0xFC	; 252
    4944:	80 81       	ld	r24, Z
    4946:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    494a:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <twi_txBufferIndex>
    494e:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    4952:	98 17       	cp	r25, r24
    4954:	08 f4       	brcc	.+2      	; 0x4958 <__vector_39+0x21c>
    4956:	7d cf       	rjmp	.-262    	; 0x4852 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4958:	85 e8       	ldi	r24, 0x85	; 133
    495a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    495e:	09 c0       	rjmp	.+18     	; 0x4972 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4960:	85 ec       	ldi	r24, 0xC5	; 197
    4962:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4966:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
      break;
    496a:	03 c0       	rjmp	.+6      	; 0x4972 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    496c:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <twi_error>
      twi_stop();
    4970:	ae de       	rcall	.-676    	; 0x46ce <twi_stop>
      break;
  }
}
    4972:	ff 91       	pop	r31
    4974:	ef 91       	pop	r30
    4976:	bf 91       	pop	r27
    4978:	af 91       	pop	r26
    497a:	9f 91       	pop	r25
    497c:	8f 91       	pop	r24
    497e:	7f 91       	pop	r23
    4980:	6f 91       	pop	r22
    4982:	5f 91       	pop	r21
    4984:	4f 91       	pop	r20
    4986:	3f 91       	pop	r19
    4988:	2f 91       	pop	r18
    498a:	0f 90       	pop	r0
    498c:	0b be       	out	0x3b, r0	; 59
    498e:	0f 90       	pop	r0
    4990:	0f be       	out	0x3f, r0	; 63
    4992:	0f 90       	pop	r0
    4994:	1f 90       	pop	r1
    4996:	18 95       	reti

00004998 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    4998:	cf 93       	push	r28
    499a:	df 93       	push	r29
    499c:	00 d0       	rcall	.+0      	; 0x499e <_ZN5Print13setWriteErrorEi+0x6>
    499e:	1f 92       	push	r1
    49a0:	cd b7       	in	r28, 0x3d	; 61
    49a2:	de b7       	in	r29, 0x3e	; 62
    49a4:	9a 83       	std	Y+2, r25	; 0x02
    49a6:	89 83       	std	Y+1, r24	; 0x01
    49a8:	7c 83       	std	Y+4, r23	; 0x04
    49aa:	6b 83       	std	Y+3, r22	; 0x03
    49ac:	89 81       	ldd	r24, Y+1	; 0x01
    49ae:	9a 81       	ldd	r25, Y+2	; 0x02
    49b0:	2b 81       	ldd	r18, Y+3	; 0x03
    49b2:	3c 81       	ldd	r19, Y+4	; 0x04
    49b4:	fc 01       	movw	r30, r24
    49b6:	33 83       	std	Z+3, r19	; 0x03
    49b8:	22 83       	std	Z+2, r18	; 0x02
    49ba:	00 00       	nop
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	df 91       	pop	r29
    49c6:	cf 91       	pop	r28
    49c8:	08 95       	ret

000049ca <_ZN5PrintC1Ev>:
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	1f 92       	push	r1
    49d0:	1f 92       	push	r1
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
    49d6:	9a 83       	std	Y+2, r25	; 0x02
    49d8:	89 83       	std	Y+1, r24	; 0x01
    49da:	25 ee       	ldi	r18, 0xE5	; 229
    49dc:	32 e0       	ldi	r19, 0x02	; 2
    49de:	89 81       	ldd	r24, Y+1	; 0x01
    49e0:	9a 81       	ldd	r25, Y+2	; 0x02
    49e2:	fc 01       	movw	r30, r24
    49e4:	31 83       	std	Z+1, r19	; 0x01
    49e6:	20 83       	st	Z, r18
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	9a 81       	ldd	r25, Y+2	; 0x02
    49ec:	fc 01       	movw	r30, r24
    49ee:	13 82       	std	Z+3, r1	; 0x03
    49f0:	12 82       	std	Z+2, r1	; 0x02
    49f2:	00 00       	nop
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	df 91       	pop	r29
    49fa:	cf 91       	pop	r28
    49fc:	08 95       	ret

000049fe <_ZN5Print17availableForWriteEv>:
    49fe:	cf 93       	push	r28
    4a00:	df 93       	push	r29
    4a02:	1f 92       	push	r1
    4a04:	1f 92       	push	r1
    4a06:	cd b7       	in	r28, 0x3d	; 61
    4a08:	de b7       	in	r29, 0x3e	; 62
    4a0a:	9a 83       	std	Y+2, r25	; 0x02
    4a0c:	89 83       	std	Y+1, r24	; 0x01
    4a0e:	80 e0       	ldi	r24, 0x00	; 0
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	0f 90       	pop	r0
    4a14:	0f 90       	pop	r0
    4a16:	df 91       	pop	r29
    4a18:	cf 91       	pop	r28
    4a1a:	08 95       	ret

00004a1c <_ZN5Print5flushEv>:
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	1f 92       	push	r1
    4a22:	1f 92       	push	r1
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	9a 83       	std	Y+2, r25	; 0x02
    4a2a:	89 83       	std	Y+1, r24	; 0x01
    4a2c:	00 00       	nop
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	df 91       	pop	r29
    4a34:	cf 91       	pop	r28
    4a36:	08 95       	ret

00004a38 <_ZN6StreamC1Ev>:
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	1f 92       	push	r1
    4a3e:	1f 92       	push	r1
    4a40:	cd b7       	in	r28, 0x3d	; 61
    4a42:	de b7       	in	r29, 0x3e	; 62
    4a44:	9a 83       	std	Y+2, r25	; 0x02
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	89 81       	ldd	r24, Y+1	; 0x01
    4a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4c:	be df       	rcall	.-132    	; 0x49ca <_ZN5PrintC1Ev>
    4a4e:	22 eb       	ldi	r18, 0xB2	; 178
    4a50:	32 e0       	ldi	r19, 0x02	; 2
    4a52:	89 81       	ldd	r24, Y+1	; 0x01
    4a54:	9a 81       	ldd	r25, Y+2	; 0x02
    4a56:	fc 01       	movw	r30, r24
    4a58:	31 83       	std	Z+1, r19	; 0x01
    4a5a:	20 83       	st	Z, r18
    4a5c:	29 81       	ldd	r18, Y+1	; 0x01
    4a5e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a60:	88 ee       	ldi	r24, 0xE8	; 232
    4a62:	93 e0       	ldi	r25, 0x03	; 3
    4a64:	a0 e0       	ldi	r26, 0x00	; 0
    4a66:	b0 e0       	ldi	r27, 0x00	; 0
    4a68:	f9 01       	movw	r30, r18
    4a6a:	84 83       	std	Z+4, r24	; 0x04
    4a6c:	95 83       	std	Z+5, r25	; 0x05
    4a6e:	a6 83       	std	Z+6, r26	; 0x06
    4a70:	b7 83       	std	Z+7, r27	; 0x07
    4a72:	00 00       	nop
    4a74:	0f 90       	pop	r0
    4a76:	0f 90       	pop	r0
    4a78:	df 91       	pop	r29
    4a7a:	cf 91       	pop	r28
    4a7c:	08 95       	ret

00004a7e <_ZN7TwoWireC1Ev>:
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	1f 92       	push	r1
    4a84:	1f 92       	push	r1
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	9a 83       	std	Y+2, r25	; 0x02
    4a8c:	89 83       	std	Y+1, r24	; 0x01
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	d2 df       	rcall	.-92     	; 0x4a38 <_ZN6StreamC1Ev>
    4a94:	20 ea       	ldi	r18, 0xA0	; 160
    4a96:	32 e0       	ldi	r19, 0x02	; 2
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	31 83       	std	Z+1, r19	; 0x01
    4aa0:	20 83       	st	Z, r18
    4aa2:	00 00       	nop
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	08 95       	ret

00004aae <_ZN7TwoWire5beginEv>:
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	1f 92       	push	r1
    4ab4:	1f 92       	push	r1
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	9a 83       	std	Y+2, r25	; 0x02
    4abc:	89 83       	std	Y+1, r24	; 0x01
    4abe:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4ac2:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4ac6:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4aca:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4ace:	b2 db       	rcall	.-2204   	; 0x4234 <twi_init>
    4ad0:	86 ed       	ldi	r24, 0xD6	; 214
    4ad2:	97 e2       	ldi	r25, 0x27	; 39
    4ad4:	07 dc       	rcall	.-2034   	; 0x42e4 <twi_attachSlaveTxEvent>
    4ad6:	89 e8       	ldi	r24, 0x89	; 137
    4ad8:	97 e2       	ldi	r25, 0x27	; 39
    4ada:	ff db       	rcall	.-2050   	; 0x42da <twi_attachSlaveRxEvent>
    4adc:	00 00       	nop
    4ade:	0f 90       	pop	r0
    4ae0:	0f 90       	pop	r0
    4ae2:	df 91       	pop	r29
    4ae4:	cf 91       	pop	r28
    4ae6:	08 95       	ret

00004ae8 <_ZN7TwoWire11requestFromEhhmhh>:
    4ae8:	cf 92       	push	r12
    4aea:	ef 92       	push	r14
    4aec:	0f 93       	push	r16
    4aee:	1f 93       	push	r17
    4af0:	cf 93       	push	r28
    4af2:	df 93       	push	r29
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
    4af8:	2b 97       	sbiw	r28, 0x0b	; 11
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	f8 94       	cli
    4afe:	de bf       	out	0x3e, r29	; 62
    4b00:	0f be       	out	0x3f, r0	; 63
    4b02:	cd bf       	out	0x3d, r28	; 61
    4b04:	9b 83       	std	Y+3, r25	; 0x03
    4b06:	8a 83       	std	Y+2, r24	; 0x02
    4b08:	6c 83       	std	Y+4, r22	; 0x04
    4b0a:	4d 83       	std	Y+5, r20	; 0x05
    4b0c:	0e 83       	std	Y+6, r16	; 0x06
    4b0e:	1f 83       	std	Y+7, r17	; 0x07
    4b10:	28 87       	std	Y+8, r18	; 0x08
    4b12:	39 87       	std	Y+9, r19	; 0x09
    4b14:	ea 86       	std	Y+10, r14	; 0x0a
    4b16:	cb 86       	std	Y+11, r12	; 0x0b
    4b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b1a:	88 23       	and	r24, r24
    4b1c:	d9 f1       	breq	.+118    	; 0x4b94 <_ZN7TwoWire11requestFromEhhmhh+0xac>
    4b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b20:	9b 81       	ldd	r25, Y+3	; 0x03
    4b22:	6c 81       	ldd	r22, Y+4	; 0x04
    4b24:	98 d0       	rcall	.+304    	; 0x4c56 <_ZN7TwoWire17beginTransmissionEh>
    4b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b28:	84 30       	cpi	r24, 0x04	; 4
    4b2a:	10 f0       	brcs	.+4      	; 0x4b30 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4b2c:	83 e0       	ldi	r24, 0x03	; 3
    4b2e:	8a 87       	std	Y+10, r24	; 0x0a
    4b30:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b32:	9f ef       	ldi	r25, 0xFF	; 255
    4b34:	98 0f       	add	r25, r24
    4b36:	9a 87       	std	Y+10, r25	; 0x0a
    4b38:	91 e0       	ldi	r25, 0x01	; 1
    4b3a:	88 23       	and	r24, r24
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	99 23       	and	r25, r25
    4b42:	21 f1       	breq	.+72     	; 0x4b8c <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    4b44:	8a 81       	ldd	r24, Y+2	; 0x02
    4b46:	9b 81       	ldd	r25, Y+3	; 0x03
    4b48:	fc 01       	movw	r30, r24
    4b4a:	80 81       	ld	r24, Z
    4b4c:	91 81       	ldd	r25, Z+1	; 0x01
    4b4e:	fc 01       	movw	r30, r24
    4b50:	20 81       	ld	r18, Z
    4b52:	31 81       	ldd	r19, Z+1	; 0x01
    4b54:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b56:	88 2f       	mov	r24, r24
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	ac 01       	movw	r20, r24
    4b5c:	44 0f       	add	r20, r20
    4b5e:	55 1f       	adc	r21, r21
    4b60:	44 0f       	add	r20, r20
    4b62:	55 1f       	adc	r21, r21
    4b64:	44 0f       	add	r20, r20
    4b66:	55 1f       	adc	r21, r21
    4b68:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b6c:	a8 85       	ldd	r26, Y+8	; 0x08
    4b6e:	b9 85       	ldd	r27, Y+9	; 0x09
    4b70:	04 c0       	rjmp	.+8      	; 0x4b7a <_ZN7TwoWire11requestFromEhhmhh+0x92>
    4b72:	b6 95       	lsr	r27
    4b74:	a7 95       	ror	r26
    4b76:	97 95       	ror	r25
    4b78:	87 95       	ror	r24
    4b7a:	4a 95       	dec	r20
    4b7c:	d2 f7       	brpl	.-12     	; 0x4b72 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    4b7e:	48 2f       	mov	r20, r24
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	9b 81       	ldd	r25, Y+3	; 0x03
    4b84:	64 2f       	mov	r22, r20
    4b86:	f9 01       	movw	r30, r18
    4b88:	19 95       	eicall
    4b8a:	d2 cf       	rjmp	.-92     	; 0x4b30 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b90:	60 e0       	ldi	r22, 0x00	; 0
    4b92:	91 d0       	rcall	.+290    	; 0x4cb6 <_ZN7TwoWire15endTransmissionEh>
    4b94:	8d 81       	ldd	r24, Y+5	; 0x05
    4b96:	81 32       	cpi	r24, 0x21	; 33
    4b98:	10 f0       	brcs	.+4      	; 0x4b9e <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    4b9a:	80 e2       	ldi	r24, 0x20	; 32
    4b9c:	8d 83       	std	Y+5, r24	; 0x05
    4b9e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ba0:	4d 81       	ldd	r20, Y+5	; 0x05
    4ba2:	68 e4       	ldi	r22, 0x48	; 72
    4ba4:	74 e0       	ldi	r23, 0x04	; 4
    4ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba8:	bc db       	rcall	.-2184   	; 0x4322 <twi_readFrom>
    4baa:	89 83       	std	Y+1, r24	; 0x01
    4bac:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4bb0:	89 81       	ldd	r24, Y+1	; 0x01
    4bb2:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4bb6:	89 81       	ldd	r24, Y+1	; 0x01
    4bb8:	2b 96       	adiw	r28, 0x0b	; 11
    4bba:	0f b6       	in	r0, 0x3f	; 63
    4bbc:	f8 94       	cli
    4bbe:	de bf       	out	0x3e, r29	; 62
    4bc0:	0f be       	out	0x3f, r0	; 63
    4bc2:	cd bf       	out	0x3d, r28	; 61
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	ef 90       	pop	r14
    4bce:	cf 90       	pop	r12
    4bd0:	08 95       	ret

00004bd2 <_ZN7TwoWire11requestFromEhhh>:
    4bd2:	cf 92       	push	r12
    4bd4:	ef 92       	push	r14
    4bd6:	0f 93       	push	r16
    4bd8:	1f 93       	push	r17
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	00 d0       	rcall	.+0      	; 0x4be0 <_ZN7TwoWire11requestFromEhhh+0xe>
    4be0:	1f 92       	push	r1
    4be2:	1f 92       	push	r1
    4be4:	cd b7       	in	r28, 0x3d	; 61
    4be6:	de b7       	in	r29, 0x3e	; 62
    4be8:	9a 83       	std	Y+2, r25	; 0x02
    4bea:	89 83       	std	Y+1, r24	; 0x01
    4bec:	6b 83       	std	Y+3, r22	; 0x03
    4bee:	4c 83       	std	Y+4, r20	; 0x04
    4bf0:	2d 83       	std	Y+5, r18	; 0x05
    4bf2:	89 81       	ldd	r24, Y+1	; 0x01
    4bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf6:	cd 80       	ldd	r12, Y+5	; 0x05
    4bf8:	e1 2c       	mov	r14, r1
    4bfa:	00 e0       	ldi	r16, 0x00	; 0
    4bfc:	10 e0       	ldi	r17, 0x00	; 0
    4bfe:	98 01       	movw	r18, r16
    4c00:	4c 81       	ldd	r20, Y+4	; 0x04
    4c02:	6b 81       	ldd	r22, Y+3	; 0x03
    4c04:	71 df       	rcall	.-286    	; 0x4ae8 <_ZN7TwoWire11requestFromEhhmhh>
    4c06:	0f 90       	pop	r0
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	df 91       	pop	r29
    4c12:	cf 91       	pop	r28
    4c14:	1f 91       	pop	r17
    4c16:	0f 91       	pop	r16
    4c18:	ef 90       	pop	r14
    4c1a:	cf 90       	pop	r12
    4c1c:	08 95       	ret

00004c1e <_ZN7TwoWire11requestFromEii>:
    4c1e:	cf 93       	push	r28
    4c20:	df 93       	push	r29
    4c22:	00 d0       	rcall	.+0      	; 0x4c24 <_ZN7TwoWire11requestFromEii+0x6>
    4c24:	00 d0       	rcall	.+0      	; 0x4c26 <_ZN7TwoWire11requestFromEii+0x8>
    4c26:	cd b7       	in	r28, 0x3d	; 61
    4c28:	de b7       	in	r29, 0x3e	; 62
    4c2a:	9a 83       	std	Y+2, r25	; 0x02
    4c2c:	89 83       	std	Y+1, r24	; 0x01
    4c2e:	7c 83       	std	Y+4, r23	; 0x04
    4c30:	6b 83       	std	Y+3, r22	; 0x03
    4c32:	5e 83       	std	Y+6, r21	; 0x06
    4c34:	4d 83       	std	Y+5, r20	; 0x05
    4c36:	4d 81       	ldd	r20, Y+5	; 0x05
    4c38:	3b 81       	ldd	r19, Y+3	; 0x03
    4c3a:	89 81       	ldd	r24, Y+1	; 0x01
    4c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3e:	21 e0       	ldi	r18, 0x01	; 1
    4c40:	63 2f       	mov	r22, r19
    4c42:	c7 df       	rcall	.-114    	; 0x4bd2 <_ZN7TwoWire11requestFromEhhh>
    4c44:	26 96       	adiw	r28, 0x06	; 6
    4c46:	0f b6       	in	r0, 0x3f	; 63
    4c48:	f8 94       	cli
    4c4a:	de bf       	out	0x3e, r29	; 62
    4c4c:	0f be       	out	0x3f, r0	; 63
    4c4e:	cd bf       	out	0x3d, r28	; 61
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
    4c54:	08 95       	ret

00004c56 <_ZN7TwoWire17beginTransmissionEh>:
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	00 d0       	rcall	.+0      	; 0x4c5c <_ZN7TwoWire17beginTransmissionEh+0x6>
    4c5c:	cd b7       	in	r28, 0x3d	; 61
    4c5e:	de b7       	in	r29, 0x3e	; 62
    4c60:	9a 83       	std	Y+2, r25	; 0x02
    4c62:	89 83       	std	Y+1, r24	; 0x01
    4c64:	6b 83       	std	Y+3, r22	; 0x03
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZN7TwoWire12transmittingE>
    4c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6e:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZN7TwoWire9txAddressE>
    4c72:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4c76:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4c7a:	00 00       	nop
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	df 91       	pop	r29
    4c84:	cf 91       	pop	r28
    4c86:	08 95       	ret

00004c88 <_ZN7TwoWire17beginTransmissionEi>:
    4c88:	cf 93       	push	r28
    4c8a:	df 93       	push	r29
    4c8c:	00 d0       	rcall	.+0      	; 0x4c8e <_ZN7TwoWire17beginTransmissionEi+0x6>
    4c8e:	1f 92       	push	r1
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	9a 83       	std	Y+2, r25	; 0x02
    4c96:	89 83       	std	Y+1, r24	; 0x01
    4c98:	7c 83       	std	Y+4, r23	; 0x04
    4c9a:	6b 83       	std	Y+3, r22	; 0x03
    4c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca2:	62 2f       	mov	r22, r18
    4ca4:	d8 df       	rcall	.-80     	; 0x4c56 <_ZN7TwoWire17beginTransmissionEh>
    4ca6:	00 00       	nop
    4ca8:	0f 90       	pop	r0
    4caa:	0f 90       	pop	r0
    4cac:	0f 90       	pop	r0
    4cae:	0f 90       	pop	r0
    4cb0:	df 91       	pop	r29
    4cb2:	cf 91       	pop	r28
    4cb4:	08 95       	ret

00004cb6 <_ZN7TwoWire15endTransmissionEh>:
    4cb6:	0f 93       	push	r16
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	00 d0       	rcall	.+0      	; 0x4cbe <_ZN7TwoWire15endTransmissionEh+0x8>
    4cbe:	1f 92       	push	r1
    4cc0:	cd b7       	in	r28, 0x3d	; 61
    4cc2:	de b7       	in	r29, 0x3e	; 62
    4cc4:	9b 83       	std	Y+3, r25	; 0x03
    4cc6:	8a 83       	std	Y+2, r24	; 0x02
    4cc8:	6c 83       	std	Y+4, r22	; 0x04
    4cca:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4cce:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN7TwoWire9txAddressE>
    4cd2:	0c 81       	ldd	r16, Y+4	; 0x04
    4cd4:	21 e0       	ldi	r18, 0x01	; 1
    4cd6:	49 2f       	mov	r20, r25
    4cd8:	6b e6       	ldi	r22, 0x6B	; 107
    4cda:	74 e0       	ldi	r23, 0x04	; 4
    4cdc:	09 dc       	rcall	.-2030   	; 0x44f0 <twi_writeTo>
    4cde:	89 83       	std	Y+1, r24	; 0x01
    4ce0:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4ce4:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4ce8:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZN7TwoWire12transmittingE>
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	0f 90       	pop	r0
    4cf4:	0f 90       	pop	r0
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	0f 91       	pop	r16
    4cfc:	08 95       	ret

00004cfe <_ZN7TwoWire15endTransmissionEv>:
    4cfe:	cf 93       	push	r28
    4d00:	df 93       	push	r29
    4d02:	1f 92       	push	r1
    4d04:	1f 92       	push	r1
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	9a 83       	std	Y+2, r25	; 0x02
    4d0c:	89 83       	std	Y+1, r24	; 0x01
    4d0e:	89 81       	ldd	r24, Y+1	; 0x01
    4d10:	9a 81       	ldd	r25, Y+2	; 0x02
    4d12:	61 e0       	ldi	r22, 0x01	; 1
    4d14:	d0 df       	rcall	.-96     	; 0x4cb6 <_ZN7TwoWire15endTransmissionEh>
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	08 95       	ret

00004d20 <_ZN7TwoWire5writeEh>:
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	00 d0       	rcall	.+0      	; 0x4d26 <_ZN7TwoWire5writeEh+0x6>
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
    4d2a:	9a 83       	std	Y+2, r25	; 0x02
    4d2c:	89 83       	std	Y+1, r24	; 0x01
    4d2e:	6b 83       	std	Y+3, r22	; 0x03
    4d30:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZN7TwoWire12transmittingE>
    4d34:	88 23       	and	r24, r24
    4d36:	f9 f0       	breq	.+62     	; 0x4d76 <_ZN7TwoWire5writeEh+0x56>
    4d38:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4d3c:	80 32       	cpi	r24, 0x20	; 32
    4d3e:	40 f0       	brcs	.+16     	; 0x4d50 <_ZN7TwoWire5writeEh+0x30>
    4d40:	89 81       	ldd	r24, Y+1	; 0x01
    4d42:	9a 81       	ldd	r25, Y+2	; 0x02
    4d44:	61 e0       	ldi	r22, 0x01	; 1
    4d46:	70 e0       	ldi	r23, 0x00	; 0
    4d48:	27 de       	rcall	.-946    	; 0x4998 <_ZN5Print13setWriteErrorEi>
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	19 c0       	rjmp	.+50     	; 0x4d82 <_ZN7TwoWire5writeEh+0x62>
    4d50:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4d54:	88 2f       	mov	r24, r24
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	2b 81       	ldd	r18, Y+3	; 0x03
    4d5a:	85 59       	subi	r24, 0x95	; 149
    4d5c:	9b 4f       	sbci	r25, 0xFB	; 251
    4d5e:	fc 01       	movw	r30, r24
    4d60:	20 83       	st	Z, r18
    4d62:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4d66:	8f 5f       	subi	r24, 0xFF	; 255
    4d68:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4d6c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4d70:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4d74:	04 c0       	rjmp	.+8      	; 0x4d7e <_ZN7TwoWire5writeEh+0x5e>
    4d76:	ce 01       	movw	r24, r28
    4d78:	03 96       	adiw	r24, 0x03	; 3
    4d7a:	61 e0       	ldi	r22, 0x01	; 1
    4d7c:	86 da       	rcall	.-2804   	; 0x428a <twi_transmit>
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	08 95       	ret

00004d8e <_ZN7TwoWire5writeEPKhj>:
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	cd b7       	in	r28, 0x3d	; 61
    4d94:	de b7       	in	r29, 0x3e	; 62
    4d96:	28 97       	sbiw	r28, 0x08	; 8
    4d98:	0f b6       	in	r0, 0x3f	; 63
    4d9a:	f8 94       	cli
    4d9c:	de bf       	out	0x3e, r29	; 62
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	cd bf       	out	0x3d, r28	; 61
    4da2:	9c 83       	std	Y+4, r25	; 0x04
    4da4:	8b 83       	std	Y+3, r24	; 0x03
    4da6:	7e 83       	std	Y+6, r23	; 0x06
    4da8:	6d 83       	std	Y+5, r22	; 0x05
    4daa:	58 87       	std	Y+8, r21	; 0x08
    4dac:	4f 83       	std	Y+7, r20	; 0x07
    4dae:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZN7TwoWire12transmittingE>
    4db2:	88 23       	and	r24, r24
    4db4:	21 f1       	breq	.+72     	; 0x4dfe <_ZN7TwoWire5writeEPKhj+0x70>
    4db6:	1a 82       	std	Y+2, r1	; 0x02
    4db8:	19 82       	std	Y+1, r1	; 0x01
    4dba:	29 81       	ldd	r18, Y+1	; 0x01
    4dbc:	3a 81       	ldd	r19, Y+2	; 0x02
    4dbe:	8f 81       	ldd	r24, Y+7	; 0x07
    4dc0:	98 85       	ldd	r25, Y+8	; 0x08
    4dc2:	28 17       	cp	r18, r24
    4dc4:	39 07       	cpc	r19, r25
    4dc6:	00 f5       	brcc	.+64     	; 0x4e08 <_ZN7TwoWire5writeEPKhj+0x7a>
    4dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dca:	9c 81       	ldd	r25, Y+4	; 0x04
    4dcc:	fc 01       	movw	r30, r24
    4dce:	80 81       	ld	r24, Z
    4dd0:	91 81       	ldd	r25, Z+1	; 0x01
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	20 81       	ld	r18, Z
    4dd6:	31 81       	ldd	r19, Z+1	; 0x01
    4dd8:	4d 81       	ldd	r20, Y+5	; 0x05
    4dda:	5e 81       	ldd	r21, Y+6	; 0x06
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
    4dde:	9a 81       	ldd	r25, Y+2	; 0x02
    4de0:	84 0f       	add	r24, r20
    4de2:	95 1f       	adc	r25, r21
    4de4:	fc 01       	movw	r30, r24
    4de6:	40 81       	ld	r20, Z
    4de8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dea:	9c 81       	ldd	r25, Y+4	; 0x04
    4dec:	64 2f       	mov	r22, r20
    4dee:	f9 01       	movw	r30, r18
    4df0:	19 95       	eicall
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	9a 81       	ldd	r25, Y+2	; 0x02
    4df6:	01 96       	adiw	r24, 0x01	; 1
    4df8:	9a 83       	std	Y+2, r25	; 0x02
    4dfa:	89 83       	std	Y+1, r24	; 0x01
    4dfc:	de cf       	rjmp	.-68     	; 0x4dba <_ZN7TwoWire5writeEPKhj+0x2c>
    4dfe:	2f 81       	ldd	r18, Y+7	; 0x07
    4e00:	8d 81       	ldd	r24, Y+5	; 0x05
    4e02:	9e 81       	ldd	r25, Y+6	; 0x06
    4e04:	62 2f       	mov	r22, r18
    4e06:	41 da       	rcall	.-2942   	; 0x428a <twi_transmit>
    4e08:	8f 81       	ldd	r24, Y+7	; 0x07
    4e0a:	98 85       	ldd	r25, Y+8	; 0x08
    4e0c:	28 96       	adiw	r28, 0x08	; 8
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	f8 94       	cli
    4e12:	de bf       	out	0x3e, r29	; 62
    4e14:	0f be       	out	0x3f, r0	; 63
    4e16:	cd bf       	out	0x3d, r28	; 61
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	08 95       	ret

00004e1e <_ZN7TwoWire9availableEv>:
    4e1e:	cf 93       	push	r28
    4e20:	df 93       	push	r29
    4e22:	1f 92       	push	r1
    4e24:	1f 92       	push	r1
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	9a 83       	std	Y+2, r25	; 0x02
    4e2c:	89 83       	std	Y+1, r24	; 0x01
    4e2e:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4e32:	28 2f       	mov	r18, r24
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4e3a:	88 2f       	mov	r24, r24
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	a9 01       	movw	r20, r18
    4e40:	48 1b       	sub	r20, r24
    4e42:	59 0b       	sbc	r21, r25
    4e44:	ca 01       	movw	r24, r20
    4e46:	0f 90       	pop	r0
    4e48:	0f 90       	pop	r0
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	08 95       	ret

00004e50 <_ZN7TwoWire4readEv>:
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	00 d0       	rcall	.+0      	; 0x4e56 <_ZN7TwoWire4readEv+0x6>
    4e56:	1f 92       	push	r1
    4e58:	cd b7       	in	r28, 0x3d	; 61
    4e5a:	de b7       	in	r29, 0x3e	; 62
    4e5c:	9c 83       	std	Y+4, r25	; 0x04
    4e5e:	8b 83       	std	Y+3, r24	; 0x03
    4e60:	8f ef       	ldi	r24, 0xFF	; 255
    4e62:	9f ef       	ldi	r25, 0xFF	; 255
    4e64:	9a 83       	std	Y+2, r25	; 0x02
    4e66:	89 83       	std	Y+1, r24	; 0x01
    4e68:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4e6c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4e70:	98 17       	cp	r25, r24
    4e72:	88 f4       	brcc	.+34     	; 0x4e96 <_ZN7TwoWire4readEv+0x46>
    4e74:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4e78:	88 2f       	mov	r24, r24
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	88 5b       	subi	r24, 0xB8	; 184
    4e7e:	9b 4f       	sbci	r25, 0xFB	; 251
    4e80:	fc 01       	movw	r30, r24
    4e82:	80 81       	ld	r24, Z
    4e84:	88 2f       	mov	r24, r24
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	9a 83       	std	Y+2, r25	; 0x02
    4e8a:	89 83       	std	Y+1, r24	; 0x01
    4e8c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4e90:	8f 5f       	subi	r24, 0xFF	; 255
    4e92:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9a:	0f 90       	pop	r0
    4e9c:	0f 90       	pop	r0
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	08 95       	ret

00004ea8 <_ZN7TwoWire4peekEv>:
    4ea8:	cf 93       	push	r28
    4eaa:	df 93       	push	r29
    4eac:	00 d0       	rcall	.+0      	; 0x4eae <_ZN7TwoWire4peekEv+0x6>
    4eae:	1f 92       	push	r1
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	9c 83       	std	Y+4, r25	; 0x04
    4eb6:	8b 83       	std	Y+3, r24	; 0x03
    4eb8:	8f ef       	ldi	r24, 0xFF	; 255
    4eba:	9f ef       	ldi	r25, 0xFF	; 255
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4ec4:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4ec8:	98 17       	cp	r25, r24
    4eca:	60 f4       	brcc	.+24     	; 0x4ee4 <_ZN7TwoWire4peekEv+0x3c>
    4ecc:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4ed0:	88 2f       	mov	r24, r24
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	88 5b       	subi	r24, 0xB8	; 184
    4ed6:	9b 4f       	sbci	r25, 0xFB	; 251
    4ed8:	fc 01       	movw	r30, r24
    4eda:	80 81       	ld	r24, Z
    4edc:	88 2f       	mov	r24, r24
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	9a 83       	std	Y+2, r25	; 0x02
    4ee2:	89 83       	std	Y+1, r24	; 0x01
    4ee4:	89 81       	ldd	r24, Y+1	; 0x01
    4ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee8:	0f 90       	pop	r0
    4eea:	0f 90       	pop	r0
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	df 91       	pop	r29
    4ef2:	cf 91       	pop	r28
    4ef4:	08 95       	ret

00004ef6 <_ZN7TwoWire5flushEv>:
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	1f 92       	push	r1
    4efc:	1f 92       	push	r1
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    4f02:	9a 83       	std	Y+2, r25	; 0x02
    4f04:	89 83       	std	Y+1, r24	; 0x01
    4f06:	00 00       	nop
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	df 91       	pop	r29
    4f0e:	cf 91       	pop	r28
    4f10:	08 95       	ret

00004f12 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	00 d0       	rcall	.+0      	; 0x4f18 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    4f18:	1f 92       	push	r1
    4f1a:	1f 92       	push	r1
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
    4f20:	9b 83       	std	Y+3, r25	; 0x03
    4f22:	8a 83       	std	Y+2, r24	; 0x02
    4f24:	7d 83       	std	Y+5, r23	; 0x05
    4f26:	6c 83       	std	Y+4, r22	; 0x04
    4f28:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire14user_onReceiveE>
    4f2c:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZN7TwoWire14user_onReceiveE+0x1>
    4f30:	89 2b       	or	r24, r25
    4f32:	89 f1       	breq	.+98     	; 0x4f96 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    4f34:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4f38:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4f3c:	98 17       	cp	r25, r24
    4f3e:	68 f1       	brcs	.+90     	; 0x4f9a <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    4f40:	19 82       	std	Y+1, r1	; 0x01
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	28 2f       	mov	r18, r24
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	8c 81       	ldd	r24, Y+4	; 0x04
    4f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f4c:	28 17       	cp	r18, r24
    4f4e:	39 07       	cpc	r19, r25
    4f50:	a4 f4       	brge	.+40     	; 0x4f7a <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	88 2f       	mov	r24, r24
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	29 81       	ldd	r18, Y+1	; 0x01
    4f5a:	22 2f       	mov	r18, r18
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	4a 81       	ldd	r20, Y+2	; 0x02
    4f60:	5b 81       	ldd	r21, Y+3	; 0x03
    4f62:	24 0f       	add	r18, r20
    4f64:	35 1f       	adc	r19, r21
    4f66:	f9 01       	movw	r30, r18
    4f68:	20 81       	ld	r18, Z
    4f6a:	88 5b       	subi	r24, 0xB8	; 184
    4f6c:	9b 4f       	sbci	r25, 0xFB	; 251
    4f6e:	fc 01       	movw	r30, r24
    4f70:	20 83       	st	Z, r18
    4f72:	89 81       	ldd	r24, Y+1	; 0x01
    4f74:	8f 5f       	subi	r24, 0xFF	; 255
    4f76:	89 83       	std	Y+1, r24	; 0x01
    4f78:	e4 cf       	rjmp	.-56     	; 0x4f42 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    4f7a:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f80:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4f84:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <_ZN7TwoWire14user_onReceiveE>
    4f88:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <_ZN7TwoWire14user_onReceiveE+0x1>
    4f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    4f90:	f9 01       	movw	r30, r18
    4f92:	19 95       	eicall
    4f94:	03 c0       	rjmp	.+6      	; 0x4f9c <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4f96:	00 00       	nop
    4f98:	01 c0       	rjmp	.+2      	; 0x4f9c <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4f9a:	00 00       	nop
    4f9c:	0f 90       	pop	r0
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	0f 90       	pop	r0
    4fa4:	0f 90       	pop	r0
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	08 95       	ret

00004fac <_ZN7TwoWire16onRequestServiceEv>:
    4fac:	cf 93       	push	r28
    4fae:	df 93       	push	r29
    4fb0:	cd b7       	in	r28, 0x3d	; 61
    4fb2:	de b7       	in	r29, 0x3e	; 62
    4fb4:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZN7TwoWire14user_onRequestE>
    4fb8:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZN7TwoWire14user_onRequestE+0x1>
    4fbc:	89 2b       	or	r24, r25
    4fbe:	59 f0       	breq	.+22     	; 0x4fd6 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    4fc0:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4fc4:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4fc8:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZN7TwoWire14user_onRequestE>
    4fcc:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZN7TwoWire14user_onRequestE+0x1>
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	19 95       	eicall
    4fd4:	01 c0       	rjmp	.+2      	; 0x4fd8 <_ZN7TwoWire16onRequestServiceEv+0x2c>
    4fd6:	00 00       	nop
    4fd8:	df 91       	pop	r29
    4fda:	cf 91       	pop	r28
    4fdc:	08 95       	ret

00004fde <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4fde:	cf 93       	push	r28
    4fe0:	df 93       	push	r29
    4fe2:	00 d0       	rcall	.+0      	; 0x4fe4 <_Z41__static_initialization_and_destruction_0ii+0x6>
    4fe4:	1f 92       	push	r1
    4fe6:	cd b7       	in	r28, 0x3d	; 61
    4fe8:	de b7       	in	r29, 0x3e	; 62
    4fea:	9a 83       	std	Y+2, r25	; 0x02
    4fec:	89 83       	std	Y+1, r24	; 0x01
    4fee:	7c 83       	std	Y+4, r23	; 0x04
    4ff0:	6b 83       	std	Y+3, r22	; 0x03
    4ff2:	89 81       	ldd	r24, Y+1	; 0x01
    4ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff6:	01 97       	sbiw	r24, 0x01	; 1
    4ff8:	39 f4       	brne	.+14     	; 0x5008 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    4ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    4ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	19 f4       	brne	.+6      	; 0x5008 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    5002:	82 e9       	ldi	r24, 0x92	; 146
    5004:	94 e0       	ldi	r25, 0x04	; 4
    5006:	3b dd       	rcall	.-1418   	; 0x4a7e <_ZN7TwoWireC1Ev>
    5008:	00 00       	nop
    500a:	0f 90       	pop	r0
    500c:	0f 90       	pop	r0
    500e:	0f 90       	pop	r0
    5010:	0f 90       	pop	r0
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	08 95       	ret

00005018 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    5018:	cf 93       	push	r28
    501a:	df 93       	push	r29
    501c:	cd b7       	in	r28, 0x3d	; 61
    501e:	de b7       	in	r29, 0x3e	; 62
    5020:	6f ef       	ldi	r22, 0xFF	; 255
    5022:	7f ef       	ldi	r23, 0xFF	; 255
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	da df       	rcall	.-76     	; 0x4fde <_Z41__static_initialization_and_destruction_0ii>
    502a:	df 91       	pop	r29
    502c:	cf 91       	pop	r28
    502e:	08 95       	ret

00005030 <__subsf3>:
    5030:	50 58       	subi	r21, 0x80	; 128

00005032 <__addsf3>:
    5032:	bb 27       	eor	r27, r27
    5034:	aa 27       	eor	r26, r26
    5036:	0e d0       	rcall	.+28     	; 0x5054 <__addsf3x>
    5038:	09 c1       	rjmp	.+530    	; 0x524c <__fp_round>
    503a:	fa d0       	rcall	.+500    	; 0x5230 <__fp_pscA>
    503c:	30 f0       	brcs	.+12     	; 0x504a <__addsf3+0x18>
    503e:	ff d0       	rcall	.+510    	; 0x523e <__fp_pscB>
    5040:	20 f0       	brcs	.+8      	; 0x504a <__addsf3+0x18>
    5042:	31 f4       	brne	.+12     	; 0x5050 <__addsf3+0x1e>
    5044:	9f 3f       	cpi	r25, 0xFF	; 255
    5046:	11 f4       	brne	.+4      	; 0x504c <__addsf3+0x1a>
    5048:	1e f4       	brtc	.+6      	; 0x5050 <__addsf3+0x1e>
    504a:	ef c0       	rjmp	.+478    	; 0x522a <__fp_nan>
    504c:	0e f4       	brtc	.+2      	; 0x5050 <__addsf3+0x1e>
    504e:	e0 95       	com	r30
    5050:	e7 fb       	bst	r30, 7
    5052:	e5 c0       	rjmp	.+458    	; 0x521e <__fp_inf>

00005054 <__addsf3x>:
    5054:	e9 2f       	mov	r30, r25
    5056:	0b d1       	rcall	.+534    	; 0x526e <__fp_split3>
    5058:	80 f3       	brcs	.-32     	; 0x503a <__addsf3+0x8>
    505a:	ba 17       	cp	r27, r26
    505c:	62 07       	cpc	r22, r18
    505e:	73 07       	cpc	r23, r19
    5060:	84 07       	cpc	r24, r20
    5062:	95 07       	cpc	r25, r21
    5064:	18 f0       	brcs	.+6      	; 0x506c <__addsf3x+0x18>
    5066:	71 f4       	brne	.+28     	; 0x5084 <__addsf3x+0x30>
    5068:	9e f5       	brtc	.+102    	; 0x50d0 <__addsf3x+0x7c>
    506a:	23 c1       	rjmp	.+582    	; 0x52b2 <__fp_zero>
    506c:	0e f4       	brtc	.+2      	; 0x5070 <__addsf3x+0x1c>
    506e:	e0 95       	com	r30
    5070:	0b 2e       	mov	r0, r27
    5072:	ba 2f       	mov	r27, r26
    5074:	a0 2d       	mov	r26, r0
    5076:	0b 01       	movw	r0, r22
    5078:	b9 01       	movw	r22, r18
    507a:	90 01       	movw	r18, r0
    507c:	0c 01       	movw	r0, r24
    507e:	ca 01       	movw	r24, r20
    5080:	a0 01       	movw	r20, r0
    5082:	11 24       	eor	r1, r1
    5084:	ff 27       	eor	r31, r31
    5086:	59 1b       	sub	r21, r25
    5088:	99 f0       	breq	.+38     	; 0x50b0 <__addsf3x+0x5c>
    508a:	59 3f       	cpi	r21, 0xF9	; 249
    508c:	50 f4       	brcc	.+20     	; 0x50a2 <__addsf3x+0x4e>
    508e:	50 3e       	cpi	r21, 0xE0	; 224
    5090:	68 f1       	brcs	.+90     	; 0x50ec <__addsf3x+0x98>
    5092:	1a 16       	cp	r1, r26
    5094:	f0 40       	sbci	r31, 0x00	; 0
    5096:	a2 2f       	mov	r26, r18
    5098:	23 2f       	mov	r18, r19
    509a:	34 2f       	mov	r19, r20
    509c:	44 27       	eor	r20, r20
    509e:	58 5f       	subi	r21, 0xF8	; 248
    50a0:	f3 cf       	rjmp	.-26     	; 0x5088 <__addsf3x+0x34>
    50a2:	46 95       	lsr	r20
    50a4:	37 95       	ror	r19
    50a6:	27 95       	ror	r18
    50a8:	a7 95       	ror	r26
    50aa:	f0 40       	sbci	r31, 0x00	; 0
    50ac:	53 95       	inc	r21
    50ae:	c9 f7       	brne	.-14     	; 0x50a2 <__addsf3x+0x4e>
    50b0:	7e f4       	brtc	.+30     	; 0x50d0 <__addsf3x+0x7c>
    50b2:	1f 16       	cp	r1, r31
    50b4:	ba 0b       	sbc	r27, r26
    50b6:	62 0b       	sbc	r22, r18
    50b8:	73 0b       	sbc	r23, r19
    50ba:	84 0b       	sbc	r24, r20
    50bc:	ba f0       	brmi	.+46     	; 0x50ec <__addsf3x+0x98>
    50be:	91 50       	subi	r25, 0x01	; 1
    50c0:	a1 f0       	breq	.+40     	; 0x50ea <__addsf3x+0x96>
    50c2:	ff 0f       	add	r31, r31
    50c4:	bb 1f       	adc	r27, r27
    50c6:	66 1f       	adc	r22, r22
    50c8:	77 1f       	adc	r23, r23
    50ca:	88 1f       	adc	r24, r24
    50cc:	c2 f7       	brpl	.-16     	; 0x50be <__addsf3x+0x6a>
    50ce:	0e c0       	rjmp	.+28     	; 0x50ec <__addsf3x+0x98>
    50d0:	ba 0f       	add	r27, r26
    50d2:	62 1f       	adc	r22, r18
    50d4:	73 1f       	adc	r23, r19
    50d6:	84 1f       	adc	r24, r20
    50d8:	48 f4       	brcc	.+18     	; 0x50ec <__addsf3x+0x98>
    50da:	87 95       	ror	r24
    50dc:	77 95       	ror	r23
    50de:	67 95       	ror	r22
    50e0:	b7 95       	ror	r27
    50e2:	f7 95       	ror	r31
    50e4:	9e 3f       	cpi	r25, 0xFE	; 254
    50e6:	08 f0       	brcs	.+2      	; 0x50ea <__addsf3x+0x96>
    50e8:	b3 cf       	rjmp	.-154    	; 0x5050 <__addsf3+0x1e>
    50ea:	93 95       	inc	r25
    50ec:	88 0f       	add	r24, r24
    50ee:	08 f0       	brcs	.+2      	; 0x50f2 <__addsf3x+0x9e>
    50f0:	99 27       	eor	r25, r25
    50f2:	ee 0f       	add	r30, r30
    50f4:	97 95       	ror	r25
    50f6:	87 95       	ror	r24
    50f8:	08 95       	ret

000050fa <__fixsfsi>:
    50fa:	04 d0       	rcall	.+8      	; 0x5104 <__fixunssfsi>
    50fc:	68 94       	set
    50fe:	b1 11       	cpse	r27, r1
    5100:	d9 c0       	rjmp	.+434    	; 0x52b4 <__fp_szero>
    5102:	08 95       	ret

00005104 <__fixunssfsi>:
    5104:	bc d0       	rcall	.+376    	; 0x527e <__fp_splitA>
    5106:	88 f0       	brcs	.+34     	; 0x512a <__fixunssfsi+0x26>
    5108:	9f 57       	subi	r25, 0x7F	; 127
    510a:	90 f0       	brcs	.+36     	; 0x5130 <__fixunssfsi+0x2c>
    510c:	b9 2f       	mov	r27, r25
    510e:	99 27       	eor	r25, r25
    5110:	b7 51       	subi	r27, 0x17	; 23
    5112:	a0 f0       	brcs	.+40     	; 0x513c <__fixunssfsi+0x38>
    5114:	d1 f0       	breq	.+52     	; 0x514a <__fixunssfsi+0x46>
    5116:	66 0f       	add	r22, r22
    5118:	77 1f       	adc	r23, r23
    511a:	88 1f       	adc	r24, r24
    511c:	99 1f       	adc	r25, r25
    511e:	1a f0       	brmi	.+6      	; 0x5126 <__fixunssfsi+0x22>
    5120:	ba 95       	dec	r27
    5122:	c9 f7       	brne	.-14     	; 0x5116 <__fixunssfsi+0x12>
    5124:	12 c0       	rjmp	.+36     	; 0x514a <__fixunssfsi+0x46>
    5126:	b1 30       	cpi	r27, 0x01	; 1
    5128:	81 f0       	breq	.+32     	; 0x514a <__fixunssfsi+0x46>
    512a:	c3 d0       	rcall	.+390    	; 0x52b2 <__fp_zero>
    512c:	b1 e0       	ldi	r27, 0x01	; 1
    512e:	08 95       	ret
    5130:	c0 c0       	rjmp	.+384    	; 0x52b2 <__fp_zero>
    5132:	67 2f       	mov	r22, r23
    5134:	78 2f       	mov	r23, r24
    5136:	88 27       	eor	r24, r24
    5138:	b8 5f       	subi	r27, 0xF8	; 248
    513a:	39 f0       	breq	.+14     	; 0x514a <__fixunssfsi+0x46>
    513c:	b9 3f       	cpi	r27, 0xF9	; 249
    513e:	cc f3       	brlt	.-14     	; 0x5132 <__fixunssfsi+0x2e>
    5140:	86 95       	lsr	r24
    5142:	77 95       	ror	r23
    5144:	67 95       	ror	r22
    5146:	b3 95       	inc	r27
    5148:	d9 f7       	brne	.-10     	; 0x5140 <__fixunssfsi+0x3c>
    514a:	3e f4       	brtc	.+14     	; 0x515a <__fixunssfsi+0x56>
    514c:	90 95       	com	r25
    514e:	80 95       	com	r24
    5150:	70 95       	com	r23
    5152:	61 95       	neg	r22
    5154:	7f 4f       	sbci	r23, 0xFF	; 255
    5156:	8f 4f       	sbci	r24, 0xFF	; 255
    5158:	9f 4f       	sbci	r25, 0xFF	; 255
    515a:	08 95       	ret

0000515c <__floatunsisf>:
    515c:	e8 94       	clt
    515e:	09 c0       	rjmp	.+18     	; 0x5172 <__floatsisf+0x12>

00005160 <__floatsisf>:
    5160:	97 fb       	bst	r25, 7
    5162:	3e f4       	brtc	.+14     	; 0x5172 <__floatsisf+0x12>
    5164:	90 95       	com	r25
    5166:	80 95       	com	r24
    5168:	70 95       	com	r23
    516a:	61 95       	neg	r22
    516c:	7f 4f       	sbci	r23, 0xFF	; 255
    516e:	8f 4f       	sbci	r24, 0xFF	; 255
    5170:	9f 4f       	sbci	r25, 0xFF	; 255
    5172:	99 23       	and	r25, r25
    5174:	a9 f0       	breq	.+42     	; 0x51a0 <__floatsisf+0x40>
    5176:	f9 2f       	mov	r31, r25
    5178:	96 e9       	ldi	r25, 0x96	; 150
    517a:	bb 27       	eor	r27, r27
    517c:	93 95       	inc	r25
    517e:	f6 95       	lsr	r31
    5180:	87 95       	ror	r24
    5182:	77 95       	ror	r23
    5184:	67 95       	ror	r22
    5186:	b7 95       	ror	r27
    5188:	f1 11       	cpse	r31, r1
    518a:	f8 cf       	rjmp	.-16     	; 0x517c <__floatsisf+0x1c>
    518c:	fa f4       	brpl	.+62     	; 0x51cc <__floatsisf+0x6c>
    518e:	bb 0f       	add	r27, r27
    5190:	11 f4       	brne	.+4      	; 0x5196 <__floatsisf+0x36>
    5192:	60 ff       	sbrs	r22, 0
    5194:	1b c0       	rjmp	.+54     	; 0x51cc <__floatsisf+0x6c>
    5196:	6f 5f       	subi	r22, 0xFF	; 255
    5198:	7f 4f       	sbci	r23, 0xFF	; 255
    519a:	8f 4f       	sbci	r24, 0xFF	; 255
    519c:	9f 4f       	sbci	r25, 0xFF	; 255
    519e:	16 c0       	rjmp	.+44     	; 0x51cc <__floatsisf+0x6c>
    51a0:	88 23       	and	r24, r24
    51a2:	11 f0       	breq	.+4      	; 0x51a8 <__floatsisf+0x48>
    51a4:	96 e9       	ldi	r25, 0x96	; 150
    51a6:	11 c0       	rjmp	.+34     	; 0x51ca <__floatsisf+0x6a>
    51a8:	77 23       	and	r23, r23
    51aa:	21 f0       	breq	.+8      	; 0x51b4 <__floatsisf+0x54>
    51ac:	9e e8       	ldi	r25, 0x8E	; 142
    51ae:	87 2f       	mov	r24, r23
    51b0:	76 2f       	mov	r23, r22
    51b2:	05 c0       	rjmp	.+10     	; 0x51be <__floatsisf+0x5e>
    51b4:	66 23       	and	r22, r22
    51b6:	71 f0       	breq	.+28     	; 0x51d4 <__floatsisf+0x74>
    51b8:	96 e8       	ldi	r25, 0x86	; 134
    51ba:	86 2f       	mov	r24, r22
    51bc:	70 e0       	ldi	r23, 0x00	; 0
    51be:	60 e0       	ldi	r22, 0x00	; 0
    51c0:	2a f0       	brmi	.+10     	; 0x51cc <__floatsisf+0x6c>
    51c2:	9a 95       	dec	r25
    51c4:	66 0f       	add	r22, r22
    51c6:	77 1f       	adc	r23, r23
    51c8:	88 1f       	adc	r24, r24
    51ca:	da f7       	brpl	.-10     	; 0x51c2 <__floatsisf+0x62>
    51cc:	88 0f       	add	r24, r24
    51ce:	96 95       	lsr	r25
    51d0:	87 95       	ror	r24
    51d2:	97 f9       	bld	r25, 7
    51d4:	08 95       	ret

000051d6 <__fp_cmp>:
    51d6:	99 0f       	add	r25, r25
    51d8:	00 08       	sbc	r0, r0
    51da:	55 0f       	add	r21, r21
    51dc:	aa 0b       	sbc	r26, r26
    51de:	e0 e8       	ldi	r30, 0x80	; 128
    51e0:	fe ef       	ldi	r31, 0xFE	; 254
    51e2:	16 16       	cp	r1, r22
    51e4:	17 06       	cpc	r1, r23
    51e6:	e8 07       	cpc	r30, r24
    51e8:	f9 07       	cpc	r31, r25
    51ea:	c0 f0       	brcs	.+48     	; 0x521c <__fp_cmp+0x46>
    51ec:	12 16       	cp	r1, r18
    51ee:	13 06       	cpc	r1, r19
    51f0:	e4 07       	cpc	r30, r20
    51f2:	f5 07       	cpc	r31, r21
    51f4:	98 f0       	brcs	.+38     	; 0x521c <__fp_cmp+0x46>
    51f6:	62 1b       	sub	r22, r18
    51f8:	73 0b       	sbc	r23, r19
    51fa:	84 0b       	sbc	r24, r20
    51fc:	95 0b       	sbc	r25, r21
    51fe:	39 f4       	brne	.+14     	; 0x520e <__fp_cmp+0x38>
    5200:	0a 26       	eor	r0, r26
    5202:	61 f0       	breq	.+24     	; 0x521c <__fp_cmp+0x46>
    5204:	23 2b       	or	r18, r19
    5206:	24 2b       	or	r18, r20
    5208:	25 2b       	or	r18, r21
    520a:	21 f4       	brne	.+8      	; 0x5214 <__fp_cmp+0x3e>
    520c:	08 95       	ret
    520e:	0a 26       	eor	r0, r26
    5210:	09 f4       	brne	.+2      	; 0x5214 <__fp_cmp+0x3e>
    5212:	a1 40       	sbci	r26, 0x01	; 1
    5214:	a6 95       	lsr	r26
    5216:	8f ef       	ldi	r24, 0xFF	; 255
    5218:	81 1d       	adc	r24, r1
    521a:	81 1d       	adc	r24, r1
    521c:	08 95       	ret

0000521e <__fp_inf>:
    521e:	97 f9       	bld	r25, 7
    5220:	9f 67       	ori	r25, 0x7F	; 127
    5222:	80 e8       	ldi	r24, 0x80	; 128
    5224:	70 e0       	ldi	r23, 0x00	; 0
    5226:	60 e0       	ldi	r22, 0x00	; 0
    5228:	08 95       	ret

0000522a <__fp_nan>:
    522a:	9f ef       	ldi	r25, 0xFF	; 255
    522c:	80 ec       	ldi	r24, 0xC0	; 192
    522e:	08 95       	ret

00005230 <__fp_pscA>:
    5230:	00 24       	eor	r0, r0
    5232:	0a 94       	dec	r0
    5234:	16 16       	cp	r1, r22
    5236:	17 06       	cpc	r1, r23
    5238:	18 06       	cpc	r1, r24
    523a:	09 06       	cpc	r0, r25
    523c:	08 95       	ret

0000523e <__fp_pscB>:
    523e:	00 24       	eor	r0, r0
    5240:	0a 94       	dec	r0
    5242:	12 16       	cp	r1, r18
    5244:	13 06       	cpc	r1, r19
    5246:	14 06       	cpc	r1, r20
    5248:	05 06       	cpc	r0, r21
    524a:	08 95       	ret

0000524c <__fp_round>:
    524c:	09 2e       	mov	r0, r25
    524e:	03 94       	inc	r0
    5250:	00 0c       	add	r0, r0
    5252:	11 f4       	brne	.+4      	; 0x5258 <__fp_round+0xc>
    5254:	88 23       	and	r24, r24
    5256:	52 f0       	brmi	.+20     	; 0x526c <__fp_round+0x20>
    5258:	bb 0f       	add	r27, r27
    525a:	40 f4       	brcc	.+16     	; 0x526c <__fp_round+0x20>
    525c:	bf 2b       	or	r27, r31
    525e:	11 f4       	brne	.+4      	; 0x5264 <__fp_round+0x18>
    5260:	60 ff       	sbrs	r22, 0
    5262:	04 c0       	rjmp	.+8      	; 0x526c <__fp_round+0x20>
    5264:	6f 5f       	subi	r22, 0xFF	; 255
    5266:	7f 4f       	sbci	r23, 0xFF	; 255
    5268:	8f 4f       	sbci	r24, 0xFF	; 255
    526a:	9f 4f       	sbci	r25, 0xFF	; 255
    526c:	08 95       	ret

0000526e <__fp_split3>:
    526e:	57 fd       	sbrc	r21, 7
    5270:	90 58       	subi	r25, 0x80	; 128
    5272:	44 0f       	add	r20, r20
    5274:	55 1f       	adc	r21, r21
    5276:	59 f0       	breq	.+22     	; 0x528e <__fp_splitA+0x10>
    5278:	5f 3f       	cpi	r21, 0xFF	; 255
    527a:	71 f0       	breq	.+28     	; 0x5298 <__fp_splitA+0x1a>
    527c:	47 95       	ror	r20

0000527e <__fp_splitA>:
    527e:	88 0f       	add	r24, r24
    5280:	97 fb       	bst	r25, 7
    5282:	99 1f       	adc	r25, r25
    5284:	61 f0       	breq	.+24     	; 0x529e <__fp_splitA+0x20>
    5286:	9f 3f       	cpi	r25, 0xFF	; 255
    5288:	79 f0       	breq	.+30     	; 0x52a8 <__fp_splitA+0x2a>
    528a:	87 95       	ror	r24
    528c:	08 95       	ret
    528e:	12 16       	cp	r1, r18
    5290:	13 06       	cpc	r1, r19
    5292:	14 06       	cpc	r1, r20
    5294:	55 1f       	adc	r21, r21
    5296:	f2 cf       	rjmp	.-28     	; 0x527c <__fp_split3+0xe>
    5298:	46 95       	lsr	r20
    529a:	f1 df       	rcall	.-30     	; 0x527e <__fp_splitA>
    529c:	08 c0       	rjmp	.+16     	; 0x52ae <__fp_splitA+0x30>
    529e:	16 16       	cp	r1, r22
    52a0:	17 06       	cpc	r1, r23
    52a2:	18 06       	cpc	r1, r24
    52a4:	99 1f       	adc	r25, r25
    52a6:	f1 cf       	rjmp	.-30     	; 0x528a <__fp_splitA+0xc>
    52a8:	86 95       	lsr	r24
    52aa:	71 05       	cpc	r23, r1
    52ac:	61 05       	cpc	r22, r1
    52ae:	08 94       	sec
    52b0:	08 95       	ret

000052b2 <__fp_zero>:
    52b2:	e8 94       	clt

000052b4 <__fp_szero>:
    52b4:	bb 27       	eor	r27, r27
    52b6:	66 27       	eor	r22, r22
    52b8:	77 27       	eor	r23, r23
    52ba:	cb 01       	movw	r24, r22
    52bc:	97 f9       	bld	r25, 7
    52be:	08 95       	ret

000052c0 <__mulsf3>:
    52c0:	0b d0       	rcall	.+22     	; 0x52d8 <__mulsf3x>
    52c2:	c4 cf       	rjmp	.-120    	; 0x524c <__fp_round>
    52c4:	b5 df       	rcall	.-150    	; 0x5230 <__fp_pscA>
    52c6:	28 f0       	brcs	.+10     	; 0x52d2 <__mulsf3+0x12>
    52c8:	ba df       	rcall	.-140    	; 0x523e <__fp_pscB>
    52ca:	18 f0       	brcs	.+6      	; 0x52d2 <__mulsf3+0x12>
    52cc:	95 23       	and	r25, r21
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <__mulsf3+0x12>
    52d0:	a6 cf       	rjmp	.-180    	; 0x521e <__fp_inf>
    52d2:	ab cf       	rjmp	.-170    	; 0x522a <__fp_nan>
    52d4:	11 24       	eor	r1, r1
    52d6:	ee cf       	rjmp	.-36     	; 0x52b4 <__fp_szero>

000052d8 <__mulsf3x>:
    52d8:	ca df       	rcall	.-108    	; 0x526e <__fp_split3>
    52da:	a0 f3       	brcs	.-24     	; 0x52c4 <__mulsf3+0x4>

000052dc <__mulsf3_pse>:
    52dc:	95 9f       	mul	r25, r21
    52de:	d1 f3       	breq	.-12     	; 0x52d4 <__mulsf3+0x14>
    52e0:	95 0f       	add	r25, r21
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	55 1f       	adc	r21, r21
    52e6:	62 9f       	mul	r22, r18
    52e8:	f0 01       	movw	r30, r0
    52ea:	72 9f       	mul	r23, r18
    52ec:	bb 27       	eor	r27, r27
    52ee:	f0 0d       	add	r31, r0
    52f0:	b1 1d       	adc	r27, r1
    52f2:	63 9f       	mul	r22, r19
    52f4:	aa 27       	eor	r26, r26
    52f6:	f0 0d       	add	r31, r0
    52f8:	b1 1d       	adc	r27, r1
    52fa:	aa 1f       	adc	r26, r26
    52fc:	64 9f       	mul	r22, r20
    52fe:	66 27       	eor	r22, r22
    5300:	b0 0d       	add	r27, r0
    5302:	a1 1d       	adc	r26, r1
    5304:	66 1f       	adc	r22, r22
    5306:	82 9f       	mul	r24, r18
    5308:	22 27       	eor	r18, r18
    530a:	b0 0d       	add	r27, r0
    530c:	a1 1d       	adc	r26, r1
    530e:	62 1f       	adc	r22, r18
    5310:	73 9f       	mul	r23, r19
    5312:	b0 0d       	add	r27, r0
    5314:	a1 1d       	adc	r26, r1
    5316:	62 1f       	adc	r22, r18
    5318:	83 9f       	mul	r24, r19
    531a:	a0 0d       	add	r26, r0
    531c:	61 1d       	adc	r22, r1
    531e:	22 1f       	adc	r18, r18
    5320:	74 9f       	mul	r23, r20
    5322:	33 27       	eor	r19, r19
    5324:	a0 0d       	add	r26, r0
    5326:	61 1d       	adc	r22, r1
    5328:	23 1f       	adc	r18, r19
    532a:	84 9f       	mul	r24, r20
    532c:	60 0d       	add	r22, r0
    532e:	21 1d       	adc	r18, r1
    5330:	82 2f       	mov	r24, r18
    5332:	76 2f       	mov	r23, r22
    5334:	6a 2f       	mov	r22, r26
    5336:	11 24       	eor	r1, r1
    5338:	9f 57       	subi	r25, 0x7F	; 127
    533a:	50 40       	sbci	r21, 0x00	; 0
    533c:	8a f0       	brmi	.+34     	; 0x5360 <__mulsf3_pse+0x84>
    533e:	e1 f0       	breq	.+56     	; 0x5378 <__mulsf3_pse+0x9c>
    5340:	88 23       	and	r24, r24
    5342:	4a f0       	brmi	.+18     	; 0x5356 <__mulsf3_pse+0x7a>
    5344:	ee 0f       	add	r30, r30
    5346:	ff 1f       	adc	r31, r31
    5348:	bb 1f       	adc	r27, r27
    534a:	66 1f       	adc	r22, r22
    534c:	77 1f       	adc	r23, r23
    534e:	88 1f       	adc	r24, r24
    5350:	91 50       	subi	r25, 0x01	; 1
    5352:	50 40       	sbci	r21, 0x00	; 0
    5354:	a9 f7       	brne	.-22     	; 0x5340 <__mulsf3_pse+0x64>
    5356:	9e 3f       	cpi	r25, 0xFE	; 254
    5358:	51 05       	cpc	r21, r1
    535a:	70 f0       	brcs	.+28     	; 0x5378 <__mulsf3_pse+0x9c>
    535c:	60 cf       	rjmp	.-320    	; 0x521e <__fp_inf>
    535e:	aa cf       	rjmp	.-172    	; 0x52b4 <__fp_szero>
    5360:	5f 3f       	cpi	r21, 0xFF	; 255
    5362:	ec f3       	brlt	.-6      	; 0x535e <__mulsf3_pse+0x82>
    5364:	98 3e       	cpi	r25, 0xE8	; 232
    5366:	dc f3       	brlt	.-10     	; 0x535e <__mulsf3_pse+0x82>
    5368:	86 95       	lsr	r24
    536a:	77 95       	ror	r23
    536c:	67 95       	ror	r22
    536e:	b7 95       	ror	r27
    5370:	f7 95       	ror	r31
    5372:	e7 95       	ror	r30
    5374:	9f 5f       	subi	r25, 0xFF	; 255
    5376:	c1 f7       	brne	.-16     	; 0x5368 <__mulsf3_pse+0x8c>
    5378:	fe 2b       	or	r31, r30
    537a:	88 0f       	add	r24, r24
    537c:	91 1d       	adc	r25, r1
    537e:	96 95       	lsr	r25
    5380:	87 95       	ror	r24
    5382:	97 f9       	bld	r25, 7
    5384:	08 95       	ret

00005386 <__unordsf2>:
    5386:	27 df       	rcall	.-434    	; 0x51d6 <__fp_cmp>
    5388:	88 0b       	sbc	r24, r24
    538a:	99 0b       	sbc	r25, r25
    538c:	08 95       	ret

0000538e <__cxa_pure_virtual>:
    538e:	0e 94 dd 32 	call	0x65ba	; 0x65ba <abort>

00005392 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5392:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5394:	91 8d       	ldd	r25, Z+25	; 0x19
    5396:	22 8d       	ldd	r18, Z+26	; 0x1a
    5398:	89 2f       	mov	r24, r25
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	80 5c       	subi	r24, 0xC0	; 192
    539e:	9f 4f       	sbci	r25, 0xFF	; 255
    53a0:	82 1b       	sub	r24, r18
    53a2:	91 09       	sbc	r25, r1
}
    53a4:	8f 73       	andi	r24, 0x3F	; 63
    53a6:	99 27       	eor	r25, r25
    53a8:	08 95       	ret

000053aa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    53aa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    53ac:	91 8d       	ldd	r25, Z+25	; 0x19
    53ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    53b0:	98 17       	cp	r25, r24
    53b2:	31 f0       	breq	.+12     	; 0x53c0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    53b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    53b6:	e8 0f       	add	r30, r24
    53b8:	f1 1d       	adc	r31, r1
    53ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    53c0:	8f ef       	ldi	r24, 0xFF	; 255
    53c2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    53c4:	08 95       	ret

000053c6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    53c6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    53c8:	91 8d       	ldd	r25, Z+25	; 0x19
    53ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    53cc:	98 17       	cp	r25, r24
    53ce:	61 f0       	breq	.+24     	; 0x53e8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    53d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    53d2:	df 01       	movw	r26, r30
    53d4:	a8 0f       	add	r26, r24
    53d6:	b1 1d       	adc	r27, r1
    53d8:	5d 96       	adiw	r26, 0x1d	; 29
    53da:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    53dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    53de:	9f 5f       	subi	r25, 0xFF	; 255
    53e0:	9f 73       	andi	r25, 0x3F	; 63
    53e2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    53e8:	8f ef       	ldi	r24, 0xFF	; 255
    53ea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    53ec:	08 95       	ret

000053ee <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    53ee:	fc 01       	movw	r30, r24
    53f0:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    53f2:	44 8d       	ldd	r20, Z+28	; 0x1c
    53f4:	25 2f       	mov	r18, r21
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	84 2f       	mov	r24, r20
    53fa:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    53fc:	82 1b       	sub	r24, r18
    53fe:	93 0b       	sbc	r25, r19
    5400:	54 17       	cp	r21, r20
    5402:	10 f0       	brcs	.+4      	; 0x5408 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5404:	cf 96       	adiw	r24, 0x3f	; 63
    5406:	08 95       	ret
  return tail - head - 1;
    5408:	01 97       	sbiw	r24, 0x01	; 1
}
    540a:	08 95       	ret

0000540c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    540c:	83 e9       	ldi	r24, 0x93	; 147
    540e:	9b e2       	ldi	r25, 0x2B	; 43
    5410:	89 2b       	or	r24, r25
    5412:	39 f0       	breq	.+14     	; 0x5422 <_Z14serialEventRunv+0x16>
    5414:	80 e0       	ldi	r24, 0x00	; 0
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	89 2b       	or	r24, r25
    541a:	19 f0       	breq	.+6      	; 0x5422 <_Z14serialEventRunv+0x16>
    541c:	84 d1       	rcall	.+776    	; 0x5726 <_Z17Serial0_availablev>
    541e:	81 11       	cpse	r24, r1
    5420:	25 c0       	rjmp	.+74     	; 0x546c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5422:	80 e0       	ldi	r24, 0x00	; 0
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	89 2b       	or	r24, r25
    5428:	41 f0       	breq	.+16     	; 0x543a <_Z14serialEventRunv+0x2e>
    542a:	80 e0       	ldi	r24, 0x00	; 0
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	89 2b       	or	r24, r25
    5430:	21 f0       	breq	.+8      	; 0x543a <_Z14serialEventRunv+0x2e>
    5432:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5436:	81 11       	cpse	r24, r1
    5438:	1c c0       	rjmp	.+56     	; 0x5472 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	89 2b       	or	r24, r25
    5440:	41 f0       	breq	.+16     	; 0x5452 <_Z14serialEventRunv+0x46>
    5442:	80 e0       	ldi	r24, 0x00	; 0
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	89 2b       	or	r24, r25
    5448:	21 f0       	breq	.+8      	; 0x5452 <_Z14serialEventRunv+0x46>
    544a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    544e:	81 11       	cpse	r24, r1
    5450:	13 c0       	rjmp	.+38     	; 0x5478 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	89 2b       	or	r24, r25
    5458:	a1 f0       	breq	.+40     	; 0x5482 <_Z14serialEventRunv+0x76>
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	89 2b       	or	r24, r25
    5460:	81 f0       	breq	.+32     	; 0x5482 <_Z14serialEventRunv+0x76>
    5462:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5466:	81 11       	cpse	r24, r1
    5468:	0a c0       	rjmp	.+20     	; 0x547e <_Z14serialEventRunv+0x72>
    546a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    546c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5470:	d8 cf       	rjmp	.-80     	; 0x5422 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5472:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5476:	e1 cf       	rjmp	.-62     	; 0x543a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5478:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    547c:	ea cf       	rjmp	.-44     	; 0x5452 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    547e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5482:	08 95       	ret

00005484 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5484:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5486:	84 8d       	ldd	r24, Z+28	; 0x1c
    5488:	df 01       	movw	r26, r30
    548a:	a8 0f       	add	r26, r24
    548c:	b1 1d       	adc	r27, r1
    548e:	a3 5a       	subi	r26, 0xA3	; 163
    5490:	bf 4f       	sbci	r27, 0xFF	; 255
    5492:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5494:	84 8d       	ldd	r24, Z+28	; 0x1c
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	01 96       	adiw	r24, 0x01	; 1
    549a:	8f 73       	andi	r24, 0x3F	; 63
    549c:	99 27       	eor	r25, r25
    549e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    54a0:	a6 89       	ldd	r26, Z+22	; 0x16
    54a2:	b7 89       	ldd	r27, Z+23	; 0x17
    54a4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    54a6:	a0 89       	ldd	r26, Z+16	; 0x10
    54a8:	b1 89       	ldd	r27, Z+17	; 0x11
    54aa:	8c 91       	ld	r24, X
    54ac:	83 70       	andi	r24, 0x03	; 3
    54ae:	80 64       	ori	r24, 0x40	; 64
    54b0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    54b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    54b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    54b6:	98 13       	cpse	r25, r24
    54b8:	06 c0       	rjmp	.+12     	; 0x54c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    54ba:	02 88       	ldd	r0, Z+18	; 0x12
    54bc:	f3 89       	ldd	r31, Z+19	; 0x13
    54be:	e0 2d       	mov	r30, r0
    54c0:	80 81       	ld	r24, Z
    54c2:	8f 7d       	andi	r24, 0xDF	; 223
    54c4:	80 83       	st	Z, r24
    54c6:	08 95       	ret

000054c8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    54c8:	ef 92       	push	r14
    54ca:	ff 92       	push	r15
    54cc:	0f 93       	push	r16
    54ce:	1f 93       	push	r17
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
    54d4:	ec 01       	movw	r28, r24
  _written = true;
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    54da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54de:	98 13       	cpse	r25, r24
    54e0:	05 c0       	rjmp	.+10     	; 0x54ec <_ZN14HardwareSerial5writeEh+0x24>
    54e2:	e8 89       	ldd	r30, Y+16	; 0x10
    54e4:	f9 89       	ldd	r31, Y+17	; 0x11
    54e6:	80 81       	ld	r24, Z
    54e8:	85 fd       	sbrc	r24, 5
    54ea:	25 c0       	rjmp	.+74     	; 0x5536 <_ZN14HardwareSerial5writeEh+0x6e>
    54ec:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    54ee:	0b 8d       	ldd	r16, Y+27	; 0x1b
    54f0:	10 e0       	ldi	r17, 0x00	; 0
    54f2:	0f 5f       	subi	r16, 0xFF	; 255
    54f4:	1f 4f       	sbci	r17, 0xFF	; 255
    54f6:	0f 73       	andi	r16, 0x3F	; 63
    54f8:	11 27       	eor	r17, r17
    54fa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    54fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54fe:	e8 12       	cpse	r14, r24
    5500:	0b c0       	rjmp	.+22     	; 0x5518 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	07 fc       	sbrc	r0, 7
    5506:	fa cf       	rjmp	.-12     	; 0x54fc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5508:	e8 89       	ldd	r30, Y+16	; 0x10
    550a:	f9 89       	ldd	r31, Y+17	; 0x11
    550c:	80 81       	ld	r24, Z
    550e:	85 ff       	sbrs	r24, 5
    5510:	f5 cf       	rjmp	.-22     	; 0x54fc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5512:	ce 01       	movw	r24, r28
    5514:	b7 df       	rcall	.-146    	; 0x5484 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5516:	f2 cf       	rjmp	.-28     	; 0x54fc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    551a:	fe 01       	movw	r30, r28
    551c:	e8 0f       	add	r30, r24
    551e:	f1 1d       	adc	r31, r1
    5520:	e3 5a       	subi	r30, 0xA3	; 163
    5522:	ff 4f       	sbci	r31, 0xFF	; 255
    5524:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5526:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5528:	f8 94       	cli
    _tx_buffer_head = i;
    552a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    552c:	ea 89       	ldd	r30, Y+18	; 0x12
    552e:	fb 89       	ldd	r31, Y+19	; 0x13
    5530:	80 81       	ld	r24, Z
    5532:	80 62       	ori	r24, 0x20	; 32
    5534:	0a c0       	rjmp	.+20     	; 0x554a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5536:	9f b7       	in	r25, 0x3f	; 63
    5538:	f8 94       	cli
      *_udr = c;
    553a:	ee 89       	ldd	r30, Y+22	; 0x16
    553c:	ff 89       	ldd	r31, Y+23	; 0x17
    553e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5540:	e8 89       	ldd	r30, Y+16	; 0x10
    5542:	f9 89       	ldd	r31, Y+17	; 0x11
    5544:	80 81       	ld	r24, Z
    5546:	83 70       	andi	r24, 0x03	; 3
    5548:	80 64       	ori	r24, 0x40	; 64
    554a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    554c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	df 91       	pop	r29
    5554:	cf 91       	pop	r28
    5556:	1f 91       	pop	r17
    5558:	0f 91       	pop	r16
    555a:	ff 90       	pop	r15
    555c:	ef 90       	pop	r14
    555e:	08 95       	ret

00005560 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5560:	cf 93       	push	r28
    5562:	df 93       	push	r29
    5564:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5566:	88 8d       	ldd	r24, Y+24	; 0x18
    5568:	88 23       	and	r24, r24
    556a:	c1 f0       	breq	.+48     	; 0x559c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    556c:	ea 89       	ldd	r30, Y+18	; 0x12
    556e:	fb 89       	ldd	r31, Y+19	; 0x13
    5570:	80 81       	ld	r24, Z
    5572:	85 fd       	sbrc	r24, 5
    5574:	05 c0       	rjmp	.+10     	; 0x5580 <_ZN14HardwareSerial5flushEv+0x20>
    5576:	a8 89       	ldd	r26, Y+16	; 0x10
    5578:	b9 89       	ldd	r27, Y+17	; 0x11
    557a:	8c 91       	ld	r24, X
    557c:	86 fd       	sbrc	r24, 6
    557e:	0e c0       	rjmp	.+28     	; 0x559c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5580:	0f b6       	in	r0, 0x3f	; 63
    5582:	07 fc       	sbrc	r0, 7
    5584:	f5 cf       	rjmp	.-22     	; 0x5570 <_ZN14HardwareSerial5flushEv+0x10>
    5586:	80 81       	ld	r24, Z
    5588:	85 ff       	sbrs	r24, 5
    558a:	f2 cf       	rjmp	.-28     	; 0x5570 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    558c:	a8 89       	ldd	r26, Y+16	; 0x10
    558e:	b9 89       	ldd	r27, Y+17	; 0x11
    5590:	8c 91       	ld	r24, X
    5592:	85 ff       	sbrs	r24, 5
    5594:	ed cf       	rjmp	.-38     	; 0x5570 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5596:	ce 01       	movw	r24, r28
    5598:	75 df       	rcall	.-278    	; 0x5484 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    559a:	e8 cf       	rjmp	.-48     	; 0x556c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    559c:	df 91       	pop	r29
    559e:	cf 91       	pop	r28
    55a0:	08 95       	ret

000055a2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    55a2:	cf 92       	push	r12
    55a4:	df 92       	push	r13
    55a6:	ef 92       	push	r14
    55a8:	ff 92       	push	r15
    55aa:	1f 93       	push	r17
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
    55b0:	ec 01       	movw	r28, r24
    55b2:	6a 01       	movw	r12, r20
    55b4:	7b 01       	movw	r14, r22
    55b6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    55b8:	e8 89       	ldd	r30, Y+16	; 0x10
    55ba:	f9 89       	ldd	r31, Y+17	; 0x11
    55bc:	82 e0       	ldi	r24, 0x02	; 2
    55be:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    55c0:	41 15       	cp	r20, r1
    55c2:	51 4e       	sbci	r21, 0xE1	; 225
    55c4:	61 05       	cpc	r22, r1
    55c6:	71 05       	cpc	r23, r1
    55c8:	a9 f0       	breq	.+42     	; 0x55f4 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    55ca:	60 e0       	ldi	r22, 0x00	; 0
    55cc:	79 e0       	ldi	r23, 0x09	; 9
    55ce:	8d e3       	ldi	r24, 0x3D	; 61
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	a7 01       	movw	r20, r14
    55d4:	96 01       	movw	r18, r12
    55d6:	91 d5       	rcall	.+2850   	; 0x60fa <__udivmodsi4>
    55d8:	da 01       	movw	r26, r20
    55da:	c9 01       	movw	r24, r18
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	a1 09       	sbc	r26, r1
    55e0:	b1 09       	sbc	r27, r1
    55e2:	b6 95       	lsr	r27
    55e4:	a7 95       	ror	r26
    55e6:	97 95       	ror	r25
    55e8:	87 95       	ror	r24
    55ea:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    55ec:	21 15       	cp	r18, r1
    55ee:	80 e1       	ldi	r24, 0x10	; 16
    55f0:	38 07       	cpc	r19, r24
    55f2:	a0 f0       	brcs	.+40     	; 0x561c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    55f4:	e8 89       	ldd	r30, Y+16	; 0x10
    55f6:	f9 89       	ldd	r31, Y+17	; 0x11
    55f8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    55fa:	60 e8       	ldi	r22, 0x80	; 128
    55fc:	74 e8       	ldi	r23, 0x84	; 132
    55fe:	8e e1       	ldi	r24, 0x1E	; 30
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	a7 01       	movw	r20, r14
    5604:	96 01       	movw	r18, r12
    5606:	79 d5       	rcall	.+2802   	; 0x60fa <__udivmodsi4>
    5608:	da 01       	movw	r26, r20
    560a:	c9 01       	movw	r24, r18
    560c:	01 97       	sbiw	r24, 0x01	; 1
    560e:	a1 09       	sbc	r26, r1
    5610:	b1 09       	sbc	r27, r1
    5612:	b6 95       	lsr	r27
    5614:	a7 95       	ror	r26
    5616:	97 95       	ror	r25
    5618:	87 95       	ror	r24
    561a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    561c:	ec 85       	ldd	r30, Y+12	; 0x0c
    561e:	fd 85       	ldd	r31, Y+13	; 0x0d
    5620:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5622:	ee 85       	ldd	r30, Y+14	; 0x0e
    5624:	ff 85       	ldd	r31, Y+15	; 0x0f
    5626:	20 83       	st	Z, r18

  _written = false;
    5628:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    562a:	ec 89       	ldd	r30, Y+20	; 0x14
    562c:	fd 89       	ldd	r31, Y+21	; 0x15
    562e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5630:	ea 89       	ldd	r30, Y+18	; 0x12
    5632:	fb 89       	ldd	r31, Y+19	; 0x13
    5634:	80 81       	ld	r24, Z
    5636:	80 61       	ori	r24, 0x10	; 16
    5638:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    563a:	ea 89       	ldd	r30, Y+18	; 0x12
    563c:	fb 89       	ldd	r31, Y+19	; 0x13
    563e:	80 81       	ld	r24, Z
    5640:	88 60       	ori	r24, 0x08	; 8
    5642:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5644:	ea 89       	ldd	r30, Y+18	; 0x12
    5646:	fb 89       	ldd	r31, Y+19	; 0x13
    5648:	80 81       	ld	r24, Z
    564a:	80 68       	ori	r24, 0x80	; 128
    564c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    564e:	ea 89       	ldd	r30, Y+18	; 0x12
    5650:	fb 89       	ldd	r31, Y+19	; 0x13
    5652:	80 81       	ld	r24, Z
    5654:	8f 7d       	andi	r24, 0xDF	; 223
    5656:	80 83       	st	Z, r24
}
    5658:	df 91       	pop	r29
    565a:	cf 91       	pop	r28
    565c:	1f 91       	pop	r17
    565e:	ff 90       	pop	r15
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	cf 90       	pop	r12
    5666:	08 95       	ret

00005668 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5668:	1f 92       	push	r1
    566a:	0f 92       	push	r0
    566c:	0f b6       	in	r0, 0x3f	; 63
    566e:	0f 92       	push	r0
    5670:	11 24       	eor	r1, r1
    5672:	0b b6       	in	r0, 0x3b	; 59
    5674:	0f 92       	push	r0
    5676:	2f 93       	push	r18
    5678:	8f 93       	push	r24
    567a:	9f 93       	push	r25
    567c:	ef 93       	push	r30
    567e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5680:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <Serial+0x10>
    5684:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <Serial+0x11>
    5688:	80 81       	ld	r24, Z
    568a:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <Serial+0x16>
    568e:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <Serial+0x17>
    5692:	82 fd       	sbrc	r24, 2
    5694:	12 c0       	rjmp	.+36     	; 0x56ba <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5696:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5698:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <Serial+0x19>
    569c:	8f 5f       	subi	r24, 0xFF	; 255
    569e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    56a0:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Serial+0x1a>
    56a4:	82 17       	cp	r24, r18
    56a6:	51 f0       	breq	.+20     	; 0x56bc <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    56a8:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <Serial+0x19>
    56ac:	f0 e0       	ldi	r31, 0x00	; 0
    56ae:	e2 56       	subi	r30, 0x62	; 98
    56b0:	fb 4f       	sbci	r31, 0xFB	; 251
    56b2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    56b4:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <Serial+0x19>
    56b8:	01 c0       	rjmp	.+2      	; 0x56bc <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    56ba:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    56bc:	ff 91       	pop	r31
    56be:	ef 91       	pop	r30
    56c0:	9f 91       	pop	r25
    56c2:	8f 91       	pop	r24
    56c4:	2f 91       	pop	r18
    56c6:	0f 90       	pop	r0
    56c8:	0b be       	out	0x3b, r0	; 59
    56ca:	0f 90       	pop	r0
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	0f 90       	pop	r0
    56d0:	1f 90       	pop	r1
    56d2:	18 95       	reti

000056d4 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    56d4:	1f 92       	push	r1
    56d6:	0f 92       	push	r0
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	0f 92       	push	r0
    56dc:	11 24       	eor	r1, r1
    56de:	0b b6       	in	r0, 0x3b	; 59
    56e0:	0f 92       	push	r0
    56e2:	2f 93       	push	r18
    56e4:	3f 93       	push	r19
    56e6:	4f 93       	push	r20
    56e8:	5f 93       	push	r21
    56ea:	6f 93       	push	r22
    56ec:	7f 93       	push	r23
    56ee:	8f 93       	push	r24
    56f0:	9f 93       	push	r25
    56f2:	af 93       	push	r26
    56f4:	bf 93       	push	r27
    56f6:	ef 93       	push	r30
    56f8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    56fa:	8e e9       	ldi	r24, 0x9E	; 158
    56fc:	94 e0       	ldi	r25, 0x04	; 4
    56fe:	c2 de       	rcall	.-636    	; 0x5484 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5700:	ff 91       	pop	r31
    5702:	ef 91       	pop	r30
    5704:	bf 91       	pop	r27
    5706:	af 91       	pop	r26
    5708:	9f 91       	pop	r25
    570a:	8f 91       	pop	r24
    570c:	7f 91       	pop	r23
    570e:	6f 91       	pop	r22
    5710:	5f 91       	pop	r21
    5712:	4f 91       	pop	r20
    5714:	3f 91       	pop	r19
    5716:	2f 91       	pop	r18
    5718:	0f 90       	pop	r0
    571a:	0b be       	out	0x3b, r0	; 59
    571c:	0f 90       	pop	r0
    571e:	0f be       	out	0x3f, r0	; 63
    5720:	0f 90       	pop	r0
    5722:	1f 90       	pop	r1
    5724:	18 95       	reti

00005726 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5726:	8e e9       	ldi	r24, 0x9E	; 158
    5728:	94 e0       	ldi	r25, 0x04	; 4
    572a:	33 de       	rcall	.-922    	; 0x5392 <_ZN14HardwareSerial9availableEv>
    572c:	21 e0       	ldi	r18, 0x01	; 1
    572e:	89 2b       	or	r24, r25
    5730:	09 f4       	brne	.+2      	; 0x5734 <_Z17Serial0_availablev+0xe>
    5732:	20 e0       	ldi	r18, 0x00	; 0
}
    5734:	82 2f       	mov	r24, r18
    5736:	08 95       	ret

00005738 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5738:	ee e9       	ldi	r30, 0x9E	; 158
    573a:	f4 e0       	ldi	r31, 0x04	; 4
    573c:	13 82       	std	Z+3, r1	; 0x03
    573e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5740:	88 ee       	ldi	r24, 0xE8	; 232
    5742:	93 e0       	ldi	r25, 0x03	; 3
    5744:	a0 e0       	ldi	r26, 0x00	; 0
    5746:	b0 e0       	ldi	r27, 0x00	; 0
    5748:	84 83       	std	Z+4, r24	; 0x04
    574a:	95 83       	std	Z+5, r25	; 0x05
    574c:	a6 83       	std	Z+6, r26	; 0x06
    574e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5750:	84 ec       	ldi	r24, 0xC4	; 196
    5752:	92 e0       	ldi	r25, 0x02	; 2
    5754:	91 83       	std	Z+1, r25	; 0x01
    5756:	80 83       	st	Z, r24
    5758:	85 ec       	ldi	r24, 0xC5	; 197
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	95 87       	std	Z+13, r25	; 0x0d
    575e:	84 87       	std	Z+12, r24	; 0x0c
    5760:	84 ec       	ldi	r24, 0xC4	; 196
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	97 87       	std	Z+15, r25	; 0x0f
    5766:	86 87       	std	Z+14, r24	; 0x0e
    5768:	80 ec       	ldi	r24, 0xC0	; 192
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	91 8b       	std	Z+17, r25	; 0x11
    576e:	80 8b       	std	Z+16, r24	; 0x10
    5770:	81 ec       	ldi	r24, 0xC1	; 193
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	93 8b       	std	Z+19, r25	; 0x13
    5776:	82 8b       	std	Z+18, r24	; 0x12
    5778:	82 ec       	ldi	r24, 0xC2	; 194
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	95 8b       	std	Z+21, r25	; 0x15
    577e:	84 8b       	std	Z+20, r24	; 0x14
    5780:	86 ec       	ldi	r24, 0xC6	; 198
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	97 8b       	std	Z+23, r25	; 0x17
    5786:	86 8b       	std	Z+22, r24	; 0x16
    5788:	11 8e       	std	Z+25, r1	; 0x19
    578a:	12 8e       	std	Z+26, r1	; 0x1a
    578c:	13 8e       	std	Z+27, r1	; 0x1b
    578e:	14 8e       	std	Z+28, r1	; 0x1c
    5790:	08 95       	ret

00005792 <initVariant>:
    5792:	08 95       	ret

00005794 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5794:	66 d1       	rcall	.+716    	; 0x5a62 <init>

	initVariant();
    5796:	fd df       	rcall	.-6      	; 0x5792 <initVariant>
    5798:	0e 94 39 03 	call	0x672	; 0x672 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    579c:	c6 e0       	ldi	r28, 0x06	; 6
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    579e:	da e2       	ldi	r29, 0x2A	; 42
    57a0:	0e 94 de 03 	call	0x7bc	; 0x7bc <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    57a4:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    57a6:	e1 f3       	breq	.-8      	; 0x57a0 <main+0xc>
    57a8:	31 de       	rcall	.-926    	; 0x540c <_Z14serialEventRunv>
    57aa:	fa cf       	rjmp	.-12     	; 0x57a0 <main+0xc>

000057ac <_ZdlPv>:
    57ac:	9d c5       	rjmp	.+2874   	; 0x62e8 <free>

000057ae <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    57ae:	cf 92       	push	r12
    57b0:	df 92       	push	r13
    57b2:	ef 92       	push	r14
    57b4:	ff 92       	push	r15
    57b6:	0f 93       	push	r16
    57b8:	1f 93       	push	r17
    57ba:	cf 93       	push	r28
    57bc:	df 93       	push	r29
    57be:	6c 01       	movw	r12, r24
    57c0:	7a 01       	movw	r14, r20
    57c2:	8b 01       	movw	r16, r22
    57c4:	c0 e0       	ldi	r28, 0x00	; 0
    57c6:	d0 e0       	ldi	r29, 0x00	; 0
    57c8:	ce 15       	cp	r28, r14
    57ca:	df 05       	cpc	r29, r15
    57cc:	81 f0       	breq	.+32     	; 0x57ee <_ZN5Print5writeEPKhj+0x40>
    57ce:	d8 01       	movw	r26, r16
    57d0:	6d 91       	ld	r22, X+
    57d2:	8d 01       	movw	r16, r26
    57d4:	d6 01       	movw	r26, r12
    57d6:	ed 91       	ld	r30, X+
    57d8:	fc 91       	ld	r31, X
    57da:	01 90       	ld	r0, Z+
    57dc:	f0 81       	ld	r31, Z
    57de:	e0 2d       	mov	r30, r0
    57e0:	c6 01       	movw	r24, r12
    57e2:	19 95       	eicall
    57e4:	89 2b       	or	r24, r25
    57e6:	11 f0       	breq	.+4      	; 0x57ec <_ZN5Print5writeEPKhj+0x3e>
    57e8:	21 96       	adiw	r28, 0x01	; 1
    57ea:	ee cf       	rjmp	.-36     	; 0x57c8 <_ZN5Print5writeEPKhj+0x1a>
    57ec:	7e 01       	movw	r14, r28
    57ee:	c7 01       	movw	r24, r14
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	1f 91       	pop	r17
    57f6:	0f 91       	pop	r16
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	df 90       	pop	r13
    57fe:	cf 90       	pop	r12
    5800:	08 95       	ret

00005802 <_ZN5Print5printEPKc>:
    5802:	0c 94 b3 01 	jmp	0x366	; 0x366 <_ZN5Print5writeEPKc>

00005806 <_ZN5Print7printlnEv>:
    5806:	62 ed       	ldi	r22, 0xD2	; 210
    5808:	72 e0       	ldi	r23, 0x02	; 2
    580a:	0c 94 b3 01 	jmp	0x366	; 0x366 <_ZN5Print5writeEPKc>

0000580e <_ZN5Print7printlnEPKc>:
    580e:	0f 93       	push	r16
    5810:	1f 93       	push	r17
    5812:	cf 93       	push	r28
    5814:	df 93       	push	r29
    5816:	ec 01       	movw	r28, r24
    5818:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN5Print5writeEPKc>
    581c:	8c 01       	movw	r16, r24
    581e:	ce 01       	movw	r24, r28
    5820:	f2 df       	rcall	.-28     	; 0x5806 <_ZN5Print7printlnEv>
    5822:	80 0f       	add	r24, r16
    5824:	91 1f       	adc	r25, r17
    5826:	df 91       	pop	r29
    5828:	cf 91       	pop	r28
    582a:	1f 91       	pop	r17
    582c:	0f 91       	pop	r16
    582e:	08 95       	ret

00005830 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    5830:	8f 92       	push	r8
    5832:	9f 92       	push	r9
    5834:	af 92       	push	r10
    5836:	bf 92       	push	r11
    5838:	ef 92       	push	r14
    583a:	ff 92       	push	r15
    583c:	0f 93       	push	r16
    583e:	1f 93       	push	r17
    5840:	cf 93       	push	r28
    5842:	df 93       	push	r29
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62
    5848:	a1 97       	sbiw	r28, 0x21	; 33
    584a:	0f b6       	in	r0, 0x3f	; 63
    584c:	f8 94       	cli
    584e:	de bf       	out	0x3e, r29	; 62
    5850:	0f be       	out	0x3f, r0	; 63
    5852:	cd bf       	out	0x3d, r28	; 61
    5854:	7c 01       	movw	r14, r24
    5856:	fa 01       	movw	r30, r20
    5858:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    585a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    585c:	22 30       	cpi	r18, 0x02	; 2
    585e:	08 f4       	brcc	.+2      	; 0x5862 <_ZN5Print11printNumberEmh+0x32>
    5860:	2a e0       	ldi	r18, 0x0A	; 10
    5862:	8e 01       	movw	r16, r28
    5864:	0f 5d       	subi	r16, 0xDF	; 223
    5866:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    5868:	82 2e       	mov	r8, r18
    586a:	91 2c       	mov	r9, r1
    586c:	a1 2c       	mov	r10, r1
    586e:	b1 2c       	mov	r11, r1
    5870:	bf 01       	movw	r22, r30
    5872:	a5 01       	movw	r20, r10
    5874:	94 01       	movw	r18, r8
    5876:	41 d4       	rcall	.+2178   	; 0x60fa <__udivmodsi4>
    n /= base;
    5878:	f9 01       	movw	r30, r18
    587a:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    587c:	01 50       	subi	r16, 0x01	; 1
    587e:	11 09       	sbc	r17, r1
    5880:	6a 30       	cpi	r22, 0x0A	; 10
    5882:	10 f4       	brcc	.+4      	; 0x5888 <_ZN5Print11printNumberEmh+0x58>
    5884:	60 5d       	subi	r22, 0xD0	; 208
    5886:	01 c0       	rjmp	.+2      	; 0x588a <_ZN5Print11printNumberEmh+0x5a>
    5888:	69 5c       	subi	r22, 0xC9	; 201
    588a:	d8 01       	movw	r26, r16
    588c:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    588e:	23 2b       	or	r18, r19
    5890:	24 2b       	or	r18, r20
    5892:	25 2b       	or	r18, r21
    5894:	69 f7       	brne	.-38     	; 0x5870 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    5896:	b8 01       	movw	r22, r16
    5898:	c7 01       	movw	r24, r14
    589a:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN5Print5writeEPKc>
}
    589e:	a1 96       	adiw	r28, 0x21	; 33
    58a0:	0f b6       	in	r0, 0x3f	; 63
    58a2:	f8 94       	cli
    58a4:	de bf       	out	0x3e, r29	; 62
    58a6:	0f be       	out	0x3f, r0	; 63
    58a8:	cd bf       	out	0x3d, r28	; 61
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	ff 90       	pop	r15
    58b4:	ef 90       	pop	r14
    58b6:	bf 90       	pop	r11
    58b8:	af 90       	pop	r10
    58ba:	9f 90       	pop	r9
    58bc:	8f 90       	pop	r8
    58be:	08 95       	ret

000058c0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    58c0:	21 15       	cp	r18, r1
    58c2:	31 05       	cpc	r19, r1
    58c4:	41 f4       	brne	.+16     	; 0x58d6 <_ZN5Print5printEmi+0x16>
    58c6:	dc 01       	movw	r26, r24
    58c8:	ed 91       	ld	r30, X+
    58ca:	fc 91       	ld	r31, X
    58cc:	01 90       	ld	r0, Z+
    58ce:	f0 81       	ld	r31, Z
    58d0:	e0 2d       	mov	r30, r0
    58d2:	64 2f       	mov	r22, r20
    58d4:	19 94       	eijmp
  else return printNumber(n, base);
    58d6:	ac cf       	rjmp	.-168    	; 0x5830 <_ZN5Print11printNumberEmh>

000058d8 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    58d8:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    58da:	46 2f       	mov	r20, r22
    58dc:	50 e0       	ldi	r21, 0x00	; 0
    58de:	60 e0       	ldi	r22, 0x00	; 0
    58e0:	70 e0       	ldi	r23, 0x00	; 0
    58e2:	ee cf       	rjmp	.-36     	; 0x58c0 <_ZN5Print5printEmi>

000058e4 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    58e4:	1f 92       	push	r1
    58e6:	0f 92       	push	r0
    58e8:	0f b6       	in	r0, 0x3f	; 63
    58ea:	0f 92       	push	r0
    58ec:	11 24       	eor	r1, r1
    58ee:	2f 93       	push	r18
    58f0:	3f 93       	push	r19
    58f2:	8f 93       	push	r24
    58f4:	9f 93       	push	r25
    58f6:	af 93       	push	r26
    58f8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    58fa:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <timer0_millis>
    58fe:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <timer0_millis+0x1>
    5902:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <timer0_millis+0x2>
    5906:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    590a:	30 91 3b 05 	lds	r19, 0x053B	; 0x80053b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    590e:	23 e0       	ldi	r18, 0x03	; 3
    5910:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5912:	2d 37       	cpi	r18, 0x7D	; 125
    5914:	20 f4       	brcc	.+8      	; 0x591e <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5916:	01 96       	adiw	r24, 0x01	; 1
    5918:	a1 1d       	adc	r26, r1
    591a:	b1 1d       	adc	r27, r1
    591c:	05 c0       	rjmp	.+10     	; 0x5928 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    591e:	26 e8       	ldi	r18, 0x86	; 134
    5920:	23 0f       	add	r18, r19
		m += 1;
    5922:	02 96       	adiw	r24, 0x02	; 2
    5924:	a1 1d       	adc	r26, r1
    5926:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5928:	20 93 3b 05 	sts	0x053B, r18	; 0x80053b <timer0_fract>
	timer0_millis = m;
    592c:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <timer0_millis>
    5930:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <timer0_millis+0x1>
    5934:	a0 93 3e 05 	sts	0x053E, r26	; 0x80053e <timer0_millis+0x2>
    5938:	b0 93 3f 05 	sts	0x053F, r27	; 0x80053f <timer0_millis+0x3>
	timer0_overflow_count++;
    593c:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <timer0_overflow_count>
    5940:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <timer0_overflow_count+0x1>
    5944:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <timer0_overflow_count+0x2>
    5948:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <timer0_overflow_count+0x3>
    594c:	01 96       	adiw	r24, 0x01	; 1
    594e:	a1 1d       	adc	r26, r1
    5950:	b1 1d       	adc	r27, r1
    5952:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <timer0_overflow_count>
    5956:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <timer0_overflow_count+0x1>
    595a:	a0 93 42 05 	sts	0x0542, r26	; 0x800542 <timer0_overflow_count+0x2>
    595e:	b0 93 43 05 	sts	0x0543, r27	; 0x800543 <timer0_overflow_count+0x3>
}
    5962:	bf 91       	pop	r27
    5964:	af 91       	pop	r26
    5966:	9f 91       	pop	r25
    5968:	8f 91       	pop	r24
    596a:	3f 91       	pop	r19
    596c:	2f 91       	pop	r18
    596e:	0f 90       	pop	r0
    5970:	0f be       	out	0x3f, r0	; 63
    5972:	0f 90       	pop	r0
    5974:	1f 90       	pop	r1
    5976:	18 95       	reti

00005978 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5978:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    597a:	f8 94       	cli
	m = timer0_millis;
    597c:	60 91 3c 05 	lds	r22, 0x053C	; 0x80053c <timer0_millis>
    5980:	70 91 3d 05 	lds	r23, 0x053D	; 0x80053d <timer0_millis+0x1>
    5984:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <timer0_millis+0x2>
    5988:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <timer0_millis+0x3>
	SREG = oldSREG;
    598c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    598e:	08 95       	ret

00005990 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5990:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5992:	f8 94       	cli
	m = timer0_overflow_count;
    5994:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <timer0_overflow_count>
    5998:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <timer0_overflow_count+0x1>
    599c:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <timer0_overflow_count+0x2>
    59a0:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    59a4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    59a6:	a8 9b       	sbis	0x15, 0	; 21
    59a8:	05 c0       	rjmp	.+10     	; 0x59b4 <micros+0x24>
    59aa:	2f 3f       	cpi	r18, 0xFF	; 255
    59ac:	19 f0       	breq	.+6      	; 0x59b4 <micros+0x24>
		m++;
    59ae:	01 96       	adiw	r24, 0x01	; 1
    59b0:	a1 1d       	adc	r26, r1
    59b2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    59b4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    59b6:	ba 2f       	mov	r27, r26
    59b8:	a9 2f       	mov	r26, r25
    59ba:	98 2f       	mov	r25, r24
    59bc:	88 27       	eor	r24, r24
    59be:	82 0f       	add	r24, r18
    59c0:	91 1d       	adc	r25, r1
    59c2:	a1 1d       	adc	r26, r1
    59c4:	b1 1d       	adc	r27, r1
    59c6:	bc 01       	movw	r22, r24
    59c8:	cd 01       	movw	r24, r26
    59ca:	42 e0       	ldi	r20, 0x02	; 2
    59cc:	66 0f       	add	r22, r22
    59ce:	77 1f       	adc	r23, r23
    59d0:	88 1f       	adc	r24, r24
    59d2:	99 1f       	adc	r25, r25
    59d4:	4a 95       	dec	r20
    59d6:	d1 f7       	brne	.-12     	; 0x59cc <micros+0x3c>
}
    59d8:	08 95       	ret

000059da <delay>:

void delay(unsigned long ms)
{
    59da:	8f 92       	push	r8
    59dc:	9f 92       	push	r9
    59de:	af 92       	push	r10
    59e0:	bf 92       	push	r11
    59e2:	cf 92       	push	r12
    59e4:	df 92       	push	r13
    59e6:	ef 92       	push	r14
    59e8:	ff 92       	push	r15
    59ea:	6b 01       	movw	r12, r22
    59ec:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    59ee:	d0 df       	rcall	.-96     	; 0x5990 <micros>
    59f0:	4b 01       	movw	r8, r22
    59f2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    59f4:	c1 14       	cp	r12, r1
    59f6:	d1 04       	cpc	r13, r1
    59f8:	e1 04       	cpc	r14, r1
    59fa:	f1 04       	cpc	r15, r1
		yield();
    59fc:	f1 f0       	breq	.+60     	; 0x5a3a <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    59fe:	6d d3       	rcall	.+1754   	; 0x60da <yield>
    5a00:	c7 df       	rcall	.-114    	; 0x5990 <micros>
    5a02:	dc 01       	movw	r26, r24
    5a04:	cb 01       	movw	r24, r22
    5a06:	88 19       	sub	r24, r8
    5a08:	99 09       	sbc	r25, r9
    5a0a:	aa 09       	sbc	r26, r10
    5a0c:	bb 09       	sbc	r27, r11
    5a0e:	88 3e       	cpi	r24, 0xE8	; 232
    5a10:	93 40       	sbci	r25, 0x03	; 3
    5a12:	a1 05       	cpc	r26, r1
    5a14:	b1 05       	cpc	r27, r1
    5a16:	70 f3       	brcs	.-36     	; 0x59f4 <delay+0x1a>
			ms--;
    5a18:	21 e0       	ldi	r18, 0x01	; 1
    5a1a:	c2 1a       	sub	r12, r18
    5a1c:	d1 08       	sbc	r13, r1
    5a1e:	e1 08       	sbc	r14, r1
    5a20:	f1 08       	sbc	r15, r1
			start += 1000;
    5a22:	88 ee       	ldi	r24, 0xE8	; 232
    5a24:	88 0e       	add	r8, r24
    5a26:	83 e0       	ldi	r24, 0x03	; 3
    5a28:	98 1e       	adc	r9, r24
    5a2a:	a1 1c       	adc	r10, r1
    5a2c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5a2e:	c1 14       	cp	r12, r1
    5a30:	d1 04       	cpc	r13, r1
    5a32:	e1 04       	cpc	r14, r1
    5a34:	f1 04       	cpc	r15, r1
    5a36:	21 f7       	brne	.-56     	; 0x5a00 <delay+0x26>
    5a38:	dd cf       	rjmp	.-70     	; 0x59f4 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5a3a:	ff 90       	pop	r15
    5a3c:	ef 90       	pop	r14
    5a3e:	df 90       	pop	r13
    5a40:	cf 90       	pop	r12
    5a42:	bf 90       	pop	r11
    5a44:	af 90       	pop	r10
    5a46:	9f 90       	pop	r9
    5a48:	8f 90       	pop	r8
    5a4a:	08 95       	ret

00005a4c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5a4c:	82 30       	cpi	r24, 0x02	; 2
    5a4e:	91 05       	cpc	r25, r1
    5a50:	38 f0       	brcs	.+14     	; 0x5a60 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5a52:	88 0f       	add	r24, r24
    5a54:	99 1f       	adc	r25, r25
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5a5a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5a5c:	01 97       	sbiw	r24, 0x01	; 1
    5a5e:	f1 f7       	brne	.-4      	; 0x5a5c <delayMicroseconds+0x10>
    5a60:	08 95       	ret

00005a62 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5a62:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5a64:	84 b5       	in	r24, 0x24	; 36
    5a66:	82 60       	ori	r24, 0x02	; 2
    5a68:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5a6a:	84 b5       	in	r24, 0x24	; 36
    5a6c:	81 60       	ori	r24, 0x01	; 1
    5a6e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5a70:	85 b5       	in	r24, 0x25	; 37
    5a72:	82 60       	ori	r24, 0x02	; 2
    5a74:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5a76:	85 b5       	in	r24, 0x25	; 37
    5a78:	81 60       	ori	r24, 0x01	; 1
    5a7a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5a7c:	ee e6       	ldi	r30, 0x6E	; 110
    5a7e:	f0 e0       	ldi	r31, 0x00	; 0
    5a80:	80 81       	ld	r24, Z
    5a82:	81 60       	ori	r24, 0x01	; 1
    5a84:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5a86:	e1 e8       	ldi	r30, 0x81	; 129
    5a88:	f0 e0       	ldi	r31, 0x00	; 0
    5a8a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5a8c:	80 81       	ld	r24, Z
    5a8e:	82 60       	ori	r24, 0x02	; 2
    5a90:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5a92:	80 81       	ld	r24, Z
    5a94:	81 60       	ori	r24, 0x01	; 1
    5a96:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5a98:	e0 e8       	ldi	r30, 0x80	; 128
    5a9a:	f0 e0       	ldi	r31, 0x00	; 0
    5a9c:	80 81       	ld	r24, Z
    5a9e:	81 60       	ori	r24, 0x01	; 1
    5aa0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5aa2:	e1 eb       	ldi	r30, 0xB1	; 177
    5aa4:	f0 e0       	ldi	r31, 0x00	; 0
    5aa6:	80 81       	ld	r24, Z
    5aa8:	84 60       	ori	r24, 0x04	; 4
    5aaa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5aac:	e0 eb       	ldi	r30, 0xB0	; 176
    5aae:	f0 e0       	ldi	r31, 0x00	; 0
    5ab0:	80 81       	ld	r24, Z
    5ab2:	81 60       	ori	r24, 0x01	; 1
    5ab4:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5ab6:	e1 e9       	ldi	r30, 0x91	; 145
    5ab8:	f0 e0       	ldi	r31, 0x00	; 0
    5aba:	80 81       	ld	r24, Z
    5abc:	82 60       	ori	r24, 0x02	; 2
    5abe:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    5ac0:	80 81       	ld	r24, Z
    5ac2:	81 60       	ori	r24, 0x01	; 1
    5ac4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5ac6:	e0 e9       	ldi	r30, 0x90	; 144
    5ac8:	f0 e0       	ldi	r31, 0x00	; 0
    5aca:	80 81       	ld	r24, Z
    5acc:	81 60       	ori	r24, 0x01	; 1
    5ace:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    5ad0:	e1 ea       	ldi	r30, 0xA1	; 161
    5ad2:	f0 e0       	ldi	r31, 0x00	; 0
    5ad4:	80 81       	ld	r24, Z
    5ad6:	82 60       	ori	r24, 0x02	; 2
    5ad8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5ada:	80 81       	ld	r24, Z
    5adc:	81 60       	ori	r24, 0x01	; 1
    5ade:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    5ae0:	e0 ea       	ldi	r30, 0xA0	; 160
    5ae2:	f0 e0       	ldi	r31, 0x00	; 0
    5ae4:	80 81       	ld	r24, Z
    5ae6:	81 60       	ori	r24, 0x01	; 1
    5ae8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5aea:	e1 e2       	ldi	r30, 0x21	; 33
    5aec:	f1 e0       	ldi	r31, 0x01	; 1
    5aee:	80 81       	ld	r24, Z
    5af0:	82 60       	ori	r24, 0x02	; 2
    5af2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    5af4:	80 81       	ld	r24, Z
    5af6:	81 60       	ori	r24, 0x01	; 1
    5af8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5afa:	e0 e2       	ldi	r30, 0x20	; 32
    5afc:	f1 e0       	ldi	r31, 0x01	; 1
    5afe:	80 81       	ld	r24, Z
    5b00:	81 60       	ori	r24, 0x01	; 1
    5b02:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5b04:	ea e7       	ldi	r30, 0x7A	; 122
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	80 81       	ld	r24, Z
    5b0a:	84 60       	ori	r24, 0x04	; 4
    5b0c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5b0e:	80 81       	ld	r24, Z
    5b10:	82 60       	ori	r24, 0x02	; 2
    5b12:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5b14:	80 81       	ld	r24, Z
    5b16:	81 60       	ori	r24, 0x01	; 1
    5b18:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5b1a:	80 81       	ld	r24, Z
    5b1c:	80 68       	ori	r24, 0x80	; 128
    5b1e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5b20:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    5b24:	08 95       	ret

00005b26 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	fc 01       	movw	r30, r24
    5b2a:	31 97       	sbiw	r30, 0x01	; 1
    5b2c:	e2 31       	cpi	r30, 0x12	; 18
    5b2e:	f1 05       	cpc	r31, r1
    5b30:	08 f0       	brcs	.+2      	; 0x5b34 <turnOffPWM+0xe>
    5b32:	4d c0       	rjmp	.+154    	; 0x5bce <turnOffPWM+0xa8>
    5b34:	88 27       	eor	r24, r24
    5b36:	ee 58       	subi	r30, 0x8E	; 142
    5b38:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    5b3c:	1c c3       	rjmp	.+1592   	; 0x6176 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5b3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5b42:	8f 77       	andi	r24, 0x7F	; 127
    5b44:	03 c0       	rjmp	.+6      	; 0x5b4c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5b46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5b4a:	8f 7d       	andi	r24, 0xDF	; 223
    5b4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5b50:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    5b52:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5b56:	87 7f       	andi	r24, 0xF7	; 247
    5b58:	f9 cf       	rjmp	.-14     	; 0x5b4c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5b5a:	84 b5       	in	r24, 0x24	; 36
    5b5c:	8f 77       	andi	r24, 0x7F	; 127
    5b5e:	02 c0       	rjmp	.+4      	; 0x5b64 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5b60:	84 b5       	in	r24, 0x24	; 36
    5b62:	8f 7d       	andi	r24, 0xDF	; 223
    5b64:	84 bd       	out	0x24, r24	; 36
    5b66:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5b68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5b6c:	8f 77       	andi	r24, 0x7F	; 127
    5b6e:	03 c0       	rjmp	.+6      	; 0x5b76 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5b70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5b74:	8f 7d       	andi	r24, 0xDF	; 223
    5b76:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5b7a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5b7c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b80:	8f 77       	andi	r24, 0x7F	; 127
    5b82:	07 c0       	rjmp	.+14     	; 0x5b92 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    5b84:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b88:	8f 7d       	andi	r24, 0xDF	; 223
    5b8a:	03 c0       	rjmp	.+6      	; 0x5b92 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5b8c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b90:	87 7f       	andi	r24, 0xF7	; 247
    5b92:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b96:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5b98:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b9c:	8f 77       	andi	r24, 0x7F	; 127
    5b9e:	07 c0       	rjmp	.+14     	; 0x5bae <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5ba0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5ba4:	8f 7d       	andi	r24, 0xDF	; 223
    5ba6:	03 c0       	rjmp	.+6      	; 0x5bae <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5ba8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5bac:	87 7f       	andi	r24, 0xF7	; 247
    5bae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5bb2:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5bb4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5bb8:	8f 77       	andi	r24, 0x7F	; 127
    5bba:	07 c0       	rjmp	.+14     	; 0x5bca <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5bbc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5bc0:	8f 7d       	andi	r24, 0xDF	; 223
    5bc2:	03 c0       	rjmp	.+6      	; 0x5bca <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    5bc4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5bc8:	87 7f       	andi	r24, 0xF7	; 247
    5bca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5bce:	08 95       	ret

00005bd0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5bd0:	cf 93       	push	r28
    5bd2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	fc 01       	movw	r30, r24
    5bd8:	e2 5b       	subi	r30, 0xB2	; 178
    5bda:	fe 4f       	sbci	r31, 0xFE	; 254
    5bdc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5bde:	fc 01       	movw	r30, r24
    5be0:	ec 56       	subi	r30, 0x6C	; 108
    5be2:	fe 4f       	sbci	r31, 0xFE	; 254
    5be4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5be6:	88 23       	and	r24, r24
    5be8:	61 f1       	breq	.+88     	; 0x5c42 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	88 0f       	add	r24, r24
    5bee:	99 1f       	adc	r25, r25
    5bf0:	fc 01       	movw	r30, r24
    5bf2:	e2 5f       	subi	r30, 0xF2	; 242
    5bf4:	fd 4f       	sbci	r31, 0xFD	; 253
    5bf6:	c5 91       	lpm	r28, Z+
    5bf8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5bfa:	fc 01       	movw	r30, r24
    5bfc:	ec 50       	subi	r30, 0x0C	; 12
    5bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    5c00:	a5 91       	lpm	r26, Z+
    5c02:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5c04:	61 11       	cpse	r22, r1
    5c06:	09 c0       	rjmp	.+18     	; 0x5c1a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5c08:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c0a:	f8 94       	cli
		*reg &= ~bit;
    5c0c:	88 81       	ld	r24, Y
    5c0e:	20 95       	com	r18
    5c10:	82 23       	and	r24, r18
    5c12:	88 83       	st	Y, r24
		*out &= ~bit;
    5c14:	ec 91       	ld	r30, X
    5c16:	2e 23       	and	r18, r30
    5c18:	0b c0       	rjmp	.+22     	; 0x5c30 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5c1a:	62 30       	cpi	r22, 0x02	; 2
    5c1c:	61 f4       	brne	.+24     	; 0x5c36 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5c1e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c20:	f8 94       	cli
		*reg &= ~bit;
    5c22:	88 81       	ld	r24, Y
    5c24:	32 2f       	mov	r19, r18
    5c26:	30 95       	com	r19
    5c28:	83 23       	and	r24, r19
    5c2a:	88 83       	st	Y, r24
		*out |= bit;
    5c2c:	ec 91       	ld	r30, X
    5c2e:	2e 2b       	or	r18, r30
    5c30:	2c 93       	st	X, r18
		SREG = oldSREG;
    5c32:	9f bf       	out	0x3f, r25	; 63
    5c34:	06 c0       	rjmp	.+12     	; 0x5c42 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5c36:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5c38:	f8 94       	cli
		*reg |= bit;
    5c3a:	e8 81       	ld	r30, Y
    5c3c:	2e 2b       	or	r18, r30
    5c3e:	28 83       	st	Y, r18
		SREG = oldSREG;
    5c40:	8f bf       	out	0x3f, r24	; 63
	}
}
    5c42:	df 91       	pop	r29
    5c44:	cf 91       	pop	r28
    5c46:	08 95       	ret

00005c48 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5c48:	1f 93       	push	r17
    5c4a:	cf 93       	push	r28
    5c4c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5c4e:	28 2f       	mov	r18, r24
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	f9 01       	movw	r30, r18
    5c54:	e8 5f       	subi	r30, 0xF8	; 248
    5c56:	fe 4f       	sbci	r31, 0xFE	; 254
    5c58:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5c5a:	f9 01       	movw	r30, r18
    5c5c:	e2 5b       	subi	r30, 0xB2	; 178
    5c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c60:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5c62:	f9 01       	movw	r30, r18
    5c64:	ec 56       	subi	r30, 0x6C	; 108
    5c66:	fe 4f       	sbci	r31, 0xFE	; 254
    5c68:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5c6a:	cc 23       	and	r28, r28
    5c6c:	b9 f0       	breq	.+46     	; 0x5c9c <digitalWrite+0x54>
    5c6e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5c70:	81 11       	cpse	r24, r1
    5c72:	59 df       	rcall	.-334    	; 0x5b26 <turnOffPWM>

	out = portOutputRegister(port);
    5c74:	ec 2f       	mov	r30, r28
    5c76:	f0 e0       	ldi	r31, 0x00	; 0
    5c78:	ee 0f       	add	r30, r30
    5c7a:	ff 1f       	adc	r31, r31
    5c7c:	ec 50       	subi	r30, 0x0C	; 12
    5c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c80:	a5 91       	lpm	r26, Z+
    5c82:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5c84:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5c86:	f8 94       	cli

	if (val == LOW) {
    5c88:	11 11       	cpse	r17, r1
    5c8a:	04 c0       	rjmp	.+8      	; 0x5c94 <digitalWrite+0x4c>
		*out &= ~bit;
    5c8c:	8c 91       	ld	r24, X
    5c8e:	d0 95       	com	r29
    5c90:	d8 23       	and	r29, r24
    5c92:	02 c0       	rjmp	.+4      	; 0x5c98 <digitalWrite+0x50>
	} else {
		*out |= bit;
    5c94:	ec 91       	ld	r30, X
    5c96:	de 2b       	or	r29, r30
    5c98:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5c9a:	9f bf       	out	0x3f, r25	; 63
}
    5c9c:	df 91       	pop	r29
    5c9e:	cf 91       	pop	r28
    5ca0:	1f 91       	pop	r17
    5ca2:	08 95       	ret

00005ca4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5ca4:	cf 93       	push	r28
    5ca6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5ca8:	28 2f       	mov	r18, r24
    5caa:	30 e0       	ldi	r19, 0x00	; 0
    5cac:	f9 01       	movw	r30, r18
    5cae:	e8 5f       	subi	r30, 0xF8	; 248
    5cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    5cb2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5cb4:	f9 01       	movw	r30, r18
    5cb6:	e2 5b       	subi	r30, 0xB2	; 178
    5cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    5cba:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5cbc:	f9 01       	movw	r30, r18
    5cbe:	ec 56       	subi	r30, 0x6C	; 108
    5cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    5cc2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    5cc4:	cc 23       	and	r28, r28
    5cc6:	89 f0       	breq	.+34     	; 0x5cea <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5cc8:	81 11       	cpse	r24, r1
    5cca:	2d df       	rcall	.-422    	; 0x5b26 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5ccc:	ec 2f       	mov	r30, r28
    5cce:	f0 e0       	ldi	r31, 0x00	; 0
    5cd0:	ee 0f       	add	r30, r30
    5cd2:	ff 1f       	adc	r31, r31
    5cd4:	e6 52       	subi	r30, 0x26	; 38
    5cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5cd8:	a5 91       	lpm	r26, Z+
    5cda:	b4 91       	lpm	r27, Z
    5cdc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5cde:	ed 23       	and	r30, r29
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	21 f4       	brne	.+8      	; 0x5cee <digitalRead+0x4a>
    5ce6:	80 e0       	ldi	r24, 0x00	; 0
    5ce8:	02 c0       	rjmp	.+4      	; 0x5cee <digitalRead+0x4a>
    5cea:	80 e0       	ldi	r24, 0x00	; 0
    5cec:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	08 95       	ret

00005cf4 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5cf4:	4f 92       	push	r4
    5cf6:	5f 92       	push	r5
    5cf8:	6f 92       	push	r6
    5cfa:	7f 92       	push	r7
    5cfc:	af 92       	push	r10
    5cfe:	bf 92       	push	r11
    5d00:	cf 92       	push	r12
    5d02:	df 92       	push	r13
    5d04:	ef 92       	push	r14
    5d06:	ff 92       	push	r15
    5d08:	0f 93       	push	r16
    5d0a:	1f 93       	push	r17
    5d0c:	cf 93       	push	r28
    5d0e:	df 93       	push	r29
    5d10:	cd b7       	in	r28, 0x3d	; 61
    5d12:	de b7       	in	r29, 0x3e	; 62
    5d14:	29 01       	movw	r4, r18
    5d16:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5d18:	9b 01       	movw	r18, r22
    5d1a:	ac 01       	movw	r20, r24
    5d1c:	24 19       	sub	r18, r4
    5d1e:	35 09       	sbc	r19, r5
    5d20:	46 09       	sbc	r20, r6
    5d22:	57 09       	sbc	r21, r7
    5d24:	8a 89       	ldd	r24, Y+18	; 0x12
    5d26:	9b 89       	ldd	r25, Y+19	; 0x13
    5d28:	ac 89       	ldd	r26, Y+20	; 0x14
    5d2a:	bd 89       	ldd	r27, Y+21	; 0x15
    5d2c:	bc 01       	movw	r22, r24
    5d2e:	cd 01       	movw	r24, r26
    5d30:	6a 19       	sub	r22, r10
    5d32:	7b 09       	sbc	r23, r11
    5d34:	8c 09       	sbc	r24, r12
    5d36:	9d 09       	sbc	r25, r13
    5d38:	d1 d1       	rcall	.+930    	; 0x60dc <__mulsi3>
    5d3a:	a8 01       	movw	r20, r16
    5d3c:	97 01       	movw	r18, r14
    5d3e:	24 19       	sub	r18, r4
    5d40:	35 09       	sbc	r19, r5
    5d42:	46 09       	sbc	r20, r6
    5d44:	57 09       	sbc	r21, r7
    5d46:	fb d1       	rcall	.+1014   	; 0x613e <__divmodsi4>
    5d48:	ca 01       	movw	r24, r20
    5d4a:	b9 01       	movw	r22, r18
    5d4c:	6a 0d       	add	r22, r10
    5d4e:	7b 1d       	adc	r23, r11
    5d50:	8c 1d       	adc	r24, r12
    5d52:	9d 1d       	adc	r25, r13
}
    5d54:	df 91       	pop	r29
    5d56:	cf 91       	pop	r28
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	ff 90       	pop	r15
    5d5e:	ef 90       	pop	r14
    5d60:	df 90       	pop	r13
    5d62:	cf 90       	pop	r12
    5d64:	bf 90       	pop	r11
    5d66:	af 90       	pop	r10
    5d68:	7f 90       	pop	r7
    5d6a:	6f 90       	pop	r6
    5d6c:	5f 90       	pop	r5
    5d6e:	4f 90       	pop	r4
    5d70:	08 95       	ret

00005d72 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    5d72:	fc 01       	movw	r30, r24
    5d74:	80 81       	ld	r24, Z
    5d76:	91 81       	ldd	r25, Z+1	; 0x01
    5d78:	00 97       	sbiw	r24, 0x00	; 0
    5d7a:	09 f0       	breq	.+2      	; 0x5d7e <_ZN6StringD1Ev+0xc>
    5d7c:	b5 c2       	rjmp	.+1386   	; 0x62e8 <free>
    5d7e:	08 95       	ret

00005d80 <_ZN6String10invalidateEv>:
    5d80:	cf 93       	push	r28
    5d82:	df 93       	push	r29
    5d84:	ec 01       	movw	r28, r24
    5d86:	88 81       	ld	r24, Y
    5d88:	99 81       	ldd	r25, Y+1	; 0x01
    5d8a:	00 97       	sbiw	r24, 0x00	; 0
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <_ZN6String10invalidateEv+0x10>
    5d8e:	ac d2       	rcall	.+1368   	; 0x62e8 <free>
    5d90:	19 82       	std	Y+1, r1	; 0x01
    5d92:	18 82       	st	Y, r1
    5d94:	1d 82       	std	Y+5, r1	; 0x05
    5d96:	1c 82       	std	Y+4, r1	; 0x04
    5d98:	1b 82       	std	Y+3, r1	; 0x03
    5d9a:	1a 82       	std	Y+2, r1	; 0x02
    5d9c:	df 91       	pop	r29
    5d9e:	cf 91       	pop	r28
    5da0:	08 95       	ret

00005da2 <_ZN6String12changeBufferEj>:
    5da2:	0f 93       	push	r16
    5da4:	1f 93       	push	r17
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	ec 01       	movw	r28, r24
    5dac:	8b 01       	movw	r16, r22
    5dae:	6f 5f       	subi	r22, 0xFF	; 255
    5db0:	7f 4f       	sbci	r23, 0xFF	; 255
    5db2:	88 81       	ld	r24, Y
    5db4:	99 81       	ldd	r25, Y+1	; 0x01
    5db6:	21 d3       	rcall	.+1602   	; 0x63fa <realloc>
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	31 f0       	breq	.+12     	; 0x5dc8 <_ZN6String12changeBufferEj+0x26>
    5dbc:	99 83       	std	Y+1, r25	; 0x01
    5dbe:	88 83       	st	Y, r24
    5dc0:	1b 83       	std	Y+3, r17	; 0x03
    5dc2:	0a 83       	std	Y+2, r16	; 0x02
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	01 c0       	rjmp	.+2      	; 0x5dca <_ZN6String12changeBufferEj+0x28>
    5dc8:	80 e0       	ldi	r24, 0x00	; 0
    5dca:	df 91       	pop	r29
    5dcc:	cf 91       	pop	r28
    5dce:	1f 91       	pop	r17
    5dd0:	0f 91       	pop	r16
    5dd2:	08 95       	ret

00005dd4 <_ZN6String7reserveEj>:
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	ec 01       	movw	r28, r24
    5dda:	88 81       	ld	r24, Y
    5ddc:	99 81       	ldd	r25, Y+1	; 0x01
    5dde:	89 2b       	or	r24, r25
    5de0:	29 f0       	breq	.+10     	; 0x5dec <_ZN6String7reserveEj+0x18>
    5de2:	8a 81       	ldd	r24, Y+2	; 0x02
    5de4:	9b 81       	ldd	r25, Y+3	; 0x03
    5de6:	86 17       	cp	r24, r22
    5de8:	97 07       	cpc	r25, r23
    5dea:	58 f4       	brcc	.+22     	; 0x5e02 <_ZN6String7reserveEj+0x2e>
    5dec:	ce 01       	movw	r24, r28
    5dee:	d9 df       	rcall	.-78     	; 0x5da2 <_ZN6String12changeBufferEj>
    5df0:	88 23       	and	r24, r24
    5df2:	41 f0       	breq	.+16     	; 0x5e04 <_ZN6String7reserveEj+0x30>
    5df4:	8c 81       	ldd	r24, Y+4	; 0x04
    5df6:	9d 81       	ldd	r25, Y+5	; 0x05
    5df8:	89 2b       	or	r24, r25
    5dfa:	19 f4       	brne	.+6      	; 0x5e02 <_ZN6String7reserveEj+0x2e>
    5dfc:	e8 81       	ld	r30, Y
    5dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    5e00:	10 82       	st	Z, r1
    5e02:	81 e0       	ldi	r24, 0x01	; 1
    5e04:	df 91       	pop	r29
    5e06:	cf 91       	pop	r28
    5e08:	08 95       	ret

00005e0a <_ZN6String4copyEPKcj>:
    5e0a:	ef 92       	push	r14
    5e0c:	ff 92       	push	r15
    5e0e:	0f 93       	push	r16
    5e10:	1f 93       	push	r17
    5e12:	cf 93       	push	r28
    5e14:	df 93       	push	r29
    5e16:	ec 01       	movw	r28, r24
    5e18:	7b 01       	movw	r14, r22
    5e1a:	8a 01       	movw	r16, r20
    5e1c:	ba 01       	movw	r22, r20
    5e1e:	da df       	rcall	.-76     	; 0x5dd4 <_ZN6String7reserveEj>
    5e20:	81 11       	cpse	r24, r1
    5e22:	03 c0       	rjmp	.+6      	; 0x5e2a <_ZN6String4copyEPKcj+0x20>
    5e24:	ce 01       	movw	r24, r28
    5e26:	ac df       	rcall	.-168    	; 0x5d80 <_ZN6String10invalidateEv>
    5e28:	06 c0       	rjmp	.+12     	; 0x5e36 <_ZN6String4copyEPKcj+0x2c>
    5e2a:	1d 83       	std	Y+5, r17	; 0x05
    5e2c:	0c 83       	std	Y+4, r16	; 0x04
    5e2e:	b7 01       	movw	r22, r14
    5e30:	88 81       	ld	r24, Y
    5e32:	99 81       	ldd	r25, Y+1	; 0x01
    5e34:	e7 d3       	rcall	.+1998   	; 0x6604 <strcpy>
    5e36:	ce 01       	movw	r24, r28
    5e38:	df 91       	pop	r29
    5e3a:	cf 91       	pop	r28
    5e3c:	1f 91       	pop	r17
    5e3e:	0f 91       	pop	r16
    5e40:	ff 90       	pop	r15
    5e42:	ef 90       	pop	r14
    5e44:	08 95       	ret

00005e46 <_ZN6StringC1EPKc>:
    5e46:	fc 01       	movw	r30, r24
    5e48:	11 82       	std	Z+1, r1	; 0x01
    5e4a:	10 82       	st	Z, r1
    5e4c:	13 82       	std	Z+3, r1	; 0x03
    5e4e:	12 82       	std	Z+2, r1	; 0x02
    5e50:	15 82       	std	Z+5, r1	; 0x05
    5e52:	14 82       	std	Z+4, r1	; 0x04
    5e54:	61 15       	cp	r22, r1
    5e56:	71 05       	cpc	r23, r1
    5e58:	49 f0       	breq	.+18     	; 0x5e6c <_ZN6StringC1EPKc+0x26>
    5e5a:	fb 01       	movw	r30, r22
    5e5c:	01 90       	ld	r0, Z+
    5e5e:	00 20       	and	r0, r0
    5e60:	e9 f7       	brne	.-6      	; 0x5e5c <_ZN6StringC1EPKc+0x16>
    5e62:	31 97       	sbiw	r30, 0x01	; 1
    5e64:	af 01       	movw	r20, r30
    5e66:	46 1b       	sub	r20, r22
    5e68:	57 0b       	sbc	r21, r23
    5e6a:	cf cf       	rjmp	.-98     	; 0x5e0a <_ZN6String4copyEPKcj>
    5e6c:	08 95       	ret

00005e6e <_ZN6StringaSEPKc>:
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	ec 01       	movw	r28, r24
    5e74:	61 15       	cp	r22, r1
    5e76:	71 05       	cpc	r23, r1
    5e78:	51 f0       	breq	.+20     	; 0x5e8e <_ZN6StringaSEPKc+0x20>
    5e7a:	fb 01       	movw	r30, r22
    5e7c:	01 90       	ld	r0, Z+
    5e7e:	00 20       	and	r0, r0
    5e80:	e9 f7       	brne	.-6      	; 0x5e7c <_ZN6StringaSEPKc+0xe>
    5e82:	31 97       	sbiw	r30, 0x01	; 1
    5e84:	af 01       	movw	r20, r30
    5e86:	46 1b       	sub	r20, r22
    5e88:	57 0b       	sbc	r21, r23
    5e8a:	bf df       	rcall	.-130    	; 0x5e0a <_ZN6String4copyEPKcj>
    5e8c:	01 c0       	rjmp	.+2      	; 0x5e90 <_ZN6StringaSEPKc+0x22>
    5e8e:	78 df       	rcall	.-272    	; 0x5d80 <_ZN6String10invalidateEv>
    5e90:	ce 01       	movw	r24, r28
    5e92:	df 91       	pop	r29
    5e94:	cf 91       	pop	r28
    5e96:	08 95       	ret

00005e98 <_ZN6StringC1Ehh>:
    5e98:	0f 93       	push	r16
    5e9a:	1f 93       	push	r17
    5e9c:	cf 93       	push	r28
    5e9e:	df 93       	push	r29
    5ea0:	cd b7       	in	r28, 0x3d	; 61
    5ea2:	de b7       	in	r29, 0x3e	; 62
    5ea4:	29 97       	sbiw	r28, 0x09	; 9
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	f8 94       	cli
    5eaa:	de bf       	out	0x3e, r29	; 62
    5eac:	0f be       	out	0x3f, r0	; 63
    5eae:	cd bf       	out	0x3d, r28	; 61
    5eb0:	8c 01       	movw	r16, r24
    5eb2:	86 2f       	mov	r24, r22
    5eb4:	f8 01       	movw	r30, r16
    5eb6:	11 82       	std	Z+1, r1	; 0x01
    5eb8:	10 82       	st	Z, r1
    5eba:	13 82       	std	Z+3, r1	; 0x03
    5ebc:	12 82       	std	Z+2, r1	; 0x02
    5ebe:	15 82       	std	Z+5, r1	; 0x05
    5ec0:	14 82       	std	Z+4, r1	; 0x04
    5ec2:	50 e0       	ldi	r21, 0x00	; 0
    5ec4:	be 01       	movw	r22, r28
    5ec6:	6f 5f       	subi	r22, 0xFF	; 255
    5ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	ba d3       	rcall	.+1908   	; 0x6642 <utoa>
    5ece:	be 01       	movw	r22, r28
    5ed0:	6f 5f       	subi	r22, 0xFF	; 255
    5ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed4:	c8 01       	movw	r24, r16
    5ed6:	cb df       	rcall	.-106    	; 0x5e6e <_ZN6StringaSEPKc>
    5ed8:	29 96       	adiw	r28, 0x09	; 9
    5eda:	0f b6       	in	r0, 0x3f	; 63
    5edc:	f8 94       	cli
    5ede:	de bf       	out	0x3e, r29	; 62
    5ee0:	0f be       	out	0x3f, r0	; 63
    5ee2:	cd bf       	out	0x3d, r28	; 61
    5ee4:	df 91       	pop	r29
    5ee6:	cf 91       	pop	r28
    5ee8:	1f 91       	pop	r17
    5eea:	0f 91       	pop	r16
    5eec:	08 95       	ret

00005eee <_ZN6String6concatEPKcj>:
    5eee:	ef 92       	push	r14
    5ef0:	ff 92       	push	r15
    5ef2:	0f 93       	push	r16
    5ef4:	1f 93       	push	r17
    5ef6:	cf 93       	push	r28
    5ef8:	df 93       	push	r29
    5efa:	61 15       	cp	r22, r1
    5efc:	71 05       	cpc	r23, r1
    5efe:	11 f4       	brne	.+4      	; 0x5f04 <_ZN6String6concatEPKcj+0x16>
    5f00:	80 e0       	ldi	r24, 0x00	; 0
    5f02:	1a c0       	rjmp	.+52     	; 0x5f38 <_ZN6String6concatEPKcj+0x4a>
    5f04:	41 15       	cp	r20, r1
    5f06:	51 05       	cpc	r21, r1
    5f08:	b1 f0       	breq	.+44     	; 0x5f36 <_ZN6String6concatEPKcj+0x48>
    5f0a:	7b 01       	movw	r14, r22
    5f0c:	ec 01       	movw	r28, r24
    5f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f10:	9d 81       	ldd	r25, Y+5	; 0x05
    5f12:	8a 01       	movw	r16, r20
    5f14:	08 0f       	add	r16, r24
    5f16:	19 1f       	adc	r17, r25
    5f18:	b8 01       	movw	r22, r16
    5f1a:	ce 01       	movw	r24, r28
    5f1c:	5b df       	rcall	.-330    	; 0x5dd4 <_ZN6String7reserveEj>
    5f1e:	88 23       	and	r24, r24
    5f20:	79 f3       	breq	.-34     	; 0x5f00 <_ZN6String6concatEPKcj+0x12>
    5f22:	28 81       	ld	r18, Y
    5f24:	39 81       	ldd	r19, Y+1	; 0x01
    5f26:	8c 81       	ldd	r24, Y+4	; 0x04
    5f28:	9d 81       	ldd	r25, Y+5	; 0x05
    5f2a:	b7 01       	movw	r22, r14
    5f2c:	82 0f       	add	r24, r18
    5f2e:	93 1f       	adc	r25, r19
    5f30:	69 d3       	rcall	.+1746   	; 0x6604 <strcpy>
    5f32:	1d 83       	std	Y+5, r17	; 0x05
    5f34:	0c 83       	std	Y+4, r16	; 0x04
    5f36:	81 e0       	ldi	r24, 0x01	; 1
    5f38:	df 91       	pop	r29
    5f3a:	cf 91       	pop	r28
    5f3c:	1f 91       	pop	r17
    5f3e:	0f 91       	pop	r16
    5f40:	ff 90       	pop	r15
    5f42:	ef 90       	pop	r14
    5f44:	08 95       	ret

00005f46 <_ZN6String6concatERKS_>:
    5f46:	fb 01       	movw	r30, r22
    5f48:	44 81       	ldd	r20, Z+4	; 0x04
    5f4a:	55 81       	ldd	r21, Z+5	; 0x05
    5f4c:	60 81       	ld	r22, Z
    5f4e:	71 81       	ldd	r23, Z+1	; 0x01
    5f50:	ce cf       	rjmp	.-100    	; 0x5eee <_ZN6String6concatEPKcj>

00005f52 <_ZN6String6concatEc>:
    5f52:	cf 93       	push	r28
    5f54:	df 93       	push	r29
    5f56:	1f 92       	push	r1
    5f58:	1f 92       	push	r1
    5f5a:	cd b7       	in	r28, 0x3d	; 61
    5f5c:	de b7       	in	r29, 0x3e	; 62
    5f5e:	69 83       	std	Y+1, r22	; 0x01
    5f60:	1a 82       	std	Y+2, r1	; 0x02
    5f62:	41 e0       	ldi	r20, 0x01	; 1
    5f64:	50 e0       	ldi	r21, 0x00	; 0
    5f66:	be 01       	movw	r22, r28
    5f68:	6f 5f       	subi	r22, 0xFF	; 255
    5f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f6c:	c0 df       	rcall	.-128    	; 0x5eee <_ZN6String6concatEPKcj>
    5f6e:	0f 90       	pop	r0
    5f70:	0f 90       	pop	r0
    5f72:	df 91       	pop	r29
    5f74:	cf 91       	pop	r28
    5f76:	08 95       	ret

00005f78 <_ZNK6String9compareToERKS_>:
    5f78:	cf 93       	push	r28
    5f7a:	df 93       	push	r29
    5f7c:	dc 01       	movw	r26, r24
    5f7e:	ed 91       	ld	r30, X+
    5f80:	fc 91       	ld	r31, X
    5f82:	eb 01       	movw	r28, r22
    5f84:	a8 81       	ld	r26, Y
    5f86:	b9 81       	ldd	r27, Y+1	; 0x01
    5f88:	30 97       	sbiw	r30, 0x00	; 0
    5f8a:	11 f0       	breq	.+4      	; 0x5f90 <_ZNK6String9compareToERKS_+0x18>
    5f8c:	10 97       	sbiw	r26, 0x00	; 0
    5f8e:	c9 f4       	brne	.+50     	; 0x5fc2 <_ZNK6String9compareToERKS_+0x4a>
    5f90:	10 97       	sbiw	r26, 0x00	; 0
    5f92:	59 f0       	breq	.+22     	; 0x5faa <_ZNK6String9compareToERKS_+0x32>
    5f94:	eb 01       	movw	r28, r22
    5f96:	2c 81       	ldd	r18, Y+4	; 0x04
    5f98:	3d 81       	ldd	r19, Y+5	; 0x05
    5f9a:	23 2b       	or	r18, r19
    5f9c:	31 f0       	breq	.+12     	; 0x5faa <_ZNK6String9compareToERKS_+0x32>
    5f9e:	8c 91       	ld	r24, X
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	91 95       	neg	r25
    5fa4:	81 95       	neg	r24
    5fa6:	91 09       	sbc	r25, r1
    5fa8:	13 c0       	rjmp	.+38     	; 0x5fd0 <_ZNK6String9compareToERKS_+0x58>
    5faa:	30 97       	sbiw	r30, 0x00	; 0
    5fac:	79 f0       	breq	.+30     	; 0x5fcc <_ZNK6String9compareToERKS_+0x54>
    5fae:	dc 01       	movw	r26, r24
    5fb0:	14 96       	adiw	r26, 0x04	; 4
    5fb2:	8d 91       	ld	r24, X+
    5fb4:	9c 91       	ld	r25, X
    5fb6:	15 97       	sbiw	r26, 0x05	; 5
    5fb8:	89 2b       	or	r24, r25
    5fba:	41 f0       	breq	.+16     	; 0x5fcc <_ZNK6String9compareToERKS_+0x54>
    5fbc:	80 81       	ld	r24, Z
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	07 c0       	rjmp	.+14     	; 0x5fd0 <_ZNK6String9compareToERKS_+0x58>
    5fc2:	bd 01       	movw	r22, r26
    5fc4:	cf 01       	movw	r24, r30
    5fc6:	df 91       	pop	r29
    5fc8:	cf 91       	pop	r28
    5fca:	13 c3       	rjmp	.+1574   	; 0x65f2 <strcmp>
    5fcc:	80 e0       	ldi	r24, 0x00	; 0
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	df 91       	pop	r29
    5fd2:	cf 91       	pop	r28
    5fd4:	08 95       	ret

00005fd6 <_ZNK6String6equalsERKS_>:
    5fd6:	fc 01       	movw	r30, r24
    5fd8:	44 81       	ldd	r20, Z+4	; 0x04
    5fda:	55 81       	ldd	r21, Z+5	; 0x05
    5fdc:	fb 01       	movw	r30, r22
    5fde:	24 81       	ldd	r18, Z+4	; 0x04
    5fe0:	35 81       	ldd	r19, Z+5	; 0x05
    5fe2:	42 17       	cp	r20, r18
    5fe4:	53 07       	cpc	r21, r19
    5fe6:	21 f4       	brne	.+8      	; 0x5ff0 <_ZNK6String6equalsERKS_+0x1a>
    5fe8:	c7 df       	rcall	.-114    	; 0x5f78 <_ZNK6String9compareToERKS_>
    5fea:	21 e0       	ldi	r18, 0x01	; 1
    5fec:	89 2b       	or	r24, r25
    5fee:	09 f0       	breq	.+2      	; 0x5ff2 <_ZNK6String6equalsERKS_+0x1c>
    5ff0:	20 e0       	ldi	r18, 0x00	; 0
    5ff2:	82 2f       	mov	r24, r18
    5ff4:	08 95       	ret

00005ff6 <_ZNK6String6equalsEPKc>:
    5ff6:	fc 01       	movw	r30, r24
    5ff8:	24 81       	ldd	r18, Z+4	; 0x04
    5ffa:	35 81       	ldd	r19, Z+5	; 0x05
    5ffc:	23 2b       	or	r18, r19
    5ffe:	31 f4       	brne	.+12     	; 0x600c <_ZNK6String6equalsEPKc+0x16>
    6000:	21 e0       	ldi	r18, 0x01	; 1
    6002:	61 15       	cp	r22, r1
    6004:	71 05       	cpc	r23, r1
    6006:	99 f0       	breq	.+38     	; 0x602e <_ZNK6String6equalsEPKc+0x38>
    6008:	fb 01       	movw	r30, r22
    600a:	08 c0       	rjmp	.+16     	; 0x601c <_ZNK6String6equalsEPKc+0x26>
    600c:	fc 01       	movw	r30, r24
    600e:	80 81       	ld	r24, Z
    6010:	91 81       	ldd	r25, Z+1	; 0x01
    6012:	61 15       	cp	r22, r1
    6014:	71 05       	cpc	r23, r1
    6016:	31 f4       	brne	.+12     	; 0x6024 <_ZNK6String6equalsEPKc+0x2e>
    6018:	21 e0       	ldi	r18, 0x01	; 1
    601a:	fc 01       	movw	r30, r24
    601c:	80 81       	ld	r24, Z
    601e:	88 23       	and	r24, r24
    6020:	31 f0       	breq	.+12     	; 0x602e <_ZNK6String6equalsEPKc+0x38>
    6022:	04 c0       	rjmp	.+8      	; 0x602c <_ZNK6String6equalsEPKc+0x36>
    6024:	e6 d2       	rcall	.+1484   	; 0x65f2 <strcmp>
    6026:	21 e0       	ldi	r18, 0x01	; 1
    6028:	89 2b       	or	r24, r25
    602a:	09 f0       	breq	.+2      	; 0x602e <_ZNK6String6equalsEPKc+0x38>
    602c:	20 e0       	ldi	r18, 0x00	; 0
    602e:	82 2f       	mov	r24, r18
    6030:	08 95       	ret

00006032 <_ZNK6String9substringEjj>:
    6032:	bf 92       	push	r11
    6034:	cf 92       	push	r12
    6036:	df 92       	push	r13
    6038:	ef 92       	push	r14
    603a:	ff 92       	push	r15
    603c:	0f 93       	push	r16
    603e:	1f 93       	push	r17
    6040:	cf 93       	push	r28
    6042:	df 93       	push	r29
    6044:	7c 01       	movw	r14, r24
    6046:	6b 01       	movw	r12, r22
    6048:	8a 01       	movw	r16, r20
    604a:	e9 01       	movw	r28, r18
    604c:	24 17       	cp	r18, r20
    604e:	35 07       	cpc	r19, r21
    6050:	20 f4       	brcc	.+8      	; 0x605a <_ZNK6String9substringEjj+0x28>
    6052:	81 2f       	mov	r24, r17
    6054:	89 01       	movw	r16, r18
    6056:	c4 2f       	mov	r28, r20
    6058:	d8 2f       	mov	r29, r24
    605a:	64 ed       	ldi	r22, 0xD4	; 212
    605c:	72 e0       	ldi	r23, 0x02	; 2
    605e:	c7 01       	movw	r24, r14
    6060:	f2 de       	rcall	.-540    	; 0x5e46 <_ZN6StringC1EPKc>
    6062:	d6 01       	movw	r26, r12
    6064:	14 96       	adiw	r26, 0x04	; 4
    6066:	8d 91       	ld	r24, X+
    6068:	9c 91       	ld	r25, X
    606a:	15 97       	sbiw	r26, 0x05	; 5
    606c:	08 17       	cp	r16, r24
    606e:	19 07       	cpc	r17, r25
    6070:	c0 f4       	brcc	.+48     	; 0x60a2 <_ZNK6String9substringEjj+0x70>
    6072:	8c 17       	cp	r24, r28
    6074:	9d 07       	cpc	r25, r29
    6076:	08 f4       	brcc	.+2      	; 0x607a <_ZNK6String9substringEjj+0x48>
    6078:	ec 01       	movw	r28, r24
    607a:	d6 01       	movw	r26, r12
    607c:	ed 91       	ld	r30, X+
    607e:	fc 91       	ld	r31, X
    6080:	11 97       	sbiw	r26, 0x01	; 1
    6082:	ec 0f       	add	r30, r28
    6084:	fd 1f       	adc	r31, r29
    6086:	b0 80       	ld	r11, Z
    6088:	10 82       	st	Z, r1
    608a:	6d 91       	ld	r22, X+
    608c:	7c 91       	ld	r23, X
    608e:	60 0f       	add	r22, r16
    6090:	71 1f       	adc	r23, r17
    6092:	c7 01       	movw	r24, r14
    6094:	ec de       	rcall	.-552    	; 0x5e6e <_ZN6StringaSEPKc>
    6096:	d6 01       	movw	r26, r12
    6098:	ed 91       	ld	r30, X+
    609a:	fc 91       	ld	r31, X
    609c:	ec 0f       	add	r30, r28
    609e:	fd 1f       	adc	r31, r29
    60a0:	b0 82       	st	Z, r11
    60a2:	c7 01       	movw	r24, r14
    60a4:	df 91       	pop	r29
    60a6:	cf 91       	pop	r28
    60a8:	1f 91       	pop	r17
    60aa:	0f 91       	pop	r16
    60ac:	ff 90       	pop	r15
    60ae:	ef 90       	pop	r14
    60b0:	df 90       	pop	r13
    60b2:	cf 90       	pop	r12
    60b4:	bf 90       	pop	r11
    60b6:	08 95       	ret

000060b8 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
	if (!buffer) return;
    60bc:	fc 01       	movw	r30, r24
    60be:	c0 81       	ld	r28, Z
    60c0:	d1 81       	ldd	r29, Z+1	; 0x01
    60c2:	20 97       	sbiw	r28, 0x00	; 0
    60c4:	39 f0       	breq	.+14     	; 0x60d4 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    60c6:	88 81       	ld	r24, Y
    60c8:	88 23       	and	r24, r24
    60ca:	21 f0       	breq	.+8      	; 0x60d4 <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    60cc:	90 e0       	ldi	r25, 0x00	; 0
    60ce:	79 d2       	rcall	.+1266   	; 0x65c2 <toupper>
    60d0:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    60d2:	f9 cf       	rjmp	.-14     	; 0x60c6 <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    60d4:	df 91       	pop	r29
    60d6:	cf 91       	pop	r28
    60d8:	08 95       	ret

000060da <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    60da:	08 95       	ret

000060dc <__mulsi3>:
    60dc:	db 01       	movw	r26, r22
    60de:	8f 93       	push	r24
    60e0:	9f 93       	push	r25
    60e2:	51 d0       	rcall	.+162    	; 0x6186 <__muluhisi3>
    60e4:	bf 91       	pop	r27
    60e6:	af 91       	pop	r26
    60e8:	a2 9f       	mul	r26, r18
    60ea:	80 0d       	add	r24, r0
    60ec:	91 1d       	adc	r25, r1
    60ee:	a3 9f       	mul	r26, r19
    60f0:	90 0d       	add	r25, r0
    60f2:	b2 9f       	mul	r27, r18
    60f4:	90 0d       	add	r25, r0
    60f6:	11 24       	eor	r1, r1
    60f8:	08 95       	ret

000060fa <__udivmodsi4>:
    60fa:	a1 e2       	ldi	r26, 0x21	; 33
    60fc:	1a 2e       	mov	r1, r26
    60fe:	aa 1b       	sub	r26, r26
    6100:	bb 1b       	sub	r27, r27
    6102:	fd 01       	movw	r30, r26
    6104:	0d c0       	rjmp	.+26     	; 0x6120 <__udivmodsi4_ep>

00006106 <__udivmodsi4_loop>:
    6106:	aa 1f       	adc	r26, r26
    6108:	bb 1f       	adc	r27, r27
    610a:	ee 1f       	adc	r30, r30
    610c:	ff 1f       	adc	r31, r31
    610e:	a2 17       	cp	r26, r18
    6110:	b3 07       	cpc	r27, r19
    6112:	e4 07       	cpc	r30, r20
    6114:	f5 07       	cpc	r31, r21
    6116:	20 f0       	brcs	.+8      	; 0x6120 <__udivmodsi4_ep>
    6118:	a2 1b       	sub	r26, r18
    611a:	b3 0b       	sbc	r27, r19
    611c:	e4 0b       	sbc	r30, r20
    611e:	f5 0b       	sbc	r31, r21

00006120 <__udivmodsi4_ep>:
    6120:	66 1f       	adc	r22, r22
    6122:	77 1f       	adc	r23, r23
    6124:	88 1f       	adc	r24, r24
    6126:	99 1f       	adc	r25, r25
    6128:	1a 94       	dec	r1
    612a:	69 f7       	brne	.-38     	; 0x6106 <__udivmodsi4_loop>
    612c:	60 95       	com	r22
    612e:	70 95       	com	r23
    6130:	80 95       	com	r24
    6132:	90 95       	com	r25
    6134:	9b 01       	movw	r18, r22
    6136:	ac 01       	movw	r20, r24
    6138:	bd 01       	movw	r22, r26
    613a:	cf 01       	movw	r24, r30
    613c:	08 95       	ret

0000613e <__divmodsi4>:
    613e:	05 2e       	mov	r0, r21
    6140:	97 fb       	bst	r25, 7
    6142:	16 f4       	brtc	.+4      	; 0x6148 <__divmodsi4+0xa>
    6144:	00 94       	com	r0
    6146:	0f d0       	rcall	.+30     	; 0x6166 <__negsi2>
    6148:	57 fd       	sbrc	r21, 7
    614a:	05 d0       	rcall	.+10     	; 0x6156 <__divmodsi4_neg2>
    614c:	d6 df       	rcall	.-84     	; 0x60fa <__udivmodsi4>
    614e:	07 fc       	sbrc	r0, 7
    6150:	02 d0       	rcall	.+4      	; 0x6156 <__divmodsi4_neg2>
    6152:	46 f4       	brtc	.+16     	; 0x6164 <__divmodsi4_exit>
    6154:	08 c0       	rjmp	.+16     	; 0x6166 <__negsi2>

00006156 <__divmodsi4_neg2>:
    6156:	50 95       	com	r21
    6158:	40 95       	com	r20
    615a:	30 95       	com	r19
    615c:	21 95       	neg	r18
    615e:	3f 4f       	sbci	r19, 0xFF	; 255
    6160:	4f 4f       	sbci	r20, 0xFF	; 255
    6162:	5f 4f       	sbci	r21, 0xFF	; 255

00006164 <__divmodsi4_exit>:
    6164:	08 95       	ret

00006166 <__negsi2>:
    6166:	90 95       	com	r25
    6168:	80 95       	com	r24
    616a:	70 95       	com	r23
    616c:	61 95       	neg	r22
    616e:	7f 4f       	sbci	r23, 0xFF	; 255
    6170:	8f 4f       	sbci	r24, 0xFF	; 255
    6172:	9f 4f       	sbci	r25, 0xFF	; 255
    6174:	08 95       	ret

00006176 <__tablejump2__>:
    6176:	ee 0f       	add	r30, r30
    6178:	ff 1f       	adc	r31, r31
    617a:	88 1f       	adc	r24, r24
    617c:	8b bf       	out	0x3b, r24	; 59
    617e:	07 90       	elpm	r0, Z+
    6180:	f6 91       	elpm	r31, Z
    6182:	e0 2d       	mov	r30, r0
    6184:	19 94       	eijmp

00006186 <__muluhisi3>:
    6186:	09 d0       	rcall	.+18     	; 0x619a <__umulhisi3>
    6188:	a5 9f       	mul	r26, r21
    618a:	90 0d       	add	r25, r0
    618c:	b4 9f       	mul	r27, r20
    618e:	90 0d       	add	r25, r0
    6190:	a4 9f       	mul	r26, r20
    6192:	80 0d       	add	r24, r0
    6194:	91 1d       	adc	r25, r1
    6196:	11 24       	eor	r1, r1
    6198:	08 95       	ret

0000619a <__umulhisi3>:
    619a:	a2 9f       	mul	r26, r18
    619c:	b0 01       	movw	r22, r0
    619e:	b3 9f       	mul	r27, r19
    61a0:	c0 01       	movw	r24, r0
    61a2:	a3 9f       	mul	r26, r19
    61a4:	70 0d       	add	r23, r0
    61a6:	81 1d       	adc	r24, r1
    61a8:	11 24       	eor	r1, r1
    61aa:	91 1d       	adc	r25, r1
    61ac:	b2 9f       	mul	r27, r18
    61ae:	70 0d       	add	r23, r0
    61b0:	81 1d       	adc	r24, r1
    61b2:	11 24       	eor	r1, r1
    61b4:	91 1d       	adc	r25, r1
    61b6:	08 95       	ret

000061b8 <malloc>:
    61b8:	0f 93       	push	r16
    61ba:	1f 93       	push	r17
    61bc:	cf 93       	push	r28
    61be:	df 93       	push	r29
    61c0:	82 30       	cpi	r24, 0x02	; 2
    61c2:	91 05       	cpc	r25, r1
    61c4:	10 f4       	brcc	.+4      	; 0x61ca <malloc+0x12>
    61c6:	82 e0       	ldi	r24, 0x02	; 2
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <__flp>
    61ce:	f0 91 47 05 	lds	r31, 0x0547	; 0x800547 <__flp+0x1>
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	a0 e0       	ldi	r26, 0x00	; 0
    61d8:	b0 e0       	ldi	r27, 0x00	; 0
    61da:	30 97       	sbiw	r30, 0x00	; 0
    61dc:	19 f1       	breq	.+70     	; 0x6224 <malloc+0x6c>
    61de:	40 81       	ld	r20, Z
    61e0:	51 81       	ldd	r21, Z+1	; 0x01
    61e2:	02 81       	ldd	r16, Z+2	; 0x02
    61e4:	13 81       	ldd	r17, Z+3	; 0x03
    61e6:	48 17       	cp	r20, r24
    61e8:	59 07       	cpc	r21, r25
    61ea:	c8 f0       	brcs	.+50     	; 0x621e <malloc+0x66>
    61ec:	84 17       	cp	r24, r20
    61ee:	95 07       	cpc	r25, r21
    61f0:	69 f4       	brne	.+26     	; 0x620c <malloc+0x54>
    61f2:	10 97       	sbiw	r26, 0x00	; 0
    61f4:	31 f0       	breq	.+12     	; 0x6202 <malloc+0x4a>
    61f6:	12 96       	adiw	r26, 0x02	; 2
    61f8:	0c 93       	st	X, r16
    61fa:	12 97       	sbiw	r26, 0x02	; 2
    61fc:	13 96       	adiw	r26, 0x03	; 3
    61fe:	1c 93       	st	X, r17
    6200:	27 c0       	rjmp	.+78     	; 0x6250 <malloc+0x98>
    6202:	00 93 46 05 	sts	0x0546, r16	; 0x800546 <__flp>
    6206:	10 93 47 05 	sts	0x0547, r17	; 0x800547 <__flp+0x1>
    620a:	22 c0       	rjmp	.+68     	; 0x6250 <malloc+0x98>
    620c:	21 15       	cp	r18, r1
    620e:	31 05       	cpc	r19, r1
    6210:	19 f0       	breq	.+6      	; 0x6218 <malloc+0x60>
    6212:	42 17       	cp	r20, r18
    6214:	53 07       	cpc	r21, r19
    6216:	18 f4       	brcc	.+6      	; 0x621e <malloc+0x66>
    6218:	9a 01       	movw	r18, r20
    621a:	bd 01       	movw	r22, r26
    621c:	ef 01       	movw	r28, r30
    621e:	df 01       	movw	r26, r30
    6220:	f8 01       	movw	r30, r16
    6222:	db cf       	rjmp	.-74     	; 0x61da <malloc+0x22>
    6224:	21 15       	cp	r18, r1
    6226:	31 05       	cpc	r19, r1
    6228:	f9 f0       	breq	.+62     	; 0x6268 <malloc+0xb0>
    622a:	28 1b       	sub	r18, r24
    622c:	39 0b       	sbc	r19, r25
    622e:	24 30       	cpi	r18, 0x04	; 4
    6230:	31 05       	cpc	r19, r1
    6232:	80 f4       	brcc	.+32     	; 0x6254 <malloc+0x9c>
    6234:	8a 81       	ldd	r24, Y+2	; 0x02
    6236:	9b 81       	ldd	r25, Y+3	; 0x03
    6238:	61 15       	cp	r22, r1
    623a:	71 05       	cpc	r23, r1
    623c:	21 f0       	breq	.+8      	; 0x6246 <malloc+0x8e>
    623e:	fb 01       	movw	r30, r22
    6240:	93 83       	std	Z+3, r25	; 0x03
    6242:	82 83       	std	Z+2, r24	; 0x02
    6244:	04 c0       	rjmp	.+8      	; 0x624e <malloc+0x96>
    6246:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <__flp+0x1>
    624a:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <__flp>
    624e:	fe 01       	movw	r30, r28
    6250:	32 96       	adiw	r30, 0x02	; 2
    6252:	44 c0       	rjmp	.+136    	; 0x62dc <malloc+0x124>
    6254:	fe 01       	movw	r30, r28
    6256:	e2 0f       	add	r30, r18
    6258:	f3 1f       	adc	r31, r19
    625a:	81 93       	st	Z+, r24
    625c:	91 93       	st	Z+, r25
    625e:	22 50       	subi	r18, 0x02	; 2
    6260:	31 09       	sbc	r19, r1
    6262:	39 83       	std	Y+1, r19	; 0x01
    6264:	28 83       	st	Y, r18
    6266:	3a c0       	rjmp	.+116    	; 0x62dc <malloc+0x124>
    6268:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <__brkval>
    626c:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <__brkval+0x1>
    6270:	23 2b       	or	r18, r19
    6272:	41 f4       	brne	.+16     	; 0x6284 <malloc+0xcc>
    6274:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6278:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    627c:	30 93 45 05 	sts	0x0545, r19	; 0x800545 <__brkval+0x1>
    6280:	20 93 44 05 	sts	0x0544, r18	; 0x800544 <__brkval>
    6284:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6288:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    628c:	21 15       	cp	r18, r1
    628e:	31 05       	cpc	r19, r1
    6290:	41 f4       	brne	.+16     	; 0x62a2 <malloc+0xea>
    6292:	2d b7       	in	r18, 0x3d	; 61
    6294:	3e b7       	in	r19, 0x3e	; 62
    6296:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    629a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    629e:	24 1b       	sub	r18, r20
    62a0:	35 0b       	sbc	r19, r21
    62a2:	e0 91 44 05 	lds	r30, 0x0544	; 0x800544 <__brkval>
    62a6:	f0 91 45 05 	lds	r31, 0x0545	; 0x800545 <__brkval+0x1>
    62aa:	e2 17       	cp	r30, r18
    62ac:	f3 07       	cpc	r31, r19
    62ae:	a0 f4       	brcc	.+40     	; 0x62d8 <malloc+0x120>
    62b0:	2e 1b       	sub	r18, r30
    62b2:	3f 0b       	sbc	r19, r31
    62b4:	28 17       	cp	r18, r24
    62b6:	39 07       	cpc	r19, r25
    62b8:	78 f0       	brcs	.+30     	; 0x62d8 <malloc+0x120>
    62ba:	ac 01       	movw	r20, r24
    62bc:	4e 5f       	subi	r20, 0xFE	; 254
    62be:	5f 4f       	sbci	r21, 0xFF	; 255
    62c0:	24 17       	cp	r18, r20
    62c2:	35 07       	cpc	r19, r21
    62c4:	48 f0       	brcs	.+18     	; 0x62d8 <malloc+0x120>
    62c6:	4e 0f       	add	r20, r30
    62c8:	5f 1f       	adc	r21, r31
    62ca:	50 93 45 05 	sts	0x0545, r21	; 0x800545 <__brkval+0x1>
    62ce:	40 93 44 05 	sts	0x0544, r20	; 0x800544 <__brkval>
    62d2:	81 93       	st	Z+, r24
    62d4:	91 93       	st	Z+, r25
    62d6:	02 c0       	rjmp	.+4      	; 0x62dc <malloc+0x124>
    62d8:	e0 e0       	ldi	r30, 0x00	; 0
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	cf 01       	movw	r24, r30
    62de:	df 91       	pop	r29
    62e0:	cf 91       	pop	r28
    62e2:	1f 91       	pop	r17
    62e4:	0f 91       	pop	r16
    62e6:	08 95       	ret

000062e8 <free>:
    62e8:	cf 93       	push	r28
    62ea:	df 93       	push	r29
    62ec:	00 97       	sbiw	r24, 0x00	; 0
    62ee:	09 f4       	brne	.+2      	; 0x62f2 <free+0xa>
    62f0:	81 c0       	rjmp	.+258    	; 0x63f4 <free+0x10c>
    62f2:	fc 01       	movw	r30, r24
    62f4:	32 97       	sbiw	r30, 0x02	; 2
    62f6:	13 82       	std	Z+3, r1	; 0x03
    62f8:	12 82       	std	Z+2, r1	; 0x02
    62fa:	a0 91 46 05 	lds	r26, 0x0546	; 0x800546 <__flp>
    62fe:	b0 91 47 05 	lds	r27, 0x0547	; 0x800547 <__flp+0x1>
    6302:	10 97       	sbiw	r26, 0x00	; 0
    6304:	81 f4       	brne	.+32     	; 0x6326 <free+0x3e>
    6306:	20 81       	ld	r18, Z
    6308:	31 81       	ldd	r19, Z+1	; 0x01
    630a:	82 0f       	add	r24, r18
    630c:	93 1f       	adc	r25, r19
    630e:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <__brkval>
    6312:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <__brkval+0x1>
    6316:	28 17       	cp	r18, r24
    6318:	39 07       	cpc	r19, r25
    631a:	51 f5       	brne	.+84     	; 0x6370 <free+0x88>
    631c:	f0 93 45 05 	sts	0x0545, r31	; 0x800545 <__brkval+0x1>
    6320:	e0 93 44 05 	sts	0x0544, r30	; 0x800544 <__brkval>
    6324:	67 c0       	rjmp	.+206    	; 0x63f4 <free+0x10c>
    6326:	ed 01       	movw	r28, r26
    6328:	20 e0       	ldi	r18, 0x00	; 0
    632a:	30 e0       	ldi	r19, 0x00	; 0
    632c:	ce 17       	cp	r28, r30
    632e:	df 07       	cpc	r29, r31
    6330:	40 f4       	brcc	.+16     	; 0x6342 <free+0x5a>
    6332:	4a 81       	ldd	r20, Y+2	; 0x02
    6334:	5b 81       	ldd	r21, Y+3	; 0x03
    6336:	9e 01       	movw	r18, r28
    6338:	41 15       	cp	r20, r1
    633a:	51 05       	cpc	r21, r1
    633c:	f1 f0       	breq	.+60     	; 0x637a <free+0x92>
    633e:	ea 01       	movw	r28, r20
    6340:	f5 cf       	rjmp	.-22     	; 0x632c <free+0x44>
    6342:	d3 83       	std	Z+3, r29	; 0x03
    6344:	c2 83       	std	Z+2, r28	; 0x02
    6346:	40 81       	ld	r20, Z
    6348:	51 81       	ldd	r21, Z+1	; 0x01
    634a:	84 0f       	add	r24, r20
    634c:	95 1f       	adc	r25, r21
    634e:	c8 17       	cp	r28, r24
    6350:	d9 07       	cpc	r29, r25
    6352:	59 f4       	brne	.+22     	; 0x636a <free+0x82>
    6354:	88 81       	ld	r24, Y
    6356:	99 81       	ldd	r25, Y+1	; 0x01
    6358:	84 0f       	add	r24, r20
    635a:	95 1f       	adc	r25, r21
    635c:	02 96       	adiw	r24, 0x02	; 2
    635e:	91 83       	std	Z+1, r25	; 0x01
    6360:	80 83       	st	Z, r24
    6362:	8a 81       	ldd	r24, Y+2	; 0x02
    6364:	9b 81       	ldd	r25, Y+3	; 0x03
    6366:	93 83       	std	Z+3, r25	; 0x03
    6368:	82 83       	std	Z+2, r24	; 0x02
    636a:	21 15       	cp	r18, r1
    636c:	31 05       	cpc	r19, r1
    636e:	29 f4       	brne	.+10     	; 0x637a <free+0x92>
    6370:	f0 93 47 05 	sts	0x0547, r31	; 0x800547 <__flp+0x1>
    6374:	e0 93 46 05 	sts	0x0546, r30	; 0x800546 <__flp>
    6378:	3d c0       	rjmp	.+122    	; 0x63f4 <free+0x10c>
    637a:	e9 01       	movw	r28, r18
    637c:	fb 83       	std	Y+3, r31	; 0x03
    637e:	ea 83       	std	Y+2, r30	; 0x02
    6380:	49 91       	ld	r20, Y+
    6382:	59 91       	ld	r21, Y+
    6384:	c4 0f       	add	r28, r20
    6386:	d5 1f       	adc	r29, r21
    6388:	ec 17       	cp	r30, r28
    638a:	fd 07       	cpc	r31, r29
    638c:	61 f4       	brne	.+24     	; 0x63a6 <free+0xbe>
    638e:	80 81       	ld	r24, Z
    6390:	91 81       	ldd	r25, Z+1	; 0x01
    6392:	84 0f       	add	r24, r20
    6394:	95 1f       	adc	r25, r21
    6396:	02 96       	adiw	r24, 0x02	; 2
    6398:	e9 01       	movw	r28, r18
    639a:	99 83       	std	Y+1, r25	; 0x01
    639c:	88 83       	st	Y, r24
    639e:	82 81       	ldd	r24, Z+2	; 0x02
    63a0:	93 81       	ldd	r25, Z+3	; 0x03
    63a2:	9b 83       	std	Y+3, r25	; 0x03
    63a4:	8a 83       	std	Y+2, r24	; 0x02
    63a6:	e0 e0       	ldi	r30, 0x00	; 0
    63a8:	f0 e0       	ldi	r31, 0x00	; 0
    63aa:	12 96       	adiw	r26, 0x02	; 2
    63ac:	8d 91       	ld	r24, X+
    63ae:	9c 91       	ld	r25, X
    63b0:	13 97       	sbiw	r26, 0x03	; 3
    63b2:	00 97       	sbiw	r24, 0x00	; 0
    63b4:	19 f0       	breq	.+6      	; 0x63bc <free+0xd4>
    63b6:	fd 01       	movw	r30, r26
    63b8:	dc 01       	movw	r26, r24
    63ba:	f7 cf       	rjmp	.-18     	; 0x63aa <free+0xc2>
    63bc:	8d 91       	ld	r24, X+
    63be:	9c 91       	ld	r25, X
    63c0:	11 97       	sbiw	r26, 0x01	; 1
    63c2:	9d 01       	movw	r18, r26
    63c4:	2e 5f       	subi	r18, 0xFE	; 254
    63c6:	3f 4f       	sbci	r19, 0xFF	; 255
    63c8:	82 0f       	add	r24, r18
    63ca:	93 1f       	adc	r25, r19
    63cc:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <__brkval>
    63d0:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <__brkval+0x1>
    63d4:	28 17       	cp	r18, r24
    63d6:	39 07       	cpc	r19, r25
    63d8:	69 f4       	brne	.+26     	; 0x63f4 <free+0x10c>
    63da:	30 97       	sbiw	r30, 0x00	; 0
    63dc:	29 f4       	brne	.+10     	; 0x63e8 <free+0x100>
    63de:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <__flp+0x1>
    63e2:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <__flp>
    63e6:	02 c0       	rjmp	.+4      	; 0x63ec <free+0x104>
    63e8:	13 82       	std	Z+3, r1	; 0x03
    63ea:	12 82       	std	Z+2, r1	; 0x02
    63ec:	b0 93 45 05 	sts	0x0545, r27	; 0x800545 <__brkval+0x1>
    63f0:	a0 93 44 05 	sts	0x0544, r26	; 0x800544 <__brkval>
    63f4:	df 91       	pop	r29
    63f6:	cf 91       	pop	r28
    63f8:	08 95       	ret

000063fa <realloc>:
    63fa:	6f 92       	push	r6
    63fc:	7f 92       	push	r7
    63fe:	8f 92       	push	r8
    6400:	9f 92       	push	r9
    6402:	af 92       	push	r10
    6404:	bf 92       	push	r11
    6406:	cf 92       	push	r12
    6408:	df 92       	push	r13
    640a:	ef 92       	push	r14
    640c:	ff 92       	push	r15
    640e:	0f 93       	push	r16
    6410:	1f 93       	push	r17
    6412:	cf 93       	push	r28
    6414:	df 93       	push	r29
    6416:	00 97       	sbiw	r24, 0x00	; 0
    6418:	81 f4       	brne	.+32     	; 0x643a <realloc+0x40>
    641a:	cb 01       	movw	r24, r22
    641c:	df 91       	pop	r29
    641e:	cf 91       	pop	r28
    6420:	1f 91       	pop	r17
    6422:	0f 91       	pop	r16
    6424:	ff 90       	pop	r15
    6426:	ef 90       	pop	r14
    6428:	df 90       	pop	r13
    642a:	cf 90       	pop	r12
    642c:	bf 90       	pop	r11
    642e:	af 90       	pop	r10
    6430:	9f 90       	pop	r9
    6432:	8f 90       	pop	r8
    6434:	7f 90       	pop	r7
    6436:	6f 90       	pop	r6
    6438:	bf ce       	rjmp	.-642    	; 0x61b8 <malloc>
    643a:	fc 01       	movw	r30, r24
    643c:	e6 0f       	add	r30, r22
    643e:	f7 1f       	adc	r31, r23
    6440:	9c 01       	movw	r18, r24
    6442:	22 50       	subi	r18, 0x02	; 2
    6444:	31 09       	sbc	r19, r1
    6446:	e2 17       	cp	r30, r18
    6448:	f3 07       	cpc	r31, r19
    644a:	08 f4       	brcc	.+2      	; 0x644e <realloc+0x54>
    644c:	a5 c0       	rjmp	.+330    	; 0x6598 <realloc+0x19e>
    644e:	ec 01       	movw	r28, r24
    6450:	d9 01       	movw	r26, r18
    6452:	0d 91       	ld	r16, X+
    6454:	1c 91       	ld	r17, X
    6456:	11 97       	sbiw	r26, 0x01	; 1
    6458:	06 17       	cp	r16, r22
    645a:	17 07       	cpc	r17, r23
    645c:	a8 f0       	brcs	.+42     	; 0x6488 <realloc+0x8e>
    645e:	05 30       	cpi	r16, 0x05	; 5
    6460:	11 05       	cpc	r17, r1
    6462:	08 f4       	brcc	.+2      	; 0x6466 <realloc+0x6c>
    6464:	97 c0       	rjmp	.+302    	; 0x6594 <realloc+0x19a>
    6466:	c8 01       	movw	r24, r16
    6468:	04 97       	sbiw	r24, 0x04	; 4
    646a:	86 17       	cp	r24, r22
    646c:	97 07       	cpc	r25, r23
    646e:	08 f4       	brcc	.+2      	; 0x6472 <realloc+0x78>
    6470:	91 c0       	rjmp	.+290    	; 0x6594 <realloc+0x19a>
    6472:	02 50       	subi	r16, 0x02	; 2
    6474:	11 09       	sbc	r17, r1
    6476:	06 1b       	sub	r16, r22
    6478:	17 0b       	sbc	r17, r23
    647a:	01 93       	st	Z+, r16
    647c:	11 93       	st	Z+, r17
    647e:	6d 93       	st	X+, r22
    6480:	7c 93       	st	X, r23
    6482:	cf 01       	movw	r24, r30
    6484:	31 df       	rcall	.-414    	; 0x62e8 <free>
    6486:	86 c0       	rjmp	.+268    	; 0x6594 <realloc+0x19a>
    6488:	5b 01       	movw	r10, r22
    648a:	a0 1a       	sub	r10, r16
    648c:	b1 0a       	sbc	r11, r17
    648e:	4c 01       	movw	r8, r24
    6490:	80 0e       	add	r8, r16
    6492:	91 1e       	adc	r9, r17
    6494:	a0 91 46 05 	lds	r26, 0x0546	; 0x800546 <__flp>
    6498:	b0 91 47 05 	lds	r27, 0x0547	; 0x800547 <__flp+0x1>
    649c:	61 2c       	mov	r6, r1
    649e:	71 2c       	mov	r7, r1
    64a0:	e1 2c       	mov	r14, r1
    64a2:	f1 2c       	mov	r15, r1
    64a4:	10 97       	sbiw	r26, 0x00	; 0
    64a6:	09 f4       	brne	.+2      	; 0x64aa <realloc+0xb0>
    64a8:	46 c0       	rjmp	.+140    	; 0x6536 <realloc+0x13c>
    64aa:	8d 91       	ld	r24, X+
    64ac:	9c 91       	ld	r25, X
    64ae:	11 97       	sbiw	r26, 0x01	; 1
    64b0:	a8 15       	cp	r26, r8
    64b2:	b9 05       	cpc	r27, r9
    64b4:	b1 f5       	brne	.+108    	; 0x6522 <realloc+0x128>
    64b6:	6c 01       	movw	r12, r24
    64b8:	42 e0       	ldi	r20, 0x02	; 2
    64ba:	c4 0e       	add	r12, r20
    64bc:	d1 1c       	adc	r13, r1
    64be:	ca 14       	cp	r12, r10
    64c0:	db 04       	cpc	r13, r11
    64c2:	78 f1       	brcs	.+94     	; 0x6522 <realloc+0x128>
    64c4:	4c 01       	movw	r8, r24
    64c6:	8a 18       	sub	r8, r10
    64c8:	9b 08       	sbc	r9, r11
    64ca:	64 01       	movw	r12, r8
    64cc:	42 e0       	ldi	r20, 0x02	; 2
    64ce:	c4 0e       	add	r12, r20
    64d0:	d1 1c       	adc	r13, r1
    64d2:	12 96       	adiw	r26, 0x02	; 2
    64d4:	bc 90       	ld	r11, X
    64d6:	12 97       	sbiw	r26, 0x02	; 2
    64d8:	13 96       	adiw	r26, 0x03	; 3
    64da:	ac 91       	ld	r26, X
    64dc:	b5 e0       	ldi	r27, 0x05	; 5
    64de:	cb 16       	cp	r12, r27
    64e0:	d1 04       	cpc	r13, r1
    64e2:	40 f0       	brcs	.+16     	; 0x64f4 <realloc+0xfa>
    64e4:	b2 82       	std	Z+2, r11	; 0x02
    64e6:	a3 83       	std	Z+3, r26	; 0x03
    64e8:	91 82       	std	Z+1, r9	; 0x01
    64ea:	80 82       	st	Z, r8
    64ec:	d9 01       	movw	r26, r18
    64ee:	6d 93       	st	X+, r22
    64f0:	7c 93       	st	X, r23
    64f2:	09 c0       	rjmp	.+18     	; 0x6506 <realloc+0x10c>
    64f4:	0e 5f       	subi	r16, 0xFE	; 254
    64f6:	1f 4f       	sbci	r17, 0xFF	; 255
    64f8:	80 0f       	add	r24, r16
    64fa:	91 1f       	adc	r25, r17
    64fc:	f9 01       	movw	r30, r18
    64fe:	91 83       	std	Z+1, r25	; 0x01
    6500:	80 83       	st	Z, r24
    6502:	eb 2d       	mov	r30, r11
    6504:	fa 2f       	mov	r31, r26
    6506:	e1 14       	cp	r14, r1
    6508:	f1 04       	cpc	r15, r1
    650a:	31 f0       	breq	.+12     	; 0x6518 <realloc+0x11e>
    650c:	d7 01       	movw	r26, r14
    650e:	13 96       	adiw	r26, 0x03	; 3
    6510:	fc 93       	st	X, r31
    6512:	ee 93       	st	-X, r30
    6514:	12 97       	sbiw	r26, 0x02	; 2
    6516:	3e c0       	rjmp	.+124    	; 0x6594 <realloc+0x19a>
    6518:	f0 93 47 05 	sts	0x0547, r31	; 0x800547 <__flp+0x1>
    651c:	e0 93 46 05 	sts	0x0546, r30	; 0x800546 <__flp>
    6520:	39 c0       	rjmp	.+114    	; 0x6594 <realloc+0x19a>
    6522:	68 16       	cp	r6, r24
    6524:	79 06       	cpc	r7, r25
    6526:	08 f4       	brcc	.+2      	; 0x652a <realloc+0x130>
    6528:	3c 01       	movw	r6, r24
    652a:	7d 01       	movw	r14, r26
    652c:	12 96       	adiw	r26, 0x02	; 2
    652e:	0d 90       	ld	r0, X+
    6530:	bc 91       	ld	r27, X
    6532:	a0 2d       	mov	r26, r0
    6534:	b7 cf       	rjmp	.-146    	; 0x64a4 <realloc+0xaa>
    6536:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <__brkval>
    653a:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <__brkval+0x1>
    653e:	88 16       	cp	r8, r24
    6540:	99 06       	cpc	r9, r25
    6542:	e1 f4       	brne	.+56     	; 0x657c <realloc+0x182>
    6544:	66 16       	cp	r6, r22
    6546:	77 06       	cpc	r7, r23
    6548:	c8 f4       	brcc	.+50     	; 0x657c <realloc+0x182>
    654a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    654e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6552:	00 97       	sbiw	r24, 0x00	; 0
    6554:	41 f4       	brne	.+16     	; 0x6566 <realloc+0x16c>
    6556:	8d b7       	in	r24, 0x3d	; 61
    6558:	9e b7       	in	r25, 0x3e	; 62
    655a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    655e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6562:	84 1b       	sub	r24, r20
    6564:	95 0b       	sbc	r25, r21
    6566:	e8 17       	cp	r30, r24
    6568:	f9 07       	cpc	r31, r25
    656a:	b0 f4       	brcc	.+44     	; 0x6598 <realloc+0x19e>
    656c:	f0 93 45 05 	sts	0x0545, r31	; 0x800545 <__brkval+0x1>
    6570:	e0 93 44 05 	sts	0x0544, r30	; 0x800544 <__brkval>
    6574:	f9 01       	movw	r30, r18
    6576:	71 83       	std	Z+1, r23	; 0x01
    6578:	60 83       	st	Z, r22
    657a:	0c c0       	rjmp	.+24     	; 0x6594 <realloc+0x19a>
    657c:	cb 01       	movw	r24, r22
    657e:	1c de       	rcall	.-968    	; 0x61b8 <malloc>
    6580:	7c 01       	movw	r14, r24
    6582:	00 97       	sbiw	r24, 0x00	; 0
    6584:	49 f0       	breq	.+18     	; 0x6598 <realloc+0x19e>
    6586:	a8 01       	movw	r20, r16
    6588:	be 01       	movw	r22, r28
    658a:	23 d0       	rcall	.+70     	; 0x65d2 <memcpy>
    658c:	ce 01       	movw	r24, r28
    658e:	ac de       	rcall	.-680    	; 0x62e8 <free>
    6590:	c7 01       	movw	r24, r14
    6592:	04 c0       	rjmp	.+8      	; 0x659c <realloc+0x1a2>
    6594:	ce 01       	movw	r24, r28
    6596:	02 c0       	rjmp	.+4      	; 0x659c <realloc+0x1a2>
    6598:	80 e0       	ldi	r24, 0x00	; 0
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	df 91       	pop	r29
    659e:	cf 91       	pop	r28
    65a0:	1f 91       	pop	r17
    65a2:	0f 91       	pop	r16
    65a4:	ff 90       	pop	r15
    65a6:	ef 90       	pop	r14
    65a8:	df 90       	pop	r13
    65aa:	cf 90       	pop	r12
    65ac:	bf 90       	pop	r11
    65ae:	af 90       	pop	r10
    65b0:	9f 90       	pop	r9
    65b2:	8f 90       	pop	r8
    65b4:	7f 90       	pop	r7
    65b6:	6f 90       	pop	r6
    65b8:	08 95       	ret

000065ba <abort>:
    65ba:	81 e0       	ldi	r24, 0x01	; 1
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	f8 94       	cli
    65c0:	73 c0       	rjmp	.+230    	; 0x66a8 <__do_global_dtors>

000065c2 <toupper>:
    65c2:	91 11       	cpse	r25, r1
    65c4:	08 95       	ret
    65c6:	81 56       	subi	r24, 0x61	; 97
    65c8:	8a 51       	subi	r24, 0x1A	; 26
    65ca:	08 f4       	brcc	.+2      	; 0x65ce <toupper+0xc>
    65cc:	80 52       	subi	r24, 0x20	; 32
    65ce:	85 58       	subi	r24, 0x85	; 133
    65d0:	08 95       	ret

000065d2 <memcpy>:
    65d2:	fb 01       	movw	r30, r22
    65d4:	dc 01       	movw	r26, r24
    65d6:	02 c0       	rjmp	.+4      	; 0x65dc <memcpy+0xa>
    65d8:	01 90       	ld	r0, Z+
    65da:	0d 92       	st	X+, r0
    65dc:	41 50       	subi	r20, 0x01	; 1
    65de:	50 40       	sbci	r21, 0x00	; 0
    65e0:	d8 f7       	brcc	.-10     	; 0x65d8 <memcpy+0x6>
    65e2:	08 95       	ret

000065e4 <memset>:
    65e4:	dc 01       	movw	r26, r24
    65e6:	01 c0       	rjmp	.+2      	; 0x65ea <memset+0x6>
    65e8:	6d 93       	st	X+, r22
    65ea:	41 50       	subi	r20, 0x01	; 1
    65ec:	50 40       	sbci	r21, 0x00	; 0
    65ee:	e0 f7       	brcc	.-8      	; 0x65e8 <memset+0x4>
    65f0:	08 95       	ret

000065f2 <strcmp>:
    65f2:	fb 01       	movw	r30, r22
    65f4:	dc 01       	movw	r26, r24
    65f6:	8d 91       	ld	r24, X+
    65f8:	01 90       	ld	r0, Z+
    65fa:	80 19       	sub	r24, r0
    65fc:	01 10       	cpse	r0, r1
    65fe:	d9 f3       	breq	.-10     	; 0x65f6 <strcmp+0x4>
    6600:	99 0b       	sbc	r25, r25
    6602:	08 95       	ret

00006604 <strcpy>:
    6604:	fb 01       	movw	r30, r22
    6606:	dc 01       	movw	r26, r24
    6608:	01 90       	ld	r0, Z+
    660a:	0d 92       	st	X+, r0
    660c:	00 20       	and	r0, r0
    660e:	e1 f7       	brne	.-8      	; 0x6608 <strcpy+0x4>
    6610:	08 95       	ret

00006612 <strlen>:
    6612:	fc 01       	movw	r30, r24
    6614:	01 90       	ld	r0, Z+
    6616:	00 20       	and	r0, r0
    6618:	e9 f7       	brne	.-6      	; 0x6614 <strlen+0x2>
    661a:	80 95       	com	r24
    661c:	90 95       	com	r25
    661e:	8e 0f       	add	r24, r30
    6620:	9f 1f       	adc	r25, r31
    6622:	08 95       	ret

00006624 <strncpy>:
    6624:	fb 01       	movw	r30, r22
    6626:	dc 01       	movw	r26, r24
    6628:	41 50       	subi	r20, 0x01	; 1
    662a:	50 40       	sbci	r21, 0x00	; 0
    662c:	48 f0       	brcs	.+18     	; 0x6640 <strncpy+0x1c>
    662e:	01 90       	ld	r0, Z+
    6630:	0d 92       	st	X+, r0
    6632:	00 20       	and	r0, r0
    6634:	c9 f7       	brne	.-14     	; 0x6628 <strncpy+0x4>
    6636:	01 c0       	rjmp	.+2      	; 0x663a <strncpy+0x16>
    6638:	1d 92       	st	X+, r1
    663a:	41 50       	subi	r20, 0x01	; 1
    663c:	50 40       	sbci	r21, 0x00	; 0
    663e:	e0 f7       	brcc	.-8      	; 0x6638 <strncpy+0x14>
    6640:	08 95       	ret

00006642 <utoa>:
    6642:	45 32       	cpi	r20, 0x25	; 37
    6644:	51 05       	cpc	r21, r1
    6646:	18 f4       	brcc	.+6      	; 0x664e <utoa+0xc>
    6648:	42 30       	cpi	r20, 0x02	; 2
    664a:	08 f0       	brcs	.+2      	; 0x664e <utoa+0xc>
    664c:	04 c0       	rjmp	.+8      	; 0x6656 <__utoa_ncheck>
    664e:	fb 01       	movw	r30, r22
    6650:	10 82       	st	Z, r1
    6652:	cb 01       	movw	r24, r22
    6654:	08 95       	ret

00006656 <__utoa_ncheck>:
    6656:	bb 27       	eor	r27, r27

00006658 <__utoa_common>:
    6658:	fb 01       	movw	r30, r22
    665a:	55 27       	eor	r21, r21
    665c:	aa 27       	eor	r26, r26
    665e:	88 0f       	add	r24, r24
    6660:	99 1f       	adc	r25, r25
    6662:	aa 1f       	adc	r26, r26
    6664:	a4 17       	cp	r26, r20
    6666:	10 f0       	brcs	.+4      	; 0x666c <__utoa_common+0x14>
    6668:	a4 1b       	sub	r26, r20
    666a:	83 95       	inc	r24
    666c:	50 51       	subi	r21, 0x10	; 16
    666e:	b9 f7       	brne	.-18     	; 0x665e <__utoa_common+0x6>
    6670:	a0 5d       	subi	r26, 0xD0	; 208
    6672:	aa 33       	cpi	r26, 0x3A	; 58
    6674:	08 f0       	brcs	.+2      	; 0x6678 <__utoa_common+0x20>
    6676:	a9 5d       	subi	r26, 0xD9	; 217
    6678:	a1 93       	st	Z+, r26
    667a:	00 97       	sbiw	r24, 0x00	; 0
    667c:	79 f7       	brne	.-34     	; 0x665c <__utoa_common+0x4>
    667e:	b1 11       	cpse	r27, r1
    6680:	b1 93       	st	Z+, r27
    6682:	11 92       	st	Z+, r1
    6684:	cb 01       	movw	r24, r22
    6686:	00 c0       	rjmp	.+0      	; 0x6688 <strrev>

00006688 <strrev>:
    6688:	dc 01       	movw	r26, r24
    668a:	fc 01       	movw	r30, r24
    668c:	67 2f       	mov	r22, r23
    668e:	71 91       	ld	r23, Z+
    6690:	77 23       	and	r23, r23
    6692:	e1 f7       	brne	.-8      	; 0x668c <strrev+0x4>
    6694:	32 97       	sbiw	r30, 0x02	; 2
    6696:	04 c0       	rjmp	.+8      	; 0x66a0 <strrev+0x18>
    6698:	7c 91       	ld	r23, X
    669a:	6d 93       	st	X+, r22
    669c:	70 83       	st	Z, r23
    669e:	62 91       	ld	r22, -Z
    66a0:	ae 17       	cp	r26, r30
    66a2:	bf 07       	cpc	r27, r31
    66a4:	c8 f3       	brcs	.-14     	; 0x6698 <strrev+0x10>
    66a6:	08 95       	ret

000066a8 <__do_global_dtors>:
    66a8:	11 e0       	ldi	r17, 0x01	; 1
    66aa:	c7 e1       	ldi	r28, 0x17	; 23
    66ac:	d1 e0       	ldi	r29, 0x01	; 1
    66ae:	00 e0       	ldi	r16, 0x00	; 0
    66b0:	05 c0       	rjmp	.+10     	; 0x66bc <__do_global_dtors+0x14>
    66b2:	80 2f       	mov	r24, r16
    66b4:	fe 01       	movw	r30, r28
    66b6:	5f dd       	rcall	.-1346   	; 0x6176 <__tablejump2__>
    66b8:	21 96       	adiw	r28, 0x01	; 1
    66ba:	01 1d       	adc	r16, r1
    66bc:	c8 31       	cpi	r28, 0x18	; 24
    66be:	d1 07       	cpc	r29, r17
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	08 07       	cpc	r16, r24
    66c4:	b1 f7       	brne	.-20     	; 0x66b2 <__do_global_dtors+0xa>
    66c6:	f8 94       	cli

000066c8 <__stop_program>:
    66c8:	ff cf       	rjmp	.-2      	; 0x66c8 <__stop_program>
