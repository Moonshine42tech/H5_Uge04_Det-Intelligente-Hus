
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800200  00006ea4  00006f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ea4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000266  0080034a  0080034a  00007082  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000070b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e28  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019e8d  00000000  00000000  00007f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043f3  00000000  00000000  00021da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008132  00000000  00000000  0002619c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000036d8  00000000  00000000  0002e2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000062f7  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c49b  00000000  00000000  00037c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d98  00000000  00000000  0004413a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 e0 2f 	jmp	0x5fc0	; 0x5fc0 <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 44 2e 	jmp	0x5c88	; 0x5c88 <__vector_25>
      68:	0c 94 7a 2e 	jmp	0x5cf4	; 0x5cf4 <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1b 31       	cpi	r17, 0x1B	; 27
      e6:	1e 31       	cpi	r17, 0x1E	; 30
      e8:	0d 31       	cpi	r16, 0x1D	; 29
      ea:	11 31       	cpi	r17, 0x11	; 17
      ec:	17 31       	cpi	r17, 0x17	; 23
      ee:	55 31       	cpi	r21, 0x15	; 21
      f0:	22 31       	cpi	r18, 0x12	; 18
      f2:	26 31       	cpi	r18, 0x16	; 22
      f4:	2c 31       	cpi	r18, 0x1C	; 28
      f6:	30 31       	cpi	r19, 0x10	; 16
      f8:	34 31       	cpi	r19, 0x14	; 20
      fa:	3a 31       	cpi	r19, 0x1A	; 26
      fc:	3e 31       	cpi	r19, 0x1E	; 30
      fe:	42 31       	cpi	r20, 0x12	; 18
     100:	55 31       	cpi	r21, 0x15	; 21
     102:	48 31       	cpi	r20, 0x18	; 24
     104:	4c 31       	cpi	r20, 0x1C	; 28
     106:	50 31       	cpi	r21, 0x10	; 16

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	49 08       	sbc	r4, r9
     22a:	1c 2b       	or	r17, r28
     22c:	ac 2e       	mov	r10, r28

0000022e <__ctors_end>:
     22e:	55 08       	sbc	r5, r5

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e4 ea       	ldi	r30, 0xA4	; 164
     248:	fe e6       	ldi	r31, 0x6E	; 110
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	aa 34       	cpi	r26, 0x4A	; 74
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	aa e4       	ldi	r26, 0x4A	; 74
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a0 3b       	cpi	r26, 0xB0	; 176
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 9e 34 	call	0x693c	; 0x693c <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <main>
     28e:	0c 94 41 37 	jmp	0x6e82	; 0x6e82 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	1f 92       	push	r1
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	fc 01       	movw	r30, r24
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <_ZN6StringpLEc+0x6>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	6b 81       	ldd	r22, Y+3	; 0x03
     2ce:	0e 94 5e 33 	call	0x66bc	; 0x66bc <_ZN6String6concatEc>
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <_ZN6StringpLEi>:
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZN6StringpLEi+0x6>
     2e8:	1f 92       	push	r1
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	7c 83       	std	Y+4, r23	; 0x04
     2f4:	6b 83       	std	Y+3, r22	; 0x03
     2f6:	2b 81       	ldd	r18, Y+3	; 0x03
     2f8:	3c 81       	ldd	r19, Y+4	; 0x04
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	b9 01       	movw	r22, r18
     300:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6String6concatEi>
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <_ZNK6StringeqERKS_+0x6>
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	7c 83       	std	Y+4, r23	; 0x04
     328:	6b 83       	std	Y+3, r22	; 0x03
     32a:	2b 81       	ldd	r18, Y+3	; 0x03
     32c:	3c 81       	ldd	r19, Y+4	; 0x04
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	b9 01       	movw	r22, r18
     334:	0e 94 ce 33 	call	0x679c	; 0x679c <_ZNK6String6equalsERKS_>
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <_ZNK6StringeqEPKc>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <_ZNK6StringeqEPKc+0x6>
     34c:	1f 92       	push	r1
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	7c 83       	std	Y+4, r23	; 0x04
     358:	6b 83       	std	Y+3, r22	; 0x03
     35a:	2b 81       	ldd	r18, Y+3	; 0x03
     35c:	3c 81       	ldd	r19, Y+4	; 0x04
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	b9 01       	movw	r22, r18
     364:	0e 94 de 33 	call	0x67bc	; 0x67bc <_ZNK6String6equalsEPKc>
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZNK6String9substringEj+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_ZNK6String9substringEj+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	7c 83       	std	Y+4, r23	; 0x04
     388:	6b 83       	std	Y+3, r22	; 0x03
     38a:	5e 83       	std	Y+6, r21	; 0x06
     38c:	4d 83       	std	Y+5, r20	; 0x05
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	fc 01       	movw	r30, r24
     394:	24 81       	ldd	r18, Z+4	; 0x04
     396:	35 81       	ldd	r19, Z+5	; 0x05
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	4d 81       	ldd	r20, Y+5	; 0x05
     39e:	5e 81       	ldd	r21, Y+6	; 0x06
     3a0:	6b 81       	ldd	r22, Y+3	; 0x03
     3a2:	7c 81       	ldd	r23, Y+4	; 0x04
     3a4:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZNK6String9substringEjj>
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	26 96       	adiw	r28, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <_ZN5Print5writeEPKc+0xa>
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	7c 83       	std	Y+4, r23	; 0x04
     3d4:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	9c 81       	ldd	r25, Y+4	; 0x04
     3da:	89 2b       	or	r24, r25
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <_ZN5Print5writeEPKc+0x26>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	15 c0       	rjmp	.+42     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
      return write((const uint8_t *)str, strlen(str));
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	02 96       	adiw	r24, 0x02	; 2
     3f0:	fc 01       	movw	r30, r24
     3f2:	00 81       	ld	r16, Z
     3f4:	11 81       	ldd	r17, Z+1	; 0x01
     3f6:	8b 81       	ldd	r24, Y+3	; 0x03
     3f8:	9c 81       	ldd	r25, Y+4	; 0x04
     3fa:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <strlen>
     3fe:	ac 01       	movw	r20, r24
     400:	2b 81       	ldd	r18, Y+3	; 0x03
     402:	3c 81       	ldd	r19, Y+4	; 0x04
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	b9 01       	movw	r22, r18
     40a:	f8 01       	movw	r30, r16
     40c:	19 95       	eicall
    }
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	00 d0       	rcall	.+0      	; 0x426 <_ZN14HardwareSerial5beginEm+0x6>
     426:	00 d0       	rcall	.+0      	; 0x428 <_ZN14HardwareSerial5beginEm+0x8>
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	4b 83       	std	Y+3, r20	; 0x03
     432:	5c 83       	std	Y+4, r21	; 0x04
     434:	6d 83       	std	Y+5, r22	; 0x05
     436:	7e 83       	std	Y+6, r23	; 0x06
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	ad 81       	ldd	r26, Y+5	; 0x05
     43e:	be 81       	ldd	r27, Y+6	; 0x06
     440:	e9 81       	ldd	r30, Y+1	; 0x01
     442:	fa 81       	ldd	r31, Y+2	; 0x02
     444:	26 e0       	ldi	r18, 0x06	; 6
     446:	ac 01       	movw	r20, r24
     448:	bd 01       	movw	r22, r26
     44a:	cf 01       	movw	r24, r30
     44c:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <_ZN14HardwareSerial5beginEmh>
     450:	00 00       	nop
     452:	26 96       	adiw	r28, 0x06	; 6
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	1f 92       	push	r1
     46a:	1f 92       	push	r1
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	1f 92       	push	r1
     486:	1f 92       	push	r1
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	27 ec       	ldi	r18, 0xC7	; 199
     492:	32 e0       	ldi	r19, 0x02	; 2
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	fc 01       	movw	r30, r24
     49a:	31 83       	std	Z+1, r19	; 0x01
     49c:	20 83       	st	Z, r18
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	89 2b       	or	r24, r25
     4a4:	21 f0       	breq	.+8      	; 0x4ae <_ZN15Adafruit_SensorD1Ev+0x2e>
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZdlPv>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <_ZN15Adafruit_SensorD0Ev>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	1f 92       	push	r1
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	d9 df       	rcall	.-78     	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZdlPv>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     4f0:	00 00       	nop
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	00 d0       	rcall	.+0      	; 0x504 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	7c 83       	std	Y+4, r23	; 0x04
     510:	6b 83       	std	Y+3, r22	; 0x03
     512:	27 ec       	ldi	r18, 0xC7	; 199
     514:	32 e0       	ldi	r19, 0x02	; 2
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	31 83       	std	Z+1, r19	; 0x01
     51e:	20 83       	st	Z, r18
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	fc 01       	movw	r30, r24
     526:	22 81       	ldd	r18, Z+2	; 0x02
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	22 83       	std	Z+2, r18	; 0x02
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	00 d0       	rcall	.+0      	; 0x546 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     546:	1f 92       	push	r1
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	7c 83       	std	Y+4, r23	; 0x04
     552:	6b 83       	std	Y+3, r22	; 0x03
     554:	2b 81       	ldd	r18, Y+3	; 0x03
     556:	3c 81       	ldd	r19, Y+4	; 0x04
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	b9 01       	movw	r22, r18
     55e:	cf df       	rcall	.-98     	; 0x4fe <_ZN15Adafruit_SensorC1ERKS_>
     560:	23 ee       	ldi	r18, 0xE3	; 227
     562:	32 e0       	ldi	r19, 0x02	; 2
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	9a 81       	ldd	r25, Y+2	; 0x02
     568:	fc 01       	movw	r30, r24
     56a:	31 83       	std	Z+1, r19	; 0x01
     56c:	20 83       	st	Z, r18
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	23 81       	ldd	r18, Z+3	; 0x03
     576:	34 81       	ldd	r19, Z+4	; 0x04
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	fc 01       	movw	r30, r24
     57e:	34 83       	std	Z+4, r19	; 0x04
     580:	23 83       	std	Z+3, r18	; 0x03
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	fc 01       	movw	r30, r24
     588:	85 81       	ldd	r24, Z+5	; 0x05
     58a:	96 81       	ldd	r25, Z+6	; 0x06
     58c:	a7 81       	ldd	r26, Z+7	; 0x07
     58e:	b0 85       	ldd	r27, Z+8	; 0x08
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	3a 81       	ldd	r19, Y+2	; 0x02
     594:	f9 01       	movw	r30, r18
     596:	85 83       	std	Z+5, r24	; 0x05
     598:	96 83       	std	Z+6, r25	; 0x06
     59a:	a7 83       	std	Z+7, r26	; 0x07
     59c:	b0 87       	std	Z+8, r27	; 0x08
     59e:	00 00       	nop
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <_ZN11DHT_Unified11temperatureEv+0x6>
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	7c 83       	std	Y+4, r23	; 0x04
     5c0:	6b 83       	std	Y+3, r22	; 0x03
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	9c 81       	ldd	r25, Y+4	; 0x04
     5c6:	9c 01       	movw	r18, r24
     5c8:	2c 5e       	subi	r18, 0xEC	; 236
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	b9 01       	movw	r22, r18
     5d2:	b6 df       	rcall	.-148    	; 0x540 <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     5ec:	1f 92       	push	r1
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	89 83       	std	Y+1, r24	; 0x01
     5f6:	7c 83       	std	Y+4, r23	; 0x04
     5f8:	6b 83       	std	Y+3, r22	; 0x03
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	b9 01       	movw	r22, r18
     604:	7c df       	rcall	.-264    	; 0x4fe <_ZN15Adafruit_SensorC1ERKS_>
     606:	25 ed       	ldi	r18, 0xD5	; 213
     608:	32 e0       	ldi	r19, 0x02	; 2
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	fc 01       	movw	r30, r24
     610:	31 83       	std	Z+1, r19	; 0x01
     612:	20 83       	st	Z, r18
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	23 81       	ldd	r18, Z+3	; 0x03
     61c:	34 81       	ldd	r19, Z+4	; 0x04
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	fc 01       	movw	r30, r24
     624:	34 83       	std	Z+4, r19	; 0x04
     626:	23 83       	std	Z+3, r18	; 0x03
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	fc 01       	movw	r30, r24
     62e:	85 81       	ldd	r24, Z+5	; 0x05
     630:	96 81       	ldd	r25, Z+6	; 0x06
     632:	a7 81       	ldd	r26, Z+7	; 0x07
     634:	b0 85       	ldd	r27, Z+8	; 0x08
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	f9 01       	movw	r30, r18
     63c:	85 83       	std	Z+5, r24	; 0x05
     63e:	96 83       	std	Z+6, r25	; 0x06
     640:	a7 83       	std	Z+7, r26	; 0x07
     642:	b0 87       	std	Z+8, r27	; 0x08
     644:	00 00       	nop
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	00 d0       	rcall	.+0      	; 0x65a <_ZN11DHT_Unified8humidityEv+0x6>
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	7c 83       	std	Y+4, r23	; 0x04
     666:	6b 83       	std	Y+3, r22	; 0x03
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	9c 01       	movw	r18, r24
     66e:	23 5e       	subi	r18, 0xE3	; 227
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	b9 01       	movw	r22, r18
     678:	b6 df       	rcall	.-148    	; 0x5e6 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <_ZN7TwoWire5writeEi+0x6>
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	7c 83       	std	Y+4, r23	; 0x04
     69e:	6b 83       	std	Y+3, r22	; 0x03
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 81       	ld	r18, Z
     6ae:	31 81       	ldd	r19, Z+1	; 0x01
     6b0:	4b 81       	ldd	r20, Y+3	; 0x03
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	64 2f       	mov	r22, r20
     6b8:	f9 01       	movw	r30, r18
     6ba:	19 95       	eicall
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	eb 97       	sbiw	r28, 0x3b	; 59
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	55 e2       	ldi	r21, 0x25	; 37
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	95 e0       	ldi	r25, 0x05	; 5
     6ea:	9a de       	rcall	.-716    	; 0x420 <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     6ec:	8a ef       	ldi	r24, 0xFA	; 250
     6ee:	94 e0       	ldi	r25, 0x04	; 4
     6f0:	0e 94 67 28 	call	0x50ce	; 0x50ce <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     6f4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6f8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     702:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     706:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     710:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     714:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     71e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     722:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	ee d2       	rcall	.+1500   	; 0xd0c <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     730:	86 e5       	ldi	r24, 0x56	; 86
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     738:	ce 01       	movw	r24, r28
     73a:	0b 96       	adiw	r24, 0x0b	; 11
     73c:	66 e5       	ldi	r22, 0x56	; 86
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	36 df       	rcall	.-404    	; 0x5ae <_ZN11DHT_Unified11temperatureEv>
     742:	9e 01       	movw	r18, r28
     744:	2c 5e       	subi	r18, 0xEC	; 236
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	ce 01       	movw	r24, r28
     74a:	0b 96       	adiw	r24, 0x0b	; 11
     74c:	b9 01       	movw	r22, r18
     74e:	0e 94 37 10 	call	0x206e	; 0x206e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     752:	ce 01       	movw	r24, r28
     754:	0b 96       	adiw	r24, 0x0b	; 11
     756:	37 d4       	rcall	.+2158   	; 0xfc6 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     758:	ce 01       	movw	r24, r28
     75a:	02 96       	adiw	r24, 0x02	; 2
     75c:	66 e5       	ldi	r22, 0x56	; 86
     75e:	73 e0       	ldi	r23, 0x03	; 3
     760:	79 df       	rcall	.-270    	; 0x654 <_ZN11DHT_Unified8humidityEv>
     762:	9e 01       	movw	r18, r28
     764:	2c 5e       	subi	r18, 0xEC	; 236
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	ce 01       	movw	r24, r28
     76a:	02 96       	adiw	r24, 0x02	; 2
     76c:	b9 01       	movw	r22, r18
     76e:	0e 94 cc 11 	call	0x2398	; 0x2398 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     772:	ce 01       	movw	r24, r28
     774:	02 96       	adiw	r24, 0x02	; 2
     776:	5a d4       	rcall	.+2228   	; 0x102c <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     778:	88 ad       	ldd	r24, Y+56	; 0x38
     77a:	99 ad       	ldd	r25, Y+57	; 0x39
     77c:	aa ad       	ldd	r26, Y+58	; 0x3a
     77e:	bb ad       	ldd	r27, Y+59	; 0x3b
     780:	28 ee       	ldi	r18, 0xE8	; 232
     782:	33 e0       	ldi	r19, 0x03	; 3
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 82 34 	call	0x6904	; 0x6904 <__divmodsi4>
     790:	da 01       	movw	r26, r20
     792:	c9 01       	movw	r24, r18
     794:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <delayMS>
     798:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <delayMS+0x1>
     79c:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <delayMS+0x2>
     7a0:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	95 e0       	ldi	r25, 0x05	; 5
     7a8:	5d de       	rcall	.-838    	; 0x464 <_ZN14HardwareSerialcvbEv>
     7aa:	98 2f       	mov	r25, r24
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	89 27       	eor	r24, r25
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <setup+0xec>
     7b4:	f7 cf       	rjmp	.-18     	; 0x7a4 <setup+0xda>
  SPI.begin();         // Init SPI bus
     7b6:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     7ba:	86 e8       	ldi	r24, 0x86	; 134
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 bf 18 	call	0x317e	; 0x317e <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7c2:	19 82       	std	Y+1, r1	; 0x01
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	86 30       	cpi	r24, 0x06	; 6
     7c8:	60 f4       	brcc	.+24     	; 0x7e2 <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	8c 56       	subi	r24, 0x6C	; 108
     7d2:	9c 4f       	sbci	r25, 0xFC	; 252
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	f1 cf       	rjmp	.-30     	; 0x7c4 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     7e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     7e6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     7ea:	bc 01       	movw	r22, r24
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 3b 21 	call	0x4276	; 0x4276 <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 ea       	ldi	r24, 0xA0	; 160
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_ZN5Servo5writeEi>
#pragma endregion Servo Motor
 
 
#pragma region LCD Display

  lcd.init();                      // initialize the lcd
     800:	8a e4       	ldi	r24, 0x4A	; 74
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN17LiquidCrystal_I2C4initEv>
  lcd.init();
     808:	8a e4       	ldi	r24, 0x4A	; 74
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN17LiquidCrystal_I2C4initEv>
  // Print a message to the LCD.
  lcd.backlight();
     810:	8a e4       	ldi	r24, 0x4A	; 74
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 9f 14 	call	0x293e	; 0x293e <_ZN17LiquidCrystal_I2C9backlightEv>

#pragma endregion LCD Display
}
     818:	00 00       	nop
     81a:	eb 96       	adiw	r28, 0x3b	; 59
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <loop>:

void loop()
{
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	c3 54       	subi	r28, 0x43	; 67
     838:	d1 09       	sbc	r29, r1
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     844:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <delayMS>
     848:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <delayMS+0x1>
     84c:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <delayMS+0x2>
     850:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <delayMS+0x3>
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     85c:	ce 01       	movw	r24, r28
     85e:	41 96       	adiw	r24, 0x11	; 17
     860:	66 e5       	ldi	r22, 0x56	; 86
     862:	73 e0       	ldi	r23, 0x03	; 3
     864:	a4 de       	rcall	.-696    	; 0x5ae <_ZN11DHT_Unified11temperatureEv>
     866:	9e 01       	movw	r18, r28
     868:	26 5e       	subi	r18, 0xE6	; 230
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	ce 01       	movw	r24, r28
     86e:	41 96       	adiw	r24, 0x11	; 17
     870:	b9 01       	movw	r22, r18
     872:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     876:	ce 01       	movw	r24, r28
     878:	41 96       	adiw	r24, 0x11	; 17
     87a:	a5 d3       	rcall	.+1866   	; 0xfc6 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     87c:	8e a5       	ldd	r24, Y+46	; 0x2e
     87e:	9f a5       	ldd	r25, Y+47	; 0x2f
     880:	a8 a9       	ldd	r26, Y+48	; 0x30
     882:	b9 a9       	ldd	r27, Y+49	; 0x31
     884:	11 e0       	ldi	r17, 0x01	; 1
     886:	9c 01       	movw	r18, r24
     888:	ad 01       	movw	r20, r26
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__unordsf2>
     892:	88 23       	and	r24, r24
     894:	09 f4       	brne	.+2      	; 0x898 <loop+0x6c>
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	11 23       	and	r17, r17
     89a:	29 f0       	breq	.+10     	; 0x8a6 <loop+0x7a>
	{
		DhtSencorTemp = 0;
     89c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <DhtSencorTemp+0x1>
     8a0:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <DhtSencorTemp>
     8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <loop+0x96>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     8a6:	8e a5       	ldd	r24, Y+46	; 0x2e
     8a8:	9f a5       	ldd	r25, Y+47	; 0x2f
     8aa:	a8 a9       	ldd	r26, Y+48	; 0x30
     8ac:	b9 a9       	ldd	r27, Y+49	; 0x31
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	0e 94 8d 2b 	call	0x571a	; 0x571a <__fixsfsi>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <DhtSencorTemp+0x1>
     8be:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     8c2:	ce 01       	movw	r24, r28
     8c4:	08 96       	adiw	r24, 0x08	; 8
     8c6:	66 e5       	ldi	r22, 0x56	; 86
     8c8:	73 e0       	ldi	r23, 0x03	; 3
     8ca:	c4 de       	rcall	.-632    	; 0x654 <_ZN11DHT_Unified8humidityEv>
     8cc:	9e 01       	movw	r18, r28
     8ce:	26 5e       	subi	r18, 0xE6	; 230
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	ce 01       	movw	r24, r28
     8d4:	08 96       	adiw	r24, 0x08	; 8
     8d6:	b9 01       	movw	r22, r18
     8d8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     8dc:	ce 01       	movw	r24, r28
     8de:	08 96       	adiw	r24, 0x08	; 8
     8e0:	a5 d3       	rcall	.+1866   	; 0x102c <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     8e2:	8e a5       	ldd	r24, Y+46	; 0x2e
     8e4:	9f a5       	ldd	r25, Y+47	; 0x2f
     8e6:	a8 a9       	ldd	r26, Y+48	; 0x30
     8e8:	b9 a9       	ldd	r27, Y+49	; 0x31
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	9c 01       	movw	r18, r24
     8ee:	ad 01       	movw	r20, r26
     8f0:	bc 01       	movw	r22, r24
     8f2:	cd 01       	movw	r24, r26
     8f4:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__unordsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <loop+0xd2>
     8fc:	10 e0       	ldi	r17, 0x00	; 0
     8fe:	11 23       	and	r17, r17
     900:	29 f0       	breq	.+10     	; 0x90c <loop+0xe0>
	{
		DhtSencorHum = 0;
     902:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <DhtSencorHum+0x1>
     906:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <DhtSencorHum>
     90a:	0e c0       	rjmp	.+28     	; 0x928 <loop+0xfc>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     90c:	8e a5       	ldd	r24, Y+46	; 0x2e
     90e:	9f a5       	ldd	r25, Y+47	; 0x2f
     910:	a8 a9       	ldd	r26, Y+48	; 0x30
     912:	b9 a9       	ldd	r27, Y+49	; 0x31
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	0e 94 8d 2b 	call	0x571a	; 0x571a <__fixsfsi>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <DhtSencorHum+0x1>
     924:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <DhtSencorHum>
	}
	
#pragma endregion DHT Humidity

	// Alarm the user if conditions are critical
	if (DhtSencorTemp > 27 || DhtSencorHum > 70)
     928:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     92c:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     930:	4c 97       	sbiw	r24, 0x1c	; 28
     932:	3c f4       	brge	.+14     	; 0x942 <loop+0x116>
     934:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     938:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     93c:	87 34       	cpi	r24, 0x47	; 71
     93e:	91 05       	cpc	r25, r1
     940:	e4 f0       	brlt	.+56     	; 0x97a <loop+0x14e>
	{
		if (DhtSencorTemp > 27)
     942:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     946:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     94a:	4c 97       	sbiw	r24, 0x1c	; 28
     94c:	34 f0       	brlt	.+12     	; 0x95a <loop+0x12e>
		{
			Serial.println("ALARM: The temperature is to high");
     94e:	6e e0       	ldi	r22, 0x0E	; 14
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	95 e0       	ldi	r25, 0x05	; 5
     956:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <_ZN5Print7printlnEPKc>
		}
		if (DhtSencorHum > 70)
     95a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     95e:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     962:	87 34       	cpi	r24, 0x47	; 71
     964:	91 05       	cpc	r25, r1
     966:	34 f0       	brlt	.+12     	; 0x974 <loop+0x148>
		{
			Serial.println("ALARM: Humidity levels is to high");
     968:	60 e3       	ldi	r22, 0x30	; 48
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	95 e0       	ldi	r25, 0x05	; 5
     970:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <_ZN5Print7printlnEPKc>
		}
		makeBipSound(3); // ALARM sound
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	4e d2       	rcall	.+1180   	; 0xe16 <_Z12makeBipSoundi>

#pragma region LCD Display

	// Print a message to the LCD.

	lcd.setCursor(1,0);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	8a e4       	ldi	r24, 0x4A	; 74
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("Temp: ");
     986:	62 e5       	ldi	r22, 0x52	; 82
     988:	72 e0       	ldi	r23, 0x02	; 2
     98a:	8a e4       	ldi	r24, 0x4A	; 74
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <_ZN5Print5printEPKc>
	lcd.print(DhtSencorTemp);
     992:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     996:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     99a:	4a e0       	ldi	r20, 0x0A	; 10
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	bc 01       	movw	r22, r24
     9a0:	8a e4       	ldi	r24, 0x4A	; 74
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <_ZN5Print5printEii>

	lcd.setCursor(1,1);
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	8a e4       	ldi	r24, 0x4A	; 74
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("Hum: ");
     9b4:	69 e5       	ldi	r22, 0x59	; 89
     9b6:	72 e0       	ldi	r23, 0x02	; 2
     9b8:	8a e4       	ldi	r24, 0x4A	; 74
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <_ZN5Print5printEPKc>
	lcd.print(DhtSencorHum);
     9c0:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     9c4:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     9c8:	4a e0       	ldi	r20, 0x0A	; 10
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	bc 01       	movw	r22, r24
     9ce:	8a e4       	ldi	r24, 0x4A	; 74
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <_ZN5Print5printEii>
#pragma endregion LCD Display

	// Send values to MKR WIFI 110 board
#pragma region Master Writer/Slave Receiver
  
  Wire.beginTransmission(4);		// transmit to device #4
     9d6:	64 e0       	ldi	r22, 0x04	; 4
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	8a ef       	ldi	r24, 0xFA	; 250
     9dc:	94 e0       	ldi	r25, 0x04	; 4
     9de:	0e 94 54 29 	call	0x52a8	; 0x52a8 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     9e2:	62 e5       	ldi	r22, 0x52	; 82
     9e4:	72 e0       	ldi	r23, 0x02	; 2
     9e6:	8a ef       	ldi	r24, 0xFA	; 250
     9e8:	94 e0       	ldi	r25, 0x04	; 4
     9ea:	e9 dc       	rcall	.-1582   	; 0x3be <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     9ec:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <DhtSencorTemp>
     9f0:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <DhtSencorTemp+0x1>
     9f4:	bc 01       	movw	r22, r24
     9f6:	8a ef       	ldi	r24, 0xFA	; 250
     9f8:	94 e0       	ldi	r25, 0x04	; 4
     9fa:	48 de       	rcall	.-880    	; 0x68c <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     9fc:	8a ef       	ldi	r24, 0xFA	; 250
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     a04:	64 e0       	ldi	r22, 0x04	; 4
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	8a ef       	ldi	r24, 0xFA	; 250
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	0e 94 54 29 	call	0x52a8	; 0x52a8 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");				// sends some bytes
     a10:	69 e5       	ldi	r22, 0x59	; 89
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	8a ef       	ldi	r24, 0xFA	; 250
     a16:	94 e0       	ldi	r25, 0x04	; 4
  Wire.write(DhtSencorHum);		    // sends some bytes
     a18:	d2 dc       	rcall	.-1628   	; 0x3be <_ZN5Print5writeEPKc>
     a1a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <DhtSencorHum>
     a1e:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <DhtSencorHum+0x1>
     a22:	bc 01       	movw	r22, r24
     a24:	8a ef       	ldi	r24, 0xFA	; 250
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	31 de       	rcall	.-926    	; 0x68c <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     a2a:	8a ef       	ldi	r24, 0xFA	; 250
     a2c:	94 e0       	ldi	r25, 0x04	; 4
     a2e:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4
     a32:	47 e0       	ldi	r20, 0x07	; 7
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	8a ef       	ldi	r24, 0xFA	; 250
     a3c:	94 e0       	ldi	r25, 0x04	; 4
     a3e:	0e 94 1f 29 	call	0x523e	; 0x523e <_ZN7TwoWire11requestFromEii>

	String keyword =  "";
     a42:	ce 01       	movw	r24, r28
     a44:	ce 96       	adiw	r24, 0x3e	; 62
     a46:	6f e5       	ldi	r22, 0x5F	; 95
     a48:	72 e0       	ldi	r23, 0x02	; 2
     a4a:	0e 94 92 32 	call	0x6524	; 0x6524 <_ZN6StringC1EPKc>
	// slave may send less than requested
	while (Wire.available()) 
     a4e:	8a ef       	ldi	r24, 0xFA	; 250
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	0e 94 1f 2a 	call	0x543e	; 0x543e <_ZN7TwoWire9availableEv>
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	89 2b       	or	r24, r25
     a5a:	09 f4       	brne	.+2      	; 0xa5e <loop+0x232>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	22 23       	and	r18, r18
	{ 
		char request_c = Wire.read();		// receive a byte as character
     a60:	51 f0       	breq	.+20     	; 0xa76 <loop+0x24a>
     a62:	8a ef       	ldi	r24, 0xFA	; 250
     a64:	94 e0       	ldi	r25, 0x04	; 4
     a66:	0e 94 38 2a 	call	0x5470	; 0x5470 <_ZN7TwoWire4readEv>
		keyword += request_c;
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	ce 01       	movw	r24, r28
     a6e:	ce 96       	adiw	r24, 0x3e	; 62
     a70:	69 81       	ldd	r22, Y+1	; 0x01
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
	// slave may send less than requested
	while (Wire.available()) 
     a72:	22 dc       	rcall	.-1980   	; 0x2b8 <_ZN6StringpLEc>
	{ 
		char request_c = Wire.read();		// receive a byte as character
		keyword += request_c;
	}
	keyword += Wire.read();        // receive byte as an integer
     a74:	ec cf       	rjmp	.-40     	; 0xa4e <loop+0x222>
     a76:	8a ef       	ldi	r24, 0xFA	; 250
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	0e 94 38 2a 	call	0x5470	; 0x5470 <_ZN7TwoWire4readEv>
     a7e:	9c 01       	movw	r18, r24
     a80:	ce 01       	movw	r24, r28
     a82:	ce 96       	adiw	r24, 0x3e	; 62
     a84:	b9 01       	movw	r22, r18
	
	// Removes the last char in the received string
	 keyword = keyword.substring(0, keyword.length() - 1);
     a86:	2d dc       	rcall	.-1958   	; 0x2e2 <_ZN6StringpLEi>
     a88:	ce 01       	movw	r24, r28
     a8a:	ce 96       	adiw	r24, 0x3e	; 62
     a8c:	03 dc       	rcall	.-2042   	; 0x294 <_ZNK6String6lengthEv>
     a8e:	9c 01       	movw	r18, r24
     a90:	21 50       	subi	r18, 0x01	; 1
     a92:	31 09       	sbc	r19, r1
     a94:	ce 01       	movw	r24, r28
     a96:	02 96       	adiw	r24, 0x02	; 2
     a98:	be 01       	movw	r22, r28
     a9a:	62 5c       	subi	r22, 0xC2	; 194
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZNK6String9substringEjj>
     aa6:	9e 01       	movw	r18, r28
     aa8:	2e 5f       	subi	r18, 0xFE	; 254
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	ce 01       	movw	r24, r28
     aae:	ce 96       	adiw	r24, 0x3e	; 62
     ab0:	b9 01       	movw	r22, r18
     ab2:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <_ZN6StringaSEOS_>
     ab6:	ce 01       	movw	r24, r28
     ab8:	02 96       	adiw	r24, 0x02	; 2
     aba:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
	 
	 Serial.println(keyword);
     abe:	ce 01       	movw	r24, r28
     ac0:	ce 96       	adiw	r24, 0x3e	; 62
     ac2:	bc 01       	movw	r22, r24
     ac4:	86 e0       	ldi	r24, 0x06	; 6
     ac6:	95 e0       	ldi	r25, 0x05	; 5
     ac8:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZN5Print7printlnERK6String>
	 
	// Verify incoming data
	if (keyword == "TOGGLE")
     acc:	ce 01       	movw	r24, r28
     ace:	ce 96       	adiw	r24, 0x3e	; 62
     ad0:	60 e6       	ldi	r22, 0x60	; 96
     ad2:	72 e0       	ldi	r23, 0x02	; 2
     ad4:	38 dc       	rcall	.-1936   	; 0x346 <_ZNK6StringeqEPKc>
     ad6:	98 2f       	mov	r25, r24
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	99 23       	and	r25, r25
     adc:	09 f4       	brne	.+2      	; 0xae0 <loop+0x2b4>
     ade:	80 e0       	ldi	r24, 0x00	; 0
	{
		// toggle servo position
		moveServo();
     ae0:	88 23       	and	r24, r24
	}
	if (keyword == "42")
     ae2:	09 f0       	breq	.+2      	; 0xae6 <loop+0x2ba>
     ae4:	48 d1       	rcall	.+656    	; 0xd76 <_Z9moveServov>
     ae6:	ce 01       	movw	r24, r28
     ae8:	ce 96       	adiw	r24, 0x3e	; 62
     aea:	67 e6       	ldi	r22, 0x67	; 103
     aec:	72 e0       	ldi	r23, 0x02	; 2
     aee:	2b dc       	rcall	.-1962   	; 0x346 <_ZNK6StringeqEPKc>
     af0:	98 2f       	mov	r25, r24
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	99 23       	and	r25, r25
     af6:	09 f4       	brne	.+2      	; 0xafa <loop+0x2ce>
	{
		// toggle servo position
		moveServo();
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	88 23       	and	r24, r24
	}
	if (keyword == "69")
     afc:	09 f0       	breq	.+2      	; 0xb00 <loop+0x2d4>
     afe:	3b d1       	rcall	.+630    	; 0xd76 <_Z9moveServov>
     b00:	ce 01       	movw	r24, r28
     b02:	ce 96       	adiw	r24, 0x3e	; 62
     b04:	6a e6       	ldi	r22, 0x6A	; 106
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	1e dc       	rcall	.-1988   	; 0x346 <_ZNK6StringeqEPKc>
     b0a:	98 2f       	mov	r25, r24
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	99 23       	and	r25, r25
     b10:	09 f4       	brne	.+2      	; 0xb14 <loop+0x2e8>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	88 23       	and	r24, r24
	{
		// toggle servo position
		moveServo();
     b16:	09 f0       	breq	.+2      	; 0xb1a <loop+0x2ee>
     b18:	2e d1       	rcall	.+604    	; 0xd76 <_Z9moveServov>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     b1a:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <isCardValid+0x1>
     b1e:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <isCardValid>

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     b22:	86 e8       	ldi	r24, 0x86	; 134
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     b2a:	98 2f       	mov	r25, r24
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	89 27       	eor	r24, r25
     b30:	88 23       	and	r24, r24
     b32:	49 f4       	brne	.+18     	; 0xb46 <loop+0x31a>
     b34:	86 e8       	ldi	r24, 0x86	; 134
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN7MFRC52219PICC_ReadCardSerialEv>
     b3c:	98 2f       	mov	r25, r24
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	89 27       	eor	r24, r25
     b42:	88 23       	and	r24, r24
     b44:	11 f0       	breq	.+4      	; 0xb4a <loop+0x31e>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <loop+0x320>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	88 23       	and	r24, r24
	{
		delay(50);
     b4e:	59 f0       	breq	.+22     	; 0xb66 <loop+0x33a>
     b50:	62 e3       	ldi	r22, 0x32	; 50
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
		isCardValid = 0;
     b5c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <isCardValid+0x1>
	}
	else 
	{
		isCardValid = RfidValidater();
     b60:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <isCardValid>
     b64:	19 c0       	rjmp	.+50     	; 0xb98 <loop+0x36c>
     b66:	2e d0       	rcall	.+92     	; 0xbc4 <_Z13RfidValidaterv>
     b68:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <isCardValid+0x1>

		// if card/chip is valid
		if (isCardValid == 1)
     b6c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <isCardValid>
     b70:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <isCardValid>
     b74:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <isCardValid+0x1>
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	29 f4       	brne	.+10     	; 0xb86 <loop+0x35a>
     b7c:	81 e0       	ldi	r24, 0x01	; 1
				
			// Move servo
			moveServo();
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	4a d1       	rcall	.+660    	; 0xe16 <_Z12makeBipSoundi>
     b82:	f9 d0       	rcall	.+498    	; 0xd76 <_Z9moveServov>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <loop+0x36c>
     b86:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <isCardValid>
     b8a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <isCardValid+0x1>
     b8e:	02 97       	sbiw	r24, 0x02	; 2
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     b90:	19 f4       	brne	.+6      	; 0xb98 <loop+0x36c>
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	3f d1       	rcall	.+638    	; 0xe16 <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     b98:	68 ee       	ldi	r22, 0xE8	; 232
     b9a:	73 e0       	ldi	r23, 0x03	; 3
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
     ba4:	ce 01       	movw	r24, r28
     ba6:	ce 96       	adiw	r24, 0x3e	; 62
     ba8:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
}
     bac:	00 00       	nop
     bae:	cd 5b       	subi	r28, 0xBD	; 189
     bb0:	df 4f       	sbci	r29, 0xFF	; 255
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	08 95       	ret

00000bc4 <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	69 97       	sbiw	r28, 0x19	; 25
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     bdc:	ce 01       	movw	r24, r28
     bde:	44 96       	adiw	r24, 0x14	; 20
     be0:	6f e5       	ldi	r22, 0x5F	; 95
     be2:	72 e0       	ldi	r23, 0x02	; 2
     be4:	0e 94 92 32 	call	0x6524	; 0x6524 <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     be8:	19 82       	std	Y+1, r1	; 0x01
     bea:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <mfrc522>
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	89 17       	cp	r24, r25
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <_Z13RfidValidaterv+0x32>
     bf4:	3e c0       	rjmp	.+124    	; 0xc72 <_Z13RfidValidaterv+0xae>
	{
		//Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
		//Serial.print(mfrc522.uid.uidByte[i], HEX);
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	89 57       	subi	r24, 0x79	; 121
     bfe:	9c 4f       	sbci	r25, 0xFC	; 252
     c00:	fc 01       	movw	r30, r24
     c02:	80 81       	ld	r24, Z
     c04:	80 31       	cpi	r24, 0x10	; 16
     c06:	18 f4       	brcc	.+6      	; 0xc0e <_Z13RfidValidaterv+0x4a>
     c08:	8d e6       	ldi	r24, 0x6D	; 109
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <_Z13RfidValidaterv+0x4e>
     c0e:	80 e7       	ldi	r24, 0x70	; 112
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	9e 01       	movw	r18, r28
     c14:	22 5f       	subi	r18, 0xF2	; 242
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	bc 01       	movw	r22, r24
     c1a:	c9 01       	movw	r24, r18
     c1c:	0e 94 92 32 	call	0x6524	; 0x6524 <_ZN6StringC1EPKc>
     c20:	9e 01       	movw	r18, r28
     c22:	22 5f       	subi	r18, 0xF2	; 242
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	ce 01       	movw	r24, r28
     c28:	44 96       	adiw	r24, 0x14	; 20
     c2a:	b9 01       	movw	r22, r18
     c2c:	0e 94 58 33 	call	0x66b0	; 0x66b0 <_ZN6String6concatERKS_>
     c30:	ce 01       	movw	r24, r28
     c32:	0e 96       	adiw	r24, 0x0e	; 14
     c34:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	89 57       	subi	r24, 0x79	; 121
     c40:	9c 4f       	sbci	r25, 0xFC	; 252
     c42:	fc 01       	movw	r30, r24
     c44:	20 81       	ld	r18, Z
     c46:	ce 01       	movw	r24, r28
     c48:	08 96       	adiw	r24, 0x08	; 8
     c4a:	40 e1       	ldi	r20, 0x10	; 16
     c4c:	62 2f       	mov	r22, r18
     c4e:	0e 94 01 33 	call	0x6602	; 0x6602 <_ZN6StringC1Ehh>
     c52:	9e 01       	movw	r18, r28
     c54:	28 5f       	subi	r18, 0xF8	; 248
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	ce 01       	movw	r24, r28
     c5a:	44 96       	adiw	r24, 0x14	; 20
     c5c:	b9 01       	movw	r22, r18
     c5e:	0e 94 58 33 	call	0x66b0	; 0x66b0 <_ZN6String6concatERKS_>
     c62:	ce 01       	movw	r24, r28
     c64:	08 96       	adiw	r24, 0x08	; 8
     c66:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	bc cf       	rjmp	.-136    	; 0xbea <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     c72:	ce 01       	movw	r24, r28
     c74:	44 96       	adiw	r24, 0x14	; 20
     c76:	0e 94 3f 34 	call	0x687e	; 0x687e <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     c7a:	ce 01       	movw	r24, r28
     c7c:	02 96       	adiw	r24, 0x02	; 2
     c7e:	9e 01       	movw	r18, r28
     c80:	2c 5e       	subi	r18, 0xEC	; 236
     c82:	3f 4f       	sbci	r19, 0xFF	; 255
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	b9 01       	movw	r22, r18
     c8a:	75 db       	rcall	.-2326   	; 0x376 <_ZNK6String9substringEj>
     c8c:	ce 01       	movw	r24, r28
     c8e:	02 96       	adiw	r24, 0x02	; 2
     c90:	6a e9       	ldi	r22, 0x9A	; 154
     c92:	73 e0       	ldi	r23, 0x03	; 3
     c94:	40 db       	rcall	.-2432   	; 0x316 <_ZNK6StringeqERKS_>
     c96:	11 e0       	ldi	r17, 0x01	; 1
     c98:	88 23       	and	r24, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <_Z13RfidValidaterv+0xda>
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	ce 01       	movw	r24, r28
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
     ca6:	11 23       	and	r17, r17
     ca8:	89 f0       	breq	.+34     	; 0xccc <_Z13RfidValidaterv+0x108>
	{
		Serial.println();
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	95 e0       	ldi	r25, 0x05	; 5
     cae:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     cb2:	62 e7       	ldi	r22, 0x72	; 114
     cb4:	72 e0       	ldi	r23, 0x02	; 2
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	95 e0       	ldi	r25, 0x05	; 5
     cba:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <_ZN5Print7printlnEPKc>
		Serial.println();
     cbe:	86 e0       	ldi	r24, 0x06	; 6
     cc0:	95 e0       	ldi	r25, 0x05	; 5
     cc2:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <_ZN5Print7printlnEv>
		return 1;
     cc6:	01 e0       	ldi	r16, 0x01	; 1
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	10 c0       	rjmp	.+32     	; 0xcec <_Z13RfidValidaterv+0x128>
	}
	else
	{
		Serial.println();
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	95 e0       	ldi	r25, 0x05	; 5
     cd0:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <_ZN5Print7printlnEv>
		Serial.println("Access denied");
     cd4:	64 e8       	ldi	r22, 0x84	; 132
     cd6:	72 e0       	ldi	r23, 0x02	; 2
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	95 e0       	ldi	r25, 0x05	; 5
     cdc:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <_ZN5Print7printlnEPKc>
		Serial.println();
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	95 e0       	ldi	r25, 0x05	; 5
     ce4:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <_ZN5Print7printlnEv>
		return 2;
     ce8:	02 e0       	ldi	r16, 0x02	; 2
     cea:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     cec:	ce 01       	movw	r24, r28
     cee:	44 96       	adiw	r24, 0x14	; 20
     cf0:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
     cf4:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     cf6:	69 96       	adiw	r28, 0x19	; 25
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	1f 92       	push	r1
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     d18:	99 81       	ldd	r25, Y+1	; 0x01
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 27       	eor	r24, r25
     d1e:	88 23       	and	r24, r24
     d20:	71 f0       	breq	.+28     	; 0xd3e <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     d22:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     d26:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     d30:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     d34:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
	}
	if (status == true)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	88 23       	and	r24, r24
     d42:	71 f0       	breq	.+28     	; 0xd60 <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     d44:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     d48:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     d52:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     d56:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
	}
	delay(100);
     d60:	64 e6       	ldi	r22, 0x64	; 100
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
}
     d6c:	00 00       	nop
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     d7e:	80 ea       	ldi	r24, 0xA0	; 160
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	0e 94 2e 23 	call	0x465c	; 0x465c <_ZN5Servo4readEv>
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	84 3b       	cpi	r24, 0xB4	; 180
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f0       	breq	.+2      	; 0xd90 <_Z9moveServov+0x1a>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	22 23       	and	r18, r18
     d92:	81 f0       	breq	.+32     	; 0xdb4 <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     d94:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     d98:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
		servo.write(0);
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	80 ea       	ldi	r24, 0xA0	; 160
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	ad df       	rcall	.-166    	; 0xd0c <_Z11SetRfidLedsb>
     db2:	27 c0       	rjmp	.+78     	; 0xe02 <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     db4:	80 ea       	ldi	r24, 0xA0	; 160
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	0e 94 2e 23 	call	0x465c	; 0x465c <_ZN5Servo4readEv>
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	89 2b       	or	r24, r25
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <_Z9moveServov+0x4e>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	22 23       	and	r18, r18
     dc6:	81 f0       	breq	.+32     	; 0xde8 <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     dc8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     dcc:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
		servo.write(180);
     dd6:	64 eb       	ldi	r22, 0xB4	; 180
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 ea       	ldi	r24, 0xA0	; 160
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	93 df       	rcall	.-218    	; 0xd0c <_Z11SetRfidLedsb>
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     de8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     dec:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
		servo.write(180);
     df6:	64 eb       	ldi	r22, 0xB4	; 180
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	80 ea       	ldi	r24, 0xA0	; 160
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_ZN5Servo5writeEi>
	}
	delay(100);
     e02:	64 e6       	ldi	r22, 0x64	; 100
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
}
     e0e:	00 00       	nop
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <_Z12makeBipSoundi+0x6>
     e1c:	1f 92       	push	r1
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	a9 f4       	brne	.+42     	; 0xe58 <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     e2e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e32:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
		delay(100);
     e3c:	64 e6       	ldi	r22, 0x64	; 100
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     e48:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e4c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
     e56:	35 c0       	rjmp	.+106    	; 0xec2 <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	02 97       	sbiw	r24, 0x02	; 2
     e5e:	31 f5       	brne	.+76     	; 0xeac <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     e60:	1a 82       	std	Y+2, r1	; 0x02
     e62:	19 82       	std	Y+1, r1	; 0x01
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	03 97       	sbiw	r24, 0x03	; 3
     e6a:	5c f5       	brge	.+86     	; 0xec2 <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     e6c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e70:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
			delay(100);						// tone length
     e7a:	64 e6       	ldi	r22, 0x64	; 100
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     e86:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     e8a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
			delay(50);						// Interval between tones
     e94:	62 e3       	ldi	r22, 0x32	; 50
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	dc cf       	rjmp	.-72     	; 0xe64 <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	03 97       	sbiw	r24, 0x03	; 3
     eb2:	39 f4       	brne	.+14     	; 0xec2 <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     eb4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     eb8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
	}
	delay(100);
     ec2:	64 e6       	ldi	r22, 0x64	; 100
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
     ece:	00 00       	nop
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	1f 92       	push	r1
     ee4:	1f 92       	push	r1
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	4d 96       	adiw	r24, 0x1d	; 29
     ef4:	9b d0       	rcall	.+310    	; 0x102c <_ZN11DHT_Unified8HumidityD1Ev>
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	44 96       	adiw	r24, 0x14	; 20
     efc:	64 d0       	rcall	.+200    	; 0xfc6 <_ZN11DHT_Unified11TemperatureD1Ev>
     efe:	00 00       	nop
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <_Z41__static_initialization_and_destruction_0ii>:
     f0a:	af 92       	push	r10
     f0c:	bf 92       	push	r11
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <_Z41__static_initialization_and_destruction_0ii+0x16>
     f20:	1f 92       	push	r1
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	7c 83       	std	Y+4, r23	; 0x04
     f2c:	6b 83       	std	Y+3, r22	; 0x03
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	49 f5       	brne	.+82     	; 0xf88 <_Z41__static_initialization_and_destruction_0ii+0x7e>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	29 f5       	brne	.+74     	; 0xf88 <_Z41__static_initialization_and_destruction_0ii+0x7e>
byte x = 0;
int BIP_PIN = 10;					// For ALARM and feed back sound effects

#pragma region LCD Display

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display
     f3e:	24 e0       	ldi	r18, 0x04	; 4
     f40:	44 e1       	ldi	r20, 0x14	; 20
     f42:	67 e2       	ldi	r22, 0x27	; 39
     f44:	8a e4       	ldi	r24, 0x4A	; 74
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN17LiquidCrystal_I2CC1Ehhh>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     f4c:	aa 24       	eor	r10, r10
     f4e:	aa 94       	dec	r10
     f50:	ba 2c       	mov	r11, r10
     f52:	65 01       	movw	r12, r10
     f54:	ee 24       	eor	r14, r14
     f56:	ea 94       	dec	r14
     f58:	fe 2c       	mov	r15, r14
     f5a:	87 01       	movw	r16, r14
     f5c:	26 e0       	ldi	r18, 0x06	; 6
     f5e:	4b e0       	ldi	r20, 0x0B	; 11
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	86 e5       	ldi	r24, 0x56	; 86
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	c3 d6       	rcall	.+3462   	; 0x1cee <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     f68:	45 e0       	ldi	r20, 0x05	; 5
     f6a:	65 e3       	ldi	r22, 0x35	; 53
     f6c:	86 e8       	ldi	r24, 0x86	; 134
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	0e 94 92 16 	call	0x2d24	; 0x2d24 <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     f74:	62 e9       	ldi	r22, 0x92	; 146
     f76:	72 e0       	ldi	r23, 0x02	; 2
     f78:	8a e9       	ldi	r24, 0x9A	; 154
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 92 32 	call	0x6524	; 0x6524 <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     f80:	80 ea       	ldi	r24, 0xA0	; 160
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	0e 94 07 21 	call	0x420e	; 0x420e <_ZN5ServoC1Ev>
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	89 2b       	or	r24, r25
     f8e:	59 f4       	brne	.+22     	; 0xfa6 <_Z41__static_initialization_and_destruction_0ii+0x9c>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	39 f4       	brne	.+14     	; 0xfa6 <_Z41__static_initialization_and_destruction_0ii+0x9c>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     f98:	8a e9       	ldi	r24, 0x9A	; 154
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	0e 94 28 32 	call	0x6450	; 0x6450 <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     fa0:	86 e5       	ldi	r24, 0x56	; 86
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	9c df       	rcall	.-200    	; 0xede <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     fa6:	00 00       	nop
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	08 95       	ret

00000fc6 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	1f 92       	push	r1
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	23 ee       	ldi	r18, 0xE3	; 227
     fd8:	32 e0       	ldi	r19, 0x02	; 2
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	fc 01       	movw	r30, r24
     fe0:	31 83       	std	Z+1, r19	; 0x01
     fe2:	20 83       	st	Z, r18
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	4b da       	rcall	.-2922   	; 0x480 <_ZN15Adafruit_SensorD1Ev>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	89 2b       	or	r24, r25
     ff0:	21 f0       	breq	.+8      	; 0xffa <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZdlPv>
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <_ZN11DHT_Unified11TemperatureD0Ev>:
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	1f 92       	push	r1
    100a:	1f 92       	push	r1
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	d6 df       	rcall	.-84     	; 0xfc6 <_ZN11DHT_Unified11TemperatureD1Ev>
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZdlPv>
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	1f 92       	push	r1
    1032:	1f 92       	push	r1
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	25 ed       	ldi	r18, 0xD5	; 213
    103e:	32 e0       	ldi	r19, 0x02	; 2
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	fc 01       	movw	r30, r24
    1046:	31 83       	std	Z+1, r19	; 0x01
    1048:	20 83       	st	Z, r18
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	18 da       	rcall	.-3024   	; 0x480 <_ZN15Adafruit_SensorD1Ev>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	89 2b       	or	r24, r25
    1056:	21 f0       	breq	.+8      	; 0x1060 <_ZN11DHT_Unified8HumidityD1Ev+0x34>
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZdlPv>
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <_ZN11DHT_Unified8HumidityD0Ev>:
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	1f 92       	push	r1
    1070:	1f 92       	push	r1
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	d6 df       	rcall	.-84     	; 0x102c <_ZN11DHT_Unified8HumidityD1Ev>
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZdlPv>
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <_GLOBAL__sub_I_x>:
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	6f ef       	ldi	r22, 0xFF	; 255
    109c:	7f ef       	ldi	r23, 0xFF	; 255
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	33 df       	rcall	.-410    	; 0xf0a <_Z41__static_initialization_and_destruction_0ii>
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_GLOBAL__sub_D_x>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	6f ef       	ldi	r22, 0xFF	; 255
    10b4:	7f ef       	ldi	r23, 0xFF	; 255
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	27 df       	rcall	.-434    	; 0xf0a <_Z41__static_initialization_and_destruction_0ii>
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	1f 92       	push	r1
    10c8:	1f 92       	push	r1
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	f8 94       	cli
    10d4:	00 00       	nop
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <_ZN13InterruptLockD1Ev>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	1f 92       	push	r1
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	78 94       	sei
    10f2:	00 00       	nop
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <_ZN3DHTC1Ehhh>:
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2b 97       	sbiw	r28, 0x0b	; 11
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	8f 83       	std	Y+7, r24	; 0x07
    1116:	69 87       	std	Y+9, r22	; 0x09
    1118:	4a 87       	std	Y+10, r20	; 0x0a
    111a:	2b 87       	std	Y+11, r18	; 0x0b
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	98 85       	ldd	r25, Y+8	; 0x08
    1120:	29 85       	ldd	r18, Y+9	; 0x09
    1122:	fc 01       	movw	r30, r24
    1124:	25 83       	std	Z+5, r18	; 0x05
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	2a 85       	ldd	r18, Y+10	; 0x0a
    112c:	fc 01       	movw	r30, r24
    112e:	26 83       	std	Z+6, r18	; 0x06
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	82 5b       	subi	r24, 0xB2	; 178
    1138:	9e 4f       	sbci	r25, 0xFE	; 254
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	fc 01       	movw	r30, r24
    1144:	84 91       	lpm	r24, Z
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	8f 81       	ldd	r24, Y+7	; 0x07
    114a:	98 85       	ldd	r25, Y+8	; 0x08
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	fc 01       	movw	r30, r24
    1150:	27 83       	std	Z+7, r18	; 0x07
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	8c 56       	subi	r24, 0x6C	; 108
    115a:	9e 4f       	sbci	r25, 0xFE	; 254
    115c:	9d 83       	std	Y+5, r25	; 0x05
    115e:	8c 83       	std	Y+4, r24	; 0x04
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	fc 01       	movw	r30, r24
    1166:	84 91       	lpm	r24, Z
    1168:	8e 83       	std	Y+6, r24	; 0x06
    116a:	8f 81       	ldd	r24, Y+7	; 0x07
    116c:	98 85       	ldd	r25, Y+8	; 0x08
    116e:	2e 81       	ldd	r18, Y+6	; 0x06
    1170:	fc 01       	movw	r30, r24
    1172:	20 87       	std	Z+8, r18	; 0x08
    1174:	2f 81       	ldd	r18, Y+7	; 0x07
    1176:	38 85       	ldd	r19, Y+8	; 0x08
    1178:	80 e8       	ldi	r24, 0x80	; 128
    117a:	9e e3       	ldi	r25, 0x3E	; 62
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	f9 01       	movw	r30, r18
    1182:	85 87       	std	Z+13, r24	; 0x0d
    1184:	96 87       	std	Z+14, r25	; 0x0e
    1186:	a7 87       	std	Z+15, r26	; 0x0f
    1188:	b0 8b       	std	Z+16, r27	; 0x10
    118a:	00 00       	nop
    118c:	2b 96       	adiw	r28, 0x0b	; 11
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <_ZN3DHT5beginEh>:
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <_ZN3DHT5beginEh+0x6>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	6b 83       	std	Y+3, r22	; 0x03
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	fc 01       	movw	r30, r24
    11b4:	85 81       	ldd	r24, Z+5	; 0x05
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
    11bc:	0e 94 2a 30 	call	0x6054	; 0x6054 <millis>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	80 5d       	subi	r24, 0xD0	; 208
    11c6:	97 40       	sbci	r25, 0x07	; 7
    11c8:	a1 09       	sbc	r26, r1
    11ca:	b1 09       	sbc	r27, r1
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	3a 81       	ldd	r19, Y+2	; 0x02
    11d0:	f9 01       	movw	r30, r18
    11d2:	81 87       	std	Z+9, r24	; 0x09
    11d4:	92 87       	std	Z+10, r25	; 0x0a
    11d6:	a3 87       	std	Z+11, r26	; 0x0b
    11d8:	b4 87       	std	Z+12, r27	; 0x0c
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	2b 81       	ldd	r18, Y+3	; 0x03
    11e0:	fc 01       	movw	r30, r24
    11e2:	22 8b       	std	Z+18, r18	; 0x12
    11e4:	00 00       	nop
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <_ZN3DHT15readTemperatureEbb>:
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	28 97       	sbiw	r28, 0x08	; 8
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
    120a:	6f 83       	std	Y+7, r22	; 0x07
    120c:	48 87       	std	Y+8, r20	; 0x08
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 ec       	ldi	r26, 0xC0	; 192
    1214:	bf e7       	ldi	r27, 0x7F	; 127
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	ab 83       	std	Y+3, r26	; 0x03
    121c:	bc 83       	std	Y+4, r27	; 0x04
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	68 85       	ldd	r22, Y+8	; 0x08
    1224:	1d d2       	rcall	.+1082   	; 0x1660 <_ZN3DHT4readEb>
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <_ZN3DHT15readTemperatureEbb+0x3a>
    122a:	34 c1       	rjmp	.+616    	; 0x1494 <_ZN3DHT15readTemperatureEbb+0x2a2>
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	fc 01       	movw	r30, r24
    1232:	86 81       	ldd	r24, Z+6	; 0x06
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	8c 30       	cpi	r24, 0x0C	; 12
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <_ZN3DHT15readTemperatureEbb+0x4e>
    123e:	72 c0       	rjmp	.+228    	; 0x1324 <_ZN3DHT15readTemperatureEbb+0x132>
    1240:	8d 30       	cpi	r24, 0x0D	; 13
    1242:	91 05       	cpc	r25, r1
    1244:	1c f4       	brge	.+6      	; 0x124c <_ZN3DHT15readTemperatureEbb+0x5a>
    1246:	0b 97       	sbiw	r24, 0x0b	; 11
    1248:	31 f0       	breq	.+12     	; 0x1256 <_ZN3DHT15readTemperatureEbb+0x64>
    124a:	24 c1       	rjmp	.+584    	; 0x1494 <_ZN3DHT15readTemperatureEbb+0x2a2>
    124c:	45 97       	sbiw	r24, 0x15	; 21
    124e:	02 97       	sbiw	r24, 0x02	; 2
    1250:	08 f0       	brcs	.+2      	; 0x1254 <_ZN3DHT15readTemperatureEbb+0x62>
    1252:	20 c1       	rjmp	.+576    	; 0x1494 <_ZN3DHT15readTemperatureEbb+0x2a2>
    1254:	c7 c0       	rjmp	.+398    	; 0x13e4 <_ZN3DHT15readTemperatureEbb+0x1f2>
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	fc 01       	movw	r30, r24
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 be 2b 	call	0x577c	; 0x577c <__floatunsisf>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	ab 83       	std	Y+3, r26	; 0x03
    1278:	bc 83       	std	Y+4, r27	; 0x04
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	fc 01       	movw	r30, r24
    1280:	83 81       	ldd	r24, Z+3	; 0x03
    1282:	88 23       	and	r24, r24
    1284:	84 f4       	brge	.+32     	; 0x12a6 <_ZN3DHT15readTemperatureEbb+0xb4>
    1286:	29 81       	ldd	r18, Y+1	; 0x01
    1288:	3a 81       	ldd	r19, Y+2	; 0x02
    128a:	4b 81       	ldd	r20, Y+3	; 0x03
    128c:	5c 81       	ldd	r21, Y+4	; 0x04
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	80 e8       	ldi	r24, 0x80	; 128
    1294:	9f eb       	ldi	r25, 0xBF	; 191
    1296:	0e 94 28 2b 	call	0x5650	; 0x5650 <__subsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	ab 83       	std	Y+3, r26	; 0x03
    12a4:	bc 83       	std	Y+4, r27	; 0x04
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	fc 01       	movw	r30, r24
    12ac:	83 81       	ldd	r24, Z+3	; 0x03
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	8f 70       	andi	r24, 0x0F	; 15
    12b4:	99 27       	eor	r25, r25
    12b6:	09 2e       	mov	r0, r25
    12b8:	00 0c       	add	r0, r0
    12ba:	aa 0b       	sbc	r26, r26
    12bc:	bb 0b       	sbc	r27, r27
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__floatsisf>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	2d ec       	ldi	r18, 0xCD	; 205
    12cc:	3c ec       	ldi	r19, 0xCC	; 204
    12ce:	4c ec       	ldi	r20, 0xCC	; 204
    12d0:	5d e3       	ldi	r21, 0x3D	; 61
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9c 01       	movw	r18, r24
    12e0:	ad 01       	movw	r20, r26
    12e2:	69 81       	ldd	r22, Y+1	; 0x01
    12e4:	7a 81       	ldd	r23, Y+2	; 0x02
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	0e 94 29 2b 	call	0x5652	; 0x5652 <__addsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	ab 83       	std	Y+3, r26	; 0x03
    12f8:	bc 83       	std	Y+4, r27	; 0x04
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	88 23       	and	r24, r24
    12fe:	09 f4       	brne	.+2      	; 0x1302 <_ZN3DHT15readTemperatureEbb+0x110>
    1300:	c4 c0       	rjmp	.+392    	; 0x148a <_ZN3DHT15readTemperatureEbb+0x298>
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	ab 81       	ldd	r26, Y+3	; 0x03
    1308:	bc 81       	ldd	r27, Y+4	; 0x04
    130a:	2d 81       	ldd	r18, Y+5	; 0x05
    130c:	3e 81       	ldd	r19, Y+6	; 0x06
    130e:	ac 01       	movw	r20, r24
    1310:	bd 01       	movw	r22, r26
    1312:	c9 01       	movw	r24, r18
    1314:	ce d0       	rcall	.+412    	; 0x14b2 <_ZN3DHT11convertCtoFEf>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	ab 83       	std	Y+3, r26	; 0x03
    1320:	bc 83       	std	Y+4, r27	; 0x04
    1322:	b3 c0       	rjmp	.+358    	; 0x148a <_ZN3DHT15readTemperatureEbb+0x298>
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	fc 01       	movw	r30, r24
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 be 2b 	call	0x577c	; 0x577c <__floatunsisf>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	ab 83       	std	Y+3, r26	; 0x03
    1346:	bc 83       	std	Y+4, r27	; 0x04
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	fc 01       	movw	r30, r24
    134e:	83 81       	ldd	r24, Z+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	8f 70       	andi	r24, 0x0F	; 15
    1356:	99 27       	eor	r25, r25
    1358:	09 2e       	mov	r0, r25
    135a:	00 0c       	add	r0, r0
    135c:	aa 0b       	sbc	r26, r26
    135e:	bb 0b       	sbc	r27, r27
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__floatsisf>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	2d ec       	ldi	r18, 0xCD	; 205
    136e:	3c ec       	ldi	r19, 0xCC	; 204
    1370:	4c ec       	ldi	r20, 0xCC	; 204
    1372:	5d e3       	ldi	r21, 0x3D	; 61
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9c 01       	movw	r18, r24
    1382:	ad 01       	movw	r20, r26
    1384:	69 81       	ldd	r22, Y+1	; 0x01
    1386:	7a 81       	ldd	r23, Y+2	; 0x02
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	0e 94 29 2b 	call	0x5652	; 0x5652 <__addsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	ab 83       	std	Y+3, r26	; 0x03
    139a:	bc 83       	std	Y+4, r27	; 0x04
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	fc 01       	movw	r30, r24
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	88 23       	and	r24, r24
    13a6:	4c f4       	brge	.+18     	; 0x13ba <_ZN3DHT15readTemperatureEbb+0x1c8>
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	ab 81       	ldd	r26, Y+3	; 0x03
    13ae:	bc 81       	ldd	r27, Y+4	; 0x04
    13b0:	b0 58       	subi	r27, 0x80	; 128
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	ab 83       	std	Y+3, r26	; 0x03
    13b8:	bc 83       	std	Y+4, r27	; 0x04
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <_ZN3DHT15readTemperatureEbb+0x1d0>
    13c0:	66 c0       	rjmp	.+204    	; 0x148e <_ZN3DHT15readTemperatureEbb+0x29c>
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	ab 81       	ldd	r26, Y+3	; 0x03
    13c8:	bc 81       	ldd	r27, Y+4	; 0x04
    13ca:	2d 81       	ldd	r18, Y+5	; 0x05
    13cc:	3e 81       	ldd	r19, Y+6	; 0x06
    13ce:	ac 01       	movw	r20, r24
    13d0:	bd 01       	movw	r22, r26
    13d2:	c9 01       	movw	r24, r18
    13d4:	6e d0       	rcall	.+220    	; 0x14b2 <_ZN3DHT11convertCtoFEf>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	ab 83       	std	Y+3, r26	; 0x03
    13e0:	bc 83       	std	Y+4, r27	; 0x04
    13e2:	55 c0       	rjmp	.+170    	; 0x148e <_ZN3DHT15readTemperatureEbb+0x29c>
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	fc 01       	movw	r30, r24
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	8f 77       	andi	r24, 0x7F	; 127
    13f2:	99 27       	eor	r25, r25
    13f4:	38 2f       	mov	r19, r24
    13f6:	22 27       	eor	r18, r18
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	fc 01       	movw	r30, r24
    13fe:	83 81       	ldd	r24, Z+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	82 2b       	or	r24, r18
    1406:	93 2b       	or	r25, r19
    1408:	cc 01       	movw	r24, r24
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	bc 01       	movw	r22, r24
    1410:	cd 01       	movw	r24, r26
    1412:	0e 94 be 2b 	call	0x577c	; 0x577c <__floatunsisf>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	ab 83       	std	Y+3, r26	; 0x03
    1420:	bc 83       	std	Y+4, r27	; 0x04
    1422:	2d ec       	ldi	r18, 0xCD	; 205
    1424:	3c ec       	ldi	r19, 0xCC	; 204
    1426:	4c ec       	ldi	r20, 0xCC	; 204
    1428:	5d e3       	ldi	r21, 0x3D	; 61
    142a:	69 81       	ldd	r22, Y+1	; 0x01
    142c:	7a 81       	ldd	r23, Y+2	; 0x02
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	ab 83       	std	Y+3, r26	; 0x03
    1440:	bc 83       	std	Y+4, r27	; 0x04
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	fc 01       	movw	r30, r24
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	88 23       	and	r24, r24
    144c:	4c f4       	brge	.+18     	; 0x1460 <_ZN3DHT15readTemperatureEbb+0x26e>
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	ab 81       	ldd	r26, Y+3	; 0x03
    1454:	bc 81       	ldd	r27, Y+4	; 0x04
    1456:	b0 58       	subi	r27, 0x80	; 128
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	ab 83       	std	Y+3, r26	; 0x03
    145e:	bc 83       	std	Y+4, r27	; 0x04
    1460:	8f 81       	ldd	r24, Y+7	; 0x07
    1462:	88 23       	and	r24, r24
    1464:	b1 f0       	breq	.+44     	; 0x1492 <_ZN3DHT15readTemperatureEbb+0x2a0>
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	ab 81       	ldd	r26, Y+3	; 0x03
    146c:	bc 81       	ldd	r27, Y+4	; 0x04
    146e:	2d 81       	ldd	r18, Y+5	; 0x05
    1470:	3e 81       	ldd	r19, Y+6	; 0x06
    1472:	ac 01       	movw	r20, r24
    1474:	bd 01       	movw	r22, r26
    1476:	c9 01       	movw	r24, r18
    1478:	1c d0       	rcall	.+56     	; 0x14b2 <_ZN3DHT11convertCtoFEf>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	ab 83       	std	Y+3, r26	; 0x03
    1484:	bc 83       	std	Y+4, r27	; 0x04
    1486:	00 00       	nop
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <_ZN3DHT15readTemperatureEbb+0x2a0>
    148a:	00 00       	nop
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <_ZN3DHT15readTemperatureEbb+0x2a2>
    148e:	00 00       	nop
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <_ZN3DHT15readTemperatureEbb+0x2a2>
    1492:	00 00       	nop
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	ab 81       	ldd	r26, Y+3	; 0x03
    149a:	bc 81       	ldd	r27, Y+4	; 0x04
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	28 96       	adiw	r28, 0x08	; 8
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <_ZN3DHT11convertCtoFEf>:
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <_ZN3DHT11convertCtoFEf+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <_ZN3DHT11convertCtoFEf+0x8>
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	4b 83       	std	Y+3, r20	; 0x03
    14c4:	5c 83       	std	Y+4, r21	; 0x04
    14c6:	6d 83       	std	Y+5, r22	; 0x05
    14c8:	7e 83       	std	Y+6, r23	; 0x06
    14ca:	26 e6       	ldi	r18, 0x66	; 102
    14cc:	36 e6       	ldi	r19, 0x66	; 102
    14ce:	46 ee       	ldi	r20, 0xE6	; 230
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	6b 81       	ldd	r22, Y+3	; 0x03
    14d4:	7c 81       	ldd	r23, Y+4	; 0x04
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	52 e4       	ldi	r21, 0x42	; 66
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 29 2b 	call	0x5652	; 0x5652 <__addsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	bc 01       	movw	r22, r24
    14f8:	cd 01       	movw	r24, r26
    14fa:	26 96       	adiw	r28, 0x06	; 6
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <_ZN3DHT12readHumidityEb>:
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	27 97       	sbiw	r28, 0x07	; 7
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	6f 83       	std	Y+7, r22	; 0x07
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 ec       	ldi	r26, 0xC0	; 192
    1534:	bf e7       	ldi	r27, 0x7F	; 127
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	ab 83       	std	Y+3, r26	; 0x03
    153c:	bc 83       	std	Y+4, r27	; 0x04
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	8d d0       	rcall	.+282    	; 0x1660 <_ZN3DHT4readEb>
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <_ZN3DHT12readHumidityEb+0x40>
    154a:	77 c0       	rjmp	.+238    	; 0x163a <_ZN3DHT12readHumidityEb+0x12e>
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	fc 01       	movw	r30, r24
    1552:	86 81       	ldd	r24, Z+6	; 0x06
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	8b 30       	cpi	r24, 0x0B	; 11
    155a:	91 05       	cpc	r25, r1
    155c:	0c f4       	brge	.+2      	; 0x1560 <_ZN3DHT12readHumidityEb+0x54>
    155e:	6d c0       	rjmp	.+218    	; 0x163a <_ZN3DHT12readHumidityEb+0x12e>
    1560:	8d 30       	cpi	r24, 0x0D	; 13
    1562:	91 05       	cpc	r25, r1
    1564:	2c f0       	brlt	.+10     	; 0x1570 <_ZN3DHT12readHumidityEb+0x64>
    1566:	45 97       	sbiw	r24, 0x15	; 21
    1568:	02 97       	sbiw	r24, 0x02	; 2
    156a:	08 f0       	brcs	.+2      	; 0x156e <_ZN3DHT12readHumidityEb+0x62>
    156c:	66 c0       	rjmp	.+204    	; 0x163a <_ZN3DHT12readHumidityEb+0x12e>
    156e:	37 c0       	rjmp	.+110    	; 0x15de <_ZN3DHT12readHumidityEb+0xd2>
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	09 2e       	mov	r0, r25
    157e:	00 0c       	add	r0, r0
    1580:	aa 0b       	sbc	r26, r26
    1582:	bb 0b       	sbc	r27, r27
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__floatsisf>
    158c:	6b 01       	movw	r12, r22
    158e:	7c 01       	movw	r14, r24
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	fc 01       	movw	r30, r24
    1596:	81 81       	ldd	r24, Z+1	; 0x01
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	09 2e       	mov	r0, r25
    159e:	00 0c       	add	r0, r0
    15a0:	aa 0b       	sbc	r26, r26
    15a2:	bb 0b       	sbc	r27, r27
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__floatsisf>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	2d ec       	ldi	r18, 0xCD	; 205
    15b2:	3c ec       	ldi	r19, 0xCC	; 204
    15b4:	4c ec       	ldi	r20, 0xCC	; 204
    15b6:	5d e3       	ldi	r21, 0x3D	; 61
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9c 01       	movw	r18, r24
    15c6:	ad 01       	movw	r20, r26
    15c8:	c7 01       	movw	r24, r14
    15ca:	b6 01       	movw	r22, r12
    15cc:	0e 94 29 2b 	call	0x5652	; 0x5652 <__addsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	ab 83       	std	Y+3, r26	; 0x03
    15da:	bc 83       	std	Y+4, r27	; 0x04
    15dc:	2e c0       	rjmp	.+92     	; 0x163a <_ZN3DHT12readHumidityEb+0x12e>
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	fc 01       	movw	r30, r24
    15e4:	80 81       	ld	r24, Z
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	38 2f       	mov	r19, r24
    15ec:	22 27       	eor	r18, r18
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	fc 01       	movw	r30, r24
    15f4:	81 81       	ldd	r24, Z+1	; 0x01
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	82 2b       	or	r24, r18
    15fc:	93 2b       	or	r25, r19
    15fe:	cc 01       	movw	r24, r24
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 be 2b 	call	0x577c	; 0x577c <__floatunsisf>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	ab 83       	std	Y+3, r26	; 0x03
    1616:	bc 83       	std	Y+4, r27	; 0x04
    1618:	2d ec       	ldi	r18, 0xCD	; 205
    161a:	3c ec       	ldi	r19, 0xCC	; 204
    161c:	4c ec       	ldi	r20, 0xCC	; 204
    161e:	5d e3       	ldi	r21, 0x3D	; 61
    1620:	69 81       	ldd	r22, Y+1	; 0x01
    1622:	7a 81       	ldd	r23, Y+2	; 0x02
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	ab 83       	std	Y+3, r26	; 0x03
    1636:	bc 83       	std	Y+4, r27	; 0x04
    1638:	00 00       	nop
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	ab 81       	ldd	r26, Y+3	; 0x03
    1640:	bc 81       	ldd	r27, Y+4	; 0x04
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	27 96       	adiw	r28, 0x07	; 7
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	08 95       	ret

00001660 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	c4 55       	subi	r28, 0x54	; 84
    1678:	d1 40       	sbci	r29, 0x01	; 1
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9e 01       	movw	r18, r28
    1686:	2e 5a       	subi	r18, 0xAE	; 174
    1688:	3e 4f       	sbci	r19, 0xFE	; 254
    168a:	f9 01       	movw	r30, r18
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	ce 01       	movw	r24, r28
    1692:	8c 5a       	subi	r24, 0xAC	; 172
    1694:	9e 4f       	sbci	r25, 0xFE	; 254
    1696:	fc 01       	movw	r30, r24
    1698:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    169a:	0e 94 2a 30 	call	0x6054	; 0x6054 <millis>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	af 83       	std	Y+7, r26	; 0x07
    16a8:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    16aa:	ce 01       	movw	r24, r28
    16ac:	8c 5a       	subi	r24, 0xAC	; 172
    16ae:	9e 4f       	sbci	r25, 0xFE	; 254
    16b0:	fc 01       	movw	r30, r24
    16b2:	90 81       	ld	r25, Z
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	89 27       	eor	r24, r25
    16b8:	88 23       	and	r24, r24
    16ba:	29 f1       	breq	.+74     	; 0x1706 <_ZN3DHT4readEb+0xa6>
    16bc:	ce 01       	movw	r24, r28
    16be:	8e 5a       	subi	r24, 0xAE	; 174
    16c0:	9e 4f       	sbci	r25, 0xFE	; 254
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	fc 01       	movw	r30, r24
    16ca:	81 85       	ldd	r24, Z+9	; 0x09
    16cc:	92 85       	ldd	r25, Z+10	; 0x0a
    16ce:	a3 85       	ldd	r26, Z+11	; 0x0b
    16d0:	b4 85       	ldd	r27, Z+12	; 0x0c
    16d2:	2d 81       	ldd	r18, Y+5	; 0x05
    16d4:	3e 81       	ldd	r19, Y+6	; 0x06
    16d6:	4f 81       	ldd	r20, Y+7	; 0x07
    16d8:	58 85       	ldd	r21, Y+8	; 0x08
    16da:	59 01       	movw	r10, r18
    16dc:	6a 01       	movw	r12, r20
    16de:	a8 1a       	sub	r10, r24
    16e0:	b9 0a       	sbc	r11, r25
    16e2:	ca 0a       	sbc	r12, r26
    16e4:	db 0a       	sbc	r13, r27
    16e6:	d6 01       	movw	r26, r12
    16e8:	c5 01       	movw	r24, r10
    16ea:	80 3d       	cpi	r24, 0xD0	; 208
    16ec:	97 40       	sbci	r25, 0x07	; 7
    16ee:	a1 05       	cpc	r26, r1
    16f0:	b1 05       	cpc	r27, r1
    16f2:	48 f4       	brcc	.+18     	; 0x1706 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    16f4:	ce 01       	movw	r24, r28
    16f6:	8e 5a       	subi	r24, 0xAE	; 174
    16f8:	9e 4f       	sbci	r25, 0xFE	; 254
    16fa:	fc 01       	movw	r30, r24
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	fc 01       	movw	r30, r24
    1702:	f1 88       	ldd	r15, Z+17	; 0x11
    1704:	5f c2       	rjmp	.+1214   	; 0x1bc4 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    1706:	ce 01       	movw	r24, r28
    1708:	8e 5a       	subi	r24, 0xAE	; 174
    170a:	9e 4f       	sbci	r25, 0xFE	; 254
    170c:	fc 01       	movw	r30, r24
    170e:	20 81       	ld	r18, Z
    1710:	31 81       	ldd	r19, Z+1	; 0x01
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	af 81       	ldd	r26, Y+7	; 0x07
    1718:	b8 85       	ldd	r27, Y+8	; 0x08
    171a:	f9 01       	movw	r30, r18
    171c:	81 87       	std	Z+9, r24	; 0x09
    171e:	92 87       	std	Z+10, r25	; 0x0a
    1720:	a3 87       	std	Z+11, r26	; 0x0b
    1722:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    1724:	ce 01       	movw	r24, r28
    1726:	8e 5a       	subi	r24, 0xAE	; 174
    1728:	9e 4f       	sbci	r25, 0xFE	; 254
    172a:	fc 01       	movw	r30, r24
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	fc 01       	movw	r30, r24
    1732:	14 82       	std	Z+4, r1	; 0x04
    1734:	ce 01       	movw	r24, r28
    1736:	8e 5a       	subi	r24, 0xAE	; 174
    1738:	9e 4f       	sbci	r25, 0xFE	; 254
    173a:	fc 01       	movw	r30, r24
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	fc 01       	movw	r30, r24
    1742:	24 81       	ldd	r18, Z+4	; 0x04
    1744:	ce 01       	movw	r24, r28
    1746:	8e 5a       	subi	r24, 0xAE	; 174
    1748:	9e 4f       	sbci	r25, 0xFE	; 254
    174a:	fc 01       	movw	r30, r24
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	fc 01       	movw	r30, r24
    1752:	23 83       	std	Z+3, r18	; 0x03
    1754:	ce 01       	movw	r24, r28
    1756:	8e 5a       	subi	r24, 0xAE	; 174
    1758:	9e 4f       	sbci	r25, 0xFE	; 254
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	fc 01       	movw	r30, r24
    1762:	23 81       	ldd	r18, Z+3	; 0x03
    1764:	ce 01       	movw	r24, r28
    1766:	8e 5a       	subi	r24, 0xAE	; 174
    1768:	9e 4f       	sbci	r25, 0xFE	; 254
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	fc 01       	movw	r30, r24
    1772:	22 83       	std	Z+2, r18	; 0x02
    1774:	ce 01       	movw	r24, r28
    1776:	8e 5a       	subi	r24, 0xAE	; 174
    1778:	9e 4f       	sbci	r25, 0xFE	; 254
    177a:	fc 01       	movw	r30, r24
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	fc 01       	movw	r30, r24
    1782:	22 81       	ldd	r18, Z+2	; 0x02
    1784:	ce 01       	movw	r24, r28
    1786:	8e 5a       	subi	r24, 0xAE	; 174
    1788:	9e 4f       	sbci	r25, 0xFE	; 254
    178a:	fc 01       	movw	r30, r24
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	fc 01       	movw	r30, r24
    1792:	21 83       	std	Z+1, r18	; 0x01
    1794:	ce 01       	movw	r24, r28
    1796:	8e 5a       	subi	r24, 0xAE	; 174
    1798:	9e 4f       	sbci	r25, 0xFE	; 254
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	fc 01       	movw	r30, r24
    17a2:	21 81       	ldd	r18, Z+1	; 0x01
    17a4:	ce 01       	movw	r24, r28
    17a6:	8e 5a       	subi	r24, 0xAE	; 174
    17a8:	9e 4f       	sbci	r25, 0xFE	; 254
    17aa:	fc 01       	movw	r30, r24
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    17b4:	ce 01       	movw	r24, r28
    17b6:	8e 5a       	subi	r24, 0xAE	; 174
    17b8:	9e 4f       	sbci	r25, 0xFE	; 254
    17ba:	fc 01       	movw	r30, r24
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	fc 01       	movw	r30, r24
    17c2:	85 81       	ldd	r24, Z+5	; 0x05
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
  delay(1);
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    17d6:	ce 01       	movw	r24, r28
    17d8:	8e 5a       	subi	r24, 0xAE	; 174
    17da:	9e 4f       	sbci	r25, 0xFE	; 254
    17dc:	fc 01       	movw	r30, r24
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	fc 01       	movw	r30, r24
    17e4:	85 81       	ldd	r24, Z+5	; 0x05
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
  digitalWrite(_pin, LOW);
    17ec:	ce 01       	movw	r24, r28
    17ee:	8e 5a       	subi	r24, 0xAE	; 174
    17f0:	9e 4f       	sbci	r25, 0xFE	; 254
    17f2:	fc 01       	movw	r30, r24
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	fc 01       	movw	r30, r24
    17fa:	85 81       	ldd	r24, Z+5	; 0x05
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
  switch (_type) {
    1802:	ce 01       	movw	r24, r28
    1804:	8e 5a       	subi	r24, 0xAE	; 174
    1806:	9e 4f       	sbci	r25, 0xFE	; 254
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	fc 01       	movw	r30, r24
    1810:	86 81       	ldd	r24, Z+6	; 0x06
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	45 97       	sbiw	r24, 0x15	; 21
    1818:	02 97       	sbiw	r24, 0x02	; 2
    181a:	28 f4       	brcc	.+10     	; 0x1826 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    181c:	8c e4       	ldi	r24, 0x4C	; 76
    181e:	94 e0       	ldi	r25, 0x04	; 4
    1820:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
    break;
    1824:	07 c0       	rjmp	.+14     	; 0x1834 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    1826:	64 e1       	ldi	r22, 0x14	; 20
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
    break;
    1832:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    1834:	ce 01       	movw	r24, r28
    1836:	8e 5a       	subi	r24, 0xAE	; 174
    1838:	9e 4f       	sbci	r25, 0xFE	; 254
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	91 81       	ldd	r25, Z+1	; 0x01
    1840:	fc 01       	movw	r30, r24
    1842:	85 81       	ldd	r24, Z+5	; 0x05
    1844:	62 e0       	ldi	r22, 0x02	; 2
    1846:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    184a:	ce 01       	movw	r24, r28
    184c:	8e 5a       	subi	r24, 0xAE	; 174
    184e:	9e 4f       	sbci	r25, 0xFE	; 254
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	fc 01       	movw	r30, r24
    1858:	82 89       	ldd	r24, Z+18	; 0x12
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1862:	ce 01       	movw	r24, r28
    1864:	8f 5a       	subi	r24, 0xAF	; 175
    1866:	9e 4f       	sbci	r25, 0xFE	; 254
    1868:	2c dc       	rcall	.-1960   	; 0x10c2 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    186a:	ce 01       	movw	r24, r28
    186c:	8e 5a       	subi	r24, 0xAE	; 174
    186e:	9e 4f       	sbci	r25, 0xFE	; 254
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	b7 d1       	rcall	.+878    	; 0x1be8 <_ZN3DHT11expectPulseEb>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	21 e0       	ldi	r18, 0x01	; 1
    1880:	8f 3f       	cpi	r24, 0xFF	; 255
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	af 4f       	sbci	r26, 0xFF	; 255
    1886:	bf 4f       	sbci	r27, 0xFF	; 255
    1888:	09 f0       	breq	.+2      	; 0x188c <_ZN3DHT4readEb+0x22c>
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	22 23       	and	r18, r18
    188e:	99 f0       	breq	.+38     	; 0x18b6 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    1890:	ce 01       	movw	r24, r28
    1892:	8e 5a       	subi	r24, 0xAE	; 174
    1894:	9e 4f       	sbci	r25, 0xFE	; 254
    1896:	fc 01       	movw	r30, r24
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	fc 01       	movw	r30, r24
    189e:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    18a0:	ce 01       	movw	r24, r28
    18a2:	8e 5a       	subi	r24, 0xAE	; 174
    18a4:	9e 4f       	sbci	r25, 0xFE	; 254
    18a6:	fc 01       	movw	r30, r24
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	fc 01       	movw	r30, r24
    18ae:	f1 88       	ldd	r15, Z+17	; 0x11
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	72 c0       	rjmp	.+228    	; 0x199a <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    18b6:	ce 01       	movw	r24, r28
    18b8:	8e 5a       	subi	r24, 0xAE	; 174
    18ba:	9e 4f       	sbci	r25, 0xFE	; 254
    18bc:	fc 01       	movw	r30, r24
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	91 d1       	rcall	.+802    	; 0x1be8 <_ZN3DHT11expectPulseEb>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	21 e0       	ldi	r18, 0x01	; 1
    18cc:	8f 3f       	cpi	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	af 4f       	sbci	r26, 0xFF	; 255
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <_ZN3DHT4readEb+0x278>
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	22 23       	and	r18, r18
    18da:	99 f0       	breq	.+38     	; 0x1902 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    18dc:	ce 01       	movw	r24, r28
    18de:	8e 5a       	subi	r24, 0xAE	; 174
    18e0:	9e 4f       	sbci	r25, 0xFE	; 254
    18e2:	fc 01       	movw	r30, r24
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	fc 01       	movw	r30, r24
    18ea:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    18ec:	ce 01       	movw	r24, r28
    18ee:	8e 5a       	subi	r24, 0xAE	; 174
    18f0:	9e 4f       	sbci	r25, 0xFE	; 254
    18f2:	fc 01       	movw	r30, r24
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	fc 01       	movw	r30, r24
    18fa:	f1 88       	ldd	r15, Z+17	; 0x11
    18fc:	00 e0       	ldi	r16, 0x00	; 0
    18fe:	10 e0       	ldi	r17, 0x00	; 0
    1900:	4c c0       	rjmp	.+152    	; 0x199a <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1902:	1a 82       	std	Y+2, r1	; 0x02
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	80 35       	cpi	r24, 0x50	; 80
    190c:	91 05       	cpc	r25, r1
    190e:	0c f0       	brlt	.+2      	; 0x1912 <_ZN3DHT4readEb+0x2b2>
    1910:	42 c0       	rjmp	.+132    	; 0x1996 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    1912:	ce 01       	movw	r24, r28
    1914:	8e 5a       	subi	r24, 0xAE	; 174
    1916:	9e 4f       	sbci	r25, 0xFE	; 254
    1918:	fc 01       	movw	r30, r24
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	63 d1       	rcall	.+710    	; 0x1be8 <_ZN3DHT11expectPulseEb>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	29 81       	ldd	r18, Y+1	; 0x01
    1928:	3a 81       	ldd	r19, Y+2	; 0x02
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	ae 01       	movw	r20, r28
    1934:	4f 5f       	subi	r20, 0xFF	; 255
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	24 0f       	add	r18, r20
    193a:	35 1f       	adc	r19, r21
    193c:	20 5f       	subi	r18, 0xF0	; 240
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	f9 01       	movw	r30, r18
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	8c 01       	movw	r16, r24
    1950:	0f 5f       	subi	r16, 0xFF	; 255
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	ce 01       	movw	r24, r28
    1956:	8e 5a       	subi	r24, 0xAE	; 174
    1958:	9e 4f       	sbci	r25, 0xFE	; 254
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	42 d1       	rcall	.+644    	; 0x1be8 <_ZN3DHT11expectPulseEb>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	98 01       	movw	r18, r16
    196a:	22 0f       	add	r18, r18
    196c:	33 1f       	adc	r19, r19
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	ae 01       	movw	r20, r28
    1974:	4f 5f       	subi	r20, 0xFF	; 255
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	24 0f       	add	r18, r20
    197a:	35 1f       	adc	r19, r21
    197c:	20 5f       	subi	r18, 0xF0	; 240
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	f9 01       	movw	r30, r18
    1982:	80 83       	st	Z, r24
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	a2 83       	std	Z+2, r26	; 0x02
    1988:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	02 96       	adiw	r24, 0x02	; 2
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	b8 cf       	rjmp	.-144    	; 0x1906 <_ZN3DHT4readEb+0x2a6>
    1996:	01 e0       	ldi	r16, 0x01	; 1
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	ce 01       	movw	r24, r28
    199c:	8f 5a       	subi	r24, 0xAF	; 175
    199e:	9e 4f       	sbci	r25, 0xFE	; 254
    19a0:	9f db       	rcall	.-2242   	; 0x10e0 <_ZN13InterruptLockD1Ev>
    19a2:	01 30       	cpi	r16, 0x01	; 1
    19a4:	11 05       	cpc	r17, r1
    19a6:	09 f0       	breq	.+2      	; 0x19aa <_ZN3DHT4readEb+0x34a>
    19a8:	0d c1       	rjmp	.+538    	; 0x1bc4 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    19aa:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    19ac:	1c 82       	std	Y+4, r1	; 0x04
    19ae:	1b 82       	std	Y+3, r1	; 0x03
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	88 97       	sbiw	r24, 0x28	; 40
    19b6:	0c f0       	brlt	.+2      	; 0x19ba <_ZN3DHT4readEb+0x35a>
    19b8:	a7 c0       	rjmp	.+334    	; 0x1b08 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	9e 01       	movw	r18, r28
    19cc:	2f 5f       	subi	r18, 0xFF	; 255
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	40 96       	adiw	r24, 0x10	; 16
    19d6:	fc 01       	movw	r30, r24
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	a2 81       	ldd	r26, Z+2	; 0x02
    19de:	b3 81       	ldd	r27, Z+3	; 0x03
    19e0:	89 87       	std	Y+9, r24	; 0x09
    19e2:	9a 87       	std	Y+10, r25	; 0x0a
    19e4:	ab 87       	std	Y+11, r26	; 0x0b
    19e6:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	9e 01       	movw	r18, r28
    19fc:	2f 5f       	subi	r18, 0xFF	; 255
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	82 0f       	add	r24, r18
    1a02:	93 1f       	adc	r25, r19
    1a04:	40 96       	adiw	r24, 0x10	; 16
    1a06:	fc 01       	movw	r30, r24
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a0e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a10:	8d 87       	std	Y+13, r24	; 0x0d
    1a12:	9e 87       	std	Y+14, r25	; 0x0e
    1a14:	af 87       	std	Y+15, r26	; 0x0f
    1a16:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a1e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a20:	8f 3f       	cpi	r24, 0xFF	; 255
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	af 4f       	sbci	r26, 0xFF	; 255
    1a26:	bf 4f       	sbci	r27, 0xFF	; 255
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <_ZN3DHT4readEb+0x3dc>
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	af 85       	ldd	r26, Y+15	; 0x0f
    1a30:	b8 89       	ldd	r27, Y+16	; 0x10
    1a32:	8f 3f       	cpi	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	af 4f       	sbci	r26, 0xFF	; 255
    1a38:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3a:	89 f4       	brne	.+34     	; 0x1a5e <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	8e 5a       	subi	r24, 0xAE	; 174
    1a40:	9e 4f       	sbci	r25, 0xFE	; 254
    1a42:	fc 01       	movw	r30, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	fc 01       	movw	r30, r24
    1a4a:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	8e 5a       	subi	r24, 0xAE	; 174
    1a50:	9e 4f       	sbci	r25, 0xFE	; 254
    1a52:	fc 01       	movw	r30, r24
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	fc 01       	movw	r30, r24
    1a5a:	f1 88       	ldd	r15, Z+17	; 0x11
    1a5c:	b3 c0       	rjmp	.+358    	; 0x1bc4 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	99 23       	and	r25, r25
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <_ZN3DHT4readEb+0x408>
    1a66:	07 96       	adiw	r24, 0x07	; 7
    1a68:	95 95       	asr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	95 95       	asr	r25
    1a6e:	87 95       	ror	r24
    1a70:	95 95       	asr	r25
    1a72:	87 95       	ror	r24
    1a74:	9e 01       	movw	r18, r28
    1a76:	2e 5a       	subi	r18, 0xAE	; 174
    1a78:	3e 4f       	sbci	r19, 0xFE	; 254
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	20 81       	ld	r18, Z
    1a7e:	31 81       	ldd	r19, Z+1	; 0x01
    1a80:	28 0f       	add	r18, r24
    1a82:	39 1f       	adc	r19, r25
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	42 2f       	mov	r20, r18
    1a8a:	44 0f       	add	r20, r20
    1a8c:	9e 01       	movw	r18, r28
    1a8e:	2e 5a       	subi	r18, 0xAE	; 174
    1a90:	3e 4f       	sbci	r19, 0xFE	; 254
    1a92:	f9 01       	movw	r30, r18
    1a94:	20 81       	ld	r18, Z
    1a96:	31 81       	ldd	r19, Z+1	; 0x01
    1a98:	82 0f       	add	r24, r18
    1a9a:	93 1f       	adc	r25, r19
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    1aa0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1aa2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1aa4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1aa6:	58 89       	ldd	r21, Y+16	; 0x10
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	ab 85       	ldd	r26, Y+11	; 0x0b
    1aae:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ab0:	82 17       	cp	r24, r18
    1ab2:	93 07       	cpc	r25, r19
    1ab4:	a4 07       	cpc	r26, r20
    1ab6:	b5 07       	cpc	r27, r21
    1ab8:	08 f5       	brcc	.+66     	; 0x1afc <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	99 23       	and	r25, r25
    1ac0:	0c f4       	brge	.+2      	; 0x1ac4 <_ZN3DHT4readEb+0x464>
    1ac2:	07 96       	adiw	r24, 0x07	; 7
    1ac4:	95 95       	asr	r25
    1ac6:	87 95       	ror	r24
    1ac8:	95 95       	asr	r25
    1aca:	87 95       	ror	r24
    1acc:	95 95       	asr	r25
    1ace:	87 95       	ror	r24
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	2e 5a       	subi	r18, 0xAE	; 174
    1ad4:	3e 4f       	sbci	r19, 0xFE	; 254
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	20 81       	ld	r18, Z
    1ada:	31 81       	ldd	r19, Z+1	; 0x01
    1adc:	28 0f       	add	r18, r24
    1ade:	39 1f       	adc	r19, r25
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	20 81       	ld	r18, Z
    1ae4:	42 2f       	mov	r20, r18
    1ae6:	41 60       	ori	r20, 0x01	; 1
    1ae8:	9e 01       	movw	r18, r28
    1aea:	2e 5a       	subi	r18, 0xAE	; 174
    1aec:	3e 4f       	sbci	r19, 0xFE	; 254
    1aee:	f9 01       	movw	r30, r18
    1af0:	20 81       	ld	r18, Z
    1af2:	31 81       	ldd	r19, Z+1	; 0x01
    1af4:	82 0f       	add	r24, r18
    1af6:	93 1f       	adc	r25, r19
    1af8:	fc 01       	movw	r30, r24
    1afa:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
    1b06:	54 cf       	rjmp	.-344    	; 0x19b0 <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    1b08:	ce 01       	movw	r24, r28
    1b0a:	8e 5a       	subi	r24, 0xAE	; 174
    1b0c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b0e:	fc 01       	movw	r30, r24
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	fc 01       	movw	r30, r24
    1b16:	84 81       	ldd	r24, Z+4	; 0x04
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	8e 5a       	subi	r24, 0xAE	; 174
    1b20:	9e 4f       	sbci	r25, 0xFE	; 254
    1b22:	fc 01       	movw	r30, r24
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	ce 01       	movw	r24, r28
    1b32:	8e 5a       	subi	r24, 0xAE	; 174
    1b34:	9e 4f       	sbci	r25, 0xFE	; 254
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	81 81       	ldd	r24, Z+1	; 0x01
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	48 0f       	add	r20, r24
    1b46:	59 1f       	adc	r21, r25
    1b48:	ce 01       	movw	r24, r28
    1b4a:	8e 5a       	subi	r24, 0xAE	; 174
    1b4c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b4e:	fc 01       	movw	r30, r24
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	fc 01       	movw	r30, r24
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	48 0f       	add	r20, r24
    1b5e:	59 1f       	adc	r21, r25
    1b60:	ce 01       	movw	r24, r28
    1b62:	8e 5a       	subi	r24, 0xAE	; 174
    1b64:	9e 4f       	sbci	r25, 0xFE	; 254
    1b66:	fc 01       	movw	r30, r24
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	83 81       	ldd	r24, Z+3	; 0x03
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	84 0f       	add	r24, r20
    1b76:	95 1f       	adc	r25, r21
    1b78:	99 27       	eor	r25, r25
    1b7a:	28 17       	cp	r18, r24
    1b7c:	39 07       	cpc	r19, r25
    1b7e:	91 f4       	brne	.+36     	; 0x1ba4 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1b80:	ce 01       	movw	r24, r28
    1b82:	8e 5a       	subi	r24, 0xAE	; 174
    1b84:	9e 4f       	sbci	r25, 0xFE	; 254
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	fc 01       	movw	r30, r24
    1b90:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1b92:	ce 01       	movw	r24, r28
    1b94:	8e 5a       	subi	r24, 0xAE	; 174
    1b96:	9e 4f       	sbci	r25, 0xFE	; 254
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	f1 88       	ldd	r15, Z+17	; 0x11
    1ba2:	10 c0       	rjmp	.+32     	; 0x1bc4 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	8e 5a       	subi	r24, 0xAE	; 174
    1ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    1baa:	fc 01       	movw	r30, r24
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	8e 5a       	subi	r24, 0xAE	; 174
    1bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bba:	fc 01       	movw	r30, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	f1 88       	ldd	r15, Z+17	; 0x11
    1bc4:	8f 2d       	mov	r24, r15
  }
}
    1bc6:	cc 5a       	subi	r28, 0xAC	; 172
    1bc8:	de 4f       	sbci	r29, 0xFE	; 254
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	df 90       	pop	r13
    1be0:	cf 90       	pop	r12
    1be2:	bf 90       	pop	r11
    1be4:	af 90       	pop	r10
    1be6:	08 95       	ret

00001be8 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	2a 97       	sbiw	r28, 0x0a	; 10
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	99 87       	std	Y+9, r25	; 0x09
    1bfe:	88 87       	std	Y+8, r24	; 0x08
    1c00:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1c02:	1a 82       	std	Y+2, r1	; 0x02
    1c04:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1c06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c08:	88 23       	and	r24, r24
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <_ZN3DHT11expectPulseEb+0x2e>
    1c0c:	88 85       	ldd	r24, Y+8	; 0x08
    1c0e:	99 85       	ldd	r25, Y+9	; 0x09
    1c10:	fc 01       	movw	r30, r24
    1c12:	87 81       	ldd	r24, Z+7	; 0x07
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <_ZN3DHT11expectPulseEb+0x30>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1c1a:	88 85       	ldd	r24, Y+8	; 0x08
    1c1c:	99 85       	ldd	r25, Y+9	; 0x09
    1c1e:	fc 01       	movw	r30, r24
    1c20:	80 85       	ldd	r24, Z+8	; 0x08
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	86 52       	subi	r24, 0x26	; 38
    1c2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2e:	9d 83       	std	Y+5, r25	; 0x05
    1c30:	8c 83       	std	Y+4, r24	; 0x04
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	fc 01       	movw	r30, r24
    1c38:	25 91       	lpm	r18, Z+
    1c3a:	34 91       	lpm	r19, Z
    1c3c:	cf 01       	movw	r24, r30
    1c3e:	3f 83       	std	Y+7, r19	; 0x07
    1c40:	2e 83       	std	Y+6, r18	; 0x06
    1c42:	9d 83       	std	Y+5, r25	; 0x05
    1c44:	8c 83       	std	Y+4, r24	; 0x04
    1c46:	8e 81       	ldd	r24, Y+6	; 0x06
    1c48:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 81       	ld	r18, Z
    1c4e:	88 85       	ldd	r24, Y+8	; 0x08
    1c50:	99 85       	ldd	r25, Y+9	; 0x09
    1c52:	fc 01       	movw	r30, r24
    1c54:	87 81       	ldd	r24, Z+7	; 0x07
    1c56:	28 23       	and	r18, r24
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	29 17       	cp	r18, r25
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <_ZN3DHT11expectPulseEb+0x7a>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	88 23       	and	r24, r24
    1c64:	f9 f0       	breq	.+62     	; 0x1ca4 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	2f 5f       	subi	r18, 0xFF	; 255
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	3a 83       	std	Y+2, r19	; 0x02
    1c72:	29 83       	std	Y+1, r18	; 0x01
    1c74:	9c 01       	movw	r18, r24
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	88 85       	ldd	r24, Y+8	; 0x08
    1c7c:	99 85       	ldd	r25, Y+9	; 0x09
    1c7e:	fc 01       	movw	r30, r24
    1c80:	85 85       	ldd	r24, Z+13	; 0x0d
    1c82:	96 85       	ldd	r25, Z+14	; 0x0e
    1c84:	a7 85       	ldd	r26, Z+15	; 0x0f
    1c86:	b0 89       	ldd	r27, Z+16	; 0x10
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	28 17       	cp	r18, r24
    1c8c:	39 07       	cpc	r19, r25
    1c8e:	4a 07       	cpc	r20, r26
    1c90:	5b 07       	cpc	r21, r27
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <_ZN3DHT11expectPulseEb+0xae>
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	66 23       	and	r22, r22
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <_ZN3DHT11expectPulseEb+0xb4>
    1c9a:	bf cf       	rjmp	.-130    	; 0x1c1a <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	cc 01       	movw	r24, r24
    1caa:	a0 e0       	ldi	r26, 0x00	; 0
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
}
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	2a 96       	adiw	r28, 0x0a	; 10
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	1f 92       	push	r1
    1cca:	1f 92       	push	r1
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	27 ec       	ldi	r18, 0xC7	; 199
    1cd6:	32 e0       	ldi	r19, 0x02	; 2
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	fc 01       	movw	r30, r24
    1cde:	31 83       	std	Z+1, r19	; 0x01
    1ce0:	20 83       	st	Z, r18
    1ce2:	00 00       	nop
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1cee:	af 92       	push	r10
    1cf0:	bf 92       	push	r11
    1cf2:	cf 92       	push	r12
    1cf4:	df 92       	push	r13
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2d 97       	sbiw	r28, 0x0d	; 13
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	6b 83       	std	Y+3, r22	; 0x03
    1d18:	4c 83       	std	Y+4, r20	; 0x04
    1d1a:	2d 83       	std	Y+5, r18	; 0x05
    1d1c:	ee 82       	std	Y+6, r14	; 0x06
    1d1e:	ff 82       	std	Y+7, r15	; 0x07
    1d20:	08 87       	std	Y+8, r16	; 0x08
    1d22:	19 87       	std	Y+9, r17	; 0x09
    1d24:	aa 86       	std	Y+10, r10	; 0x0a
    1d26:	bb 86       	std	Y+11, r11	; 0x0b
    1d28:	cc 86       	std	Y+12, r12	; 0x0c
    1d2a:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	2d 81       	ldd	r18, Y+5	; 0x05
    1d32:	4c 81       	ldd	r20, Y+4	; 0x04
    1d34:	6b 81       	ldd	r22, Y+3	; 0x03
    1d36:	e3 d9       	rcall	.-3130   	; 0x10fe <_ZN3DHTC1Ehhh>
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3e:	fc 01       	movw	r30, r24
    1d40:	23 8b       	std	Z+19, r18	; 0x13
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	fc 01       	movw	r30, r24
    1d48:	74 96       	adiw	r30, 0x14	; 20
    1d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4e:	a8 85       	ldd	r26, Y+8	; 0x08
    1d50:	b9 85       	ldd	r27, Y+9	; 0x09
    1d52:	69 81       	ldd	r22, Y+1	; 0x01
    1d54:	7a 81       	ldd	r23, Y+2	; 0x02
    1d56:	9c 01       	movw	r18, r24
    1d58:	ad 01       	movw	r20, r26
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	f6 d0       	rcall	.+492    	; 0x1f4a <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	fc 01       	movw	r30, r24
    1d64:	7d 96       	adiw	r30, 0x1d	; 29
    1d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d6c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d6e:	69 81       	ldd	r22, Y+1	; 0x01
    1d70:	7a 81       	ldd	r23, Y+2	; 0x02
    1d72:	9c 01       	movw	r18, r24
    1d74:	ad 01       	movw	r20, r26
    1d76:	cf 01       	movw	r24, r30
    1d78:	7e d2       	rcall	.+1276   	; 0x2276 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1d7a:	00 00       	nop
    1d7c:	2d 96       	adiw	r28, 0x0d	; 13
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	bf 90       	pop	r11
    1d9a:	af 90       	pop	r10
    1d9c:	08 95       	ret

00001d9e <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	1f 92       	push	r1
    1da4:	1f 92       	push	r1
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	67 e3       	ldi	r22, 0x37	; 55
    1db4:	f4 d9       	rcall	.-3096   	; 0x119e <_ZN3DHT5beginEh>
    1db6:	00 00       	nop
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1dc8:	1f 92       	push	r1
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	7c 83       	std	Y+4, r23	; 0x04
    1dd4:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	fc 01       	movw	r30, r24
    1ddc:	83 89       	ldd	r24, Z+19	; 0x13
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	8c 30       	cpi	r24, 0x0C	; 12
    1de4:	91 05       	cpc	r25, r1
    1de6:	b1 f0       	breq	.+44     	; 0x1e14 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1de8:	8d 30       	cpi	r24, 0x0D	; 13
    1dea:	91 05       	cpc	r25, r1
    1dec:	1c f4       	brge	.+6      	; 0x1df4 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1dee:	0b 97       	sbiw	r24, 0x0b	; 11
    1df0:	39 f0       	breq	.+14     	; 0x1e00 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1df2:	2e c0       	rjmp	.+92     	; 0x1e50 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1df4:	85 31       	cpi	r24, 0x15	; 21
    1df6:	91 05       	cpc	r25, r1
    1df8:	b9 f0       	breq	.+46     	; 0x1e28 <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1dfa:	46 97       	sbiw	r24, 0x16	; 22
    1dfc:	f9 f0       	breq	.+62     	; 0x1e3c <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1dfe:	28 c0       	rjmp	.+80     	; 0x1e50 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1e00:	2b e0       	ldi	r18, 0x0B	; 11
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	a9 01       	movw	r20, r18
    1e0a:	6e e9       	ldi	r22, 0x9E	; 158
    1e0c:	72 e0       	ldi	r23, 0x02	; 2
    1e0e:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncpy>
    break;
    1e12:	28 c0       	rjmp	.+80     	; 0x1e64 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1e14:	2b e0       	ldi	r18, 0x0B	; 11
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	64 ea       	ldi	r22, 0xA4	; 164
    1e20:	72 e0       	ldi	r23, 0x02	; 2
    1e22:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncpy>
    break;
    1e26:	1e c0       	rjmp	.+60     	; 0x1e64 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1e28:	2b e0       	ldi	r18, 0x0B	; 11
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	a9 01       	movw	r20, r18
    1e32:	6a ea       	ldi	r22, 0xAA	; 170
    1e34:	72 e0       	ldi	r23, 0x02	; 2
    1e36:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncpy>
    break;
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1e3c:	2b e0       	ldi	r18, 0x0B	; 11
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	a9 01       	movw	r20, r18
    1e46:	60 eb       	ldi	r22, 0xB0	; 176
    1e48:	72 e0       	ldi	r23, 0x02	; 2
    1e4a:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncpy>
    break;
    1e4e:	0a c0       	rjmp	.+20     	; 0x1e64 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1e50:	2b e0       	ldi	r18, 0x0B	; 11
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	a9 01       	movw	r20, r18
    1e5a:	66 eb       	ldi	r22, 0xB6	; 182
    1e5c:	72 e0       	ldi	r23, 0x02	; 2
    1e5e:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncpy>
    break;
    1e62:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1e64:	8b e0       	ldi	r24, 0x0B	; 11
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	82 0f       	add	r24, r18
    1e6e:	93 1f       	adc	r25, r19
    1e70:	fc 01       	movw	r30, r24
    1e72:	10 82       	st	Z, r1
}
    1e74:	00 00       	nop
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1e8a:	1f 92       	push	r1
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	7c 83       	std	Y+4, r23	; 0x04
    1e96:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	83 89       	ldd	r24, Z+19	; 0x13
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	8c 30       	cpi	r24, 0x0C	; 12
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	c1 f0       	breq	.+48     	; 0x1eda <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1eaa:	8d 30       	cpi	r24, 0x0D	; 13
    1eac:	91 05       	cpc	r25, r1
    1eae:	1c f4       	brge	.+6      	; 0x1eb6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1eb0:	0b 97       	sbiw	r24, 0x0b	; 11
    1eb2:	39 f0       	breq	.+14     	; 0x1ec2 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1eb4:	36 c0       	rjmp	.+108    	; 0x1f22 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1eb6:	85 31       	cpi	r24, 0x15	; 21
    1eb8:	91 05       	cpc	r25, r1
    1eba:	d9 f0       	breq	.+54     	; 0x1ef2 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1ebc:	46 97       	sbiw	r24, 0x16	; 22
    1ebe:	29 f1       	breq	.+74     	; 0x1f0a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1ec0:	30 c0       	rjmp	.+96     	; 0x1f22 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec6:	80 e4       	ldi	r24, 0x40	; 64
    1ec8:	92 e4       	ldi	r25, 0x42	; 66
    1eca:	af e0       	ldi	r26, 0x0F	; 15
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	f9 01       	movw	r30, r18
    1ed0:	84 a3       	std	Z+36, r24	; 0x24
    1ed2:	95 a3       	std	Z+37, r25	; 0x25
    1ed4:	a6 a3       	std	Z+38, r26	; 0x26
    1ed6:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1ed8:	30 c0       	rjmp	.+96     	; 0x1f3a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1eda:	2b 81       	ldd	r18, Y+3	; 0x03
    1edc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ede:	80 e8       	ldi	r24, 0x80	; 128
    1ee0:	94 e8       	ldi	r25, 0x84	; 132
    1ee2:	ae e1       	ldi	r26, 0x1E	; 30
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	84 a3       	std	Z+36, r24	; 0x24
    1eea:	95 a3       	std	Z+37, r25	; 0x25
    1eec:	a6 a3       	std	Z+38, r26	; 0x26
    1eee:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1ef0:	24 c0       	rjmp	.+72     	; 0x1f3a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	80 e8       	ldi	r24, 0x80	; 128
    1ef8:	94 e8       	ldi	r25, 0x84	; 132
    1efa:	ae e1       	ldi	r26, 0x1E	; 30
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	f9 01       	movw	r30, r18
    1f00:	84 a3       	std	Z+36, r24	; 0x24
    1f02:	95 a3       	std	Z+37, r25	; 0x25
    1f04:	a6 a3       	std	Z+38, r26	; 0x26
    1f06:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1f08:	18 c0       	rjmp	.+48     	; 0x1f3a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1f0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0e:	80 e8       	ldi	r24, 0x80	; 128
    1f10:	94 e8       	ldi	r25, 0x84	; 132
    1f12:	ae e1       	ldi	r26, 0x1E	; 30
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	f9 01       	movw	r30, r18
    1f18:	84 a3       	std	Z+36, r24	; 0x24
    1f1a:	95 a3       	std	Z+37, r25	; 0x25
    1f1c:	a6 a3       	std	Z+38, r26	; 0x26
    1f1e:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1f20:	0c c0       	rjmp	.+24     	; 0x1f3a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	80 e8       	ldi	r24, 0x80	; 128
    1f28:	94 e8       	ldi	r25, 0x84	; 132
    1f2a:	ae e1       	ldi	r26, 0x1E	; 30
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	f9 01       	movw	r30, r18
    1f30:	84 a3       	std	Z+36, r24	; 0x24
    1f32:	95 a3       	std	Z+37, r25	; 0x25
    1f34:	a6 a3       	std	Z+38, r26	; 0x26
    1f36:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1f38:	00 00       	nop
  }
}
    1f3a:	00 00       	nop
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	28 97       	sbiw	r28, 0x08	; 8
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	7c 83       	std	Y+4, r23	; 0x04
    1f64:	6b 83       	std	Y+3, r22	; 0x03
    1f66:	2d 83       	std	Y+5, r18	; 0x05
    1f68:	3e 83       	std	Y+6, r19	; 0x06
    1f6a:	4f 83       	std	Y+7, r20	; 0x07
    1f6c:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	a8 de       	rcall	.-688    	; 0x1cc4 <_ZN15Adafruit_SensorC1Ev>
    1f74:	23 ee       	ldi	r18, 0xE3	; 227
    1f76:	32 e0       	ldi	r19, 0x02	; 2
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	31 83       	std	Z+1, r19	; 0x01
    1f80:	20 83       	st	Z, r18
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	34 83       	std	Z+4, r19	; 0x04
    1f8e:	23 83       	std	Z+3, r18	; 0x03
    1f90:	29 81       	ldd	r18, Y+1	; 0x01
    1f92:	3a 81       	ldd	r19, Y+2	; 0x02
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	af 81       	ldd	r26, Y+7	; 0x07
    1f9a:	b8 85       	ldd	r27, Y+8	; 0x08
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	85 83       	std	Z+5, r24	; 0x05
    1fa0:	96 83       	std	Z+6, r25	; 0x06
    1fa2:	a7 83       	std	Z+7, r26	; 0x07
    1fa4:	b0 87       	std	Z+8, r27	; 0x08
    1fa6:	00 00       	nop
    1fa8:	28 96       	adiw	r28, 0x08	; 8
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1fc0:	1f 92       	push	r1
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	7c 83       	std	Y+4, r23	; 0x04
    1fcc:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	44 e2       	ldi	r20, 0x24	; 36
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	0e 94 d5 36 	call	0x6daa	; 0x6daa <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1fde:	84 e2       	ldi	r24, 0x24	; 36
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e0       	ldi	r26, 0x00	; 0
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	f9 01       	movw	r30, r18
    1fec:	80 83       	st	Z, r24
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	a2 83       	std	Z+2, r26	; 0x02
    1ff2:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	85 81       	ldd	r24, Z+5	; 0x05
    1ffc:	96 81       	ldd	r25, Z+6	; 0x06
    1ffe:	a7 81       	ldd	r26, Z+7	; 0x07
    2000:	b0 85       	ldd	r27, Z+8	; 0x08
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	f9 01       	movw	r30, r18
    2008:	84 83       	std	Z+4, r24	; 0x04
    200a:	95 83       	std	Z+5, r25	; 0x05
    200c:	a6 83       	std	Z+6, r26	; 0x06
    200e:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    2010:	2b 81       	ldd	r18, Y+3	; 0x03
    2012:	3c 81       	ldd	r19, Y+4	; 0x04
    2014:	8d e0       	ldi	r24, 0x0D	; 13
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	f9 01       	movw	r30, r18
    201e:	80 87       	std	Z+8, r24	; 0x08
    2020:	91 87       	std	Z+9, r25	; 0x09
    2022:	a2 87       	std	Z+10, r26	; 0x0a
    2024:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2026:	0e 94 2a 30 	call	0x6054	; 0x6054 <millis>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	2b 81       	ldd	r18, Y+3	; 0x03
    2030:	3c 81       	ldd	r19, Y+4	; 0x04
    2032:	f9 01       	movw	r30, r18
    2034:	80 8b       	std	Z+16, r24	; 0x10
    2036:	91 8b       	std	Z+17, r25	; 0x11
    2038:	a2 8b       	std	Z+18, r26	; 0x12
    203a:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	fc 01       	movw	r30, r24
    2042:	83 81       	ldd	r24, Z+3	; 0x03
    2044:	94 81       	ldd	r25, Z+4	; 0x04
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	d3 d8       	rcall	.-3674   	; 0x11f2 <_ZN3DHT15readTemperatureEbb>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	f9 01       	movw	r30, r18
    2056:	84 8b       	std	Z+20, r24	; 0x14
    2058:	95 8b       	std	Z+21, r25	; 0x15
    205a:	a6 8b       	std	Z+22, r26	; 0x16
    205c:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    205e:	81 e0       	ldi	r24, 0x01	; 1
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	00 d0       	rcall	.+0      	; 0x2074 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    2074:	1f 92       	push	r1
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	7c 83       	std	Y+4, r23	; 0x04
    2080:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	48 e2       	ldi	r20, 0x28	; 40
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	0e 94 d5 36 	call	0x6daa	; 0x6daa <memset>
  // Set sensor name.
  _parent->setName(sensor);
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	fc 01       	movw	r30, r24
    2098:	83 81       	ldd	r24, Z+3	; 0x03
    209a:	94 81       	ldd	r25, Z+4	; 0x04
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	b9 01       	movw	r22, r18
    20a2:	8f de       	rcall	.-738    	; 0x1dc2 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    20a4:	2b 81       	ldd	r18, Y+3	; 0x03
    20a6:	3c 81       	ldd	r19, Y+4	; 0x04
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	f9 01       	movw	r30, r18
    20b2:	84 87       	std	Z+12, r24	; 0x0c
    20b4:	95 87       	std	Z+13, r25	; 0x0d
    20b6:	a6 87       	std	Z+14, r26	; 0x0e
    20b8:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	fc 01       	movw	r30, r24
    20c0:	85 81       	ldd	r24, Z+5	; 0x05
    20c2:	96 81       	ldd	r25, Z+6	; 0x06
    20c4:	a7 81       	ldd	r26, Z+7	; 0x07
    20c6:	b0 85       	ldd	r27, Z+8	; 0x08
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	f9 01       	movw	r30, r18
    20ce:	80 8b       	std	Z+16, r24	; 0x10
    20d0:	91 8b       	std	Z+17, r25	; 0x11
    20d2:	a2 8b       	std	Z+18, r26	; 0x12
    20d4:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    20d6:	2b 81       	ldd	r18, Y+3	; 0x03
    20d8:	3c 81       	ldd	r19, Y+4	; 0x04
    20da:	8d e0       	ldi	r24, 0x0D	; 13
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e0       	ldi	r26, 0x00	; 0
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	f9 01       	movw	r30, r18
    20e4:	84 8b       	std	Z+20, r24	; 0x14
    20e6:	95 8b       	std	Z+21, r25	; 0x15
    20e8:	a6 8b       	std	Z+22, r26	; 0x16
    20ea:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	fc 01       	movw	r30, r24
    20f2:	83 81       	ldd	r24, Z+3	; 0x03
    20f4:	94 81       	ldd	r25, Z+4	; 0x04
    20f6:	2b 81       	ldd	r18, Y+3	; 0x03
    20f8:	3c 81       	ldd	r19, Y+4	; 0x04
    20fa:	b9 01       	movw	r22, r18
    20fc:	c3 de       	rcall	.-634    	; 0x1e84 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	fc 01       	movw	r30, r24
    2104:	83 81       	ldd	r24, Z+3	; 0x03
    2106:	94 81       	ldd	r25, Z+4	; 0x04
    2108:	fc 01       	movw	r30, r24
    210a:	83 89       	ldd	r24, Z+19	; 0x13
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	8c 30       	cpi	r24, 0x0C	; 12
    2112:	91 05       	cpc	r25, r1
    2114:	61 f1       	breq	.+88     	; 0x216e <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    2116:	8d 30       	cpi	r24, 0x0D	; 13
    2118:	91 05       	cpc	r25, r1
    211a:	1c f4       	brge	.+6      	; 0x2122 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    211c:	0b 97       	sbiw	r24, 0x0b	; 11
    211e:	49 f0       	breq	.+18     	; 0x2132 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    2120:	8c c0       	rjmp	.+280    	; 0x223a <__stack+0x3b>
    2122:	85 31       	cpi	r24, 0x15	; 21
    2124:	91 05       	cpc	r25, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    2128:	44 c0       	rjmp	.+136    	; 0x21b2 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x144>
    212a:	46 97       	sbiw	r24, 0x16	; 22
    212c:	09 f4       	brne	.+2      	; 0x2130 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    212e:	63 c0       	rjmp	.+198    	; 0x21f6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x188>
    2130:	84 c0       	rjmp	.+264    	; 0x223a <__stack+0x3b>
  case DHT11:
    sensor->max_value = 50.0F;
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a8 e4       	ldi	r26, 0x48	; 72
    213c:	b2 e4       	ldi	r27, 0x42	; 66
    213e:	f9 01       	movw	r30, r18
    2140:	80 8f       	std	Z+24, r24	; 0x18
    2142:	91 8f       	std	Z+25, r25	; 0x19
    2144:	a2 8f       	std	Z+26, r26	; 0x1a
    2146:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	fc 01       	movw	r30, r24
    214e:	14 8e       	std	Z+28, r1	; 0x1c
    2150:	15 8e       	std	Z+29, r1	; 0x1d
    2152:	16 8e       	std	Z+30, r1	; 0x1e
    2154:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    2156:	2b 81       	ldd	r18, Y+3	; 0x03
    2158:	3c 81       	ldd	r19, Y+4	; 0x04
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e0       	ldi	r26, 0x00	; 0
    2160:	b0 e4       	ldi	r27, 0x40	; 64
    2162:	f9 01       	movw	r30, r18
    2164:	80 a3       	std	Z+32, r24	; 0x20
    2166:	91 a3       	std	Z+33, r25	; 0x21
    2168:	a2 a3       	std	Z+34, r26	; 0x22
    216a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    216c:	7c c0       	rjmp	.+248    	; 0x2266 <__stack+0x67>
  case DHT12:
    sensor->max_value = 60.0F;
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e7       	ldi	r26, 0x70	; 112
    2178:	b2 e4       	ldi	r27, 0x42	; 66
    217a:	f9 01       	movw	r30, r18
    217c:	80 8f       	std	Z+24, r24	; 0x18
    217e:	91 8f       	std	Z+25, r25	; 0x19
    2180:	a2 8f       	std	Z+26, r26	; 0x1a
    2182:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    2184:	2b 81       	ldd	r18, Y+3	; 0x03
    2186:	3c 81       	ldd	r19, Y+4	; 0x04
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 ea       	ldi	r26, 0xA0	; 160
    218e:	b1 ec       	ldi	r27, 0xC1	; 193
    2190:	f9 01       	movw	r30, r18
    2192:	84 8f       	std	Z+28, r24	; 0x1c
    2194:	95 8f       	std	Z+29, r25	; 0x1d
    2196:	a6 8f       	std	Z+30, r26	; 0x1e
    2198:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e0       	ldi	r26, 0x00	; 0
    21a4:	bf e3       	ldi	r27, 0x3F	; 63
    21a6:	f9 01       	movw	r30, r18
    21a8:	80 a3       	std	Z+32, r24	; 0x20
    21aa:	91 a3       	std	Z+33, r25	; 0x21
    21ac:	a2 a3       	std	Z+34, r26	; 0x22
    21ae:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    21b0:	5a c0       	rjmp	.+180    	; 0x2266 <__stack+0x67>
  case DHT21:
    sensor->max_value = 80.0F;
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 ea       	ldi	r26, 0xA0	; 160
    21bc:	b2 e4       	ldi	r27, 0x42	; 66
    21be:	f9 01       	movw	r30, r18
    21c0:	80 8f       	std	Z+24, r24	; 0x18
    21c2:	91 8f       	std	Z+25, r25	; 0x19
    21c4:	a2 8f       	std	Z+26, r26	; 0x1a
    21c6:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e2       	ldi	r26, 0x20	; 32
    21d2:	b2 ec       	ldi	r27, 0xC2	; 194
    21d4:	f9 01       	movw	r30, r18
    21d6:	84 8f       	std	Z+28, r24	; 0x1c
    21d8:	95 8f       	std	Z+29, r25	; 0x1d
    21da:	a6 8f       	std	Z+30, r26	; 0x1e
    21dc:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    21de:	2b 81       	ldd	r18, Y+3	; 0x03
    21e0:	3c 81       	ldd	r19, Y+4	; 0x04
    21e2:	8d ec       	ldi	r24, 0xCD	; 205
    21e4:	9c ec       	ldi	r25, 0xCC	; 204
    21e6:	ac ec       	ldi	r26, 0xCC	; 204
    21e8:	bd e3       	ldi	r27, 0x3D	; 61
    21ea:	f9 01       	movw	r30, r18
    21ec:	80 a3       	std	Z+32, r24	; 0x20
    21ee:	91 a3       	std	Z+33, r25	; 0x21
    21f0:	a2 a3       	std	Z+34, r26	; 0x22
    21f2:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    21f4:	38 c0       	rjmp	.+112    	; 0x2266 <__stack+0x67>
  case DHT22:
    sensor->max_value = 125.0F;
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	aa ef       	ldi	r26, 0xFA	; 250
    2200:	b2 e4       	ldi	r27, 0x42	; 66
    2202:	f9 01       	movw	r30, r18
    2204:	80 8f       	std	Z+24, r24	; 0x18
    2206:	91 8f       	std	Z+25, r25	; 0x19
    2208:	a2 8f       	std	Z+26, r26	; 0x1a
    220a:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    220c:	2b 81       	ldd	r18, Y+3	; 0x03
    220e:	3c 81       	ldd	r19, Y+4	; 0x04
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e2       	ldi	r26, 0x20	; 32
    2216:	b2 ec       	ldi	r27, 0xC2	; 194
    2218:	f9 01       	movw	r30, r18
    221a:	84 8f       	std	Z+28, r24	; 0x1c
    221c:	95 8f       	std	Z+29, r25	; 0x1d
    221e:	a6 8f       	std	Z+30, r26	; 0x1e
    2220:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	8d ec       	ldi	r24, 0xCD	; 205
    2228:	9c ec       	ldi	r25, 0xCC	; 204
    222a:	ac ec       	ldi	r26, 0xCC	; 204
    222c:	bd e3       	ldi	r27, 0x3D	; 61
    222e:	f9 01       	movw	r30, r18
    2230:	80 a3       	std	Z+32, r24	; 0x20
    2232:	91 a3       	std	Z+33, r25	; 0x21
    2234:	a2 a3       	std	Z+34, r26	; 0x22
    2236:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2238:	16 c0       	rjmp	.+44     	; 0x2266 <__stack+0x67>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	fc 01       	movw	r30, r24
    2240:	10 8e       	std	Z+24, r1	; 0x18
    2242:	11 8e       	std	Z+25, r1	; 0x19
    2244:	12 8e       	std	Z+26, r1	; 0x1a
    2246:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	fc 01       	movw	r30, r24
    224e:	14 8e       	std	Z+28, r1	; 0x1c
    2250:	15 8e       	std	Z+29, r1	; 0x1d
    2252:	16 8e       	std	Z+30, r1	; 0x1e
    2254:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	fc 01       	movw	r30, r24
    225c:	10 a2       	std	Z+32, r1	; 0x20
    225e:	11 a2       	std	Z+33, r1	; 0x21
    2260:	12 a2       	std	Z+34, r1	; 0x22
    2262:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2264:	00 00       	nop
  }
}
    2266:	00 00       	nop
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	28 97       	sbiw	r28, 0x08	; 8
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	7c 83       	std	Y+4, r23	; 0x04
    2290:	6b 83       	std	Y+3, r22	; 0x03
    2292:	2d 83       	std	Y+5, r18	; 0x05
    2294:	3e 83       	std	Y+6, r19	; 0x06
    2296:	4f 83       	std	Y+7, r20	; 0x07
    2298:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	12 dd       	rcall	.-1500   	; 0x1cc4 <_ZN15Adafruit_SensorC1Ev>
    22a0:	25 ed       	ldi	r18, 0xD5	; 213
    22a2:	32 e0       	ldi	r19, 0x02	; 2
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	fc 01       	movw	r30, r24
    22aa:	31 83       	std	Z+1, r19	; 0x01
    22ac:	20 83       	st	Z, r18
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	2b 81       	ldd	r18, Y+3	; 0x03
    22b4:	3c 81       	ldd	r19, Y+4	; 0x04
    22b6:	fc 01       	movw	r30, r24
    22b8:	34 83       	std	Z+4, r19	; 0x04
    22ba:	23 83       	std	Z+3, r18	; 0x03
    22bc:	29 81       	ldd	r18, Y+1	; 0x01
    22be:	3a 81       	ldd	r19, Y+2	; 0x02
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	af 81       	ldd	r26, Y+7	; 0x07
    22c6:	b8 85       	ldd	r27, Y+8	; 0x08
    22c8:	f9 01       	movw	r30, r18
    22ca:	85 83       	std	Z+5, r24	; 0x05
    22cc:	96 83       	std	Z+6, r25	; 0x06
    22ce:	a7 83       	std	Z+7, r26	; 0x07
    22d0:	b0 87       	std	Z+8, r27	; 0x08
    22d2:	00 00       	nop
    22d4:	28 96       	adiw	r28, 0x08	; 8
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	08 95       	ret

000022e6 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    22ec:	1f 92       	push	r1
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	7c 83       	std	Y+4, r23	; 0x04
    22f8:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	44 e2       	ldi	r20, 0x24	; 36
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	0e 94 d5 36 	call	0x6daa	; 0x6daa <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    230a:	84 e2       	ldi	r24, 0x24	; 36
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e0       	ldi	r26, 0x00	; 0
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	2b 81       	ldd	r18, Y+3	; 0x03
    2314:	3c 81       	ldd	r19, Y+4	; 0x04
    2316:	f9 01       	movw	r30, r18
    2318:	80 83       	st	Z, r24
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	a2 83       	std	Z+2, r26	; 0x02
    231e:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	fc 01       	movw	r30, r24
    2326:	85 81       	ldd	r24, Z+5	; 0x05
    2328:	96 81       	ldd	r25, Z+6	; 0x06
    232a:	a7 81       	ldd	r26, Z+7	; 0x07
    232c:	b0 85       	ldd	r27, Z+8	; 0x08
    232e:	2b 81       	ldd	r18, Y+3	; 0x03
    2330:	3c 81       	ldd	r19, Y+4	; 0x04
    2332:	f9 01       	movw	r30, r18
    2334:	84 83       	std	Z+4, r24	; 0x04
    2336:	95 83       	std	Z+5, r25	; 0x05
    2338:	a6 83       	std	Z+6, r26	; 0x06
    233a:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	8c e0       	ldi	r24, 0x0C	; 12
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e0       	ldi	r26, 0x00	; 0
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	f9 01       	movw	r30, r18
    234a:	80 87       	std	Z+8, r24	; 0x08
    234c:	91 87       	std	Z+9, r25	; 0x09
    234e:	a2 87       	std	Z+10, r26	; 0x0a
    2350:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2352:	0e 94 2a 30 	call	0x6054	; 0x6054 <millis>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	f9 01       	movw	r30, r18
    2360:	80 8b       	std	Z+16, r24	; 0x10
    2362:	91 8b       	std	Z+17, r25	; 0x11
    2364:	a2 8b       	std	Z+18, r26	; 0x12
    2366:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	fc 01       	movw	r30, r24
    236e:	83 81       	ldd	r24, Z+3	; 0x03
    2370:	94 81       	ldd	r25, Z+4	; 0x04
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	cb d8       	rcall	.-3690   	; 0x150c <_ZN3DHT12readHumidityEb>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	2b 81       	ldd	r18, Y+3	; 0x03
    237c:	3c 81       	ldd	r19, Y+4	; 0x04
    237e:	f9 01       	movw	r30, r18
    2380:	84 8b       	std	Z+20, r24	; 0x14
    2382:	95 8b       	std	Z+21, r25	; 0x15
    2384:	a6 8b       	std	Z+22, r26	; 0x16
    2386:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2388:	81 e0       	ldi	r24, 0x01	; 1
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	08 95       	ret

00002398 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	00 d0       	rcall	.+0      	; 0x239e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    239e:	1f 92       	push	r1
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	7c 83       	std	Y+4, r23	; 0x04
    23aa:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	48 e2       	ldi	r20, 0x28	; 40
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	0e 94 d5 36 	call	0x6daa	; 0x6daa <memset>
  // Set sensor name.
  _parent->setName(sensor);
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	fc 01       	movw	r30, r24
    23c2:	83 81       	ldd	r24, Z+3	; 0x03
    23c4:	94 81       	ldd	r25, Z+4	; 0x04
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	b9 01       	movw	r22, r18
    23cc:	fa dc       	rcall	.-1548   	; 0x1dc2 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    23ce:	2b 81       	ldd	r18, Y+3	; 0x03
    23d0:	3c 81       	ldd	r19, Y+4	; 0x04
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	f9 01       	movw	r30, r18
    23dc:	84 87       	std	Z+12, r24	; 0x0c
    23de:	95 87       	std	Z+13, r25	; 0x0d
    23e0:	a6 87       	std	Z+14, r26	; 0x0e
    23e2:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	fc 01       	movw	r30, r24
    23ea:	85 81       	ldd	r24, Z+5	; 0x05
    23ec:	96 81       	ldd	r25, Z+6	; 0x06
    23ee:	a7 81       	ldd	r26, Z+7	; 0x07
    23f0:	b0 85       	ldd	r27, Z+8	; 0x08
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	f9 01       	movw	r30, r18
    23f8:	80 8b       	std	Z+16, r24	; 0x10
    23fa:	91 8b       	std	Z+17, r25	; 0x11
    23fc:	a2 8b       	std	Z+18, r26	; 0x12
    23fe:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    2400:	2b 81       	ldd	r18, Y+3	; 0x03
    2402:	3c 81       	ldd	r19, Y+4	; 0x04
    2404:	8c e0       	ldi	r24, 0x0C	; 12
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	f9 01       	movw	r30, r18
    240e:	84 8b       	std	Z+20, r24	; 0x14
    2410:	95 8b       	std	Z+21, r25	; 0x15
    2412:	a6 8b       	std	Z+22, r26	; 0x16
    2414:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	fc 01       	movw	r30, r24
    241c:	83 81       	ldd	r24, Z+3	; 0x03
    241e:	94 81       	ldd	r25, Z+4	; 0x04
    2420:	2b 81       	ldd	r18, Y+3	; 0x03
    2422:	3c 81       	ldd	r19, Y+4	; 0x04
    2424:	b9 01       	movw	r22, r18
    2426:	2e dd       	rcall	.-1444   	; 0x1e84 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	fc 01       	movw	r30, r24
    242e:	83 81       	ldd	r24, Z+3	; 0x03
    2430:	94 81       	ldd	r25, Z+4	; 0x04
    2432:	fc 01       	movw	r30, r24
    2434:	83 89       	ldd	r24, Z+19	; 0x13
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	8c 30       	cpi	r24, 0x0C	; 12
    243c:	91 05       	cpc	r25, r1
    243e:	81 f1       	breq	.+96     	; 0x24a0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    2440:	8d 30       	cpi	r24, 0x0D	; 13
    2442:	91 05       	cpc	r25, r1
    2444:	1c f4       	brge	.+6      	; 0x244c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    2446:	0b 97       	sbiw	r24, 0x0b	; 11
    2448:	49 f0       	breq	.+18     	; 0x245c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    244a:	88 c0       	rjmp	.+272    	; 0x255c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    244c:	85 31       	cpi	r24, 0x15	; 21
    244e:	91 05       	cpc	r25, r1
    2450:	09 f4       	brne	.+2      	; 0x2454 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    2452:	48 c0       	rjmp	.+144    	; 0x24e4 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    2454:	46 97       	sbiw	r24, 0x16	; 22
    2456:	09 f4       	brne	.+2      	; 0x245a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    2458:	63 c0       	rjmp	.+198    	; 0x2520 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    245a:	80 c0       	rjmp	.+256    	; 0x255c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    245c:	2b 81       	ldd	r18, Y+3	; 0x03
    245e:	3c 81       	ldd	r19, Y+4	; 0x04
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 ea       	ldi	r26, 0xA0	; 160
    2466:	b2 e4       	ldi	r27, 0x42	; 66
    2468:	f9 01       	movw	r30, r18
    246a:	80 8f       	std	Z+24, r24	; 0x18
    246c:	91 8f       	std	Z+25, r25	; 0x19
    246e:	a2 8f       	std	Z+26, r26	; 0x1a
    2470:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2472:	2b 81       	ldd	r18, Y+3	; 0x03
    2474:	3c 81       	ldd	r19, Y+4	; 0x04
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 ea       	ldi	r26, 0xA0	; 160
    247c:	b1 e4       	ldi	r27, 0x41	; 65
    247e:	f9 01       	movw	r30, r18
    2480:	84 8f       	std	Z+28, r24	; 0x1c
    2482:	95 8f       	std	Z+29, r25	; 0x1d
    2484:	a6 8f       	std	Z+30, r26	; 0x1e
    2486:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2488:	2b 81       	ldd	r18, Y+3	; 0x03
    248a:	3c 81       	ldd	r19, Y+4	; 0x04
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 ea       	ldi	r26, 0xA0	; 160
    2492:	b0 e4       	ldi	r27, 0x40	; 64
    2494:	f9 01       	movw	r30, r18
    2496:	80 a3       	std	Z+32, r24	; 0x20
    2498:	91 a3       	std	Z+33, r25	; 0x21
    249a:	a2 a3       	std	Z+34, r26	; 0x22
    249c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    249e:	74 c0       	rjmp	.+232    	; 0x2588 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    24a0:	2b 81       	ldd	r18, Y+3	; 0x03
    24a2:	3c 81       	ldd	r19, Y+4	; 0x04
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	ae eb       	ldi	r26, 0xBE	; 190
    24aa:	b2 e4       	ldi	r27, 0x42	; 66
    24ac:	f9 01       	movw	r30, r18
    24ae:	80 8f       	std	Z+24, r24	; 0x18
    24b0:	91 8f       	std	Z+25, r25	; 0x19
    24b2:	a2 8f       	std	Z+26, r26	; 0x1a
    24b4:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    24b6:	2b 81       	ldd	r18, Y+3	; 0x03
    24b8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 ea       	ldi	r26, 0xA0	; 160
    24c0:	b1 e4       	ldi	r27, 0x41	; 65
    24c2:	f9 01       	movw	r30, r18
    24c4:	84 8f       	std	Z+28, r24	; 0x1c
    24c6:	95 8f       	std	Z+29, r25	; 0x1d
    24c8:	a6 8f       	std	Z+30, r26	; 0x1e
    24ca:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    24cc:	2b 81       	ldd	r18, Y+3	; 0x03
    24ce:	3c 81       	ldd	r19, Y+4	; 0x04
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 ea       	ldi	r26, 0xA0	; 160
    24d6:	b0 e4       	ldi	r27, 0x40	; 64
    24d8:	f9 01       	movw	r30, r18
    24da:	80 a3       	std	Z+32, r24	; 0x20
    24dc:	91 a3       	std	Z+33, r25	; 0x21
    24de:	a2 a3       	std	Z+34, r26	; 0x22
    24e0:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    24e2:	52 c0       	rjmp	.+164    	; 0x2588 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    24e4:	2b 81       	ldd	r18, Y+3	; 0x03
    24e6:	3c 81       	ldd	r19, Y+4	; 0x04
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a8 ec       	ldi	r26, 0xC8	; 200
    24ee:	b2 e4       	ldi	r27, 0x42	; 66
    24f0:	f9 01       	movw	r30, r18
    24f2:	80 8f       	std	Z+24, r24	; 0x18
    24f4:	91 8f       	std	Z+25, r25	; 0x19
    24f6:	a2 8f       	std	Z+26, r26	; 0x1a
    24f8:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	fc 01       	movw	r30, r24
    2500:	14 8e       	std	Z+28, r1	; 0x1c
    2502:	15 8e       	std	Z+29, r1	; 0x1d
    2504:	16 8e       	std	Z+30, r1	; 0x1e
    2506:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	3c 81       	ldd	r19, Y+4	; 0x04
    250c:	8d ec       	ldi	r24, 0xCD	; 205
    250e:	9c ec       	ldi	r25, 0xCC	; 204
    2510:	ac ec       	ldi	r26, 0xCC	; 204
    2512:	bd e3       	ldi	r27, 0x3D	; 61
    2514:	f9 01       	movw	r30, r18
    2516:	80 a3       	std	Z+32, r24	; 0x20
    2518:	91 a3       	std	Z+33, r25	; 0x21
    251a:	a2 a3       	std	Z+34, r26	; 0x22
    251c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    251e:	34 c0       	rjmp	.+104    	; 0x2588 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    2520:	2b 81       	ldd	r18, Y+3	; 0x03
    2522:	3c 81       	ldd	r19, Y+4	; 0x04
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a8 ec       	ldi	r26, 0xC8	; 200
    252a:	b2 e4       	ldi	r27, 0x42	; 66
    252c:	f9 01       	movw	r30, r18
    252e:	80 8f       	std	Z+24, r24	; 0x18
    2530:	91 8f       	std	Z+25, r25	; 0x19
    2532:	a2 8f       	std	Z+26, r26	; 0x1a
    2534:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	fc 01       	movw	r30, r24
    253c:	14 8e       	std	Z+28, r1	; 0x1c
    253e:	15 8e       	std	Z+29, r1	; 0x1d
    2540:	16 8e       	std	Z+30, r1	; 0x1e
    2542:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    2544:	2b 81       	ldd	r18, Y+3	; 0x03
    2546:	3c 81       	ldd	r19, Y+4	; 0x04
    2548:	8d ec       	ldi	r24, 0xCD	; 205
    254a:	9c ec       	ldi	r25, 0xCC	; 204
    254c:	ac ec       	ldi	r26, 0xCC	; 204
    254e:	bd e3       	ldi	r27, 0x3D	; 61
    2550:	f9 01       	movw	r30, r18
    2552:	80 a3       	std	Z+32, r24	; 0x20
    2554:	91 a3       	std	Z+33, r25	; 0x21
    2556:	a2 a3       	std	Z+34, r26	; 0x22
    2558:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    255a:	16 c0       	rjmp	.+44     	; 0x2588 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	fc 01       	movw	r30, r24
    2562:	10 8e       	std	Z+24, r1	; 0x18
    2564:	11 8e       	std	Z+25, r1	; 0x19
    2566:	12 8e       	std	Z+26, r1	; 0x1a
    2568:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	fc 01       	movw	r30, r24
    2570:	14 8e       	std	Z+28, r1	; 0x1c
    2572:	15 8e       	std	Z+29, r1	; 0x1d
    2574:	16 8e       	std	Z+30, r1	; 0x1e
    2576:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	fc 01       	movw	r30, r24
    257e:	10 a2       	std	Z+32, r1	; 0x20
    2580:	11 a2       	std	Z+33, r1	; 0x21
    2582:	12 a2       	std	Z+34, r1	; 0x22
    2584:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2586:	00 00       	nop
  }
}
    2588:	00 00       	nop
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	08 95       	ret

00002598 <_ZN5PrintC1Ev>:

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	1f 92       	push	r1
    259e:	1f 92       	push	r1
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	22 e4       	ldi	r18, 0x42	; 66
    25aa:	33 e0       	ldi	r19, 0x03	; 3
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	fc 01       	movw	r30, r24
    25b2:	31 83       	std	Z+1, r19	; 0x01
    25b4:	20 83       	st	Z, r18
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	fc 01       	movw	r30, r24
    25bc:	13 82       	std	Z+3, r1	; 0x03
    25be:	12 82       	std	Z+2, r1	; 0x02
    25c0:	00 00       	nop
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	08 95       	ret

000025cc <_ZN5Print17availableForWriteEv>:
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	1f 92       	push	r1
    25d2:	1f 92       	push	r1
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <_ZN5Print5flushEv>:
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	1f 92       	push	r1
    25f0:	1f 92       	push	r1
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	00 00       	nop
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <_ZN17LiquidCrystal_I2C5writeEh>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	00 d0       	rcall	.+0      	; 0x260c <_ZN17LiquidCrystal_I2C5writeEh+0x6>
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	6b 83       	std	Y+3, r22	; 0x03
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	6b 81       	ldd	r22, Y+3	; 0x03
    261e:	ba d1       	rcall	.+884    	; 0x2994 <_ZN17LiquidCrystal_I2C4sendEhh>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <_ZN17LiquidCrystal_I2CC1Ehhh>:
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	00 d0       	rcall	.+0      	; 0x2636 <_ZN17LiquidCrystal_I2CC1Ehhh+0x6>
    2636:	1f 92       	push	r1
    2638:	1f 92       	push	r1
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	6b 83       	std	Y+3, r22	; 0x03
    2644:	4c 83       	std	Y+4, r20	; 0x04
    2646:	2d 83       	std	Y+5, r18	; 0x05
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	a5 df       	rcall	.-182    	; 0x2598 <_ZN5PrintC1Ev>
    264e:	21 ef       	ldi	r18, 0xF1	; 241
    2650:	32 e0       	ldi	r19, 0x02	; 2
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	fc 01       	movw	r30, r24
    2658:	31 83       	std	Z+1, r19	; 0x01
    265a:	20 83       	st	Z, r18
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	2b 81       	ldd	r18, Y+3	; 0x03
    2662:	fc 01       	movw	r30, r24
    2664:	24 83       	std	Z+4, r18	; 0x04
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	2c 81       	ldd	r18, Y+4	; 0x04
    266c:	fc 01       	movw	r30, r24
    266e:	21 87       	std	Z+9, r18	; 0x09
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	2d 81       	ldd	r18, Y+5	; 0x05
    2676:	fc 01       	movw	r30, r24
    2678:	22 87       	std	Z+10, r18	; 0x0a
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	fc 01       	movw	r30, r24
    2680:	13 86       	std	Z+11, r1	; 0x0b
    2682:	00 00       	nop
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <_ZN17LiquidCrystal_I2C4initEv>:
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	1f 92       	push	r1
    269a:	1f 92       	push	r1
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	06 d0       	rcall	.+12     	; 0x26b6 <_ZN17LiquidCrystal_I2C9init_privEv>
    26aa:	00 00       	nop
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <_ZN17LiquidCrystal_I2C9init_privEv>:
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	1f 92       	push	r1
    26bc:	1f 92       	push	r1
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	8a ef       	ldi	r24, 0xFA	; 250
    26c8:	94 e0       	ldi	r25, 0x04	; 4
    26ca:	0e 94 67 28 	call	0x50ce	; 0x50ce <_ZN7TwoWire5beginEv>
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	fc 01       	movw	r30, r24
    26d4:	15 82       	std	Z+5, r1	; 0x05
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	fc 01       	movw	r30, r24
    26dc:	42 85       	ldd	r20, Z+10	; 0x0a
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	fc 01       	movw	r30, r24
    26e4:	31 85       	ldd	r19, Z+9	; 0x09
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	63 2f       	mov	r22, r19
    26ee:	06 d0       	rcall	.+12     	; 0x26fc <_ZN17LiquidCrystal_I2C5beginEhhh>
    26f0:	00 00       	nop
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <_ZN17LiquidCrystal_I2C5beginEhhh>:
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	00 d0       	rcall	.+0      	; 0x2702 <_ZN17LiquidCrystal_I2C5beginEhhh+0x6>
    2702:	1f 92       	push	r1
    2704:	1f 92       	push	r1
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	6b 83       	std	Y+3, r22	; 0x03
    2710:	4c 83       	std	Y+4, r20	; 0x04
    2712:	2d 83       	std	Y+5, r18	; 0x05
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	50 f0       	brcs	.+20     	; 0x272e <_ZN17LiquidCrystal_I2C5beginEhhh+0x32>
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	fc 01       	movw	r30, r24
    2720:	85 81       	ldd	r24, Z+5	; 0x05
    2722:	28 2f       	mov	r18, r24
    2724:	28 60       	ori	r18, 0x08	; 8
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	fc 01       	movw	r30, r24
    272c:	25 83       	std	Z+5, r18	; 0x05
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	2c 81       	ldd	r18, Y+4	; 0x04
    2734:	fc 01       	movw	r30, r24
    2736:	20 87       	std	Z+8, r18	; 0x08
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	88 23       	and	r24, r24
    273c:	69 f0       	breq	.+26     	; 0x2758 <_ZN17LiquidCrystal_I2C5beginEhhh+0x5c>
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	51 f4       	brne	.+20     	; 0x2758 <_ZN17LiquidCrystal_I2C5beginEhhh+0x5c>
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	fc 01       	movw	r30, r24
    274a:	85 81       	ldd	r24, Z+5	; 0x05
    274c:	28 2f       	mov	r18, r24
    274e:	24 60       	ori	r18, 0x04	; 4
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	fc 01       	movw	r30, r24
    2756:	25 83       	std	Z+5, r18	; 0x05
    2758:	62 e3       	ldi	r22, 0x32	; 50
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	fc 01       	movw	r30, r24
    276a:	23 85       	ldd	r18, Z+11	; 0x0b
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	62 2f       	mov	r22, r18
    2772:	58 d1       	rcall	.+688    	; 0x2a24 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2774:	68 ee       	ldi	r22, 0xE8	; 232
    2776:	73 e0       	ldi	r23, 0x03	; 3
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	60 e3       	ldi	r22, 0x30	; 48
    2786:	37 d1       	rcall	.+622    	; 0x29f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2788:	84 e9       	ldi	r24, 0x94	; 148
    278a:	91 e1       	ldi	r25, 0x11	; 17
    278c:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	60 e3       	ldi	r22, 0x30	; 48
    2796:	2f d1       	rcall	.+606    	; 0x29f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2798:	84 e9       	ldi	r24, 0x94	; 148
    279a:	91 e1       	ldi	r25, 0x11	; 17
    279c:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	60 e3       	ldi	r22, 0x30	; 48
    27a6:	27 d1       	rcall	.+590    	; 0x29f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    27a8:	86 e9       	ldi	r24, 0x96	; 150
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	60 e2       	ldi	r22, 0x20	; 32
    27b6:	1f d1       	rcall	.+574    	; 0x29f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	9a 81       	ldd	r25, Y+2	; 0x02
    27bc:	fc 01       	movw	r30, r24
    27be:	85 81       	ldd	r24, Z+5	; 0x05
    27c0:	28 2f       	mov	r18, r24
    27c2:	20 62       	ori	r18, 0x20	; 32
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	62 2f       	mov	r22, r18
    27ca:	d0 d0       	rcall	.+416    	; 0x296c <_ZN17LiquidCrystal_I2C7commandEh>
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	24 e0       	ldi	r18, 0x04	; 4
    27d2:	fc 01       	movw	r30, r24
    27d4:	26 83       	std	Z+6, r18	; 0x06
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	8f d0       	rcall	.+286    	; 0x28fa <_ZN17LiquidCrystal_I2C7displayEv>
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	1b d0       	rcall	.+54     	; 0x2818 <_ZN17LiquidCrystal_I2C5clearEv>
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	22 e0       	ldi	r18, 0x02	; 2
    27e8:	fc 01       	movw	r30, r24
    27ea:	27 83       	std	Z+7, r18	; 0x07
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	fc 01       	movw	r30, r24
    27f2:	87 81       	ldd	r24, Z+7	; 0x07
    27f4:	28 2f       	mov	r18, r24
    27f6:	24 60       	ori	r18, 0x04	; 4
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	62 2f       	mov	r22, r18
    27fe:	b6 d0       	rcall	.+364    	; 0x296c <_ZN17LiquidCrystal_I2C7commandEh>
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	1f d0       	rcall	.+62     	; 0x2844 <_ZN17LiquidCrystal_I2C4homeEv>
    2806:	00 00       	nop
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <_ZN17LiquidCrystal_I2C5clearEv>:
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	1f 92       	push	r1
    281e:	1f 92       	push	r1
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	9a 83       	std	Y+2, r25	; 0x02
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	9e d0       	rcall	.+316    	; 0x296c <_ZN17LiquidCrystal_I2C7commandEh>
    2830:	80 ed       	ldi	r24, 0xD0	; 208
    2832:	97 e0       	ldi	r25, 0x07	; 7
    2834:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
    2838:	00 00       	nop
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	08 95       	ret

00002844 <_ZN17LiquidCrystal_I2C4homeEv>:
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	1f 92       	push	r1
    284a:	1f 92       	push	r1
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	62 e0       	ldi	r22, 0x02	; 2
    285a:	88 d0       	rcall	.+272    	; 0x296c <_ZN17LiquidCrystal_I2C7commandEh>
    285c:	80 ed       	ldi	r24, 0xD0	; 208
    285e:	97 e0       	ldi	r25, 0x07	; 7
    2860:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
    2864:	00 00       	nop
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	08 95       	ret

00002870 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	2c 97       	sbiw	r28, 0x0c	; 12
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	9a 87       	std	Y+10, r25	; 0x0a
    2886:	89 87       	std	Y+9, r24	; 0x09
    2888:	6b 87       	std	Y+11, r22	; 0x0b
    288a:	4c 87       	std	Y+12, r20	; 0x0c
    288c:	28 e0       	ldi	r18, 0x08	; 8
    288e:	eb eb       	ldi	r30, 0xBB	; 187
    2890:	f2 e0       	ldi	r31, 0x02	; 2
    2892:	ce 01       	movw	r24, r28
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	dc 01       	movw	r26, r24
    2898:	01 90       	ld	r0, Z+
    289a:	0d 92       	st	X+, r0
    289c:	2a 95       	dec	r18
    289e:	e1 f7       	brne	.-8      	; 0x2898 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x28>
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	fc 01       	movw	r30, r24
    28a6:	90 85       	ldd	r25, Z+8	; 0x08
    28a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    28aa:	98 17       	cp	r25, r24
    28ac:	30 f4       	brcc	.+12     	; 0x28ba <_ZN17LiquidCrystal_I2C9setCursorEhh+0x4a>
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	fc 01       	movw	r30, r24
    28b4:	80 85       	ldd	r24, Z+8	; 0x08
    28b6:	81 50       	subi	r24, 0x01	; 1
    28b8:	8c 87       	std	Y+12, r24	; 0x0c
    28ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	9e 01       	movw	r18, r28
    28c6:	2f 5f       	subi	r18, 0xFF	; 255
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ca:	82 0f       	add	r24, r18
    28cc:	93 1f       	adc	r25, r19
    28ce:	fc 01       	movw	r30, r24
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	98 2f       	mov	r25, r24
    28d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d8:	89 0f       	add	r24, r25
    28da:	80 68       	ori	r24, 0x80	; 128
    28dc:	28 2f       	mov	r18, r24
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	62 2f       	mov	r22, r18
    28e4:	43 d0       	rcall	.+134    	; 0x296c <_ZN17LiquidCrystal_I2C7commandEh>
    28e6:	00 00       	nop
    28e8:	2c 96       	adiw	r28, 0x0c	; 12
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <_ZN17LiquidCrystal_I2C7displayEv>:
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	1f 92       	push	r1
    2900:	1f 92       	push	r1
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	fc 01       	movw	r30, r24
    2910:	86 81       	ldd	r24, Z+6	; 0x06
    2912:	28 2f       	mov	r18, r24
    2914:	24 60       	ori	r18, 0x04	; 4
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	fc 01       	movw	r30, r24
    291c:	26 83       	std	Z+6, r18	; 0x06
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	fc 01       	movw	r30, r24
    2924:	86 81       	ldd	r24, Z+6	; 0x06
    2926:	28 2f       	mov	r18, r24
    2928:	28 60       	ori	r18, 0x08	; 8
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	62 2f       	mov	r22, r18
    2930:	1d d0       	rcall	.+58     	; 0x296c <_ZN17LiquidCrystal_I2C7commandEh>
    2932:	00 00       	nop
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	08 95       	ret

0000293e <_ZN17LiquidCrystal_I2C9backlightEv>:

void LiquidCrystal_I2C::backlight(void) {
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	1f 92       	push	r1
    2944:	1f 92       	push	r1
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
	_backlightval=LCD_BACKLIGHT;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	28 e0       	ldi	r18, 0x08	; 8
    2954:	fc 01       	movw	r30, r24
    2956:	23 87       	std	Z+11, r18	; 0x0b
	expanderWrite(0);
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	62 d0       	rcall	.+196    	; 0x2a24 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
}
    2960:	00 00       	nop
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	08 95       	ret

0000296c <_ZN17LiquidCrystal_I2C7commandEh>:



/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	00 d0       	rcall	.+0      	; 0x2972 <_ZN17LiquidCrystal_I2C7commandEh+0x6>
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	6b 83       	std	Y+3, r22	; 0x03
	send(value, 0);
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	6b 81       	ldd	r22, Y+3	; 0x03
    2984:	07 d0       	rcall	.+14     	; 0x2994 <_ZN17LiquidCrystal_I2C4sendEhh>
}
    2986:	00 00       	nop
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <_ZN17LiquidCrystal_I2C4sendEhh+0x6>
    299a:	00 d0       	rcall	.+0      	; 0x299c <_ZN17LiquidCrystal_I2C4sendEhh+0x8>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
    29a4:	6d 83       	std	Y+5, r22	; 0x05
    29a6:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t highnib=value&0xf0;
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	80 7f       	andi	r24, 0xF0	; 240
    29ac:	89 83       	std	Y+1, r24	; 0x01
	uint8_t lownib=(value<<4)&0xf0;
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	88 2f       	mov	r24, r24
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	82 95       	swap	r24
    29b6:	92 95       	swap	r25
    29b8:	90 7f       	andi	r25, 0xF0	; 240
    29ba:	98 27       	eor	r25, r24
    29bc:	80 7f       	andi	r24, 0xF0	; 240
    29be:	98 27       	eor	r25, r24
    29c0:	8a 83       	std	Y+2, r24	; 0x02
       write4bits((highnib)|mode);
    29c2:	99 81       	ldd	r25, Y+1	; 0x01
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	29 2f       	mov	r18, r25
    29c8:	28 2b       	or	r18, r24
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	62 2f       	mov	r22, r18
    29d0:	12 d0       	rcall	.+36     	; 0x29f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	write4bits((lownib)|mode); 
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	8e 81       	ldd	r24, Y+6	; 0x06
    29d6:	29 2f       	mov	r18, r25
    29d8:	28 2b       	or	r18, r24
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	62 2f       	mov	r22, r18
    29e0:	0a d0       	rcall	.+20     	; 0x29f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>
}
    29e2:	00 00       	nop
    29e4:	26 96       	adiw	r28, 0x06	; 6
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	08 95       	ret

000029f6 <_ZN17LiquidCrystal_I2C10write4bitsEh>:

void LiquidCrystal_I2C::write4bits(uint8_t value) {
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <_ZN17LiquidCrystal_I2C10write4bitsEh+0x6>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	6b 83       	std	Y+3, r22	; 0x03
	expanderWrite(value);
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    2a0c:	0b d0       	rcall	.+22     	; 0x2a24 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	pulseEnable(value);
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	6b 81       	ldd	r22, Y+3	; 0x03
    2a14:	30 d0       	rcall	.+96     	; 0x2a76 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
}
    2a16:	00 00       	nop
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	08 95       	ret

00002a24 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x6>
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	6b 83       	std	Y+3, r22	; 0x03
	Wire.beginTransmission(_Addr);
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	fc 01       	movw	r30, r24
    2a3a:	84 81       	ldd	r24, Z+4	; 0x04
    2a3c:	68 2f       	mov	r22, r24
    2a3e:	8a ef       	ldi	r24, 0xFA	; 250
    2a40:	94 e0       	ldi	r25, 0x04	; 4
    2a42:	0e 94 3b 29 	call	0x5276	; 0x5276 <_ZN7TwoWire17beginTransmissionEh>
	printIIC((int)(_data) | _backlightval);
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	93 85       	ldd	r25, Z+11	; 0x0b
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	89 2b       	or	r24, r25
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	bc 01       	movw	r22, r24
    2a58:	8a ef       	ldi	r24, 0xFA	; 250
    2a5a:	94 e0       	ldi	r25, 0x04	; 4
    2a5c:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN7TwoWire5writeEi>
	Wire.endTransmission();   
    2a60:	8a ef       	ldi	r24, 0xFA	; 250
    2a62:	94 e0       	ldi	r25, 0x04	; 4
    2a64:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN7TwoWire15endTransmissionEv>
}
    2a68:	00 00       	nop
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <_ZN17LiquidCrystal_I2C11pulseEnableEh+0x6>
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	6b 83       	std	Y+3, r22	; 0x03
	expanderWrite(_data | En);	// En high
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	28 2f       	mov	r18, r24
    2a8a:	24 60       	ori	r18, 0x04	; 4
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	62 2f       	mov	r22, r18
    2a92:	c8 df       	rcall	.-112    	; 0x2a24 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(1);		// enable pulse must be >450ns
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
	
	expanderWrite(_data & ~En);	// En low
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	2b 7f       	andi	r18, 0xFB	; 251
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	62 2f       	mov	r22, r18
    2aa8:	bd df       	rcall	.-134    	; 0x2a24 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(50);		// commands need > 37us to settle
    2aaa:	82 e3       	ldi	r24, 0x32	; 50
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 94 30 	call	0x6128	; 0x6128 <delayMicroseconds>
} 
    2ab2:	00 00       	nop
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret

00002ac0 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2ac0:	0f 93       	push	r16
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	28 97       	sbiw	r28, 0x08	; 8
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	4b 83       	std	Y+3, r20	; 0x03
    2adc:	5c 83       	std	Y+4, r21	; 0x04
    2ade:	6d 83       	std	Y+5, r22	; 0x05
    2ae0:	7e 83       	std	Y+6, r23	; 0x06
    2ae2:	2f 83       	std	Y+7, r18	; 0x07
    2ae4:	08 87       	std	Y+8, r16	; 0x08
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	ad 81       	ldd	r26, Y+5	; 0x05
    2aec:	be 81       	ldd	r27, Y+6	; 0x06
    2aee:	e9 81       	ldd	r30, Y+1	; 0x01
    2af0:	fa 81       	ldd	r31, Y+2	; 0x02
    2af2:	08 85       	ldd	r16, Y+8	; 0x08
    2af4:	2f 81       	ldd	r18, Y+7	; 0x07
    2af6:	ac 01       	movw	r20, r24
    2af8:	bd 01       	movw	r22, r26
    2afa:	cf 01       	movw	r24, r30
    2afc:	0b d0       	rcall	.+22     	; 0x2b14 <_ZN11SPISettings16init_MightInlineEmhh>
    2afe:	00 00       	nop
    2b00:	28 96       	adiw	r28, 0x08	; 8
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	0f 91       	pop	r16
    2b12:	08 95       	ret

00002b14 <_ZN11SPISettings16init_MightInlineEmhh>:
    2b14:	0f 93       	push	r16
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	65 97       	sbiw	r28, 0x15	; 21
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	9f 87       	std	Y+15, r25	; 0x0f
    2b2c:	8e 87       	std	Y+14, r24	; 0x0e
    2b2e:	48 8b       	std	Y+16, r20	; 0x10
    2b30:	59 8b       	std	Y+17, r21	; 0x11
    2b32:	6a 8b       	std	Y+18, r22	; 0x12
    2b34:	7b 8b       	std	Y+19, r23	; 0x13
    2b36:	2c 8b       	std	Y+20, r18	; 0x14
    2b38:	0d 8b       	std	Y+21, r16	; 0x15
    2b3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	88 89       	ldd	r24, Y+16	; 0x10
    2b44:	99 89       	ldd	r25, Y+17	; 0x11
    2b46:	aa 89       	ldd	r26, Y+18	; 0x12
    2b48:	bb 89       	ldd	r27, Y+19	; 0x13
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
    2b4c:	9c 83       	std	Y+4, r25	; 0x04
    2b4e:	ad 83       	std	Y+5, r26	; 0x05
    2b50:	be 83       	std	Y+6, r27	; 0x06
    2b52:	8c 89       	ldd	r24, Y+20	; 0x14
    2b54:	8f 83       	std	Y+7, r24	; 0x07
    2b56:	8d 89       	ldd	r24, Y+21	; 0x15
    2b58:	88 87       	std	Y+8, r24	; 0x08
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	92 e1       	ldi	r25, 0x12	; 18
    2b5e:	aa e7       	ldi	r26, 0x7A	; 122
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	89 87       	std	Y+9, r24	; 0x09
    2b64:	9a 87       	std	Y+10, r25	; 0x0a
    2b66:	ab 87       	std	Y+11, r26	; 0x0b
    2b68:	bc 87       	std	Y+12, r27	; 0x0c
    2b6a:	1d 86       	std	Y+13, r1	; 0x0d
    2b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6e:	86 30       	cpi	r24, 0x06	; 6
    2b70:	e8 f4       	brcc	.+58     	; 0x2bac <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2b72:	2b 81       	ldd	r18, Y+3	; 0x03
    2b74:	3c 81       	ldd	r19, Y+4	; 0x04
    2b76:	4d 81       	ldd	r20, Y+5	; 0x05
    2b78:	5e 81       	ldd	r21, Y+6	; 0x06
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b80:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b82:	28 17       	cp	r18, r24
    2b84:	39 07       	cpc	r19, r25
    2b86:	4a 07       	cpc	r20, r26
    2b88:	5b 07       	cpc	r21, r27
    2b8a:	80 f4       	brcc	.+32     	; 0x2bac <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b92:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b94:	b6 95       	lsr	r27
    2b96:	a7 95       	ror	r26
    2b98:	97 95       	ror	r25
    2b9a:	87 95       	ror	r24
    2b9c:	89 87       	std	Y+9, r24	; 0x09
    2b9e:	9a 87       	std	Y+10, r25	; 0x0a
    2ba0:	ab 87       	std	Y+11, r26	; 0x0b
    2ba2:	bc 87       	std	Y+12, r27	; 0x0c
    2ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	8d 87       	std	Y+13, r24	; 0x0d
    2baa:	e0 cf       	rjmp	.-64     	; 0x2b6c <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bae:	86 30       	cpi	r24, 0x06	; 6
    2bb0:	11 f4       	brne	.+4      	; 0x2bb6 <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2bb2:	87 e0       	ldi	r24, 0x07	; 7
    2bb4:	8d 87       	std	Y+13, r24	; 0x0d
    2bb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 27       	eor	r24, r25
    2bbc:	8d 87       	std	Y+13, r24	; 0x0d
    2bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc0:	88 23       	and	r24, r24
    2bc2:	11 f4       	brne	.+4      	; 0x2bc8 <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    2bc4:	80 e7       	ldi	r24, 0x70	; 112
    2bc6:	01 c0       	rjmp	.+2      	; 0x2bca <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2bc8:	80 e5       	ldi	r24, 0x50	; 80
    2bca:	98 85       	ldd	r25, Y+8	; 0x08
    2bcc:	9c 70       	andi	r25, 0x0C	; 12
    2bce:	29 2f       	mov	r18, r25
    2bd0:	28 2b       	or	r18, r24
    2bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	95 95       	asr	r25
    2bda:	87 95       	ror	r24
    2bdc:	83 70       	andi	r24, 0x03	; 3
    2bde:	82 2b       	or	r24, r18
    2be0:	28 2f       	mov	r18, r24
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	9a 81       	ldd	r25, Y+2	; 0x02
    2be6:	fc 01       	movw	r30, r24
    2be8:	20 83       	st	Z, r18
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	28 2f       	mov	r18, r24
    2bee:	21 70       	andi	r18, 0x01	; 1
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	21 83       	std	Z+1, r18	; 0x01
    2bf8:	00 00       	nop
    2bfa:	65 96       	adiw	r28, 0x15	; 21
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	0f 91       	pop	r16
    2c0c:	08 95       	ret

00002c0e <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	9b 83       	std	Y+3, r25	; 0x03
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2c20:	88 23       	and	r24, r24
    2c22:	31 f1       	breq	.+76     	; 0x2c70 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2c24:	8f e5       	ldi	r24, 0x5F	; 95
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	fc 01       	movw	r30, r24
    2c2a:	80 81       	ld	r24, Z
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	f8 94       	cli
    2c30:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	c9 f4       	brne	.+50     	; 0x2c6a <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    2c38:	8d e3       	ldi	r24, 0x3D	; 61
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	80 81       	ld	r24, Z
    2c40:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2c44:	8d e3       	ldi	r24, 0x3D	; 61
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	2d e3       	ldi	r18, 0x3D	; 61
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	f9 01       	movw	r30, r18
    2c4e:	20 81       	ld	r18, Z
    2c50:	32 2f       	mov	r19, r18
    2c52:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <_ZN8SPIClass13interruptMaskE>
    2c56:	20 95       	com	r18
    2c58:	23 23       	and	r18, r19
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	20 83       	st	Z, r18
    2c5e:	8f e5       	ldi	r24, 0x5F	; 95
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	29 81       	ldd	r18, Y+1	; 0x01
    2c64:	fc 01       	movw	r30, r24
    2c66:	20 83       	st	Z, r18
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2c70:	8c e4       	ldi	r24, 0x4C	; 76
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	2a 81       	ldd	r18, Y+2	; 0x02
    2c76:	fc 01       	movw	r30, r24
    2c78:	20 83       	st	Z, r18
    2c7a:	8d e4       	ldi	r24, 0x4D	; 77
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c80:	fc 01       	movw	r30, r24
    2c82:	20 83       	st	Z, r18
    2c84:	00 00       	nop
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	08 95       	ret

00002c92 <_ZN8SPIClass8transferEh>:
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	1f 92       	push	r1
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	8e e4       	ldi	r24, 0x4E	; 78
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	29 81       	ldd	r18, Y+1	; 0x01
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	20 83       	st	Z, r18
    2ca8:	00 00       	nop
    2caa:	8d e4       	ldi	r24, 0x4D	; 77
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	fc 01       	movw	r30, r24
    2cb0:	80 81       	ld	r24, Z
    2cb2:	80 95       	com	r24
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	88 27       	eor	r24, r24
    2cb8:	88 1f       	adc	r24, r24
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <_ZN8SPIClass8transferEh+0x2e>
    2cbe:	f5 cf       	rjmp	.-22     	; 0x2caa <_ZN8SPIClass8transferEh+0x18>
    2cc0:	8e e4       	ldi	r24, 0x4E	; 78
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	80 81       	ld	r24, Z
    2cc8:	0f 90       	pop	r0
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	08 95       	ret

00002cd0 <_ZN8SPIClass14endTransactionEv>:
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
    2cd4:	1f 92       	push	r1
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2cde:	88 23       	and	r24, r24
    2ce0:	e1 f0       	breq	.+56     	; 0x2d1a <_ZN8SPIClass14endTransactionEv+0x4a>
    2ce2:	8f e5       	ldi	r24, 0x5F	; 95
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	80 81       	ld	r24, Z
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	f8 94       	cli
    2cee:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptModeE>
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	61 f4       	brne	.+24     	; 0x2d0e <_ZN8SPIClass14endTransactionEv+0x3e>
    2cf6:	8d e3       	ldi	r24, 0x3D	; 61
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 83       	st	Z, r18
    2d02:	8f e5       	ldi	r24, 0x5F	; 95
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	29 81       	ldd	r18, Y+1	; 0x01
    2d08:	fc 01       	movw	r30, r24
    2d0a:	20 83       	st	Z, r18
    2d0c:	06 c0       	rjmp	.+12     	; 0x2d1a <_ZN8SPIClass14endTransactionEv+0x4a>
    2d0e:	8f e5       	ldi	r24, 0x5F	; 95
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN8SPIClass13interruptSaveE>
    2d16:	fc 01       	movw	r30, r24
    2d18:	20 83       	st	Z, r18
    2d1a:	00 00       	nop
    2d1c:	0f 90       	pop	r0
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	08 95       	ret

00002d24 <_ZN7MFRC522C1Ehh>:
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <_ZN7MFRC522C1Ehh+0x6>
    2d2a:	1f 92       	push	r1
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	9a 83       	std	Y+2, r25	; 0x02
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	6b 83       	std	Y+3, r22	; 0x03
    2d36:	4c 83       	std	Y+4, r20	; 0x04
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3e:	fc 01       	movw	r30, r24
    2d40:	24 87       	std	Z+12, r18	; 0x0c
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	2c 81       	ldd	r18, Y+4	; 0x04
    2d48:	fc 01       	movw	r30, r24
    2d4a:	25 87       	std	Z+13, r18	; 0x0d
    2d4c:	00 00       	nop
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	08 95       	ret

00002d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    2d5c:	0f 93       	push	r16
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    2d6e:	6d 83       	std	Y+5, r22	; 0x05
    2d70:	4e 83       	std	Y+6, r20	; 0x06
    2d72:	00 e0       	ldi	r16, 0x00	; 0
    2d74:	21 e0       	ldi	r18, 0x01	; 1
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	ba 01       	movw	r22, r20
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	9f de       	rcall	.-706    	; 0x2ac0 <_ZN11SPISettingsC1Emhh>
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	43 df       	rcall	.-378    	; 0x2c0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	84 85       	ldd	r24, Z+12	; 0x0c
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2d96:	8d 81       	ldd	r24, Y+5	; 0x05
    2d98:	8e 77       	andi	r24, 0x7E	; 126
    2d9a:	7b df       	rcall	.-266    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9e:	79 df       	rcall	.-270    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	fc 01       	movw	r30, r24
    2da6:	84 85       	ldd	r24, Z+12	; 0x0c
    2da8:	61 e0       	ldi	r22, 0x01	; 1
    2daa:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2dae:	90 df       	rcall	.-224    	; 0x2cd0 <_ZN8SPIClass14endTransactionEv>
    2db0:	00 00       	nop
    2db2:	26 96       	adiw	r28, 0x06	; 6
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    2dc6:	0f 93       	push	r16
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	29 97       	sbiw	r28, 0x09	; 9
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	9d 83       	std	Y+5, r25	; 0x05
    2dde:	8c 83       	std	Y+4, r24	; 0x04
    2de0:	6e 83       	std	Y+6, r22	; 0x06
    2de2:	4f 83       	std	Y+7, r20	; 0x07
    2de4:	39 87       	std	Y+9, r19	; 0x09
    2de6:	28 87       	std	Y+8, r18	; 0x08
    2de8:	ce 01       	movw	r24, r28
    2dea:	02 96       	adiw	r24, 0x02	; 2
    2dec:	00 e0       	ldi	r16, 0x00	; 0
    2dee:	21 e0       	ldi	r18, 0x01	; 1
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	ba 01       	movw	r22, r20
    2df6:	64 de       	rcall	.-824    	; 0x2ac0 <_ZN11SPISettingsC1Emhh>
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfc:	08 df       	rcall	.-496    	; 0x2c0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	9d 81       	ldd	r25, Y+5	; 0x05
    2e02:	fc 01       	movw	r30, r24
    2e04:	84 85       	ldd	r24, Z+12	; 0x0c
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e0e:	8e 77       	andi	r24, 0x7E	; 126
    2e10:	40 df       	rcall	.-384    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2e12:	19 82       	std	Y+1, r1	; 0x01
    2e14:	99 81       	ldd	r25, Y+1	; 0x01
    2e16:	8f 81       	ldd	r24, Y+7	; 0x07
    2e18:	98 17       	cp	r25, r24
    2e1a:	70 f4       	brcc	.+28     	; 0x2e38 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	28 85       	ldd	r18, Y+8	; 0x08
    2e24:	39 85       	ldd	r19, Y+9	; 0x09
    2e26:	82 0f       	add	r24, r18
    2e28:	93 1f       	adc	r25, r19
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	80 81       	ld	r24, Z
    2e2e:	31 df       	rcall	.-414    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	8f 5f       	subi	r24, 0xFF	; 255
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	ee cf       	rjmp	.-36     	; 0x2e14 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    2e38:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	84 85       	ldd	r24, Z+12	; 0x0c
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2e46:	44 df       	rcall	.-376    	; 0x2cd0 <_ZN8SPIClass14endTransactionEv>
    2e48:	00 00       	nop
    2e4a:	29 96       	adiw	r28, 0x09	; 9
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	0f 91       	pop	r16
    2e5c:	08 95       	ret

00002e5e <_ZN7MFRC52216PCD_ReadRegisterEh>:
    2e5e:	0f 93       	push	r16
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	9d 83       	std	Y+5, r25	; 0x05
    2e6e:	8c 83       	std	Y+4, r24	; 0x04
    2e70:	6e 83       	std	Y+6, r22	; 0x06
    2e72:	ce 01       	movw	r24, r28
    2e74:	02 96       	adiw	r24, 0x02	; 2
    2e76:	00 e0       	ldi	r16, 0x00	; 0
    2e78:	21 e0       	ldi	r18, 0x01	; 1
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	ba 01       	movw	r22, r20
    2e80:	1f de       	rcall	.-962    	; 0x2ac0 <_ZN11SPISettingsC1Emhh>
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	9b 81       	ldd	r25, Y+3	; 0x03
    2e86:	c3 de       	rcall	.-634    	; 0x2c0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2e88:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	84 85       	ldd	r24, Z+12	; 0x0c
    2e90:	60 e0       	ldi	r22, 0x00	; 0
    2e92:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2e96:	8e 81       	ldd	r24, Y+6	; 0x06
    2e98:	8e 77       	andi	r24, 0x7E	; 126
    2e9a:	80 68       	ori	r24, 0x80	; 128
    2e9c:	fa de       	rcall	.-524    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	f8 de       	rcall	.-528    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	84 85       	ldd	r24, Z+12	; 0x0c
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2eb2:	0e df       	rcall	.-484    	; 0x2cd0 <_ZN8SPIClass14endTransactionEv>
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	26 96       	adiw	r28, 0x06	; 6
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	cf 93       	push	r28
    2ed0:	df 93       	push	r29
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	99 87       	std	Y+9, r25	; 0x09
    2ee4:	88 87       	std	Y+8, r24	; 0x08
    2ee6:	6a 87       	std	Y+10, r22	; 0x0a
    2ee8:	4b 87       	std	Y+11, r20	; 0x0b
    2eea:	3d 87       	std	Y+13, r19	; 0x0d
    2eec:	2c 87       	std	Y+12, r18	; 0x0c
    2eee:	0e 87       	std	Y+14, r16	; 0x0e
    2ef0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ef2:	88 23       	and	r24, r24
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    2ef6:	7e c0       	rjmp	.+252    	; 0x2ff4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    2ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2efa:	8e 77       	andi	r24, 0x7E	; 126
    2efc:	80 68       	ori	r24, 0x80	; 128
    2efe:	8c 83       	std	Y+4, r24	; 0x04
    2f00:	19 82       	std	Y+1, r1	; 0x01
    2f02:	ce 01       	movw	r24, r28
    2f04:	06 96       	adiw	r24, 0x06	; 6
    2f06:	00 e0       	ldi	r16, 0x00	; 0
    2f08:	21 e0       	ldi	r18, 0x01	; 1
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	ba 01       	movw	r22, r20
    2f10:	d7 dd       	rcall	.-1106   	; 0x2ac0 <_ZN11SPISettingsC1Emhh>
    2f12:	8e 81       	ldd	r24, Y+6	; 0x06
    2f14:	9f 81       	ldd	r25, Y+7	; 0x07
    2f16:	7b de       	rcall	.-778    	; 0x2c0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2f18:	88 85       	ldd	r24, Y+8	; 0x08
    2f1a:	99 85       	ldd	r25, Y+9	; 0x09
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	84 85       	ldd	r24, Z+12	; 0x0c
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2f26:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f28:	81 50       	subi	r24, 0x01	; 1
    2f2a:	8b 87       	std	Y+11, r24	; 0x0b
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	b1 de       	rcall	.-670    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2f30:	99 81       	ldd	r25, Y+1	; 0x01
    2f32:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f34:	98 17       	cp	r25, r24
    2f36:	08 f0       	brcs	.+2      	; 0x2f3a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    2f38:	48 c0       	rjmp	.+144    	; 0x2fca <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	88 23       	and	r24, r24
    2f3e:	a9 f5       	brne	.+106    	; 0x2faa <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2f40:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f42:	88 23       	and	r24, r24
    2f44:	91 f1       	breq	.+100    	; 0x2faa <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2f46:	1a 82       	std	Y+2, r1	; 0x02
    2f48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	88 30       	cpi	r24, 0x08	; 8
    2f50:	90 f4       	brcc	.+36     	; 0x2f76 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	2a 95       	dec	r18
    2f64:	e2 f7       	brpl	.-8      	; 0x2f5e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    2f66:	98 2f       	mov	r25, r24
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	89 2b       	or	r24, r25
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	8b 83       	std	Y+3, r24	; 0x03
    2f74:	eb cf       	rjmp	.-42     	; 0x2f4c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    2f76:	8c 81       	ldd	r24, Y+4	; 0x04
    2f78:	8c de       	rcall	.-744    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f84:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f86:	82 0f       	add	r24, r18
    2f88:	93 1f       	adc	r25, r19
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	80 81       	ld	r24, Z
    2f8e:	98 2f       	mov	r25, r24
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	80 95       	com	r24
    2f94:	89 23       	and	r24, r25
    2f96:	2d 81       	ldd	r18, Y+5	; 0x05
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	92 23       	and	r25, r18
    2f9c:	89 2b       	or	r24, r25
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fa2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	20 83       	st	Z, r18
    2fa8:	0c c0       	rjmp	.+24     	; 0x2fc2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fb2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2fb4:	89 01       	movw	r16, r18
    2fb6:	08 0f       	add	r16, r24
    2fb8:	19 1f       	adc	r17, r25
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	6a de       	rcall	.-812    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	80 83       	st	Z, r24
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	b3 cf       	rjmp	.-154    	; 0x2f30 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	88 2f       	mov	r24, r24
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fd2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2fd4:	89 01       	movw	r16, r18
    2fd6:	08 0f       	add	r16, r24
    2fd8:	19 1f       	adc	r17, r25
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	5a de       	rcall	.-844    	; 0x2c92 <_ZN8SPIClass8transferEh>
    2fde:	f8 01       	movw	r30, r16
    2fe0:	80 83       	st	Z, r24
    2fe2:	88 85       	ldd	r24, Y+8	; 0x08
    2fe4:	99 85       	ldd	r25, Y+9	; 0x09
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	84 85       	ldd	r24, Z+12	; 0x0c
    2fea:	61 e0       	ldi	r22, 0x01	; 1
    2fec:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    2ff0:	6f de       	rcall	.-802    	; 0x2cd0 <_ZN8SPIClass14endTransactionEv>
    2ff2:	01 c0       	rjmp	.+2      	; 0x2ff6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    2ff4:	00 00       	nop
    2ff6:	2e 96       	adiw	r28, 0x0e	; 14
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret

0000300c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	00 d0       	rcall	.+0      	; 0x3012 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    3012:	1f 92       	push	r1
    3014:	1f 92       	push	r1
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	9b 83       	std	Y+3, r25	; 0x03
    301c:	8a 83       	std	Y+2, r24	; 0x02
    301e:	6c 83       	std	Y+4, r22	; 0x04
    3020:	4d 83       	std	Y+5, r20	; 0x05
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	9b 81       	ldd	r25, Y+3	; 0x03
    3026:	6c 81       	ldd	r22, Y+4	; 0x04
    3028:	1a df       	rcall	.-460    	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	99 81       	ldd	r25, Y+1	; 0x01
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	29 2f       	mov	r18, r25
    3032:	28 2b       	or	r18, r24
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	9b 81       	ldd	r25, Y+3	; 0x03
    3038:	42 2f       	mov	r20, r18
    303a:	6c 81       	ldd	r22, Y+4	; 0x04
    303c:	8f de       	rcall	.-738    	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    303e:	00 00       	nop
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	08 95       	ret

00003050 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    3054:	00 d0       	rcall	.+0      	; 0x3056 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    3056:	1f 92       	push	r1
    3058:	1f 92       	push	r1
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	9b 83       	std	Y+3, r25	; 0x03
    3060:	8a 83       	std	Y+2, r24	; 0x02
    3062:	6c 83       	std	Y+4, r22	; 0x04
    3064:	4d 83       	std	Y+5, r20	; 0x05
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	6c 81       	ldd	r22, Y+4	; 0x04
    306c:	f8 de       	rcall	.-528    	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	8d 81       	ldd	r24, Y+5	; 0x05
    3072:	98 2f       	mov	r25, r24
    3074:	90 95       	com	r25
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	89 23       	and	r24, r25
    307a:	28 2f       	mov	r18, r24
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	42 2f       	mov	r20, r18
    3082:	6c 81       	ldd	r22, Y+4	; 0x04
    3084:	6b de       	rcall	.-810    	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3086:	00 00       	nop
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	2a 97       	sbiw	r28, 0x0a	; 10
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	9d 83       	std	Y+5, r25	; 0x05
    30b2:	8c 83       	std	Y+4, r24	; 0x04
    30b4:	7f 83       	std	Y+7, r23	; 0x07
    30b6:	6e 83       	std	Y+6, r22	; 0x06
    30b8:	48 87       	std	Y+8, r20	; 0x08
    30ba:	3a 87       	std	Y+10, r19	; 0x0a
    30bc:	29 87       	std	Y+9, r18	; 0x09
    30be:	8c 81       	ldd	r24, Y+4	; 0x04
    30c0:	9d 81       	ldd	r25, Y+5	; 0x05
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	62 e0       	ldi	r22, 0x02	; 2
    30c6:	4a de       	rcall	.-876    	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30c8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ca:	9d 81       	ldd	r25, Y+5	; 0x05
    30cc:	44 e0       	ldi	r20, 0x04	; 4
    30ce:	6a e0       	ldi	r22, 0x0A	; 10
    30d0:	45 de       	rcall	.-886    	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30d2:	8c 81       	ldd	r24, Y+4	; 0x04
    30d4:	9d 81       	ldd	r25, Y+5	; 0x05
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	64 e1       	ldi	r22, 0x14	; 20
    30da:	98 df       	rcall	.-208    	; 0x300c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    30dc:	2e 81       	ldd	r18, Y+6	; 0x06
    30de:	3f 81       	ldd	r19, Y+7	; 0x07
    30e0:	8c 81       	ldd	r24, Y+4	; 0x04
    30e2:	9d 81       	ldd	r25, Y+5	; 0x05
    30e4:	48 85       	ldd	r20, Y+8	; 0x08
    30e6:	62 e1       	ldi	r22, 0x12	; 18
    30e8:	6e de       	rcall	.-804    	; 0x2dc6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    30ea:	8c 81       	ldd	r24, Y+4	; 0x04
    30ec:	9d 81       	ldd	r25, Y+5	; 0x05
    30ee:	43 e0       	ldi	r20, 0x03	; 3
    30f0:	62 e0       	ldi	r22, 0x02	; 2
    30f2:	34 de       	rcall	.-920    	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    30f4:	88 e8       	ldi	r24, 0x88	; 136
    30f6:	93 e1       	ldi	r25, 0x13	; 19
    30f8:	9a 83       	std	Y+2, r25	; 0x02
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	8c 81       	ldd	r24, Y+4	; 0x04
    30fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3100:	6a e0       	ldi	r22, 0x0A	; 10
    3102:	ad de       	rcall	.-678    	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    3104:	8b 83       	std	Y+3, r24	; 0x03
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	88 2f       	mov	r24, r24
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	84 70       	andi	r24, 0x04	; 4
    310e:	99 27       	eor	r25, r25
    3110:	89 2b       	or	r24, r25
    3112:	79 f4       	brne	.+30     	; 0x3132 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	21 e0       	ldi	r18, 0x01	; 1
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	9a 81       	ldd	r25, Y+2	; 0x02
    3124:	89 2b       	or	r24, r25
    3126:	09 f0       	breq	.+2      	; 0x312a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	22 23       	and	r18, r18
    312c:	39 f3       	breq	.-50     	; 0x30fc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    312e:	83 e0       	ldi	r24, 0x03	; 3
    3130:	1b c0       	rjmp	.+54     	; 0x3168 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    3132:	00 00       	nop
    3134:	8c 81       	ldd	r24, Y+4	; 0x04
    3136:	9d 81       	ldd	r25, Y+5	; 0x05
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	62 e0       	ldi	r22, 0x02	; 2
    313c:	0f de       	rcall	.-994    	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    313e:	8c 81       	ldd	r24, Y+4	; 0x04
    3140:	9d 81       	ldd	r25, Y+5	; 0x05
    3142:	64 e4       	ldi	r22, 0x44	; 68
    3144:	8c de       	rcall	.-744    	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    3146:	28 2f       	mov	r18, r24
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	fc 01       	movw	r30, r24
    314e:	20 83       	st	Z, r18
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	8c 01       	movw	r16, r24
    3156:	0f 5f       	subi	r16, 0xFF	; 255
    3158:	1f 4f       	sbci	r17, 0xFF	; 255
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	9d 81       	ldd	r25, Y+5	; 0x05
    315e:	62 e4       	ldi	r22, 0x42	; 66
    3160:	7e de       	rcall	.-772    	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    3162:	f8 01       	movw	r30, r16
    3164:	80 83       	st	Z, r24
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	2a 96       	adiw	r28, 0x0a	; 10
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	08 95       	ret

0000317e <_ZN7MFRC5228PCD_InitEv>:
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	1f 92       	push	r1
    3184:	1f 92       	push	r1
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	9a 83       	std	Y+2, r25	; 0x02
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	fc 01       	movw	r30, r24
    3194:	84 85       	ldd	r24, Z+12	; 0x0c
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	fc 01       	movw	r30, r24
    31a2:	84 85       	ldd	r24, Z+12	; 0x0c
    31a4:	61 e0       	ldi	r22, 0x01	; 1
    31a6:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	fc 01       	movw	r30, r24
    31b0:	85 85       	ldd	r24, Z+13	; 0x0d
    31b2:	61 e0       	ldi	r22, 0x01	; 1
    31b4:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	fc 01       	movw	r30, r24
    31be:	85 85       	ldd	r24, Z+13	; 0x0d
    31c0:	0e 94 c0 31 	call	0x6380	; 0x6380 <digitalRead>
    31c4:	21 e0       	ldi	r18, 0x01	; 1
    31c6:	89 2b       	or	r24, r25
    31c8:	09 f0       	breq	.+2      	; 0x31cc <_ZN7MFRC5228PCD_InitEv+0x4e>
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	22 23       	and	r18, r18
    31ce:	71 f0       	breq	.+28     	; 0x31ec <_ZN7MFRC5228PCD_InitEv+0x6e>
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	fc 01       	movw	r30, r24
    31d6:	85 85       	ldd	r24, Z+13	; 0x0d
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    31de:	62 e3       	ldi	r22, 0x32	; 50
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
    31ea:	03 c0       	rjmp	.+6      	; 0x31f2 <_ZN7MFRC5228PCD_InitEv+0x74>
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	27 d0       	rcall	.+78     	; 0x3240 <_ZN7MFRC5229PCD_ResetEv>
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	9a 81       	ldd	r25, Y+2	; 0x02
    31f6:	40 e8       	ldi	r20, 0x80	; 128
    31f8:	64 e5       	ldi	r22, 0x54	; 84
    31fa:	b0 dd       	rcall	.-1184   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	49 ea       	ldi	r20, 0xA9	; 169
    3202:	66 e5       	ldi	r22, 0x56	; 86
    3204:	ab dd       	rcall	.-1194   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	43 e0       	ldi	r20, 0x03	; 3
    320c:	68 e5       	ldi	r22, 0x58	; 88
    320e:	a6 dd       	rcall	.-1204   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	48 ee       	ldi	r20, 0xE8	; 232
    3216:	6a e5       	ldi	r22, 0x5A	; 90
    3218:	a1 dd       	rcall	.-1214   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	40 e4       	ldi	r20, 0x40	; 64
    3220:	6a e2       	ldi	r22, 0x2A	; 42
    3222:	9c dd       	rcall	.-1224   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	4d e3       	ldi	r20, 0x3D	; 61
    322a:	62 e2       	ldi	r22, 0x22	; 34
    322c:	97 dd       	rcall	.-1234   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	9a 81       	ldd	r25, Y+2	; 0x02
    3232:	2e d0       	rcall	.+92     	; 0x3290 <_ZN7MFRC52213PCD_AntennaOnEv>
    3234:	00 00       	nop
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	08 95       	ret

00003240 <_ZN7MFRC5229PCD_ResetEv>:
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
    3244:	1f 92       	push	r1
    3246:	1f 92       	push	r1
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	9a 81       	ldd	r25, Y+2	; 0x02
    3254:	4f e0       	ldi	r20, 0x0F	; 15
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	81 dd       	rcall	.-1278   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    325a:	62 e3       	ldi	r22, 0x32	; 50
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <delay>
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	9a 81       	ldd	r25, Y+2	; 0x02
    326a:	62 e0       	ldi	r22, 0x02	; 2
    326c:	f8 dd       	rcall	.-1040   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	80 71       	andi	r24, 0x10	; 16
    3274:	99 27       	eor	r25, r25
    3276:	21 e0       	ldi	r18, 0x01	; 1
    3278:	89 2b       	or	r24, r25
    327a:	09 f4       	brne	.+2      	; 0x327e <_ZN7MFRC5229PCD_ResetEv+0x3e>
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	22 23       	and	r18, r18
    3280:	09 f0       	breq	.+2      	; 0x3284 <_ZN7MFRC5229PCD_ResetEv+0x44>
    3282:	f1 cf       	rjmp	.-30     	; 0x3266 <_ZN7MFRC5229PCD_ResetEv+0x26>
    3284:	00 00       	nop
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret

00003290 <_ZN7MFRC52213PCD_AntennaOnEv>:
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	00 d0       	rcall	.+0      	; 0x3296 <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	9b 83       	std	Y+3, r25	; 0x03
    329c:	8a 83       	std	Y+2, r24	; 0x02
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	9b 81       	ldd	r25, Y+3	; 0x03
    32a2:	68 e2       	ldi	r22, 0x28	; 40
    32a4:	dc dd       	rcall	.-1096   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	83 70       	andi	r24, 0x03	; 3
    32b0:	99 27       	eor	r25, r25
    32b2:	03 97       	sbiw	r24, 0x03	; 3
    32b4:	41 f0       	breq	.+16     	; 0x32c6 <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	28 2f       	mov	r18, r24
    32ba:	23 60       	ori	r18, 0x03	; 3
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	9b 81       	ldd	r25, Y+3	; 0x03
    32c0:	42 2f       	mov	r20, r18
    32c2:	68 e2       	ldi	r22, 0x28	; 40
    32c4:	4b dd       	rcall	.-1386   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    32c6:	00 00       	nop
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	08 95       	ret

000032d4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    32d4:	8f 92       	push	r8
    32d6:	af 92       	push	r10
    32d8:	bf 92       	push	r11
    32da:	cf 92       	push	r12
    32dc:	df 92       	push	r13
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	2e 97       	sbiw	r28, 0x0e	; 14
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	9b 83       	std	Y+3, r25	; 0x03
    32fc:	8a 83       	std	Y+2, r24	; 0x02
    32fe:	7d 83       	std	Y+5, r23	; 0x05
    3300:	6c 83       	std	Y+4, r22	; 0x04
    3302:	4e 83       	std	Y+6, r20	; 0x06
    3304:	38 87       	std	Y+8, r19	; 0x08
    3306:	2f 83       	std	Y+7, r18	; 0x07
    3308:	1a 87       	std	Y+10, r17	; 0x0a
    330a:	09 87       	std	Y+9, r16	; 0x09
    330c:	fc 86       	std	Y+12, r15	; 0x0c
    330e:	eb 86       	std	Y+11, r14	; 0x0b
    3310:	cd 86       	std	Y+13, r12	; 0x0d
    3312:	ae 86       	std	Y+14, r10	; 0x0e
    3314:	80 e3       	ldi	r24, 0x30	; 48
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	eb 85       	ldd	r30, Y+11	; 0x0b
    331a:	fc 85       	ldd	r31, Y+12	; 0x0c
    331c:	69 85       	ldd	r22, Y+9	; 0x09
    331e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3320:	4f 81       	ldd	r20, Y+7	; 0x07
    3322:	58 85       	ldd	r21, Y+8	; 0x08
    3324:	2c 81       	ldd	r18, Y+4	; 0x04
    3326:	3d 81       	ldd	r19, Y+5	; 0x05
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	ae 85       	ldd	r26, Y+14	; 0x0e
    332e:	af 93       	push	r26
    3330:	8d 84       	ldd	r8, Y+13	; 0x0d
    3332:	5f 01       	movw	r10, r30
    3334:	6b 01       	movw	r12, r22
    3336:	7a 01       	movw	r14, r20
    3338:	0e 81       	ldd	r16, Y+6	; 0x06
    333a:	49 81       	ldd	r20, Y+1	; 0x01
    333c:	6c e0       	ldi	r22, 0x0C	; 12
    333e:	13 d0       	rcall	.+38     	; 0x3366 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    3340:	0f 90       	pop	r0
    3342:	2e 96       	adiw	r28, 0x0e	; 14
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	ff 90       	pop	r15
    3358:	ef 90       	pop	r14
    335a:	df 90       	pop	r13
    335c:	cf 90       	pop	r12
    335e:	bf 90       	pop	r11
    3360:	af 90       	pop	r10
    3362:	8f 90       	pop	r8
    3364:	08 95       	ret

00003366 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    3366:	8f 92       	push	r8
    3368:	af 92       	push	r10
    336a:	bf 92       	push	r11
    336c:	cf 92       	push	r12
    336e:	df 92       	push	r13
    3370:	ef 92       	push	r14
    3372:	ff 92       	push	r15
    3374:	0f 93       	push	r16
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	68 97       	sbiw	r28, 0x18	; 24
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	9c 87       	std	Y+12, r25	; 0x0c
    338c:	8b 87       	std	Y+11, r24	; 0x0b
    338e:	6d 87       	std	Y+13, r22	; 0x0d
    3390:	4e 87       	std	Y+14, r20	; 0x0e
    3392:	38 8b       	std	Y+16, r19	; 0x10
    3394:	2f 87       	std	Y+15, r18	; 0x0f
    3396:	09 8b       	std	Y+17, r16	; 0x11
    3398:	fb 8a       	std	Y+19, r15	; 0x13
    339a:	ea 8a       	std	Y+18, r14	; 0x12
    339c:	dd 8a       	std	Y+21, r13	; 0x15
    339e:	cc 8a       	std	Y+20, r12	; 0x14
    33a0:	bf 8a       	std	Y+23, r11	; 0x17
    33a2:	ae 8a       	std	Y+22, r10	; 0x16
    33a4:	88 8e       	std	Y+24, r8	; 0x18
    33a6:	8e 89       	ldd	r24, Y+22	; 0x16
    33a8:	9f 89       	ldd	r25, Y+23	; 0x17
    33aa:	89 2b       	or	r24, r25
    33ac:	29 f0       	breq	.+10     	; 0x33b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    33ae:	8e 89       	ldd	r24, Y+22	; 0x16
    33b0:	9f 89       	ldd	r25, Y+23	; 0x17
    33b2:	fc 01       	movw	r30, r24
    33b4:	80 81       	ld	r24, Z
    33b6:	01 c0       	rjmp	.+2      	; 0x33ba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	8c 83       	std	Y+4, r24	; 0x04
    33bc:	88 8d       	ldd	r24, Y+24	; 0x18
    33be:	98 2f       	mov	r25, r24
    33c0:	92 95       	swap	r25
    33c2:	90 7f       	andi	r25, 0xF0	; 240
    33c4:	8c 81       	ldd	r24, Y+4	; 0x04
    33c6:	89 0f       	add	r24, r25
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    33cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	62 e0       	ldi	r22, 0x02	; 2
    33d2:	c4 dc       	rcall	.-1656   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    33d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	68 e0       	ldi	r22, 0x08	; 8
    33dc:	bf dc       	rcall	.-1666   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    33de:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	64 e1       	ldi	r22, 0x14	; 20
    33e6:	12 de       	rcall	.-988    	; 0x300c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    33e8:	2f 85       	ldd	r18, Y+15	; 0x0f
    33ea:	38 89       	ldd	r19, Y+16	; 0x10
    33ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    33ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    33f0:	49 89       	ldd	r20, Y+17	; 0x11
    33f2:	62 e1       	ldi	r22, 0x12	; 18
    33f4:	e8 dc       	rcall	.-1584   	; 0x2dc6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    33f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33fa:	4d 81       	ldd	r20, Y+5	; 0x05
    33fc:	6a e1       	ldi	r22, 0x1A	; 26
    33fe:	ae dc       	rcall	.-1700   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3400:	8b 85       	ldd	r24, Y+11	; 0x0b
    3402:	9c 85       	ldd	r25, Y+12	; 0x0c
    3404:	4d 85       	ldd	r20, Y+13	; 0x0d
    3406:	62 e0       	ldi	r22, 0x02	; 2
    3408:	a9 dc       	rcall	.-1710   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    340a:	8d 85       	ldd	r24, Y+13	; 0x0d
    340c:	8c 30       	cpi	r24, 0x0C	; 12
    340e:	29 f4       	brne	.+10     	; 0x341a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    3410:	8b 85       	ldd	r24, Y+11	; 0x0b
    3412:	9c 85       	ldd	r25, Y+12	; 0x0c
    3414:	40 e8       	ldi	r20, 0x80	; 128
    3416:	6a e1       	ldi	r22, 0x1A	; 26
    3418:	f9 dd       	rcall	.-1038   	; 0x300c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    341a:	80 ed       	ldi	r24, 0xD0	; 208
    341c:	97 e0       	ldi	r25, 0x07	; 7
    341e:	9b 83       	std	Y+3, r25	; 0x03
    3420:	8a 83       	std	Y+2, r24	; 0x02
    3422:	8b 85       	ldd	r24, Y+11	; 0x0b
    3424:	9c 85       	ldd	r25, Y+12	; 0x0c
    3426:	68 e0       	ldi	r22, 0x08	; 8
    3428:	1a dd       	rcall	.-1484   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    342a:	8e 83       	std	Y+6, r24	; 0x06
    342c:	9e 81       	ldd	r25, Y+6	; 0x06
    342e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3430:	89 23       	and	r24, r25
    3432:	88 23       	and	r24, r24
    3434:	c1 f4       	brne	.+48     	; 0x3466 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    3436:	8e 81       	ldd	r24, Y+6	; 0x06
    3438:	88 2f       	mov	r24, r24
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	81 70       	andi	r24, 0x01	; 1
    343e:	99 27       	eor	r25, r25
    3440:	89 2b       	or	r24, r25
    3442:	11 f0       	breq	.+4      	; 0x3448 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    3444:	83 e0       	ldi	r24, 0x03	; 3
    3446:	b4 c0       	rjmp	.+360    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3448:	8a 81       	ldd	r24, Y+2	; 0x02
    344a:	9b 81       	ldd	r25, Y+3	; 0x03
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	9b 83       	std	Y+3, r25	; 0x03
    3450:	8a 83       	std	Y+2, r24	; 0x02
    3452:	21 e0       	ldi	r18, 0x01	; 1
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	89 2b       	or	r24, r25
    345a:	09 f0       	breq	.+2      	; 0x345e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	22 23       	and	r18, r18
    3460:	01 f3       	breq	.-64     	; 0x3422 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	a5 c0       	rjmp	.+330    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3466:	00 00       	nop
    3468:	8b 85       	ldd	r24, Y+11	; 0x0b
    346a:	9c 85       	ldd	r25, Y+12	; 0x0c
    346c:	6c e0       	ldi	r22, 0x0C	; 12
    346e:	f7 dc       	rcall	.-1554   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    3470:	8f 83       	std	Y+7, r24	; 0x07
    3472:	8f 81       	ldd	r24, Y+7	; 0x07
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	83 71       	andi	r24, 0x13	; 19
    347a:	99 27       	eor	r25, r25
    347c:	89 2b       	or	r24, r25
    347e:	11 f0       	breq	.+4      	; 0x3484 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	96 c0       	rjmp	.+300    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3484:	8a 89       	ldd	r24, Y+18	; 0x12
    3486:	9b 89       	ldd	r25, Y+19	; 0x13
    3488:	89 2b       	or	r24, r25
    348a:	71 f1       	breq	.+92     	; 0x34e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    348c:	8c 89       	ldd	r24, Y+20	; 0x14
    348e:	9d 89       	ldd	r25, Y+21	; 0x15
    3490:	89 2b       	or	r24, r25
    3492:	51 f1       	breq	.+84     	; 0x34e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    3494:	8b 85       	ldd	r24, Y+11	; 0x0b
    3496:	9c 85       	ldd	r25, Y+12	; 0x0c
    3498:	64 e1       	ldi	r22, 0x14	; 20
    349a:	e1 dc       	rcall	.-1598   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    349c:	8e 83       	std	Y+6, r24	; 0x06
    349e:	8c 89       	ldd	r24, Y+20	; 0x14
    34a0:	9d 89       	ldd	r25, Y+21	; 0x15
    34a2:	fc 01       	movw	r30, r24
    34a4:	90 81       	ld	r25, Z
    34a6:	8e 81       	ldd	r24, Y+6	; 0x06
    34a8:	98 17       	cp	r25, r24
    34aa:	10 f4       	brcc	.+4      	; 0x34b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    34ac:	84 e0       	ldi	r24, 0x04	; 4
    34ae:	80 c0       	rjmp	.+256    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    34b0:	8c 89       	ldd	r24, Y+20	; 0x14
    34b2:	9d 89       	ldd	r25, Y+21	; 0x15
    34b4:	2e 81       	ldd	r18, Y+6	; 0x06
    34b6:	fc 01       	movw	r30, r24
    34b8:	20 83       	st	Z, r18
    34ba:	2a 89       	ldd	r18, Y+18	; 0x12
    34bc:	3b 89       	ldd	r19, Y+19	; 0x13
    34be:	8b 85       	ldd	r24, Y+11	; 0x0b
    34c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    34c2:	08 8d       	ldd	r16, Y+24	; 0x18
    34c4:	4e 81       	ldd	r20, Y+6	; 0x06
    34c6:	62 e1       	ldi	r22, 0x12	; 18
    34c8:	00 dd       	rcall	.-1536   	; 0x2eca <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    34ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    34cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34ce:	68 e1       	ldi	r22, 0x18	; 24
    34d0:	c6 dc       	rcall	.-1652   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    34d2:	87 70       	andi	r24, 0x07	; 7
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	8e 89       	ldd	r24, Y+22	; 0x16
    34d8:	9f 89       	ldd	r25, Y+23	; 0x17
    34da:	89 2b       	or	r24, r25
    34dc:	29 f0       	breq	.+10     	; 0x34e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    34de:	8e 89       	ldd	r24, Y+22	; 0x16
    34e0:	9f 89       	ldd	r25, Y+23	; 0x17
    34e2:	29 81       	ldd	r18, Y+1	; 0x01
    34e4:	fc 01       	movw	r30, r24
    34e6:	20 83       	st	Z, r18
    34e8:	8f 81       	ldd	r24, Y+7	; 0x07
    34ea:	88 2f       	mov	r24, r24
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	88 70       	andi	r24, 0x08	; 8
    34f0:	99 27       	eor	r25, r25
    34f2:	89 2b       	or	r24, r25
    34f4:	11 f0       	breq	.+4      	; 0x34fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	5b c0       	rjmp	.+182    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    34fa:	8a 89       	ldd	r24, Y+18	; 0x12
    34fc:	9b 89       	ldd	r25, Y+19	; 0x13
    34fe:	89 2b       	or	r24, r25
    3500:	09 f4       	brne	.+2      	; 0x3504 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    3502:	55 c0       	rjmp	.+170    	; 0x35ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    3504:	8c 89       	ldd	r24, Y+20	; 0x14
    3506:	9d 89       	ldd	r25, Y+21	; 0x15
    3508:	89 2b       	or	r24, r25
    350a:	09 f4       	brne	.+2      	; 0x350e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    350c:	50 c0       	rjmp	.+160    	; 0x35ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    350e:	8e a1       	ldd	r24, Y+38	; 0x26
    3510:	88 23       	and	r24, r24
    3512:	09 f4       	brne	.+2      	; 0x3516 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    3514:	4c c0       	rjmp	.+152    	; 0x35ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    3516:	8c 89       	ldd	r24, Y+20	; 0x14
    3518:	9d 89       	ldd	r25, Y+21	; 0x15
    351a:	fc 01       	movw	r30, r24
    351c:	80 81       	ld	r24, Z
    351e:	81 30       	cpi	r24, 0x01	; 1
    3520:	29 f4       	brne	.+10     	; 0x352c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	84 30       	cpi	r24, 0x04	; 4
    3526:	11 f4       	brne	.+4      	; 0x352c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    3528:	8f ef       	ldi	r24, 0xFF	; 255
    352a:	42 c0       	rjmp	.+132    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    352c:	8c 89       	ldd	r24, Y+20	; 0x14
    352e:	9d 89       	ldd	r25, Y+21	; 0x15
    3530:	fc 01       	movw	r30, r24
    3532:	80 81       	ld	r24, Z
    3534:	82 30       	cpi	r24, 0x02	; 2
    3536:	18 f0       	brcs	.+6      	; 0x353e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	88 23       	and	r24, r24
    353c:	11 f0       	breq	.+4      	; 0x3542 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    353e:	87 e0       	ldi	r24, 0x07	; 7
    3540:	37 c0       	rjmp	.+110    	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    3542:	8c 89       	ldd	r24, Y+20	; 0x14
    3544:	9d 89       	ldd	r25, Y+21	; 0x15
    3546:	fc 01       	movw	r30, r24
    3548:	80 81       	ld	r24, Z
    354a:	4e ef       	ldi	r20, 0xFE	; 254
    354c:	48 0f       	add	r20, r24
    354e:	9e 01       	movw	r18, r28
    3550:	27 5f       	subi	r18, 0xF7	; 247
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	6a 89       	ldd	r22, Y+18	; 0x12
    3556:	7b 89       	ldd	r23, Y+19	; 0x13
    3558:	8b 85       	ldd	r24, Y+11	; 0x0b
    355a:	9c 85       	ldd	r25, Y+12	; 0x0c
    355c:	9d dd       	rcall	.-1222   	; 0x3098 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    355e:	88 87       	std	Y+8, r24	; 0x08
    3560:	88 85       	ldd	r24, Y+8	; 0x08
    3562:	88 23       	and	r24, r24
    3564:	11 f0       	breq	.+4      	; 0x356a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    3566:	88 85       	ldd	r24, Y+8	; 0x08
    3568:	23 c0       	rjmp	.+70     	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    356a:	8c 89       	ldd	r24, Y+20	; 0x14
    356c:	9d 89       	ldd	r25, Y+21	; 0x15
    356e:	fc 01       	movw	r30, r24
    3570:	80 81       	ld	r24, Z
    3572:	88 2f       	mov	r24, r24
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	02 97       	sbiw	r24, 0x02	; 2
    3578:	2a 89       	ldd	r18, Y+18	; 0x12
    357a:	3b 89       	ldd	r19, Y+19	; 0x13
    357c:	82 0f       	add	r24, r18
    357e:	93 1f       	adc	r25, r19
    3580:	fc 01       	movw	r30, r24
    3582:	90 81       	ld	r25, Z
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	98 17       	cp	r25, r24
    3588:	81 f4       	brne	.+32     	; 0x35aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    358a:	8c 89       	ldd	r24, Y+20	; 0x14
    358c:	9d 89       	ldd	r25, Y+21	; 0x15
    358e:	fc 01       	movw	r30, r24
    3590:	80 81       	ld	r24, Z
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	2a 89       	ldd	r18, Y+18	; 0x12
    359a:	3b 89       	ldd	r19, Y+19	; 0x13
    359c:	82 0f       	add	r24, r18
    359e:	93 1f       	adc	r25, r19
    35a0:	fc 01       	movw	r30, r24
    35a2:	90 81       	ld	r25, Z
    35a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a6:	98 17       	cp	r25, r24
    35a8:	11 f0       	breq	.+4      	; 0x35ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    35aa:	87 e0       	ldi	r24, 0x07	; 7
    35ac:	01 c0       	rjmp	.+2      	; 0x35b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	68 96       	adiw	r28, 0x18	; 24
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	bf 90       	pop	r11
    35cc:	af 90       	pop	r10
    35ce:	8f 90       	pop	r8
    35d0:	08 95       	ret

000035d2 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    35d8:	00 d0       	rcall	.+0      	; 0x35da <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	9a 83       	std	Y+2, r25	; 0x02
    35e0:	89 83       	std	Y+1, r24	; 0x01
    35e2:	7c 83       	std	Y+4, r23	; 0x04
    35e4:	6b 83       	std	Y+3, r22	; 0x03
    35e6:	5e 83       	std	Y+6, r21	; 0x06
    35e8:	4d 83       	std	Y+5, r20	; 0x05
    35ea:	2d 81       	ldd	r18, Y+5	; 0x05
    35ec:	3e 81       	ldd	r19, Y+6	; 0x06
    35ee:	4b 81       	ldd	r20, Y+3	; 0x03
    35f0:	5c 81       	ldd	r21, Y+4	; 0x04
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	66 e2       	ldi	r22, 0x26	; 38
    35f8:	09 d0       	rcall	.+18     	; 0x360c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    35fa:	26 96       	adiw	r28, 0x06	; 6
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	08 95       	ret

0000360c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    360c:	af 92       	push	r10
    360e:	cf 92       	push	r12
    3610:	ef 92       	push	r14
    3612:	ff 92       	push	r15
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	29 97       	sbiw	r28, 0x09	; 9
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
    3630:	6d 83       	std	Y+5, r22	; 0x05
    3632:	5f 83       	std	Y+7, r21	; 0x07
    3634:	4e 83       	std	Y+6, r20	; 0x06
    3636:	39 87       	std	Y+9, r19	; 0x09
    3638:	28 87       	std	Y+8, r18	; 0x08
    363a:	8e 81       	ldd	r24, Y+6	; 0x06
    363c:	9f 81       	ldd	r25, Y+7	; 0x07
    363e:	89 2b       	or	r24, r25
    3640:	31 f0       	breq	.+12     	; 0x364e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    3642:	88 85       	ldd	r24, Y+8	; 0x08
    3644:	99 85       	ldd	r25, Y+9	; 0x09
    3646:	fc 01       	movw	r30, r24
    3648:	80 81       	ld	r24, Z
    364a:	82 30       	cpi	r24, 0x02	; 2
    364c:	10 f4       	brcc	.+4      	; 0x3652 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    364e:	84 e0       	ldi	r24, 0x04	; 4
    3650:	2a c0       	rjmp	.+84     	; 0x36a6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3652:	8b 81       	ldd	r24, Y+3	; 0x03
    3654:	9c 81       	ldd	r25, Y+4	; 0x04
    3656:	40 e8       	ldi	r20, 0x80	; 128
    3658:	6c e1       	ldi	r22, 0x1C	; 28
    365a:	fa dc       	rcall	.-1548   	; 0x3050 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    365c:	87 e0       	ldi	r24, 0x07	; 7
    365e:	8a 83       	std	Y+2, r24	; 0x02
    3660:	fe 01       	movw	r30, r28
    3662:	32 96       	adiw	r30, 0x02	; 2
    3664:	48 85       	ldd	r20, Y+8	; 0x08
    3666:	59 85       	ldd	r21, Y+9	; 0x09
    3668:	2e 81       	ldd	r18, Y+6	; 0x06
    366a:	3f 81       	ldd	r19, Y+7	; 0x07
    366c:	be 01       	movw	r22, r28
    366e:	6b 5f       	subi	r22, 0xFB	; 251
    3670:	7f 4f       	sbci	r23, 0xFF	; 255
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	9c 81       	ldd	r25, Y+4	; 0x04
    3676:	a1 2c       	mov	r10, r1
    3678:	c1 2c       	mov	r12, r1
    367a:	7f 01       	movw	r14, r30
    367c:	8a 01       	movw	r16, r20
    367e:	41 e0       	ldi	r20, 0x01	; 1
    3680:	29 de       	rcall	.-942    	; 0x32d4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	88 23       	and	r24, r24
    3688:	11 f0       	breq	.+4      	; 0x368e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	0c c0       	rjmp	.+24     	; 0x36a6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    368e:	88 85       	ldd	r24, Y+8	; 0x08
    3690:	99 85       	ldd	r25, Y+9	; 0x09
    3692:	fc 01       	movw	r30, r24
    3694:	80 81       	ld	r24, Z
    3696:	82 30       	cpi	r24, 0x02	; 2
    3698:	19 f4       	brne	.+6      	; 0x36a0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	88 23       	and	r24, r24
    369e:	11 f0       	breq	.+4      	; 0x36a4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	01 c0       	rjmp	.+2      	; 0x36a6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	29 96       	adiw	r28, 0x09	; 9
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	1f 91       	pop	r17
    36b8:	0f 91       	pop	r16
    36ba:	ff 90       	pop	r15
    36bc:	ef 90       	pop	r14
    36be:	cf 90       	pop	r12
    36c0:	af 90       	pop	r10
    36c2:	08 95       	ret

000036c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    36c4:	af 92       	push	r10
    36c6:	cf 92       	push	r12
    36c8:	ef 92       	push	r14
    36ca:	ff 92       	push	r15
    36cc:	0f 93       	push	r16
    36ce:	1f 93       	push	r17
    36d0:	cf 93       	push	r28
    36d2:	df 93       	push	r29
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	a1 97       	sbiw	r28, 0x21	; 33
    36da:	0f b6       	in	r0, 0x3f	; 63
    36dc:	f8 94       	cli
    36de:	de bf       	out	0x3e, r29	; 62
    36e0:	0f be       	out	0x3f, r0	; 63
    36e2:	cd bf       	out	0x3d, r28	; 61
    36e4:	9e 8f       	std	Y+30, r25	; 0x1e
    36e6:	8d 8f       	std	Y+29, r24	; 0x1d
    36e8:	78 a3       	std	Y+32, r23	; 0x20
    36ea:	6f 8f       	std	Y+31, r22	; 0x1f
    36ec:	49 a3       	std	Y+33, r20	; 0x21
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	8c 83       	std	Y+4, r24	; 0x04
    36f2:	89 a1       	ldd	r24, Y+33	; 0x21
    36f4:	81 35       	cpi	r24, 0x51	; 81
    36f6:	10 f0       	brcs	.+4      	; 0x36fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    36f8:	86 e0       	ldi	r24, 0x06	; 6
    36fa:	29 c2       	rjmp	.+1106   	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    36fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3700:	40 e8       	ldi	r20, 0x80	; 128
    3702:	6c e1       	ldi	r22, 0x1C	; 28
    3704:	a5 dc       	rcall	.-1718   	; 0x3050 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    3706:	19 82       	std	Y+1, r1	; 0x01
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	88 23       	and	r24, r24
    370c:	09 f0       	breq	.+2      	; 0x3710 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    370e:	14 c2       	rjmp	.+1064   	; 0x3b38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    3710:	8c 81       	ldd	r24, Y+4	; 0x04
    3712:	88 2f       	mov	r24, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	82 30       	cpi	r24, 0x02	; 2
    3718:	91 05       	cpc	r25, r1
    371a:	b1 f0       	breq	.+44     	; 0x3748 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    371c:	83 30       	cpi	r24, 0x03	; 3
    371e:	91 05       	cpc	r25, r1
    3720:	29 f1       	breq	.+74     	; 0x376c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	49 f5       	brne	.+82     	; 0x3778 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    3726:	83 e9       	ldi	r24, 0x93	; 147
    3728:	8a 8b       	std	Y+18, r24	; 0x12
    372a:	1f 82       	std	Y+7, r1	; 0x07
    372c:	89 a1       	ldd	r24, Y+33	; 0x21
    372e:	88 23       	and	r24, r24
    3730:	41 f0       	breq	.+16     	; 0x3742 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    3732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3734:	98 a1       	ldd	r25, Y+32	; 0x20
    3736:	fc 01       	movw	r30, r24
    3738:	80 81       	ld	r24, Z
    373a:	85 30       	cpi	r24, 0x05	; 5
    373c:	10 f0       	brcs	.+4      	; 0x3742 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	8b 83       	std	Y+3, r24	; 0x03
    3746:	1a c0       	rjmp	.+52     	; 0x377c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3748:	85 e9       	ldi	r24, 0x95	; 149
    374a:	8a 8b       	std	Y+18, r24	; 0x12
    374c:	83 e0       	ldi	r24, 0x03	; 3
    374e:	8f 83       	std	Y+7, r24	; 0x07
    3750:	89 a1       	ldd	r24, Y+33	; 0x21
    3752:	88 23       	and	r24, r24
    3754:	41 f0       	breq	.+16     	; 0x3766 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    3756:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3758:	98 a1       	ldd	r25, Y+32	; 0x20
    375a:	fc 01       	movw	r30, r24
    375c:	80 81       	ld	r24, Z
    375e:	88 30       	cpi	r24, 0x08	; 8
    3760:	10 f0       	brcs	.+4      	; 0x3766 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	8b 83       	std	Y+3, r24	; 0x03
    376a:	08 c0       	rjmp	.+16     	; 0x377c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    376c:	87 e9       	ldi	r24, 0x97	; 151
    376e:	8a 8b       	std	Y+18, r24	; 0x12
    3770:	86 e0       	ldi	r24, 0x06	; 6
    3772:	8f 83       	std	Y+7, r24	; 0x07
    3774:	1b 82       	std	Y+3, r1	; 0x03
    3776:	02 c0       	rjmp	.+4      	; 0x377c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3778:	85 e0       	ldi	r24, 0x05	; 5
    377a:	e9 c1       	rjmp	.+978    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    377c:	8f 81       	ldd	r24, Y+7	; 0x07
    377e:	88 0f       	add	r24, r24
    3780:	88 0f       	add	r24, r24
    3782:	88 0f       	add	r24, r24
    3784:	99 a1       	ldd	r25, Y+33	; 0x21
    3786:	f9 2f       	mov	r31, r25
    3788:	f8 1b       	sub	r31, r24
    378a:	8f 2f       	mov	r24, r31
    378c:	88 87       	std	Y+8, r24	; 0x08
    378e:	88 85       	ldd	r24, Y+8	; 0x08
    3790:	88 23       	and	r24, r24
    3792:	0c f4       	brge	.+2      	; 0x3796 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    3794:	18 86       	std	Y+8, r1	; 0x08
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	8e 83       	std	Y+6, r24	; 0x06
    379a:	8b 81       	ldd	r24, Y+3	; 0x03
    379c:	88 23       	and	r24, r24
    379e:	71 f0       	breq	.+28     	; 0x37bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    37a0:	8e 81       	ldd	r24, Y+6	; 0x06
    37a2:	91 e0       	ldi	r25, 0x01	; 1
    37a4:	98 0f       	add	r25, r24
    37a6:	9e 83       	std	Y+6, r25	; 0x06
    37a8:	88 2f       	mov	r24, r24
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	9e 01       	movw	r18, r28
    37ae:	2e 5e       	subi	r18, 0xEE	; 238
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
    37b2:	82 0f       	add	r24, r18
    37b4:	93 1f       	adc	r25, r19
    37b6:	28 e8       	ldi	r18, 0x88	; 136
    37b8:	fc 01       	movw	r30, r24
    37ba:	20 83       	st	Z, r18
    37bc:	88 85       	ldd	r24, Y+8	; 0x08
    37be:	88 23       	and	r24, r24
    37c0:	0c f4       	brge	.+2      	; 0x37c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    37c2:	89 5f       	subi	r24, 0xF9	; 249
    37c4:	85 95       	asr	r24
    37c6:	85 95       	asr	r24
    37c8:	85 95       	asr	r24
    37ca:	98 2f       	mov	r25, r24
    37cc:	88 85       	ldd	r24, Y+8	; 0x08
    37ce:	87 70       	andi	r24, 0x07	; 7
    37d0:	88 23       	and	r24, r24
    37d2:	11 f0       	breq	.+4      	; 0x37d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	01 c0       	rjmp	.+2      	; 0x37da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	89 0f       	add	r24, r25
    37dc:	8c 87       	std	Y+12, r24	; 0x0c
    37de:	8c 85       	ldd	r24, Y+12	; 0x0c
    37e0:	88 23       	and	r24, r24
    37e2:	99 f1       	breq	.+102    	; 0x384a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	88 23       	and	r24, r24
    37e8:	11 f0       	breq	.+4      	; 0x37ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    37ea:	83 e0       	ldi	r24, 0x03	; 3
    37ec:	01 c0       	rjmp	.+2      	; 0x37f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    37ee:	84 e0       	ldi	r24, 0x04	; 4
    37f0:	8e 87       	std	Y+14, r24	; 0x0e
    37f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    37f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    37f6:	89 17       	cp	r24, r25
    37f8:	10 f4       	brcc	.+4      	; 0x37fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    37fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    37fc:	8c 87       	std	Y+12, r24	; 0x0c
    37fe:	1d 82       	std	Y+5, r1	; 0x05
    3800:	9d 81       	ldd	r25, Y+5	; 0x05
    3802:	8c 85       	ldd	r24, Y+12	; 0x0c
    3804:	98 17       	cp	r25, r24
    3806:	08 f5       	brcc	.+66     	; 0x384a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    3808:	8e 81       	ldd	r24, Y+6	; 0x06
    380a:	91 e0       	ldi	r25, 0x01	; 1
    380c:	98 0f       	add	r25, r24
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	88 2f       	mov	r24, r24
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	2f 81       	ldd	r18, Y+7	; 0x07
    3816:	42 2f       	mov	r20, r18
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	2d 81       	ldd	r18, Y+5	; 0x05
    381c:	22 2f       	mov	r18, r18
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	24 0f       	add	r18, r20
    3822:	35 1f       	adc	r19, r21
    3824:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3826:	58 a1       	ldd	r21, Y+32	; 0x20
    3828:	24 0f       	add	r18, r20
    382a:	35 1f       	adc	r19, r21
    382c:	2f 5f       	subi	r18, 0xFF	; 255
    382e:	3f 4f       	sbci	r19, 0xFF	; 255
    3830:	f9 01       	movw	r30, r18
    3832:	40 81       	ld	r20, Z
    3834:	9e 01       	movw	r18, r28
    3836:	2e 5e       	subi	r18, 0xEE	; 238
    3838:	3f 4f       	sbci	r19, 0xFF	; 255
    383a:	82 0f       	add	r24, r18
    383c:	93 1f       	adc	r25, r19
    383e:	fc 01       	movw	r30, r24
    3840:	40 83       	st	Z, r20
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	8f 5f       	subi	r24, 0xFF	; 255
    3846:	8d 83       	std	Y+5, r24	; 0x05
    3848:	db cf       	rjmp	.-74     	; 0x3800 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	88 23       	and	r24, r24
    384e:	19 f0       	breq	.+6      	; 0x3856 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    3850:	88 85       	ldd	r24, Y+8	; 0x08
    3852:	88 5f       	subi	r24, 0xF8	; 248
    3854:	88 87       	std	Y+8, r24	; 0x08
    3856:	1a 82       	std	Y+2, r1	; 0x02
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	88 23       	and	r24, r24
    385c:	09 f0       	breq	.+2      	; 0x3860 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    385e:	f5 c0       	rjmp	.+490    	; 0x3a4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    3860:	88 85       	ldd	r24, Y+8	; 0x08
    3862:	80 32       	cpi	r24, 0x20	; 32
    3864:	3c f1       	brlt	.+78     	; 0x38b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    3866:	80 e7       	ldi	r24, 0x70	; 112
    3868:	8b 8b       	std	Y+19, r24	; 0x13
    386a:	9c 89       	ldd	r25, Y+20	; 0x14
    386c:	8d 89       	ldd	r24, Y+21	; 0x15
    386e:	98 27       	eor	r25, r24
    3870:	8e 89       	ldd	r24, Y+22	; 0x16
    3872:	98 27       	eor	r25, r24
    3874:	8f 89       	ldd	r24, Y+23	; 0x17
    3876:	89 27       	eor	r24, r25
    3878:	88 8f       	std	Y+24, r24	; 0x18
    387a:	ce 01       	movw	r24, r28
    387c:	42 96       	adiw	r24, 0x12	; 18
    387e:	9c 01       	movw	r18, r24
    3880:	29 5f       	subi	r18, 0xF9	; 249
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	be 01       	movw	r22, r28
    3886:	6e 5e       	subi	r22, 0xEE	; 238
    3888:	7f 4f       	sbci	r23, 0xFF	; 255
    388a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    388c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    388e:	47 e0       	ldi	r20, 0x07	; 7
    3890:	03 dc       	rcall	.-2042   	; 0x3098 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3892:	8f 87       	std	Y+15, r24	; 0x0f
    3894:	8f 85       	ldd	r24, Y+15	; 0x0f
    3896:	88 23       	and	r24, r24
    3898:	11 f0       	breq	.+4      	; 0x389e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    389a:	8f 85       	ldd	r24, Y+15	; 0x0f
    389c:	58 c1       	rjmp	.+688    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    389e:	1b 8e       	std	Y+27, r1	; 0x1b
    38a0:	89 e0       	ldi	r24, 0x09	; 9
    38a2:	89 87       	std	Y+9, r24	; 0x09
    38a4:	ce 01       	movw	r24, r28
    38a6:	42 96       	adiw	r24, 0x12	; 18
    38a8:	06 96       	adiw	r24, 0x06	; 6
    38aa:	9b 87       	std	Y+11, r25	; 0x0b
    38ac:	8a 87       	std	Y+10, r24	; 0x0a
    38ae:	83 e0       	ldi	r24, 0x03	; 3
    38b0:	8c 8f       	std	Y+28, r24	; 0x1c
    38b2:	33 c0       	rjmp	.+102    	; 0x391a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    38b4:	88 85       	ldd	r24, Y+8	; 0x08
    38b6:	87 78       	andi	r24, 0x87	; 135
    38b8:	88 23       	and	r24, r24
    38ba:	1c f4       	brge	.+6      	; 0x38c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    38bc:	81 50       	subi	r24, 0x01	; 1
    38be:	88 6f       	ori	r24, 0xF8	; 248
    38c0:	8f 5f       	subi	r24, 0xFF	; 255
    38c2:	8b 8f       	std	Y+27, r24	; 0x1b
    38c4:	88 85       	ldd	r24, Y+8	; 0x08
    38c6:	88 23       	and	r24, r24
    38c8:	0c f4       	brge	.+2      	; 0x38cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    38ca:	89 5f       	subi	r24, 0xF9	; 249
    38cc:	85 95       	asr	r24
    38ce:	85 95       	asr	r24
    38d0:	85 95       	asr	r24
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	8e 5f       	subi	r24, 0xFE	; 254
    38d8:	8e 83       	std	Y+6, r24	; 0x06
    38da:	8e 81       	ldd	r24, Y+6	; 0x06
    38dc:	98 2f       	mov	r25, r24
    38de:	92 95       	swap	r25
    38e0:	90 7f       	andi	r25, 0xF0	; 240
    38e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e4:	89 0f       	add	r24, r25
    38e6:	8b 8b       	std	Y+19, r24	; 0x13
    38e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ea:	88 23       	and	r24, r24
    38ec:	11 f0       	breq	.+4      	; 0x38f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	01 c0       	rjmp	.+2      	; 0x38f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	9e 81       	ldd	r25, Y+6	; 0x06
    38f6:	89 0f       	add	r24, r25
    38f8:	89 87       	std	Y+9, r24	; 0x09
    38fa:	8e 81       	ldd	r24, Y+6	; 0x06
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	9e 01       	movw	r18, r28
    3902:	2e 5e       	subi	r18, 0xEE	; 238
    3904:	3f 4f       	sbci	r19, 0xFF	; 255
    3906:	82 0f       	add	r24, r18
    3908:	93 1f       	adc	r25, r19
    390a:	9b 87       	std	Y+11, r25	; 0x0b
    390c:	8a 87       	std	Y+10, r24	; 0x0a
    390e:	99 e0       	ldi	r25, 0x09	; 9
    3910:	8e 81       	ldd	r24, Y+6	; 0x06
    3912:	f9 2f       	mov	r31, r25
    3914:	f8 1b       	sub	r31, r24
    3916:	8f 2f       	mov	r24, r31
    3918:	8c 8f       	std	Y+28, r24	; 0x1c
    391a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391c:	88 8b       	std	Y+16, r24	; 0x10
    391e:	88 89       	ldd	r24, Y+16	; 0x10
    3920:	98 2f       	mov	r25, r24
    3922:	92 95       	swap	r25
    3924:	90 7f       	andi	r25, 0xF0	; 240
    3926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3928:	29 2f       	mov	r18, r25
    392a:	28 0f       	add	r18, r24
    392c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3930:	42 2f       	mov	r20, r18
    3932:	6a e1       	ldi	r22, 0x1A	; 26
    3934:	13 da       	rcall	.-3034   	; 0x2d5c <_ZN7MFRC52217PCD_WriteRegisterEhh>
    3936:	fe 01       	movw	r30, r28
    3938:	7b 96       	adiw	r30, 0x1b	; 27
    393a:	ae 01       	movw	r20, r28
    393c:	44 5e       	subi	r20, 0xE4	; 228
    393e:	5f 4f       	sbci	r21, 0xFF	; 255
    3940:	2a 85       	ldd	r18, Y+10	; 0x0a
    3942:	3b 85       	ldd	r19, Y+11	; 0x0b
    3944:	be 01       	movw	r22, r28
    3946:	6e 5e       	subi	r22, 0xEE	; 238
    3948:	7f 4f       	sbci	r23, 0xFF	; 255
    394a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    394c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    394e:	a1 2c       	mov	r10, r1
    3950:	c8 88       	ldd	r12, Y+16	; 0x10
    3952:	7f 01       	movw	r14, r30
    3954:	8a 01       	movw	r16, r20
    3956:	49 85       	ldd	r20, Y+9	; 0x09
    3958:	bd dc       	rcall	.-1670   	; 0x32d4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    395a:	8f 87       	std	Y+15, r24	; 0x0f
    395c:	8f 85       	ldd	r24, Y+15	; 0x0f
    395e:	82 30       	cpi	r24, 0x02	; 2
    3960:	09 f0       	breq	.+2      	; 0x3964 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    3962:	65 c0       	rjmp	.+202    	; 0x3a2e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    3964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3968:	6c e1       	ldi	r22, 0x1C	; 28
    396a:	79 da       	rcall	.-2830   	; 0x2e5e <_ZN7MFRC52216PCD_ReadRegisterEh>
    396c:	89 8b       	std	Y+17, r24	; 0x11
    396e:	89 89       	ldd	r24, Y+17	; 0x11
    3970:	88 2f       	mov	r24, r24
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	80 72       	andi	r24, 0x20	; 32
    3976:	99 27       	eor	r25, r25
    3978:	89 2b       	or	r24, r25
    397a:	11 f0       	breq	.+4      	; 0x3980 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	e7 c0       	rjmp	.+462    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3980:	89 89       	ldd	r24, Y+17	; 0x11
    3982:	8f 71       	andi	r24, 0x1F	; 31
    3984:	8d 87       	std	Y+13, r24	; 0x0d
    3986:	8d 85       	ldd	r24, Y+13	; 0x0d
    3988:	88 23       	and	r24, r24
    398a:	11 f4       	brne	.+4      	; 0x3990 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    398c:	80 e2       	ldi	r24, 0x20	; 32
    398e:	8d 87       	std	Y+13, r24	; 0x0d
    3990:	8d 85       	ldd	r24, Y+13	; 0x0d
    3992:	28 2f       	mov	r18, r24
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	88 85       	ldd	r24, Y+8	; 0x08
    3998:	08 2e       	mov	r0, r24
    399a:	00 0c       	add	r0, r0
    399c:	99 0b       	sbc	r25, r25
    399e:	82 17       	cp	r24, r18
    39a0:	93 07       	cpc	r25, r19
    39a2:	14 f0       	brlt	.+4      	; 0x39a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    39a4:	85 e0       	ldi	r24, 0x05	; 5
    39a6:	d3 c0       	rjmp	.+422    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    39a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39aa:	88 87       	std	Y+8, r24	; 0x08
    39ac:	88 85       	ldd	r24, Y+8	; 0x08
    39ae:	08 2e       	mov	r0, r24
    39b0:	00 0c       	add	r0, r0
    39b2:	99 0b       	sbc	r25, r25
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	87 70       	andi	r24, 0x07	; 7
    39b8:	90 78       	andi	r25, 0x80	; 128
    39ba:	99 23       	and	r25, r25
    39bc:	24 f4       	brge	.+8      	; 0x39c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	88 6f       	ori	r24, 0xF8	; 248
    39c2:	9f 6f       	ori	r25, 0xFF	; 255
    39c4:	01 96       	adiw	r24, 0x01	; 1
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	88 85       	ldd	r24, Y+8	; 0x08
    39ca:	88 23       	and	r24, r24
    39cc:	0c f4       	brge	.+2      	; 0x39d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    39ce:	89 5f       	subi	r24, 0xF9	; 249
    39d0:	85 95       	asr	r24
    39d2:	85 95       	asr	r24
    39d4:	85 95       	asr	r24
    39d6:	98 2f       	mov	r25, r24
    39d8:	8d 81       	ldd	r24, Y+5	; 0x05
    39da:	88 23       	and	r24, r24
    39dc:	11 f0       	breq	.+4      	; 0x39e2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	01 c0       	rjmp	.+2      	; 0x39e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	89 0f       	add	r24, r25
    39e6:	8f 5f       	subi	r24, 0xFF	; 255
    39e8:	8e 83       	std	Y+6, r24	; 0x06
    39ea:	8e 81       	ldd	r24, Y+6	; 0x06
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	2e 81       	ldd	r18, Y+6	; 0x06
    39f2:	22 2f       	mov	r18, r18
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	ae 01       	movw	r20, r28
    39f8:	4e 5e       	subi	r20, 0xEE	; 238
    39fa:	5f 4f       	sbci	r21, 0xFF	; 255
    39fc:	24 0f       	add	r18, r20
    39fe:	35 1f       	adc	r19, r21
    3a00:	f9 01       	movw	r30, r18
    3a02:	20 81       	ld	r18, Z
    3a04:	62 2f       	mov	r22, r18
    3a06:	2d 81       	ldd	r18, Y+5	; 0x05
    3a08:	42 2f       	mov	r20, r18
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	21 e0       	ldi	r18, 0x01	; 1
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    3a12:	22 0f       	add	r18, r18
    3a14:	33 1f       	adc	r19, r19
    3a16:	4a 95       	dec	r20
    3a18:	e2 f7       	brpl	.-8      	; 0x3a12 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    3a1a:	26 2b       	or	r18, r22
    3a1c:	42 2f       	mov	r20, r18
    3a1e:	9e 01       	movw	r18, r28
    3a20:	2e 5e       	subi	r18, 0xEE	; 238
    3a22:	3f 4f       	sbci	r19, 0xFF	; 255
    3a24:	82 0f       	add	r24, r18
    3a26:	93 1f       	adc	r25, r19
    3a28:	fc 01       	movw	r30, r24
    3a2a:	40 83       	st	Z, r20
    3a2c:	15 cf       	rjmp	.-470    	; 0x3858 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a30:	88 23       	and	r24, r24
    3a32:	11 f0       	breq	.+4      	; 0x3a38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    3a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a36:	8b c0       	rjmp	.+278    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3a38:	88 85       	ldd	r24, Y+8	; 0x08
    3a3a:	80 32       	cpi	r24, 0x20	; 32
    3a3c:	1c f0       	brlt	.+6      	; 0x3a44 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	8a 83       	std	Y+2, r24	; 0x02
    3a42:	0a cf       	rjmp	.-492    	; 0x3858 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3a44:	80 e2       	ldi	r24, 0x20	; 32
    3a46:	88 87       	std	Y+8, r24	; 0x08
    3a48:	07 cf       	rjmp	.-498    	; 0x3858 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3a4a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a4c:	88 38       	cpi	r24, 0x88	; 136
    3a4e:	11 f4       	brne	.+4      	; 0x3a54 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    3a50:	83 e0       	ldi	r24, 0x03	; 3
    3a52:	01 c0       	rjmp	.+2      	; 0x3a56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    3a54:	82 e0       	ldi	r24, 0x02	; 2
    3a56:	8e 83       	std	Y+6, r24	; 0x06
    3a58:	8c 89       	ldd	r24, Y+20	; 0x14
    3a5a:	88 38       	cpi	r24, 0x88	; 136
    3a5c:	11 f4       	brne	.+4      	; 0x3a62 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    3a5e:	83 e0       	ldi	r24, 0x03	; 3
    3a60:	01 c0       	rjmp	.+2      	; 0x3a64 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    3a62:	84 e0       	ldi	r24, 0x04	; 4
    3a64:	8c 87       	std	Y+12, r24	; 0x0c
    3a66:	1d 82       	std	Y+5, r1	; 0x05
    3a68:	9d 81       	ldd	r25, Y+5	; 0x05
    3a6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a6c:	98 17       	cp	r25, r24
    3a6e:	00 f5       	brcc	.+64     	; 0x3ab0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    3a70:	8f 81       	ldd	r24, Y+7	; 0x07
    3a72:	28 2f       	mov	r18, r24
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	88 2f       	mov	r24, r24
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	82 0f       	add	r24, r18
    3a7e:	93 1f       	adc	r25, r19
    3a80:	2e 81       	ldd	r18, Y+6	; 0x06
    3a82:	31 e0       	ldi	r19, 0x01	; 1
    3a84:	32 0f       	add	r19, r18
    3a86:	3e 83       	std	Y+6, r19	; 0x06
    3a88:	22 2f       	mov	r18, r18
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	ae 01       	movw	r20, r28
    3a8e:	4e 5e       	subi	r20, 0xEE	; 238
    3a90:	5f 4f       	sbci	r21, 0xFF	; 255
    3a92:	24 0f       	add	r18, r20
    3a94:	35 1f       	adc	r19, r21
    3a96:	f9 01       	movw	r30, r18
    3a98:	40 81       	ld	r20, Z
    3a9a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3a9c:	38 a1       	ldd	r19, Y+32	; 0x20
    3a9e:	82 0f       	add	r24, r18
    3aa0:	93 1f       	adc	r25, r19
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	40 83       	st	Z, r20
    3aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aaa:	8f 5f       	subi	r24, 0xFF	; 255
    3aac:	8d 83       	std	Y+5, r24	; 0x05
    3aae:	dc cf       	rjmp	.-72     	; 0x3a68 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3ab0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ab2:	83 30       	cpi	r24, 0x03	; 3
    3ab4:	19 f4       	brne	.+6      	; 0x3abc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    3ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab8:	88 23       	and	r24, r24
    3aba:	11 f0       	breq	.+4      	; 0x3ac0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	47 c0       	rjmp	.+142    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	42 96       	adiw	r24, 0x12	; 18
    3ac4:	9c 01       	movw	r18, r24
    3ac6:	2e 5f       	subi	r18, 0xFE	; 254
    3ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aca:	6a 85       	ldd	r22, Y+10	; 0x0a
    3acc:	7b 85       	ldd	r23, Y+11	; 0x0b
    3ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	e1 da       	rcall	.-2622   	; 0x3098 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3ad6:	8f 87       	std	Y+15, r24	; 0x0f
    3ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ada:	88 23       	and	r24, r24
    3adc:	11 f0       	breq	.+4      	; 0x3ae2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae0:	36 c0       	rjmp	.+108    	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3ae2:	2c 89       	ldd	r18, Y+20	; 0x14
    3ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	fc 01       	movw	r30, r24
    3aec:	80 81       	ld	r24, Z
    3aee:	28 17       	cp	r18, r24
    3af0:	41 f4       	brne	.+16     	; 0x3b02 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    3af2:	2d 89       	ldd	r18, Y+21	; 0x15
    3af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3af6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3af8:	02 96       	adiw	r24, 0x02	; 2
    3afa:	fc 01       	movw	r30, r24
    3afc:	80 81       	ld	r24, Z
    3afe:	28 17       	cp	r18, r24
    3b00:	11 f0       	breq	.+4      	; 0x3b06 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    3b02:	87 e0       	ldi	r24, 0x07	; 7
    3b04:	24 c0       	rjmp	.+72     	; 0x3b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	80 81       	ld	r24, Z
    3b0e:	88 2f       	mov	r24, r24
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	84 70       	andi	r24, 0x04	; 4
    3b14:	99 27       	eor	r25, r25
    3b16:	89 2b       	or	r24, r25
    3b18:	21 f0       	breq	.+8      	; 0x3b22 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    3b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b1c:	8f 5f       	subi	r24, 0xFF	; 255
    3b1e:	8c 83       	std	Y+4, r24	; 0x04
    3b20:	f3 cd       	rjmp	.-1050   	; 0x3708 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	20 81       	ld	r18, Z
    3b2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b30:	98 a1       	ldd	r25, Y+32	; 0x20
    3b32:	fc 01       	movw	r30, r24
    3b34:	23 87       	std	Z+11, r18	; 0x0b
    3b36:	e8 cd       	rjmp	.-1072   	; 0x3708 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    3b38:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3a:	89 2f       	mov	r24, r25
    3b3c:	88 0f       	add	r24, r24
    3b3e:	89 0f       	add	r24, r25
    3b40:	21 e0       	ldi	r18, 0x01	; 1
    3b42:	28 0f       	add	r18, r24
    3b44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b46:	98 a1       	ldd	r25, Y+32	; 0x20
    3b48:	fc 01       	movw	r30, r24
    3b4a:	20 83       	st	Z, r18
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	a1 96       	adiw	r28, 0x21	; 33
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	cd bf       	out	0x3d, r28	; 61
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	cf 90       	pop	r12
    3b68:	af 90       	pop	r10
    3b6a:	08 95       	ret

00003b6c <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	00 d0       	rcall	.+0      	; 0x3b72 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    3b72:	00 d0       	rcall	.+0      	; 0x3b74 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	9e 83       	std	Y+6, r25	; 0x06
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3b7c:	82 e0       	ldi	r24, 0x02	; 2
    3b7e:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    3b80:	ae 01       	movw	r20, r28
    3b82:	4c 5f       	subi	r20, 0xFC	; 252
    3b84:	5f 4f       	sbci	r21, 0xFF	; 255
    3b86:	9e 01       	movw	r18, r28
    3b88:	2e 5f       	subi	r18, 0xFE	; 254
    3b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b90:	b9 01       	movw	r22, r18
    3b92:	1f dd       	rcall	.-1474   	; 0x35d2 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    3b94:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	88 23       	and	r24, r24
    3b9a:	19 f0       	breq	.+6      	; 0x3ba2 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	82 30       	cpi	r24, 0x02	; 2
    3ba0:	11 f4       	brne	.+4      	; 0x3ba6 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	01 c0       	rjmp	.+2      	; 0x3ba8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    3ba8:	26 96       	adiw	r28, 0x06	; 6
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

00003bba <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	9b 83       	std	Y+3, r25	; 0x03
    3bc6:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    3bc8:	2a 81       	ldd	r18, Y+2	; 0x02
    3bca:	3b 81       	ldd	r19, Y+3	; 0x03
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	b9 01       	movw	r22, r18
    3bd4:	77 dd       	rcall	.-1298   	; 0x36c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    3bd6:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	99 81       	ldd	r25, Y+1	; 0x01
    3bdc:	99 23       	and	r25, r25
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    3be0:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	0f 90       	pop	r0
    3be8:	df 91       	pop	r29
    3bea:	cf 91       	pop	r28
    3bec:	08 95       	ret

00003bee <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    3bf4:	1f 92       	push	r1
    3bf6:	1f 92       	push	r1
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	7b 83       	std	Y+3, r23	; 0x03
    3c00:	6a 83       	std	Y+2, r22	; 0x02
    3c02:	5d 83       	std	Y+5, r21	; 0x05
    3c04:	4c 83       	std	Y+4, r20	; 0x04
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	88 2f       	mov	r24, r24
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	8d 5c       	subi	r24, 0xCD	; 205
    3c0e:	9b 4f       	sbci	r25, 0xFB	; 251
    3c10:	fc 01       	movw	r30, r24
    3c12:	80 81       	ld	r24, Z
    3c14:	88 1f       	adc	r24, r24
    3c16:	88 27       	eor	r24, r24
    3c18:	88 1f       	adc	r24, r24
    3c1a:	88 23       	and	r24, r24
    3c1c:	31 f0       	breq	.+12     	; 0x3c2a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	9b 81       	ldd	r25, Y+3	; 0x03
    3c22:	fc 01       	movw	r30, r24
    3c24:	11 82       	std	Z+1, r1	; 0x01
    3c26:	10 82       	st	Z, r1
    3c28:	72 c0       	rjmp	.+228    	; 0x3d0e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	c9 01       	movw	r24, r18
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	82 0f       	add	r24, r18
    3c38:	93 1f       	adc	r25, r19
    3c3a:	88 0f       	add	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	88 0f       	add	r24, r24
    3c40:	99 1f       	adc	r25, r25
    3c42:	9c 01       	movw	r18, r24
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	88 2f       	mov	r24, r24
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	8d 5c       	subi	r24, 0xCD	; 205
    3c4c:	9b 4f       	sbci	r25, 0xFB	; 251
    3c4e:	fc 01       	movw	r30, r24
    3c50:	80 81       	ld	r24, Z
    3c52:	08 2e       	mov	r0, r24
    3c54:	00 0c       	add	r0, r0
    3c56:	99 0b       	sbc	r25, r25
    3c58:	28 0f       	add	r18, r24
    3c5a:	39 1f       	adc	r19, r25
    3c5c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ServoCount>
    3c60:	88 2f       	mov	r24, r24
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	28 17       	cp	r18, r24
    3c66:	39 07       	cpc	r19, r25
    3c68:	4c f5       	brge	.+82     	; 0x3cbc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	c9 01       	movw	r24, r18
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	82 0f       	add	r24, r18
    3c78:	93 1f       	adc	r25, r19
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	9c 01       	movw	r18, r24
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	88 2f       	mov	r24, r24
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	8d 5c       	subi	r24, 0xCD	; 205
    3c8c:	9b 4f       	sbci	r25, 0xFB	; 251
    3c8e:	fc 01       	movw	r30, r24
    3c90:	80 81       	ld	r24, Z
    3c92:	08 2e       	mov	r0, r24
    3c94:	00 0c       	add	r0, r0
    3c96:	99 0b       	sbc	r25, r25
    3c98:	28 0f       	add	r18, r24
    3c9a:	39 1f       	adc	r19, r25
    3c9c:	c9 01       	movw	r24, r18
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	82 0f       	add	r24, r18
    3ca4:	93 1f       	adc	r25, r19
    3ca6:	8d 55       	subi	r24, 0x5D	; 93
    3ca8:	9c 4f       	sbci	r25, 0xFC	; 252
    3caa:	fc 01       	movw	r30, r24
    3cac:	80 81       	ld	r24, Z
    3cae:	86 fb       	bst	r24, 6
    3cb0:	88 27       	eor	r24, r24
    3cb2:	80 f9       	bld	r24, 0
    3cb4:	81 30       	cpi	r24, 0x01	; 1
    3cb6:	11 f4       	brne	.+4      	; 0x3cbc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	88 23       	and	r24, r24
    3cc0:	31 f1       	breq	.+76     	; 0x3d0e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	28 2f       	mov	r18, r24
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	c9 01       	movw	r24, r18
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	82 0f       	add	r24, r18
    3cd0:	93 1f       	adc	r25, r19
    3cd2:	88 0f       	add	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	88 0f       	add	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	9c 01       	movw	r18, r24
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	88 2f       	mov	r24, r24
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	8d 5c       	subi	r24, 0xCD	; 205
    3ce4:	9b 4f       	sbci	r25, 0xFB	; 251
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	80 81       	ld	r24, Z
    3cea:	08 2e       	mov	r0, r24
    3cec:	00 0c       	add	r0, r0
    3cee:	99 0b       	sbc	r25, r25
    3cf0:	28 0f       	add	r18, r24
    3cf2:	39 1f       	adc	r19, r25
    3cf4:	c9 01       	movw	r24, r18
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	82 0f       	add	r24, r18
    3cfc:	93 1f       	adc	r25, r19
    3cfe:	8d 55       	subi	r24, 0x5D	; 93
    3d00:	9c 4f       	sbci	r25, 0xFC	; 252
    3d02:	fc 01       	movw	r30, r24
    3d04:	80 81       	ld	r24, Z
    3d06:	8f 73       	andi	r24, 0x3F	; 63
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	88 2f       	mov	r24, r24
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	9c 01       	movw	r18, r24
    3d16:	2d 5c       	subi	r18, 0xCD	; 205
    3d18:	3b 4f       	sbci	r19, 0xFB	; 251
    3d1a:	f9 01       	movw	r30, r18
    3d1c:	20 81       	ld	r18, Z
    3d1e:	2f 5f       	subi	r18, 0xFF	; 255
    3d20:	8d 5c       	subi	r24, 0xCD	; 205
    3d22:	9b 4f       	sbci	r25, 0xFB	; 251
    3d24:	fc 01       	movw	r30, r24
    3d26:	20 83       	st	Z, r18
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	28 2f       	mov	r18, r24
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	c9 01       	movw	r24, r18
    3d30:	88 0f       	add	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	82 0f       	add	r24, r18
    3d36:	93 1f       	adc	r25, r19
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	9c 01       	movw	r18, r24
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	88 2f       	mov	r24, r24
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	8d 5c       	subi	r24, 0xCD	; 205
    3d4a:	9b 4f       	sbci	r25, 0xFB	; 251
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	80 81       	ld	r24, Z
    3d50:	08 2e       	mov	r0, r24
    3d52:	00 0c       	add	r0, r0
    3d54:	99 0b       	sbc	r25, r25
    3d56:	28 0f       	add	r18, r24
    3d58:	39 1f       	adc	r19, r25
    3d5a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ServoCount>
    3d5e:	88 2f       	mov	r24, r24
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	28 17       	cp	r18, r24
    3d64:	39 07       	cpc	r19, r25
    3d66:	5c f4       	brge	.+22     	; 0x3d7e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	88 2f       	mov	r24, r24
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	8d 5c       	subi	r24, 0xCD	; 205
    3d70:	9b 4f       	sbci	r25, 0xFB	; 251
    3d72:	fc 01       	movw	r30, r24
    3d74:	80 81       	ld	r24, Z
    3d76:	8c 30       	cpi	r24, 0x0C	; 12
    3d78:	14 f4       	brge	.+4      	; 0x3d7e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	88 23       	and	r24, r24
    3d82:	09 f4       	brne	.+2      	; 0x3d86 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    3d84:	7f c0       	rjmp	.+254    	; 0x3e84 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	40 81       	ld	r20, Z
    3d8e:	51 81       	ldd	r21, Z+1	; 0x01
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	28 2f       	mov	r18, r24
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	c9 01       	movw	r24, r18
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	82 0f       	add	r24, r18
    3d9e:	93 1f       	adc	r25, r19
    3da0:	88 0f       	add	r24, r24
    3da2:	99 1f       	adc	r25, r25
    3da4:	88 0f       	add	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	9c 01       	movw	r18, r24
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	88 2f       	mov	r24, r24
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	8d 5c       	subi	r24, 0xCD	; 205
    3db2:	9b 4f       	sbci	r25, 0xFB	; 251
    3db4:	fc 01       	movw	r30, r24
    3db6:	80 81       	ld	r24, Z
    3db8:	08 2e       	mov	r0, r24
    3dba:	00 0c       	add	r0, r0
    3dbc:	99 0b       	sbc	r25, r25
    3dbe:	28 0f       	add	r18, r24
    3dc0:	39 1f       	adc	r19, r25
    3dc2:	c9 01       	movw	r24, r18
    3dc4:	88 0f       	add	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	82 0f       	add	r24, r18
    3dca:	93 1f       	adc	r25, r19
    3dcc:	8c 55       	subi	r24, 0x5C	; 92
    3dce:	9c 4f       	sbci	r25, 0xFC	; 252
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	9a 01       	movw	r18, r20
    3dd8:	28 0f       	add	r18, r24
    3dda:	39 1f       	adc	r19, r25
    3ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    3dde:	9d 81       	ldd	r25, Y+5	; 0x05
    3de0:	fc 01       	movw	r30, r24
    3de2:	31 83       	std	Z+1, r19	; 0x01
    3de4:	20 83       	st	Z, r18
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	28 2f       	mov	r18, r24
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	c9 01       	movw	r24, r18
    3dee:	88 0f       	add	r24, r24
    3df0:	99 1f       	adc	r25, r25
    3df2:	82 0f       	add	r24, r18
    3df4:	93 1f       	adc	r25, r19
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	9c 01       	movw	r18, r24
    3e00:	89 81       	ldd	r24, Y+1	; 0x01
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	8d 5c       	subi	r24, 0xCD	; 205
    3e08:	9b 4f       	sbci	r25, 0xFB	; 251
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	80 81       	ld	r24, Z
    3e0e:	08 2e       	mov	r0, r24
    3e10:	00 0c       	add	r0, r0
    3e12:	99 0b       	sbc	r25, r25
    3e14:	28 0f       	add	r18, r24
    3e16:	39 1f       	adc	r19, r25
    3e18:	c9 01       	movw	r24, r18
    3e1a:	88 0f       	add	r24, r24
    3e1c:	99 1f       	adc	r25, r25
    3e1e:	82 0f       	add	r24, r18
    3e20:	93 1f       	adc	r25, r19
    3e22:	8d 55       	subi	r24, 0x5D	; 93
    3e24:	9c 4f       	sbci	r25, 0xFC	; 252
    3e26:	fc 01       	movw	r30, r24
    3e28:	80 81       	ld	r24, Z
    3e2a:	86 fb       	bst	r24, 6
    3e2c:	88 27       	eor	r24, r24
    3e2e:	80 f9       	bld	r24, 0
    3e30:	88 23       	and	r24, r24
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    3e34:	51 c0       	rjmp	.+162    	; 0x3ed8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
    3e38:	28 2f       	mov	r18, r24
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	c9 01       	movw	r24, r18
    3e3e:	88 0f       	add	r24, r24
    3e40:	99 1f       	adc	r25, r25
    3e42:	82 0f       	add	r24, r18
    3e44:	93 1f       	adc	r25, r19
    3e46:	88 0f       	add	r24, r24
    3e48:	99 1f       	adc	r25, r25
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	9c 01       	movw	r18, r24
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	88 2f       	mov	r24, r24
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	8d 5c       	subi	r24, 0xCD	; 205
    3e58:	9b 4f       	sbci	r25, 0xFB	; 251
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	80 81       	ld	r24, Z
    3e5e:	08 2e       	mov	r0, r24
    3e60:	00 0c       	add	r0, r0
    3e62:	99 0b       	sbc	r25, r25
    3e64:	28 0f       	add	r18, r24
    3e66:	39 1f       	adc	r19, r25
    3e68:	c9 01       	movw	r24, r18
    3e6a:	88 0f       	add	r24, r24
    3e6c:	99 1f       	adc	r25, r25
    3e6e:	82 0f       	add	r24, r18
    3e70:	93 1f       	adc	r25, r19
    3e72:	8d 55       	subi	r24, 0x5D	; 93
    3e74:	9c 4f       	sbci	r25, 0xFC	; 252
    3e76:	fc 01       	movw	r30, r24
    3e78:	80 81       	ld	r24, Z
    3e7a:	8f 73       	andi	r24, 0x3F	; 63
    3e7c:	61 e0       	ldi	r22, 0x01	; 1
    3e7e:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    3e82:	2a c0       	rjmp	.+84     	; 0x3ed8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	9b 81       	ldd	r25, Y+3	; 0x03
    3e88:	fc 01       	movw	r30, r24
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	04 96       	adiw	r24, 0x04	; 4
    3e90:	21 e0       	ldi	r18, 0x01	; 1
    3e92:	80 34       	cpi	r24, 0x40	; 64
    3e94:	9c 49       	sbci	r25, 0x9C	; 156
    3e96:	08 f0       	brcs	.+2      	; 0x3e9a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	22 23       	and	r18, r18
    3e9c:	41 f0       	breq	.+16     	; 0x3eae <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ea2:	20 e4       	ldi	r18, 0x40	; 64
    3ea4:	3c e9       	ldi	r19, 0x9C	; 156
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	31 83       	std	Z+1, r19	; 0x01
    3eaa:	20 83       	st	Z, r18
    3eac:	0d c0       	rjmp	.+26     	; 0x3ec8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3eae:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	9c 01       	movw	r18, r24
    3eba:	2c 5f       	subi	r18, 0xFC	; 252
    3ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	31 83       	std	Z+1, r19	; 0x01
    3ec6:	20 83       	st	Z, r18
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	88 2f       	mov	r24, r24
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	8d 5c       	subi	r24, 0xCD	; 205
    3ed0:	9b 4f       	sbci	r25, 0xFB	; 251
    3ed2:	2f ef       	ldi	r18, 0xFF	; 255
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	20 83       	st	Z, r18
    3ed8:	00 00       	nop
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <__vector_17>:
    3eea:	1f 92       	push	r1
    3eec:	0f 92       	push	r0
    3eee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3ef2:	0f 92       	push	r0
    3ef4:	11 24       	eor	r1, r1
    3ef6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3efa:	0f 92       	push	r0
    3efc:	2f 93       	push	r18
    3efe:	3f 93       	push	r19
    3f00:	4f 93       	push	r20
    3f02:	5f 93       	push	r21
    3f04:	6f 93       	push	r22
    3f06:	7f 93       	push	r23
    3f08:	8f 93       	push	r24
    3f0a:	9f 93       	push	r25
    3f0c:	af 93       	push	r26
    3f0e:	bf 93       	push	r27
    3f10:	ef 93       	push	r30
    3f12:	ff 93       	push	r31
    3f14:	cf 93       	push	r28
    3f16:	df 93       	push	r29
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	48 e8       	ldi	r20, 0x88	; 136
    3f1e:	50 e0       	ldi	r21, 0x00	; 0
    3f20:	64 e8       	ldi	r22, 0x84	; 132
    3f22:	70 e0       	ldi	r23, 0x00	; 0
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	63 de       	rcall	.-826    	; 0x3bee <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3f28:	00 00       	nop
    3f2a:	df 91       	pop	r29
    3f2c:	cf 91       	pop	r28
    3f2e:	ff 91       	pop	r31
    3f30:	ef 91       	pop	r30
    3f32:	bf 91       	pop	r27
    3f34:	af 91       	pop	r26
    3f36:	9f 91       	pop	r25
    3f38:	8f 91       	pop	r24
    3f3a:	7f 91       	pop	r23
    3f3c:	6f 91       	pop	r22
    3f3e:	5f 91       	pop	r21
    3f40:	4f 91       	pop	r20
    3f42:	3f 91       	pop	r19
    3f44:	2f 91       	pop	r18
    3f46:	0f 90       	pop	r0
    3f48:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f4c:	0f 90       	pop	r0
    3f4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f52:	0f 90       	pop	r0
    3f54:	1f 90       	pop	r1
    3f56:	18 95       	reti

00003f58 <__vector_32>:
    3f58:	1f 92       	push	r1
    3f5a:	0f 92       	push	r0
    3f5c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3f60:	0f 92       	push	r0
    3f62:	11 24       	eor	r1, r1
    3f64:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3f68:	0f 92       	push	r0
    3f6a:	2f 93       	push	r18
    3f6c:	3f 93       	push	r19
    3f6e:	4f 93       	push	r20
    3f70:	5f 93       	push	r21
    3f72:	6f 93       	push	r22
    3f74:	7f 93       	push	r23
    3f76:	8f 93       	push	r24
    3f78:	9f 93       	push	r25
    3f7a:	af 93       	push	r26
    3f7c:	bf 93       	push	r27
    3f7e:	ef 93       	push	r30
    3f80:	ff 93       	push	r31
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62
    3f8a:	48 e9       	ldi	r20, 0x98	; 152
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	64 e9       	ldi	r22, 0x94	; 148
    3f90:	70 e0       	ldi	r23, 0x00	; 0
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	2c de       	rcall	.-936    	; 0x3bee <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3f96:	00 00       	nop
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	ff 91       	pop	r31
    3f9e:	ef 91       	pop	r30
    3fa0:	bf 91       	pop	r27
    3fa2:	af 91       	pop	r26
    3fa4:	9f 91       	pop	r25
    3fa6:	8f 91       	pop	r24
    3fa8:	7f 91       	pop	r23
    3faa:	6f 91       	pop	r22
    3fac:	5f 91       	pop	r21
    3fae:	4f 91       	pop	r20
    3fb0:	3f 91       	pop	r19
    3fb2:	2f 91       	pop	r18
    3fb4:	0f 90       	pop	r0
    3fb6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3fba:	0f 90       	pop	r0
    3fbc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3fc0:	0f 90       	pop	r0
    3fc2:	1f 90       	pop	r1
    3fc4:	18 95       	reti

00003fc6 <__vector_42>:
    3fc6:	1f 92       	push	r1
    3fc8:	0f 92       	push	r0
    3fca:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3fce:	0f 92       	push	r0
    3fd0:	11 24       	eor	r1, r1
    3fd2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3fd6:	0f 92       	push	r0
    3fd8:	2f 93       	push	r18
    3fda:	3f 93       	push	r19
    3fdc:	4f 93       	push	r20
    3fde:	5f 93       	push	r21
    3fe0:	6f 93       	push	r22
    3fe2:	7f 93       	push	r23
    3fe4:	8f 93       	push	r24
    3fe6:	9f 93       	push	r25
    3fe8:	af 93       	push	r26
    3fea:	bf 93       	push	r27
    3fec:	ef 93       	push	r30
    3fee:	ff 93       	push	r31
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	48 ea       	ldi	r20, 0xA8	; 168
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	64 ea       	ldi	r22, 0xA4	; 164
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	f5 dd       	rcall	.-1046   	; 0x3bee <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4004:	00 00       	nop
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	ff 91       	pop	r31
    400c:	ef 91       	pop	r30
    400e:	bf 91       	pop	r27
    4010:	af 91       	pop	r26
    4012:	9f 91       	pop	r25
    4014:	8f 91       	pop	r24
    4016:	7f 91       	pop	r23
    4018:	6f 91       	pop	r22
    401a:	5f 91       	pop	r21
    401c:	4f 91       	pop	r20
    401e:	3f 91       	pop	r19
    4020:	2f 91       	pop	r18
    4022:	0f 90       	pop	r0
    4024:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    4028:	0f 90       	pop	r0
    402a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    402e:	0f 90       	pop	r0
    4030:	1f 90       	pop	r1
    4032:	18 95       	reti

00004034 <__vector_47>:
    4034:	1f 92       	push	r1
    4036:	0f 92       	push	r0
    4038:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    403c:	0f 92       	push	r0
    403e:	11 24       	eor	r1, r1
    4040:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    4044:	0f 92       	push	r0
    4046:	2f 93       	push	r18
    4048:	3f 93       	push	r19
    404a:	4f 93       	push	r20
    404c:	5f 93       	push	r21
    404e:	6f 93       	push	r22
    4050:	7f 93       	push	r23
    4052:	8f 93       	push	r24
    4054:	9f 93       	push	r25
    4056:	af 93       	push	r26
    4058:	bf 93       	push	r27
    405a:	ef 93       	push	r30
    405c:	ff 93       	push	r31
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	48 e2       	ldi	r20, 0x28	; 40
    4068:	51 e0       	ldi	r21, 0x01	; 1
    406a:	64 e2       	ldi	r22, 0x24	; 36
    406c:	71 e0       	ldi	r23, 0x01	; 1
    406e:	80 e0       	ldi	r24, 0x00	; 0
    4070:	be dd       	rcall	.-1156   	; 0x3bee <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    4072:	00 00       	nop
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	ff 91       	pop	r31
    407a:	ef 91       	pop	r30
    407c:	bf 91       	pop	r27
    407e:	af 91       	pop	r26
    4080:	9f 91       	pop	r25
    4082:	8f 91       	pop	r24
    4084:	7f 91       	pop	r23
    4086:	6f 91       	pop	r22
    4088:	5f 91       	pop	r21
    408a:	4f 91       	pop	r20
    408c:	3f 91       	pop	r19
    408e:	2f 91       	pop	r18
    4090:	0f 90       	pop	r0
    4092:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    4096:	0f 90       	pop	r0
    4098:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    409c:	0f 90       	pop	r0
    409e:	1f 90       	pop	r1
    40a0:	18 95       	reti

000040a2 <_ZL7initISR18timer16_Sequence_t>:
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	1f 92       	push	r1
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	89 83       	std	Y+1, r24	; 0x01
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	81 30       	cpi	r24, 0x01	; 1
    40b2:	01 f5       	brne	.+64     	; 0x40f4 <_ZL7initISR18timer16_Sequence_t+0x52>
    40b4:	80 e8       	ldi	r24, 0x80	; 128
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	fc 01       	movw	r30, r24
    40ba:	10 82       	st	Z, r1
    40bc:	81 e8       	ldi	r24, 0x81	; 129
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	22 e0       	ldi	r18, 0x02	; 2
    40c2:	fc 01       	movw	r30, r24
    40c4:	20 83       	st	Z, r18
    40c6:	84 e8       	ldi	r24, 0x84	; 132
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	fc 01       	movw	r30, r24
    40cc:	11 82       	std	Z+1, r1	; 0x01
    40ce:	10 82       	st	Z, r1
    40d0:	86 e3       	ldi	r24, 0x36	; 54
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	26 e3       	ldi	r18, 0x36	; 54
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	f9 01       	movw	r30, r18
    40da:	20 81       	ld	r18, Z
    40dc:	22 60       	ori	r18, 0x02	; 2
    40de:	fc 01       	movw	r30, r24
    40e0:	20 83       	st	Z, r18
    40e2:	8f e6       	ldi	r24, 0x6F	; 111
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	2f e6       	ldi	r18, 0x6F	; 111
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	f9 01       	movw	r30, r18
    40ec:	20 81       	ld	r18, Z
    40ee:	22 60       	ori	r18, 0x02	; 2
    40f0:	fc 01       	movw	r30, r24
    40f2:	20 83       	st	Z, r18
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	82 30       	cpi	r24, 0x02	; 2
    40f8:	c1 f4       	brne	.+48     	; 0x412a <_ZL7initISR18timer16_Sequence_t+0x88>
    40fa:	80 e9       	ldi	r24, 0x90	; 144
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	fc 01       	movw	r30, r24
    4100:	10 82       	st	Z, r1
    4102:	81 e9       	ldi	r24, 0x91	; 145
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	22 e0       	ldi	r18, 0x02	; 2
    4108:	fc 01       	movw	r30, r24
    410a:	20 83       	st	Z, r18
    410c:	84 e9       	ldi	r24, 0x94	; 148
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	fc 01       	movw	r30, r24
    4112:	11 82       	std	Z+1, r1	; 0x01
    4114:	10 82       	st	Z, r1
    4116:	88 e3       	ldi	r24, 0x38	; 56
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	22 e0       	ldi	r18, 0x02	; 2
    411c:	fc 01       	movw	r30, r24
    411e:	20 83       	st	Z, r18
    4120:	81 e7       	ldi	r24, 0x71	; 113
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	22 e0       	ldi	r18, 0x02	; 2
    4126:	fc 01       	movw	r30, r24
    4128:	20 83       	st	Z, r18
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	83 30       	cpi	r24, 0x03	; 3
    412e:	c1 f4       	brne	.+48     	; 0x4160 <_ZL7initISR18timer16_Sequence_t+0xbe>
    4130:	80 ea       	ldi	r24, 0xA0	; 160
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	fc 01       	movw	r30, r24
    4136:	10 82       	st	Z, r1
    4138:	81 ea       	ldi	r24, 0xA1	; 161
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	22 e0       	ldi	r18, 0x02	; 2
    413e:	fc 01       	movw	r30, r24
    4140:	20 83       	st	Z, r18
    4142:	84 ea       	ldi	r24, 0xA4	; 164
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	fc 01       	movw	r30, r24
    4148:	11 82       	std	Z+1, r1	; 0x01
    414a:	10 82       	st	Z, r1
    414c:	89 e3       	ldi	r24, 0x39	; 57
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	22 e0       	ldi	r18, 0x02	; 2
    4152:	fc 01       	movw	r30, r24
    4154:	20 83       	st	Z, r18
    4156:	82 e7       	ldi	r24, 0x72	; 114
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	22 e0       	ldi	r18, 0x02	; 2
    415c:	fc 01       	movw	r30, r24
    415e:	20 83       	st	Z, r18
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	88 23       	and	r24, r24
    4164:	c1 f4       	brne	.+48     	; 0x4196 <_ZL7initISR18timer16_Sequence_t+0xf4>
    4166:	80 e2       	ldi	r24, 0x20	; 32
    4168:	91 e0       	ldi	r25, 0x01	; 1
    416a:	fc 01       	movw	r30, r24
    416c:	10 82       	st	Z, r1
    416e:	81 e2       	ldi	r24, 0x21	; 33
    4170:	91 e0       	ldi	r25, 0x01	; 1
    4172:	22 e0       	ldi	r18, 0x02	; 2
    4174:	fc 01       	movw	r30, r24
    4176:	20 83       	st	Z, r18
    4178:	84 e2       	ldi	r24, 0x24	; 36
    417a:	91 e0       	ldi	r25, 0x01	; 1
    417c:	fc 01       	movw	r30, r24
    417e:	11 82       	std	Z+1, r1	; 0x01
    4180:	10 82       	st	Z, r1
    4182:	8a e3       	ldi	r24, 0x3A	; 58
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	22 e0       	ldi	r18, 0x02	; 2
    4188:	fc 01       	movw	r30, r24
    418a:	20 83       	st	Z, r18
    418c:	83 e7       	ldi	r24, 0x73	; 115
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	22 e0       	ldi	r18, 0x02	; 2
    4192:	fc 01       	movw	r30, r24
    4194:	20 83       	st	Z, r18
    4196:	00 00       	nop
    4198:	0f 90       	pop	r0
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	08 95       	ret

000041a0 <_ZL13isTimerActive18timer16_Sequence_t>:
    41a0:	cf 93       	push	r28
    41a2:	df 93       	push	r29
    41a4:	1f 92       	push	r1
    41a6:	1f 92       	push	r1
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	8a 83       	std	Y+2, r24	; 0x02
    41ae:	19 82       	std	Y+1, r1	; 0x01
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	8c 30       	cpi	r24, 0x0C	; 12
    41b4:	30 f5       	brcc	.+76     	; 0x4202 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
    41b8:	28 2f       	mov	r18, r24
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	c9 01       	movw	r24, r18
    41be:	88 0f       	add	r24, r24
    41c0:	99 1f       	adc	r25, r25
    41c2:	82 0f       	add	r24, r18
    41c4:	93 1f       	adc	r25, r19
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	88 0f       	add	r24, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	9c 01       	movw	r18, r24
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	88 2f       	mov	r24, r24
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	28 0f       	add	r18, r24
    41d8:	39 1f       	adc	r19, r25
    41da:	c9 01       	movw	r24, r18
    41dc:	88 0f       	add	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	82 0f       	add	r24, r18
    41e2:	93 1f       	adc	r25, r19
    41e4:	8d 55       	subi	r24, 0x5D	; 93
    41e6:	9c 4f       	sbci	r25, 0xFC	; 252
    41e8:	fc 01       	movw	r30, r24
    41ea:	80 81       	ld	r24, Z
    41ec:	86 fb       	bst	r24, 6
    41ee:	88 27       	eor	r24, r24
    41f0:	80 f9       	bld	r24, 0
    41f2:	81 30       	cpi	r24, 0x01	; 1
    41f4:	11 f4       	brne	.+4      	; 0x41fa <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	05 c0       	rjmp	.+10     	; 0x4204 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	8f 5f       	subi	r24, 0xFF	; 255
    41fe:	89 83       	std	Y+1, r24	; 0x01
    4200:	d7 cf       	rjmp	.-82     	; 0x41b0 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	08 95       	ret

0000420e <_ZN5ServoC1Ev>:
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	1f 92       	push	r1
    4214:	1f 92       	push	r1
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	9a 83       	std	Y+2, r25	; 0x02
    421c:	89 83       	std	Y+1, r24	; 0x01
    421e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <ServoCount>
    4222:	80 33       	cpi	r24, 0x30	; 48
    4224:	e8 f4       	brcc	.+58     	; 0x4260 <_ZN5ServoC1Ev+0x52>
    4226:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <ServoCount>
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	82 0f       	add	r24, r18
    422e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <ServoCount>
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	fc 01       	movw	r30, r24
    4238:	20 83       	st	Z, r18
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	9a 81       	ldd	r25, Y+2	; 0x02
    423e:	fc 01       	movw	r30, r24
    4240:	80 81       	ld	r24, Z
    4242:	28 2f       	mov	r18, r24
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	c9 01       	movw	r24, r18
    4248:	88 0f       	add	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	82 0f       	add	r24, r18
    424e:	93 1f       	adc	r25, r19
    4250:	8c 55       	subi	r24, 0x5C	; 92
    4252:	9c 4f       	sbci	r25, 0xFC	; 252
    4254:	28 eb       	ldi	r18, 0xB8	; 184
    4256:	3b e0       	ldi	r19, 0x0B	; 11
    4258:	fc 01       	movw	r30, r24
    425a:	31 83       	std	Z+1, r19	; 0x01
    425c:	20 83       	st	Z, r18
    425e:	05 c0       	rjmp	.+10     	; 0x426a <_ZN5ServoC1Ev+0x5c>
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	9a 81       	ldd	r25, Y+2	; 0x02
    4264:	2f ef       	ldi	r18, 0xFF	; 255
    4266:	fc 01       	movw	r30, r24
    4268:	20 83       	st	Z, r18
    426a:	00 00       	nop
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	df 91       	pop	r29
    4272:	cf 91       	pop	r28
    4274:	08 95       	ret

00004276 <_ZN5Servo6attachEi>:
    4276:	cf 93       	push	r28
    4278:	df 93       	push	r29
    427a:	00 d0       	rcall	.+0      	; 0x427c <_ZN5Servo6attachEi+0x6>
    427c:	1f 92       	push	r1
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	9a 83       	std	Y+2, r25	; 0x02
    4284:	89 83       	std	Y+1, r24	; 0x01
    4286:	7c 83       	std	Y+4, r23	; 0x04
    4288:	6b 83       	std	Y+3, r22	; 0x03
    428a:	6b 81       	ldd	r22, Y+3	; 0x03
    428c:	7c 81       	ldd	r23, Y+4	; 0x04
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	9a 81       	ldd	r25, Y+2	; 0x02
    4292:	20 e6       	ldi	r18, 0x60	; 96
    4294:	39 e0       	ldi	r19, 0x09	; 9
    4296:	40 e2       	ldi	r20, 0x20	; 32
    4298:	52 e0       	ldi	r21, 0x02	; 2
    429a:	07 d0       	rcall	.+14     	; 0x42aa <_ZN5Servo6attachEiii>
    429c:	0f 90       	pop	r0
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	08 95       	ret

000042aa <_ZN5Servo6attachEiii>:
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	29 97       	sbiw	r28, 0x09	; 9
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	9b 83       	std	Y+3, r25	; 0x03
    42c0:	8a 83       	std	Y+2, r24	; 0x02
    42c2:	7d 83       	std	Y+5, r23	; 0x05
    42c4:	6c 83       	std	Y+4, r22	; 0x04
    42c6:	5f 83       	std	Y+7, r21	; 0x07
    42c8:	4e 83       	std	Y+6, r20	; 0x06
    42ca:	39 87       	std	Y+9, r19	; 0x09
    42cc:	28 87       	std	Y+8, r18	; 0x08
    42ce:	8a 81       	ldd	r24, Y+2	; 0x02
    42d0:	9b 81       	ldd	r25, Y+3	; 0x03
    42d2:	fc 01       	movw	r30, r24
    42d4:	80 81       	ld	r24, Z
    42d6:	80 33       	cpi	r24, 0x30	; 48
    42d8:	08 f0       	brcs	.+2      	; 0x42dc <_ZN5Servo6attachEiii+0x32>
    42da:	6b c0       	rjmp	.+214    	; 0x43b2 <_ZN5Servo6attachEiii+0x108>
    42dc:	8c 81       	ldd	r24, Y+4	; 0x04
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
    42e4:	8a 81       	ldd	r24, Y+2	; 0x02
    42e6:	9b 81       	ldd	r25, Y+3	; 0x03
    42e8:	fc 01       	movw	r30, r24
    42ea:	80 81       	ld	r24, Z
    42ec:	28 2f       	mov	r18, r24
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	8c 81       	ldd	r24, Y+4	; 0x04
    42f2:	48 2f       	mov	r20, r24
    42f4:	4f 73       	andi	r20, 0x3F	; 63
    42f6:	c9 01       	movw	r24, r18
    42f8:	88 0f       	add	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	82 0f       	add	r24, r18
    42fe:	93 1f       	adc	r25, r19
    4300:	8d 55       	subi	r24, 0x5D	; 93
    4302:	9c 4f       	sbci	r25, 0xFC	; 252
    4304:	24 2f       	mov	r18, r20
    4306:	2f 73       	andi	r18, 0x3F	; 63
    4308:	fc 01       	movw	r30, r24
    430a:	30 81       	ld	r19, Z
    430c:	30 7c       	andi	r19, 0xC0	; 192
    430e:	23 2b       	or	r18, r19
    4310:	fc 01       	movw	r30, r24
    4312:	20 83       	st	Z, r18
    4314:	20 e2       	ldi	r18, 0x20	; 32
    4316:	32 e0       	ldi	r19, 0x02	; 2
    4318:	8e 81       	ldd	r24, Y+6	; 0x06
    431a:	9f 81       	ldd	r25, Y+7	; 0x07
    431c:	a9 01       	movw	r20, r18
    431e:	48 1b       	sub	r20, r24
    4320:	59 0b       	sbc	r21, r25
    4322:	ca 01       	movw	r24, r20
    4324:	99 23       	and	r25, r25
    4326:	0c f4       	brge	.+2      	; 0x432a <_ZN5Servo6attachEiii+0x80>
    4328:	03 96       	adiw	r24, 0x03	; 3
    432a:	95 95       	asr	r25
    432c:	87 95       	ror	r24
    432e:	95 95       	asr	r25
    4330:	87 95       	ror	r24
    4332:	28 2f       	mov	r18, r24
    4334:	8a 81       	ldd	r24, Y+2	; 0x02
    4336:	9b 81       	ldd	r25, Y+3	; 0x03
    4338:	fc 01       	movw	r30, r24
    433a:	21 83       	std	Z+1, r18	; 0x01
    433c:	20 e6       	ldi	r18, 0x60	; 96
    433e:	39 e0       	ldi	r19, 0x09	; 9
    4340:	88 85       	ldd	r24, Y+8	; 0x08
    4342:	99 85       	ldd	r25, Y+9	; 0x09
    4344:	a9 01       	movw	r20, r18
    4346:	48 1b       	sub	r20, r24
    4348:	59 0b       	sbc	r21, r25
    434a:	ca 01       	movw	r24, r20
    434c:	99 23       	and	r25, r25
    434e:	0c f4       	brge	.+2      	; 0x4352 <_ZN5Servo6attachEiii+0xa8>
    4350:	03 96       	adiw	r24, 0x03	; 3
    4352:	95 95       	asr	r25
    4354:	87 95       	ror	r24
    4356:	95 95       	asr	r25
    4358:	87 95       	ror	r24
    435a:	28 2f       	mov	r18, r24
    435c:	8a 81       	ldd	r24, Y+2	; 0x02
    435e:	9b 81       	ldd	r25, Y+3	; 0x03
    4360:	fc 01       	movw	r30, r24
    4362:	22 83       	std	Z+2, r18	; 0x02
    4364:	8a 81       	ldd	r24, Y+2	; 0x02
    4366:	9b 81       	ldd	r25, Y+3	; 0x03
    4368:	fc 01       	movw	r30, r24
    436a:	90 81       	ld	r25, Z
    436c:	8b ea       	ldi	r24, 0xAB	; 171
    436e:	98 9f       	mul	r25, r24
    4370:	81 2d       	mov	r24, r1
    4372:	11 24       	eor	r1, r1
    4374:	86 95       	lsr	r24
    4376:	86 95       	lsr	r24
    4378:	86 95       	lsr	r24
    437a:	89 83       	std	Y+1, r24	; 0x01
    437c:	89 81       	ldd	r24, Y+1	; 0x01
    437e:	10 df       	rcall	.-480    	; 0x41a0 <_ZL13isTimerActive18timer16_Sequence_t>
    4380:	98 2f       	mov	r25, r24
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	89 27       	eor	r24, r25
    4386:	88 23       	and	r24, r24
    4388:	11 f0       	breq	.+4      	; 0x438e <_ZN5Servo6attachEiii+0xe4>
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	8a de       	rcall	.-748    	; 0x40a2 <_ZL7initISR18timer16_Sequence_t>
    438e:	8a 81       	ldd	r24, Y+2	; 0x02
    4390:	9b 81       	ldd	r25, Y+3	; 0x03
    4392:	fc 01       	movw	r30, r24
    4394:	80 81       	ld	r24, Z
    4396:	28 2f       	mov	r18, r24
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	c9 01       	movw	r24, r18
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	82 0f       	add	r24, r18
    43a2:	93 1f       	adc	r25, r19
    43a4:	8d 55       	subi	r24, 0x5D	; 93
    43a6:	9c 4f       	sbci	r25, 0xFC	; 252
    43a8:	fc 01       	movw	r30, r24
    43aa:	20 81       	ld	r18, Z
    43ac:	20 64       	ori	r18, 0x40	; 64
    43ae:	fc 01       	movw	r30, r24
    43b0:	20 83       	st	Z, r18
    43b2:	8a 81       	ldd	r24, Y+2	; 0x02
    43b4:	9b 81       	ldd	r25, Y+3	; 0x03
    43b6:	fc 01       	movw	r30, r24
    43b8:	80 81       	ld	r24, Z
    43ba:	29 96       	adiw	r28, 0x09	; 9
    43bc:	0f b6       	in	r0, 0x3f	; 63
    43be:	f8 94       	cli
    43c0:	de bf       	out	0x3e, r29	; 62
    43c2:	0f be       	out	0x3f, r0	; 63
    43c4:	cd bf       	out	0x3d, r28	; 61
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	08 95       	ret

000043cc <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    43cc:	6f 92       	push	r6
    43ce:	7f 92       	push	r7
    43d0:	8f 92       	push	r8
    43d2:	9f 92       	push	r9
    43d4:	af 92       	push	r10
    43d6:	bf 92       	push	r11
    43d8:	cf 92       	push	r12
    43da:	df 92       	push	r13
    43dc:	ef 92       	push	r14
    43de:	ff 92       	push	r15
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <_ZN5Servo5writeEi+0x1e>
    43ea:	1f 92       	push	r1
    43ec:	cd b7       	in	r28, 0x3d	; 61
    43ee:	de b7       	in	r29, 0x3e	; 62
    43f0:	9a 83       	std	Y+2, r25	; 0x02
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	7c 83       	std	Y+4, r23	; 0x04
    43f6:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    43f8:	8b 81       	ldd	r24, Y+3	; 0x03
    43fa:	9c 81       	ldd	r25, Y+4	; 0x04
    43fc:	80 32       	cpi	r24, 0x20	; 32
    43fe:	92 40       	sbci	r25, 0x02	; 2
    4400:	0c f0       	brlt	.+2      	; 0x4404 <_ZN5Servo5writeEi+0x38>
    4402:	5c c0       	rjmp	.+184    	; 0x44bc <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	9c 81       	ldd	r25, Y+4	; 0x04
    4408:	99 23       	and	r25, r25
    440a:	14 f4       	brge	.+4      	; 0x4410 <_ZN5Servo5writeEi+0x44>
    440c:	1c 82       	std	Y+4, r1	; 0x04
    440e:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	9c 81       	ldd	r25, Y+4	; 0x04
    4414:	85 3b       	cpi	r24, 0xB5	; 181
    4416:	91 05       	cpc	r25, r1
    4418:	24 f0       	brlt	.+8      	; 0x4422 <_ZN5Servo5writeEi+0x56>
    441a:	84 eb       	ldi	r24, 0xB4	; 180
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	9c 83       	std	Y+4, r25	; 0x04
    4420:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	9a 81       	ldd	r25, Y+2	; 0x02
    4426:	fc 01       	movw	r30, r24
    4428:	82 81       	ldd	r24, Z+2	; 0x02
    442a:	08 2e       	mov	r0, r24
    442c:	00 0c       	add	r0, r0
    442e:	99 0b       	sbc	r25, r25
    4430:	28 e5       	ldi	r18, 0x58	; 88
    4432:	32 e0       	ldi	r19, 0x02	; 2
    4434:	a9 01       	movw	r20, r18
    4436:	48 1b       	sub	r20, r24
    4438:	59 0b       	sbc	r21, r25
    443a:	ca 01       	movw	r24, r20
    443c:	88 0f       	add	r24, r24
    443e:	99 1f       	adc	r25, r25
    4440:	88 0f       	add	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	09 2e       	mov	r0, r25
    4446:	00 0c       	add	r0, r0
    4448:	aa 0b       	sbc	r26, r26
    444a:	bb 0b       	sbc	r27, r27
    444c:	29 81       	ldd	r18, Y+1	; 0x01
    444e:	3a 81       	ldd	r19, Y+2	; 0x02
    4450:	f9 01       	movw	r30, r18
    4452:	21 81       	ldd	r18, Z+1	; 0x01
    4454:	02 2e       	mov	r0, r18
    4456:	00 0c       	add	r0, r0
    4458:	33 0b       	sbc	r19, r19
    445a:	48 e8       	ldi	r20, 0x88	; 136
    445c:	50 e0       	ldi	r21, 0x00	; 0
    445e:	ba 01       	movw	r22, r20
    4460:	62 1b       	sub	r22, r18
    4462:	73 0b       	sbc	r23, r19
    4464:	9b 01       	movw	r18, r22
    4466:	22 0f       	add	r18, r18
    4468:	33 1f       	adc	r19, r19
    446a:	22 0f       	add	r18, r18
    446c:	33 1f       	adc	r19, r19
    446e:	03 2e       	mov	r0, r19
    4470:	00 0c       	add	r0, r0
    4472:	44 0b       	sbc	r20, r20
    4474:	55 0b       	sbc	r21, r21
    4476:	6b 81       	ldd	r22, Y+3	; 0x03
    4478:	7c 81       	ldd	r23, Y+4	; 0x04
    447a:	3b 01       	movw	r6, r22
    447c:	77 0f       	add	r23, r23
    447e:	88 08       	sbc	r8, r8
    4480:	99 08       	sbc	r9, r9
    4482:	6b 2f       	mov	r22, r27
    4484:	6f 93       	push	r22
    4486:	6a 2f       	mov	r22, r26
    4488:	6f 93       	push	r22
    448a:	69 2f       	mov	r22, r25
    448c:	6f 93       	push	r22
    448e:	8f 93       	push	r24
    4490:	59 01       	movw	r10, r18
    4492:	6a 01       	movw	r12, r20
    4494:	14 eb       	ldi	r17, 0xB4	; 180
    4496:	e1 2e       	mov	r14, r17
    4498:	f1 2c       	mov	r15, r1
    449a:	00 e0       	ldi	r16, 0x00	; 0
    449c:	10 e0       	ldi	r17, 0x00	; 0
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	a9 01       	movw	r20, r18
    44a4:	c4 01       	movw	r24, r8
    44a6:	b3 01       	movw	r22, r6
    44a8:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <_Z3maplllll>
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	9c 83       	std	Y+4, r25	; 0x04
    44ba:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    44bc:	2b 81       	ldd	r18, Y+3	; 0x03
    44be:	3c 81       	ldd	r19, Y+4	; 0x04
    44c0:	89 81       	ldd	r24, Y+1	; 0x01
    44c2:	9a 81       	ldd	r25, Y+2	; 0x02
    44c4:	b9 01       	movw	r22, r18
    44c6:	14 d0       	rcall	.+40     	; 0x44f0 <_ZN5Servo17writeMicrosecondsEi>
}
    44c8:	00 00       	nop
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	1f 91       	pop	r17
    44d8:	0f 91       	pop	r16
    44da:	ff 90       	pop	r15
    44dc:	ef 90       	pop	r14
    44de:	df 90       	pop	r13
    44e0:	cf 90       	pop	r12
    44e2:	bf 90       	pop	r11
    44e4:	af 90       	pop	r10
    44e6:	9f 90       	pop	r9
    44e8:	8f 90       	pop	r8
    44ea:	7f 90       	pop	r7
    44ec:	6f 90       	pop	r6
    44ee:	08 95       	ret

000044f0 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	00 d0       	rcall	.+0      	; 0x44f6 <_ZN5Servo17writeMicrosecondsEi+0x6>
    44f6:	00 d0       	rcall	.+0      	; 0x44f8 <_ZN5Servo17writeMicrosecondsEi+0x8>
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
    44fc:	9c 83       	std	Y+4, r25	; 0x04
    44fe:	8b 83       	std	Y+3, r24	; 0x03
    4500:	7e 83       	std	Y+6, r23	; 0x06
    4502:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    4504:	8b 81       	ldd	r24, Y+3	; 0x03
    4506:	9c 81       	ldd	r25, Y+4	; 0x04
    4508:	fc 01       	movw	r30, r24
    450a:	80 81       	ld	r24, Z
    450c:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	80 33       	cpi	r24, 0x30	; 48
    4512:	08 f0       	brcs	.+2      	; 0x4516 <_ZN5Servo17writeMicrosecondsEi+0x26>
    4514:	99 c0       	rjmp	.+306    	; 0x4648 <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    4516:	8b 81       	ldd	r24, Y+3	; 0x03
    4518:	9c 81       	ldd	r25, Y+4	; 0x04
    451a:	fc 01       	movw	r30, r24
    451c:	81 81       	ldd	r24, Z+1	; 0x01
    451e:	08 2e       	mov	r0, r24
    4520:	00 0c       	add	r0, r0
    4522:	99 0b       	sbc	r25, r25
    4524:	28 e8       	ldi	r18, 0x88	; 136
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	a9 01       	movw	r20, r18
    452a:	48 1b       	sub	r20, r24
    452c:	59 0b       	sbc	r21, r25
    452e:	ca 01       	movw	r24, r20
    4530:	9c 01       	movw	r18, r24
    4532:	22 0f       	add	r18, r18
    4534:	33 1f       	adc	r19, r19
    4536:	22 0f       	add	r18, r18
    4538:	33 1f       	adc	r19, r19
    453a:	8d 81       	ldd	r24, Y+5	; 0x05
    453c:	9e 81       	ldd	r25, Y+6	; 0x06
    453e:	82 17       	cp	r24, r18
    4540:	93 07       	cpc	r25, r19
    4542:	a4 f4       	brge	.+40     	; 0x456c <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    4544:	8b 81       	ldd	r24, Y+3	; 0x03
    4546:	9c 81       	ldd	r25, Y+4	; 0x04
    4548:	fc 01       	movw	r30, r24
    454a:	81 81       	ldd	r24, Z+1	; 0x01
    454c:	08 2e       	mov	r0, r24
    454e:	00 0c       	add	r0, r0
    4550:	99 0b       	sbc	r25, r25
    4552:	28 e8       	ldi	r18, 0x88	; 136
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	a9 01       	movw	r20, r18
    4558:	48 1b       	sub	r20, r24
    455a:	59 0b       	sbc	r21, r25
    455c:	ca 01       	movw	r24, r20
    455e:	88 0f       	add	r24, r24
    4560:	99 1f       	adc	r25, r25
    4562:	88 0f       	add	r24, r24
    4564:	99 1f       	adc	r25, r25
    4566:	9e 83       	std	Y+6, r25	; 0x06
    4568:	8d 83       	std	Y+5, r24	; 0x05
    456a:	2a c0       	rjmp	.+84     	; 0x45c0 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    456c:	8b 81       	ldd	r24, Y+3	; 0x03
    456e:	9c 81       	ldd	r25, Y+4	; 0x04
    4570:	fc 01       	movw	r30, r24
    4572:	82 81       	ldd	r24, Z+2	; 0x02
    4574:	08 2e       	mov	r0, r24
    4576:	00 0c       	add	r0, r0
    4578:	99 0b       	sbc	r25, r25
    457a:	28 e5       	ldi	r18, 0x58	; 88
    457c:	32 e0       	ldi	r19, 0x02	; 2
    457e:	a9 01       	movw	r20, r18
    4580:	48 1b       	sub	r20, r24
    4582:	59 0b       	sbc	r21, r25
    4584:	ca 01       	movw	r24, r20
    4586:	9c 01       	movw	r18, r24
    4588:	22 0f       	add	r18, r18
    458a:	33 1f       	adc	r19, r19
    458c:	22 0f       	add	r18, r18
    458e:	33 1f       	adc	r19, r19
    4590:	8d 81       	ldd	r24, Y+5	; 0x05
    4592:	9e 81       	ldd	r25, Y+6	; 0x06
    4594:	28 17       	cp	r18, r24
    4596:	39 07       	cpc	r19, r25
    4598:	9c f4       	brge	.+38     	; 0x45c0 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    459a:	8b 81       	ldd	r24, Y+3	; 0x03
    459c:	9c 81       	ldd	r25, Y+4	; 0x04
    459e:	fc 01       	movw	r30, r24
    45a0:	82 81       	ldd	r24, Z+2	; 0x02
    45a2:	08 2e       	mov	r0, r24
    45a4:	00 0c       	add	r0, r0
    45a6:	99 0b       	sbc	r25, r25
    45a8:	28 e5       	ldi	r18, 0x58	; 88
    45aa:	32 e0       	ldi	r19, 0x02	; 2
    45ac:	a9 01       	movw	r20, r18
    45ae:	48 1b       	sub	r20, r24
    45b0:	59 0b       	sbc	r21, r25
    45b2:	ca 01       	movw	r24, r20
    45b4:	88 0f       	add	r24, r24
    45b6:	99 1f       	adc	r25, r25
    45b8:	88 0f       	add	r24, r24
    45ba:	99 1f       	adc	r25, r25
    45bc:	9e 83       	std	Y+6, r25	; 0x06
    45be:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    45c0:	8d 81       	ldd	r24, Y+5	; 0x05
    45c2:	9e 81       	ldd	r25, Y+6	; 0x06
    45c4:	02 97       	sbiw	r24, 0x02	; 2
    45c6:	9e 83       	std	Y+6, r25	; 0x06
    45c8:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    45ca:	8d 81       	ldd	r24, Y+5	; 0x05
    45cc:	9e 81       	ldd	r25, Y+6	; 0x06
    45ce:	09 2e       	mov	r0, r25
    45d0:	00 0c       	add	r0, r0
    45d2:	aa 0b       	sbc	r26, r26
    45d4:	bb 0b       	sbc	r27, r27
    45d6:	88 0f       	add	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	aa 1f       	adc	r26, r26
    45dc:	bb 1f       	adc	r27, r27
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	aa 1f       	adc	r26, r26
    45e4:	bb 1f       	adc	r27, r27
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	aa 1f       	adc	r26, r26
    45ec:	bb 1f       	adc	r27, r27
    45ee:	88 0f       	add	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	aa 1f       	adc	r26, r26
    45f4:	bb 1f       	adc	r27, r27
    45f6:	bb 23       	and	r27, r27
    45f8:	1c f4       	brge	.+6      	; 0x4600 <_ZN5Servo17writeMicrosecondsEi+0x110>
    45fa:	07 96       	adiw	r24, 0x07	; 7
    45fc:	a1 1d       	adc	r26, r1
    45fe:	b1 1d       	adc	r27, r1
    4600:	68 94       	set
    4602:	12 f8       	bld	r1, 2
    4604:	b5 95       	asr	r27
    4606:	a7 95       	ror	r26
    4608:	97 95       	ror	r25
    460a:	87 95       	ror	r24
    460c:	16 94       	lsr	r1
    460e:	d1 f7       	brne	.-12     	; 0x4604 <_ZN5Servo17writeMicrosecondsEi+0x114>
    4610:	9e 83       	std	Y+6, r25	; 0x06
    4612:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    4614:	8f e5       	ldi	r24, 0x5F	; 95
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	fc 01       	movw	r30, r24
    461a:	80 81       	ld	r24, Z
    461c:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    461e:	f8 94       	cli
    servos[channel].ticks = value;
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	28 2f       	mov	r18, r24
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	4d 81       	ldd	r20, Y+5	; 0x05
    4628:	5e 81       	ldd	r21, Y+6	; 0x06
    462a:	c9 01       	movw	r24, r18
    462c:	88 0f       	add	r24, r24
    462e:	99 1f       	adc	r25, r25
    4630:	82 0f       	add	r24, r18
    4632:	93 1f       	adc	r25, r19
    4634:	8c 55       	subi	r24, 0x5C	; 92
    4636:	9c 4f       	sbci	r25, 0xFC	; 252
    4638:	fc 01       	movw	r30, r24
    463a:	51 83       	std	Z+1, r21	; 0x01
    463c:	40 83       	st	Z, r20
    SREG = oldSREG;
    463e:	8f e5       	ldi	r24, 0x5F	; 95
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	2a 81       	ldd	r18, Y+2	; 0x02
    4644:	fc 01       	movw	r30, r24
    4646:	20 83       	st	Z, r18
  }
}
    4648:	00 00       	nop
    464a:	26 96       	adiw	r28, 0x06	; 6
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	f8 94       	cli
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	0f be       	out	0x3f, r0	; 63
    4654:	cd bf       	out	0x3d, r28	; 61
    4656:	df 91       	pop	r29
    4658:	cf 91       	pop	r28
    465a:	08 95       	ret

0000465c <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    465c:	2f 92       	push	r2
    465e:	3f 92       	push	r3
    4660:	4f 92       	push	r4
    4662:	5f 92       	push	r5
    4664:	6f 92       	push	r6
    4666:	7f 92       	push	r7
    4668:	8f 92       	push	r8
    466a:	9f 92       	push	r9
    466c:	af 92       	push	r10
    466e:	bf 92       	push	r11
    4670:	cf 92       	push	r12
    4672:	df 92       	push	r13
    4674:	ef 92       	push	r14
    4676:	ff 92       	push	r15
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	df 93       	push	r29
    4680:	1f 92       	push	r1
    4682:	1f 92       	push	r1
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	9a 83       	std	Y+2, r25	; 0x02
    468a:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    468c:	89 81       	ldd	r24, Y+1	; 0x01
    468e:	9a 81       	ldd	r25, Y+2	; 0x02
    4690:	fc 01       	movw	r30, r24
    4692:	82 81       	ldd	r24, Z+2	; 0x02
    4694:	08 2e       	mov	r0, r24
    4696:	00 0c       	add	r0, r0
    4698:	99 0b       	sbc	r25, r25
    469a:	28 e5       	ldi	r18, 0x58	; 88
    469c:	32 e0       	ldi	r19, 0x02	; 2
    469e:	a9 01       	movw	r20, r18
    46a0:	48 1b       	sub	r20, r24
    46a2:	59 0b       	sbc	r21, r25
    46a4:	ca 01       	movw	r24, r20
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	1c 01       	movw	r2, r24
    46b0:	99 0f       	add	r25, r25
    46b2:	44 08       	sbc	r4, r4
    46b4:	55 08       	sbc	r5, r5
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ba:	fc 01       	movw	r30, r24
    46bc:	81 81       	ldd	r24, Z+1	; 0x01
    46be:	08 2e       	mov	r0, r24
    46c0:	00 0c       	add	r0, r0
    46c2:	99 0b       	sbc	r25, r25
    46c4:	28 e8       	ldi	r18, 0x88	; 136
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	a9 01       	movw	r20, r18
    46ca:	48 1b       	sub	r20, r24
    46cc:	59 0b       	sbc	r21, r25
    46ce:	ca 01       	movw	r24, r20
    46d0:	88 0f       	add	r24, r24
    46d2:	99 1f       	adc	r25, r25
    46d4:	88 0f       	add	r24, r24
    46d6:	99 1f       	adc	r25, r25
    46d8:	3c 01       	movw	r6, r24
    46da:	99 0f       	add	r25, r25
    46dc:	88 08       	sbc	r8, r8
    46de:	99 08       	sbc	r9, r9
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	30 d0       	rcall	.+96     	; 0x4746 <_ZN5Servo16readMicrosecondsEv>
    46e6:	01 96       	adiw	r24, 0x01	; 1
    46e8:	09 2e       	mov	r0, r25
    46ea:	00 0c       	add	r0, r0
    46ec:	aa 0b       	sbc	r26, r26
    46ee:	bb 0b       	sbc	r27, r27
    46f0:	1f 92       	push	r1
    46f2:	1f 92       	push	r1
    46f4:	1f 92       	push	r1
    46f6:	24 eb       	ldi	r18, 0xB4	; 180
    46f8:	2f 93       	push	r18
    46fa:	a1 2c       	mov	r10, r1
    46fc:	b1 2c       	mov	r11, r1
    46fe:	65 01       	movw	r12, r10
    4700:	82 01       	movw	r16, r4
    4702:	71 01       	movw	r14, r2
    4704:	a4 01       	movw	r20, r8
    4706:	93 01       	movw	r18, r6
    4708:	bc 01       	movw	r22, r24
    470a:	cd 01       	movw	r24, r26
    470c:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <_Z3maplllll>
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
}
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	1f 91       	pop	r17
    4726:	0f 91       	pop	r16
    4728:	ff 90       	pop	r15
    472a:	ef 90       	pop	r14
    472c:	df 90       	pop	r13
    472e:	cf 90       	pop	r12
    4730:	bf 90       	pop	r11
    4732:	af 90       	pop	r10
    4734:	9f 90       	pop	r9
    4736:	8f 90       	pop	r8
    4738:	7f 90       	pop	r7
    473a:	6f 90       	pop	r6
    473c:	5f 90       	pop	r5
    473e:	4f 90       	pop	r4
    4740:	3f 90       	pop	r3
    4742:	2f 90       	pop	r2
    4744:	08 95       	ret

00004746 <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	00 d0       	rcall	.+0      	; 0x474c <_ZN5Servo16readMicrosecondsEv+0x6>
    474c:	1f 92       	push	r1
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	9c 83       	std	Y+4, r25	; 0x04
    4754:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	9c 81       	ldd	r25, Y+4	; 0x04
    475a:	fc 01       	movw	r30, r24
    475c:	80 81       	ld	r24, Z
    475e:	8f 3f       	cpi	r24, 0xFF	; 255
    4760:	01 f1       	breq	.+64     	; 0x47a2 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    4762:	8b 81       	ldd	r24, Y+3	; 0x03
    4764:	9c 81       	ldd	r25, Y+4	; 0x04
    4766:	fc 01       	movw	r30, r24
    4768:	80 81       	ld	r24, Z
    476a:	28 2f       	mov	r18, r24
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	c9 01       	movw	r24, r18
    4770:	88 0f       	add	r24, r24
    4772:	99 1f       	adc	r25, r25
    4774:	82 0f       	add	r24, r18
    4776:	93 1f       	adc	r25, r19
    4778:	8c 55       	subi	r24, 0x5C	; 92
    477a:	9c 4f       	sbci	r25, 0xFC	; 252
    477c:	fc 01       	movw	r30, r24
    477e:	80 81       	ld	r24, Z
    4780:	91 81       	ldd	r25, Z+1	; 0x01
    4782:	88 0f       	add	r24, r24
    4784:	99 1f       	adc	r25, r25
    4786:	88 0f       	add	r24, r24
    4788:	99 1f       	adc	r25, r25
    478a:	88 0f       	add	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	92 95       	swap	r25
    4790:	82 95       	swap	r24
    4792:	8f 70       	andi	r24, 0x0F	; 15
    4794:	89 27       	eor	r24, r25
    4796:	9f 70       	andi	r25, 0x0F	; 15
    4798:	89 27       	eor	r24, r25
    479a:	02 96       	adiw	r24, 0x02	; 2
    479c:	9a 83       	std	Y+2, r25	; 0x02
    479e:	89 83       	std	Y+1, r24	; 0x01
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    47a2:	1a 82       	std	Y+2, r1	; 0x02
    47a4:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	08 95       	ret

000047b8 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    47b8:	cf 93       	push	r28
    47ba:	df 93       	push	r29
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	2f 97       	sbiw	r28, 0x0f	; 15
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    47cc:	8f e5       	ldi	r24, 0x5F	; 95
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	fc 01       	movw	r30, r24
    47d2:	80 81       	ld	r24, Z
    47d4:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    47d6:	f8 94       	cli
  if (!initialized) {
    47d8:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <_ZN8SPIClass11initializedE>
    47dc:	88 23       	and	r24, r24
    47de:	09 f0       	breq	.+2      	; 0x47e2 <_ZN8SPIClass5beginEv+0x2a>
    47e0:	5b c0       	rjmp	.+182    	; 0x4898 <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    47e2:	89 ec       	ldi	r24, 0xC9	; 201
    47e4:	91 e0       	ldi	r25, 0x01	; 1
    47e6:	9b 83       	std	Y+3, r25	; 0x03
    47e8:	8a 83       	std	Y+2, r24	; 0x02
    47ea:	8a 81       	ldd	r24, Y+2	; 0x02
    47ec:	9b 81       	ldd	r25, Y+3	; 0x03
    47ee:	fc 01       	movw	r30, r24
    47f0:	84 91       	lpm	r24, Z
    47f2:	8c 83       	std	Y+4, r24	; 0x04
    47f4:	8c 81       	ldd	r24, Y+4	; 0x04
    47f6:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    47f8:	83 e8       	ldi	r24, 0x83	; 131
    47fa:	91 e0       	ldi	r25, 0x01	; 1
    47fc:	9f 83       	std	Y+7, r25	; 0x07
    47fe:	8e 83       	std	Y+6, r24	; 0x06
    4800:	8e 81       	ldd	r24, Y+6	; 0x06
    4802:	9f 81       	ldd	r25, Y+7	; 0x07
    4804:	fc 01       	movw	r30, r24
    4806:	84 91       	lpm	r24, Z
    4808:	88 87       	std	Y+8, r24	; 0x08
    480a:	88 85       	ldd	r24, Y+8	; 0x08
    480c:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    480e:	8d 81       	ldd	r24, Y+5	; 0x05
    4810:	88 2f       	mov	r24, r24
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	88 0f       	add	r24, r24
    4816:	99 1f       	adc	r25, r25
    4818:	82 5f       	subi	r24, 0xF2	; 242
    481a:	9d 4f       	sbci	r25, 0xFD	; 253
    481c:	9b 87       	std	Y+11, r25	; 0x0b
    481e:	8a 87       	std	Y+10, r24	; 0x0a
    4820:	8a 85       	ldd	r24, Y+10	; 0x0a
    4822:	9b 85       	ldd	r25, Y+11	; 0x0b
    4824:	fc 01       	movw	r30, r24
    4826:	25 91       	lpm	r18, Z+
    4828:	34 91       	lpm	r19, Z
    482a:	cf 01       	movw	r24, r30
    482c:	3d 87       	std	Y+13, r19	; 0x0d
    482e:	2c 87       	std	Y+12, r18	; 0x0c
    4830:	9b 87       	std	Y+11, r25	; 0x0b
    4832:	8a 87       	std	Y+10, r24	; 0x0a
    4834:	8c 85       	ldd	r24, Y+12	; 0x0c
    4836:	9d 85       	ldd	r25, Y+13	; 0x0d
    4838:	9f 87       	std	Y+15, r25	; 0x0f
    483a:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    483c:	8e 85       	ldd	r24, Y+14	; 0x0e
    483e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4840:	fc 01       	movw	r30, r24
    4842:	90 81       	ld	r25, Z
    4844:	89 85       	ldd	r24, Y+9	; 0x09
    4846:	98 23       	and	r25, r24
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	99 23       	and	r25, r25
    484c:	09 f0       	breq	.+2      	; 0x4850 <_ZN8SPIClass5beginEv+0x98>
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	88 23       	and	r24, r24
    4852:	21 f0       	breq	.+8      	; 0x485c <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    4854:	61 e0       	ldi	r22, 0x01	; 1
    4856:	85 e3       	ldi	r24, 0x35	; 53
    4858:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    485c:	61 e0       	ldi	r22, 0x01	; 1
    485e:	85 e3       	ldi	r24, 0x35	; 53
    4860:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4864:	8c e4       	ldi	r24, 0x4C	; 76
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	2c e4       	ldi	r18, 0x4C	; 76
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	f9 01       	movw	r30, r18
    486e:	20 81       	ld	r18, Z
    4870:	20 61       	ori	r18, 0x10	; 16
    4872:	fc 01       	movw	r30, r24
    4874:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    4876:	8c e4       	ldi	r24, 0x4C	; 76
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	2c e4       	ldi	r18, 0x4C	; 76
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	f9 01       	movw	r30, r18
    4880:	20 81       	ld	r18, Z
    4882:	20 64       	ori	r18, 0x40	; 64
    4884:	fc 01       	movw	r30, r24
    4886:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4888:	61 e0       	ldi	r22, 0x01	; 1
    488a:	84 e3       	ldi	r24, 0x34	; 52
    488c:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
    pinMode(MOSI, OUTPUT);
    4890:	61 e0       	ldi	r22, 0x01	; 1
    4892:	83 e3       	ldi	r24, 0x33	; 51
    4894:	0e 94 56 31 	call	0x62ac	; 0x62ac <pinMode>
  }
  initialized++; // reference count
    4898:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <_ZN8SPIClass11initializedE>
    489c:	8f 5f       	subi	r24, 0xFF	; 255
    489e:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    48a2:	8f e5       	ldi	r24, 0x5F	; 95
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	29 81       	ldd	r18, Y+1	; 0x01
    48a8:	fc 01       	movw	r30, r24
    48aa:	20 83       	st	Z, r18
}
    48ac:	00 00       	nop
    48ae:	2f 96       	adiw	r28, 0x0f	; 15
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	de bf       	out	0x3e, r29	; 62
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	08 95       	ret

000048c0 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    48c0:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_sendStop>
    48ca:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
    48ce:	61 e0       	ldi	r22, 0x01	; 1
    48d0:	84 e1       	ldi	r24, 0x14	; 20
    48d2:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    48d6:	61 e0       	ldi	r22, 0x01	; 1
    48d8:	85 e1       	ldi	r24, 0x15	; 21
    48da:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    48de:	e9 eb       	ldi	r30, 0xB9	; 185
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	8e 7f       	andi	r24, 0xFE	; 254
    48e6:	80 83       	st	Z, r24
    48e8:	80 81       	ld	r24, Z
    48ea:	8d 7f       	andi	r24, 0xFD	; 253
    48ec:	80 83       	st	Z, r24
    48ee:	88 e4       	ldi	r24, 0x48	; 72
    48f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    48f4:	85 e4       	ldi	r24, 0x45	; 69
    48f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    48fa:	08 95       	ret

000048fc <twi_disable>:
    48fc:	ec eb       	ldi	r30, 0xBC	; 188
    48fe:	f0 e0       	ldi	r31, 0x00	; 0
    4900:	80 81       	ld	r24, Z
    4902:	8a 7b       	andi	r24, 0xBA	; 186
    4904:	80 83       	st	Z, r24
    4906:	60 e0       	ldi	r22, 0x00	; 0
    4908:	84 e1       	ldi	r24, 0x14	; 20
    490a:	0e 94 92 31 	call	0x6324	; 0x6324 <digitalWrite>
    490e:	60 e0       	ldi	r22, 0x00	; 0
    4910:	85 e1       	ldi	r24, 0x15	; 21
    4912:	0c 94 92 31 	jmp	0x6324	; 0x6324 <digitalWrite>

00004916 <twi_transmit>:
    4916:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <twi_txBufferLength>
    491a:	26 2f       	mov	r18, r22
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	24 0f       	add	r18, r20
    4920:	31 1d       	adc	r19, r1
    4922:	21 32       	cpi	r18, 0x21	; 33
    4924:	31 05       	cpc	r19, r1
    4926:	dc f4       	brge	.+54     	; 0x495e <twi_transmit+0x48>
    4928:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <twi_state>
    492c:	24 30       	cpi	r18, 0x04	; 4
    492e:	c9 f4       	brne	.+50     	; 0x4962 <twi_transmit+0x4c>
    4930:	fc 01       	movw	r30, r24
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	86 17       	cp	r24, r22
    4938:	58 f4       	brcc	.+22     	; 0x4950 <twi_transmit+0x3a>
    493a:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <twi_txBufferLength>
    493e:	21 91       	ld	r18, Z+
    4940:	dc 01       	movw	r26, r24
    4942:	a0 5a       	subi	r26, 0xA0	; 160
    4944:	bb 4f       	sbci	r27, 0xFB	; 251
    4946:	a3 0f       	add	r26, r19
    4948:	b1 1d       	adc	r27, r1
    494a:	2c 93       	st	X, r18
    494c:	01 96       	adiw	r24, 0x01	; 1
    494e:	f3 cf       	rjmp	.-26     	; 0x4936 <twi_transmit+0x20>
    4950:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <twi_txBufferLength>
    4954:	68 0f       	add	r22, r24
    4956:	60 93 5e 04 	sts	0x045E, r22	; 0x80045e <twi_txBufferLength>
    495a:	80 e0       	ldi	r24, 0x00	; 0
    495c:	08 95       	ret
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	08 95       	ret
    4962:	82 e0       	ldi	r24, 0x02	; 2
    4964:	08 95       	ret

00004966 <twi_attachSlaveRxEvent>:
    4966:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <twi_onSlaveReceive+0x1>
    496a:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <twi_onSlaveReceive>
    496e:	08 95       	ret

00004970 <twi_attachSlaveTxEvent>:
    4970:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <twi_onSlaveTransmit+0x1>
    4974:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <twi_onSlaveTransmit>
    4978:	08 95       	ret

0000497a <twi_releaseBus>:
    497a:	85 ec       	ldi	r24, 0xC5	; 197
    497c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4980:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
    4984:	08 95       	ret

00004986 <twi_handleTimeout>:
    4986:	cf 93       	push	r28
    4988:	df 93       	push	r29
    498a:	91 e0       	ldi	r25, 0x01	; 1
    498c:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <twi_timed_out_flag>
    4990:	88 23       	and	r24, r24
    4992:	51 f0       	breq	.+20     	; 0x49a8 <twi_handleTimeout+0x22>
    4994:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4998:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    499c:	af df       	rcall	.-162    	; 0x48fc <twi_disable>
    499e:	90 df       	rcall	.-224    	; 0x48c0 <twi_init>
    49a0:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    49a4:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	08 95       	ret

000049ae <twi_readFrom>:
    49ae:	4f 92       	push	r4
    49b0:	5f 92       	push	r5
    49b2:	6f 92       	push	r6
    49b4:	7f 92       	push	r7
    49b6:	8f 92       	push	r8
    49b8:	9f 92       	push	r9
    49ba:	af 92       	push	r10
    49bc:	bf 92       	push	r11
    49be:	cf 92       	push	r12
    49c0:	df 92       	push	r13
    49c2:	ef 92       	push	r14
    49c4:	ff 92       	push	r15
    49c6:	0f 93       	push	r16
    49c8:	1f 93       	push	r17
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	f8 2e       	mov	r15, r24
    49d0:	16 2f       	mov	r17, r22
    49d2:	07 2f       	mov	r16, r23
    49d4:	c4 2f       	mov	r28, r20
    49d6:	e2 2e       	mov	r14, r18
    49d8:	41 32       	cpi	r20, 0x21	; 33
    49da:	08 f0       	brcs	.+2      	; 0x49de <twi_readFrom+0x30>
    49dc:	bc c0       	rjmp	.+376    	; 0x4b56 <twi_readFrom+0x1a8>
    49de:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    49e2:	4b 01       	movw	r8, r22
    49e4:	5c 01       	movw	r10, r24
    49e6:	d0 91 af 04 	lds	r29, 0x04AF	; 0x8004af <twi_state>
    49ea:	dd 23       	and	r29, r29
    49ec:	29 f1       	breq	.+74     	; 0x4a38 <twi_readFrom+0x8a>
    49ee:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    49f2:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    49f6:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    49fa:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    49fe:	89 2b       	or	r24, r25
    4a00:	8a 2b       	or	r24, r26
    4a02:	8b 2b       	or	r24, r27
    4a04:	81 f3       	breq	.-32     	; 0x49e6 <twi_readFrom+0x38>
    4a06:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4a0a:	40 90 a8 04 	lds	r4, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4a0e:	50 90 a9 04 	lds	r5, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4a12:	60 90 aa 04 	lds	r6, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4a16:	70 90 ab 04 	lds	r7, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	88 19       	sub	r24, r8
    4a20:	99 09       	sbc	r25, r9
    4a22:	aa 09       	sbc	r26, r10
    4a24:	bb 09       	sbc	r27, r11
    4a26:	48 16       	cp	r4, r24
    4a28:	59 06       	cpc	r5, r25
    4a2a:	6a 06       	cpc	r6, r26
    4a2c:	7b 06       	cpc	r7, r27
    4a2e:	d8 f6       	brcc	.-74     	; 0x49e6 <twi_readFrom+0x38>
    4a30:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4a34:	a8 df       	rcall	.-176    	; 0x4986 <twi_handleTimeout>
    4a36:	8f c0       	rjmp	.+286    	; 0x4b56 <twi_readFrom+0x1a8>
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
    4a3e:	e0 92 ad 04 	sts	0x04AD, r14	; 0x8004ad <twi_sendStop>
    4a42:	9f ef       	ldi	r25, 0xFF	; 255
    4a44:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <twi_error>
    4a48:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_masterBufferIndex>
    4a4c:	9c 0f       	add	r25, r28
    4a4e:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <twi_masterBufferLength>
    4a52:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <twi_slarw>
    4a56:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <twi_slarw>
    4a5a:	8f 2d       	mov	r24, r15
    4a5c:	88 0f       	add	r24, r24
    4a5e:	89 2b       	or	r24, r25
    4a60:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <twi_slarw>
    4a64:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_inRepStart>
    4a68:	81 30       	cpi	r24, 0x01	; 1
    4a6a:	89 f5       	brne	.+98     	; 0x4ace <twi_readFrom+0x120>
    4a6c:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
    4a70:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4a74:	6b 01       	movw	r12, r22
    4a76:	7c 01       	movw	r14, r24
    4a78:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_slarw>
    4a7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4a80:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4a84:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4a88:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4a8c:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4a90:	89 2b       	or	r24, r25
    4a92:	8a 2b       	or	r24, r26
    4a94:	8b 2b       	or	r24, r27
    4a96:	a9 f0       	breq	.+42     	; 0x4ac2 <twi_readFrom+0x114>
    4a98:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4a9c:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4aa0:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4aa4:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4aa8:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4aac:	dc 01       	movw	r26, r24
    4aae:	cb 01       	movw	r24, r22
    4ab0:	8c 19       	sub	r24, r12
    4ab2:	9d 09       	sbc	r25, r13
    4ab4:	ae 09       	sbc	r26, r14
    4ab6:	bf 09       	sbc	r27, r15
    4ab8:	88 16       	cp	r8, r24
    4aba:	99 06       	cpc	r9, r25
    4abc:	aa 06       	cpc	r10, r26
    4abe:	bb 06       	cpc	r11, r27
    4ac0:	90 f1       	brcs	.+100    	; 0x4b26 <twi_readFrom+0x178>
    4ac2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ac6:	83 fd       	sbrc	r24, 3
    4ac8:	d7 cf       	rjmp	.-82     	; 0x4a78 <twi_readFrom+0xca>
    4aca:	85 ec       	ldi	r24, 0xC5	; 197
    4acc:	01 c0       	rjmp	.+2      	; 0x4ad0 <twi_readFrom+0x122>
    4ace:	85 ee       	ldi	r24, 0xE5	; 229
    4ad0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ad4:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4ad8:	6b 01       	movw	r12, r22
    4ada:	7c 01       	movw	r14, r24
    4adc:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <twi_state>
    4ae0:	81 30       	cpi	r24, 0x01	; 1
    4ae2:	29 f5       	brne	.+74     	; 0x4b2e <twi_readFrom+0x180>
    4ae4:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4ae8:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4aec:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4af0:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4af4:	89 2b       	or	r24, r25
    4af6:	8a 2b       	or	r24, r26
    4af8:	8b 2b       	or	r24, r27
    4afa:	81 f3       	breq	.-32     	; 0x4adc <twi_readFrom+0x12e>
    4afc:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4b00:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4b04:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4b08:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4b0c:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4b10:	dc 01       	movw	r26, r24
    4b12:	cb 01       	movw	r24, r22
    4b14:	8c 19       	sub	r24, r12
    4b16:	9d 09       	sbc	r25, r13
    4b18:	ae 09       	sbc	r26, r14
    4b1a:	bf 09       	sbc	r27, r15
    4b1c:	88 16       	cp	r8, r24
    4b1e:	99 06       	cpc	r9, r25
    4b20:	aa 06       	cpc	r10, r26
    4b22:	bb 06       	cpc	r11, r27
    4b24:	d8 f6       	brcc	.-74     	; 0x4adc <twi_readFrom+0x12e>
    4b26:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4b2a:	2d df       	rcall	.-422    	; 0x4986 <twi_handleTimeout>
    4b2c:	15 c0       	rjmp	.+42     	; 0x4b58 <twi_readFrom+0x1aa>
    4b2e:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4b32:	8c 17       	cp	r24, r28
    4b34:	10 f4       	brcc	.+4      	; 0x4b3a <twi_readFrom+0x18c>
    4b36:	c0 91 81 04 	lds	r28, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4b3a:	a2 e8       	ldi	r26, 0x82	; 130
    4b3c:	b4 e0       	ldi	r27, 0x04	; 4
    4b3e:	91 2f       	mov	r25, r17
    4b40:	e1 2f       	mov	r30, r17
    4b42:	f0 2f       	mov	r31, r16
    4b44:	8e 2f       	mov	r24, r30
    4b46:	89 1b       	sub	r24, r25
    4b48:	8c 17       	cp	r24, r28
    4b4a:	18 f4       	brcc	.+6      	; 0x4b52 <twi_readFrom+0x1a4>
    4b4c:	8d 91       	ld	r24, X+
    4b4e:	81 93       	st	Z+, r24
    4b50:	f9 cf       	rjmp	.-14     	; 0x4b44 <twi_readFrom+0x196>
    4b52:	dc 2f       	mov	r29, r28
    4b54:	01 c0       	rjmp	.+2      	; 0x4b58 <twi_readFrom+0x1aa>
    4b56:	d0 e0       	ldi	r29, 0x00	; 0
    4b58:	8d 2f       	mov	r24, r29
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	1f 91       	pop	r17
    4b60:	0f 91       	pop	r16
    4b62:	ff 90       	pop	r15
    4b64:	ef 90       	pop	r14
    4b66:	df 90       	pop	r13
    4b68:	cf 90       	pop	r12
    4b6a:	bf 90       	pop	r11
    4b6c:	af 90       	pop	r10
    4b6e:	9f 90       	pop	r9
    4b70:	8f 90       	pop	r8
    4b72:	7f 90       	pop	r7
    4b74:	6f 90       	pop	r6
    4b76:	5f 90       	pop	r5
    4b78:	4f 90       	pop	r4
    4b7a:	08 95       	ret

00004b7c <twi_writeTo>:
    4b7c:	4f 92       	push	r4
    4b7e:	5f 92       	push	r5
    4b80:	6f 92       	push	r6
    4b82:	7f 92       	push	r7
    4b84:	8f 92       	push	r8
    4b86:	9f 92       	push	r9
    4b88:	af 92       	push	r10
    4b8a:	bf 92       	push	r11
    4b8c:	cf 92       	push	r12
    4b8e:	df 92       	push	r13
    4b90:	ef 92       	push	r14
    4b92:	ff 92       	push	r15
    4b94:	0f 93       	push	r16
    4b96:	1f 93       	push	r17
    4b98:	cf 93       	push	r28
    4b9a:	df 93       	push	r29
    4b9c:	41 32       	cpi	r20, 0x21	; 33
    4b9e:	08 f0       	brcs	.+2      	; 0x4ba2 <twi_writeTo+0x26>
    4ba0:	c5 c0       	rjmp	.+394    	; 0x4d2c <twi_writeTo+0x1b0>
    4ba2:	12 2f       	mov	r17, r18
    4ba4:	f4 2e       	mov	r15, r20
    4ba6:	d7 2e       	mov	r13, r23
    4ba8:	e6 2e       	mov	r14, r22
    4baa:	d8 2f       	mov	r29, r24
    4bac:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4bb0:	4b 01       	movw	r8, r22
    4bb2:	5c 01       	movw	r10, r24
    4bb4:	c0 91 af 04 	lds	r28, 0x04AF	; 0x8004af <twi_state>
    4bb8:	cc 23       	and	r28, r28
    4bba:	11 f1       	breq	.+68     	; 0x4c00 <twi_writeTo+0x84>
    4bbc:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4bc0:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4bc4:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4bc8:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4bcc:	89 2b       	or	r24, r25
    4bce:	8a 2b       	or	r24, r26
    4bd0:	8b 2b       	or	r24, r27
    4bd2:	81 f3       	breq	.-32     	; 0x4bb4 <twi_writeTo+0x38>
    4bd4:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4bd8:	40 90 a8 04 	lds	r4, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4bdc:	50 90 a9 04 	lds	r5, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4be0:	60 90 aa 04 	lds	r6, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4be4:	70 90 ab 04 	lds	r7, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	88 19       	sub	r24, r8
    4bee:	99 09       	sbc	r25, r9
    4bf0:	aa 09       	sbc	r26, r10
    4bf2:	bb 09       	sbc	r27, r11
    4bf4:	48 16       	cp	r4, r24
    4bf6:	59 06       	cpc	r5, r25
    4bf8:	6a 06       	cpc	r6, r26
    4bfa:	7b 06       	cpc	r7, r27
    4bfc:	d8 f6       	brcc	.-74     	; 0x4bb4 <twi_writeTo+0x38>
    4bfe:	83 c0       	rjmp	.+262    	; 0x4d06 <twi_writeTo+0x18a>
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
    4c06:	00 93 ad 04 	sts	0x04AD, r16	; 0x8004ad <twi_sendStop>
    4c0a:	8f ef       	ldi	r24, 0xFF	; 255
    4c0c:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_error>
    4c10:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <twi_masterBufferIndex>
    4c14:	f0 92 80 04 	sts	0x0480, r15	; 0x800480 <twi_masterBufferLength>
    4c18:	9e 2d       	mov	r25, r14
    4c1a:	a2 e8       	ldi	r26, 0x82	; 130
    4c1c:	b4 e0       	ldi	r27, 0x04	; 4
    4c1e:	ee 2d       	mov	r30, r14
    4c20:	fd 2d       	mov	r31, r13
    4c22:	8e 2f       	mov	r24, r30
    4c24:	89 1b       	sub	r24, r25
    4c26:	8f 15       	cp	r24, r15
    4c28:	18 f4       	brcc	.+6      	; 0x4c30 <twi_writeTo+0xb4>
    4c2a:	81 91       	ld	r24, Z+
    4c2c:	8d 93       	st	X+, r24
    4c2e:	f9 cf       	rjmp	.-14     	; 0x4c22 <twi_writeTo+0xa6>
    4c30:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <twi_slarw>
    4c34:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <twi_slarw>
    4c38:	dd 0f       	add	r29, r29
    4c3a:	d9 2b       	or	r29, r25
    4c3c:	d0 93 ae 04 	sts	0x04AE, r29	; 0x8004ae <twi_slarw>
    4c40:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_inRepStart>
    4c44:	81 30       	cpi	r24, 0x01	; 1
    4c46:	89 f5       	brne	.+98     	; 0x4caa <twi_writeTo+0x12e>
    4c48:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
    4c4c:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4c50:	6b 01       	movw	r12, r22
    4c52:	7c 01       	movw	r14, r24
    4c54:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_slarw>
    4c58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c5c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4c60:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4c64:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4c68:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4c6c:	89 2b       	or	r24, r25
    4c6e:	8a 2b       	or	r24, r26
    4c70:	8b 2b       	or	r24, r27
    4c72:	a9 f0       	breq	.+42     	; 0x4c9e <twi_writeTo+0x122>
    4c74:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4c78:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4c7c:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4c80:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4c84:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	8c 19       	sub	r24, r12
    4c8e:	9d 09       	sbc	r25, r13
    4c90:	ae 09       	sbc	r26, r14
    4c92:	bf 09       	sbc	r27, r15
    4c94:	88 16       	cp	r8, r24
    4c96:	99 06       	cpc	r9, r25
    4c98:	aa 06       	cpc	r10, r26
    4c9a:	bb 06       	cpc	r11, r27
    4c9c:	a0 f1       	brcs	.+104    	; 0x4d06 <twi_writeTo+0x18a>
    4c9e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ca2:	83 fd       	sbrc	r24, 3
    4ca4:	d7 cf       	rjmp	.-82     	; 0x4c54 <twi_writeTo+0xd8>
    4ca6:	85 ec       	ldi	r24, 0xC5	; 197
    4ca8:	01 c0       	rjmp	.+2      	; 0x4cac <twi_writeTo+0x130>
    4caa:	85 ee       	ldi	r24, 0xE5	; 229
    4cac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cb0:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4cb4:	6b 01       	movw	r12, r22
    4cb6:	7c 01       	movw	r14, r24
    4cb8:	11 23       	and	r17, r17
    4cba:	51 f1       	breq	.+84     	; 0x4d10 <twi_writeTo+0x194>
    4cbc:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <twi_state>
    4cc0:	82 30       	cpi	r24, 0x02	; 2
    4cc2:	31 f5       	brne	.+76     	; 0x4d10 <twi_writeTo+0x194>
    4cc4:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4cc8:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4ccc:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4cd0:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4cd4:	89 2b       	or	r24, r25
    4cd6:	8a 2b       	or	r24, r26
    4cd8:	8b 2b       	or	r24, r27
    4cda:	71 f3       	breq	.-36     	; 0x4cb8 <twi_writeTo+0x13c>
    4cdc:	0e 94 36 30 	call	0x606c	; 0x606c <micros>
    4ce0:	80 90 a8 04 	lds	r8, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4ce4:	90 90 a9 04 	lds	r9, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4ce8:	a0 90 aa 04 	lds	r10, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4cec:	b0 90 ab 04 	lds	r11, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	8c 19       	sub	r24, r12
    4cf6:	9d 09       	sbc	r25, r13
    4cf8:	ae 09       	sbc	r26, r14
    4cfa:	bf 09       	sbc	r27, r15
    4cfc:	88 16       	cp	r8, r24
    4cfe:	99 06       	cpc	r9, r25
    4d00:	aa 06       	cpc	r10, r26
    4d02:	bb 06       	cpc	r11, r27
    4d04:	c8 f6       	brcc	.-78     	; 0x4cb8 <twi_writeTo+0x13c>
    4d06:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4d0a:	3d de       	rcall	.-902    	; 0x4986 <twi_handleTimeout>
    4d0c:	c5 e0       	ldi	r28, 0x05	; 5
    4d0e:	13 c0       	rjmp	.+38     	; 0x4d36 <twi_writeTo+0x1ba>
    4d10:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_error>
    4d14:	8f 3f       	cpi	r24, 0xFF	; 255
    4d16:	79 f0       	breq	.+30     	; 0x4d36 <twi_writeTo+0x1ba>
    4d18:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_error>
    4d1c:	80 32       	cpi	r24, 0x20	; 32
    4d1e:	41 f0       	breq	.+16     	; 0x4d30 <twi_writeTo+0x1b4>
    4d20:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_error>
    4d24:	80 33       	cpi	r24, 0x30	; 48
    4d26:	31 f0       	breq	.+12     	; 0x4d34 <twi_writeTo+0x1b8>
    4d28:	c4 e0       	ldi	r28, 0x04	; 4
    4d2a:	05 c0       	rjmp	.+10     	; 0x4d36 <twi_writeTo+0x1ba>
    4d2c:	c1 e0       	ldi	r28, 0x01	; 1
    4d2e:	03 c0       	rjmp	.+6      	; 0x4d36 <twi_writeTo+0x1ba>
    4d30:	c2 e0       	ldi	r28, 0x02	; 2
    4d32:	01 c0       	rjmp	.+2      	; 0x4d36 <twi_writeTo+0x1ba>
    4d34:	c3 e0       	ldi	r28, 0x03	; 3
    4d36:	8c 2f       	mov	r24, r28
    4d38:	df 91       	pop	r29
    4d3a:	cf 91       	pop	r28
    4d3c:	1f 91       	pop	r17
    4d3e:	0f 91       	pop	r16
    4d40:	ff 90       	pop	r15
    4d42:	ef 90       	pop	r14
    4d44:	df 90       	pop	r13
    4d46:	cf 90       	pop	r12
    4d48:	bf 90       	pop	r11
    4d4a:	af 90       	pop	r10
    4d4c:	9f 90       	pop	r9
    4d4e:	8f 90       	pop	r8
    4d50:	7f 90       	pop	r7
    4d52:	6f 90       	pop	r6
    4d54:	5f 90       	pop	r5
    4d56:	4f 90       	pop	r4
    4d58:	08 95       	ret

00004d5a <twi_stop>:
    4d5a:	85 ed       	ldi	r24, 0xD5	; 213
    4d5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d60:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4d64:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4d68:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4d6c:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4d70:	07 96       	adiw	r24, 0x07	; 7
    4d72:	a1 1d       	adc	r26, r1
    4d74:	b1 1d       	adc	r27, r1
    4d76:	23 e0       	ldi	r18, 0x03	; 3
    4d78:	b6 95       	lsr	r27
    4d7a:	a7 95       	ror	r26
    4d7c:	97 95       	ror	r25
    4d7e:	87 95       	ror	r24
    4d80:	2a 95       	dec	r18
    4d82:	d1 f7       	brne	.-12     	; 0x4d78 <twi_stop+0x1e>
    4d84:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d88:	24 ff       	sbrs	r18, 4
    4d8a:	1b c0       	rjmp	.+54     	; 0x4dc2 <twi_stop+0x68>
    4d8c:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <twi_timeout_us>
    4d90:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <twi_timeout_us+0x1>
    4d94:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <twi_timeout_us+0x2>
    4d98:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <twi_timeout_us+0x3>
    4d9c:	45 2b       	or	r20, r21
    4d9e:	46 2b       	or	r20, r22
    4da0:	47 2b       	or	r20, r23
    4da2:	81 f3       	breq	.-32     	; 0x4d84 <twi_stop+0x2a>
    4da4:	00 97       	sbiw	r24, 0x00	; 0
    4da6:	a1 05       	cpc	r26, r1
    4da8:	b1 05       	cpc	r27, r1
    4daa:	41 f0       	breq	.+16     	; 0x4dbc <twi_stop+0x62>
    4dac:	25 e3       	ldi	r18, 0x35	; 53
    4dae:	2a 95       	dec	r18
    4db0:	f1 f7       	brne	.-4      	; 0x4dae <twi_stop+0x54>
    4db2:	00 00       	nop
    4db4:	01 97       	sbiw	r24, 0x01	; 1
    4db6:	a1 09       	sbc	r26, r1
    4db8:	b1 09       	sbc	r27, r1
    4dba:	e4 cf       	rjmp	.-56     	; 0x4d84 <twi_stop+0x2a>
    4dbc:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <twi_do_reset_on_timeout>
    4dc0:	e2 cd       	rjmp	.-1084   	; 0x4986 <twi_handleTimeout>
    4dc2:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
    4dc6:	08 95       	ret

00004dc8 <__vector_39>:

ISR(TWI_vect)
{
    4dc8:	1f 92       	push	r1
    4dca:	0f 92       	push	r0
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	0f 92       	push	r0
    4dd0:	11 24       	eor	r1, r1
    4dd2:	0b b6       	in	r0, 0x3b	; 59
    4dd4:	0f 92       	push	r0
    4dd6:	2f 93       	push	r18
    4dd8:	3f 93       	push	r19
    4dda:	4f 93       	push	r20
    4ddc:	5f 93       	push	r21
    4dde:	6f 93       	push	r22
    4de0:	7f 93       	push	r23
    4de2:	8f 93       	push	r24
    4de4:	9f 93       	push	r25
    4de6:	af 93       	push	r26
    4de8:	bf 93       	push	r27
    4dea:	ef 93       	push	r30
    4dec:	ff 93       	push	r31
  switch(TW_STATUS){
    4dee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4df2:	88 7f       	andi	r24, 0xF8	; 248
    4df4:	80 36       	cpi	r24, 0x60	; 96
    4df6:	09 f4       	brne	.+2      	; 0x4dfa <__vector_39+0x32>
    4df8:	9d c0       	rjmp	.+314    	; 0x4f34 <__vector_39+0x16c>
    4dfa:	70 f5       	brcc	.+92     	; 0x4e58 <__vector_39+0x90>
    4dfc:	88 32       	cpi	r24, 0x28	; 40
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <__vector_39+0x3a>
    4e00:	5c c0       	rjmp	.+184    	; 0x4eba <__vector_39+0xf2>
    4e02:	90 f4       	brcc	.+36     	; 0x4e28 <__vector_39+0x60>
    4e04:	80 31       	cpi	r24, 0x10	; 16
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <__vector_39+0x42>
    4e08:	55 c0       	rjmp	.+170    	; 0x4eb4 <__vector_39+0xec>
    4e0a:	38 f4       	brcc	.+14     	; 0x4e1a <__vector_39+0x52>
    4e0c:	88 23       	and	r24, r24
    4e0e:	09 f4       	brne	.+2      	; 0x4e12 <__vector_39+0x4a>
    4e10:	f3 c0       	rjmp	.+486    	; 0x4ff8 <__vector_39+0x230>
    4e12:	88 30       	cpi	r24, 0x08	; 8
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <__vector_39+0x50>
    4e16:	4e c0       	rjmp	.+156    	; 0x4eb4 <__vector_39+0xec>
    4e18:	f2 c0       	rjmp	.+484    	; 0x4ffe <__vector_39+0x236>
    4e1a:	88 31       	cpi	r24, 0x18	; 24
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <__vector_39+0x58>
    4e1e:	4d c0       	rjmp	.+154    	; 0x4eba <__vector_39+0xf2>
    4e20:	80 32       	cpi	r24, 0x20	; 32
    4e22:	09 f4       	brne	.+2      	; 0x4e26 <__vector_39+0x5e>
    4e24:	5e c0       	rjmp	.+188    	; 0x4ee2 <__vector_39+0x11a>
    4e26:	eb c0       	rjmp	.+470    	; 0x4ffe <__vector_39+0x236>
    4e28:	80 34       	cpi	r24, 0x40	; 64
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <__vector_39+0x66>
    4e2c:	69 c0       	rjmp	.+210    	; 0x4f00 <__vector_39+0x138>
    4e2e:	50 f4       	brcc	.+20     	; 0x4e44 <__vector_39+0x7c>
    4e30:	80 33       	cpi	r24, 0x30	; 48
    4e32:	09 f4       	brne	.+2      	; 0x4e36 <__vector_39+0x6e>
    4e34:	56 c0       	rjmp	.+172    	; 0x4ee2 <__vector_39+0x11a>
    4e36:	88 33       	cpi	r24, 0x38	; 56
    4e38:	09 f0       	breq	.+2      	; 0x4e3c <__vector_39+0x74>
    4e3a:	e1 c0       	rjmp	.+450    	; 0x4ffe <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4e3c:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_error>
      twi_releaseBus();
    4e40:	9c dd       	rcall	.-1224   	; 0x497a <twi_releaseBus>
      break;
    4e42:	dd c0       	rjmp	.+442    	; 0x4ffe <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4e44:	80 35       	cpi	r24, 0x50	; 80
    4e46:	09 f4       	brne	.+2      	; 0x4e4a <__vector_39+0x82>
    4e48:	4f c0       	rjmp	.+158    	; 0x4ee8 <__vector_39+0x120>
    4e4a:	88 35       	cpi	r24, 0x58	; 88
    4e4c:	09 f4       	brne	.+2      	; 0x4e50 <__vector_39+0x88>
    4e4e:	5d c0       	rjmp	.+186    	; 0x4f0a <__vector_39+0x142>
    4e50:	88 34       	cpi	r24, 0x48	; 72
    4e52:	09 f0       	breq	.+2      	; 0x4e56 <__vector_39+0x8e>
    4e54:	d4 c0       	rjmp	.+424    	; 0x4ffe <__vector_39+0x236>
    4e56:	d2 c0       	rjmp	.+420    	; 0x4ffc <__vector_39+0x234>
    4e58:	88 39       	cpi	r24, 0x98	; 152
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <__vector_39+0x96>
    4e5c:	c3 c0       	rjmp	.+390    	; 0x4fe4 <__vector_39+0x21c>
    4e5e:	a8 f4       	brcc	.+42     	; 0x4e8a <__vector_39+0xc2>
    4e60:	88 37       	cpi	r24, 0x78	; 120
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <__vector_39+0x9e>
    4e64:	67 c0       	rjmp	.+206    	; 0x4f34 <__vector_39+0x16c>
    4e66:	38 f4       	brcc	.+14     	; 0x4e76 <__vector_39+0xae>
    4e68:	88 36       	cpi	r24, 0x68	; 104
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <__vector_39+0xa6>
    4e6c:	63 c0       	rjmp	.+198    	; 0x4f34 <__vector_39+0x16c>
    4e6e:	80 37       	cpi	r24, 0x70	; 112
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <__vector_39+0xac>
    4e72:	60 c0       	rjmp	.+192    	; 0x4f34 <__vector_39+0x16c>
    4e74:	c4 c0       	rjmp	.+392    	; 0x4ffe <__vector_39+0x236>
    4e76:	88 38       	cpi	r24, 0x88	; 136
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <__vector_39+0xb4>
    4e7a:	b4 c0       	rjmp	.+360    	; 0x4fe4 <__vector_39+0x21c>
    4e7c:	80 39       	cpi	r24, 0x90	; 144
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <__vector_39+0xba>
    4e80:	5f c0       	rjmp	.+190    	; 0x4f40 <__vector_39+0x178>
    4e82:	80 38       	cpi	r24, 0x80	; 128
    4e84:	09 f0       	breq	.+2      	; 0x4e88 <__vector_39+0xc0>
    4e86:	bb c0       	rjmp	.+374    	; 0x4ffe <__vector_39+0x236>
    4e88:	5b c0       	rjmp	.+182    	; 0x4f40 <__vector_39+0x178>
    4e8a:	80 3b       	cpi	r24, 0xB0	; 176
    4e8c:	09 f4       	brne	.+2      	; 0x4e90 <__vector_39+0xc8>
    4e8e:	82 c0       	rjmp	.+260    	; 0x4f94 <__vector_39+0x1cc>
    4e90:	38 f4       	brcc	.+14     	; 0x4ea0 <__vector_39+0xd8>
    4e92:	80 3a       	cpi	r24, 0xA0	; 160
    4e94:	09 f4       	brne	.+2      	; 0x4e98 <__vector_39+0xd0>
    4e96:	66 c0       	rjmp	.+204    	; 0x4f64 <__vector_39+0x19c>
    4e98:	88 3a       	cpi	r24, 0xA8	; 168
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <__vector_39+0xd6>
    4e9c:	7b c0       	rjmp	.+246    	; 0x4f94 <__vector_39+0x1cc>
    4e9e:	af c0       	rjmp	.+350    	; 0x4ffe <__vector_39+0x236>
    4ea0:	80 3c       	cpi	r24, 0xC0	; 192
    4ea2:	09 f4       	brne	.+2      	; 0x4ea6 <__vector_39+0xde>
    4ea4:	a3 c0       	rjmp	.+326    	; 0x4fec <__vector_39+0x224>
    4ea6:	88 3c       	cpi	r24, 0xC8	; 200
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <__vector_39+0xe4>
    4eaa:	a0 c0       	rjmp	.+320    	; 0x4fec <__vector_39+0x224>
    4eac:	88 3b       	cpi	r24, 0xB8	; 184
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <__vector_39+0xea>
    4eb0:	86 c0       	rjmp	.+268    	; 0x4fbe <__vector_39+0x1f6>
    4eb2:	a5 c0       	rjmp	.+330    	; 0x4ffe <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4eb4:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_slarw>
    4eb8:	10 c0       	rjmp	.+32     	; 0x4eda <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4eba:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4ebe:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <twi_masterBufferLength>
    4ec2:	98 17       	cp	r25, r24
    4ec4:	70 f5       	brcc	.+92     	; 0x4f22 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4ec6:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	8e 0f       	add	r24, r30
    4ece:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_masterBufferIndex>
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	ee 57       	subi	r30, 0x7E	; 126
    4ed6:	fb 4f       	sbci	r31, 0xFB	; 251
    4ed8:	80 81       	ld	r24, Z
    4eda:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4ede:	85 ec       	ldi	r24, 0xC5	; 197
    4ee0:	82 c0       	rjmp	.+260    	; 0x4fe6 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4ee2:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_error>
    4ee6:	8a c0       	rjmp	.+276    	; 0x4ffc <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4ee8:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	8e 0f       	add	r24, r30
    4ef0:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_masterBufferIndex>
    4ef4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ef8:	f0 e0       	ldi	r31, 0x00	; 0
    4efa:	ee 57       	subi	r30, 0x7E	; 126
    4efc:	fb 4f       	sbci	r31, 0xFB	; 251
    4efe:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4f00:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4f04:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <twi_masterBufferLength>
    4f08:	6a c0       	rjmp	.+212    	; 0x4fde <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4f0a:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <twi_masterBufferIndex>
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	8e 0f       	add	r24, r30
    4f12:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <twi_masterBufferIndex>
    4f16:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	ee 57       	subi	r30, 0x7E	; 126
    4f1e:	fb 4f       	sbci	r31, 0xFB	; 251
    4f20:	80 83       	st	Z, r24
      if (twi_sendStop){
    4f22:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_sendStop>
    4f26:	81 11       	cpse	r24, r1
    4f28:	69 c0       	rjmp	.+210    	; 0x4ffc <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4f30:	84 ea       	ldi	r24, 0xA4	; 164
    4f32:	5d c0       	rjmp	.+186    	; 0x4fee <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4f34:	83 e0       	ldi	r24, 0x03	; 3
    4f36:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4f3a:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <twi_rxBufferIndex>
    4f3e:	cf cf       	rjmp	.-98     	; 0x4ede <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f40:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f44:	80 32       	cpi	r24, 0x20	; 32
    4f46:	08 f0       	brcs	.+2      	; 0x4f4a <__vector_39+0x182>
    4f48:	4d c0       	rjmp	.+154    	; 0x4fe4 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4f4a:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	8e 0f       	add	r24, r30
    4f52:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <twi_rxBufferIndex>
    4f56:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f5a:	f0 e0       	ldi	r31, 0x00	; 0
    4f5c:	e2 5c       	subi	r30, 0xC2	; 194
    4f5e:	fb 4f       	sbci	r31, 0xFB	; 251
    4f60:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4f62:	bd cf       	rjmp	.-134    	; 0x4ede <__vector_39+0x116>
    4f64:	0a dd       	rcall	.-1516   	; 0x497a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f66:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f6a:	80 32       	cpi	r24, 0x20	; 32
    4f6c:	30 f4       	brcc	.+12     	; 0x4f7a <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4f6e:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	e2 5c       	subi	r30, 0xC2	; 194
    4f76:	fb 4f       	sbci	r31, 0xFB	; 251
    4f78:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4f7a:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <twi_rxBufferIndex>
    4f7e:	70 e0       	ldi	r23, 0x00	; 0
    4f80:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <twi_onSlaveReceive>
    4f84:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <twi_onSlaveReceive+0x1>
    4f88:	8e e3       	ldi	r24, 0x3E	; 62
    4f8a:	94 e0       	ldi	r25, 0x04	; 4
    4f8c:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4f8e:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <twi_rxBufferIndex>
      break;
    4f92:	35 c0       	rjmp	.+106    	; 0x4ffe <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4f94:	84 e0       	ldi	r24, 0x04	; 4
    4f96:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4f9a:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4f9e:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4fa2:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <twi_onSlaveTransmit>
    4fa6:	f0 91 a5 04 	lds	r31, 0x04A5	; 0x8004a5 <twi_onSlaveTransmit+0x1>
    4faa:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4fac:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <twi_txBufferLength>
    4fb0:	81 11       	cpse	r24, r1
    4fb2:	05 c0       	rjmp	.+10     	; 0x4fbe <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4fba:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4fbe:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <twi_txBufferIndex>
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	8e 0f       	add	r24, r30
    4fc6:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <twi_txBufferIndex>
    4fca:	f0 e0       	ldi	r31, 0x00	; 0
    4fcc:	e0 5a       	subi	r30, 0xA0	; 160
    4fce:	fb 4f       	sbci	r31, 0xFB	; 251
    4fd0:	80 81       	ld	r24, Z
    4fd2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4fd6:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <twi_txBufferIndex>
    4fda:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <twi_txBufferLength>
    4fde:	98 17       	cp	r25, r24
    4fe0:	08 f4       	brcc	.+2      	; 0x4fe4 <__vector_39+0x21c>
    4fe2:	7d cf       	rjmp	.-262    	; 0x4ede <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4fe4:	85 e8       	ldi	r24, 0x85	; 133
    4fe6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fea:	09 c0       	rjmp	.+18     	; 0x4ffe <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4fec:	85 ec       	ldi	r24, 0xC5	; 197
    4fee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4ff2:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_state>
      break;
    4ff6:	03 c0       	rjmp	.+6      	; 0x4ffe <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4ff8:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_error>
      twi_stop();
    4ffc:	ae de       	rcall	.-676    	; 0x4d5a <twi_stop>
      break;
  }
}
    4ffe:	ff 91       	pop	r31
    5000:	ef 91       	pop	r30
    5002:	bf 91       	pop	r27
    5004:	af 91       	pop	r26
    5006:	9f 91       	pop	r25
    5008:	8f 91       	pop	r24
    500a:	7f 91       	pop	r23
    500c:	6f 91       	pop	r22
    500e:	5f 91       	pop	r21
    5010:	4f 91       	pop	r20
    5012:	3f 91       	pop	r19
    5014:	2f 91       	pop	r18
    5016:	0f 90       	pop	r0
    5018:	0b be       	out	0x3b, r0	; 59
    501a:	0f 90       	pop	r0
    501c:	0f be       	out	0x3f, r0	; 63
    501e:	0f 90       	pop	r0
    5020:	1f 90       	pop	r1
    5022:	18 95       	reti

00005024 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    5024:	cf 93       	push	r28
    5026:	df 93       	push	r29
    5028:	00 d0       	rcall	.+0      	; 0x502a <_ZN5Print13setWriteErrorEi+0x6>
    502a:	1f 92       	push	r1
    502c:	cd b7       	in	r28, 0x3d	; 61
    502e:	de b7       	in	r29, 0x3e	; 62
    5030:	9a 83       	std	Y+2, r25	; 0x02
    5032:	89 83       	std	Y+1, r24	; 0x01
    5034:	7c 83       	std	Y+4, r23	; 0x04
    5036:	6b 83       	std	Y+3, r22	; 0x03
    5038:	89 81       	ldd	r24, Y+1	; 0x01
    503a:	9a 81       	ldd	r25, Y+2	; 0x02
    503c:	2b 81       	ldd	r18, Y+3	; 0x03
    503e:	3c 81       	ldd	r19, Y+4	; 0x04
    5040:	fc 01       	movw	r30, r24
    5042:	33 83       	std	Z+3, r19	; 0x03
    5044:	22 83       	std	Z+2, r18	; 0x02
    5046:	00 00       	nop
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	0f 90       	pop	r0
    5050:	df 91       	pop	r29
    5052:	cf 91       	pop	r28
    5054:	08 95       	ret

00005056 <_ZN6StreamC1Ev>:
    5056:	cf 93       	push	r28
    5058:	df 93       	push	r29
    505a:	1f 92       	push	r1
    505c:	1f 92       	push	r1
    505e:	cd b7       	in	r28, 0x3d	; 61
    5060:	de b7       	in	r29, 0x3e	; 62
    5062:	9a 83       	std	Y+2, r25	; 0x02
    5064:	89 83       	std	Y+1, r24	; 0x01
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	9a 81       	ldd	r25, Y+2	; 0x02
    506a:	0e 94 cc 12 	call	0x2598	; 0x2598 <_ZN5PrintC1Ev>
    506e:	2f e0       	ldi	r18, 0x0F	; 15
    5070:	33 e0       	ldi	r19, 0x03	; 3
    5072:	89 81       	ldd	r24, Y+1	; 0x01
    5074:	9a 81       	ldd	r25, Y+2	; 0x02
    5076:	fc 01       	movw	r30, r24
    5078:	31 83       	std	Z+1, r19	; 0x01
    507a:	20 83       	st	Z, r18
    507c:	29 81       	ldd	r18, Y+1	; 0x01
    507e:	3a 81       	ldd	r19, Y+2	; 0x02
    5080:	88 ee       	ldi	r24, 0xE8	; 232
    5082:	93 e0       	ldi	r25, 0x03	; 3
    5084:	a0 e0       	ldi	r26, 0x00	; 0
    5086:	b0 e0       	ldi	r27, 0x00	; 0
    5088:	f9 01       	movw	r30, r18
    508a:	84 83       	std	Z+4, r24	; 0x04
    508c:	95 83       	std	Z+5, r25	; 0x05
    508e:	a6 83       	std	Z+6, r26	; 0x06
    5090:	b7 83       	std	Z+7, r27	; 0x07
    5092:	00 00       	nop
    5094:	0f 90       	pop	r0
    5096:	0f 90       	pop	r0
    5098:	df 91       	pop	r29
    509a:	cf 91       	pop	r28
    509c:	08 95       	ret

0000509e <_ZN7TwoWireC1Ev>:
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
    50a2:	1f 92       	push	r1
    50a4:	1f 92       	push	r1
    50a6:	cd b7       	in	r28, 0x3d	; 61
    50a8:	de b7       	in	r29, 0x3e	; 62
    50aa:	9a 83       	std	Y+2, r25	; 0x02
    50ac:	89 83       	std	Y+1, r24	; 0x01
    50ae:	89 81       	ldd	r24, Y+1	; 0x01
    50b0:	9a 81       	ldd	r25, Y+2	; 0x02
    50b2:	d1 df       	rcall	.-94     	; 0x5056 <_ZN6StreamC1Ev>
    50b4:	2d ef       	ldi	r18, 0xFD	; 253
    50b6:	32 e0       	ldi	r19, 0x02	; 2
    50b8:	89 81       	ldd	r24, Y+1	; 0x01
    50ba:	9a 81       	ldd	r25, Y+2	; 0x02
    50bc:	fc 01       	movw	r30, r24
    50be:	31 83       	std	Z+1, r19	; 0x01
    50c0:	20 83       	st	Z, r18
    50c2:	00 00       	nop
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	df 91       	pop	r29
    50ca:	cf 91       	pop	r28
    50cc:	08 95       	ret

000050ce <_ZN7TwoWire5beginEv>:
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	1f 92       	push	r1
    50d4:	1f 92       	push	r1
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
    50da:	9a 83       	std	Y+2, r25	; 0x02
    50dc:	89 83       	std	Y+1, r24	; 0x01
    50de:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    50e2:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    50e6:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    50ea:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    50ee:	e8 db       	rcall	.-2096   	; 0x48c0 <twi_init>
    50f0:	86 ee       	ldi	r24, 0xE6	; 230
    50f2:	9a e2       	ldi	r25, 0x2A	; 42
    50f4:	3d dc       	rcall	.-1926   	; 0x4970 <twi_attachSlaveTxEvent>
    50f6:	89 e9       	ldi	r24, 0x99	; 153
    50f8:	9a e2       	ldi	r25, 0x2A	; 42
    50fa:	35 dc       	rcall	.-1942   	; 0x4966 <twi_attachSlaveRxEvent>
    50fc:	00 00       	nop
    50fe:	0f 90       	pop	r0
    5100:	0f 90       	pop	r0
    5102:	df 91       	pop	r29
    5104:	cf 91       	pop	r28
    5106:	08 95       	ret

00005108 <_ZN7TwoWire11requestFromEhhmhh>:
    5108:	cf 92       	push	r12
    510a:	ef 92       	push	r14
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
    5118:	2b 97       	sbiw	r28, 0x0b	; 11
    511a:	0f b6       	in	r0, 0x3f	; 63
    511c:	f8 94       	cli
    511e:	de bf       	out	0x3e, r29	; 62
    5120:	0f be       	out	0x3f, r0	; 63
    5122:	cd bf       	out	0x3d, r28	; 61
    5124:	9b 83       	std	Y+3, r25	; 0x03
    5126:	8a 83       	std	Y+2, r24	; 0x02
    5128:	6c 83       	std	Y+4, r22	; 0x04
    512a:	4d 83       	std	Y+5, r20	; 0x05
    512c:	0e 83       	std	Y+6, r16	; 0x06
    512e:	1f 83       	std	Y+7, r17	; 0x07
    5130:	28 87       	std	Y+8, r18	; 0x08
    5132:	39 87       	std	Y+9, r19	; 0x09
    5134:	ea 86       	std	Y+10, r14	; 0x0a
    5136:	cb 86       	std	Y+11, r12	; 0x0b
    5138:	8a 85       	ldd	r24, Y+10	; 0x0a
    513a:	88 23       	and	r24, r24
    513c:	d9 f1       	breq	.+118    	; 0x51b4 <_ZN7TwoWire11requestFromEhhmhh+0xac>
    513e:	8a 81       	ldd	r24, Y+2	; 0x02
    5140:	9b 81       	ldd	r25, Y+3	; 0x03
    5142:	6c 81       	ldd	r22, Y+4	; 0x04
    5144:	98 d0       	rcall	.+304    	; 0x5276 <_ZN7TwoWire17beginTransmissionEh>
    5146:	8a 85       	ldd	r24, Y+10	; 0x0a
    5148:	84 30       	cpi	r24, 0x04	; 4
    514a:	10 f0       	brcs	.+4      	; 0x5150 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    514c:	83 e0       	ldi	r24, 0x03	; 3
    514e:	8a 87       	std	Y+10, r24	; 0x0a
    5150:	8a 85       	ldd	r24, Y+10	; 0x0a
    5152:	9f ef       	ldi	r25, 0xFF	; 255
    5154:	98 0f       	add	r25, r24
    5156:	9a 87       	std	Y+10, r25	; 0x0a
    5158:	91 e0       	ldi	r25, 0x01	; 1
    515a:	88 23       	and	r24, r24
    515c:	09 f4       	brne	.+2      	; 0x5160 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	99 23       	and	r25, r25
    5162:	21 f1       	breq	.+72     	; 0x51ac <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    5164:	8a 81       	ldd	r24, Y+2	; 0x02
    5166:	9b 81       	ldd	r25, Y+3	; 0x03
    5168:	fc 01       	movw	r30, r24
    516a:	80 81       	ld	r24, Z
    516c:	91 81       	ldd	r25, Z+1	; 0x01
    516e:	fc 01       	movw	r30, r24
    5170:	20 81       	ld	r18, Z
    5172:	31 81       	ldd	r19, Z+1	; 0x01
    5174:	8a 85       	ldd	r24, Y+10	; 0x0a
    5176:	88 2f       	mov	r24, r24
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	ac 01       	movw	r20, r24
    517c:	44 0f       	add	r20, r20
    517e:	55 1f       	adc	r21, r21
    5180:	44 0f       	add	r20, r20
    5182:	55 1f       	adc	r21, r21
    5184:	44 0f       	add	r20, r20
    5186:	55 1f       	adc	r21, r21
    5188:	8e 81       	ldd	r24, Y+6	; 0x06
    518a:	9f 81       	ldd	r25, Y+7	; 0x07
    518c:	a8 85       	ldd	r26, Y+8	; 0x08
    518e:	b9 85       	ldd	r27, Y+9	; 0x09
    5190:	04 c0       	rjmp	.+8      	; 0x519a <_ZN7TwoWire11requestFromEhhmhh+0x92>
    5192:	b6 95       	lsr	r27
    5194:	a7 95       	ror	r26
    5196:	97 95       	ror	r25
    5198:	87 95       	ror	r24
    519a:	4a 95       	dec	r20
    519c:	d2 f7       	brpl	.-12     	; 0x5192 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    519e:	48 2f       	mov	r20, r24
    51a0:	8a 81       	ldd	r24, Y+2	; 0x02
    51a2:	9b 81       	ldd	r25, Y+3	; 0x03
    51a4:	64 2f       	mov	r22, r20
    51a6:	f9 01       	movw	r30, r18
    51a8:	19 95       	eicall
    51aa:	d2 cf       	rjmp	.-92     	; 0x5150 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    51ac:	8a 81       	ldd	r24, Y+2	; 0x02
    51ae:	9b 81       	ldd	r25, Y+3	; 0x03
    51b0:	60 e0       	ldi	r22, 0x00	; 0
    51b2:	91 d0       	rcall	.+290    	; 0x52d6 <_ZN7TwoWire15endTransmissionEh>
    51b4:	8d 81       	ldd	r24, Y+5	; 0x05
    51b6:	81 32       	cpi	r24, 0x21	; 33
    51b8:	10 f0       	brcs	.+4      	; 0x51be <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    51ba:	80 e2       	ldi	r24, 0x20	; 32
    51bc:	8d 83       	std	Y+5, r24	; 0x05
    51be:	2b 85       	ldd	r18, Y+11	; 0x0b
    51c0:	4d 81       	ldd	r20, Y+5	; 0x05
    51c2:	60 eb       	ldi	r22, 0xB0	; 176
    51c4:	74 e0       	ldi	r23, 0x04	; 4
    51c6:	8c 81       	ldd	r24, Y+4	; 0x04
    51c8:	f2 db       	rcall	.-2076   	; 0x49ae <twi_readFrom>
    51ca:	89 83       	std	Y+1, r24	; 0x01
    51cc:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    51d0:	89 81       	ldd	r24, Y+1	; 0x01
    51d2:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	2b 96       	adiw	r28, 0x0b	; 11
    51da:	0f b6       	in	r0, 0x3f	; 63
    51dc:	f8 94       	cli
    51de:	de bf       	out	0x3e, r29	; 62
    51e0:	0f be       	out	0x3f, r0	; 63
    51e2:	cd bf       	out	0x3d, r28	; 61
    51e4:	df 91       	pop	r29
    51e6:	cf 91       	pop	r28
    51e8:	1f 91       	pop	r17
    51ea:	0f 91       	pop	r16
    51ec:	ef 90       	pop	r14
    51ee:	cf 90       	pop	r12
    51f0:	08 95       	ret

000051f2 <_ZN7TwoWire11requestFromEhhh>:
    51f2:	cf 92       	push	r12
    51f4:	ef 92       	push	r14
    51f6:	0f 93       	push	r16
    51f8:	1f 93       	push	r17
    51fa:	cf 93       	push	r28
    51fc:	df 93       	push	r29
    51fe:	00 d0       	rcall	.+0      	; 0x5200 <_ZN7TwoWire11requestFromEhhh+0xe>
    5200:	1f 92       	push	r1
    5202:	1f 92       	push	r1
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	9a 83       	std	Y+2, r25	; 0x02
    520a:	89 83       	std	Y+1, r24	; 0x01
    520c:	6b 83       	std	Y+3, r22	; 0x03
    520e:	4c 83       	std	Y+4, r20	; 0x04
    5210:	2d 83       	std	Y+5, r18	; 0x05
    5212:	89 81       	ldd	r24, Y+1	; 0x01
    5214:	9a 81       	ldd	r25, Y+2	; 0x02
    5216:	cd 80       	ldd	r12, Y+5	; 0x05
    5218:	e1 2c       	mov	r14, r1
    521a:	00 e0       	ldi	r16, 0x00	; 0
    521c:	10 e0       	ldi	r17, 0x00	; 0
    521e:	98 01       	movw	r18, r16
    5220:	4c 81       	ldd	r20, Y+4	; 0x04
    5222:	6b 81       	ldd	r22, Y+3	; 0x03
    5224:	71 df       	rcall	.-286    	; 0x5108 <_ZN7TwoWire11requestFromEhhmhh>
    5226:	0f 90       	pop	r0
    5228:	0f 90       	pop	r0
    522a:	0f 90       	pop	r0
    522c:	0f 90       	pop	r0
    522e:	0f 90       	pop	r0
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	1f 91       	pop	r17
    5236:	0f 91       	pop	r16
    5238:	ef 90       	pop	r14
    523a:	cf 90       	pop	r12
    523c:	08 95       	ret

0000523e <_ZN7TwoWire11requestFromEii>:
    523e:	cf 93       	push	r28
    5240:	df 93       	push	r29
    5242:	00 d0       	rcall	.+0      	; 0x5244 <_ZN7TwoWire11requestFromEii+0x6>
    5244:	00 d0       	rcall	.+0      	; 0x5246 <_ZN7TwoWire11requestFromEii+0x8>
    5246:	cd b7       	in	r28, 0x3d	; 61
    5248:	de b7       	in	r29, 0x3e	; 62
    524a:	9a 83       	std	Y+2, r25	; 0x02
    524c:	89 83       	std	Y+1, r24	; 0x01
    524e:	7c 83       	std	Y+4, r23	; 0x04
    5250:	6b 83       	std	Y+3, r22	; 0x03
    5252:	5e 83       	std	Y+6, r21	; 0x06
    5254:	4d 83       	std	Y+5, r20	; 0x05
    5256:	4d 81       	ldd	r20, Y+5	; 0x05
    5258:	3b 81       	ldd	r19, Y+3	; 0x03
    525a:	89 81       	ldd	r24, Y+1	; 0x01
    525c:	9a 81       	ldd	r25, Y+2	; 0x02
    525e:	21 e0       	ldi	r18, 0x01	; 1
    5260:	63 2f       	mov	r22, r19
    5262:	c7 df       	rcall	.-114    	; 0x51f2 <_ZN7TwoWire11requestFromEhhh>
    5264:	26 96       	adiw	r28, 0x06	; 6
    5266:	0f b6       	in	r0, 0x3f	; 63
    5268:	f8 94       	cli
    526a:	de bf       	out	0x3e, r29	; 62
    526c:	0f be       	out	0x3f, r0	; 63
    526e:	cd bf       	out	0x3d, r28	; 61
    5270:	df 91       	pop	r29
    5272:	cf 91       	pop	r28
    5274:	08 95       	ret

00005276 <_ZN7TwoWire17beginTransmissionEh>:
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	00 d0       	rcall	.+0      	; 0x527c <_ZN7TwoWire17beginTransmissionEh+0x6>
    527c:	cd b7       	in	r28, 0x3d	; 61
    527e:	de b7       	in	r29, 0x3e	; 62
    5280:	9a 83       	std	Y+2, r25	; 0x02
    5282:	89 83       	std	Y+1, r24	; 0x01
    5284:	6b 83       	std	Y+3, r22	; 0x03
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <_ZN7TwoWire9txAddressE>
    5292:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5296:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    529a:	00 00       	nop
    529c:	0f 90       	pop	r0
    529e:	0f 90       	pop	r0
    52a0:	0f 90       	pop	r0
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	08 95       	ret

000052a8 <_ZN7TwoWire17beginTransmissionEi>:
    52a8:	cf 93       	push	r28
    52aa:	df 93       	push	r29
    52ac:	00 d0       	rcall	.+0      	; 0x52ae <_ZN7TwoWire17beginTransmissionEi+0x6>
    52ae:	1f 92       	push	r1
    52b0:	cd b7       	in	r28, 0x3d	; 61
    52b2:	de b7       	in	r29, 0x3e	; 62
    52b4:	9a 83       	std	Y+2, r25	; 0x02
    52b6:	89 83       	std	Y+1, r24	; 0x01
    52b8:	7c 83       	std	Y+4, r23	; 0x04
    52ba:	6b 83       	std	Y+3, r22	; 0x03
    52bc:	2b 81       	ldd	r18, Y+3	; 0x03
    52be:	89 81       	ldd	r24, Y+1	; 0x01
    52c0:	9a 81       	ldd	r25, Y+2	; 0x02
    52c2:	62 2f       	mov	r22, r18
    52c4:	d8 df       	rcall	.-80     	; 0x5276 <_ZN7TwoWire17beginTransmissionEh>
    52c6:	00 00       	nop
    52c8:	0f 90       	pop	r0
    52ca:	0f 90       	pop	r0
    52cc:	0f 90       	pop	r0
    52ce:	0f 90       	pop	r0
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	08 95       	ret

000052d6 <_ZN7TwoWire15endTransmissionEh>:
    52d6:	0f 93       	push	r16
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	00 d0       	rcall	.+0      	; 0x52de <_ZN7TwoWire15endTransmissionEh+0x8>
    52de:	1f 92       	push	r1
    52e0:	cd b7       	in	r28, 0x3d	; 61
    52e2:	de b7       	in	r29, 0x3e	; 62
    52e4:	9b 83       	std	Y+3, r25	; 0x03
    52e6:	8a 83       	std	Y+2, r24	; 0x02
    52e8:	6c 83       	std	Y+4, r22	; 0x04
    52ea:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    52ee:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <_ZN7TwoWire9txAddressE>
    52f2:	0c 81       	ldd	r16, Y+4	; 0x04
    52f4:	21 e0       	ldi	r18, 0x01	; 1
    52f6:	49 2f       	mov	r20, r25
    52f8:	63 ed       	ldi	r22, 0xD3	; 211
    52fa:	74 e0       	ldi	r23, 0x04	; 4
    52fc:	3f dc       	rcall	.-1922   	; 0x4b7c <twi_writeTo>
    52fe:	89 83       	std	Y+1, r24	; 0x01
    5300:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5304:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    5308:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	0f 90       	pop	r0
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	0f 91       	pop	r16
    531c:	08 95       	ret

0000531e <_ZN7TwoWire15endTransmissionEv>:
    531e:	cf 93       	push	r28
    5320:	df 93       	push	r29
    5322:	1f 92       	push	r1
    5324:	1f 92       	push	r1
    5326:	cd b7       	in	r28, 0x3d	; 61
    5328:	de b7       	in	r29, 0x3e	; 62
    532a:	9a 83       	std	Y+2, r25	; 0x02
    532c:	89 83       	std	Y+1, r24	; 0x01
    532e:	89 81       	ldd	r24, Y+1	; 0x01
    5330:	9a 81       	ldd	r25, Y+2	; 0x02
    5332:	61 e0       	ldi	r22, 0x01	; 1
    5334:	d0 df       	rcall	.-96     	; 0x52d6 <_ZN7TwoWire15endTransmissionEh>
    5336:	0f 90       	pop	r0
    5338:	0f 90       	pop	r0
    533a:	df 91       	pop	r29
    533c:	cf 91       	pop	r28
    533e:	08 95       	ret

00005340 <_ZN7TwoWire5writeEh>:
    5340:	cf 93       	push	r28
    5342:	df 93       	push	r29
    5344:	00 d0       	rcall	.+0      	; 0x5346 <_ZN7TwoWire5writeEh+0x6>
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
    534a:	9a 83       	std	Y+2, r25	; 0x02
    534c:	89 83       	std	Y+1, r24	; 0x01
    534e:	6b 83       	std	Y+3, r22	; 0x03
    5350:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    5354:	88 23       	and	r24, r24
    5356:	f9 f0       	breq	.+62     	; 0x5396 <_ZN7TwoWire5writeEh+0x56>
    5358:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    535c:	80 32       	cpi	r24, 0x20	; 32
    535e:	40 f0       	brcs	.+16     	; 0x5370 <_ZN7TwoWire5writeEh+0x30>
    5360:	89 81       	ldd	r24, Y+1	; 0x01
    5362:	9a 81       	ldd	r25, Y+2	; 0x02
    5364:	61 e0       	ldi	r22, 0x01	; 1
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	5d de       	rcall	.-838    	; 0x5024 <_ZN5Print13setWriteErrorEi>
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	19 c0       	rjmp	.+50     	; 0x53a2 <_ZN7TwoWire5writeEh+0x62>
    5370:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5374:	88 2f       	mov	r24, r24
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	2b 81       	ldd	r18, Y+3	; 0x03
    537a:	8d 52       	subi	r24, 0x2D	; 45
    537c:	9b 4f       	sbci	r25, 0xFB	; 251
    537e:	fc 01       	movw	r30, r24
    5380:	20 83       	st	Z, r18
    5382:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5386:	8f 5f       	subi	r24, 0xFF	; 255
    5388:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    538c:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    5390:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    5394:	04 c0       	rjmp	.+8      	; 0x539e <_ZN7TwoWire5writeEh+0x5e>
    5396:	ce 01       	movw	r24, r28
    5398:	03 96       	adiw	r24, 0x03	; 3
    539a:	61 e0       	ldi	r22, 0x01	; 1
    539c:	bc da       	rcall	.-2696   	; 0x4916 <twi_transmit>
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	08 95       	ret

000053ae <_ZN7TwoWire5writeEPKhj>:
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	cd b7       	in	r28, 0x3d	; 61
    53b4:	de b7       	in	r29, 0x3e	; 62
    53b6:	28 97       	sbiw	r28, 0x08	; 8
    53b8:	0f b6       	in	r0, 0x3f	; 63
    53ba:	f8 94       	cli
    53bc:	de bf       	out	0x3e, r29	; 62
    53be:	0f be       	out	0x3f, r0	; 63
    53c0:	cd bf       	out	0x3d, r28	; 61
    53c2:	9c 83       	std	Y+4, r25	; 0x04
    53c4:	8b 83       	std	Y+3, r24	; 0x03
    53c6:	7e 83       	std	Y+6, r23	; 0x06
    53c8:	6d 83       	std	Y+5, r22	; 0x05
    53ca:	58 87       	std	Y+8, r21	; 0x08
    53cc:	4f 83       	std	Y+7, r20	; 0x07
    53ce:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZN7TwoWire12transmittingE>
    53d2:	88 23       	and	r24, r24
    53d4:	21 f1       	breq	.+72     	; 0x541e <_ZN7TwoWire5writeEPKhj+0x70>
    53d6:	1a 82       	std	Y+2, r1	; 0x02
    53d8:	19 82       	std	Y+1, r1	; 0x01
    53da:	29 81       	ldd	r18, Y+1	; 0x01
    53dc:	3a 81       	ldd	r19, Y+2	; 0x02
    53de:	8f 81       	ldd	r24, Y+7	; 0x07
    53e0:	98 85       	ldd	r25, Y+8	; 0x08
    53e2:	28 17       	cp	r18, r24
    53e4:	39 07       	cpc	r19, r25
    53e6:	00 f5       	brcc	.+64     	; 0x5428 <_ZN7TwoWire5writeEPKhj+0x7a>
    53e8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ea:	9c 81       	ldd	r25, Y+4	; 0x04
    53ec:	fc 01       	movw	r30, r24
    53ee:	80 81       	ld	r24, Z
    53f0:	91 81       	ldd	r25, Z+1	; 0x01
    53f2:	fc 01       	movw	r30, r24
    53f4:	20 81       	ld	r18, Z
    53f6:	31 81       	ldd	r19, Z+1	; 0x01
    53f8:	4d 81       	ldd	r20, Y+5	; 0x05
    53fa:	5e 81       	ldd	r21, Y+6	; 0x06
    53fc:	89 81       	ldd	r24, Y+1	; 0x01
    53fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5400:	84 0f       	add	r24, r20
    5402:	95 1f       	adc	r25, r21
    5404:	fc 01       	movw	r30, r24
    5406:	40 81       	ld	r20, Z
    5408:	8b 81       	ldd	r24, Y+3	; 0x03
    540a:	9c 81       	ldd	r25, Y+4	; 0x04
    540c:	64 2f       	mov	r22, r20
    540e:	f9 01       	movw	r30, r18
    5410:	19 95       	eicall
    5412:	89 81       	ldd	r24, Y+1	; 0x01
    5414:	9a 81       	ldd	r25, Y+2	; 0x02
    5416:	01 96       	adiw	r24, 0x01	; 1
    5418:	9a 83       	std	Y+2, r25	; 0x02
    541a:	89 83       	std	Y+1, r24	; 0x01
    541c:	de cf       	rjmp	.-68     	; 0x53da <_ZN7TwoWire5writeEPKhj+0x2c>
    541e:	2f 81       	ldd	r18, Y+7	; 0x07
    5420:	8d 81       	ldd	r24, Y+5	; 0x05
    5422:	9e 81       	ldd	r25, Y+6	; 0x06
    5424:	62 2f       	mov	r22, r18
    5426:	77 da       	rcall	.-2834   	; 0x4916 <twi_transmit>
    5428:	8f 81       	ldd	r24, Y+7	; 0x07
    542a:	98 85       	ldd	r25, Y+8	; 0x08
    542c:	28 96       	adiw	r28, 0x08	; 8
    542e:	0f b6       	in	r0, 0x3f	; 63
    5430:	f8 94       	cli
    5432:	de bf       	out	0x3e, r29	; 62
    5434:	0f be       	out	0x3f, r0	; 63
    5436:	cd bf       	out	0x3d, r28	; 61
    5438:	df 91       	pop	r29
    543a:	cf 91       	pop	r28
    543c:	08 95       	ret

0000543e <_ZN7TwoWire9availableEv>:
    543e:	cf 93       	push	r28
    5440:	df 93       	push	r29
    5442:	1f 92       	push	r1
    5444:	1f 92       	push	r1
    5446:	cd b7       	in	r28, 0x3d	; 61
    5448:	de b7       	in	r29, 0x3e	; 62
    544a:	9a 83       	std	Y+2, r25	; 0x02
    544c:	89 83       	std	Y+1, r24	; 0x01
    544e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    5452:	28 2f       	mov	r18, r24
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    545a:	88 2f       	mov	r24, r24
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	a9 01       	movw	r20, r18
    5460:	48 1b       	sub	r20, r24
    5462:	59 0b       	sbc	r21, r25
    5464:	ca 01       	movw	r24, r20
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    546a:	df 91       	pop	r29
    546c:	cf 91       	pop	r28
    546e:	08 95       	ret

00005470 <_ZN7TwoWire4readEv>:
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	00 d0       	rcall	.+0      	; 0x5476 <_ZN7TwoWire4readEv+0x6>
    5476:	1f 92       	push	r1
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    547c:	9c 83       	std	Y+4, r25	; 0x04
    547e:	8b 83       	std	Y+3, r24	; 0x03
    5480:	8f ef       	ldi	r24, 0xFF	; 255
    5482:	9f ef       	ldi	r25, 0xFF	; 255
    5484:	9a 83       	std	Y+2, r25	; 0x02
    5486:	89 83       	std	Y+1, r24	; 0x01
    5488:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    548c:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    5490:	98 17       	cp	r25, r24
    5492:	88 f4       	brcc	.+34     	; 0x54b6 <_ZN7TwoWire4readEv+0x46>
    5494:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5498:	88 2f       	mov	r24, r24
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	80 55       	subi	r24, 0x50	; 80
    549e:	9b 4f       	sbci	r25, 0xFB	; 251
    54a0:	fc 01       	movw	r30, r24
    54a2:	80 81       	ld	r24, Z
    54a4:	88 2f       	mov	r24, r24
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	9a 83       	std	Y+2, r25	; 0x02
    54aa:	89 83       	std	Y+1, r24	; 0x01
    54ac:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    54b0:	8f 5f       	subi	r24, 0xFF	; 255
    54b2:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ba:	0f 90       	pop	r0
    54bc:	0f 90       	pop	r0
    54be:	0f 90       	pop	r0
    54c0:	0f 90       	pop	r0
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	08 95       	ret

000054c8 <_ZN7TwoWire4peekEv>:
    54c8:	cf 93       	push	r28
    54ca:	df 93       	push	r29
    54cc:	00 d0       	rcall	.+0      	; 0x54ce <_ZN7TwoWire4peekEv+0x6>
    54ce:	1f 92       	push	r1
    54d0:	cd b7       	in	r28, 0x3d	; 61
    54d2:	de b7       	in	r29, 0x3e	; 62
    54d4:	9c 83       	std	Y+4, r25	; 0x04
    54d6:	8b 83       	std	Y+3, r24	; 0x03
    54d8:	8f ef       	ldi	r24, 0xFF	; 255
    54da:	9f ef       	ldi	r25, 0xFF	; 255
    54dc:	9a 83       	std	Y+2, r25	; 0x02
    54de:	89 83       	std	Y+1, r24	; 0x01
    54e0:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    54e4:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    54e8:	98 17       	cp	r25, r24
    54ea:	60 f4       	brcc	.+24     	; 0x5504 <_ZN7TwoWire4peekEv+0x3c>
    54ec:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    54f0:	88 2f       	mov	r24, r24
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	80 55       	subi	r24, 0x50	; 80
    54f6:	9b 4f       	sbci	r25, 0xFB	; 251
    54f8:	fc 01       	movw	r30, r24
    54fa:	80 81       	ld	r24, Z
    54fc:	88 2f       	mov	r24, r24
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9a 83       	std	Y+2, r25	; 0x02
    5502:	89 83       	std	Y+1, r24	; 0x01
    5504:	89 81       	ldd	r24, Y+1	; 0x01
    5506:	9a 81       	ldd	r25, Y+2	; 0x02
    5508:	0f 90       	pop	r0
    550a:	0f 90       	pop	r0
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	08 95       	ret

00005516 <_ZN7TwoWire5flushEv>:
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	1f 92       	push	r1
    551c:	1f 92       	push	r1
    551e:	cd b7       	in	r28, 0x3d	; 61
    5520:	de b7       	in	r29, 0x3e	; 62
    5522:	9a 83       	std	Y+2, r25	; 0x02
    5524:	89 83       	std	Y+1, r24	; 0x01
    5526:	00 00       	nop
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	df 91       	pop	r29
    552e:	cf 91       	pop	r28
    5530:	08 95       	ret

00005532 <_ZN7TwoWire16onReceiveServiceEPhi>:
    5532:	cf 93       	push	r28
    5534:	df 93       	push	r29
    5536:	00 d0       	rcall	.+0      	; 0x5538 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    5538:	1f 92       	push	r1
    553a:	1f 92       	push	r1
    553c:	cd b7       	in	r28, 0x3d	; 61
    553e:	de b7       	in	r29, 0x3e	; 62
    5540:	9b 83       	std	Y+3, r25	; 0x03
    5542:	8a 83       	std	Y+2, r24	; 0x02
    5544:	7d 83       	std	Y+5, r23	; 0x05
    5546:	6c 83       	std	Y+4, r22	; 0x04
    5548:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN7TwoWire14user_onReceiveE>
    554c:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <_ZN7TwoWire14user_onReceiveE+0x1>
    5550:	89 2b       	or	r24, r25
    5552:	89 f1       	breq	.+98     	; 0x55b6 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    5554:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    5558:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    555c:	98 17       	cp	r25, r24
    555e:	68 f1       	brcs	.+90     	; 0x55ba <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    5560:	19 82       	std	Y+1, r1	; 0x01
    5562:	89 81       	ldd	r24, Y+1	; 0x01
    5564:	28 2f       	mov	r18, r24
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	8c 81       	ldd	r24, Y+4	; 0x04
    556a:	9d 81       	ldd	r25, Y+5	; 0x05
    556c:	28 17       	cp	r18, r24
    556e:	39 07       	cpc	r19, r25
    5570:	a4 f4       	brge	.+40     	; 0x559a <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    5572:	89 81       	ldd	r24, Y+1	; 0x01
    5574:	88 2f       	mov	r24, r24
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	29 81       	ldd	r18, Y+1	; 0x01
    557a:	22 2f       	mov	r18, r18
    557c:	30 e0       	ldi	r19, 0x00	; 0
    557e:	4a 81       	ldd	r20, Y+2	; 0x02
    5580:	5b 81       	ldd	r21, Y+3	; 0x03
    5582:	24 0f       	add	r18, r20
    5584:	35 1f       	adc	r19, r21
    5586:	f9 01       	movw	r30, r18
    5588:	20 81       	ld	r18, Z
    558a:	80 55       	subi	r24, 0x50	; 80
    558c:	9b 4f       	sbci	r25, 0xFB	; 251
    558e:	fc 01       	movw	r30, r24
    5590:	20 83       	st	Z, r18
    5592:	89 81       	ldd	r24, Y+1	; 0x01
    5594:	8f 5f       	subi	r24, 0xFF	; 255
    5596:	89 83       	std	Y+1, r24	; 0x01
    5598:	e4 cf       	rjmp	.-56     	; 0x5562 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    559a:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire13rxBufferIndexE>
    559e:	8c 81       	ldd	r24, Y+4	; 0x04
    55a0:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZN7TwoWire14rxBufferLengthE>
    55a4:	20 91 f8 04 	lds	r18, 0x04F8	; 0x8004f8 <_ZN7TwoWire14user_onReceiveE>
    55a8:	30 91 f9 04 	lds	r19, 0x04F9	; 0x8004f9 <_ZN7TwoWire14user_onReceiveE+0x1>
    55ac:	8c 81       	ldd	r24, Y+4	; 0x04
    55ae:	9d 81       	ldd	r25, Y+5	; 0x05
    55b0:	f9 01       	movw	r30, r18
    55b2:	19 95       	eicall
    55b4:	03 c0       	rjmp	.+6      	; 0x55bc <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    55b6:	00 00       	nop
    55b8:	01 c0       	rjmp	.+2      	; 0x55bc <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    55ba:	00 00       	nop
    55bc:	0f 90       	pop	r0
    55be:	0f 90       	pop	r0
    55c0:	0f 90       	pop	r0
    55c2:	0f 90       	pop	r0
    55c4:	0f 90       	pop	r0
    55c6:	df 91       	pop	r29
    55c8:	cf 91       	pop	r28
    55ca:	08 95       	ret

000055cc <_ZN7TwoWire16onRequestServiceEv>:
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	cd b7       	in	r28, 0x3d	; 61
    55d2:	de b7       	in	r29, 0x3e	; 62
    55d4:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14user_onRequestE>
    55d8:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <_ZN7TwoWire14user_onRequestE+0x1>
    55dc:	89 2b       	or	r24, r25
    55de:	59 f0       	breq	.+22     	; 0x55f6 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    55e0:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <_ZN7TwoWire13txBufferIndexE>
    55e4:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <_ZN7TwoWire14txBufferLengthE>
    55e8:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZN7TwoWire14user_onRequestE>
    55ec:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <_ZN7TwoWire14user_onRequestE+0x1>
    55f0:	fc 01       	movw	r30, r24
    55f2:	19 95       	eicall
    55f4:	01 c0       	rjmp	.+2      	; 0x55f8 <_ZN7TwoWire16onRequestServiceEv+0x2c>
    55f6:	00 00       	nop
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	08 95       	ret

000055fe <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	00 d0       	rcall	.+0      	; 0x5604 <_Z41__static_initialization_and_destruction_0ii+0x6>
    5604:	1f 92       	push	r1
    5606:	cd b7       	in	r28, 0x3d	; 61
    5608:	de b7       	in	r29, 0x3e	; 62
    560a:	9a 83       	std	Y+2, r25	; 0x02
    560c:	89 83       	std	Y+1, r24	; 0x01
    560e:	7c 83       	std	Y+4, r23	; 0x04
    5610:	6b 83       	std	Y+3, r22	; 0x03
    5612:	89 81       	ldd	r24, Y+1	; 0x01
    5614:	9a 81       	ldd	r25, Y+2	; 0x02
    5616:	01 97       	sbiw	r24, 0x01	; 1
    5618:	39 f4       	brne	.+14     	; 0x5628 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    561a:	8b 81       	ldd	r24, Y+3	; 0x03
    561c:	9c 81       	ldd	r25, Y+4	; 0x04
    561e:	01 96       	adiw	r24, 0x01	; 1
    5620:	19 f4       	brne	.+6      	; 0x5628 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    5622:	8a ef       	ldi	r24, 0xFA	; 250
    5624:	94 e0       	ldi	r25, 0x04	; 4
    5626:	3b dd       	rcall	.-1418   	; 0x509e <_ZN7TwoWireC1Ev>
    5628:	00 00       	nop
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
    562e:	0f 90       	pop	r0
    5630:	0f 90       	pop	r0
    5632:	df 91       	pop	r29
    5634:	cf 91       	pop	r28
    5636:	08 95       	ret

00005638 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    5638:	cf 93       	push	r28
    563a:	df 93       	push	r29
    563c:	cd b7       	in	r28, 0x3d	; 61
    563e:	de b7       	in	r29, 0x3e	; 62
    5640:	6f ef       	ldi	r22, 0xFF	; 255
    5642:	7f ef       	ldi	r23, 0xFF	; 255
    5644:	81 e0       	ldi	r24, 0x01	; 1
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	da df       	rcall	.-76     	; 0x55fe <_Z41__static_initialization_and_destruction_0ii>
    564a:	df 91       	pop	r29
    564c:	cf 91       	pop	r28
    564e:	08 95       	ret

00005650 <__subsf3>:
    5650:	50 58       	subi	r21, 0x80	; 128

00005652 <__addsf3>:
    5652:	bb 27       	eor	r27, r27
    5654:	aa 27       	eor	r26, r26
    5656:	0e d0       	rcall	.+28     	; 0x5674 <__addsf3x>
    5658:	09 c1       	rjmp	.+530    	; 0x586c <__fp_round>
    565a:	fa d0       	rcall	.+500    	; 0x5850 <__fp_pscA>
    565c:	30 f0       	brcs	.+12     	; 0x566a <__addsf3+0x18>
    565e:	ff d0       	rcall	.+510    	; 0x585e <__fp_pscB>
    5660:	20 f0       	brcs	.+8      	; 0x566a <__addsf3+0x18>
    5662:	31 f4       	brne	.+12     	; 0x5670 <__addsf3+0x1e>
    5664:	9f 3f       	cpi	r25, 0xFF	; 255
    5666:	11 f4       	brne	.+4      	; 0x566c <__addsf3+0x1a>
    5668:	1e f4       	brtc	.+6      	; 0x5670 <__addsf3+0x1e>
    566a:	ef c0       	rjmp	.+478    	; 0x584a <__fp_nan>
    566c:	0e f4       	brtc	.+2      	; 0x5670 <__addsf3+0x1e>
    566e:	e0 95       	com	r30
    5670:	e7 fb       	bst	r30, 7
    5672:	e5 c0       	rjmp	.+458    	; 0x583e <__fp_inf>

00005674 <__addsf3x>:
    5674:	e9 2f       	mov	r30, r25
    5676:	0b d1       	rcall	.+534    	; 0x588e <__fp_split3>
    5678:	80 f3       	brcs	.-32     	; 0x565a <__addsf3+0x8>
    567a:	ba 17       	cp	r27, r26
    567c:	62 07       	cpc	r22, r18
    567e:	73 07       	cpc	r23, r19
    5680:	84 07       	cpc	r24, r20
    5682:	95 07       	cpc	r25, r21
    5684:	18 f0       	brcs	.+6      	; 0x568c <__addsf3x+0x18>
    5686:	71 f4       	brne	.+28     	; 0x56a4 <__addsf3x+0x30>
    5688:	9e f5       	brtc	.+102    	; 0x56f0 <__addsf3x+0x7c>
    568a:	23 c1       	rjmp	.+582    	; 0x58d2 <__fp_zero>
    568c:	0e f4       	brtc	.+2      	; 0x5690 <__addsf3x+0x1c>
    568e:	e0 95       	com	r30
    5690:	0b 2e       	mov	r0, r27
    5692:	ba 2f       	mov	r27, r26
    5694:	a0 2d       	mov	r26, r0
    5696:	0b 01       	movw	r0, r22
    5698:	b9 01       	movw	r22, r18
    569a:	90 01       	movw	r18, r0
    569c:	0c 01       	movw	r0, r24
    569e:	ca 01       	movw	r24, r20
    56a0:	a0 01       	movw	r20, r0
    56a2:	11 24       	eor	r1, r1
    56a4:	ff 27       	eor	r31, r31
    56a6:	59 1b       	sub	r21, r25
    56a8:	99 f0       	breq	.+38     	; 0x56d0 <__addsf3x+0x5c>
    56aa:	59 3f       	cpi	r21, 0xF9	; 249
    56ac:	50 f4       	brcc	.+20     	; 0x56c2 <__addsf3x+0x4e>
    56ae:	50 3e       	cpi	r21, 0xE0	; 224
    56b0:	68 f1       	brcs	.+90     	; 0x570c <__addsf3x+0x98>
    56b2:	1a 16       	cp	r1, r26
    56b4:	f0 40       	sbci	r31, 0x00	; 0
    56b6:	a2 2f       	mov	r26, r18
    56b8:	23 2f       	mov	r18, r19
    56ba:	34 2f       	mov	r19, r20
    56bc:	44 27       	eor	r20, r20
    56be:	58 5f       	subi	r21, 0xF8	; 248
    56c0:	f3 cf       	rjmp	.-26     	; 0x56a8 <__addsf3x+0x34>
    56c2:	46 95       	lsr	r20
    56c4:	37 95       	ror	r19
    56c6:	27 95       	ror	r18
    56c8:	a7 95       	ror	r26
    56ca:	f0 40       	sbci	r31, 0x00	; 0
    56cc:	53 95       	inc	r21
    56ce:	c9 f7       	brne	.-14     	; 0x56c2 <__addsf3x+0x4e>
    56d0:	7e f4       	brtc	.+30     	; 0x56f0 <__addsf3x+0x7c>
    56d2:	1f 16       	cp	r1, r31
    56d4:	ba 0b       	sbc	r27, r26
    56d6:	62 0b       	sbc	r22, r18
    56d8:	73 0b       	sbc	r23, r19
    56da:	84 0b       	sbc	r24, r20
    56dc:	ba f0       	brmi	.+46     	; 0x570c <__addsf3x+0x98>
    56de:	91 50       	subi	r25, 0x01	; 1
    56e0:	a1 f0       	breq	.+40     	; 0x570a <__addsf3x+0x96>
    56e2:	ff 0f       	add	r31, r31
    56e4:	bb 1f       	adc	r27, r27
    56e6:	66 1f       	adc	r22, r22
    56e8:	77 1f       	adc	r23, r23
    56ea:	88 1f       	adc	r24, r24
    56ec:	c2 f7       	brpl	.-16     	; 0x56de <__addsf3x+0x6a>
    56ee:	0e c0       	rjmp	.+28     	; 0x570c <__addsf3x+0x98>
    56f0:	ba 0f       	add	r27, r26
    56f2:	62 1f       	adc	r22, r18
    56f4:	73 1f       	adc	r23, r19
    56f6:	84 1f       	adc	r24, r20
    56f8:	48 f4       	brcc	.+18     	; 0x570c <__addsf3x+0x98>
    56fa:	87 95       	ror	r24
    56fc:	77 95       	ror	r23
    56fe:	67 95       	ror	r22
    5700:	b7 95       	ror	r27
    5702:	f7 95       	ror	r31
    5704:	9e 3f       	cpi	r25, 0xFE	; 254
    5706:	08 f0       	brcs	.+2      	; 0x570a <__addsf3x+0x96>
    5708:	b3 cf       	rjmp	.-154    	; 0x5670 <__addsf3+0x1e>
    570a:	93 95       	inc	r25
    570c:	88 0f       	add	r24, r24
    570e:	08 f0       	brcs	.+2      	; 0x5712 <__addsf3x+0x9e>
    5710:	99 27       	eor	r25, r25
    5712:	ee 0f       	add	r30, r30
    5714:	97 95       	ror	r25
    5716:	87 95       	ror	r24
    5718:	08 95       	ret

0000571a <__fixsfsi>:
    571a:	04 d0       	rcall	.+8      	; 0x5724 <__fixunssfsi>
    571c:	68 94       	set
    571e:	b1 11       	cpse	r27, r1
    5720:	d9 c0       	rjmp	.+434    	; 0x58d4 <__fp_szero>
    5722:	08 95       	ret

00005724 <__fixunssfsi>:
    5724:	bc d0       	rcall	.+376    	; 0x589e <__fp_splitA>
    5726:	88 f0       	brcs	.+34     	; 0x574a <__fixunssfsi+0x26>
    5728:	9f 57       	subi	r25, 0x7F	; 127
    572a:	90 f0       	brcs	.+36     	; 0x5750 <__fixunssfsi+0x2c>
    572c:	b9 2f       	mov	r27, r25
    572e:	99 27       	eor	r25, r25
    5730:	b7 51       	subi	r27, 0x17	; 23
    5732:	a0 f0       	brcs	.+40     	; 0x575c <__fixunssfsi+0x38>
    5734:	d1 f0       	breq	.+52     	; 0x576a <__fixunssfsi+0x46>
    5736:	66 0f       	add	r22, r22
    5738:	77 1f       	adc	r23, r23
    573a:	88 1f       	adc	r24, r24
    573c:	99 1f       	adc	r25, r25
    573e:	1a f0       	brmi	.+6      	; 0x5746 <__fixunssfsi+0x22>
    5740:	ba 95       	dec	r27
    5742:	c9 f7       	brne	.-14     	; 0x5736 <__fixunssfsi+0x12>
    5744:	12 c0       	rjmp	.+36     	; 0x576a <__fixunssfsi+0x46>
    5746:	b1 30       	cpi	r27, 0x01	; 1
    5748:	81 f0       	breq	.+32     	; 0x576a <__fixunssfsi+0x46>
    574a:	c3 d0       	rcall	.+390    	; 0x58d2 <__fp_zero>
    574c:	b1 e0       	ldi	r27, 0x01	; 1
    574e:	08 95       	ret
    5750:	c0 c0       	rjmp	.+384    	; 0x58d2 <__fp_zero>
    5752:	67 2f       	mov	r22, r23
    5754:	78 2f       	mov	r23, r24
    5756:	88 27       	eor	r24, r24
    5758:	b8 5f       	subi	r27, 0xF8	; 248
    575a:	39 f0       	breq	.+14     	; 0x576a <__fixunssfsi+0x46>
    575c:	b9 3f       	cpi	r27, 0xF9	; 249
    575e:	cc f3       	brlt	.-14     	; 0x5752 <__fixunssfsi+0x2e>
    5760:	86 95       	lsr	r24
    5762:	77 95       	ror	r23
    5764:	67 95       	ror	r22
    5766:	b3 95       	inc	r27
    5768:	d9 f7       	brne	.-10     	; 0x5760 <__fixunssfsi+0x3c>
    576a:	3e f4       	brtc	.+14     	; 0x577a <__fixunssfsi+0x56>
    576c:	90 95       	com	r25
    576e:	80 95       	com	r24
    5770:	70 95       	com	r23
    5772:	61 95       	neg	r22
    5774:	7f 4f       	sbci	r23, 0xFF	; 255
    5776:	8f 4f       	sbci	r24, 0xFF	; 255
    5778:	9f 4f       	sbci	r25, 0xFF	; 255
    577a:	08 95       	ret

0000577c <__floatunsisf>:
    577c:	e8 94       	clt
    577e:	09 c0       	rjmp	.+18     	; 0x5792 <__floatsisf+0x12>

00005780 <__floatsisf>:
    5780:	97 fb       	bst	r25, 7
    5782:	3e f4       	brtc	.+14     	; 0x5792 <__floatsisf+0x12>
    5784:	90 95       	com	r25
    5786:	80 95       	com	r24
    5788:	70 95       	com	r23
    578a:	61 95       	neg	r22
    578c:	7f 4f       	sbci	r23, 0xFF	; 255
    578e:	8f 4f       	sbci	r24, 0xFF	; 255
    5790:	9f 4f       	sbci	r25, 0xFF	; 255
    5792:	99 23       	and	r25, r25
    5794:	a9 f0       	breq	.+42     	; 0x57c0 <__floatsisf+0x40>
    5796:	f9 2f       	mov	r31, r25
    5798:	96 e9       	ldi	r25, 0x96	; 150
    579a:	bb 27       	eor	r27, r27
    579c:	93 95       	inc	r25
    579e:	f6 95       	lsr	r31
    57a0:	87 95       	ror	r24
    57a2:	77 95       	ror	r23
    57a4:	67 95       	ror	r22
    57a6:	b7 95       	ror	r27
    57a8:	f1 11       	cpse	r31, r1
    57aa:	f8 cf       	rjmp	.-16     	; 0x579c <__floatsisf+0x1c>
    57ac:	fa f4       	brpl	.+62     	; 0x57ec <__floatsisf+0x6c>
    57ae:	bb 0f       	add	r27, r27
    57b0:	11 f4       	brne	.+4      	; 0x57b6 <__floatsisf+0x36>
    57b2:	60 ff       	sbrs	r22, 0
    57b4:	1b c0       	rjmp	.+54     	; 0x57ec <__floatsisf+0x6c>
    57b6:	6f 5f       	subi	r22, 0xFF	; 255
    57b8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ba:	8f 4f       	sbci	r24, 0xFF	; 255
    57bc:	9f 4f       	sbci	r25, 0xFF	; 255
    57be:	16 c0       	rjmp	.+44     	; 0x57ec <__floatsisf+0x6c>
    57c0:	88 23       	and	r24, r24
    57c2:	11 f0       	breq	.+4      	; 0x57c8 <__floatsisf+0x48>
    57c4:	96 e9       	ldi	r25, 0x96	; 150
    57c6:	11 c0       	rjmp	.+34     	; 0x57ea <__floatsisf+0x6a>
    57c8:	77 23       	and	r23, r23
    57ca:	21 f0       	breq	.+8      	; 0x57d4 <__floatsisf+0x54>
    57cc:	9e e8       	ldi	r25, 0x8E	; 142
    57ce:	87 2f       	mov	r24, r23
    57d0:	76 2f       	mov	r23, r22
    57d2:	05 c0       	rjmp	.+10     	; 0x57de <__floatsisf+0x5e>
    57d4:	66 23       	and	r22, r22
    57d6:	71 f0       	breq	.+28     	; 0x57f4 <__floatsisf+0x74>
    57d8:	96 e8       	ldi	r25, 0x86	; 134
    57da:	86 2f       	mov	r24, r22
    57dc:	70 e0       	ldi	r23, 0x00	; 0
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	2a f0       	brmi	.+10     	; 0x57ec <__floatsisf+0x6c>
    57e2:	9a 95       	dec	r25
    57e4:	66 0f       	add	r22, r22
    57e6:	77 1f       	adc	r23, r23
    57e8:	88 1f       	adc	r24, r24
    57ea:	da f7       	brpl	.-10     	; 0x57e2 <__floatsisf+0x62>
    57ec:	88 0f       	add	r24, r24
    57ee:	96 95       	lsr	r25
    57f0:	87 95       	ror	r24
    57f2:	97 f9       	bld	r25, 7
    57f4:	08 95       	ret

000057f6 <__fp_cmp>:
    57f6:	99 0f       	add	r25, r25
    57f8:	00 08       	sbc	r0, r0
    57fa:	55 0f       	add	r21, r21
    57fc:	aa 0b       	sbc	r26, r26
    57fe:	e0 e8       	ldi	r30, 0x80	; 128
    5800:	fe ef       	ldi	r31, 0xFE	; 254
    5802:	16 16       	cp	r1, r22
    5804:	17 06       	cpc	r1, r23
    5806:	e8 07       	cpc	r30, r24
    5808:	f9 07       	cpc	r31, r25
    580a:	c0 f0       	brcs	.+48     	; 0x583c <__fp_cmp+0x46>
    580c:	12 16       	cp	r1, r18
    580e:	13 06       	cpc	r1, r19
    5810:	e4 07       	cpc	r30, r20
    5812:	f5 07       	cpc	r31, r21
    5814:	98 f0       	brcs	.+38     	; 0x583c <__fp_cmp+0x46>
    5816:	62 1b       	sub	r22, r18
    5818:	73 0b       	sbc	r23, r19
    581a:	84 0b       	sbc	r24, r20
    581c:	95 0b       	sbc	r25, r21
    581e:	39 f4       	brne	.+14     	; 0x582e <__fp_cmp+0x38>
    5820:	0a 26       	eor	r0, r26
    5822:	61 f0       	breq	.+24     	; 0x583c <__fp_cmp+0x46>
    5824:	23 2b       	or	r18, r19
    5826:	24 2b       	or	r18, r20
    5828:	25 2b       	or	r18, r21
    582a:	21 f4       	brne	.+8      	; 0x5834 <__fp_cmp+0x3e>
    582c:	08 95       	ret
    582e:	0a 26       	eor	r0, r26
    5830:	09 f4       	brne	.+2      	; 0x5834 <__fp_cmp+0x3e>
    5832:	a1 40       	sbci	r26, 0x01	; 1
    5834:	a6 95       	lsr	r26
    5836:	8f ef       	ldi	r24, 0xFF	; 255
    5838:	81 1d       	adc	r24, r1
    583a:	81 1d       	adc	r24, r1
    583c:	08 95       	ret

0000583e <__fp_inf>:
    583e:	97 f9       	bld	r25, 7
    5840:	9f 67       	ori	r25, 0x7F	; 127
    5842:	80 e8       	ldi	r24, 0x80	; 128
    5844:	70 e0       	ldi	r23, 0x00	; 0
    5846:	60 e0       	ldi	r22, 0x00	; 0
    5848:	08 95       	ret

0000584a <__fp_nan>:
    584a:	9f ef       	ldi	r25, 0xFF	; 255
    584c:	80 ec       	ldi	r24, 0xC0	; 192
    584e:	08 95       	ret

00005850 <__fp_pscA>:
    5850:	00 24       	eor	r0, r0
    5852:	0a 94       	dec	r0
    5854:	16 16       	cp	r1, r22
    5856:	17 06       	cpc	r1, r23
    5858:	18 06       	cpc	r1, r24
    585a:	09 06       	cpc	r0, r25
    585c:	08 95       	ret

0000585e <__fp_pscB>:
    585e:	00 24       	eor	r0, r0
    5860:	0a 94       	dec	r0
    5862:	12 16       	cp	r1, r18
    5864:	13 06       	cpc	r1, r19
    5866:	14 06       	cpc	r1, r20
    5868:	05 06       	cpc	r0, r21
    586a:	08 95       	ret

0000586c <__fp_round>:
    586c:	09 2e       	mov	r0, r25
    586e:	03 94       	inc	r0
    5870:	00 0c       	add	r0, r0
    5872:	11 f4       	brne	.+4      	; 0x5878 <__fp_round+0xc>
    5874:	88 23       	and	r24, r24
    5876:	52 f0       	brmi	.+20     	; 0x588c <__fp_round+0x20>
    5878:	bb 0f       	add	r27, r27
    587a:	40 f4       	brcc	.+16     	; 0x588c <__fp_round+0x20>
    587c:	bf 2b       	or	r27, r31
    587e:	11 f4       	brne	.+4      	; 0x5884 <__fp_round+0x18>
    5880:	60 ff       	sbrs	r22, 0
    5882:	04 c0       	rjmp	.+8      	; 0x588c <__fp_round+0x20>
    5884:	6f 5f       	subi	r22, 0xFF	; 255
    5886:	7f 4f       	sbci	r23, 0xFF	; 255
    5888:	8f 4f       	sbci	r24, 0xFF	; 255
    588a:	9f 4f       	sbci	r25, 0xFF	; 255
    588c:	08 95       	ret

0000588e <__fp_split3>:
    588e:	57 fd       	sbrc	r21, 7
    5890:	90 58       	subi	r25, 0x80	; 128
    5892:	44 0f       	add	r20, r20
    5894:	55 1f       	adc	r21, r21
    5896:	59 f0       	breq	.+22     	; 0x58ae <__fp_splitA+0x10>
    5898:	5f 3f       	cpi	r21, 0xFF	; 255
    589a:	71 f0       	breq	.+28     	; 0x58b8 <__fp_splitA+0x1a>
    589c:	47 95       	ror	r20

0000589e <__fp_splitA>:
    589e:	88 0f       	add	r24, r24
    58a0:	97 fb       	bst	r25, 7
    58a2:	99 1f       	adc	r25, r25
    58a4:	61 f0       	breq	.+24     	; 0x58be <__fp_splitA+0x20>
    58a6:	9f 3f       	cpi	r25, 0xFF	; 255
    58a8:	79 f0       	breq	.+30     	; 0x58c8 <__fp_splitA+0x2a>
    58aa:	87 95       	ror	r24
    58ac:	08 95       	ret
    58ae:	12 16       	cp	r1, r18
    58b0:	13 06       	cpc	r1, r19
    58b2:	14 06       	cpc	r1, r20
    58b4:	55 1f       	adc	r21, r21
    58b6:	f2 cf       	rjmp	.-28     	; 0x589c <__fp_split3+0xe>
    58b8:	46 95       	lsr	r20
    58ba:	f1 df       	rcall	.-30     	; 0x589e <__fp_splitA>
    58bc:	08 c0       	rjmp	.+16     	; 0x58ce <__fp_splitA+0x30>
    58be:	16 16       	cp	r1, r22
    58c0:	17 06       	cpc	r1, r23
    58c2:	18 06       	cpc	r1, r24
    58c4:	99 1f       	adc	r25, r25
    58c6:	f1 cf       	rjmp	.-30     	; 0x58aa <__fp_splitA+0xc>
    58c8:	86 95       	lsr	r24
    58ca:	71 05       	cpc	r23, r1
    58cc:	61 05       	cpc	r22, r1
    58ce:	08 94       	sec
    58d0:	08 95       	ret

000058d2 <__fp_zero>:
    58d2:	e8 94       	clt

000058d4 <__fp_szero>:
    58d4:	bb 27       	eor	r27, r27
    58d6:	66 27       	eor	r22, r22
    58d8:	77 27       	eor	r23, r23
    58da:	cb 01       	movw	r24, r22
    58dc:	97 f9       	bld	r25, 7
    58de:	08 95       	ret

000058e0 <__mulsf3>:
    58e0:	0b d0       	rcall	.+22     	; 0x58f8 <__mulsf3x>
    58e2:	c4 cf       	rjmp	.-120    	; 0x586c <__fp_round>
    58e4:	b5 df       	rcall	.-150    	; 0x5850 <__fp_pscA>
    58e6:	28 f0       	brcs	.+10     	; 0x58f2 <__mulsf3+0x12>
    58e8:	ba df       	rcall	.-140    	; 0x585e <__fp_pscB>
    58ea:	18 f0       	brcs	.+6      	; 0x58f2 <__mulsf3+0x12>
    58ec:	95 23       	and	r25, r21
    58ee:	09 f0       	breq	.+2      	; 0x58f2 <__mulsf3+0x12>
    58f0:	a6 cf       	rjmp	.-180    	; 0x583e <__fp_inf>
    58f2:	ab cf       	rjmp	.-170    	; 0x584a <__fp_nan>
    58f4:	11 24       	eor	r1, r1
    58f6:	ee cf       	rjmp	.-36     	; 0x58d4 <__fp_szero>

000058f8 <__mulsf3x>:
    58f8:	ca df       	rcall	.-108    	; 0x588e <__fp_split3>
    58fa:	a0 f3       	brcs	.-24     	; 0x58e4 <__mulsf3+0x4>

000058fc <__mulsf3_pse>:
    58fc:	95 9f       	mul	r25, r21
    58fe:	d1 f3       	breq	.-12     	; 0x58f4 <__mulsf3+0x14>
    5900:	95 0f       	add	r25, r21
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	55 1f       	adc	r21, r21
    5906:	62 9f       	mul	r22, r18
    5908:	f0 01       	movw	r30, r0
    590a:	72 9f       	mul	r23, r18
    590c:	bb 27       	eor	r27, r27
    590e:	f0 0d       	add	r31, r0
    5910:	b1 1d       	adc	r27, r1
    5912:	63 9f       	mul	r22, r19
    5914:	aa 27       	eor	r26, r26
    5916:	f0 0d       	add	r31, r0
    5918:	b1 1d       	adc	r27, r1
    591a:	aa 1f       	adc	r26, r26
    591c:	64 9f       	mul	r22, r20
    591e:	66 27       	eor	r22, r22
    5920:	b0 0d       	add	r27, r0
    5922:	a1 1d       	adc	r26, r1
    5924:	66 1f       	adc	r22, r22
    5926:	82 9f       	mul	r24, r18
    5928:	22 27       	eor	r18, r18
    592a:	b0 0d       	add	r27, r0
    592c:	a1 1d       	adc	r26, r1
    592e:	62 1f       	adc	r22, r18
    5930:	73 9f       	mul	r23, r19
    5932:	b0 0d       	add	r27, r0
    5934:	a1 1d       	adc	r26, r1
    5936:	62 1f       	adc	r22, r18
    5938:	83 9f       	mul	r24, r19
    593a:	a0 0d       	add	r26, r0
    593c:	61 1d       	adc	r22, r1
    593e:	22 1f       	adc	r18, r18
    5940:	74 9f       	mul	r23, r20
    5942:	33 27       	eor	r19, r19
    5944:	a0 0d       	add	r26, r0
    5946:	61 1d       	adc	r22, r1
    5948:	23 1f       	adc	r18, r19
    594a:	84 9f       	mul	r24, r20
    594c:	60 0d       	add	r22, r0
    594e:	21 1d       	adc	r18, r1
    5950:	82 2f       	mov	r24, r18
    5952:	76 2f       	mov	r23, r22
    5954:	6a 2f       	mov	r22, r26
    5956:	11 24       	eor	r1, r1
    5958:	9f 57       	subi	r25, 0x7F	; 127
    595a:	50 40       	sbci	r21, 0x00	; 0
    595c:	8a f0       	brmi	.+34     	; 0x5980 <__mulsf3_pse+0x84>
    595e:	e1 f0       	breq	.+56     	; 0x5998 <__mulsf3_pse+0x9c>
    5960:	88 23       	and	r24, r24
    5962:	4a f0       	brmi	.+18     	; 0x5976 <__mulsf3_pse+0x7a>
    5964:	ee 0f       	add	r30, r30
    5966:	ff 1f       	adc	r31, r31
    5968:	bb 1f       	adc	r27, r27
    596a:	66 1f       	adc	r22, r22
    596c:	77 1f       	adc	r23, r23
    596e:	88 1f       	adc	r24, r24
    5970:	91 50       	subi	r25, 0x01	; 1
    5972:	50 40       	sbci	r21, 0x00	; 0
    5974:	a9 f7       	brne	.-22     	; 0x5960 <__mulsf3_pse+0x64>
    5976:	9e 3f       	cpi	r25, 0xFE	; 254
    5978:	51 05       	cpc	r21, r1
    597a:	70 f0       	brcs	.+28     	; 0x5998 <__mulsf3_pse+0x9c>
    597c:	60 cf       	rjmp	.-320    	; 0x583e <__fp_inf>
    597e:	aa cf       	rjmp	.-172    	; 0x58d4 <__fp_szero>
    5980:	5f 3f       	cpi	r21, 0xFF	; 255
    5982:	ec f3       	brlt	.-6      	; 0x597e <__mulsf3_pse+0x82>
    5984:	98 3e       	cpi	r25, 0xE8	; 232
    5986:	dc f3       	brlt	.-10     	; 0x597e <__mulsf3_pse+0x82>
    5988:	86 95       	lsr	r24
    598a:	77 95       	ror	r23
    598c:	67 95       	ror	r22
    598e:	b7 95       	ror	r27
    5990:	f7 95       	ror	r31
    5992:	e7 95       	ror	r30
    5994:	9f 5f       	subi	r25, 0xFF	; 255
    5996:	c1 f7       	brne	.-16     	; 0x5988 <__mulsf3_pse+0x8c>
    5998:	fe 2b       	or	r31, r30
    599a:	88 0f       	add	r24, r24
    599c:	91 1d       	adc	r25, r1
    599e:	96 95       	lsr	r25
    59a0:	87 95       	ror	r24
    59a2:	97 f9       	bld	r25, 7
    59a4:	08 95       	ret

000059a6 <__unordsf2>:
    59a6:	27 df       	rcall	.-434    	; 0x57f6 <__fp_cmp>
    59a8:	88 0b       	sbc	r24, r24
    59aa:	99 0b       	sbc	r25, r25
    59ac:	08 95       	ret

000059ae <__cxa_pure_virtual>:
    59ae:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <abort>

000059b2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    59b2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    59b4:	91 8d       	ldd	r25, Z+25	; 0x19
    59b6:	22 8d       	ldd	r18, Z+26	; 0x1a
    59b8:	89 2f       	mov	r24, r25
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	80 5c       	subi	r24, 0xC0	; 192
    59be:	9f 4f       	sbci	r25, 0xFF	; 255
    59c0:	82 1b       	sub	r24, r18
    59c2:	91 09       	sbc	r25, r1
}
    59c4:	8f 73       	andi	r24, 0x3F	; 63
    59c6:	99 27       	eor	r25, r25
    59c8:	08 95       	ret

000059ca <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    59ca:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    59cc:	91 8d       	ldd	r25, Z+25	; 0x19
    59ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    59d0:	98 17       	cp	r25, r24
    59d2:	31 f0       	breq	.+12     	; 0x59e0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    59d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    59d6:	e8 0f       	add	r30, r24
    59d8:	f1 1d       	adc	r31, r1
    59da:	85 8d       	ldd	r24, Z+29	; 0x1d
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    59e0:	8f ef       	ldi	r24, 0xFF	; 255
    59e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    59e4:	08 95       	ret

000059e6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    59e6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    59e8:	91 8d       	ldd	r25, Z+25	; 0x19
    59ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    59ec:	98 17       	cp	r25, r24
    59ee:	61 f0       	breq	.+24     	; 0x5a08 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    59f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    59f2:	df 01       	movw	r26, r30
    59f4:	a8 0f       	add	r26, r24
    59f6:	b1 1d       	adc	r27, r1
    59f8:	5d 96       	adiw	r26, 0x1d	; 29
    59fa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    59fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    59fe:	9f 5f       	subi	r25, 0xFF	; 255
    5a00:	9f 73       	andi	r25, 0x3F	; 63
    5a02:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a08:	8f ef       	ldi	r24, 0xFF	; 255
    5a0a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5a0c:	08 95       	ret

00005a0e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    5a0e:	fc 01       	movw	r30, r24
    5a10:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5a12:	44 8d       	ldd	r20, Z+28	; 0x1c
    5a14:	25 2f       	mov	r18, r21
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	84 2f       	mov	r24, r20
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5a1c:	82 1b       	sub	r24, r18
    5a1e:	93 0b       	sbc	r25, r19
    5a20:	54 17       	cp	r21, r20
    5a22:	10 f0       	brcs	.+4      	; 0x5a28 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5a24:	cf 96       	adiw	r24, 0x3f	; 63
    5a26:	08 95       	ret
  return tail - head - 1;
    5a28:	01 97       	sbiw	r24, 0x01	; 1
}
    5a2a:	08 95       	ret

00005a2c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5a2c:	83 ea       	ldi	r24, 0xA3	; 163
    5a2e:	9e e2       	ldi	r25, 0x2E	; 46
    5a30:	89 2b       	or	r24, r25
    5a32:	39 f0       	breq	.+14     	; 0x5a42 <_Z14serialEventRunv+0x16>
    5a34:	80 e0       	ldi	r24, 0x00	; 0
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	89 2b       	or	r24, r25
    5a3a:	19 f0       	breq	.+6      	; 0x5a42 <_Z14serialEventRunv+0x16>
    5a3c:	84 d1       	rcall	.+776    	; 0x5d46 <_Z17Serial0_availablev>
    5a3e:	81 11       	cpse	r24, r1
    5a40:	25 c0       	rjmp	.+74     	; 0x5a8c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	89 2b       	or	r24, r25
    5a48:	41 f0       	breq	.+16     	; 0x5a5a <_Z14serialEventRunv+0x2e>
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	89 2b       	or	r24, r25
    5a50:	21 f0       	breq	.+8      	; 0x5a5a <_Z14serialEventRunv+0x2e>
    5a52:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a56:	81 11       	cpse	r24, r1
    5a58:	1c c0       	rjmp	.+56     	; 0x5a92 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5a5a:	80 e0       	ldi	r24, 0x00	; 0
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	89 2b       	or	r24, r25
    5a60:	41 f0       	breq	.+16     	; 0x5a72 <_Z14serialEventRunv+0x46>
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	89 2b       	or	r24, r25
    5a68:	21 f0       	breq	.+8      	; 0x5a72 <_Z14serialEventRunv+0x46>
    5a6a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a6e:	81 11       	cpse	r24, r1
    5a70:	13 c0       	rjmp	.+38     	; 0x5a98 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	89 2b       	or	r24, r25
    5a78:	a1 f0       	breq	.+40     	; 0x5aa2 <_Z14serialEventRunv+0x76>
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	89 2b       	or	r24, r25
    5a80:	81 f0       	breq	.+32     	; 0x5aa2 <_Z14serialEventRunv+0x76>
    5a82:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a86:	81 11       	cpse	r24, r1
    5a88:	0a c0       	rjmp	.+20     	; 0x5a9e <_Z14serialEventRunv+0x72>
    5a8a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5a8c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a90:	d8 cf       	rjmp	.-80     	; 0x5a42 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5a92:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a96:	e1 cf       	rjmp	.-62     	; 0x5a5a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5a98:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5a9c:	ea cf       	rjmp	.-44     	; 0x5a72 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5a9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5aa2:	08 95       	ret

00005aa4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5aa4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5aa6:	84 8d       	ldd	r24, Z+28	; 0x1c
    5aa8:	df 01       	movw	r26, r30
    5aaa:	a8 0f       	add	r26, r24
    5aac:	b1 1d       	adc	r27, r1
    5aae:	a3 5a       	subi	r26, 0xA3	; 163
    5ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ab2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5ab4:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	01 96       	adiw	r24, 0x01	; 1
    5aba:	8f 73       	andi	r24, 0x3F	; 63
    5abc:	99 27       	eor	r25, r25
    5abe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5ac0:	a6 89       	ldd	r26, Z+22	; 0x16
    5ac2:	b7 89       	ldd	r27, Z+23	; 0x17
    5ac4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5ac6:	a0 89       	ldd	r26, Z+16	; 0x10
    5ac8:	b1 89       	ldd	r27, Z+17	; 0x11
    5aca:	8c 91       	ld	r24, X
    5acc:	83 70       	andi	r24, 0x03	; 3
    5ace:	80 64       	ori	r24, 0x40	; 64
    5ad0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5ad2:	93 8d       	ldd	r25, Z+27	; 0x1b
    5ad4:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ad6:	98 13       	cpse	r25, r24
    5ad8:	06 c0       	rjmp	.+12     	; 0x5ae6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5ada:	02 88       	ldd	r0, Z+18	; 0x12
    5adc:	f3 89       	ldd	r31, Z+19	; 0x13
    5ade:	e0 2d       	mov	r30, r0
    5ae0:	80 81       	ld	r24, Z
    5ae2:	8f 7d       	andi	r24, 0xDF	; 223
    5ae4:	80 83       	st	Z, r24
    5ae6:	08 95       	ret

00005ae8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    5ae8:	ef 92       	push	r14
    5aea:	ff 92       	push	r15
    5aec:	0f 93       	push	r16
    5aee:	1f 93       	push	r17
    5af0:	cf 93       	push	r28
    5af2:	df 93       	push	r29
    5af4:	ec 01       	movw	r28, r24
  _written = true;
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5afa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5afc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5afe:	98 13       	cpse	r25, r24
    5b00:	05 c0       	rjmp	.+10     	; 0x5b0c <_ZN14HardwareSerial5writeEh+0x24>
    5b02:	e8 89       	ldd	r30, Y+16	; 0x10
    5b04:	f9 89       	ldd	r31, Y+17	; 0x11
    5b06:	80 81       	ld	r24, Z
    5b08:	85 fd       	sbrc	r24, 5
    5b0a:	25 c0       	rjmp	.+74     	; 0x5b56 <_ZN14HardwareSerial5writeEh+0x6e>
    5b0c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5b0e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5b10:	10 e0       	ldi	r17, 0x00	; 0
    5b12:	0f 5f       	subi	r16, 0xFF	; 255
    5b14:	1f 4f       	sbci	r17, 0xFF	; 255
    5b16:	0f 73       	andi	r16, 0x3F	; 63
    5b18:	11 27       	eor	r17, r17
    5b1a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5b1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b1e:	e8 12       	cpse	r14, r24
    5b20:	0b c0       	rjmp	.+22     	; 0x5b38 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5b22:	0f b6       	in	r0, 0x3f	; 63
    5b24:	07 fc       	sbrc	r0, 7
    5b26:	fa cf       	rjmp	.-12     	; 0x5b1c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5b28:	e8 89       	ldd	r30, Y+16	; 0x10
    5b2a:	f9 89       	ldd	r31, Y+17	; 0x11
    5b2c:	80 81       	ld	r24, Z
    5b2e:	85 ff       	sbrs	r24, 5
    5b30:	f5 cf       	rjmp	.-22     	; 0x5b1c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5b32:	ce 01       	movw	r24, r28
    5b34:	b7 df       	rcall	.-146    	; 0x5aa4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5b36:	f2 cf       	rjmp	.-28     	; 0x5b1c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	e8 0f       	add	r30, r24
    5b3e:	f1 1d       	adc	r31, r1
    5b40:	e3 5a       	subi	r30, 0xA3	; 163
    5b42:	ff 4f       	sbci	r31, 0xFF	; 255
    5b44:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5b46:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5b48:	f8 94       	cli
    _tx_buffer_head = i;
    5b4a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5b4c:	ea 89       	ldd	r30, Y+18	; 0x12
    5b4e:	fb 89       	ldd	r31, Y+19	; 0x13
    5b50:	80 81       	ld	r24, Z
    5b52:	80 62       	ori	r24, 0x20	; 32
    5b54:	0a c0       	rjmp	.+20     	; 0x5b6a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5b56:	9f b7       	in	r25, 0x3f	; 63
    5b58:	f8 94       	cli
      *_udr = c;
    5b5a:	ee 89       	ldd	r30, Y+22	; 0x16
    5b5c:	ff 89       	ldd	r31, Y+23	; 0x17
    5b5e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5b60:	e8 89       	ldd	r30, Y+16	; 0x10
    5b62:	f9 89       	ldd	r31, Y+17	; 0x11
    5b64:	80 81       	ld	r24, Z
    5b66:	83 70       	andi	r24, 0x03	; 3
    5b68:	80 64       	ori	r24, 0x40	; 64
    5b6a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5b6c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	df 91       	pop	r29
    5b74:	cf 91       	pop	r28
    5b76:	1f 91       	pop	r17
    5b78:	0f 91       	pop	r16
    5b7a:	ff 90       	pop	r15
    5b7c:	ef 90       	pop	r14
    5b7e:	08 95       	ret

00005b80 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5b80:	cf 93       	push	r28
    5b82:	df 93       	push	r29
    5b84:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5b86:	88 8d       	ldd	r24, Y+24	; 0x18
    5b88:	88 23       	and	r24, r24
    5b8a:	c1 f0       	breq	.+48     	; 0x5bbc <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5b8c:	ea 89       	ldd	r30, Y+18	; 0x12
    5b8e:	fb 89       	ldd	r31, Y+19	; 0x13
    5b90:	80 81       	ld	r24, Z
    5b92:	85 fd       	sbrc	r24, 5
    5b94:	05 c0       	rjmp	.+10     	; 0x5ba0 <_ZN14HardwareSerial5flushEv+0x20>
    5b96:	a8 89       	ldd	r26, Y+16	; 0x10
    5b98:	b9 89       	ldd	r27, Y+17	; 0x11
    5b9a:	8c 91       	ld	r24, X
    5b9c:	86 fd       	sbrc	r24, 6
    5b9e:	0e c0       	rjmp	.+28     	; 0x5bbc <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5ba0:	0f b6       	in	r0, 0x3f	; 63
    5ba2:	07 fc       	sbrc	r0, 7
    5ba4:	f5 cf       	rjmp	.-22     	; 0x5b90 <_ZN14HardwareSerial5flushEv+0x10>
    5ba6:	80 81       	ld	r24, Z
    5ba8:	85 ff       	sbrs	r24, 5
    5baa:	f2 cf       	rjmp	.-28     	; 0x5b90 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5bac:	a8 89       	ldd	r26, Y+16	; 0x10
    5bae:	b9 89       	ldd	r27, Y+17	; 0x11
    5bb0:	8c 91       	ld	r24, X
    5bb2:	85 ff       	sbrs	r24, 5
    5bb4:	ed cf       	rjmp	.-38     	; 0x5b90 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5bb6:	ce 01       	movw	r24, r28
    5bb8:	75 df       	rcall	.-278    	; 0x5aa4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5bba:	e8 cf       	rjmp	.-48     	; 0x5b8c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5bbc:	df 91       	pop	r29
    5bbe:	cf 91       	pop	r28
    5bc0:	08 95       	ret

00005bc2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5bc2:	cf 92       	push	r12
    5bc4:	df 92       	push	r13
    5bc6:	ef 92       	push	r14
    5bc8:	ff 92       	push	r15
    5bca:	1f 93       	push	r17
    5bcc:	cf 93       	push	r28
    5bce:	df 93       	push	r29
    5bd0:	ec 01       	movw	r28, r24
    5bd2:	6a 01       	movw	r12, r20
    5bd4:	7b 01       	movw	r14, r22
    5bd6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5bd8:	e8 89       	ldd	r30, Y+16	; 0x10
    5bda:	f9 89       	ldd	r31, Y+17	; 0x11
    5bdc:	82 e0       	ldi	r24, 0x02	; 2
    5bde:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5be0:	41 15       	cp	r20, r1
    5be2:	51 4e       	sbci	r21, 0xE1	; 225
    5be4:	61 05       	cpc	r22, r1
    5be6:	71 05       	cpc	r23, r1
    5be8:	a9 f0       	breq	.+42     	; 0x5c14 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5bea:	60 e0       	ldi	r22, 0x00	; 0
    5bec:	79 e0       	ldi	r23, 0x09	; 9
    5bee:	8d e3       	ldi	r24, 0x3D	; 61
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	a7 01       	movw	r20, r14
    5bf4:	96 01       	movw	r18, r12
    5bf6:	64 d6       	rcall	.+3272   	; 0x68c0 <__udivmodsi4>
    5bf8:	da 01       	movw	r26, r20
    5bfa:	c9 01       	movw	r24, r18
    5bfc:	01 97       	sbiw	r24, 0x01	; 1
    5bfe:	a1 09       	sbc	r26, r1
    5c00:	b1 09       	sbc	r27, r1
    5c02:	b6 95       	lsr	r27
    5c04:	a7 95       	ror	r26
    5c06:	97 95       	ror	r25
    5c08:	87 95       	ror	r24
    5c0a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c0c:	21 15       	cp	r18, r1
    5c0e:	80 e1       	ldi	r24, 0x10	; 16
    5c10:	38 07       	cpc	r19, r24
    5c12:	a0 f0       	brcs	.+40     	; 0x5c3c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5c14:	e8 89       	ldd	r30, Y+16	; 0x10
    5c16:	f9 89       	ldd	r31, Y+17	; 0x11
    5c18:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5c1a:	60 e8       	ldi	r22, 0x80	; 128
    5c1c:	74 e8       	ldi	r23, 0x84	; 132
    5c1e:	8e e1       	ldi	r24, 0x1E	; 30
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	a7 01       	movw	r20, r14
    5c24:	96 01       	movw	r18, r12
    5c26:	4c d6       	rcall	.+3224   	; 0x68c0 <__udivmodsi4>
    5c28:	da 01       	movw	r26, r20
    5c2a:	c9 01       	movw	r24, r18
    5c2c:	01 97       	sbiw	r24, 0x01	; 1
    5c2e:	a1 09       	sbc	r26, r1
    5c30:	b1 09       	sbc	r27, r1
    5c32:	b6 95       	lsr	r27
    5c34:	a7 95       	ror	r26
    5c36:	97 95       	ror	r25
    5c38:	87 95       	ror	r24
    5c3a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5c3c:	ec 85       	ldd	r30, Y+12	; 0x0c
    5c3e:	fd 85       	ldd	r31, Y+13	; 0x0d
    5c40:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5c42:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c44:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c46:	20 83       	st	Z, r18

  _written = false;
    5c48:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5c4a:	ec 89       	ldd	r30, Y+20	; 0x14
    5c4c:	fd 89       	ldd	r31, Y+21	; 0x15
    5c4e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5c50:	ea 89       	ldd	r30, Y+18	; 0x12
    5c52:	fb 89       	ldd	r31, Y+19	; 0x13
    5c54:	80 81       	ld	r24, Z
    5c56:	80 61       	ori	r24, 0x10	; 16
    5c58:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    5c5c:	fb 89       	ldd	r31, Y+19	; 0x13
    5c5e:	80 81       	ld	r24, Z
    5c60:	88 60       	ori	r24, 0x08	; 8
    5c62:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5c64:	ea 89       	ldd	r30, Y+18	; 0x12
    5c66:	fb 89       	ldd	r31, Y+19	; 0x13
    5c68:	80 81       	ld	r24, Z
    5c6a:	80 68       	ori	r24, 0x80	; 128
    5c6c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5c6e:	ea 89       	ldd	r30, Y+18	; 0x12
    5c70:	fb 89       	ldd	r31, Y+19	; 0x13
    5c72:	80 81       	ld	r24, Z
    5c74:	8f 7d       	andi	r24, 0xDF	; 223
    5c76:	80 83       	st	Z, r24
}
    5c78:	df 91       	pop	r29
    5c7a:	cf 91       	pop	r28
    5c7c:	1f 91       	pop	r17
    5c7e:	ff 90       	pop	r15
    5c80:	ef 90       	pop	r14
    5c82:	df 90       	pop	r13
    5c84:	cf 90       	pop	r12
    5c86:	08 95       	ret

00005c88 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5c88:	1f 92       	push	r1
    5c8a:	0f 92       	push	r0
    5c8c:	0f b6       	in	r0, 0x3f	; 63
    5c8e:	0f 92       	push	r0
    5c90:	11 24       	eor	r1, r1
    5c92:	0b b6       	in	r0, 0x3b	; 59
    5c94:	0f 92       	push	r0
    5c96:	2f 93       	push	r18
    5c98:	8f 93       	push	r24
    5c9a:	9f 93       	push	r25
    5c9c:	ef 93       	push	r30
    5c9e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5ca0:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <Serial+0x10>
    5ca4:	f0 91 17 05 	lds	r31, 0x0517	; 0x800517 <Serial+0x11>
    5ca8:	80 81       	ld	r24, Z
    5caa:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Serial+0x16>
    5cae:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Serial+0x17>
    5cb2:	82 fd       	sbrc	r24, 2
    5cb4:	12 c0       	rjmp	.+36     	; 0x5cda <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5cb6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5cb8:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <Serial+0x19>
    5cbc:	8f 5f       	subi	r24, 0xFF	; 255
    5cbe:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5cc0:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <Serial+0x1a>
    5cc4:	82 17       	cp	r24, r18
    5cc6:	51 f0       	breq	.+20     	; 0x5cdc <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    5cc8:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <Serial+0x19>
    5ccc:	f0 e0       	ldi	r31, 0x00	; 0
    5cce:	ea 5f       	subi	r30, 0xFA	; 250
    5cd0:	fa 4f       	sbci	r31, 0xFA	; 250
    5cd2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5cd4:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <Serial+0x19>
    5cd8:	01 c0       	rjmp	.+2      	; 0x5cdc <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5cda:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5cdc:	ff 91       	pop	r31
    5cde:	ef 91       	pop	r30
    5ce0:	9f 91       	pop	r25
    5ce2:	8f 91       	pop	r24
    5ce4:	2f 91       	pop	r18
    5ce6:	0f 90       	pop	r0
    5ce8:	0b be       	out	0x3b, r0	; 59
    5cea:	0f 90       	pop	r0
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	0f 90       	pop	r0
    5cf0:	1f 90       	pop	r1
    5cf2:	18 95       	reti

00005cf4 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5cf4:	1f 92       	push	r1
    5cf6:	0f 92       	push	r0
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	0f 92       	push	r0
    5cfc:	11 24       	eor	r1, r1
    5cfe:	0b b6       	in	r0, 0x3b	; 59
    5d00:	0f 92       	push	r0
    5d02:	2f 93       	push	r18
    5d04:	3f 93       	push	r19
    5d06:	4f 93       	push	r20
    5d08:	5f 93       	push	r21
    5d0a:	6f 93       	push	r22
    5d0c:	7f 93       	push	r23
    5d0e:	8f 93       	push	r24
    5d10:	9f 93       	push	r25
    5d12:	af 93       	push	r26
    5d14:	bf 93       	push	r27
    5d16:	ef 93       	push	r30
    5d18:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5d1a:	86 e0       	ldi	r24, 0x06	; 6
    5d1c:	95 e0       	ldi	r25, 0x05	; 5
    5d1e:	c2 de       	rcall	.-636    	; 0x5aa4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5d20:	ff 91       	pop	r31
    5d22:	ef 91       	pop	r30
    5d24:	bf 91       	pop	r27
    5d26:	af 91       	pop	r26
    5d28:	9f 91       	pop	r25
    5d2a:	8f 91       	pop	r24
    5d2c:	7f 91       	pop	r23
    5d2e:	6f 91       	pop	r22
    5d30:	5f 91       	pop	r21
    5d32:	4f 91       	pop	r20
    5d34:	3f 91       	pop	r19
    5d36:	2f 91       	pop	r18
    5d38:	0f 90       	pop	r0
    5d3a:	0b be       	out	0x3b, r0	; 59
    5d3c:	0f 90       	pop	r0
    5d3e:	0f be       	out	0x3f, r0	; 63
    5d40:	0f 90       	pop	r0
    5d42:	1f 90       	pop	r1
    5d44:	18 95       	reti

00005d46 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5d46:	86 e0       	ldi	r24, 0x06	; 6
    5d48:	95 e0       	ldi	r25, 0x05	; 5
    5d4a:	33 de       	rcall	.-922    	; 0x59b2 <_ZN14HardwareSerial9availableEv>
    5d4c:	21 e0       	ldi	r18, 0x01	; 1
    5d4e:	89 2b       	or	r24, r25
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <_Z17Serial0_availablev+0xe>
    5d52:	20 e0       	ldi	r18, 0x00	; 0
}
    5d54:	82 2f       	mov	r24, r18
    5d56:	08 95       	ret

00005d58 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5d58:	e6 e0       	ldi	r30, 0x06	; 6
    5d5a:	f5 e0       	ldi	r31, 0x05	; 5
    5d5c:	13 82       	std	Z+3, r1	; 0x03
    5d5e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5d60:	88 ee       	ldi	r24, 0xE8	; 232
    5d62:	93 e0       	ldi	r25, 0x03	; 3
    5d64:	a0 e0       	ldi	r26, 0x00	; 0
    5d66:	b0 e0       	ldi	r27, 0x00	; 0
    5d68:	84 83       	std	Z+4, r24	; 0x04
    5d6a:	95 83       	std	Z+5, r25	; 0x05
    5d6c:	a6 83       	std	Z+6, r26	; 0x06
    5d6e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5d70:	81 e2       	ldi	r24, 0x21	; 33
    5d72:	93 e0       	ldi	r25, 0x03	; 3
    5d74:	91 83       	std	Z+1, r25	; 0x01
    5d76:	80 83       	st	Z, r24
    5d78:	85 ec       	ldi	r24, 0xC5	; 197
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	95 87       	std	Z+13, r25	; 0x0d
    5d7e:	84 87       	std	Z+12, r24	; 0x0c
    5d80:	84 ec       	ldi	r24, 0xC4	; 196
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	97 87       	std	Z+15, r25	; 0x0f
    5d86:	86 87       	std	Z+14, r24	; 0x0e
    5d88:	80 ec       	ldi	r24, 0xC0	; 192
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	91 8b       	std	Z+17, r25	; 0x11
    5d8e:	80 8b       	std	Z+16, r24	; 0x10
    5d90:	81 ec       	ldi	r24, 0xC1	; 193
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	93 8b       	std	Z+19, r25	; 0x13
    5d96:	82 8b       	std	Z+18, r24	; 0x12
    5d98:	82 ec       	ldi	r24, 0xC2	; 194
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	95 8b       	std	Z+21, r25	; 0x15
    5d9e:	84 8b       	std	Z+20, r24	; 0x14
    5da0:	86 ec       	ldi	r24, 0xC6	; 198
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	97 8b       	std	Z+23, r25	; 0x17
    5da6:	86 8b       	std	Z+22, r24	; 0x16
    5da8:	11 8e       	std	Z+25, r1	; 0x19
    5daa:	12 8e       	std	Z+26, r1	; 0x1a
    5dac:	13 8e       	std	Z+27, r1	; 0x1b
    5dae:	14 8e       	std	Z+28, r1	; 0x1c
    5db0:	08 95       	ret

00005db2 <initVariant>:
    5db2:	08 95       	ret

00005db4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5db4:	c4 d1       	rcall	.+904    	; 0x613e <init>

	initVariant();
    5db6:	fd df       	rcall	.-6      	; 0x5db2 <initVariant>
    5db8:	0e 94 65 03 	call	0x6ca	; 0x6ca <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5dbc:	c6 e1       	ldi	r28, 0x16	; 22
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5dbe:	dd e2       	ldi	r29, 0x2D	; 45
    5dc0:	0e 94 16 04 	call	0x82c	; 0x82c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5dc4:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5dc6:	e1 f3       	breq	.-8      	; 0x5dc0 <main+0xc>
    5dc8:	31 de       	rcall	.-926    	; 0x5a2c <_Z14serialEventRunv>
    5dca:	fa cf       	rjmp	.-12     	; 0x5dc0 <main+0xc>

00005dcc <_ZdlPv>:
    5dcc:	70 c6       	rjmp	.+3296   	; 0x6aae <free>

00005dce <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5dce:	cf 92       	push	r12
    5dd0:	df 92       	push	r13
    5dd2:	ef 92       	push	r14
    5dd4:	ff 92       	push	r15
    5dd6:	0f 93       	push	r16
    5dd8:	1f 93       	push	r17
    5dda:	cf 93       	push	r28
    5ddc:	df 93       	push	r29
    5dde:	6c 01       	movw	r12, r24
    5de0:	7a 01       	movw	r14, r20
    5de2:	8b 01       	movw	r16, r22
    5de4:	c0 e0       	ldi	r28, 0x00	; 0
    5de6:	d0 e0       	ldi	r29, 0x00	; 0
    5de8:	ce 15       	cp	r28, r14
    5dea:	df 05       	cpc	r29, r15
    5dec:	81 f0       	breq	.+32     	; 0x5e0e <_ZN5Print5writeEPKhj+0x40>
    5dee:	d8 01       	movw	r26, r16
    5df0:	6d 91       	ld	r22, X+
    5df2:	8d 01       	movw	r16, r26
    5df4:	d6 01       	movw	r26, r12
    5df6:	ed 91       	ld	r30, X+
    5df8:	fc 91       	ld	r31, X
    5dfa:	01 90       	ld	r0, Z+
    5dfc:	f0 81       	ld	r31, Z
    5dfe:	e0 2d       	mov	r30, r0
    5e00:	c6 01       	movw	r24, r12
    5e02:	19 95       	eicall
    5e04:	89 2b       	or	r24, r25
    5e06:	11 f0       	breq	.+4      	; 0x5e0c <_ZN5Print5writeEPKhj+0x3e>
    5e08:	21 96       	adiw	r28, 0x01	; 1
    5e0a:	ee cf       	rjmp	.-36     	; 0x5de8 <_ZN5Print5writeEPKhj+0x1a>
    5e0c:	7e 01       	movw	r14, r28
    5e0e:	c7 01       	movw	r24, r14
    5e10:	df 91       	pop	r29
    5e12:	cf 91       	pop	r28
    5e14:	1f 91       	pop	r17
    5e16:	0f 91       	pop	r16
    5e18:	ff 90       	pop	r15
    5e1a:	ef 90       	pop	r14
    5e1c:	df 90       	pop	r13
    5e1e:	cf 90       	pop	r12
    5e20:	08 95       	ret

00005e22 <_ZN5Print5printERK6String>:
    5e22:	db 01       	movw	r26, r22
    5e24:	14 96       	adiw	r26, 0x04	; 4
    5e26:	4d 91       	ld	r20, X+
    5e28:	5c 91       	ld	r21, X
    5e2a:	15 97       	sbiw	r26, 0x05	; 5
    5e2c:	6d 91       	ld	r22, X+
    5e2e:	7c 91       	ld	r23, X
    5e30:	dc 01       	movw	r26, r24
    5e32:	ed 91       	ld	r30, X+
    5e34:	fc 91       	ld	r31, X
    5e36:	02 80       	ldd	r0, Z+2	; 0x02
    5e38:	f3 81       	ldd	r31, Z+3	; 0x03
    5e3a:	e0 2d       	mov	r30, r0
    5e3c:	19 94       	eijmp

00005e3e <_ZN5Print5printEPKc>:
    5e3e:	0c 94 df 01 	jmp	0x3be	; 0x3be <_ZN5Print5writeEPKc>

00005e42 <_ZN5Print5printEc>:
    5e42:	dc 01       	movw	r26, r24
    5e44:	ed 91       	ld	r30, X+
    5e46:	fc 91       	ld	r31, X
    5e48:	01 90       	ld	r0, Z+
    5e4a:	f0 81       	ld	r31, Z
    5e4c:	e0 2d       	mov	r30, r0
    5e4e:	19 94       	eijmp

00005e50 <_ZN5Print7printlnEv>:
    5e50:	6f e2       	ldi	r22, 0x2F	; 47
    5e52:	73 e0       	ldi	r23, 0x03	; 3
    5e54:	0c 94 df 01 	jmp	0x3be	; 0x3be <_ZN5Print5writeEPKc>

00005e58 <_ZN5Print7printlnERK6String>:
    5e58:	0f 93       	push	r16
    5e5a:	1f 93       	push	r17
    5e5c:	cf 93       	push	r28
    5e5e:	df 93       	push	r29
    5e60:	ec 01       	movw	r28, r24
    5e62:	df df       	rcall	.-66     	; 0x5e22 <_ZN5Print5printERK6String>
    5e64:	8c 01       	movw	r16, r24
    5e66:	ce 01       	movw	r24, r28
    5e68:	f3 df       	rcall	.-26     	; 0x5e50 <_ZN5Print7printlnEv>
    5e6a:	80 0f       	add	r24, r16
    5e6c:	91 1f       	adc	r25, r17
    5e6e:	df 91       	pop	r29
    5e70:	cf 91       	pop	r28
    5e72:	1f 91       	pop	r17
    5e74:	0f 91       	pop	r16
    5e76:	08 95       	ret

00005e78 <_ZN5Print7printlnEPKc>:
    5e78:	0f 93       	push	r16
    5e7a:	1f 93       	push	r17
    5e7c:	cf 93       	push	r28
    5e7e:	df 93       	push	r29
    5e80:	ec 01       	movw	r28, r24
    5e82:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN5Print5writeEPKc>
    5e86:	8c 01       	movw	r16, r24
    5e88:	ce 01       	movw	r24, r28
    5e8a:	e2 df       	rcall	.-60     	; 0x5e50 <_ZN5Print7printlnEv>
    5e8c:	80 0f       	add	r24, r16
    5e8e:	91 1f       	adc	r25, r17
    5e90:	df 91       	pop	r29
    5e92:	cf 91       	pop	r28
    5e94:	1f 91       	pop	r17
    5e96:	0f 91       	pop	r16
    5e98:	08 95       	ret

00005e9a <_ZN5Print11printNumberEmh>:
    5e9a:	8f 92       	push	r8
    5e9c:	9f 92       	push	r9
    5e9e:	af 92       	push	r10
    5ea0:	bf 92       	push	r11
    5ea2:	ef 92       	push	r14
    5ea4:	ff 92       	push	r15
    5ea6:	0f 93       	push	r16
    5ea8:	1f 93       	push	r17
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	cd b7       	in	r28, 0x3d	; 61
    5eb0:	de b7       	in	r29, 0x3e	; 62
    5eb2:	a1 97       	sbiw	r28, 0x21	; 33
    5eb4:	0f b6       	in	r0, 0x3f	; 63
    5eb6:	f8 94       	cli
    5eb8:	de bf       	out	0x3e, r29	; 62
    5eba:	0f be       	out	0x3f, r0	; 63
    5ebc:	cd bf       	out	0x3d, r28	; 61
    5ebe:	7c 01       	movw	r14, r24
    5ec0:	fa 01       	movw	r30, r20
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	19 a2       	std	Y+33, r1	; 0x21
    5ec6:	22 30       	cpi	r18, 0x02	; 2
    5ec8:	08 f4       	brcc	.+2      	; 0x5ecc <_ZN5Print11printNumberEmh+0x32>
    5eca:	2a e0       	ldi	r18, 0x0A	; 10
    5ecc:	8e 01       	movw	r16, r28
    5ece:	0f 5d       	subi	r16, 0xDF	; 223
    5ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed2:	82 2e       	mov	r8, r18
    5ed4:	91 2c       	mov	r9, r1
    5ed6:	a1 2c       	mov	r10, r1
    5ed8:	b1 2c       	mov	r11, r1
    5eda:	bf 01       	movw	r22, r30
    5edc:	a5 01       	movw	r20, r10
    5ede:	94 01       	movw	r18, r8
    5ee0:	ef d4       	rcall	.+2526   	; 0x68c0 <__udivmodsi4>
    5ee2:	f9 01       	movw	r30, r18
    5ee4:	ca 01       	movw	r24, r20
    5ee6:	01 50       	subi	r16, 0x01	; 1
    5ee8:	11 09       	sbc	r17, r1
    5eea:	6a 30       	cpi	r22, 0x0A	; 10
    5eec:	10 f4       	brcc	.+4      	; 0x5ef2 <_ZN5Print11printNumberEmh+0x58>
    5eee:	60 5d       	subi	r22, 0xD0	; 208
    5ef0:	01 c0       	rjmp	.+2      	; 0x5ef4 <_ZN5Print11printNumberEmh+0x5a>
    5ef2:	69 5c       	subi	r22, 0xC9	; 201
    5ef4:	d8 01       	movw	r26, r16
    5ef6:	6c 93       	st	X, r22
    5ef8:	23 2b       	or	r18, r19
    5efa:	24 2b       	or	r18, r20
    5efc:	25 2b       	or	r18, r21
    5efe:	69 f7       	brne	.-38     	; 0x5eda <_ZN5Print11printNumberEmh+0x40>
    5f00:	b8 01       	movw	r22, r16
    5f02:	c7 01       	movw	r24, r14
    5f04:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN5Print5writeEPKc>
    5f08:	a1 96       	adiw	r28, 0x21	; 33
    5f0a:	0f b6       	in	r0, 0x3f	; 63
    5f0c:	f8 94       	cli
    5f0e:	de bf       	out	0x3e, r29	; 62
    5f10:	0f be       	out	0x3f, r0	; 63
    5f12:	cd bf       	out	0x3d, r28	; 61
    5f14:	df 91       	pop	r29
    5f16:	cf 91       	pop	r28
    5f18:	1f 91       	pop	r17
    5f1a:	0f 91       	pop	r16
    5f1c:	ff 90       	pop	r15
    5f1e:	ef 90       	pop	r14
    5f20:	bf 90       	pop	r11
    5f22:	af 90       	pop	r10
    5f24:	9f 90       	pop	r9
    5f26:	8f 90       	pop	r8
    5f28:	08 95       	ret

00005f2a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    5f2a:	cf 92       	push	r12
    5f2c:	df 92       	push	r13
    5f2e:	ef 92       	push	r14
    5f30:	ff 92       	push	r15
    5f32:	0f 93       	push	r16
    5f34:	1f 93       	push	r17
    5f36:	cf 93       	push	r28
    5f38:	df 93       	push	r29
  if (base == 0) {
    5f3a:	21 15       	cp	r18, r1
    5f3c:	31 05       	cpc	r19, r1
    5f3e:	81 f4       	brne	.+32     	; 0x5f60 <_ZN5Print5printEli+0x36>
    return write(n);
    5f40:	dc 01       	movw	r26, r24
    5f42:	ed 91       	ld	r30, X+
    5f44:	fc 91       	ld	r31, X
    5f46:	01 90       	ld	r0, Z+
    5f48:	f0 81       	ld	r31, Z
    5f4a:	e0 2d       	mov	r30, r0
    5f4c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	1f 91       	pop	r17
    5f54:	0f 91       	pop	r16
    5f56:	ff 90       	pop	r15
    5f58:	ef 90       	pop	r14
    5f5a:	df 90       	pop	r13
    5f5c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    5f5e:	19 94       	eijmp
  } else if (base == 10) {
    5f60:	2a 30       	cpi	r18, 0x0A	; 10
    5f62:	31 05       	cpc	r19, r1
    5f64:	f1 f4       	brne	.+60     	; 0x5fa2 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    5f66:	77 ff       	sbrs	r23, 7
    5f68:	1b c0       	rjmp	.+54     	; 0x5fa0 <_ZN5Print5printEli+0x76>
    5f6a:	6a 01       	movw	r12, r20
    5f6c:	7b 01       	movw	r14, r22
    5f6e:	ec 01       	movw	r28, r24
      int t = print('-');
    5f70:	6d e2       	ldi	r22, 0x2D	; 45
    5f72:	67 df       	rcall	.-306    	; 0x5e42 <_ZN5Print5printEc>
    5f74:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    5f76:	44 27       	eor	r20, r20
    5f78:	55 27       	eor	r21, r21
    5f7a:	ba 01       	movw	r22, r20
    5f7c:	4c 19       	sub	r20, r12
    5f7e:	5d 09       	sbc	r21, r13
    5f80:	6e 09       	sbc	r22, r14
    5f82:	7f 09       	sbc	r23, r15
    5f84:	2a e0       	ldi	r18, 0x0A	; 10
    5f86:	ce 01       	movw	r24, r28
    5f88:	88 df       	rcall	.-240    	; 0x5e9a <_ZN5Print11printNumberEmh>
    5f8a:	80 0f       	add	r24, r16
    5f8c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5f8e:	df 91       	pop	r29
    5f90:	cf 91       	pop	r28
    5f92:	1f 91       	pop	r17
    5f94:	0f 91       	pop	r16
    5f96:	ff 90       	pop	r15
    5f98:	ef 90       	pop	r14
    5f9a:	df 90       	pop	r13
    5f9c:	cf 90       	pop	r12
    5f9e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    5fa0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	1f 91       	pop	r17
    5fa8:	0f 91       	pop	r16
    5faa:	ff 90       	pop	r15
    5fac:	ef 90       	pop	r14
    5fae:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    5fb0:	cf 90       	pop	r12
    5fb2:	73 cf       	rjmp	.-282    	; 0x5e9a <_ZN5Print11printNumberEmh>

00005fb4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    5fb4:	9a 01       	movw	r18, r20
  return print((long) n, base);
    5fb6:	ab 01       	movw	r20, r22
    5fb8:	77 0f       	add	r23, r23
    5fba:	66 0b       	sbc	r22, r22
    5fbc:	77 0b       	sbc	r23, r23
    5fbe:	b5 cf       	rjmp	.-150    	; 0x5f2a <_ZN5Print5printEli>

00005fc0 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5fc0:	1f 92       	push	r1
    5fc2:	0f 92       	push	r0
    5fc4:	0f b6       	in	r0, 0x3f	; 63
    5fc6:	0f 92       	push	r0
    5fc8:	11 24       	eor	r1, r1
    5fca:	2f 93       	push	r18
    5fcc:	3f 93       	push	r19
    5fce:	8f 93       	push	r24
    5fd0:	9f 93       	push	r25
    5fd2:	af 93       	push	r26
    5fd4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5fd6:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <timer0_millis>
    5fda:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <timer0_millis+0x1>
    5fde:	a0 91 a6 05 	lds	r26, 0x05A6	; 0x8005a6 <timer0_millis+0x2>
    5fe2:	b0 91 a7 05 	lds	r27, 0x05A7	; 0x8005a7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5fe6:	30 91 a3 05 	lds	r19, 0x05A3	; 0x8005a3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5fea:	23 e0       	ldi	r18, 0x03	; 3
    5fec:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5fee:	2d 37       	cpi	r18, 0x7D	; 125
    5ff0:	20 f4       	brcc	.+8      	; 0x5ffa <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5ff2:	01 96       	adiw	r24, 0x01	; 1
    5ff4:	a1 1d       	adc	r26, r1
    5ff6:	b1 1d       	adc	r27, r1
    5ff8:	05 c0       	rjmp	.+10     	; 0x6004 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5ffa:	26 e8       	ldi	r18, 0x86	; 134
    5ffc:	23 0f       	add	r18, r19
		m += 1;
    5ffe:	02 96       	adiw	r24, 0x02	; 2
    6000:	a1 1d       	adc	r26, r1
    6002:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6004:	20 93 a3 05 	sts	0x05A3, r18	; 0x8005a3 <timer0_fract>
	timer0_millis = m;
    6008:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <timer0_millis>
    600c:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <timer0_millis+0x1>
    6010:	a0 93 a6 05 	sts	0x05A6, r26	; 0x8005a6 <timer0_millis+0x2>
    6014:	b0 93 a7 05 	sts	0x05A7, r27	; 0x8005a7 <timer0_millis+0x3>
	timer0_overflow_count++;
    6018:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <timer0_overflow_count>
    601c:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <timer0_overflow_count+0x1>
    6020:	a0 91 aa 05 	lds	r26, 0x05AA	; 0x8005aa <timer0_overflow_count+0x2>
    6024:	b0 91 ab 05 	lds	r27, 0x05AB	; 0x8005ab <timer0_overflow_count+0x3>
    6028:	01 96       	adiw	r24, 0x01	; 1
    602a:	a1 1d       	adc	r26, r1
    602c:	b1 1d       	adc	r27, r1
    602e:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <timer0_overflow_count>
    6032:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <timer0_overflow_count+0x1>
    6036:	a0 93 aa 05 	sts	0x05AA, r26	; 0x8005aa <timer0_overflow_count+0x2>
    603a:	b0 93 ab 05 	sts	0x05AB, r27	; 0x8005ab <timer0_overflow_count+0x3>
}
    603e:	bf 91       	pop	r27
    6040:	af 91       	pop	r26
    6042:	9f 91       	pop	r25
    6044:	8f 91       	pop	r24
    6046:	3f 91       	pop	r19
    6048:	2f 91       	pop	r18
    604a:	0f 90       	pop	r0
    604c:	0f be       	out	0x3f, r0	; 63
    604e:	0f 90       	pop	r0
    6050:	1f 90       	pop	r1
    6052:	18 95       	reti

00006054 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6054:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6056:	f8 94       	cli
	m = timer0_millis;
    6058:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <timer0_millis>
    605c:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <timer0_millis+0x1>
    6060:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <timer0_millis+0x2>
    6064:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <timer0_millis+0x3>
	SREG = oldSREG;
    6068:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    606a:	08 95       	ret

0000606c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    606c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    606e:	f8 94       	cli
	m = timer0_overflow_count;
    6070:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <timer0_overflow_count>
    6074:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <timer0_overflow_count+0x1>
    6078:	a0 91 aa 05 	lds	r26, 0x05AA	; 0x8005aa <timer0_overflow_count+0x2>
    607c:	b0 91 ab 05 	lds	r27, 0x05AB	; 0x8005ab <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6080:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6082:	a8 9b       	sbis	0x15, 0	; 21
    6084:	05 c0       	rjmp	.+10     	; 0x6090 <micros+0x24>
    6086:	2f 3f       	cpi	r18, 0xFF	; 255
    6088:	19 f0       	breq	.+6      	; 0x6090 <micros+0x24>
		m++;
    608a:	01 96       	adiw	r24, 0x01	; 1
    608c:	a1 1d       	adc	r26, r1
    608e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6090:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6092:	ba 2f       	mov	r27, r26
    6094:	a9 2f       	mov	r26, r25
    6096:	98 2f       	mov	r25, r24
    6098:	88 27       	eor	r24, r24
    609a:	82 0f       	add	r24, r18
    609c:	91 1d       	adc	r25, r1
    609e:	a1 1d       	adc	r26, r1
    60a0:	b1 1d       	adc	r27, r1
    60a2:	bc 01       	movw	r22, r24
    60a4:	cd 01       	movw	r24, r26
    60a6:	42 e0       	ldi	r20, 0x02	; 2
    60a8:	66 0f       	add	r22, r22
    60aa:	77 1f       	adc	r23, r23
    60ac:	88 1f       	adc	r24, r24
    60ae:	99 1f       	adc	r25, r25
    60b0:	4a 95       	dec	r20
    60b2:	d1 f7       	brne	.-12     	; 0x60a8 <micros+0x3c>
}
    60b4:	08 95       	ret

000060b6 <delay>:

void delay(unsigned long ms)
{
    60b6:	8f 92       	push	r8
    60b8:	9f 92       	push	r9
    60ba:	af 92       	push	r10
    60bc:	bf 92       	push	r11
    60be:	cf 92       	push	r12
    60c0:	df 92       	push	r13
    60c2:	ef 92       	push	r14
    60c4:	ff 92       	push	r15
    60c6:	6b 01       	movw	r12, r22
    60c8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    60ca:	d0 df       	rcall	.-96     	; 0x606c <micros>
    60cc:	4b 01       	movw	r8, r22
    60ce:	5c 01       	movw	r10, r24

	while (ms > 0) {
    60d0:	c1 14       	cp	r12, r1
    60d2:	d1 04       	cpc	r13, r1
    60d4:	e1 04       	cpc	r14, r1
    60d6:	f1 04       	cpc	r15, r1
		yield();
    60d8:	f1 f0       	breq	.+60     	; 0x6116 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    60da:	e2 d3       	rcall	.+1988   	; 0x68a0 <yield>
    60dc:	c7 df       	rcall	.-114    	; 0x606c <micros>
    60de:	dc 01       	movw	r26, r24
    60e0:	cb 01       	movw	r24, r22
    60e2:	88 19       	sub	r24, r8
    60e4:	99 09       	sbc	r25, r9
    60e6:	aa 09       	sbc	r26, r10
    60e8:	bb 09       	sbc	r27, r11
    60ea:	88 3e       	cpi	r24, 0xE8	; 232
    60ec:	93 40       	sbci	r25, 0x03	; 3
    60ee:	a1 05       	cpc	r26, r1
    60f0:	b1 05       	cpc	r27, r1
    60f2:	70 f3       	brcs	.-36     	; 0x60d0 <delay+0x1a>
			ms--;
    60f4:	21 e0       	ldi	r18, 0x01	; 1
    60f6:	c2 1a       	sub	r12, r18
    60f8:	d1 08       	sbc	r13, r1
    60fa:	e1 08       	sbc	r14, r1
    60fc:	f1 08       	sbc	r15, r1
			start += 1000;
    60fe:	88 ee       	ldi	r24, 0xE8	; 232
    6100:	88 0e       	add	r8, r24
    6102:	83 e0       	ldi	r24, 0x03	; 3
    6104:	98 1e       	adc	r9, r24
    6106:	a1 1c       	adc	r10, r1
    6108:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    610a:	c1 14       	cp	r12, r1
    610c:	d1 04       	cpc	r13, r1
    610e:	e1 04       	cpc	r14, r1
    6110:	f1 04       	cpc	r15, r1
    6112:	21 f7       	brne	.-56     	; 0x60dc <delay+0x26>
    6114:	dd cf       	rjmp	.-70     	; 0x60d0 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    6116:	ff 90       	pop	r15
    6118:	ef 90       	pop	r14
    611a:	df 90       	pop	r13
    611c:	cf 90       	pop	r12
    611e:	bf 90       	pop	r11
    6120:	af 90       	pop	r10
    6122:	9f 90       	pop	r9
    6124:	8f 90       	pop	r8
    6126:	08 95       	ret

00006128 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6128:	82 30       	cpi	r24, 0x02	; 2
    612a:	91 05       	cpc	r25, r1
    612c:	38 f0       	brcs	.+14     	; 0x613c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    612e:	88 0f       	add	r24, r24
    6130:	99 1f       	adc	r25, r25
    6132:	88 0f       	add	r24, r24
    6134:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6136:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6138:	01 97       	sbiw	r24, 0x01	; 1
    613a:	f1 f7       	brne	.-4      	; 0x6138 <delayMicroseconds+0x10>
    613c:	08 95       	ret

0000613e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    613e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6140:	84 b5       	in	r24, 0x24	; 36
    6142:	82 60       	ori	r24, 0x02	; 2
    6144:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6146:	84 b5       	in	r24, 0x24	; 36
    6148:	81 60       	ori	r24, 0x01	; 1
    614a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    614c:	85 b5       	in	r24, 0x25	; 37
    614e:	82 60       	ori	r24, 0x02	; 2
    6150:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6152:	85 b5       	in	r24, 0x25	; 37
    6154:	81 60       	ori	r24, 0x01	; 1
    6156:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6158:	ee e6       	ldi	r30, 0x6E	; 110
    615a:	f0 e0       	ldi	r31, 0x00	; 0
    615c:	80 81       	ld	r24, Z
    615e:	81 60       	ori	r24, 0x01	; 1
    6160:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6162:	e1 e8       	ldi	r30, 0x81	; 129
    6164:	f0 e0       	ldi	r31, 0x00	; 0
    6166:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6168:	80 81       	ld	r24, Z
    616a:	82 60       	ori	r24, 0x02	; 2
    616c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    616e:	80 81       	ld	r24, Z
    6170:	81 60       	ori	r24, 0x01	; 1
    6172:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6174:	e0 e8       	ldi	r30, 0x80	; 128
    6176:	f0 e0       	ldi	r31, 0x00	; 0
    6178:	80 81       	ld	r24, Z
    617a:	81 60       	ori	r24, 0x01	; 1
    617c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    617e:	e1 eb       	ldi	r30, 0xB1	; 177
    6180:	f0 e0       	ldi	r31, 0x00	; 0
    6182:	80 81       	ld	r24, Z
    6184:	84 60       	ori	r24, 0x04	; 4
    6186:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6188:	e0 eb       	ldi	r30, 0xB0	; 176
    618a:	f0 e0       	ldi	r31, 0x00	; 0
    618c:	80 81       	ld	r24, Z
    618e:	81 60       	ori	r24, 0x01	; 1
    6190:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6192:	e1 e9       	ldi	r30, 0x91	; 145
    6194:	f0 e0       	ldi	r31, 0x00	; 0
    6196:	80 81       	ld	r24, Z
    6198:	82 60       	ori	r24, 0x02	; 2
    619a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    619c:	80 81       	ld	r24, Z
    619e:	81 60       	ori	r24, 0x01	; 1
    61a0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    61a2:	e0 e9       	ldi	r30, 0x90	; 144
    61a4:	f0 e0       	ldi	r31, 0x00	; 0
    61a6:	80 81       	ld	r24, Z
    61a8:	81 60       	ori	r24, 0x01	; 1
    61aa:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    61ac:	e1 ea       	ldi	r30, 0xA1	; 161
    61ae:	f0 e0       	ldi	r31, 0x00	; 0
    61b0:	80 81       	ld	r24, Z
    61b2:	82 60       	ori	r24, 0x02	; 2
    61b4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    61b6:	80 81       	ld	r24, Z
    61b8:	81 60       	ori	r24, 0x01	; 1
    61ba:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    61bc:	e0 ea       	ldi	r30, 0xA0	; 160
    61be:	f0 e0       	ldi	r31, 0x00	; 0
    61c0:	80 81       	ld	r24, Z
    61c2:	81 60       	ori	r24, 0x01	; 1
    61c4:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    61c6:	e1 e2       	ldi	r30, 0x21	; 33
    61c8:	f1 e0       	ldi	r31, 0x01	; 1
    61ca:	80 81       	ld	r24, Z
    61cc:	82 60       	ori	r24, 0x02	; 2
    61ce:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    61d0:	80 81       	ld	r24, Z
    61d2:	81 60       	ori	r24, 0x01	; 1
    61d4:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    61d6:	e0 e2       	ldi	r30, 0x20	; 32
    61d8:	f1 e0       	ldi	r31, 0x01	; 1
    61da:	80 81       	ld	r24, Z
    61dc:	81 60       	ori	r24, 0x01	; 1
    61de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    61e0:	ea e7       	ldi	r30, 0x7A	; 122
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	80 81       	ld	r24, Z
    61e6:	84 60       	ori	r24, 0x04	; 4
    61e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    61ea:	80 81       	ld	r24, Z
    61ec:	82 60       	ori	r24, 0x02	; 2
    61ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    61f0:	80 81       	ld	r24, Z
    61f2:	81 60       	ori	r24, 0x01	; 1
    61f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    61f6:	80 81       	ld	r24, Z
    61f8:	80 68       	ori	r24, 0x80	; 128
    61fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    61fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    6200:	08 95       	ret

00006202 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	fc 01       	movw	r30, r24
    6206:	31 97       	sbiw	r30, 0x01	; 1
    6208:	e2 31       	cpi	r30, 0x12	; 18
    620a:	f1 05       	cpc	r31, r1
    620c:	08 f0       	brcs	.+2      	; 0x6210 <turnOffPWM+0xe>
    620e:	4d c0       	rjmp	.+154    	; 0x62aa <turnOffPWM+0xa8>
    6210:	88 27       	eor	r24, r24
    6212:	ee 58       	subi	r30, 0x8E	; 142
    6214:	ff 4f       	sbci	r31, 0xFF	; 255
    6216:	8f 4f       	sbci	r24, 0xFF	; 255
    6218:	91 c3       	rjmp	.+1826   	; 0x693c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    621a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    621e:	8f 77       	andi	r24, 0x7F	; 127
    6220:	03 c0       	rjmp	.+6      	; 0x6228 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6222:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6226:	8f 7d       	andi	r24, 0xDF	; 223
    6228:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    622c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    622e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6232:	87 7f       	andi	r24, 0xF7	; 247
    6234:	f9 cf       	rjmp	.-14     	; 0x6228 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6236:	84 b5       	in	r24, 0x24	; 36
    6238:	8f 77       	andi	r24, 0x7F	; 127
    623a:	02 c0       	rjmp	.+4      	; 0x6240 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    623c:	84 b5       	in	r24, 0x24	; 36
    623e:	8f 7d       	andi	r24, 0xDF	; 223
    6240:	84 bd       	out	0x24, r24	; 36
    6242:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6244:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6248:	8f 77       	andi	r24, 0x7F	; 127
    624a:	03 c0       	rjmp	.+6      	; 0x6252 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    624c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6250:	8f 7d       	andi	r24, 0xDF	; 223
    6252:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6256:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6258:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    625c:	8f 77       	andi	r24, 0x7F	; 127
    625e:	07 c0       	rjmp	.+14     	; 0x626e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6260:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6264:	8f 7d       	andi	r24, 0xDF	; 223
    6266:	03 c0       	rjmp	.+6      	; 0x626e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6268:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    626c:	87 7f       	andi	r24, 0xF7	; 247
    626e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6272:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6274:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6278:	8f 77       	andi	r24, 0x7F	; 127
    627a:	07 c0       	rjmp	.+14     	; 0x628a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    627c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6280:	8f 7d       	andi	r24, 0xDF	; 223
    6282:	03 c0       	rjmp	.+6      	; 0x628a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6284:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6288:	87 7f       	andi	r24, 0xF7	; 247
    628a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    628e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6290:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6294:	8f 77       	andi	r24, 0x7F	; 127
    6296:	07 c0       	rjmp	.+14     	; 0x62a6 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6298:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    629c:	8f 7d       	andi	r24, 0xDF	; 223
    629e:	03 c0       	rjmp	.+6      	; 0x62a6 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    62a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    62a4:	87 7f       	andi	r24, 0xF7	; 247
    62a6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    62aa:	08 95       	ret

000062ac <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    62ac:	cf 93       	push	r28
    62ae:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	fc 01       	movw	r30, r24
    62b4:	e2 5b       	subi	r30, 0xB2	; 178
    62b6:	fe 4f       	sbci	r31, 0xFE	; 254
    62b8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    62ba:	fc 01       	movw	r30, r24
    62bc:	ec 56       	subi	r30, 0x6C	; 108
    62be:	fe 4f       	sbci	r31, 0xFE	; 254
    62c0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    62c2:	88 23       	and	r24, r24
    62c4:	61 f1       	breq	.+88     	; 0x631e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	88 0f       	add	r24, r24
    62ca:	99 1f       	adc	r25, r25
    62cc:	fc 01       	movw	r30, r24
    62ce:	e2 5f       	subi	r30, 0xF2	; 242
    62d0:	fd 4f       	sbci	r31, 0xFD	; 253
    62d2:	c5 91       	lpm	r28, Z+
    62d4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    62d6:	fc 01       	movw	r30, r24
    62d8:	ec 50       	subi	r30, 0x0C	; 12
    62da:	fe 4f       	sbci	r31, 0xFE	; 254
    62dc:	a5 91       	lpm	r26, Z+
    62de:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    62e0:	61 11       	cpse	r22, r1
    62e2:	09 c0       	rjmp	.+18     	; 0x62f6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    62e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    62e6:	f8 94       	cli
		*reg &= ~bit;
    62e8:	88 81       	ld	r24, Y
    62ea:	20 95       	com	r18
    62ec:	82 23       	and	r24, r18
    62ee:	88 83       	st	Y, r24
		*out &= ~bit;
    62f0:	ec 91       	ld	r30, X
    62f2:	2e 23       	and	r18, r30
    62f4:	0b c0       	rjmp	.+22     	; 0x630c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    62f6:	62 30       	cpi	r22, 0x02	; 2
    62f8:	61 f4       	brne	.+24     	; 0x6312 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    62fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    62fc:	f8 94       	cli
		*reg &= ~bit;
    62fe:	88 81       	ld	r24, Y
    6300:	32 2f       	mov	r19, r18
    6302:	30 95       	com	r19
    6304:	83 23       	and	r24, r19
    6306:	88 83       	st	Y, r24
		*out |= bit;
    6308:	ec 91       	ld	r30, X
    630a:	2e 2b       	or	r18, r30
    630c:	2c 93       	st	X, r18
		SREG = oldSREG;
    630e:	9f bf       	out	0x3f, r25	; 63
    6310:	06 c0       	rjmp	.+12     	; 0x631e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6312:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6314:	f8 94       	cli
		*reg |= bit;
    6316:	e8 81       	ld	r30, Y
    6318:	2e 2b       	or	r18, r30
    631a:	28 83       	st	Y, r18
		SREG = oldSREG;
    631c:	8f bf       	out	0x3f, r24	; 63
	}
}
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	08 95       	ret

00006324 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6324:	1f 93       	push	r17
    6326:	cf 93       	push	r28
    6328:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    632a:	28 2f       	mov	r18, r24
    632c:	30 e0       	ldi	r19, 0x00	; 0
    632e:	f9 01       	movw	r30, r18
    6330:	e8 5f       	subi	r30, 0xF8	; 248
    6332:	fe 4f       	sbci	r31, 0xFE	; 254
    6334:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6336:	f9 01       	movw	r30, r18
    6338:	e2 5b       	subi	r30, 0xB2	; 178
    633a:	fe 4f       	sbci	r31, 0xFE	; 254
    633c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    633e:	f9 01       	movw	r30, r18
    6340:	ec 56       	subi	r30, 0x6C	; 108
    6342:	fe 4f       	sbci	r31, 0xFE	; 254
    6344:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6346:	cc 23       	and	r28, r28
    6348:	b9 f0       	breq	.+46     	; 0x6378 <digitalWrite+0x54>
    634a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    634c:	81 11       	cpse	r24, r1
    634e:	59 df       	rcall	.-334    	; 0x6202 <turnOffPWM>

	out = portOutputRegister(port);
    6350:	ec 2f       	mov	r30, r28
    6352:	f0 e0       	ldi	r31, 0x00	; 0
    6354:	ee 0f       	add	r30, r30
    6356:	ff 1f       	adc	r31, r31
    6358:	ec 50       	subi	r30, 0x0C	; 12
    635a:	fe 4f       	sbci	r31, 0xFE	; 254
    635c:	a5 91       	lpm	r26, Z+
    635e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6360:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6362:	f8 94       	cli

	if (val == LOW) {
    6364:	11 11       	cpse	r17, r1
    6366:	04 c0       	rjmp	.+8      	; 0x6370 <digitalWrite+0x4c>
		*out &= ~bit;
    6368:	8c 91       	ld	r24, X
    636a:	d0 95       	com	r29
    636c:	d8 23       	and	r29, r24
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <digitalWrite+0x50>
	} else {
		*out |= bit;
    6370:	ec 91       	ld	r30, X
    6372:	de 2b       	or	r29, r30
    6374:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6376:	9f bf       	out	0x3f, r25	; 63
}
    6378:	df 91       	pop	r29
    637a:	cf 91       	pop	r28
    637c:	1f 91       	pop	r17
    637e:	08 95       	ret

00006380 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6380:	cf 93       	push	r28
    6382:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6384:	28 2f       	mov	r18, r24
    6386:	30 e0       	ldi	r19, 0x00	; 0
    6388:	f9 01       	movw	r30, r18
    638a:	e8 5f       	subi	r30, 0xF8	; 248
    638c:	fe 4f       	sbci	r31, 0xFE	; 254
    638e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6390:	f9 01       	movw	r30, r18
    6392:	e2 5b       	subi	r30, 0xB2	; 178
    6394:	fe 4f       	sbci	r31, 0xFE	; 254
    6396:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6398:	f9 01       	movw	r30, r18
    639a:	ec 56       	subi	r30, 0x6C	; 108
    639c:	fe 4f       	sbci	r31, 0xFE	; 254
    639e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    63a0:	cc 23       	and	r28, r28
    63a2:	89 f0       	breq	.+34     	; 0x63c6 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    63a4:	81 11       	cpse	r24, r1
    63a6:	2d df       	rcall	.-422    	; 0x6202 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    63a8:	ec 2f       	mov	r30, r28
    63aa:	f0 e0       	ldi	r31, 0x00	; 0
    63ac:	ee 0f       	add	r30, r30
    63ae:	ff 1f       	adc	r31, r31
    63b0:	e6 52       	subi	r30, 0x26	; 38
    63b2:	fe 4f       	sbci	r31, 0xFE	; 254
    63b4:	a5 91       	lpm	r26, Z+
    63b6:	b4 91       	lpm	r27, Z
    63b8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    63ba:	ed 23       	and	r30, r29
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	21 f4       	brne	.+8      	; 0x63ca <digitalRead+0x4a>
    63c2:	80 e0       	ldi	r24, 0x00	; 0
    63c4:	02 c0       	rjmp	.+4      	; 0x63ca <digitalRead+0x4a>
    63c6:	80 e0       	ldi	r24, 0x00	; 0
    63c8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    63ca:	df 91       	pop	r29
    63cc:	cf 91       	pop	r28
    63ce:	08 95       	ret

000063d0 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    63d0:	4f 92       	push	r4
    63d2:	5f 92       	push	r5
    63d4:	6f 92       	push	r6
    63d6:	7f 92       	push	r7
    63d8:	af 92       	push	r10
    63da:	bf 92       	push	r11
    63dc:	cf 92       	push	r12
    63de:	df 92       	push	r13
    63e0:	ef 92       	push	r14
    63e2:	ff 92       	push	r15
    63e4:	0f 93       	push	r16
    63e6:	1f 93       	push	r17
    63e8:	cf 93       	push	r28
    63ea:	df 93       	push	r29
    63ec:	cd b7       	in	r28, 0x3d	; 61
    63ee:	de b7       	in	r29, 0x3e	; 62
    63f0:	29 01       	movw	r4, r18
    63f2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    63f4:	9b 01       	movw	r18, r22
    63f6:	ac 01       	movw	r20, r24
    63f8:	24 19       	sub	r18, r4
    63fa:	35 09       	sbc	r19, r5
    63fc:	46 09       	sbc	r20, r6
    63fe:	57 09       	sbc	r21, r7
    6400:	8a 89       	ldd	r24, Y+18	; 0x12
    6402:	9b 89       	ldd	r25, Y+19	; 0x13
    6404:	ac 89       	ldd	r26, Y+20	; 0x14
    6406:	bd 89       	ldd	r27, Y+21	; 0x15
    6408:	bc 01       	movw	r22, r24
    640a:	cd 01       	movw	r24, r26
    640c:	6a 19       	sub	r22, r10
    640e:	7b 09       	sbc	r23, r11
    6410:	8c 09       	sbc	r24, r12
    6412:	9d 09       	sbc	r25, r13
    6414:	46 d2       	rcall	.+1164   	; 0x68a2 <__mulsi3>
    6416:	a8 01       	movw	r20, r16
    6418:	97 01       	movw	r18, r14
    641a:	24 19       	sub	r18, r4
    641c:	35 09       	sbc	r19, r5
    641e:	46 09       	sbc	r20, r6
    6420:	57 09       	sbc	r21, r7
    6422:	70 d2       	rcall	.+1248   	; 0x6904 <__divmodsi4>
    6424:	ca 01       	movw	r24, r20
    6426:	b9 01       	movw	r22, r18
    6428:	6a 0d       	add	r22, r10
    642a:	7b 1d       	adc	r23, r11
    642c:	8c 1d       	adc	r24, r12
    642e:	9d 1d       	adc	r25, r13
}
    6430:	df 91       	pop	r29
    6432:	cf 91       	pop	r28
    6434:	1f 91       	pop	r17
    6436:	0f 91       	pop	r16
    6438:	ff 90       	pop	r15
    643a:	ef 90       	pop	r14
    643c:	df 90       	pop	r13
    643e:	cf 90       	pop	r12
    6440:	bf 90       	pop	r11
    6442:	af 90       	pop	r10
    6444:	7f 90       	pop	r7
    6446:	6f 90       	pop	r6
    6448:	5f 90       	pop	r5
    644a:	4f 90       	pop	r4
    644c:	08 95       	ret

0000644e <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    644e:	08 95       	ret

00006450 <_ZN6StringD1Ev>:
    6450:	fc 01       	movw	r30, r24
    6452:	80 81       	ld	r24, Z
    6454:	91 81       	ldd	r25, Z+1	; 0x01
    6456:	00 97       	sbiw	r24, 0x00	; 0
    6458:	09 f0       	breq	.+2      	; 0x645c <_ZN6StringD1Ev+0xc>
    645a:	29 c3       	rjmp	.+1618   	; 0x6aae <free>
    645c:	08 95       	ret

0000645e <_ZN6String10invalidateEv>:
    645e:	cf 93       	push	r28
    6460:	df 93       	push	r29
    6462:	ec 01       	movw	r28, r24
    6464:	88 81       	ld	r24, Y
    6466:	99 81       	ldd	r25, Y+1	; 0x01
    6468:	00 97       	sbiw	r24, 0x00	; 0
    646a:	09 f0       	breq	.+2      	; 0x646e <_ZN6String10invalidateEv+0x10>
    646c:	20 d3       	rcall	.+1600   	; 0x6aae <free>
    646e:	19 82       	std	Y+1, r1	; 0x01
    6470:	18 82       	st	Y, r1
    6472:	1d 82       	std	Y+5, r1	; 0x05
    6474:	1c 82       	std	Y+4, r1	; 0x04
    6476:	1b 82       	std	Y+3, r1	; 0x03
    6478:	1a 82       	std	Y+2, r1	; 0x02
    647a:	df 91       	pop	r29
    647c:	cf 91       	pop	r28
    647e:	08 95       	ret

00006480 <_ZN6String12changeBufferEj>:
    6480:	0f 93       	push	r16
    6482:	1f 93       	push	r17
    6484:	cf 93       	push	r28
    6486:	df 93       	push	r29
    6488:	ec 01       	movw	r28, r24
    648a:	8b 01       	movw	r16, r22
    648c:	6f 5f       	subi	r22, 0xFF	; 255
    648e:	7f 4f       	sbci	r23, 0xFF	; 255
    6490:	88 81       	ld	r24, Y
    6492:	99 81       	ldd	r25, Y+1	; 0x01
    6494:	95 d3       	rcall	.+1834   	; 0x6bc0 <realloc>
    6496:	00 97       	sbiw	r24, 0x00	; 0
    6498:	31 f0       	breq	.+12     	; 0x64a6 <_ZN6String12changeBufferEj+0x26>
    649a:	99 83       	std	Y+1, r25	; 0x01
    649c:	88 83       	st	Y, r24
    649e:	1b 83       	std	Y+3, r17	; 0x03
    64a0:	0a 83       	std	Y+2, r16	; 0x02
    64a2:	81 e0       	ldi	r24, 0x01	; 1
    64a4:	01 c0       	rjmp	.+2      	; 0x64a8 <_ZN6String12changeBufferEj+0x28>
    64a6:	80 e0       	ldi	r24, 0x00	; 0
    64a8:	df 91       	pop	r29
    64aa:	cf 91       	pop	r28
    64ac:	1f 91       	pop	r17
    64ae:	0f 91       	pop	r16
    64b0:	08 95       	ret

000064b2 <_ZN6String7reserveEj>:
    64b2:	cf 93       	push	r28
    64b4:	df 93       	push	r29
    64b6:	ec 01       	movw	r28, r24
    64b8:	88 81       	ld	r24, Y
    64ba:	99 81       	ldd	r25, Y+1	; 0x01
    64bc:	89 2b       	or	r24, r25
    64be:	29 f0       	breq	.+10     	; 0x64ca <_ZN6String7reserveEj+0x18>
    64c0:	8a 81       	ldd	r24, Y+2	; 0x02
    64c2:	9b 81       	ldd	r25, Y+3	; 0x03
    64c4:	86 17       	cp	r24, r22
    64c6:	97 07       	cpc	r25, r23
    64c8:	58 f4       	brcc	.+22     	; 0x64e0 <_ZN6String7reserveEj+0x2e>
    64ca:	ce 01       	movw	r24, r28
    64cc:	d9 df       	rcall	.-78     	; 0x6480 <_ZN6String12changeBufferEj>
    64ce:	88 23       	and	r24, r24
    64d0:	41 f0       	breq	.+16     	; 0x64e2 <_ZN6String7reserveEj+0x30>
    64d2:	8c 81       	ldd	r24, Y+4	; 0x04
    64d4:	9d 81       	ldd	r25, Y+5	; 0x05
    64d6:	89 2b       	or	r24, r25
    64d8:	19 f4       	brne	.+6      	; 0x64e0 <_ZN6String7reserveEj+0x2e>
    64da:	e8 81       	ld	r30, Y
    64dc:	f9 81       	ldd	r31, Y+1	; 0x01
    64de:	10 82       	st	Z, r1
    64e0:	81 e0       	ldi	r24, 0x01	; 1
    64e2:	df 91       	pop	r29
    64e4:	cf 91       	pop	r28
    64e6:	08 95       	ret

000064e8 <_ZN6String4copyEPKcj>:
    64e8:	ef 92       	push	r14
    64ea:	ff 92       	push	r15
    64ec:	0f 93       	push	r16
    64ee:	1f 93       	push	r17
    64f0:	cf 93       	push	r28
    64f2:	df 93       	push	r29
    64f4:	ec 01       	movw	r28, r24
    64f6:	7b 01       	movw	r14, r22
    64f8:	8a 01       	movw	r16, r20
    64fa:	ba 01       	movw	r22, r20
    64fc:	da df       	rcall	.-76     	; 0x64b2 <_ZN6String7reserveEj>
    64fe:	81 11       	cpse	r24, r1
    6500:	03 c0       	rjmp	.+6      	; 0x6508 <_ZN6String4copyEPKcj+0x20>
    6502:	ce 01       	movw	r24, r28
    6504:	ac df       	rcall	.-168    	; 0x645e <_ZN6String10invalidateEv>
    6506:	06 c0       	rjmp	.+12     	; 0x6514 <_ZN6String4copyEPKcj+0x2c>
    6508:	1d 83       	std	Y+5, r17	; 0x05
    650a:	0c 83       	std	Y+4, r16	; 0x04
    650c:	b7 01       	movw	r22, r14
    650e:	88 81       	ld	r24, Y
    6510:	99 81       	ldd	r25, Y+1	; 0x01
    6512:	5b d4       	rcall	.+2230   	; 0x6dca <strcpy>
    6514:	ce 01       	movw	r24, r28
    6516:	df 91       	pop	r29
    6518:	cf 91       	pop	r28
    651a:	1f 91       	pop	r17
    651c:	0f 91       	pop	r16
    651e:	ff 90       	pop	r15
    6520:	ef 90       	pop	r14
    6522:	08 95       	ret

00006524 <_ZN6StringC1EPKc>:
    6524:	fc 01       	movw	r30, r24
    6526:	11 82       	std	Z+1, r1	; 0x01
    6528:	10 82       	st	Z, r1
    652a:	13 82       	std	Z+3, r1	; 0x03
    652c:	12 82       	std	Z+2, r1	; 0x02
    652e:	15 82       	std	Z+5, r1	; 0x05
    6530:	14 82       	std	Z+4, r1	; 0x04
    6532:	61 15       	cp	r22, r1
    6534:	71 05       	cpc	r23, r1
    6536:	49 f0       	breq	.+18     	; 0x654a <_ZN6StringC1EPKc+0x26>
    6538:	fb 01       	movw	r30, r22
    653a:	01 90       	ld	r0, Z+
    653c:	00 20       	and	r0, r0
    653e:	e9 f7       	brne	.-6      	; 0x653a <_ZN6StringC1EPKc+0x16>
    6540:	31 97       	sbiw	r30, 0x01	; 1
    6542:	af 01       	movw	r20, r30
    6544:	46 1b       	sub	r20, r22
    6546:	57 0b       	sbc	r21, r23
    6548:	cf cf       	rjmp	.-98     	; 0x64e8 <_ZN6String4copyEPKcj>
    654a:	08 95       	ret

0000654c <_ZN6String4moveERS_>:
    654c:	0f 93       	push	r16
    654e:	1f 93       	push	r17
    6550:	cf 93       	push	r28
    6552:	df 93       	push	r29
    6554:	8c 01       	movw	r16, r24
    6556:	eb 01       	movw	r28, r22
    6558:	fc 01       	movw	r30, r24
    655a:	80 81       	ld	r24, Z
    655c:	91 81       	ldd	r25, Z+1	; 0x01
    655e:	00 97       	sbiw	r24, 0x00	; 0
    6560:	c1 f0       	breq	.+48     	; 0x6592 <_ZN6String4moveERS_+0x46>
    6562:	68 81       	ld	r22, Y
    6564:	79 81       	ldd	r23, Y+1	; 0x01
    6566:	61 15       	cp	r22, r1
    6568:	71 05       	cpc	r23, r1
    656a:	91 f0       	breq	.+36     	; 0x6590 <_ZN6String4moveERS_+0x44>
    656c:	27 e2       	ldi	r18, 0x27	; 39
    656e:	32 e3       	ldi	r19, 0x32	; 50
    6570:	23 2b       	or	r18, r19
    6572:	71 f0       	breq	.+28     	; 0x6590 <_ZN6String4moveERS_+0x44>
    6574:	42 81       	ldd	r20, Z+2	; 0x02
    6576:	53 81       	ldd	r21, Z+3	; 0x03
    6578:	2c 81       	ldd	r18, Y+4	; 0x04
    657a:	3d 81       	ldd	r19, Y+5	; 0x05
    657c:	42 17       	cp	r20, r18
    657e:	53 07       	cpc	r21, r19
    6580:	38 f0       	brcs	.+14     	; 0x6590 <_ZN6String4moveERS_+0x44>
    6582:	23 d4       	rcall	.+2118   	; 0x6dca <strcpy>
    6584:	8c 81       	ldd	r24, Y+4	; 0x04
    6586:	9d 81       	ldd	r25, Y+5	; 0x05
    6588:	f8 01       	movw	r30, r16
    658a:	95 83       	std	Z+5, r25	; 0x05
    658c:	84 83       	std	Z+4, r24	; 0x04
    658e:	12 c0       	rjmp	.+36     	; 0x65b4 <_ZN6String4moveERS_+0x68>
    6590:	8e d2       	rcall	.+1308   	; 0x6aae <free>
    6592:	88 81       	ld	r24, Y
    6594:	99 81       	ldd	r25, Y+1	; 0x01
    6596:	f8 01       	movw	r30, r16
    6598:	91 83       	std	Z+1, r25	; 0x01
    659a:	80 83       	st	Z, r24
    659c:	8a 81       	ldd	r24, Y+2	; 0x02
    659e:	9b 81       	ldd	r25, Y+3	; 0x03
    65a0:	93 83       	std	Z+3, r25	; 0x03
    65a2:	82 83       	std	Z+2, r24	; 0x02
    65a4:	8c 81       	ldd	r24, Y+4	; 0x04
    65a6:	9d 81       	ldd	r25, Y+5	; 0x05
    65a8:	95 83       	std	Z+5, r25	; 0x05
    65aa:	84 83       	std	Z+4, r24	; 0x04
    65ac:	19 82       	std	Y+1, r1	; 0x01
    65ae:	18 82       	st	Y, r1
    65b0:	1b 82       	std	Y+3, r1	; 0x03
    65b2:	1a 82       	std	Y+2, r1	; 0x02
    65b4:	1d 82       	std	Y+5, r1	; 0x05
    65b6:	1c 82       	std	Y+4, r1	; 0x04
    65b8:	df 91       	pop	r29
    65ba:	cf 91       	pop	r28
    65bc:	1f 91       	pop	r17
    65be:	0f 91       	pop	r16
    65c0:	08 95       	ret

000065c2 <_ZN6StringaSEOS_>:
    65c2:	cf 93       	push	r28
    65c4:	df 93       	push	r29
    65c6:	ec 01       	movw	r28, r24
    65c8:	86 17       	cp	r24, r22
    65ca:	97 07       	cpc	r25, r23
    65cc:	09 f0       	breq	.+2      	; 0x65d0 <_ZN6StringaSEOS_+0xe>
    65ce:	be df       	rcall	.-132    	; 0x654c <_ZN6String4moveERS_>
    65d0:	ce 01       	movw	r24, r28
    65d2:	df 91       	pop	r29
    65d4:	cf 91       	pop	r28
    65d6:	08 95       	ret

000065d8 <_ZN6StringaSEPKc>:
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
    65dc:	ec 01       	movw	r28, r24
    65de:	61 15       	cp	r22, r1
    65e0:	71 05       	cpc	r23, r1
    65e2:	51 f0       	breq	.+20     	; 0x65f8 <_ZN6StringaSEPKc+0x20>
    65e4:	fb 01       	movw	r30, r22
    65e6:	01 90       	ld	r0, Z+
    65e8:	00 20       	and	r0, r0
    65ea:	e9 f7       	brne	.-6      	; 0x65e6 <_ZN6StringaSEPKc+0xe>
    65ec:	31 97       	sbiw	r30, 0x01	; 1
    65ee:	af 01       	movw	r20, r30
    65f0:	46 1b       	sub	r20, r22
    65f2:	57 0b       	sbc	r21, r23
    65f4:	79 df       	rcall	.-270    	; 0x64e8 <_ZN6String4copyEPKcj>
    65f6:	01 c0       	rjmp	.+2      	; 0x65fa <_ZN6StringaSEPKc+0x22>
    65f8:	32 df       	rcall	.-412    	; 0x645e <_ZN6String10invalidateEv>
    65fa:	ce 01       	movw	r24, r28
    65fc:	df 91       	pop	r29
    65fe:	cf 91       	pop	r28
    6600:	08 95       	ret

00006602 <_ZN6StringC1Ehh>:
    6602:	0f 93       	push	r16
    6604:	1f 93       	push	r17
    6606:	cf 93       	push	r28
    6608:	df 93       	push	r29
    660a:	cd b7       	in	r28, 0x3d	; 61
    660c:	de b7       	in	r29, 0x3e	; 62
    660e:	29 97       	sbiw	r28, 0x09	; 9
    6610:	0f b6       	in	r0, 0x3f	; 63
    6612:	f8 94       	cli
    6614:	de bf       	out	0x3e, r29	; 62
    6616:	0f be       	out	0x3f, r0	; 63
    6618:	cd bf       	out	0x3d, r28	; 61
    661a:	8c 01       	movw	r16, r24
    661c:	86 2f       	mov	r24, r22
    661e:	f8 01       	movw	r30, r16
    6620:	11 82       	std	Z+1, r1	; 0x01
    6622:	10 82       	st	Z, r1
    6624:	13 82       	std	Z+3, r1	; 0x03
    6626:	12 82       	std	Z+2, r1	; 0x02
    6628:	15 82       	std	Z+5, r1	; 0x05
    662a:	14 82       	std	Z+4, r1	; 0x04
    662c:	50 e0       	ldi	r21, 0x00	; 0
    662e:	be 01       	movw	r22, r28
    6630:	6f 5f       	subi	r22, 0xFF	; 255
    6632:	7f 4f       	sbci	r23, 0xFF	; 255
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	f2 d3       	rcall	.+2020   	; 0x6e1c <utoa>
    6638:	be 01       	movw	r22, r28
    663a:	6f 5f       	subi	r22, 0xFF	; 255
    663c:	7f 4f       	sbci	r23, 0xFF	; 255
    663e:	c8 01       	movw	r24, r16
    6640:	cb df       	rcall	.-106    	; 0x65d8 <_ZN6StringaSEPKc>
    6642:	29 96       	adiw	r28, 0x09	; 9
    6644:	0f b6       	in	r0, 0x3f	; 63
    6646:	f8 94       	cli
    6648:	de bf       	out	0x3e, r29	; 62
    664a:	0f be       	out	0x3f, r0	; 63
    664c:	cd bf       	out	0x3d, r28	; 61
    664e:	df 91       	pop	r29
    6650:	cf 91       	pop	r28
    6652:	1f 91       	pop	r17
    6654:	0f 91       	pop	r16
    6656:	08 95       	ret

00006658 <_ZN6String6concatEPKcj>:
    6658:	ef 92       	push	r14
    665a:	ff 92       	push	r15
    665c:	0f 93       	push	r16
    665e:	1f 93       	push	r17
    6660:	cf 93       	push	r28
    6662:	df 93       	push	r29
    6664:	61 15       	cp	r22, r1
    6666:	71 05       	cpc	r23, r1
    6668:	11 f4       	brne	.+4      	; 0x666e <_ZN6String6concatEPKcj+0x16>
    666a:	80 e0       	ldi	r24, 0x00	; 0
    666c:	1a c0       	rjmp	.+52     	; 0x66a2 <_ZN6String6concatEPKcj+0x4a>
    666e:	41 15       	cp	r20, r1
    6670:	51 05       	cpc	r21, r1
    6672:	b1 f0       	breq	.+44     	; 0x66a0 <_ZN6String6concatEPKcj+0x48>
    6674:	7b 01       	movw	r14, r22
    6676:	ec 01       	movw	r28, r24
    6678:	8c 81       	ldd	r24, Y+4	; 0x04
    667a:	9d 81       	ldd	r25, Y+5	; 0x05
    667c:	8a 01       	movw	r16, r20
    667e:	08 0f       	add	r16, r24
    6680:	19 1f       	adc	r17, r25
    6682:	b8 01       	movw	r22, r16
    6684:	ce 01       	movw	r24, r28
    6686:	15 df       	rcall	.-470    	; 0x64b2 <_ZN6String7reserveEj>
    6688:	88 23       	and	r24, r24
    668a:	79 f3       	breq	.-34     	; 0x666a <_ZN6String6concatEPKcj+0x12>
    668c:	28 81       	ld	r18, Y
    668e:	39 81       	ldd	r19, Y+1	; 0x01
    6690:	8c 81       	ldd	r24, Y+4	; 0x04
    6692:	9d 81       	ldd	r25, Y+5	; 0x05
    6694:	b7 01       	movw	r22, r14
    6696:	82 0f       	add	r24, r18
    6698:	93 1f       	adc	r25, r19
    669a:	97 d3       	rcall	.+1838   	; 0x6dca <strcpy>
    669c:	1d 83       	std	Y+5, r17	; 0x05
    669e:	0c 83       	std	Y+4, r16	; 0x04
    66a0:	81 e0       	ldi	r24, 0x01	; 1
    66a2:	df 91       	pop	r29
    66a4:	cf 91       	pop	r28
    66a6:	1f 91       	pop	r17
    66a8:	0f 91       	pop	r16
    66aa:	ff 90       	pop	r15
    66ac:	ef 90       	pop	r14
    66ae:	08 95       	ret

000066b0 <_ZN6String6concatERKS_>:
    66b0:	fb 01       	movw	r30, r22
    66b2:	44 81       	ldd	r20, Z+4	; 0x04
    66b4:	55 81       	ldd	r21, Z+5	; 0x05
    66b6:	60 81       	ld	r22, Z
    66b8:	71 81       	ldd	r23, Z+1	; 0x01
    66ba:	ce cf       	rjmp	.-100    	; 0x6658 <_ZN6String6concatEPKcj>

000066bc <_ZN6String6concatEc>:
    66bc:	cf 93       	push	r28
    66be:	df 93       	push	r29
    66c0:	1f 92       	push	r1
    66c2:	1f 92       	push	r1
    66c4:	cd b7       	in	r28, 0x3d	; 61
    66c6:	de b7       	in	r29, 0x3e	; 62
    66c8:	69 83       	std	Y+1, r22	; 0x01
    66ca:	1a 82       	std	Y+2, r1	; 0x02
    66cc:	41 e0       	ldi	r20, 0x01	; 1
    66ce:	50 e0       	ldi	r21, 0x00	; 0
    66d0:	be 01       	movw	r22, r28
    66d2:	6f 5f       	subi	r22, 0xFF	; 255
    66d4:	7f 4f       	sbci	r23, 0xFF	; 255
    66d6:	c0 df       	rcall	.-128    	; 0x6658 <_ZN6String6concatEPKcj>
    66d8:	0f 90       	pop	r0
    66da:	0f 90       	pop	r0
    66dc:	df 91       	pop	r29
    66de:	cf 91       	pop	r28
    66e0:	08 95       	ret

000066e2 <_ZN6String6concatEi>:
    66e2:	ef 92       	push	r14
    66e4:	ff 92       	push	r15
    66e6:	0f 93       	push	r16
    66e8:	1f 93       	push	r17
    66ea:	cf 93       	push	r28
    66ec:	df 93       	push	r29
    66ee:	cd b7       	in	r28, 0x3d	; 61
    66f0:	de b7       	in	r29, 0x3e	; 62
    66f2:	28 97       	sbiw	r28, 0x08	; 8
    66f4:	0f b6       	in	r0, 0x3f	; 63
    66f6:	f8 94       	cli
    66f8:	de bf       	out	0x3e, r29	; 62
    66fa:	0f be       	out	0x3f, r0	; 63
    66fc:	cd bf       	out	0x3d, r28	; 61
    66fe:	7c 01       	movw	r14, r24
    6700:	cb 01       	movw	r24, r22
    6702:	4a e0       	ldi	r20, 0x0A	; 10
    6704:	8e 01       	movw	r16, r28
    6706:	0f 5f       	subi	r16, 0xFF	; 255
    6708:	1f 4f       	sbci	r17, 0xFF	; 255
    670a:	b8 01       	movw	r22, r16
    670c:	7d d3       	rcall	.+1786   	; 0x6e08 <__itoa_ncheck>
    670e:	f8 01       	movw	r30, r16
    6710:	01 90       	ld	r0, Z+
    6712:	00 20       	and	r0, r0
    6714:	e9 f7       	brne	.-6      	; 0x6710 <_ZN6String6concatEi+0x2e>
    6716:	31 97       	sbiw	r30, 0x01	; 1
    6718:	af 01       	movw	r20, r30
    671a:	40 1b       	sub	r20, r16
    671c:	51 0b       	sbc	r21, r17
    671e:	b8 01       	movw	r22, r16
    6720:	c7 01       	movw	r24, r14
    6722:	9a df       	rcall	.-204    	; 0x6658 <_ZN6String6concatEPKcj>
    6724:	28 96       	adiw	r28, 0x08	; 8
    6726:	0f b6       	in	r0, 0x3f	; 63
    6728:	f8 94       	cli
    672a:	de bf       	out	0x3e, r29	; 62
    672c:	0f be       	out	0x3f, r0	; 63
    672e:	cd bf       	out	0x3d, r28	; 61
    6730:	df 91       	pop	r29
    6732:	cf 91       	pop	r28
    6734:	1f 91       	pop	r17
    6736:	0f 91       	pop	r16
    6738:	ff 90       	pop	r15
    673a:	ef 90       	pop	r14
    673c:	08 95       	ret

0000673e <_ZNK6String9compareToERKS_>:
    673e:	cf 93       	push	r28
    6740:	df 93       	push	r29
    6742:	dc 01       	movw	r26, r24
    6744:	ed 91       	ld	r30, X+
    6746:	fc 91       	ld	r31, X
    6748:	eb 01       	movw	r28, r22
    674a:	a8 81       	ld	r26, Y
    674c:	b9 81       	ldd	r27, Y+1	; 0x01
    674e:	30 97       	sbiw	r30, 0x00	; 0
    6750:	11 f0       	breq	.+4      	; 0x6756 <_ZNK6String9compareToERKS_+0x18>
    6752:	10 97       	sbiw	r26, 0x00	; 0
    6754:	c9 f4       	brne	.+50     	; 0x6788 <_ZNK6String9compareToERKS_+0x4a>
    6756:	10 97       	sbiw	r26, 0x00	; 0
    6758:	59 f0       	breq	.+22     	; 0x6770 <_ZNK6String9compareToERKS_+0x32>
    675a:	eb 01       	movw	r28, r22
    675c:	2c 81       	ldd	r18, Y+4	; 0x04
    675e:	3d 81       	ldd	r19, Y+5	; 0x05
    6760:	23 2b       	or	r18, r19
    6762:	31 f0       	breq	.+12     	; 0x6770 <_ZNK6String9compareToERKS_+0x32>
    6764:	8c 91       	ld	r24, X
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	91 95       	neg	r25
    676a:	81 95       	neg	r24
    676c:	91 09       	sbc	r25, r1
    676e:	13 c0       	rjmp	.+38     	; 0x6796 <_ZNK6String9compareToERKS_+0x58>
    6770:	30 97       	sbiw	r30, 0x00	; 0
    6772:	79 f0       	breq	.+30     	; 0x6792 <_ZNK6String9compareToERKS_+0x54>
    6774:	dc 01       	movw	r26, r24
    6776:	14 96       	adiw	r26, 0x04	; 4
    6778:	8d 91       	ld	r24, X+
    677a:	9c 91       	ld	r25, X
    677c:	15 97       	sbiw	r26, 0x05	; 5
    677e:	89 2b       	or	r24, r25
    6780:	41 f0       	breq	.+16     	; 0x6792 <_ZNK6String9compareToERKS_+0x54>
    6782:	80 81       	ld	r24, Z
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	07 c0       	rjmp	.+14     	; 0x6796 <_ZNK6String9compareToERKS_+0x58>
    6788:	bd 01       	movw	r22, r26
    678a:	cf 01       	movw	r24, r30
    678c:	df 91       	pop	r29
    678e:	cf 91       	pop	r28
    6790:	13 c3       	rjmp	.+1574   	; 0x6db8 <strcmp>
    6792:	80 e0       	ldi	r24, 0x00	; 0
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	df 91       	pop	r29
    6798:	cf 91       	pop	r28
    679a:	08 95       	ret

0000679c <_ZNK6String6equalsERKS_>:
    679c:	fc 01       	movw	r30, r24
    679e:	44 81       	ldd	r20, Z+4	; 0x04
    67a0:	55 81       	ldd	r21, Z+5	; 0x05
    67a2:	fb 01       	movw	r30, r22
    67a4:	24 81       	ldd	r18, Z+4	; 0x04
    67a6:	35 81       	ldd	r19, Z+5	; 0x05
    67a8:	42 17       	cp	r20, r18
    67aa:	53 07       	cpc	r21, r19
    67ac:	21 f4       	brne	.+8      	; 0x67b6 <_ZNK6String6equalsERKS_+0x1a>
    67ae:	c7 df       	rcall	.-114    	; 0x673e <_ZNK6String9compareToERKS_>
    67b0:	21 e0       	ldi	r18, 0x01	; 1
    67b2:	89 2b       	or	r24, r25
    67b4:	09 f0       	breq	.+2      	; 0x67b8 <_ZNK6String6equalsERKS_+0x1c>
    67b6:	20 e0       	ldi	r18, 0x00	; 0
    67b8:	82 2f       	mov	r24, r18
    67ba:	08 95       	ret

000067bc <_ZNK6String6equalsEPKc>:
    67bc:	fc 01       	movw	r30, r24
    67be:	24 81       	ldd	r18, Z+4	; 0x04
    67c0:	35 81       	ldd	r19, Z+5	; 0x05
    67c2:	23 2b       	or	r18, r19
    67c4:	31 f4       	brne	.+12     	; 0x67d2 <_ZNK6String6equalsEPKc+0x16>
    67c6:	21 e0       	ldi	r18, 0x01	; 1
    67c8:	61 15       	cp	r22, r1
    67ca:	71 05       	cpc	r23, r1
    67cc:	99 f0       	breq	.+38     	; 0x67f4 <_ZNK6String6equalsEPKc+0x38>
    67ce:	fb 01       	movw	r30, r22
    67d0:	08 c0       	rjmp	.+16     	; 0x67e2 <_ZNK6String6equalsEPKc+0x26>
    67d2:	fc 01       	movw	r30, r24
    67d4:	80 81       	ld	r24, Z
    67d6:	91 81       	ldd	r25, Z+1	; 0x01
    67d8:	61 15       	cp	r22, r1
    67da:	71 05       	cpc	r23, r1
    67dc:	31 f4       	brne	.+12     	; 0x67ea <_ZNK6String6equalsEPKc+0x2e>
    67de:	21 e0       	ldi	r18, 0x01	; 1
    67e0:	fc 01       	movw	r30, r24
    67e2:	80 81       	ld	r24, Z
    67e4:	88 23       	and	r24, r24
    67e6:	31 f0       	breq	.+12     	; 0x67f4 <_ZNK6String6equalsEPKc+0x38>
    67e8:	04 c0       	rjmp	.+8      	; 0x67f2 <_ZNK6String6equalsEPKc+0x36>
    67ea:	e6 d2       	rcall	.+1484   	; 0x6db8 <strcmp>
    67ec:	21 e0       	ldi	r18, 0x01	; 1
    67ee:	89 2b       	or	r24, r25
    67f0:	09 f0       	breq	.+2      	; 0x67f4 <_ZNK6String6equalsEPKc+0x38>
    67f2:	20 e0       	ldi	r18, 0x00	; 0
    67f4:	82 2f       	mov	r24, r18
    67f6:	08 95       	ret

000067f8 <_ZNK6String9substringEjj>:
    67f8:	bf 92       	push	r11
    67fa:	cf 92       	push	r12
    67fc:	df 92       	push	r13
    67fe:	ef 92       	push	r14
    6800:	ff 92       	push	r15
    6802:	0f 93       	push	r16
    6804:	1f 93       	push	r17
    6806:	cf 93       	push	r28
    6808:	df 93       	push	r29
    680a:	7c 01       	movw	r14, r24
    680c:	6b 01       	movw	r12, r22
    680e:	8a 01       	movw	r16, r20
    6810:	e9 01       	movw	r28, r18
    6812:	24 17       	cp	r18, r20
    6814:	35 07       	cpc	r19, r21
    6816:	20 f4       	brcc	.+8      	; 0x6820 <_ZNK6String9substringEjj+0x28>
    6818:	81 2f       	mov	r24, r17
    681a:	89 01       	movw	r16, r18
    681c:	c4 2f       	mov	r28, r20
    681e:	d8 2f       	mov	r29, r24
    6820:	61 e3       	ldi	r22, 0x31	; 49
    6822:	73 e0       	ldi	r23, 0x03	; 3
    6824:	c7 01       	movw	r24, r14
    6826:	7e de       	rcall	.-772    	; 0x6524 <_ZN6StringC1EPKc>
    6828:	d6 01       	movw	r26, r12
    682a:	14 96       	adiw	r26, 0x04	; 4
    682c:	8d 91       	ld	r24, X+
    682e:	9c 91       	ld	r25, X
    6830:	15 97       	sbiw	r26, 0x05	; 5
    6832:	08 17       	cp	r16, r24
    6834:	19 07       	cpc	r17, r25
    6836:	c0 f4       	brcc	.+48     	; 0x6868 <_ZNK6String9substringEjj+0x70>
    6838:	8c 17       	cp	r24, r28
    683a:	9d 07       	cpc	r25, r29
    683c:	08 f4       	brcc	.+2      	; 0x6840 <_ZNK6String9substringEjj+0x48>
    683e:	ec 01       	movw	r28, r24
    6840:	d6 01       	movw	r26, r12
    6842:	ed 91       	ld	r30, X+
    6844:	fc 91       	ld	r31, X
    6846:	11 97       	sbiw	r26, 0x01	; 1
    6848:	ec 0f       	add	r30, r28
    684a:	fd 1f       	adc	r31, r29
    684c:	b0 80       	ld	r11, Z
    684e:	10 82       	st	Z, r1
    6850:	6d 91       	ld	r22, X+
    6852:	7c 91       	ld	r23, X
    6854:	60 0f       	add	r22, r16
    6856:	71 1f       	adc	r23, r17
    6858:	c7 01       	movw	r24, r14
    685a:	be de       	rcall	.-644    	; 0x65d8 <_ZN6StringaSEPKc>
    685c:	d6 01       	movw	r26, r12
    685e:	ed 91       	ld	r30, X+
    6860:	fc 91       	ld	r31, X
    6862:	ec 0f       	add	r30, r28
    6864:	fd 1f       	adc	r31, r29
    6866:	b0 82       	st	Z, r11
    6868:	c7 01       	movw	r24, r14
    686a:	df 91       	pop	r29
    686c:	cf 91       	pop	r28
    686e:	1f 91       	pop	r17
    6870:	0f 91       	pop	r16
    6872:	ff 90       	pop	r15
    6874:	ef 90       	pop	r14
    6876:	df 90       	pop	r13
    6878:	cf 90       	pop	r12
    687a:	bf 90       	pop	r11
    687c:	08 95       	ret

0000687e <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    687e:	cf 93       	push	r28
    6880:	df 93       	push	r29
	if (!buffer) return;
    6882:	fc 01       	movw	r30, r24
    6884:	c0 81       	ld	r28, Z
    6886:	d1 81       	ldd	r29, Z+1	; 0x01
    6888:	20 97       	sbiw	r28, 0x00	; 0
    688a:	39 f0       	breq	.+14     	; 0x689a <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    688c:	88 81       	ld	r24, Y
    688e:	88 23       	and	r24, r24
    6890:	21 f0       	breq	.+8      	; 0x689a <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	79 d2       	rcall	.+1266   	; 0x6d88 <toupper>
    6896:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6898:	f9 cf       	rjmp	.-14     	; 0x688c <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    689a:	df 91       	pop	r29
    689c:	cf 91       	pop	r28
    689e:	08 95       	ret

000068a0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    68a0:	08 95       	ret

000068a2 <__mulsi3>:
    68a2:	db 01       	movw	r26, r22
    68a4:	8f 93       	push	r24
    68a6:	9f 93       	push	r25
    68a8:	51 d0       	rcall	.+162    	; 0x694c <__muluhisi3>
    68aa:	bf 91       	pop	r27
    68ac:	af 91       	pop	r26
    68ae:	a2 9f       	mul	r26, r18
    68b0:	80 0d       	add	r24, r0
    68b2:	91 1d       	adc	r25, r1
    68b4:	a3 9f       	mul	r26, r19
    68b6:	90 0d       	add	r25, r0
    68b8:	b2 9f       	mul	r27, r18
    68ba:	90 0d       	add	r25, r0
    68bc:	11 24       	eor	r1, r1
    68be:	08 95       	ret

000068c0 <__udivmodsi4>:
    68c0:	a1 e2       	ldi	r26, 0x21	; 33
    68c2:	1a 2e       	mov	r1, r26
    68c4:	aa 1b       	sub	r26, r26
    68c6:	bb 1b       	sub	r27, r27
    68c8:	fd 01       	movw	r30, r26
    68ca:	0d c0       	rjmp	.+26     	; 0x68e6 <__udivmodsi4_ep>

000068cc <__udivmodsi4_loop>:
    68cc:	aa 1f       	adc	r26, r26
    68ce:	bb 1f       	adc	r27, r27
    68d0:	ee 1f       	adc	r30, r30
    68d2:	ff 1f       	adc	r31, r31
    68d4:	a2 17       	cp	r26, r18
    68d6:	b3 07       	cpc	r27, r19
    68d8:	e4 07       	cpc	r30, r20
    68da:	f5 07       	cpc	r31, r21
    68dc:	20 f0       	brcs	.+8      	; 0x68e6 <__udivmodsi4_ep>
    68de:	a2 1b       	sub	r26, r18
    68e0:	b3 0b       	sbc	r27, r19
    68e2:	e4 0b       	sbc	r30, r20
    68e4:	f5 0b       	sbc	r31, r21

000068e6 <__udivmodsi4_ep>:
    68e6:	66 1f       	adc	r22, r22
    68e8:	77 1f       	adc	r23, r23
    68ea:	88 1f       	adc	r24, r24
    68ec:	99 1f       	adc	r25, r25
    68ee:	1a 94       	dec	r1
    68f0:	69 f7       	brne	.-38     	; 0x68cc <__udivmodsi4_loop>
    68f2:	60 95       	com	r22
    68f4:	70 95       	com	r23
    68f6:	80 95       	com	r24
    68f8:	90 95       	com	r25
    68fa:	9b 01       	movw	r18, r22
    68fc:	ac 01       	movw	r20, r24
    68fe:	bd 01       	movw	r22, r26
    6900:	cf 01       	movw	r24, r30
    6902:	08 95       	ret

00006904 <__divmodsi4>:
    6904:	05 2e       	mov	r0, r21
    6906:	97 fb       	bst	r25, 7
    6908:	16 f4       	brtc	.+4      	; 0x690e <__divmodsi4+0xa>
    690a:	00 94       	com	r0
    690c:	0f d0       	rcall	.+30     	; 0x692c <__negsi2>
    690e:	57 fd       	sbrc	r21, 7
    6910:	05 d0       	rcall	.+10     	; 0x691c <__divmodsi4_neg2>
    6912:	d6 df       	rcall	.-84     	; 0x68c0 <__udivmodsi4>
    6914:	07 fc       	sbrc	r0, 7
    6916:	02 d0       	rcall	.+4      	; 0x691c <__divmodsi4_neg2>
    6918:	46 f4       	brtc	.+16     	; 0x692a <__divmodsi4_exit>
    691a:	08 c0       	rjmp	.+16     	; 0x692c <__negsi2>

0000691c <__divmodsi4_neg2>:
    691c:	50 95       	com	r21
    691e:	40 95       	com	r20
    6920:	30 95       	com	r19
    6922:	21 95       	neg	r18
    6924:	3f 4f       	sbci	r19, 0xFF	; 255
    6926:	4f 4f       	sbci	r20, 0xFF	; 255
    6928:	5f 4f       	sbci	r21, 0xFF	; 255

0000692a <__divmodsi4_exit>:
    692a:	08 95       	ret

0000692c <__negsi2>:
    692c:	90 95       	com	r25
    692e:	80 95       	com	r24
    6930:	70 95       	com	r23
    6932:	61 95       	neg	r22
    6934:	7f 4f       	sbci	r23, 0xFF	; 255
    6936:	8f 4f       	sbci	r24, 0xFF	; 255
    6938:	9f 4f       	sbci	r25, 0xFF	; 255
    693a:	08 95       	ret

0000693c <__tablejump2__>:
    693c:	ee 0f       	add	r30, r30
    693e:	ff 1f       	adc	r31, r31
    6940:	88 1f       	adc	r24, r24
    6942:	8b bf       	out	0x3b, r24	; 59
    6944:	07 90       	elpm	r0, Z+
    6946:	f6 91       	elpm	r31, Z
    6948:	e0 2d       	mov	r30, r0
    694a:	19 94       	eijmp

0000694c <__muluhisi3>:
    694c:	09 d0       	rcall	.+18     	; 0x6960 <__umulhisi3>
    694e:	a5 9f       	mul	r26, r21
    6950:	90 0d       	add	r25, r0
    6952:	b4 9f       	mul	r27, r20
    6954:	90 0d       	add	r25, r0
    6956:	a4 9f       	mul	r26, r20
    6958:	80 0d       	add	r24, r0
    695a:	91 1d       	adc	r25, r1
    695c:	11 24       	eor	r1, r1
    695e:	08 95       	ret

00006960 <__umulhisi3>:
    6960:	a2 9f       	mul	r26, r18
    6962:	b0 01       	movw	r22, r0
    6964:	b3 9f       	mul	r27, r19
    6966:	c0 01       	movw	r24, r0
    6968:	a3 9f       	mul	r26, r19
    696a:	70 0d       	add	r23, r0
    696c:	81 1d       	adc	r24, r1
    696e:	11 24       	eor	r1, r1
    6970:	91 1d       	adc	r25, r1
    6972:	b2 9f       	mul	r27, r18
    6974:	70 0d       	add	r23, r0
    6976:	81 1d       	adc	r24, r1
    6978:	11 24       	eor	r1, r1
    697a:	91 1d       	adc	r25, r1
    697c:	08 95       	ret

0000697e <malloc>:
    697e:	0f 93       	push	r16
    6980:	1f 93       	push	r17
    6982:	cf 93       	push	r28
    6984:	df 93       	push	r29
    6986:	82 30       	cpi	r24, 0x02	; 2
    6988:	91 05       	cpc	r25, r1
    698a:	10 f4       	brcc	.+4      	; 0x6990 <malloc+0x12>
    698c:	82 e0       	ldi	r24, 0x02	; 2
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <__flp>
    6994:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <__flp+0x1>
    6998:	20 e0       	ldi	r18, 0x00	; 0
    699a:	30 e0       	ldi	r19, 0x00	; 0
    699c:	a0 e0       	ldi	r26, 0x00	; 0
    699e:	b0 e0       	ldi	r27, 0x00	; 0
    69a0:	30 97       	sbiw	r30, 0x00	; 0
    69a2:	19 f1       	breq	.+70     	; 0x69ea <malloc+0x6c>
    69a4:	40 81       	ld	r20, Z
    69a6:	51 81       	ldd	r21, Z+1	; 0x01
    69a8:	02 81       	ldd	r16, Z+2	; 0x02
    69aa:	13 81       	ldd	r17, Z+3	; 0x03
    69ac:	48 17       	cp	r20, r24
    69ae:	59 07       	cpc	r21, r25
    69b0:	c8 f0       	brcs	.+50     	; 0x69e4 <malloc+0x66>
    69b2:	84 17       	cp	r24, r20
    69b4:	95 07       	cpc	r25, r21
    69b6:	69 f4       	brne	.+26     	; 0x69d2 <malloc+0x54>
    69b8:	10 97       	sbiw	r26, 0x00	; 0
    69ba:	31 f0       	breq	.+12     	; 0x69c8 <malloc+0x4a>
    69bc:	12 96       	adiw	r26, 0x02	; 2
    69be:	0c 93       	st	X, r16
    69c0:	12 97       	sbiw	r26, 0x02	; 2
    69c2:	13 96       	adiw	r26, 0x03	; 3
    69c4:	1c 93       	st	X, r17
    69c6:	27 c0       	rjmp	.+78     	; 0x6a16 <malloc+0x98>
    69c8:	00 93 ae 05 	sts	0x05AE, r16	; 0x8005ae <__flp>
    69cc:	10 93 af 05 	sts	0x05AF, r17	; 0x8005af <__flp+0x1>
    69d0:	22 c0       	rjmp	.+68     	; 0x6a16 <malloc+0x98>
    69d2:	21 15       	cp	r18, r1
    69d4:	31 05       	cpc	r19, r1
    69d6:	19 f0       	breq	.+6      	; 0x69de <malloc+0x60>
    69d8:	42 17       	cp	r20, r18
    69da:	53 07       	cpc	r21, r19
    69dc:	18 f4       	brcc	.+6      	; 0x69e4 <malloc+0x66>
    69de:	9a 01       	movw	r18, r20
    69e0:	bd 01       	movw	r22, r26
    69e2:	ef 01       	movw	r28, r30
    69e4:	df 01       	movw	r26, r30
    69e6:	f8 01       	movw	r30, r16
    69e8:	db cf       	rjmp	.-74     	; 0x69a0 <malloc+0x22>
    69ea:	21 15       	cp	r18, r1
    69ec:	31 05       	cpc	r19, r1
    69ee:	f9 f0       	breq	.+62     	; 0x6a2e <malloc+0xb0>
    69f0:	28 1b       	sub	r18, r24
    69f2:	39 0b       	sbc	r19, r25
    69f4:	24 30       	cpi	r18, 0x04	; 4
    69f6:	31 05       	cpc	r19, r1
    69f8:	80 f4       	brcc	.+32     	; 0x6a1a <malloc+0x9c>
    69fa:	8a 81       	ldd	r24, Y+2	; 0x02
    69fc:	9b 81       	ldd	r25, Y+3	; 0x03
    69fe:	61 15       	cp	r22, r1
    6a00:	71 05       	cpc	r23, r1
    6a02:	21 f0       	breq	.+8      	; 0x6a0c <malloc+0x8e>
    6a04:	fb 01       	movw	r30, r22
    6a06:	93 83       	std	Z+3, r25	; 0x03
    6a08:	82 83       	std	Z+2, r24	; 0x02
    6a0a:	04 c0       	rjmp	.+8      	; 0x6a14 <malloc+0x96>
    6a0c:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <__flp+0x1>
    6a10:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <__flp>
    6a14:	fe 01       	movw	r30, r28
    6a16:	32 96       	adiw	r30, 0x02	; 2
    6a18:	44 c0       	rjmp	.+136    	; 0x6aa2 <malloc+0x124>
    6a1a:	fe 01       	movw	r30, r28
    6a1c:	e2 0f       	add	r30, r18
    6a1e:	f3 1f       	adc	r31, r19
    6a20:	81 93       	st	Z+, r24
    6a22:	91 93       	st	Z+, r25
    6a24:	22 50       	subi	r18, 0x02	; 2
    6a26:	31 09       	sbc	r19, r1
    6a28:	39 83       	std	Y+1, r19	; 0x01
    6a2a:	28 83       	st	Y, r18
    6a2c:	3a c0       	rjmp	.+116    	; 0x6aa2 <malloc+0x124>
    6a2e:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    6a32:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    6a36:	23 2b       	or	r18, r19
    6a38:	41 f4       	brne	.+16     	; 0x6a4a <malloc+0xcc>
    6a3a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6a3e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6a42:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <__brkval+0x1>
    6a46:	20 93 ac 05 	sts	0x05AC, r18	; 0x8005ac <__brkval>
    6a4a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6a4e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6a52:	21 15       	cp	r18, r1
    6a54:	31 05       	cpc	r19, r1
    6a56:	41 f4       	brne	.+16     	; 0x6a68 <malloc+0xea>
    6a58:	2d b7       	in	r18, 0x3d	; 61
    6a5a:	3e b7       	in	r19, 0x3e	; 62
    6a5c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6a60:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6a64:	24 1b       	sub	r18, r20
    6a66:	35 0b       	sbc	r19, r21
    6a68:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <__brkval>
    6a6c:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <__brkval+0x1>
    6a70:	e2 17       	cp	r30, r18
    6a72:	f3 07       	cpc	r31, r19
    6a74:	a0 f4       	brcc	.+40     	; 0x6a9e <malloc+0x120>
    6a76:	2e 1b       	sub	r18, r30
    6a78:	3f 0b       	sbc	r19, r31
    6a7a:	28 17       	cp	r18, r24
    6a7c:	39 07       	cpc	r19, r25
    6a7e:	78 f0       	brcs	.+30     	; 0x6a9e <malloc+0x120>
    6a80:	ac 01       	movw	r20, r24
    6a82:	4e 5f       	subi	r20, 0xFE	; 254
    6a84:	5f 4f       	sbci	r21, 0xFF	; 255
    6a86:	24 17       	cp	r18, r20
    6a88:	35 07       	cpc	r19, r21
    6a8a:	48 f0       	brcs	.+18     	; 0x6a9e <malloc+0x120>
    6a8c:	4e 0f       	add	r20, r30
    6a8e:	5f 1f       	adc	r21, r31
    6a90:	50 93 ad 05 	sts	0x05AD, r21	; 0x8005ad <__brkval+0x1>
    6a94:	40 93 ac 05 	sts	0x05AC, r20	; 0x8005ac <__brkval>
    6a98:	81 93       	st	Z+, r24
    6a9a:	91 93       	st	Z+, r25
    6a9c:	02 c0       	rjmp	.+4      	; 0x6aa2 <malloc+0x124>
    6a9e:	e0 e0       	ldi	r30, 0x00	; 0
    6aa0:	f0 e0       	ldi	r31, 0x00	; 0
    6aa2:	cf 01       	movw	r24, r30
    6aa4:	df 91       	pop	r29
    6aa6:	cf 91       	pop	r28
    6aa8:	1f 91       	pop	r17
    6aaa:	0f 91       	pop	r16
    6aac:	08 95       	ret

00006aae <free>:
    6aae:	cf 93       	push	r28
    6ab0:	df 93       	push	r29
    6ab2:	00 97       	sbiw	r24, 0x00	; 0
    6ab4:	09 f4       	brne	.+2      	; 0x6ab8 <free+0xa>
    6ab6:	81 c0       	rjmp	.+258    	; 0x6bba <free+0x10c>
    6ab8:	fc 01       	movw	r30, r24
    6aba:	32 97       	sbiw	r30, 0x02	; 2
    6abc:	13 82       	std	Z+3, r1	; 0x03
    6abe:	12 82       	std	Z+2, r1	; 0x02
    6ac0:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <__flp>
    6ac4:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <__flp+0x1>
    6ac8:	10 97       	sbiw	r26, 0x00	; 0
    6aca:	81 f4       	brne	.+32     	; 0x6aec <free+0x3e>
    6acc:	20 81       	ld	r18, Z
    6ace:	31 81       	ldd	r19, Z+1	; 0x01
    6ad0:	82 0f       	add	r24, r18
    6ad2:	93 1f       	adc	r25, r19
    6ad4:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    6ad8:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    6adc:	28 17       	cp	r18, r24
    6ade:	39 07       	cpc	r19, r25
    6ae0:	51 f5       	brne	.+84     	; 0x6b36 <free+0x88>
    6ae2:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__brkval+0x1>
    6ae6:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__brkval>
    6aea:	67 c0       	rjmp	.+206    	; 0x6bba <free+0x10c>
    6aec:	ed 01       	movw	r28, r26
    6aee:	20 e0       	ldi	r18, 0x00	; 0
    6af0:	30 e0       	ldi	r19, 0x00	; 0
    6af2:	ce 17       	cp	r28, r30
    6af4:	df 07       	cpc	r29, r31
    6af6:	40 f4       	brcc	.+16     	; 0x6b08 <free+0x5a>
    6af8:	4a 81       	ldd	r20, Y+2	; 0x02
    6afa:	5b 81       	ldd	r21, Y+3	; 0x03
    6afc:	9e 01       	movw	r18, r28
    6afe:	41 15       	cp	r20, r1
    6b00:	51 05       	cpc	r21, r1
    6b02:	f1 f0       	breq	.+60     	; 0x6b40 <free+0x92>
    6b04:	ea 01       	movw	r28, r20
    6b06:	f5 cf       	rjmp	.-22     	; 0x6af2 <free+0x44>
    6b08:	d3 83       	std	Z+3, r29	; 0x03
    6b0a:	c2 83       	std	Z+2, r28	; 0x02
    6b0c:	40 81       	ld	r20, Z
    6b0e:	51 81       	ldd	r21, Z+1	; 0x01
    6b10:	84 0f       	add	r24, r20
    6b12:	95 1f       	adc	r25, r21
    6b14:	c8 17       	cp	r28, r24
    6b16:	d9 07       	cpc	r29, r25
    6b18:	59 f4       	brne	.+22     	; 0x6b30 <free+0x82>
    6b1a:	88 81       	ld	r24, Y
    6b1c:	99 81       	ldd	r25, Y+1	; 0x01
    6b1e:	84 0f       	add	r24, r20
    6b20:	95 1f       	adc	r25, r21
    6b22:	02 96       	adiw	r24, 0x02	; 2
    6b24:	91 83       	std	Z+1, r25	; 0x01
    6b26:	80 83       	st	Z, r24
    6b28:	8a 81       	ldd	r24, Y+2	; 0x02
    6b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    6b2c:	93 83       	std	Z+3, r25	; 0x03
    6b2e:	82 83       	std	Z+2, r24	; 0x02
    6b30:	21 15       	cp	r18, r1
    6b32:	31 05       	cpc	r19, r1
    6b34:	29 f4       	brne	.+10     	; 0x6b40 <free+0x92>
    6b36:	f0 93 af 05 	sts	0x05AF, r31	; 0x8005af <__flp+0x1>
    6b3a:	e0 93 ae 05 	sts	0x05AE, r30	; 0x8005ae <__flp>
    6b3e:	3d c0       	rjmp	.+122    	; 0x6bba <free+0x10c>
    6b40:	e9 01       	movw	r28, r18
    6b42:	fb 83       	std	Y+3, r31	; 0x03
    6b44:	ea 83       	std	Y+2, r30	; 0x02
    6b46:	49 91       	ld	r20, Y+
    6b48:	59 91       	ld	r21, Y+
    6b4a:	c4 0f       	add	r28, r20
    6b4c:	d5 1f       	adc	r29, r21
    6b4e:	ec 17       	cp	r30, r28
    6b50:	fd 07       	cpc	r31, r29
    6b52:	61 f4       	brne	.+24     	; 0x6b6c <free+0xbe>
    6b54:	80 81       	ld	r24, Z
    6b56:	91 81       	ldd	r25, Z+1	; 0x01
    6b58:	84 0f       	add	r24, r20
    6b5a:	95 1f       	adc	r25, r21
    6b5c:	02 96       	adiw	r24, 0x02	; 2
    6b5e:	e9 01       	movw	r28, r18
    6b60:	99 83       	std	Y+1, r25	; 0x01
    6b62:	88 83       	st	Y, r24
    6b64:	82 81       	ldd	r24, Z+2	; 0x02
    6b66:	93 81       	ldd	r25, Z+3	; 0x03
    6b68:	9b 83       	std	Y+3, r25	; 0x03
    6b6a:	8a 83       	std	Y+2, r24	; 0x02
    6b6c:	e0 e0       	ldi	r30, 0x00	; 0
    6b6e:	f0 e0       	ldi	r31, 0x00	; 0
    6b70:	12 96       	adiw	r26, 0x02	; 2
    6b72:	8d 91       	ld	r24, X+
    6b74:	9c 91       	ld	r25, X
    6b76:	13 97       	sbiw	r26, 0x03	; 3
    6b78:	00 97       	sbiw	r24, 0x00	; 0
    6b7a:	19 f0       	breq	.+6      	; 0x6b82 <free+0xd4>
    6b7c:	fd 01       	movw	r30, r26
    6b7e:	dc 01       	movw	r26, r24
    6b80:	f7 cf       	rjmp	.-18     	; 0x6b70 <free+0xc2>
    6b82:	8d 91       	ld	r24, X+
    6b84:	9c 91       	ld	r25, X
    6b86:	11 97       	sbiw	r26, 0x01	; 1
    6b88:	9d 01       	movw	r18, r26
    6b8a:	2e 5f       	subi	r18, 0xFE	; 254
    6b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b8e:	82 0f       	add	r24, r18
    6b90:	93 1f       	adc	r25, r19
    6b92:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    6b96:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    6b9a:	28 17       	cp	r18, r24
    6b9c:	39 07       	cpc	r19, r25
    6b9e:	69 f4       	brne	.+26     	; 0x6bba <free+0x10c>
    6ba0:	30 97       	sbiw	r30, 0x00	; 0
    6ba2:	29 f4       	brne	.+10     	; 0x6bae <free+0x100>
    6ba4:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <__flp+0x1>
    6ba8:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <__flp>
    6bac:	02 c0       	rjmp	.+4      	; 0x6bb2 <free+0x104>
    6bae:	13 82       	std	Z+3, r1	; 0x03
    6bb0:	12 82       	std	Z+2, r1	; 0x02
    6bb2:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <__brkval+0x1>
    6bb6:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <__brkval>
    6bba:	df 91       	pop	r29
    6bbc:	cf 91       	pop	r28
    6bbe:	08 95       	ret

00006bc0 <realloc>:
    6bc0:	6f 92       	push	r6
    6bc2:	7f 92       	push	r7
    6bc4:	8f 92       	push	r8
    6bc6:	9f 92       	push	r9
    6bc8:	af 92       	push	r10
    6bca:	bf 92       	push	r11
    6bcc:	cf 92       	push	r12
    6bce:	df 92       	push	r13
    6bd0:	ef 92       	push	r14
    6bd2:	ff 92       	push	r15
    6bd4:	0f 93       	push	r16
    6bd6:	1f 93       	push	r17
    6bd8:	cf 93       	push	r28
    6bda:	df 93       	push	r29
    6bdc:	00 97       	sbiw	r24, 0x00	; 0
    6bde:	81 f4       	brne	.+32     	; 0x6c00 <realloc+0x40>
    6be0:	cb 01       	movw	r24, r22
    6be2:	df 91       	pop	r29
    6be4:	cf 91       	pop	r28
    6be6:	1f 91       	pop	r17
    6be8:	0f 91       	pop	r16
    6bea:	ff 90       	pop	r15
    6bec:	ef 90       	pop	r14
    6bee:	df 90       	pop	r13
    6bf0:	cf 90       	pop	r12
    6bf2:	bf 90       	pop	r11
    6bf4:	af 90       	pop	r10
    6bf6:	9f 90       	pop	r9
    6bf8:	8f 90       	pop	r8
    6bfa:	7f 90       	pop	r7
    6bfc:	6f 90       	pop	r6
    6bfe:	bf ce       	rjmp	.-642    	; 0x697e <malloc>
    6c00:	fc 01       	movw	r30, r24
    6c02:	e6 0f       	add	r30, r22
    6c04:	f7 1f       	adc	r31, r23
    6c06:	9c 01       	movw	r18, r24
    6c08:	22 50       	subi	r18, 0x02	; 2
    6c0a:	31 09       	sbc	r19, r1
    6c0c:	e2 17       	cp	r30, r18
    6c0e:	f3 07       	cpc	r31, r19
    6c10:	08 f4       	brcc	.+2      	; 0x6c14 <realloc+0x54>
    6c12:	a5 c0       	rjmp	.+330    	; 0x6d5e <realloc+0x19e>
    6c14:	ec 01       	movw	r28, r24
    6c16:	d9 01       	movw	r26, r18
    6c18:	0d 91       	ld	r16, X+
    6c1a:	1c 91       	ld	r17, X
    6c1c:	11 97       	sbiw	r26, 0x01	; 1
    6c1e:	06 17       	cp	r16, r22
    6c20:	17 07       	cpc	r17, r23
    6c22:	a8 f0       	brcs	.+42     	; 0x6c4e <realloc+0x8e>
    6c24:	05 30       	cpi	r16, 0x05	; 5
    6c26:	11 05       	cpc	r17, r1
    6c28:	08 f4       	brcc	.+2      	; 0x6c2c <realloc+0x6c>
    6c2a:	97 c0       	rjmp	.+302    	; 0x6d5a <realloc+0x19a>
    6c2c:	c8 01       	movw	r24, r16
    6c2e:	04 97       	sbiw	r24, 0x04	; 4
    6c30:	86 17       	cp	r24, r22
    6c32:	97 07       	cpc	r25, r23
    6c34:	08 f4       	brcc	.+2      	; 0x6c38 <realloc+0x78>
    6c36:	91 c0       	rjmp	.+290    	; 0x6d5a <realloc+0x19a>
    6c38:	02 50       	subi	r16, 0x02	; 2
    6c3a:	11 09       	sbc	r17, r1
    6c3c:	06 1b       	sub	r16, r22
    6c3e:	17 0b       	sbc	r17, r23
    6c40:	01 93       	st	Z+, r16
    6c42:	11 93       	st	Z+, r17
    6c44:	6d 93       	st	X+, r22
    6c46:	7c 93       	st	X, r23
    6c48:	cf 01       	movw	r24, r30
    6c4a:	31 df       	rcall	.-414    	; 0x6aae <free>
    6c4c:	86 c0       	rjmp	.+268    	; 0x6d5a <realloc+0x19a>
    6c4e:	5b 01       	movw	r10, r22
    6c50:	a0 1a       	sub	r10, r16
    6c52:	b1 0a       	sbc	r11, r17
    6c54:	4c 01       	movw	r8, r24
    6c56:	80 0e       	add	r8, r16
    6c58:	91 1e       	adc	r9, r17
    6c5a:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <__flp>
    6c5e:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <__flp+0x1>
    6c62:	61 2c       	mov	r6, r1
    6c64:	71 2c       	mov	r7, r1
    6c66:	e1 2c       	mov	r14, r1
    6c68:	f1 2c       	mov	r15, r1
    6c6a:	10 97       	sbiw	r26, 0x00	; 0
    6c6c:	09 f4       	brne	.+2      	; 0x6c70 <realloc+0xb0>
    6c6e:	46 c0       	rjmp	.+140    	; 0x6cfc <realloc+0x13c>
    6c70:	8d 91       	ld	r24, X+
    6c72:	9c 91       	ld	r25, X
    6c74:	11 97       	sbiw	r26, 0x01	; 1
    6c76:	a8 15       	cp	r26, r8
    6c78:	b9 05       	cpc	r27, r9
    6c7a:	b1 f5       	brne	.+108    	; 0x6ce8 <realloc+0x128>
    6c7c:	6c 01       	movw	r12, r24
    6c7e:	42 e0       	ldi	r20, 0x02	; 2
    6c80:	c4 0e       	add	r12, r20
    6c82:	d1 1c       	adc	r13, r1
    6c84:	ca 14       	cp	r12, r10
    6c86:	db 04       	cpc	r13, r11
    6c88:	78 f1       	brcs	.+94     	; 0x6ce8 <realloc+0x128>
    6c8a:	4c 01       	movw	r8, r24
    6c8c:	8a 18       	sub	r8, r10
    6c8e:	9b 08       	sbc	r9, r11
    6c90:	64 01       	movw	r12, r8
    6c92:	42 e0       	ldi	r20, 0x02	; 2
    6c94:	c4 0e       	add	r12, r20
    6c96:	d1 1c       	adc	r13, r1
    6c98:	12 96       	adiw	r26, 0x02	; 2
    6c9a:	bc 90       	ld	r11, X
    6c9c:	12 97       	sbiw	r26, 0x02	; 2
    6c9e:	13 96       	adiw	r26, 0x03	; 3
    6ca0:	ac 91       	ld	r26, X
    6ca2:	b5 e0       	ldi	r27, 0x05	; 5
    6ca4:	cb 16       	cp	r12, r27
    6ca6:	d1 04       	cpc	r13, r1
    6ca8:	40 f0       	brcs	.+16     	; 0x6cba <realloc+0xfa>
    6caa:	b2 82       	std	Z+2, r11	; 0x02
    6cac:	a3 83       	std	Z+3, r26	; 0x03
    6cae:	91 82       	std	Z+1, r9	; 0x01
    6cb0:	80 82       	st	Z, r8
    6cb2:	d9 01       	movw	r26, r18
    6cb4:	6d 93       	st	X+, r22
    6cb6:	7c 93       	st	X, r23
    6cb8:	09 c0       	rjmp	.+18     	; 0x6ccc <realloc+0x10c>
    6cba:	0e 5f       	subi	r16, 0xFE	; 254
    6cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    6cbe:	80 0f       	add	r24, r16
    6cc0:	91 1f       	adc	r25, r17
    6cc2:	f9 01       	movw	r30, r18
    6cc4:	91 83       	std	Z+1, r25	; 0x01
    6cc6:	80 83       	st	Z, r24
    6cc8:	eb 2d       	mov	r30, r11
    6cca:	fa 2f       	mov	r31, r26
    6ccc:	e1 14       	cp	r14, r1
    6cce:	f1 04       	cpc	r15, r1
    6cd0:	31 f0       	breq	.+12     	; 0x6cde <realloc+0x11e>
    6cd2:	d7 01       	movw	r26, r14
    6cd4:	13 96       	adiw	r26, 0x03	; 3
    6cd6:	fc 93       	st	X, r31
    6cd8:	ee 93       	st	-X, r30
    6cda:	12 97       	sbiw	r26, 0x02	; 2
    6cdc:	3e c0       	rjmp	.+124    	; 0x6d5a <realloc+0x19a>
    6cde:	f0 93 af 05 	sts	0x05AF, r31	; 0x8005af <__flp+0x1>
    6ce2:	e0 93 ae 05 	sts	0x05AE, r30	; 0x8005ae <__flp>
    6ce6:	39 c0       	rjmp	.+114    	; 0x6d5a <realloc+0x19a>
    6ce8:	68 16       	cp	r6, r24
    6cea:	79 06       	cpc	r7, r25
    6cec:	08 f4       	brcc	.+2      	; 0x6cf0 <realloc+0x130>
    6cee:	3c 01       	movw	r6, r24
    6cf0:	7d 01       	movw	r14, r26
    6cf2:	12 96       	adiw	r26, 0x02	; 2
    6cf4:	0d 90       	ld	r0, X+
    6cf6:	bc 91       	ld	r27, X
    6cf8:	a0 2d       	mov	r26, r0
    6cfa:	b7 cf       	rjmp	.-146    	; 0x6c6a <realloc+0xaa>
    6cfc:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <__brkval>
    6d00:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <__brkval+0x1>
    6d04:	88 16       	cp	r8, r24
    6d06:	99 06       	cpc	r9, r25
    6d08:	e1 f4       	brne	.+56     	; 0x6d42 <realloc+0x182>
    6d0a:	66 16       	cp	r6, r22
    6d0c:	77 06       	cpc	r7, r23
    6d0e:	c8 f4       	brcc	.+50     	; 0x6d42 <realloc+0x182>
    6d10:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6d14:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6d18:	00 97       	sbiw	r24, 0x00	; 0
    6d1a:	41 f4       	brne	.+16     	; 0x6d2c <realloc+0x16c>
    6d1c:	8d b7       	in	r24, 0x3d	; 61
    6d1e:	9e b7       	in	r25, 0x3e	; 62
    6d20:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6d24:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6d28:	84 1b       	sub	r24, r20
    6d2a:	95 0b       	sbc	r25, r21
    6d2c:	e8 17       	cp	r30, r24
    6d2e:	f9 07       	cpc	r31, r25
    6d30:	b0 f4       	brcc	.+44     	; 0x6d5e <realloc+0x19e>
    6d32:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__brkval+0x1>
    6d36:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__brkval>
    6d3a:	f9 01       	movw	r30, r18
    6d3c:	71 83       	std	Z+1, r23	; 0x01
    6d3e:	60 83       	st	Z, r22
    6d40:	0c c0       	rjmp	.+24     	; 0x6d5a <realloc+0x19a>
    6d42:	cb 01       	movw	r24, r22
    6d44:	1c de       	rcall	.-968    	; 0x697e <malloc>
    6d46:	7c 01       	movw	r14, r24
    6d48:	00 97       	sbiw	r24, 0x00	; 0
    6d4a:	49 f0       	breq	.+18     	; 0x6d5e <realloc+0x19e>
    6d4c:	a8 01       	movw	r20, r16
    6d4e:	be 01       	movw	r22, r28
    6d50:	23 d0       	rcall	.+70     	; 0x6d98 <memcpy>
    6d52:	ce 01       	movw	r24, r28
    6d54:	ac de       	rcall	.-680    	; 0x6aae <free>
    6d56:	c7 01       	movw	r24, r14
    6d58:	04 c0       	rjmp	.+8      	; 0x6d62 <realloc+0x1a2>
    6d5a:	ce 01       	movw	r24, r28
    6d5c:	02 c0       	rjmp	.+4      	; 0x6d62 <realloc+0x1a2>
    6d5e:	80 e0       	ldi	r24, 0x00	; 0
    6d60:	90 e0       	ldi	r25, 0x00	; 0
    6d62:	df 91       	pop	r29
    6d64:	cf 91       	pop	r28
    6d66:	1f 91       	pop	r17
    6d68:	0f 91       	pop	r16
    6d6a:	ff 90       	pop	r15
    6d6c:	ef 90       	pop	r14
    6d6e:	df 90       	pop	r13
    6d70:	cf 90       	pop	r12
    6d72:	bf 90       	pop	r11
    6d74:	af 90       	pop	r10
    6d76:	9f 90       	pop	r9
    6d78:	8f 90       	pop	r8
    6d7a:	7f 90       	pop	r7
    6d7c:	6f 90       	pop	r6
    6d7e:	08 95       	ret

00006d80 <abort>:
    6d80:	81 e0       	ldi	r24, 0x01	; 1
    6d82:	90 e0       	ldi	r25, 0x00	; 0
    6d84:	f8 94       	cli
    6d86:	7d c0       	rjmp	.+250    	; 0x6e82 <__do_global_dtors>

00006d88 <toupper>:
    6d88:	91 11       	cpse	r25, r1
    6d8a:	08 95       	ret
    6d8c:	81 56       	subi	r24, 0x61	; 97
    6d8e:	8a 51       	subi	r24, 0x1A	; 26
    6d90:	08 f4       	brcc	.+2      	; 0x6d94 <toupper+0xc>
    6d92:	80 52       	subi	r24, 0x20	; 32
    6d94:	85 58       	subi	r24, 0x85	; 133
    6d96:	08 95       	ret

00006d98 <memcpy>:
    6d98:	fb 01       	movw	r30, r22
    6d9a:	dc 01       	movw	r26, r24
    6d9c:	02 c0       	rjmp	.+4      	; 0x6da2 <memcpy+0xa>
    6d9e:	01 90       	ld	r0, Z+
    6da0:	0d 92       	st	X+, r0
    6da2:	41 50       	subi	r20, 0x01	; 1
    6da4:	50 40       	sbci	r21, 0x00	; 0
    6da6:	d8 f7       	brcc	.-10     	; 0x6d9e <memcpy+0x6>
    6da8:	08 95       	ret

00006daa <memset>:
    6daa:	dc 01       	movw	r26, r24
    6dac:	01 c0       	rjmp	.+2      	; 0x6db0 <memset+0x6>
    6dae:	6d 93       	st	X+, r22
    6db0:	41 50       	subi	r20, 0x01	; 1
    6db2:	50 40       	sbci	r21, 0x00	; 0
    6db4:	e0 f7       	brcc	.-8      	; 0x6dae <memset+0x4>
    6db6:	08 95       	ret

00006db8 <strcmp>:
    6db8:	fb 01       	movw	r30, r22
    6dba:	dc 01       	movw	r26, r24
    6dbc:	8d 91       	ld	r24, X+
    6dbe:	01 90       	ld	r0, Z+
    6dc0:	80 19       	sub	r24, r0
    6dc2:	01 10       	cpse	r0, r1
    6dc4:	d9 f3       	breq	.-10     	; 0x6dbc <strcmp+0x4>
    6dc6:	99 0b       	sbc	r25, r25
    6dc8:	08 95       	ret

00006dca <strcpy>:
    6dca:	fb 01       	movw	r30, r22
    6dcc:	dc 01       	movw	r26, r24
    6dce:	01 90       	ld	r0, Z+
    6dd0:	0d 92       	st	X+, r0
    6dd2:	00 20       	and	r0, r0
    6dd4:	e1 f7       	brne	.-8      	; 0x6dce <strcpy+0x4>
    6dd6:	08 95       	ret

00006dd8 <strlen>:
    6dd8:	fc 01       	movw	r30, r24
    6dda:	01 90       	ld	r0, Z+
    6ddc:	00 20       	and	r0, r0
    6dde:	e9 f7       	brne	.-6      	; 0x6dda <strlen+0x2>
    6de0:	80 95       	com	r24
    6de2:	90 95       	com	r25
    6de4:	8e 0f       	add	r24, r30
    6de6:	9f 1f       	adc	r25, r31
    6de8:	08 95       	ret

00006dea <strncpy>:
    6dea:	fb 01       	movw	r30, r22
    6dec:	dc 01       	movw	r26, r24
    6dee:	41 50       	subi	r20, 0x01	; 1
    6df0:	50 40       	sbci	r21, 0x00	; 0
    6df2:	48 f0       	brcs	.+18     	; 0x6e06 <strncpy+0x1c>
    6df4:	01 90       	ld	r0, Z+
    6df6:	0d 92       	st	X+, r0
    6df8:	00 20       	and	r0, r0
    6dfa:	c9 f7       	brne	.-14     	; 0x6dee <strncpy+0x4>
    6dfc:	01 c0       	rjmp	.+2      	; 0x6e00 <strncpy+0x16>
    6dfe:	1d 92       	st	X+, r1
    6e00:	41 50       	subi	r20, 0x01	; 1
    6e02:	50 40       	sbci	r21, 0x00	; 0
    6e04:	e0 f7       	brcc	.-8      	; 0x6dfe <strncpy+0x14>
    6e06:	08 95       	ret

00006e08 <__itoa_ncheck>:
    6e08:	bb 27       	eor	r27, r27
    6e0a:	4a 30       	cpi	r20, 0x0A	; 10
    6e0c:	31 f4       	brne	.+12     	; 0x6e1a <__itoa_ncheck+0x12>
    6e0e:	99 23       	and	r25, r25
    6e10:	22 f4       	brpl	.+8      	; 0x6e1a <__itoa_ncheck+0x12>
    6e12:	bd e2       	ldi	r27, 0x2D	; 45
    6e14:	90 95       	com	r25
    6e16:	81 95       	neg	r24
    6e18:	9f 4f       	sbci	r25, 0xFF	; 255
    6e1a:	0b c0       	rjmp	.+22     	; 0x6e32 <__utoa_common>

00006e1c <utoa>:
    6e1c:	45 32       	cpi	r20, 0x25	; 37
    6e1e:	51 05       	cpc	r21, r1
    6e20:	18 f4       	brcc	.+6      	; 0x6e28 <utoa+0xc>
    6e22:	42 30       	cpi	r20, 0x02	; 2
    6e24:	08 f0       	brcs	.+2      	; 0x6e28 <utoa+0xc>
    6e26:	04 c0       	rjmp	.+8      	; 0x6e30 <__utoa_ncheck>
    6e28:	fb 01       	movw	r30, r22
    6e2a:	10 82       	st	Z, r1
    6e2c:	cb 01       	movw	r24, r22
    6e2e:	08 95       	ret

00006e30 <__utoa_ncheck>:
    6e30:	bb 27       	eor	r27, r27

00006e32 <__utoa_common>:
    6e32:	fb 01       	movw	r30, r22
    6e34:	55 27       	eor	r21, r21
    6e36:	aa 27       	eor	r26, r26
    6e38:	88 0f       	add	r24, r24
    6e3a:	99 1f       	adc	r25, r25
    6e3c:	aa 1f       	adc	r26, r26
    6e3e:	a4 17       	cp	r26, r20
    6e40:	10 f0       	brcs	.+4      	; 0x6e46 <__utoa_common+0x14>
    6e42:	a4 1b       	sub	r26, r20
    6e44:	83 95       	inc	r24
    6e46:	50 51       	subi	r21, 0x10	; 16
    6e48:	b9 f7       	brne	.-18     	; 0x6e38 <__utoa_common+0x6>
    6e4a:	a0 5d       	subi	r26, 0xD0	; 208
    6e4c:	aa 33       	cpi	r26, 0x3A	; 58
    6e4e:	08 f0       	brcs	.+2      	; 0x6e52 <__utoa_common+0x20>
    6e50:	a9 5d       	subi	r26, 0xD9	; 217
    6e52:	a1 93       	st	Z+, r26
    6e54:	00 97       	sbiw	r24, 0x00	; 0
    6e56:	79 f7       	brne	.-34     	; 0x6e36 <__utoa_common+0x4>
    6e58:	b1 11       	cpse	r27, r1
    6e5a:	b1 93       	st	Z+, r27
    6e5c:	11 92       	st	Z+, r1
    6e5e:	cb 01       	movw	r24, r22
    6e60:	00 c0       	rjmp	.+0      	; 0x6e62 <strrev>

00006e62 <strrev>:
    6e62:	dc 01       	movw	r26, r24
    6e64:	fc 01       	movw	r30, r24
    6e66:	67 2f       	mov	r22, r23
    6e68:	71 91       	ld	r23, Z+
    6e6a:	77 23       	and	r23, r23
    6e6c:	e1 f7       	brne	.-8      	; 0x6e66 <strrev+0x4>
    6e6e:	32 97       	sbiw	r30, 0x02	; 2
    6e70:	04 c0       	rjmp	.+8      	; 0x6e7a <strrev+0x18>
    6e72:	7c 91       	ld	r23, X
    6e74:	6d 93       	st	X+, r22
    6e76:	70 83       	st	Z, r23
    6e78:	62 91       	ld	r22, -Z
    6e7a:	ae 17       	cp	r26, r30
    6e7c:	bf 07       	cpc	r27, r31
    6e7e:	c8 f3       	brcs	.-14     	; 0x6e72 <strrev+0x10>
    6e80:	08 95       	ret

00006e82 <__do_global_dtors>:
    6e82:	11 e0       	ldi	r17, 0x01	; 1
    6e84:	c7 e1       	ldi	r28, 0x17	; 23
    6e86:	d1 e0       	ldi	r29, 0x01	; 1
    6e88:	00 e0       	ldi	r16, 0x00	; 0
    6e8a:	05 c0       	rjmp	.+10     	; 0x6e96 <__do_global_dtors+0x14>
    6e8c:	80 2f       	mov	r24, r16
    6e8e:	fe 01       	movw	r30, r28
    6e90:	55 dd       	rcall	.-1366   	; 0x693c <__tablejump2__>
    6e92:	21 96       	adiw	r28, 0x01	; 1
    6e94:	01 1d       	adc	r16, r1
    6e96:	c8 31       	cpi	r28, 0x18	; 24
    6e98:	d1 07       	cpc	r29, r17
    6e9a:	80 e0       	ldi	r24, 0x00	; 0
    6e9c:	08 07       	cpc	r16, r24
    6e9e:	b1 f7       	brne	.-20     	; 0x6e8c <__do_global_dtors+0xa>
    6ea0:	f8 94       	cli

00006ea2 <__stop_program>:
    6ea2:	ff cf       	rjmp	.-2      	; 0x6ea2 <__stop_program>
