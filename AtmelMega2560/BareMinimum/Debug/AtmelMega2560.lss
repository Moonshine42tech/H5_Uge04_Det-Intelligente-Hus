
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800200  00002610  000026a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  00800284  00800284  00002728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a0  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000105e5  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f27  00000000  00000000  0001341d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038fd  00000000  00000000  00016344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000168c  00000000  00000000  00019c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031da  00000000  00000000  0001b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000848a  00000000  00000000  0001e4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000690  00000000  00000000  00026934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c1       	rjmp	.+806    	; 0x328 <__dtors_end>
       2:	00 00       	nop
       4:	c2 c1       	rjmp	.+900    	; 0x38a <__bad_interrupt>
       6:	00 00       	nop
       8:	c0 c1       	rjmp	.+896    	; 0x38a <__bad_interrupt>
       a:	00 00       	nop
       c:	be c1       	rjmp	.+892    	; 0x38a <__bad_interrupt>
       e:	00 00       	nop
      10:	bc c1       	rjmp	.+888    	; 0x38a <__bad_interrupt>
      12:	00 00       	nop
      14:	ba c1       	rjmp	.+884    	; 0x38a <__bad_interrupt>
      16:	00 00       	nop
      18:	b8 c1       	rjmp	.+880    	; 0x38a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b6 c1       	rjmp	.+876    	; 0x38a <__bad_interrupt>
      1e:	00 00       	nop
      20:	b4 c1       	rjmp	.+872    	; 0x38a <__bad_interrupt>
      22:	00 00       	nop
      24:	b2 c1       	rjmp	.+868    	; 0x38a <__bad_interrupt>
      26:	00 00       	nop
      28:	b0 c1       	rjmp	.+864    	; 0x38a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ae c1       	rjmp	.+860    	; 0x38a <__bad_interrupt>
      2e:	00 00       	nop
      30:	ac c1       	rjmp	.+856    	; 0x38a <__bad_interrupt>
      32:	00 00       	nop
      34:	aa c1       	rjmp	.+852    	; 0x38a <__bad_interrupt>
      36:	00 00       	nop
      38:	a8 c1       	rjmp	.+848    	; 0x38a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a6 c1       	rjmp	.+844    	; 0x38a <__bad_interrupt>
      3e:	00 00       	nop
      40:	a4 c1       	rjmp	.+840    	; 0x38a <__bad_interrupt>
      42:	00 00       	nop
      44:	a2 c1       	rjmp	.+836    	; 0x38a <__bad_interrupt>
      46:	00 00       	nop
      48:	a0 c1       	rjmp	.+832    	; 0x38a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9e c1       	rjmp	.+828    	; 0x38a <__bad_interrupt>
      4e:	00 00       	nop
      50:	9c c1       	rjmp	.+824    	; 0x38a <__bad_interrupt>
      52:	00 00       	nop
      54:	9a c1       	rjmp	.+820    	; 0x38a <__bad_interrupt>
      56:	00 00       	nop
      58:	98 c1       	rjmp	.+816    	; 0x38a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__vector_23>
      60:	94 c1       	rjmp	.+808    	; 0x38a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_25>
      68:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_26>
      6c:	8e c1       	rjmp	.+796    	; 0x38a <__bad_interrupt>
      6e:	00 00       	nop
      70:	8c c1       	rjmp	.+792    	; 0x38a <__bad_interrupt>
      72:	00 00       	nop
      74:	8a c1       	rjmp	.+788    	; 0x38a <__bad_interrupt>
      76:	00 00       	nop
      78:	88 c1       	rjmp	.+784    	; 0x38a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	86 c1       	rjmp	.+780    	; 0x38a <__bad_interrupt>
      7e:	00 00       	nop
      80:	84 c1       	rjmp	.+776    	; 0x38a <__bad_interrupt>
      82:	00 00       	nop
      84:	82 c1       	rjmp	.+772    	; 0x38a <__bad_interrupt>
      86:	00 00       	nop
      88:	80 c1       	rjmp	.+768    	; 0x38a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7e c1       	rjmp	.+764    	; 0x38a <__bad_interrupt>
      8e:	00 00       	nop
      90:	7c c1       	rjmp	.+760    	; 0x38a <__bad_interrupt>
      92:	00 00       	nop
      94:	7a c1       	rjmp	.+756    	; 0x38a <__bad_interrupt>
      96:	00 00       	nop
      98:	78 c1       	rjmp	.+752    	; 0x38a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	76 c1       	rjmp	.+748    	; 0x38a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	74 c1       	rjmp	.+744    	; 0x38a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	72 c1       	rjmp	.+740    	; 0x38a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	70 c1       	rjmp	.+736    	; 0x38a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6e c1       	rjmp	.+732    	; 0x38a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6c c1       	rjmp	.+728    	; 0x38a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6a c1       	rjmp	.+724    	; 0x38a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	68 c1       	rjmp	.+720    	; 0x38a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	66 c1       	rjmp	.+716    	; 0x38a <__bad_interrupt>
      be:	00 00       	nop
      c0:	64 c1       	rjmp	.+712    	; 0x38a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	62 c1       	rjmp	.+708    	; 0x38a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	60 c1       	rjmp	.+704    	; 0x38a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5e c1       	rjmp	.+700    	; 0x38a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	5c c1       	rjmp	.+696    	; 0x38a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5a c1       	rjmp	.+692    	; 0x38a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	58 c1       	rjmp	.+688    	; 0x38a <__bad_interrupt>
      da:	00 00       	nop
      dc:	56 c1       	rjmp	.+684    	; 0x38a <__bad_interrupt>
      de:	00 00       	nop
      e0:	54 c1       	rjmp	.+680    	; 0x38a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	76 0c       	add	r7, r6
      e6:	79 0c       	add	r7, r9
      e8:	68 0c       	add	r6, r8
      ea:	6c 0c       	add	r6, r12
      ec:	72 0c       	add	r7, r2
      ee:	b0 0c       	add	r11, r0
      f0:	7d 0c       	add	r7, r13
      f2:	81 0c       	add	r8, r1
      f4:	87 0c       	add	r8, r7
      f6:	8b 0c       	add	r8, r11
      f8:	8f 0c       	add	r8, r15
      fa:	95 0c       	add	r9, r5
      fc:	99 0c       	add	r9, r9
      fe:	9d 0c       	add	r9, r13
     100:	b0 0c       	add	r11, r0
     102:	a3 0c       	add	r10, r3
     104:	a7 0c       	add	r10, r7
     106:	ab 0c       	add	r10, r11

00000108 <__trampolines_end>:
     108:	00 40       	sbci	r16, 0x00	; 0
     10a:	7a 10       	cpse	r7, r10
     10c:	f3 5a       	subi	r31, 0xA3	; 163
     10e:	00 a0       	ldd	r0, Z+32	; 0x20
     110:	72 4e       	sbci	r23, 0xE2	; 226
     112:	18 09       	sbc	r17, r8
     114:	00 10       	cpse	r0, r0
     116:	a5 d4       	rcall	.+2378   	; 0xa62 <_ZN3DHT12readHumidityEb+0x46>
     118:	e8 00       	.word	0x00e8	; ????
     11a:	00 e8       	ldi	r16, 0x80	; 128
     11c:	76 48       	sbci	r23, 0x86	; 134
     11e:	17 00       	.word	0x0017	; ????
     120:	00 e4       	ldi	r16, 0x40	; 64
     122:	0b 54       	subi	r16, 0x4B	; 75
     124:	02 00       	.word	0x0002	; ????
     126:	00 ca       	rjmp	.-3072   	; 0xfffff528 <__eeprom_end+0xff7ef528>
     128:	9a 3b       	cpi	r25, 0xBA	; 186
     12a:	00 00       	nop
     12c:	00 e1       	ldi	r16, 0x10	; 16
     12e:	f5 05       	cpc	r31, r5
     130:	00 00       	nop
     132:	80 96       	adiw	r24, 0x20	; 32
     134:	98 00       	.word	0x0098	; ????
     136:	00 00       	nop
     138:	40 42       	sbci	r20, 0x20	; 32
     13a:	0f 00       	.word	0x000f	; ????
     13c:	00 00       	nop
     13e:	a0 86       	std	Z+8, r10	; 0x08
     140:	01 00       	.word	0x0001	; ????
     142:	00 00       	nop
     144:	10 27       	eor	r17, r16
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	e8 03       	fmulsu	r22, r16
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	64 00       	.word	0x0064	; ????
     152:	00 00       	nop
     154:	00 00       	nop
     156:	0a 00       	.word	0x000a	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	01 00       	.word	0x0001	; ????
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	2c 76       	andi	r18, 0x6C	; 108
     164:	d8 88       	ldd	r13, Y+16	; 0x10
     166:	dc 67       	ori	r29, 0x7C	; 124
     168:	4f 08       	sbc	r4, r15
     16a:	23 df       	rcall	.-442    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     16c:	c1 df       	rcall	.-126    	; 0xf0 <__SREG__+0xb1>
     16e:	ae 59       	subi	r26, 0x9E	; 158
     170:	e1 b1       	in	r30, 0x01	; 1
     172:	b7 96       	adiw	r30, 0x27	; 39
     174:	e5 e3       	ldi	r30, 0x35	; 53
     176:	e4 53       	subi	r30, 0x34	; 52
     178:	c6 3a       	cpi	r28, 0xA6	; 166
     17a:	e6 51       	subi	r30, 0x16	; 22
     17c:	99 76       	andi	r25, 0x69	; 105
     17e:	96 e8       	ldi	r25, 0x86	; 134
     180:	e6 c2       	rjmp	.+1484   	; 0x74e <_ZN3DHT4readEb+0x2e>
     182:	84 26       	eor	r8, r20
     184:	eb 89       	ldd	r30, Y+19	; 0x13
     186:	8c 9b       	sbis	0x11, 4	; 17
     188:	62 ed       	ldi	r22, 0xD2	; 210
     18a:	40 7c       	andi	r20, 0xC0	; 192
     18c:	6f fc       	.word	0xfc6f	; ????
     18e:	ef bc       	out	0x2f, r14	; 47
     190:	9c 9f       	mul	r25, r28
     192:	40 f2       	brcs	.-112    	; 0x124 <__trampolines_end+0x1c>
     194:	ba a5       	ldd	r27, Y+42	; 0x2a
     196:	6f a5       	ldd	r22, Y+47	; 0x2f
     198:	f4 90       	lpm	r15, Z
     19a:	05 5a       	subi	r16, 0xA5	; 165
     19c:	2a f7       	brpl	.-54     	; 0x168 <__trampolines_end+0x60>
     19e:	5c 93       	st	X, r21
     1a0:	6b 6c       	ori	r22, 0xCB	; 203
     1a2:	f9 67       	ori	r31, 0x79	; 121
     1a4:	6d c1       	rjmp	.+730    	; 0x480 <loop+0x22>
     1a6:	1b fc       	.word	0xfc1b	; ????
     1a8:	e0 e4       	ldi	r30, 0x40	; 64
     1aa:	0d 47       	sbci	r16, 0x7D	; 125
     1ac:	fe f5       	brtc	.+126    	; 0x22c <digital_pin_to_timer_PGM+0x2a>
     1ae:	20 e6       	ldi	r18, 0x60	; 96
     1b0:	b5 00       	.word	0x00b5	; ????
     1b2:	d0 ed       	ldi	r29, 0xD0	; 208
     1b4:	90 2e       	mov	r9, r16
     1b6:	03 00       	.word	0x0003	; ????
     1b8:	94 35       	cpi	r25, 0x54	; 84
     1ba:	77 05       	cpc	r23, r7
     1bc:	00 80       	ld	r0, Z
     1be:	84 1e       	adc	r8, r20
     1c0:	08 00       	.word	0x0008	; ????
     1c2:	00 20       	and	r0, r0
     1c4:	4e 0a       	sbc	r4, r30
     1c6:	00 00       	nop
     1c8:	00 c8       	rjmp	.-4096   	; 0xfffff1ca <__eeprom_end+0xff7ef1ca>
     1ca:	0c 33       	cpi	r16, 0x3C	; 60
     1cc:	33 33       	cpi	r19, 0x33	; 51
     1ce:	33 0f       	add	r19, r19
     1d0:	98 6e       	ori	r25, 0xE8	; 232
     1d2:	12 83       	std	Z+2, r17	; 0x02
     1d4:	11 41       	sbci	r17, 0x11	; 17
     1d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d8:	21 14       	cp	r2, r1
     1da:	89 3b       	cpi	r24, 0xB9	; 185
     1dc:	e6 55       	subi	r30, 0x56	; 86
     1de:	16 cf       	rjmp	.-468    	; 0xc <__FUSE_REGION_LENGTH__+0x9>
     1e0:	fe e6       	ldi	r31, 0x6E	; 110
     1e2:	db 18       	sub	r13, r11
     1e4:	d1 84       	ldd	r13, Z+9	; 0x09
     1e6:	4b 38       	cpi	r20, 0x8B	; 139
     1e8:	1b f7       	brvc	.-58     	; 0x1b0 <__trampolines_end+0xa8>
     1ea:	7c 1d       	adc	r23, r12
     1ec:	90 1d       	adc	r25, r0
     1ee:	a4 bb       	out	0x14, r26	; 20
     1f0:	e4 24       	eor	r14, r4
     1f2:	20 32       	cpi	r18, 0x20	; 32
     1f4:	84 72       	andi	r24, 0x24	; 36
     1f6:	5e 22       	and	r5, r30
     1f8:	81 00       	.word	0x0081	; ????
     1fa:	c9 f1       	breq	.+114    	; 0x26e <digital_pin_to_bit_mask_PGM+0x26>
     1fc:	24 ec       	ldi	r18, 0xC4	; 196
     1fe:	a1 e5       	ldi	r26, 0x51	; 81
     200:	3d 27       	eor	r19, r29

00000202 <digital_pin_to_timer_PGM>:
     202:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     22e:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000248 <digital_pin_to_bit_mask_PGM>:
     248:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     258:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     268:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     278:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     288:	04 08 10 20 40 80                                   ... @.

0000028e <digital_pin_to_port_PGM>:
     28e:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     29e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2ae:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     2be:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2ce:	0b 0b 0b 0b 0b 0b                                   ......

000002d4 <port_to_input_PGM>:
     2d4:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2e4:	00 01 00 00 03 01 06 01 09 01                       ..........

000002ee <port_to_output_PGM>:
     2ee:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2fe:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000308 <port_to_mode_PGM>:
     308:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     318:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000322 <__ctors_start>:
     322:	e6 02       	muls	r30, r22
     324:	a0 0a       	sbc	r10, r16

00000326 <__ctors_end>:
     326:	10 03       	mulsu	r17, r16

00000328 <__dtors_end>:
     328:	11 24       	eor	r1, r1
     32a:	1f be       	out	0x3f, r1	; 63
     32c:	cf ef       	ldi	r28, 0xFF	; 255
     32e:	d1 e2       	ldi	r29, 0x21	; 33
     330:	de bf       	out	0x3e, r29	; 62
     332:	cd bf       	out	0x3d, r28	; 61
     334:	00 e0       	ldi	r16, 0x00	; 0
     336:	0c bf       	out	0x3c, r16	; 60

00000338 <__do_copy_data>:
     338:	12 e0       	ldi	r17, 0x02	; 2
     33a:	a0 e0       	ldi	r26, 0x00	; 0
     33c:	b2 e0       	ldi	r27, 0x02	; 2
     33e:	e0 e1       	ldi	r30, 0x10	; 16
     340:	f6 e2       	ldi	r31, 0x26	; 38
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	0b bf       	out	0x3b, r16	; 59
     346:	02 c0       	rjmp	.+4      	; 0x34c <__do_copy_data+0x14>
     348:	07 90       	elpm	r0, Z+
     34a:	0d 92       	st	X+, r0
     34c:	a4 38       	cpi	r26, 0x84	; 132
     34e:	b1 07       	cpc	r27, r17
     350:	d9 f7       	brne	.-10     	; 0x348 <__do_copy_data+0x10>

00000352 <__do_clear_bss>:
     352:	23 e0       	ldi	r18, 0x03	; 3
     354:	a4 e8       	ldi	r26, 0x84	; 132
     356:	b2 e0       	ldi	r27, 0x02	; 2
     358:	01 c0       	rjmp	.+2      	; 0x35c <.do_clear_bss_start>

0000035a <.do_clear_bss_loop>:
     35a:	1d 92       	st	X+, r1

0000035c <.do_clear_bss_start>:
     35c:	a4 36       	cpi	r26, 0x64	; 100
     35e:	b2 07       	cpc	r27, r18
     360:	e1 f7       	brne	.-8      	; 0x35a <.do_clear_bss_loop>

00000362 <__do_global_ctors>:
     362:	11 e0       	ldi	r17, 0x01	; 1
     364:	c3 e9       	ldi	r28, 0x93	; 147
     366:	d1 e0       	ldi	r29, 0x01	; 1
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	06 c0       	rjmp	.+12     	; 0x378 <__do_global_ctors+0x16>
     36c:	21 97       	sbiw	r28, 0x01	; 1
     36e:	01 09       	sbc	r16, r1
     370:	80 2f       	mov	r24, r16
     372:	fe 01       	movw	r30, r28
     374:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__tablejump2__>
     378:	c1 39       	cpi	r28, 0x91	; 145
     37a:	d1 07       	cpc	r29, r17
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	08 07       	cpc	r16, r24
     380:	a9 f7       	brne	.-22     	; 0x36c <__do_global_ctors+0xa>
     382:	0e 94 ce 0a 	call	0x159c	; 0x159c <main>
     386:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__do_global_dtors>

0000038a <__bad_interrupt>:
     38a:	3a ce       	rjmp	.-908    	; 0x0 <__vectors>

0000038c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     38c:	08 95       	ret

0000038e <setup>:
String DhtSencorHum = "";

#pragma endregion DHT

void setup()
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	e1 97       	sbiw	r28, 0x31	; 49
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3a6:	26 e0       	ldi	r18, 0x06	; 6
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	55 e2       	ldi	r21, 0x25	; 37
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	8a eb       	ldi	r24, 0xBA	; 186
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	fa d7       	rcall	.+4084   	; 0x13aa <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	
#pragma region  DHT

	// Initialize device.
	dht.begin();
     3b6:	84 e9       	ldi	r24, 0x94	; 148
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	1e d4       	rcall	.+2108   	; 0xbf8 <_ZN11DHT_Unified5beginEv>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     3bc:	04 e9       	ldi	r16, 0x94	; 148
     3be:	12 e0       	ldi	r17, 0x02	; 2
     3c0:	f8 01       	movw	r30, r16
     3c2:	86 89       	ldd	r24, Z+22	; 0x16
     3c4:	8b a7       	std	Y+43, r24	; 0x2b
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     3c6:	8a e4       	ldi	r24, 0x4A	; 74
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	9a a7       	std	Y+42, r25	; 0x2a
     3cc:	89 a7       	std	Y+41, r24	; 0x29
     3ce:	87 89       	ldd	r24, Z+23	; 0x17
     3d0:	90 8d       	ldd	r25, Z+24	; 0x18
     3d2:	9d a7       	std	Y+45, r25	; 0x2d
     3d4:	8c a7       	std	Y+44, r24	; 0x2c
     3d6:	81 8d       	ldd	r24, Z+25	; 0x19
     3d8:	92 8d       	ldd	r25, Z+26	; 0x1a
     3da:	a3 8d       	ldd	r26, Z+27	; 0x1b
     3dc:	b4 8d       	ldd	r27, Z+28	; 0x1c
     3de:	8e a7       	std	Y+46, r24	; 0x2e
     3e0:	9f a7       	std	Y+47, r25	; 0x2f
     3e2:	a8 ab       	std	Y+48, r26	; 0x30
     3e4:	b9 ab       	std	Y+49, r27	; 0x31
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     3e6:	be 01       	movw	r22, r28
     3e8:	6f 5f       	subi	r22, 0xFF	; 255
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	ce 01       	movw	r24, r28
     3ee:	89 96       	adiw	r24, 0x29	; 41
     3f0:	49 d4       	rcall	.+2194   	; 0xc84 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     3f2:	f8 01       	movw	r30, r16
     3f4:	87 8d       	ldd	r24, Z+31	; 0x1f
     3f6:	8b a7       	std	Y+43, r24	; 0x2b
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     3f8:	88 e5       	ldi	r24, 0x58	; 88
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	9a a7       	std	Y+42, r25	; 0x2a
     3fe:	89 a7       	std	Y+41, r24	; 0x29
     400:	80 a1       	ldd	r24, Z+32	; 0x20
     402:	91 a1       	ldd	r25, Z+33	; 0x21
     404:	9d a7       	std	Y+45, r25	; 0x2d
     406:	8c a7       	std	Y+44, r24	; 0x2c
     408:	82 a1       	ldd	r24, Z+34	; 0x22
     40a:	93 a1       	ldd	r25, Z+35	; 0x23
     40c:	a4 a1       	ldd	r26, Z+36	; 0x24
     40e:	b5 a1       	ldd	r27, Z+37	; 0x25
     410:	8e a7       	std	Y+46, r24	; 0x2e
     412:	9f a7       	std	Y+47, r25	; 0x2f
     414:	a8 ab       	std	Y+48, r26	; 0x30
     416:	b9 ab       	std	Y+49, r27	; 0x31
	dht.humidity().getSensor(&sensor);
     418:	be 01       	movw	r22, r28
     41a:	6f 5f       	subi	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	89 96       	adiw	r24, 0x29	; 41
     422:	c1 d4       	rcall	.+2434   	; 0xda6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     424:	6d a1       	ldd	r22, Y+37	; 0x25
     426:	7e a1       	ldd	r23, Y+38	; 0x26
     428:	8f a1       	ldd	r24, Y+39	; 0x27
     42a:	98 a5       	ldd	r25, Y+40	; 0x28
     42c:	28 ee       	ldi	r18, 0xE8	; 232
     42e:	33 e0       	ldi	r19, 0x03	; 3
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divmodsi4>
     438:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <delayMS>
     43c:	30 93 91 02 	sts	0x0291, r19	; 0x800291 <delayMS+0x1>
     440:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <delayMS+0x2>
     444:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <delayMS+0x3>
	
#pragma endregion DHT

}
     448:	e1 96       	adiw	r28, 0x31	; 49
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <loop>:

void loop()
{
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	ad 97       	sbiw	r28, 0x2d	; 45
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     47a:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <delayMS>
     47e:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <delayMS+0x1>
     482:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <delayMS+0x2>
     486:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <delayMS+0x3>
     48a:	0e 94 b6 0b 	call	0x176c	; 0x176c <delay>
     48e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <dht+0x16>
     492:	8f a3       	std	Y+39, r24	; 0x27
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     494:	8a e4       	ldi	r24, 0x4A	; 74
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	9e a3       	std	Y+38, r25	; 0x26
     49a:	8d a3       	std	Y+37, r24	; 0x25
     49c:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <dht+0x17>
     4a0:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <dht+0x18>
     4a4:	99 a7       	std	Y+41, r25	; 0x29
     4a6:	88 a7       	std	Y+40, r24	; 0x28
     4a8:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <dht+0x19>
     4ac:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <dht+0x1a>
     4b0:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <dht+0x1b>
     4b4:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <dht+0x1c>
     4b8:	8a a7       	std	Y+42, r24	; 0x2a
     4ba:	9b a7       	std	Y+43, r25	; 0x2b
     4bc:	ac a7       	std	Y+44, r26	; 0x2c
     4be:	bd a7       	std	Y+45, r27	; 0x2d
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	ce 01       	movw	r24, r28
     4c8:	85 96       	adiw	r24, 0x25	; 37
     4ca:	ec d2       	rcall	.+1496   	; 0xaa4 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
	
	// set Temperature value
	if (isnan(event.temperature))
     4cc:	cd 88       	ldd	r12, Y+21	; 0x15
     4ce:	de 88       	ldd	r13, Y+22	; 0x16
     4d0:	ef 88       	ldd	r14, Y+23	; 0x17
     4d2:	f8 8c       	ldd	r15, Y+24	; 0x18
     4d4:	a7 01       	movw	r20, r14
     4d6:	96 01       	movw	r18, r12
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	5a d6       	rcall	.+3252   	; 0x1192 <__unordsf2>
     4de:	88 23       	and	r24, r24
     4e0:	39 f0       	breq	.+14     	; 0x4f0 <loop+0x92>
	{
		DhtSencorTemp = "Error temperature!";
     4e2:	66 e0       	ldi	r22, 0x06	; 6
     4e4:	72 e0       	ldi	r23, 0x02	; 2
     4e6:	8a e8       	ldi	r24, 0x8A	; 138
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN6StringaSEPKc>
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <loop+0xb6>
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
	StringSumHelper(unsigned long num) : String(num) {}
	StringSumHelper(float num) : String(num) {}
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	b7 01       	movw	r22, r14
     4f4:	a6 01       	movw	r20, r12
     4f6:	ce 01       	movw	r24, r28
     4f8:	85 96       	adiw	r24, 0x25	; 37
     4fa:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN6StringC1Efh>
	}
	else
	{
		DhtSencorTemp = event.temperature;
     4fe:	be 01       	movw	r22, r28
     500:	6b 5d       	subi	r22, 0xDB	; 219
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	8a e8       	ldi	r24, 0x8A	; 138
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6StringaSEO15StringSumHelper>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     50c:	ce 01       	movw	r24, r28
     50e:	85 96       	adiw	r24, 0x25	; 37
     510:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN6StringD1Ev>
     514:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <dht+0x1f>
     518:	8f a3       	std	Y+39, r24	; 0x27
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     51a:	88 e5       	ldi	r24, 0x58	; 88
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	9e a3       	std	Y+38, r25	; 0x26
     520:	8d a3       	std	Y+37, r24	; 0x25
     522:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <dht+0x20>
     526:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <dht+0x21>
     52a:	99 a7       	std	Y+41, r25	; 0x29
     52c:	88 a7       	std	Y+40, r24	; 0x28
     52e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <dht+0x22>
     532:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <dht+0x23>
     536:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <dht+0x24>
     53a:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <dht+0x25>
     53e:	8a a7       	std	Y+42, r24	; 0x2a
     540:	9b a7       	std	Y+43, r25	; 0x2b
     542:	ac a7       	std	Y+44, r26	; 0x2c
     544:	bd a7       	std	Y+45, r27	; 0x2d
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	ce 01       	movw	r24, r28
     54e:	85 96       	adiw	r24, 0x25	; 37
     550:	e2 d2       	rcall	.+1476   	; 0xb16 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     552:	cd 88       	ldd	r12, Y+21	; 0x15
     554:	de 88       	ldd	r13, Y+22	; 0x16
     556:	ef 88       	ldd	r14, Y+23	; 0x17
     558:	f8 8c       	ldd	r15, Y+24	; 0x18
     55a:	a7 01       	movw	r20, r14
     55c:	96 01       	movw	r18, r12
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	17 d6       	rcall	.+3118   	; 0x1192 <__unordsf2>
     564:	88 23       	and	r24, r24
     566:	39 f0       	breq	.+14     	; 0x576 <loop+0x118>
	{
		DhtSencorHum = "Error humidity!";
     568:	69 e1       	ldi	r22, 0x19	; 25
     56a:	72 e0       	ldi	r23, 0x02	; 2
     56c:	84 e8       	ldi	r24, 0x84	; 132
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN6StringaSEPKc>
     574:	12 c0       	rjmp	.+36     	; 0x59a <loop+0x13c>
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
	StringSumHelper(unsigned long num) : String(num) {}
	StringSumHelper(float num) : String(num) {}
     576:	22 e0       	ldi	r18, 0x02	; 2
     578:	b7 01       	movw	r22, r14
     57a:	a6 01       	movw	r20, r12
     57c:	ce 01       	movw	r24, r28
     57e:	85 96       	adiw	r24, 0x25	; 37
     580:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN6StringC1Efh>
	}
	else
	{
		DhtSencorHum = event.relative_humidity;
     584:	be 01       	movw	r22, r28
     586:	6b 5d       	subi	r22, 0xDB	; 219
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	84 e8       	ldi	r24, 0x84	; 132
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6StringaSEO15StringSumHelper>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     592:	ce 01       	movw	r24, r28
     594:	85 96       	adiw	r24, 0x25	; 37
     596:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN6StringD1Ev>

	// Send values to MKR WIFI 110 board
#pragma region MKR WIFI 110

	// test output
	Serial.println(DhtSencorTemp);
     59a:	6a e8       	ldi	r22, 0x8A	; 138
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	8a eb       	ldi	r24, 0xBA	; 186
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN5Print7printlnERK6String>
	Serial.println(DhtSencorHum);
     5a6:	64 e8       	ldi	r22, 0x84	; 132
     5a8:	72 e0       	ldi	r23, 0x02	; 2
     5aa:	8a eb       	ldi	r24, 0xBA	; 186
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN5Print7printlnERK6String>
	
	

#pragma endregion MKR WIFI 110
}
     5b2:	ad 96       	adiw	r28, 0x2d	; 45
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	08 95       	ret

000005cc <_GLOBAL__sub_I_dht>:
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     5dc:	aa 24       	eor	r10, r10
     5de:	aa 94       	dec	r10
     5e0:	ba 2c       	mov	r11, r10
     5e2:	65 01       	movw	r12, r10
     5e4:	ee 24       	eor	r14, r14
     5e6:	ea 94       	dec	r14
     5e8:	fe 2c       	mov	r15, r14
     5ea:	87 01       	movw	r16, r14
     5ec:	26 e0       	ldi	r18, 0x06	; 6
     5ee:	4b e0       	ldi	r20, 0x0B	; 11
     5f0:	62 e0       	ldi	r22, 0x02	; 2
     5f2:	84 e9       	ldi	r24, 0x94	; 148
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	c9 d2       	rcall	.+1426   	; 0xb8a <_ZN11DHT_UnifiedC1Ehhhll>
uint32_t delayMS;

String DhtSencorTemp = "";
     5f8:	66 e7       	ldi	r22, 0x76	; 118
     5fa:	72 e0       	ldi	r23, 0x02	; 2
     5fc:	8a e8       	ldi	r24, 0x8A	; 138
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <_ZN6StringC1EPKc>
String DhtSencorHum = "";
     604:	66 e7       	ldi	r22, 0x76	; 118
     606:	72 e0       	ldi	r23, 0x02	; 2
     608:	84 e8       	ldi	r24, 0x84	; 132
     60a:	92 e0       	ldi	r25, 0x02	; 2
	Serial.println(DhtSencorHum);
	
	

#pragma endregion MKR WIFI 110
}
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	af 90       	pop	r10

DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;

String DhtSencorTemp = "";
String DhtSencorHum = "";
     61c:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <_ZN6StringC1EPKc>

00000620 <_GLOBAL__sub_D_dht>:
     620:	84 e8       	ldi	r24, 0x84	; 132
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN6StringD1Ev>
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;

String DhtSencorTemp = "";
     628:	8a e8       	ldi	r24, 0x8A	; 138
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <_ZN6StringD1Ev>

00000630 <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     630:	dc 01       	movw	r26, r24
     632:	15 96       	adiw	r26, 0x05	; 5
     634:	6c 93       	st	X, r22
     636:	15 97       	sbiw	r26, 0x05	; 5
     638:	16 96       	adiw	r26, 0x06	; 6
     63a:	4c 93       	st	X, r20
     63c:	16 97       	sbiw	r26, 0x06	; 6
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	fb 01       	movw	r30, r22
     642:	e8 5b       	subi	r30, 0xB8	; 184
     644:	fd 4f       	sbci	r31, 0xFD	; 253
     646:	e4 91       	lpm	r30, Z
     648:	17 96       	adiw	r26, 0x07	; 7
     64a:	ec 93       	st	X, r30
     64c:	17 97       	sbiw	r26, 0x07	; 7
     64e:	fb 01       	movw	r30, r22
     650:	e2 57       	subi	r30, 0x72	; 114
     652:	fd 4f       	sbci	r31, 0xFD	; 253
     654:	64 91       	lpm	r22, Z
     656:	18 96       	adiw	r26, 0x08	; 8
     658:	6c 93       	st	X, r22
     65a:	18 97       	sbiw	r26, 0x08	; 8
     65c:	40 e8       	ldi	r20, 0x80	; 128
     65e:	5e e3       	ldi	r21, 0x3E	; 62
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	1d 96       	adiw	r26, 0x0d	; 13
     666:	4d 93       	st	X+, r20
     668:	5d 93       	st	X+, r21
     66a:	6d 93       	st	X+, r22
     66c:	7c 93       	st	X, r23
     66e:	50 97       	sbiw	r26, 0x10	; 16
     670:	08 95       	ret

00000672 <_ZN3DHT5beginEh>:
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
     67a:	16 2f       	mov	r17, r22
     67c:	62 e0       	ldi	r22, 0x02	; 2
     67e:	8d 81       	ldd	r24, Y+5	; 0x05
     680:	0e 94 b1 0c 	call	0x1962	; 0x1962 <pinMode>
     684:	0e 94 85 0b 	call	0x170a	; 0x170a <millis>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	80 5d       	subi	r24, 0xD0	; 208
     68e:	97 40       	sbci	r25, 0x07	; 7
     690:	a1 09       	sbc	r26, r1
     692:	b1 09       	sbc	r27, r1
     694:	89 87       	std	Y+9, r24	; 0x09
     696:	9a 87       	std	Y+10, r25	; 0x0a
     698:	ab 87       	std	Y+11, r26	; 0x0b
     69a:	bc 87       	std	Y+12, r27	; 0x0c
     69c:	1a 8b       	std	Y+18, r17	; 0x12
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	ec 01       	movw	r28, r24
     6b6:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
     6b8:	66 23       	and	r22, r22
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <_ZN3DHT11expectPulseEb+0x1a>
     6bc:	91 2f       	mov	r25, r17
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <_ZN3DHT11expectPulseEb+0x1c>
     6c0:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
     6c2:	28 85       	ldd	r18, Y+8	; 0x08
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	22 0f       	add	r18, r18
     6c8:	33 1f       	adc	r19, r19
     6ca:	2c 52       	subi	r18, 0x2C	; 44
     6cc:	3d 4f       	sbci	r19, 0xFD	; 253
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
     6d2:	f9 01       	movw	r30, r18
     6d4:	45 91       	lpm	r20, Z+
     6d6:	54 91       	lpm	r21, Z
     6d8:	fa 01       	movw	r30, r20
     6da:	80 81       	ld	r24, Z
     6dc:	81 23       	and	r24, r17
     6de:	ad 01       	movw	r20, r26
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	98 13       	cpse	r25, r24
     6e6:	0f c0       	rjmp	.+30     	; 0x706 <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
     6e8:	11 96       	adiw	r26, 0x01	; 1
     6ea:	cd 84       	ldd	r12, Y+13	; 0x0d
     6ec:	de 84       	ldd	r13, Y+14	; 0x0e
     6ee:	ef 84       	ldd	r14, Y+15	; 0x0f
     6f0:	f8 88       	ldd	r15, Y+16	; 0x10
     6f2:	4c 15       	cp	r20, r12
     6f4:	5d 05       	cpc	r21, r13
     6f6:	6e 05       	cpc	r22, r14
     6f8:	7f 05       	cpc	r23, r15
     6fa:	58 f3       	brcs	.-42     	; 0x6d2 <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
     6fc:	3f ef       	ldi	r19, 0xFF	; 255
     6fe:	2f ef       	ldi	r18, 0xFF	; 255
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	03 c0       	rjmp	.+6      	; 0x70c <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
     706:	3a 2f       	mov	r19, r26
     708:	25 2f       	mov	r18, r21
     70a:	cb 01       	movw	r24, r22
}
     70c:	63 2f       	mov	r22, r19
     70e:	72 2f       	mov	r23, r18
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	08 95       	ret

00000720 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	c0 54       	subi	r28, 0x40	; 64
     73e:	d1 40       	sbci	r29, 0x01	; 1
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	8c 01       	movw	r16, r24
     74c:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     74e:	dd d7       	rcall	.+4026   	; 0x170a <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
     750:	f1 10       	cpse	r15, r1
     752:	16 c0       	rjmp	.+44     	; 0x780 <_ZN3DHT4readEb+0x60>
     754:	f8 01       	movw	r30, r16
     756:	c1 84       	ldd	r12, Z+9	; 0x09
     758:	d2 84       	ldd	r13, Z+10	; 0x0a
     75a:	e3 84       	ldd	r14, Z+11	; 0x0b
     75c:	f4 84       	ldd	r15, Z+12	; 0x0c
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	2c 19       	sub	r18, r12
     764:	3d 09       	sbc	r19, r13
     766:	4e 09       	sbc	r20, r14
     768:	5f 09       	sbc	r21, r15
     76a:	69 01       	movw	r12, r18
     76c:	7a 01       	movw	r14, r20
     76e:	30 ed       	ldi	r19, 0xD0	; 208
     770:	c3 16       	cp	r12, r19
     772:	37 e0       	ldi	r19, 0x07	; 7
     774:	d3 06       	cpc	r13, r19
     776:	e1 04       	cpc	r14, r1
     778:	f1 04       	cpc	r15, r1
     77a:	10 f4       	brcc	.+4      	; 0x780 <_ZN3DHT4readEb+0x60>
    return _lastresult; // return last correct measurement
     77c:	81 89       	ldd	r24, Z+17	; 0x11
     77e:	b3 c0       	rjmp	.+358    	; 0x8e6 <_ZN3DHT4readEb+0x1c6>
  }
  _lastreadtime = currenttime;
     780:	f8 01       	movw	r30, r16
     782:	61 87       	std	Z+9, r22	; 0x09
     784:	72 87       	std	Z+10, r23	; 0x0a
     786:	83 87       	std	Z+11, r24	; 0x0b
     788:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     78a:	14 82       	std	Z+4, r1	; 0x04
     78c:	13 82       	std	Z+3, r1	; 0x03
     78e:	12 82       	std	Z+2, r1	; 0x02
     790:	11 82       	std	Z+1, r1	; 0x01
     792:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
     794:	62 e0       	ldi	r22, 0x02	; 2
     796:	85 81       	ldd	r24, Z+5	; 0x05
     798:	0e 94 b1 0c 	call	0x1962	; 0x1962 <pinMode>
  delay(1);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	e3 d7       	rcall	.+4038   	; 0x176c <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	f8 01       	movw	r30, r16
     7aa:	85 81       	ldd	r24, Z+5	; 0x05
     7ac:	0e 94 b1 0c 	call	0x1962	; 0x1962 <pinMode>
  digitalWrite(_pin, LOW);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	f8 01       	movw	r30, r16
     7b4:	85 81       	ldd	r24, Z+5	; 0x05
     7b6:	0e 94 ed 0c 	call	0x19da	; 0x19da <digitalWrite>
  switch (_type) {
     7ba:	f8 01       	movw	r30, r16
     7bc:	86 81       	ldd	r24, Z+6	; 0x06
     7be:	85 51       	subi	r24, 0x15	; 21
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	28 f4       	brcc	.+10     	; 0x7ce <_ZN3DHT4readEb+0xae>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
     7c4:	8c e4       	ldi	r24, 0x4C	; 76
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	0e 94 ef 0b 	call	0x17de	; 0x17de <delayMicroseconds>
    break;
     7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <_ZN3DHT4readEb+0xb8>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
     7ce:	64 e1       	ldi	r22, 0x14	; 20
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ca d7       	rcall	.+3988   	; 0x176c <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	f8 01       	movw	r30, r16
     7dc:	85 81       	ldd	r24, Z+5	; 0x05
     7de:	0e 94 b1 0c 	call	0x1962	; 0x1962 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
     7e2:	f8 01       	movw	r30, r16
     7e4:	82 89       	ldd	r24, Z+18	; 0x12
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	fa d7       	rcall	.+4084   	; 0x17de <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
     7ea:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	c8 01       	movw	r24, r16
     7f0:	5a df       	rcall	.-332    	; 0x6a6 <_ZN3DHT11expectPulseEb>
     7f2:	6f 3f       	cpi	r22, 0xFF	; 255
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	8f 4f       	sbci	r24, 0xFF	; 255
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255
     7fa:	21 f4       	brne	.+8      	; 0x804 <_ZN3DHT4readEb+0xe4>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
     7fc:	f8 01       	movw	r30, r16
     7fe:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
     800:	78 94       	sei
     802:	42 c0       	rjmp	.+132    	; 0x888 <_ZN3DHT4readEb+0x168>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	c8 01       	movw	r24, r16
     808:	4e df       	rcall	.-356    	; 0x6a6 <_ZN3DHT11expectPulseEb>
     80a:	6f 3f       	cpi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	8f 4f       	sbci	r24, 0xFF	; 255
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	a1 f3       	breq	.-24     	; 0x7fc <_ZN3DHT4readEb+0xdc>
     814:	9e 01       	movw	r18, r28
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	79 01       	movw	r14, r18
     81c:	5e 01       	movw	r10, r28
     81e:	3f eb       	ldi	r19, 0xBF	; 191
     820:	a3 1a       	sub	r10, r19
     822:	3e ef       	ldi	r19, 0xFE	; 254
     824:	b3 0a       	sbc	r11, r19
     826:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	c8 01       	movw	r24, r16
     82c:	3c df       	rcall	.-392    	; 0x6a6 <_ZN3DHT11expectPulseEb>
     82e:	f6 01       	movw	r30, r12
     830:	60 83       	st	Z, r22
     832:	71 83       	std	Z+1, r23	; 0x01
     834:	82 83       	std	Z+2, r24	; 0x02
     836:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	c8 01       	movw	r24, r16
     83c:	34 df       	rcall	.-408    	; 0x6a6 <_ZN3DHT11expectPulseEb>
     83e:	f6 01       	movw	r30, r12
     840:	64 83       	std	Z+4, r22	; 0x04
     842:	75 83       	std	Z+5, r23	; 0x05
     844:	86 83       	std	Z+6, r24	; 0x06
     846:	97 83       	std	Z+7, r25	; 0x07
     848:	f8 e0       	ldi	r31, 0x08	; 8
     84a:	cf 0e       	add	r12, r31
     84c:	d1 1c       	adc	r13, r1
     84e:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
     850:	db 04       	cpc	r13, r11
     852:	51 f7       	brne	.-44     	; 0x828 <_ZN3DHT4readEb+0x108>
     854:	78 94       	sei
     856:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
     85c:	80 80       	ld	r8, Z
     85e:	91 80       	ldd	r9, Z+1	; 0x01
     860:	a2 80       	ldd	r10, Z+2	; 0x02
     862:	b3 80       	ldd	r11, Z+3	; 0x03
     864:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
     866:	55 81       	ldd	r21, Z+5	; 0x05
     868:	66 81       	ldd	r22, Z+6	; 0x06
     86a:	77 81       	ldd	r23, Z+7	; 0x07
     86c:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
     86e:	8f 16       	cp	r8, r31
     870:	9f 06       	cpc	r9, r31
     872:	af 06       	cpc	r10, r31
     874:	bf 06       	cpc	r11, r31
     876:	31 f0       	breq	.+12     	; 0x884 <_ZN3DHT4readEb+0x164>
     878:	4f 3f       	cpi	r20, 0xFF	; 255
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	58 07       	cpc	r21, r24
     87e:	68 07       	cpc	r22, r24
     880:	78 07       	cpc	r23, r24
     882:	21 f4       	brne	.+8      	; 0x88c <_ZN3DHT4readEb+0x16c>
     884:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
     886:	11 8a       	std	Z+17, r1	; 0x11
     888:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
     88a:	2d c0       	rjmp	.+90     	; 0x8e6 <_ZN3DHT4readEb+0x1c6>
     88c:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	f5 95       	asr	r31
     892:	e7 95       	ror	r30
     894:	8a 95       	dec	r24
     896:	e1 f7       	brne	.-8      	; 0x890 <_ZN3DHT4readEb+0x170>
     898:	e0 0f       	add	r30, r16
     89a:	f1 1f       	adc	r31, r17
     89c:	80 81       	ld	r24, Z
     89e:	88 0f       	add	r24, r24
     8a0:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     8a2:	95 06       	cpc	r9, r21
     8a4:	a6 06       	cpc	r10, r22
     8a6:	b7 06       	cpc	r11, r23
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <_ZN3DHT4readEb+0x18c>
     8aa:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
     8ac:	80 83       	st	Z, r24
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	f8 e0       	ldi	r31, 0x08	; 8
     8b4:	ef 0e       	add	r14, r31
     8b6:	f1 1c       	adc	r15, r1
     8b8:	28 32       	cpi	r18, 0x28	; 40
     8ba:	31 05       	cpc	r19, r1
     8bc:	71 f6       	brne	.-100    	; 0x85a <_ZN3DHT4readEb+0x13a>
     8be:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     8c0:	24 81       	ldd	r18, Z+4	; 0x04
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 81       	ld	r20, Z
     8c6:	81 81       	ldd	r24, Z+1	; 0x01
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	84 0f       	add	r24, r20
     8cc:	91 1d       	adc	r25, r1
     8ce:	42 81       	ldd	r20, Z+2	; 0x02
     8d0:	84 0f       	add	r24, r20
     8d2:	91 1d       	adc	r25, r1
     8d4:	43 81       	ldd	r20, Z+3	; 0x03
     8d6:	84 0f       	add	r24, r20
     8d8:	91 1d       	adc	r25, r1
     8da:	99 27       	eor	r25, r25
     8dc:	28 17       	cp	r18, r24
     8de:	39 07       	cpc	r19, r25
     8e0:	89 f6       	brne	.-94     	; 0x884 <_ZN3DHT4readEb+0x164>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
     8e4:	81 8b       	std	Z+17, r24	; 0x11
     8e6:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     8e8:	de 4f       	sbci	r29, 0xFE	; 254
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	08 95       	ret

0000090e <_ZN3DHT15readTemperatureEbb>:
     90e:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	8c 01       	movw	r16, r24
     920:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
     922:	64 2f       	mov	r22, r20
     924:	fd de       	rcall	.-518    	; 0x720 <_ZN3DHT4readEb>
     926:	88 23       	and	r24, r24
     928:	09 f4       	brne	.+2      	; 0x92c <_ZN3DHT15readTemperatureEbb+0x1e>
     92a:	6b c0       	rjmp	.+214    	; 0xa02 <_ZN3DHT15readTemperatureEbb+0xf4>
    switch (_type) {
     92c:	f8 01       	movw	r30, r16
     92e:	86 81       	ldd	r24, Z+6	; 0x06
     930:	8c 30       	cpi	r24, 0x0C	; 12
     932:	09 f4       	brne	.+2      	; 0x936 <_ZN3DHT15readTemperatureEbb+0x28>
     934:	3e c0       	rjmp	.+124    	; 0x9b2 <_ZN3DHT15readTemperatureEbb+0xa4>
     936:	18 f4       	brcc	.+6      	; 0x93e <_ZN3DHT15readTemperatureEbb+0x30>
     938:	8b 30       	cpi	r24, 0x0B	; 11
     93a:	b9 f0       	breq	.+46     	; 0x96a <_ZN3DHT15readTemperatureEbb+0x5c>
     93c:	62 c0       	rjmp	.+196    	; 0xa02 <_ZN3DHT15readTemperatureEbb+0xf4>
     93e:	85 51       	subi	r24, 0x15	; 21
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	08 f0       	brcs	.+2      	; 0x946 <_ZN3DHT15readTemperatureEbb+0x38>
     944:	5e c0       	rjmp	.+188    	; 0xa02 <_ZN3DHT15readTemperatureEbb+0xf4>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
     946:	f8 01       	movw	r30, r16
     948:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
     94a:	6d 2f       	mov	r22, r29
     94c:	6f 77       	andi	r22, 0x7F	; 127
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	76 2f       	mov	r23, r22
     952:	66 27       	eor	r22, r22
     954:	83 81       	ldd	r24, Z+3	; 0x03
     956:	68 2b       	or	r22, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	05 d3       	rcall	.+1546   	; 0xf68 <__floatunsisf>
     95e:	2d ec       	ldi	r18, 0xCD	; 205
     960:	3c ec       	ldi	r19, 0xCC	; 204
     962:	4c ec       	ldi	r20, 0xCC	; 204
     964:	5d e3       	ldi	r21, 0x3D	; 61
     966:	b2 d3       	rcall	.+1892   	; 0x10cc <__mulsf3>
     968:	3d c0       	rjmp	.+122    	; 0x9e4 <_ZN3DHT15readTemperatureEbb+0xd6>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
     96a:	f8 01       	movw	r30, r16
     96c:	62 81       	ldd	r22, Z+2	; 0x02
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	f9 d2       	rcall	.+1522   	; 0xf68 <__floatunsisf>
     976:	6b 01       	movw	r12, r22
     978:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
     97a:	f8 01       	movw	r30, r16
     97c:	d3 81       	ldd	r29, Z+3	; 0x03
     97e:	d7 ff       	sbrs	r29, 7
     980:	09 c0       	rjmp	.+18     	; 0x994 <_ZN3DHT15readTemperatureEbb+0x86>
        f = -1 - f;
     982:	9b 01       	movw	r18, r22
     984:	ac 01       	movw	r20, r24
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e8       	ldi	r24, 0x80	; 128
     98c:	9f eb       	ldi	r25, 0xBF	; 191
     98e:	87 d2       	rcall	.+1294   	; 0xe9e <__subsf3>
     990:	6b 01       	movw	r12, r22
     992:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
     994:	6d 2f       	mov	r22, r29
     996:	6f 70       	andi	r22, 0x0F	; 15
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	e6 d2       	rcall	.+1484   	; 0xf6c <__floatsisf>
     9a0:	2d ec       	ldi	r18, 0xCD	; 205
     9a2:	3c ec       	ldi	r19, 0xCC	; 204
     9a4:	4c ec       	ldi	r20, 0xCC	; 204
     9a6:	5d e3       	ldi	r21, 0x3D	; 61
     9a8:	91 d3       	rcall	.+1826   	; 0x10cc <__mulsf3>
     9aa:	a7 01       	movw	r20, r14
     9ac:	96 01       	movw	r18, r12
     9ae:	78 d2       	rcall	.+1264   	; 0xea0 <__addsf3>
     9b0:	1b c0       	rjmp	.+54     	; 0x9e8 <_ZN3DHT15readTemperatureEbb+0xda>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
     9b2:	f8 01       	movw	r30, r16
     9b4:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
     9b6:	63 81       	ldd	r22, Z+3	; 0x03
     9b8:	6f 70       	andi	r22, 0x0F	; 15
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	d5 d2       	rcall	.+1450   	; 0xf6c <__floatsisf>
     9c2:	2d ec       	ldi	r18, 0xCD	; 205
     9c4:	3c ec       	ldi	r19, 0xCC	; 204
     9c6:	4c ec       	ldi	r20, 0xCC	; 204
     9c8:	5d e3       	ldi	r21, 0x3D	; 61
     9ca:	80 d3       	rcall	.+1792   	; 0x10cc <__mulsf3>
     9cc:	6b 01       	movw	r12, r22
     9ce:	7c 01       	movw	r14, r24
     9d0:	6d 2f       	mov	r22, r29
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	c7 d2       	rcall	.+1422   	; 0xf68 <__floatunsisf>
     9da:	9b 01       	movw	r18, r22
     9dc:	ac 01       	movw	r20, r24
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	5e d2       	rcall	.+1212   	; 0xea0 <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
     9e4:	d7 fd       	sbrc	r29, 7
        f *= -1;
      }
      if (S) {
     9e6:	90 58       	subi	r25, 0x80	; 128
     9e8:	cc 23       	and	r28, r28
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
     9ea:	79 f0       	breq	.+30     	; 0xa0a <_ZN3DHT15readTemperatureEbb+0xfc>
     9ec:	26 e6       	ldi	r18, 0x66	; 102
     9ee:	36 e6       	ldi	r19, 0x66	; 102
     9f0:	46 ee       	ldi	r20, 0xE6	; 230
     9f2:	5f e3       	ldi	r21, 0x3F	; 63
     9f4:	6b d3       	rcall	.+1750   	; 0x10cc <__mulsf3>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	52 e4       	ldi	r21, 0x42	; 66
     9fe:	50 d2       	rcall	.+1184   	; 0xea0 <__addsf3>
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <_ZN3DHT15readTemperatureEbb+0xfc>
     a02:	60 e0       	ldi	r22, 0x00	; 0
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	80 ec       	ldi	r24, 0xC0	; 192
     a08:	9f e7       	ldi	r25, 0x7F	; 127
     a0a:	df 91       	pop	r29
      }
      break;
    }
  }
  return f;
}
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	08 95       	ret

00000a1c <_ZN3DHT12readHumidityEb>:
     a1c:	cf 92       	push	r12
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
     a2a:	7a de       	rcall	.-780    	; 0x720 <_ZN3DHT4readEb>
     a2c:	88 23       	and	r24, r24
     a2e:	69 f1       	breq	.+90     	; 0xa8a <_ZN3DHT12readHumidityEb+0x6e>
    switch (_type) {
     a30:	8e 81       	ldd	r24, Y+6	; 0x06
     a32:	8b 30       	cpi	r24, 0x0B	; 11
     a34:	50 f1       	brcs	.+84     	; 0xa8a <_ZN3DHT12readHumidityEb+0x6e>
     a36:	8d 30       	cpi	r24, 0x0D	; 13
     a38:	88 f0       	brcs	.+34     	; 0xa5c <_ZN3DHT12readHumidityEb+0x40>
     a3a:	85 51       	subi	r24, 0x15	; 21
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	28 f5       	brcc	.+74     	; 0xa8a <_ZN3DHT12readHumidityEb+0x6e>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
     a40:	68 81       	ld	r22, Y
     a42:	79 81       	ldd	r23, Y+1	; 0x01
     a44:	76 27       	eor	r23, r22
     a46:	67 27       	eor	r22, r23
     a48:	76 27       	eor	r23, r22
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	8c d2       	rcall	.+1304   	; 0xf68 <__floatunsisf>
      f *= 0.1;
     a50:	2d ec       	ldi	r18, 0xCD	; 205
     a52:	3c ec       	ldi	r19, 0xCC	; 204
     a54:	4c ec       	ldi	r20, 0xCC	; 204
     a56:	5d e3       	ldi	r21, 0x3D	; 61
     a58:	39 d3       	rcall	.+1650   	; 0x10cc <__mulsf3>
      break;
     a5a:	1b c0       	rjmp	.+54     	; 0xa92 <_ZN3DHT12readHumidityEb+0x76>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
     a5c:	69 81       	ldd	r22, Y+1	; 0x01
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	83 d2       	rcall	.+1286   	; 0xf6c <__floatsisf>
     a66:	2d ec       	ldi	r18, 0xCD	; 205
     a68:	3c ec       	ldi	r19, 0xCC	; 204
     a6a:	4c ec       	ldi	r20, 0xCC	; 204
     a6c:	5d e3       	ldi	r21, 0x3D	; 61
     a6e:	2e d3       	rcall	.+1628   	; 0x10cc <__mulsf3>
     a70:	6b 01       	movw	r12, r22
     a72:	7c 01       	movw	r14, r24
     a74:	68 81       	ld	r22, Y
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	77 d2       	rcall	.+1262   	; 0xf6c <__floatsisf>
     a7e:	9b 01       	movw	r18, r22
     a80:	ac 01       	movw	r20, r24
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	0c d2       	rcall	.+1048   	; 0xea0 <__addsf3>
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <_ZN3DHT12readHumidityEb+0x76>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	80 ec       	ldi	r24, 0xC0	; 192
     a90:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	08 95       	ret

00000aa0 <_ZN11DHT_Unified8HumidityD1Ev>:
     aa0:	08 95       	ret

00000aa2 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     aa2:	08 95       	ret

00000aa4 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	8c 01       	movw	r16, r24
     aae:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     ab0:	84 e2       	ldi	r24, 0x24	; 36
     ab2:	fb 01       	movw	r30, r22
     ab4:	11 92       	st	Z+, r1
     ab6:	8a 95       	dec	r24
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     aba:	84 e2       	ldi	r24, 0x24	; 36
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	88 83       	st	Y, r24
     ac4:	99 83       	std	Y+1, r25	; 0x01
     ac6:	aa 83       	std	Y+2, r26	; 0x02
     ac8:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     aca:	f8 01       	movw	r30, r16
     acc:	85 81       	ldd	r24, Z+5	; 0x05
     ace:	96 81       	ldd	r25, Z+6	; 0x06
     ad0:	a7 81       	ldd	r26, Z+7	; 0x07
     ad2:	b0 85       	ldd	r27, Z+8	; 0x08
     ad4:	8c 83       	std	Y+4, r24	; 0x04
     ad6:	9d 83       	std	Y+5, r25	; 0x05
     ad8:	ae 83       	std	Y+6, r26	; 0x06
     ada:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     adc:	8d e0       	ldi	r24, 0x0D	; 13
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	88 87       	std	Y+8, r24	; 0x08
     ae6:	99 87       	std	Y+9, r25	; 0x09
     ae8:	aa 87       	std	Y+10, r26	; 0x0a
     aea:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     aec:	0e d6       	rcall	.+3100   	; 0x170a <millis>
     aee:	68 8b       	std	Y+16, r22	; 0x10
     af0:	79 8b       	std	Y+17, r23	; 0x11
     af2:	8a 8b       	std	Y+18, r24	; 0x12
     af4:	9b 8b       	std	Y+19, r25	; 0x13
  event->temperature = _parent->_dht.readTemperature();
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	f8 01       	movw	r30, r16
     afc:	83 81       	ldd	r24, Z+3	; 0x03
     afe:	94 81       	ldd	r25, Z+4	; 0x04
     b00:	06 df       	rcall	.-500    	; 0x90e <_ZN3DHT15readTemperatureEbb>
     b02:	6c 8b       	std	Y+20, r22	; 0x14
     b04:	7d 8b       	std	Y+21, r23	; 0x15
     b06:	8e 8b       	std	Y+22, r24	; 0x16
     b08:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	8c 01       	movw	r16, r24
     b20:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     b22:	84 e2       	ldi	r24, 0x24	; 36
     b24:	fb 01       	movw	r30, r22
     b26:	11 92       	st	Z+, r1
     b28:	8a 95       	dec	r24
     b2a:	e9 f7       	brne	.-6      	; 0xb26 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     b2c:	84 e2       	ldi	r24, 0x24	; 36
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	88 83       	st	Y, r24
     b36:	99 83       	std	Y+1, r25	; 0x01
     b38:	aa 83       	std	Y+2, r26	; 0x02
     b3a:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     b3c:	f8 01       	movw	r30, r16
     b3e:	85 81       	ldd	r24, Z+5	; 0x05
     b40:	96 81       	ldd	r25, Z+6	; 0x06
     b42:	a7 81       	ldd	r26, Z+7	; 0x07
     b44:	b0 85       	ldd	r27, Z+8	; 0x08
     b46:	8c 83       	std	Y+4, r24	; 0x04
     b48:	9d 83       	std	Y+5, r25	; 0x05
     b4a:	ae 83       	std	Y+6, r26	; 0x06
     b4c:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	88 87       	std	Y+8, r24	; 0x08
     b58:	99 87       	std	Y+9, r25	; 0x09
     b5a:	aa 87       	std	Y+10, r26	; 0x0a
     b5c:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     b5e:	d5 d5       	rcall	.+2986   	; 0x170a <millis>
     b60:	68 8b       	std	Y+16, r22	; 0x10
     b62:	79 8b       	std	Y+17, r23	; 0x11
     b64:	8a 8b       	std	Y+18, r24	; 0x12
     b66:	9b 8b       	std	Y+19, r25	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	f8 01       	movw	r30, r16
     b6c:	83 81       	ldd	r24, Z+3	; 0x03
     b6e:	94 81       	ldd	r25, Z+4	; 0x04
     b70:	55 df       	rcall	.-342    	; 0xa1c <_ZN3DHT12readHumidityEb>
     b72:	6c 8b       	std	Y+20, r22	; 0x14
     b74:	7d 8b       	std	Y+21, r23	; 0x15
     b76:	8e 8b       	std	Y+22, r24	; 0x16
     b78:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <_ZN11DHT_Unified8HumidityD0Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     b86:	16 c5       	rjmp	.+2604   	; 0x15b4 <_ZdlPv>

00000b88 <_ZN11DHT_Unified11TemperatureD0Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     b88:	15 c5       	rjmp	.+2602   	; 0x15b4 <_ZdlPv>

00000b8a <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
     b8a:	4f 92       	push	r4
     b8c:	5f 92       	push	r5
     b8e:	6f 92       	push	r6
     b90:	7f 92       	push	r7
     b92:	9f 92       	push	r9
     b94:	af 92       	push	r10
     b96:	bf 92       	push	r11
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
     baa:	94 2e       	mov	r9, r20
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     bac:	41 dd       	rcall	.-1406   	; 0x630 <_ZN3DHTC1Ehhh>
     bae:	9b 8a       	std	Y+19, r9	; 0x13
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     bb0:	8a e4       	ldi	r24, 0x4A	; 74
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	9d 8b       	std	Y+21, r25	; 0x15
     bb6:	8c 8b       	std	Y+20, r24	; 0x14
     bb8:	d8 8f       	std	Y+24, r29	; 0x18
     bba:	cf 8b       	std	Y+23, r28	; 0x17
     bbc:	e9 8e       	std	Y+25, r14	; 0x19
     bbe:	fa 8e       	std	Y+26, r15	; 0x1a
     bc0:	0b 8f       	std	Y+27, r16	; 0x1b
     bc2:	1c 8f       	std	Y+28, r17	; 0x1c
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     bc4:	88 e5       	ldi	r24, 0x58	; 88
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	9e 8f       	std	Y+30, r25	; 0x1e
     bca:	8d 8f       	std	Y+29, r24	; 0x1d
     bcc:	d9 a3       	std	Y+33, r29	; 0x21
     bce:	c8 a3       	std	Y+32, r28	; 0x20
     bd0:	aa a2       	std	Y+34, r10	; 0x22
     bd2:	bb a2       	std	Y+35, r11	; 0x23
     bd4:	cc a2       	std	Y+36, r12	; 0x24
     bd6:	dd a2       	std	Y+37, r13	; 0x25
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	08 95       	ret

00000bf8 <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
     bf8:	67 e3       	ldi	r22, 0x37	; 55
     bfa:	3b cd       	rjmp	.-1418   	; 0x672 <_ZN3DHT5beginEh>

00000bfc <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	eb 01       	movw	r28, r22
  switch (_type) {
     c02:	fc 01       	movw	r30, r24
     c04:	83 89       	ldd	r24, Z+19	; 0x13
     c06:	8c 30       	cpi	r24, 0x0C	; 12
     c08:	89 f0       	breq	.+34     	; 0xc2c <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>
     c0a:	38 f4       	brcc	.+14     	; 0xc1a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
     c0c:	8b 30       	cpi	r24, 0x0B	; 11
     c0e:	c1 f4       	brne	.+48     	; 0xc40 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
     c10:	4b e0       	ldi	r20, 0x0B	; 11
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	69 e2       	ldi	r22, 0x29	; 41
     c16:	72 e0       	ldi	r23, 0x02	; 2
     c18:	17 c0       	rjmp	.+46     	; 0xc48 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
  switch (_type) {
     c1a:	85 31       	cpi	r24, 0x15	; 21
     c1c:	61 f0       	breq	.+24     	; 0xc36 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3a>
     c1e:	86 31       	cpi	r24, 0x16	; 22
     c20:	79 f4       	brne	.+30     	; 0xc40 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    break;
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
     c22:	4b e0       	ldi	r20, 0x0B	; 11
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	6b e3       	ldi	r22, 0x3B	; 59
     c28:	72 e0       	ldi	r23, 0x02	; 2
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
  switch (_type) {
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    break;
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
     c2c:	4b e0       	ldi	r20, 0x0B	; 11
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	6f e2       	ldi	r22, 0x2F	; 47
     c32:	72 e0       	ldi	r23, 0x02	; 2
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
     c36:	4b e0       	ldi	r20, 0x0B	; 11
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	65 e3       	ldi	r22, 0x35	; 53
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
     c40:	4b e0       	ldi	r20, 0x0B	; 11
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	61 e4       	ldi	r22, 0x41	; 65
     c46:	72 e0       	ldi	r23, 0x02	; 2
     c48:	ce 01       	movw	r24, r28
     c4a:	0e 94 9a 10 	call	0x2134	; 0x2134 <strncpy>
    break;
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
     c4e:	1b 86       	std	Y+11, r1	; 0x0b
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
     c56:	fb 01       	movw	r30, r22
  switch (_type) {
     c58:	dc 01       	movw	r26, r24
     c5a:	53 96       	adiw	r26, 0x13	; 19
     c5c:	8c 91       	ld	r24, X
     c5e:	8c 30       	cpi	r24, 0x0C	; 12
     c60:	41 f0       	breq	.+16     	; 0xc72 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     c62:	38 f4       	brcc	.+14     	; 0xc72 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     c64:	8b 30       	cpi	r24, 0x0B	; 11
     c66:	29 f4       	brne	.+10     	; 0xc72 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
     c68:	80 e4       	ldi	r24, 0x40	; 64
     c6a:	92 e4       	ldi	r25, 0x42	; 66
     c6c:	af e0       	ldi	r26, 0x0F	; 15
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x24>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    break;
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	94 e8       	ldi	r25, 0x84	; 132
     c76:	ae e1       	ldi	r26, 0x1E	; 30
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	84 a3       	std	Z+36, r24	; 0x24
     c7c:	95 a3       	std	Z+37, r25	; 0x25
     c7e:	a6 a3       	std	Z+38, r26	; 0x26
     c80:	b7 a3       	std	Z+39, r27	; 0x27
     c82:	08 95       	ret

00000c84 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	8c 01       	movw	r16, r24
     c8e:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     c90:	88 e2       	ldi	r24, 0x28	; 40
     c92:	db 01       	movw	r26, r22
     c94:	1d 92       	st	X+, r1
     c96:	8a 95       	dec	r24
     c98:	e9 f7       	brne	.-6      	; 0xc94 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     c9a:	f8 01       	movw	r30, r16
     c9c:	83 81       	ldd	r24, Z+3	; 0x03
     c9e:	94 81       	ldd	r25, Z+4	; 0x04
     ca0:	ad df       	rcall	.-166    	; 0xbfc <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	8c 87       	std	Y+12, r24	; 0x0c
     cac:	9d 87       	std	Y+13, r25	; 0x0d
     cae:	ae 87       	std	Y+14, r26	; 0x0e
     cb0:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     cb2:	f8 01       	movw	r30, r16
     cb4:	85 81       	ldd	r24, Z+5	; 0x05
     cb6:	96 81       	ldd	r25, Z+6	; 0x06
     cb8:	a7 81       	ldd	r26, Z+7	; 0x07
     cba:	b0 85       	ldd	r27, Z+8	; 0x08
     cbc:	88 8b       	std	Y+16, r24	; 0x10
     cbe:	99 8b       	std	Y+17, r25	; 0x11
     cc0:	aa 8b       	std	Y+18, r26	; 0x12
     cc2:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     cc4:	8d e0       	ldi	r24, 0x0D	; 13
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	8c 8b       	std	Y+20, r24	; 0x14
     cce:	9d 8b       	std	Y+21, r25	; 0x15
     cd0:	ae 8b       	std	Y+22, r26	; 0x16
     cd2:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     cd4:	be 01       	movw	r22, r28
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
     cd8:	94 81       	ldd	r25, Z+4	; 0x04
     cda:	bd df       	rcall	.-134    	; 0xc56 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     cdc:	d8 01       	movw	r26, r16
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	14 97       	sbiw	r26, 0x04	; 4
     ce6:	83 89       	ldd	r24, Z+19	; 0x13
     ce8:	8c 30       	cpi	r24, 0x0C	; 12
     cea:	f1 f0       	breq	.+60     	; 0xd28 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xa4>
     cec:	a0 f4       	brcc	.+40     	; 0xd16 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x92>
     cee:	8b 30       	cpi	r24, 0x0B	; 11
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>
     cf2:	48 c0       	rjmp	.+144    	; 0xd84 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
  case DHT11:
    sensor->max_value = 50.0F;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a8 e4       	ldi	r26, 0x48	; 72
     cfa:	b2 e4       	ldi	r27, 0x42	; 66
     cfc:	88 8f       	std	Y+24, r24	; 0x18
     cfe:	99 8f       	std	Y+25, r25	; 0x19
     d00:	aa 8f       	std	Y+26, r26	; 0x1a
     d02:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     d04:	1c 8e       	std	Y+28, r1	; 0x1c
     d06:	1d 8e       	std	Y+29, r1	; 0x1d
     d08:	1e 8e       	std	Y+30, r1	; 0x1e
     d0a:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 2.0F;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a0 e0       	ldi	r26, 0x00	; 0
     d12:	b0 e4       	ldi	r27, 0x40	; 64
     d14:	32 c0       	rjmp	.+100    	; 0xd7a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     d16:	85 31       	cpi	r24, 0x15	; 21
     d18:	e1 f0       	breq	.+56     	; 0xd52 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xce>
     d1a:	86 31       	cpi	r24, 0x16	; 22
     d1c:	99 f5       	brne	.+102    	; 0xd84 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    sensor->max_value = 80.0F;
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	aa ef       	ldi	r26, 0xFA	; 250
     d24:	b2 e4       	ldi	r27, 0x42	; 66
     d26:	19 c0       	rjmp	.+50     	; 0xd5a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 50.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 2.0F;
    break;
  case DHT12:
    sensor->max_value = 60.0F;
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e7       	ldi	r26, 0x70	; 112
     d2e:	b2 e4       	ldi	r27, 0x42	; 66
     d30:	88 8f       	std	Y+24, r24	; 0x18
     d32:	99 8f       	std	Y+25, r25	; 0x19
     d34:	aa 8f       	std	Y+26, r26	; 0x1a
     d36:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -20.0F;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 ea       	ldi	r26, 0xA0	; 160
     d3e:	b1 ec       	ldi	r27, 0xC1	; 193
     d40:	8c 8f       	std	Y+28, r24	; 0x1c
     d42:	9d 8f       	std	Y+29, r25	; 0x1d
     d44:	ae 8f       	std	Y+30, r26	; 0x1e
     d46:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.5F;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	bf e3       	ldi	r27, 0x3F	; 63
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
    break;
  case DHT21:
    sensor->max_value = 80.0F;
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 ea       	ldi	r26, 0xA0	; 160
     d58:	b2 e4       	ldi	r27, 0x42	; 66
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     d5a:	88 8f       	std	Y+24, r24	; 0x18
     d5c:	99 8f       	std	Y+25, r25	; 0x19
     d5e:	aa 8f       	std	Y+26, r26	; 0x1a
     d60:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -40.0F;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a0 e2       	ldi	r26, 0x20	; 32
     d68:	b2 ec       	ldi	r27, 0xC2	; 194
     d6a:	8c 8f       	std	Y+28, r24	; 0x1c
     d6c:	9d 8f       	std	Y+29, r25	; 0x1d
     d6e:	ae 8f       	std	Y+30, r26	; 0x1e
     d70:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.1F;
     d72:	8d ec       	ldi	r24, 0xCD	; 205
     d74:	9c ec       	ldi	r25, 0xCC	; 204
     d76:	ac ec       	ldi	r26, 0xCC	; 204
     d78:	bd e3       	ldi	r27, 0x3D	; 61
     d7a:	88 a3       	std	Y+32, r24	; 0x20
     d7c:	99 a3       	std	Y+33, r25	; 0x21
     d7e:	aa a3       	std	Y+34, r26	; 0x22
     d80:	bb a3       	std	Y+35, r27	; 0x23
    break;
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x118>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     d84:	18 8e       	std	Y+24, r1	; 0x18
     d86:	19 8e       	std	Y+25, r1	; 0x19
     d88:	1a 8e       	std	Y+26, r1	; 0x1a
     d8a:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     d8c:	1c 8e       	std	Y+28, r1	; 0x1c
     d8e:	1d 8e       	std	Y+29, r1	; 0x1d
     d90:	1e 8e       	std	Y+30, r1	; 0x1e
     d92:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
     d94:	18 a2       	std	Y+32, r1	; 0x20
     d96:	19 a2       	std	Y+33, r1	; 0x21
     d98:	1a a2       	std	Y+34, r1	; 0x22
     d9a:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	8c 01       	movw	r16, r24
     db0:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     db2:	88 e2       	ldi	r24, 0x28	; 40
     db4:	db 01       	movw	r26, r22
     db6:	1d 92       	st	X+, r1
     db8:	8a 95       	dec	r24
     dba:	e9 f7       	brne	.-6      	; 0xdb6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     dbc:	f8 01       	movw	r30, r16
     dbe:	83 81       	ldd	r24, Z+3	; 0x03
     dc0:	94 81       	ldd	r25, Z+4	; 0x04
     dc2:	1c df       	rcall	.-456    	; 0xbfc <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	8c 87       	std	Y+12, r24	; 0x0c
     dce:	9d 87       	std	Y+13, r25	; 0x0d
     dd0:	ae 87       	std	Y+14, r26	; 0x0e
     dd2:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     dd4:	f8 01       	movw	r30, r16
     dd6:	85 81       	ldd	r24, Z+5	; 0x05
     dd8:	96 81       	ldd	r25, Z+6	; 0x06
     dda:	a7 81       	ldd	r26, Z+7	; 0x07
     ddc:	b0 85       	ldd	r27, Z+8	; 0x08
     dde:	88 8b       	std	Y+16, r24	; 0x10
     de0:	99 8b       	std	Y+17, r25	; 0x11
     de2:	aa 8b       	std	Y+18, r26	; 0x12
     de4:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     de6:	8c e0       	ldi	r24, 0x0C	; 12
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a0 e0       	ldi	r26, 0x00	; 0
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	8c 8b       	std	Y+20, r24	; 0x14
     df0:	9d 8b       	std	Y+21, r25	; 0x15
     df2:	ae 8b       	std	Y+22, r26	; 0x16
     df4:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     df6:	be 01       	movw	r22, r28
     df8:	83 81       	ldd	r24, Z+3	; 0x03
     dfa:	94 81       	ldd	r25, Z+4	; 0x04
     dfc:	2c df       	rcall	.-424    	; 0xc56 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     dfe:	d8 01       	movw	r26, r16
     e00:	13 96       	adiw	r26, 0x03	; 3
     e02:	ed 91       	ld	r30, X+
     e04:	fc 91       	ld	r31, X
     e06:	14 97       	sbiw	r26, 0x04	; 4
     e08:	83 89       	ldd	r24, Z+19	; 0x13
     e0a:	8c 30       	cpi	r24, 0x0C	; 12
     e0c:	69 f0       	breq	.+26     	; 0xe28 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x82>
     e0e:	38 f4       	brcc	.+14     	; 0xe1e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x78>
     e10:	8b 30       	cpi	r24, 0x0B	; 11
     e12:	a1 f5       	brne	.+104    	; 0xe7c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
  case DHT11:
    sensor->max_value = 80.0F;
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 ea       	ldi	r26, 0xA0	; 160
     e1a:	b2 e4       	ldi	r27, 0x42	; 66
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x8a>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     e1e:	85 31       	cpi	r24, 0x15	; 21
     e20:	c1 f0       	breq	.+48     	; 0xe52 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
     e22:	86 31       	cpi	r24, 0x16	; 22
     e24:	b1 f0       	breq	.+44     	; 0xe52 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
     e26:	2a c0       	rjmp	.+84     	; 0xe7c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 80.0F;
    sensor->min_value = 20.0F;
    sensor->resolution = 5.0F;
    break;
  case DHT12:
    sensor->max_value = 95.0F;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	ae eb       	ldi	r26, 0xBE	; 190
     e2e:	b2 e4       	ldi	r27, 0x42	; 66
     e30:	88 8f       	std	Y+24, r24	; 0x18
     e32:	99 8f       	std	Y+25, r25	; 0x19
     e34:	aa 8f       	std	Y+26, r26	; 0x1a
     e36:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 20.0F;
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 ea       	ldi	r26, 0xA0	; 160
     e3e:	b1 e4       	ldi	r27, 0x41	; 65
     e40:	8c 8f       	std	Y+28, r24	; 0x1c
     e42:	9d 8f       	std	Y+29, r25	; 0x1d
     e44:	ae 8f       	std	Y+30, r26	; 0x1e
     e46:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 5.0F;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 ea       	ldi	r26, 0xA0	; 160
     e4e:	b0 e4       	ldi	r27, 0x40	; 64
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xcc>
    sensor->max_value = 100.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 100.0F;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a8 ec       	ldi	r26, 0xC8	; 200
     e58:	b2 e4       	ldi	r27, 0x42	; 66
     e5a:	88 8f       	std	Y+24, r24	; 0x18
     e5c:	99 8f       	std	Y+25, r25	; 0x19
     e5e:	aa 8f       	std	Y+26, r26	; 0x1a
     e60:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     e62:	1c 8e       	std	Y+28, r1	; 0x1c
     e64:	1d 8e       	std	Y+29, r1	; 0x1d
     e66:	1e 8e       	std	Y+30, r1	; 0x1e
     e68:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.1F;
     e6a:	8d ec       	ldi	r24, 0xCD	; 205
     e6c:	9c ec       	ldi	r25, 0xCC	; 204
     e6e:	ac ec       	ldi	r26, 0xCC	; 204
     e70:	bd e3       	ldi	r27, 0x3D	; 61
     e72:	88 a3       	std	Y+32, r24	; 0x20
     e74:	99 a3       	std	Y+33, r25	; 0x21
     e76:	aa a3       	std	Y+34, r26	; 0x22
     e78:	bb a3       	std	Y+35, r27	; 0x23
    break;
     e7a:	0c c0       	rjmp	.+24     	; 0xe94 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xee>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     e7c:	18 8e       	std	Y+24, r1	; 0x18
     e7e:	19 8e       	std	Y+25, r1	; 0x19
     e80:	1a 8e       	std	Y+26, r1	; 0x1a
     e82:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     e84:	1c 8e       	std	Y+28, r1	; 0x1c
     e86:	1d 8e       	std	Y+29, r1	; 0x1d
     e88:	1e 8e       	std	Y+30, r1	; 0x1e
     e8a:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
     e8c:	18 a2       	std	Y+32, r1	; 0x20
     e8e:	19 a2       	std	Y+33, r1	; 0x21
     e90:	1a a2       	std	Y+34, r1	; 0x22
     e92:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <__subsf3>:
     e9e:	50 58       	subi	r21, 0x80	; 128

00000ea0 <__addsf3>:
     ea0:	bb 27       	eor	r27, r27
     ea2:	aa 27       	eor	r26, r26
     ea4:	0e d0       	rcall	.+28     	; 0xec2 <__addsf3x>
     ea6:	d8 c0       	rjmp	.+432    	; 0x1058 <__fp_round>
     ea8:	c9 d0       	rcall	.+402    	; 0x103c <__fp_pscA>
     eaa:	30 f0       	brcs	.+12     	; 0xeb8 <__addsf3+0x18>
     eac:	ce d0       	rcall	.+412    	; 0x104a <__fp_pscB>
     eae:	20 f0       	brcs	.+8      	; 0xeb8 <__addsf3+0x18>
     eb0:	31 f4       	brne	.+12     	; 0xebe <__addsf3+0x1e>
     eb2:	9f 3f       	cpi	r25, 0xFF	; 255
     eb4:	11 f4       	brne	.+4      	; 0xeba <__addsf3+0x1a>
     eb6:	1e f4       	brtc	.+6      	; 0xebe <__addsf3+0x1e>
     eb8:	be c0       	rjmp	.+380    	; 0x1036 <__fp_nan>
     eba:	0e f4       	brtc	.+2      	; 0xebe <__addsf3+0x1e>
     ebc:	e0 95       	com	r30
     ebe:	e7 fb       	bst	r30, 7
     ec0:	b4 c0       	rjmp	.+360    	; 0x102a <__fp_inf>

00000ec2 <__addsf3x>:
     ec2:	e9 2f       	mov	r30, r25
     ec4:	da d0       	rcall	.+436    	; 0x107a <__fp_split3>
     ec6:	80 f3       	brcs	.-32     	; 0xea8 <__addsf3+0x8>
     ec8:	ba 17       	cp	r27, r26
     eca:	62 07       	cpc	r22, r18
     ecc:	73 07       	cpc	r23, r19
     ece:	84 07       	cpc	r24, r20
     ed0:	95 07       	cpc	r25, r21
     ed2:	18 f0       	brcs	.+6      	; 0xeda <__addsf3x+0x18>
     ed4:	71 f4       	brne	.+28     	; 0xef2 <__addsf3x+0x30>
     ed6:	9e f5       	brtc	.+102    	; 0xf3e <__addsf3x+0x7c>
     ed8:	f2 c0       	rjmp	.+484    	; 0x10be <__fp_zero>
     eda:	0e f4       	brtc	.+2      	; 0xede <__addsf3x+0x1c>
     edc:	e0 95       	com	r30
     ede:	0b 2e       	mov	r0, r27
     ee0:	ba 2f       	mov	r27, r26
     ee2:	a0 2d       	mov	r26, r0
     ee4:	0b 01       	movw	r0, r22
     ee6:	b9 01       	movw	r22, r18
     ee8:	90 01       	movw	r18, r0
     eea:	0c 01       	movw	r0, r24
     eec:	ca 01       	movw	r24, r20
     eee:	a0 01       	movw	r20, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	ff 27       	eor	r31, r31
     ef4:	59 1b       	sub	r21, r25
     ef6:	99 f0       	breq	.+38     	; 0xf1e <__addsf3x+0x5c>
     ef8:	59 3f       	cpi	r21, 0xF9	; 249
     efa:	50 f4       	brcc	.+20     	; 0xf10 <__addsf3x+0x4e>
     efc:	50 3e       	cpi	r21, 0xE0	; 224
     efe:	68 f1       	brcs	.+90     	; 0xf5a <__addsf3x+0x98>
     f00:	1a 16       	cp	r1, r26
     f02:	f0 40       	sbci	r31, 0x00	; 0
     f04:	a2 2f       	mov	r26, r18
     f06:	23 2f       	mov	r18, r19
     f08:	34 2f       	mov	r19, r20
     f0a:	44 27       	eor	r20, r20
     f0c:	58 5f       	subi	r21, 0xF8	; 248
     f0e:	f3 cf       	rjmp	.-26     	; 0xef6 <__addsf3x+0x34>
     f10:	46 95       	lsr	r20
     f12:	37 95       	ror	r19
     f14:	27 95       	ror	r18
     f16:	a7 95       	ror	r26
     f18:	f0 40       	sbci	r31, 0x00	; 0
     f1a:	53 95       	inc	r21
     f1c:	c9 f7       	brne	.-14     	; 0xf10 <__addsf3x+0x4e>
     f1e:	7e f4       	brtc	.+30     	; 0xf3e <__addsf3x+0x7c>
     f20:	1f 16       	cp	r1, r31
     f22:	ba 0b       	sbc	r27, r26
     f24:	62 0b       	sbc	r22, r18
     f26:	73 0b       	sbc	r23, r19
     f28:	84 0b       	sbc	r24, r20
     f2a:	ba f0       	brmi	.+46     	; 0xf5a <__addsf3x+0x98>
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	a1 f0       	breq	.+40     	; 0xf58 <__addsf3x+0x96>
     f30:	ff 0f       	add	r31, r31
     f32:	bb 1f       	adc	r27, r27
     f34:	66 1f       	adc	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	c2 f7       	brpl	.-16     	; 0xf2c <__addsf3x+0x6a>
     f3c:	0e c0       	rjmp	.+28     	; 0xf5a <__addsf3x+0x98>
     f3e:	ba 0f       	add	r27, r26
     f40:	62 1f       	adc	r22, r18
     f42:	73 1f       	adc	r23, r19
     f44:	84 1f       	adc	r24, r20
     f46:	48 f4       	brcc	.+18     	; 0xf5a <__addsf3x+0x98>
     f48:	87 95       	ror	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	f7 95       	ror	r31
     f52:	9e 3f       	cpi	r25, 0xFE	; 254
     f54:	08 f0       	brcs	.+2      	; 0xf58 <__addsf3x+0x96>
     f56:	b3 cf       	rjmp	.-154    	; 0xebe <__addsf3+0x1e>
     f58:	93 95       	inc	r25
     f5a:	88 0f       	add	r24, r24
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <__addsf3x+0x9e>
     f5e:	99 27       	eor	r25, r25
     f60:	ee 0f       	add	r30, r30
     f62:	97 95       	ror	r25
     f64:	87 95       	ror	r24
     f66:	08 95       	ret

00000f68 <__floatunsisf>:
     f68:	e8 94       	clt
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <__floatsisf+0x12>

00000f6c <__floatsisf>:
     f6c:	97 fb       	bst	r25, 7
     f6e:	3e f4       	brtc	.+14     	; 0xf7e <__floatsisf+0x12>
     f70:	90 95       	com	r25
     f72:	80 95       	com	r24
     f74:	70 95       	com	r23
     f76:	61 95       	neg	r22
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	8f 4f       	sbci	r24, 0xFF	; 255
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	99 23       	and	r25, r25
     f80:	a9 f0       	breq	.+42     	; 0xfac <__floatsisf+0x40>
     f82:	f9 2f       	mov	r31, r25
     f84:	96 e9       	ldi	r25, 0x96	; 150
     f86:	bb 27       	eor	r27, r27
     f88:	93 95       	inc	r25
     f8a:	f6 95       	lsr	r31
     f8c:	87 95       	ror	r24
     f8e:	77 95       	ror	r23
     f90:	67 95       	ror	r22
     f92:	b7 95       	ror	r27
     f94:	f1 11       	cpse	r31, r1
     f96:	f8 cf       	rjmp	.-16     	; 0xf88 <__floatsisf+0x1c>
     f98:	fa f4       	brpl	.+62     	; 0xfd8 <__floatsisf+0x6c>
     f9a:	bb 0f       	add	r27, r27
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <__floatsisf+0x36>
     f9e:	60 ff       	sbrs	r22, 0
     fa0:	1b c0       	rjmp	.+54     	; 0xfd8 <__floatsisf+0x6c>
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	16 c0       	rjmp	.+44     	; 0xfd8 <__floatsisf+0x6c>
     fac:	88 23       	and	r24, r24
     fae:	11 f0       	breq	.+4      	; 0xfb4 <__floatsisf+0x48>
     fb0:	96 e9       	ldi	r25, 0x96	; 150
     fb2:	11 c0       	rjmp	.+34     	; 0xfd6 <__floatsisf+0x6a>
     fb4:	77 23       	and	r23, r23
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <__floatsisf+0x54>
     fb8:	9e e8       	ldi	r25, 0x8E	; 142
     fba:	87 2f       	mov	r24, r23
     fbc:	76 2f       	mov	r23, r22
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <__floatsisf+0x5e>
     fc0:	66 23       	and	r22, r22
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <__floatsisf+0x74>
     fc4:	96 e8       	ldi	r25, 0x86	; 134
     fc6:	86 2f       	mov	r24, r22
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	2a f0       	brmi	.+10     	; 0xfd8 <__floatsisf+0x6c>
     fce:	9a 95       	dec	r25
     fd0:	66 0f       	add	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	88 1f       	adc	r24, r24
     fd6:	da f7       	brpl	.-10     	; 0xfce <__floatsisf+0x62>
     fd8:	88 0f       	add	r24, r24
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	97 f9       	bld	r25, 7
     fe0:	08 95       	ret

00000fe2 <__fp_cmp>:
     fe2:	99 0f       	add	r25, r25
     fe4:	00 08       	sbc	r0, r0
     fe6:	55 0f       	add	r21, r21
     fe8:	aa 0b       	sbc	r26, r26
     fea:	e0 e8       	ldi	r30, 0x80	; 128
     fec:	fe ef       	ldi	r31, 0xFE	; 254
     fee:	16 16       	cp	r1, r22
     ff0:	17 06       	cpc	r1, r23
     ff2:	e8 07       	cpc	r30, r24
     ff4:	f9 07       	cpc	r31, r25
     ff6:	c0 f0       	brcs	.+48     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     ff8:	12 16       	cp	r1, r18
     ffa:	13 06       	cpc	r1, r19
     ffc:	e4 07       	cpc	r30, r20
     ffe:	f5 07       	cpc	r31, r21
    1000:	98 f0       	brcs	.+38     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1002:	62 1b       	sub	r22, r18
    1004:	73 0b       	sbc	r23, r19
    1006:	84 0b       	sbc	r24, r20
    1008:	95 0b       	sbc	r25, r21
    100a:	39 f4       	brne	.+14     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    100c:	0a 26       	eor	r0, r26
    100e:	61 f0       	breq	.+24     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1010:	23 2b       	or	r18, r19
    1012:	24 2b       	or	r18, r20
    1014:	25 2b       	or	r18, r21
    1016:	21 f4       	brne	.+8      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1018:	08 95       	ret
    101a:	0a 26       	eor	r0, r26
    101c:	09 f4       	brne	.+2      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    101e:	a1 40       	sbci	r26, 0x01	; 1
    1020:	a6 95       	lsr	r26
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	81 1d       	adc	r24, r1
    1026:	81 1d       	adc	r24, r1
    1028:	08 95       	ret

0000102a <__fp_inf>:
    102a:	97 f9       	bld	r25, 7
    102c:	9f 67       	ori	r25, 0x7F	; 127
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	08 95       	ret

00001036 <__fp_nan>:
    1036:	9f ef       	ldi	r25, 0xFF	; 255
    1038:	80 ec       	ldi	r24, 0xC0	; 192
    103a:	08 95       	ret

0000103c <__fp_pscA>:
    103c:	00 24       	eor	r0, r0
    103e:	0a 94       	dec	r0
    1040:	16 16       	cp	r1, r22
    1042:	17 06       	cpc	r1, r23
    1044:	18 06       	cpc	r1, r24
    1046:	09 06       	cpc	r0, r25
    1048:	08 95       	ret

0000104a <__fp_pscB>:
    104a:	00 24       	eor	r0, r0
    104c:	0a 94       	dec	r0
    104e:	12 16       	cp	r1, r18
    1050:	13 06       	cpc	r1, r19
    1052:	14 06       	cpc	r1, r20
    1054:	05 06       	cpc	r0, r21
    1056:	08 95       	ret

00001058 <__fp_round>:
    1058:	09 2e       	mov	r0, r25
    105a:	03 94       	inc	r0
    105c:	00 0c       	add	r0, r0
    105e:	11 f4       	brne	.+4      	; 0x1064 <__fp_round+0xc>
    1060:	88 23       	and	r24, r24
    1062:	52 f0       	brmi	.+20     	; 0x1078 <__fp_round+0x20>
    1064:	bb 0f       	add	r27, r27
    1066:	40 f4       	brcc	.+16     	; 0x1078 <__fp_round+0x20>
    1068:	bf 2b       	or	r27, r31
    106a:	11 f4       	brne	.+4      	; 0x1070 <__fp_round+0x18>
    106c:	60 ff       	sbrs	r22, 0
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <__fp_round+0x20>
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	08 95       	ret

0000107a <__fp_split3>:
    107a:	57 fd       	sbrc	r21, 7
    107c:	90 58       	subi	r25, 0x80	; 128
    107e:	44 0f       	add	r20, r20
    1080:	55 1f       	adc	r21, r21
    1082:	59 f0       	breq	.+22     	; 0x109a <__fp_splitA+0x10>
    1084:	5f 3f       	cpi	r21, 0xFF	; 255
    1086:	71 f0       	breq	.+28     	; 0x10a4 <__fp_splitA+0x1a>
    1088:	47 95       	ror	r20

0000108a <__fp_splitA>:
    108a:	88 0f       	add	r24, r24
    108c:	97 fb       	bst	r25, 7
    108e:	99 1f       	adc	r25, r25
    1090:	61 f0       	breq	.+24     	; 0x10aa <__fp_splitA+0x20>
    1092:	9f 3f       	cpi	r25, 0xFF	; 255
    1094:	79 f0       	breq	.+30     	; 0x10b4 <__fp_splitA+0x2a>
    1096:	87 95       	ror	r24
    1098:	08 95       	ret
    109a:	12 16       	cp	r1, r18
    109c:	13 06       	cpc	r1, r19
    109e:	14 06       	cpc	r1, r20
    10a0:	55 1f       	adc	r21, r21
    10a2:	f2 cf       	rjmp	.-28     	; 0x1088 <__fp_split3+0xe>
    10a4:	46 95       	lsr	r20
    10a6:	f1 df       	rcall	.-30     	; 0x108a <__fp_splitA>
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <__fp_splitA+0x30>
    10aa:	16 16       	cp	r1, r22
    10ac:	17 06       	cpc	r1, r23
    10ae:	18 06       	cpc	r1, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	f1 cf       	rjmp	.-30     	; 0x1096 <__fp_splitA+0xc>
    10b4:	86 95       	lsr	r24
    10b6:	71 05       	cpc	r23, r1
    10b8:	61 05       	cpc	r22, r1
    10ba:	08 94       	sec
    10bc:	08 95       	ret

000010be <__fp_zero>:
    10be:	e8 94       	clt

000010c0 <__fp_szero>:
    10c0:	bb 27       	eor	r27, r27
    10c2:	66 27       	eor	r22, r22
    10c4:	77 27       	eor	r23, r23
    10c6:	cb 01       	movw	r24, r22
    10c8:	97 f9       	bld	r25, 7
    10ca:	08 95       	ret

000010cc <__mulsf3>:
    10cc:	0b d0       	rcall	.+22     	; 0x10e4 <__mulsf3x>
    10ce:	c4 cf       	rjmp	.-120    	; 0x1058 <__fp_round>
    10d0:	b5 df       	rcall	.-150    	; 0x103c <__fp_pscA>
    10d2:	28 f0       	brcs	.+10     	; 0x10de <__mulsf3+0x12>
    10d4:	ba df       	rcall	.-140    	; 0x104a <__fp_pscB>
    10d6:	18 f0       	brcs	.+6      	; 0x10de <__mulsf3+0x12>
    10d8:	95 23       	and	r25, r21
    10da:	09 f0       	breq	.+2      	; 0x10de <__mulsf3+0x12>
    10dc:	a6 cf       	rjmp	.-180    	; 0x102a <__fp_inf>
    10de:	ab cf       	rjmp	.-170    	; 0x1036 <__fp_nan>
    10e0:	11 24       	eor	r1, r1
    10e2:	ee cf       	rjmp	.-36     	; 0x10c0 <__fp_szero>

000010e4 <__mulsf3x>:
    10e4:	ca df       	rcall	.-108    	; 0x107a <__fp_split3>
    10e6:	a0 f3       	brcs	.-24     	; 0x10d0 <__mulsf3+0x4>

000010e8 <__mulsf3_pse>:
    10e8:	95 9f       	mul	r25, r21
    10ea:	d1 f3       	breq	.-12     	; 0x10e0 <__mulsf3+0x14>
    10ec:	95 0f       	add	r25, r21
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	55 1f       	adc	r21, r21
    10f2:	62 9f       	mul	r22, r18
    10f4:	f0 01       	movw	r30, r0
    10f6:	72 9f       	mul	r23, r18
    10f8:	bb 27       	eor	r27, r27
    10fa:	f0 0d       	add	r31, r0
    10fc:	b1 1d       	adc	r27, r1
    10fe:	63 9f       	mul	r22, r19
    1100:	aa 27       	eor	r26, r26
    1102:	f0 0d       	add	r31, r0
    1104:	b1 1d       	adc	r27, r1
    1106:	aa 1f       	adc	r26, r26
    1108:	64 9f       	mul	r22, r20
    110a:	66 27       	eor	r22, r22
    110c:	b0 0d       	add	r27, r0
    110e:	a1 1d       	adc	r26, r1
    1110:	66 1f       	adc	r22, r22
    1112:	82 9f       	mul	r24, r18
    1114:	22 27       	eor	r18, r18
    1116:	b0 0d       	add	r27, r0
    1118:	a1 1d       	adc	r26, r1
    111a:	62 1f       	adc	r22, r18
    111c:	73 9f       	mul	r23, r19
    111e:	b0 0d       	add	r27, r0
    1120:	a1 1d       	adc	r26, r1
    1122:	62 1f       	adc	r22, r18
    1124:	83 9f       	mul	r24, r19
    1126:	a0 0d       	add	r26, r0
    1128:	61 1d       	adc	r22, r1
    112a:	22 1f       	adc	r18, r18
    112c:	74 9f       	mul	r23, r20
    112e:	33 27       	eor	r19, r19
    1130:	a0 0d       	add	r26, r0
    1132:	61 1d       	adc	r22, r1
    1134:	23 1f       	adc	r18, r19
    1136:	84 9f       	mul	r24, r20
    1138:	60 0d       	add	r22, r0
    113a:	21 1d       	adc	r18, r1
    113c:	82 2f       	mov	r24, r18
    113e:	76 2f       	mov	r23, r22
    1140:	6a 2f       	mov	r22, r26
    1142:	11 24       	eor	r1, r1
    1144:	9f 57       	subi	r25, 0x7F	; 127
    1146:	50 40       	sbci	r21, 0x00	; 0
    1148:	8a f0       	brmi	.+34     	; 0x116c <__mulsf3_pse+0x84>
    114a:	e1 f0       	breq	.+56     	; 0x1184 <__mulsf3_pse+0x9c>
    114c:	88 23       	and	r24, r24
    114e:	4a f0       	brmi	.+18     	; 0x1162 <__mulsf3_pse+0x7a>
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	bb 1f       	adc	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	50 40       	sbci	r21, 0x00	; 0
    1160:	a9 f7       	brne	.-22     	; 0x114c <__mulsf3_pse+0x64>
    1162:	9e 3f       	cpi	r25, 0xFE	; 254
    1164:	51 05       	cpc	r21, r1
    1166:	70 f0       	brcs	.+28     	; 0x1184 <__mulsf3_pse+0x9c>
    1168:	60 cf       	rjmp	.-320    	; 0x102a <__fp_inf>
    116a:	aa cf       	rjmp	.-172    	; 0x10c0 <__fp_szero>
    116c:	5f 3f       	cpi	r21, 0xFF	; 255
    116e:	ec f3       	brlt	.-6      	; 0x116a <__mulsf3_pse+0x82>
    1170:	98 3e       	cpi	r25, 0xE8	; 232
    1172:	dc f3       	brlt	.-10     	; 0x116a <__mulsf3_pse+0x82>
    1174:	86 95       	lsr	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	b7 95       	ror	r27
    117c:	f7 95       	ror	r31
    117e:	e7 95       	ror	r30
    1180:	9f 5f       	subi	r25, 0xFF	; 255
    1182:	c1 f7       	brne	.-16     	; 0x1174 <__mulsf3_pse+0x8c>
    1184:	fe 2b       	or	r31, r30
    1186:	88 0f       	add	r24, r24
    1188:	91 1d       	adc	r25, r1
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	97 f9       	bld	r25, 7
    1190:	08 95       	ret

00001192 <__unordsf2>:
    1192:	27 df       	rcall	.-434    	; 0xfe2 <__fp_cmp>
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	08 95       	ret

0000119a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    119a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    119c:	91 8d       	ldd	r25, Z+25	; 0x19
    119e:	22 8d       	ldd	r18, Z+26	; 0x1a
    11a0:	89 2f       	mov	r24, r25
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	80 5c       	subi	r24, 0xC0	; 192
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	82 1b       	sub	r24, r18
    11aa:	91 09       	sbc	r25, r1
}
    11ac:	8f 73       	andi	r24, 0x3F	; 63
    11ae:	99 27       	eor	r25, r25
    11b0:	08 95       	ret

000011b2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    11b2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    11b4:	91 8d       	ldd	r25, Z+25	; 0x19
    11b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    11b8:	98 17       	cp	r25, r24
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    11bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    11be:	e8 0f       	add	r30, r24
    11c0:	f1 1d       	adc	r31, r1
    11c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    11cc:	08 95       	ret

000011ce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    11ce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    11d0:	91 8d       	ldd	r25, Z+25	; 0x19
    11d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    11d4:	98 17       	cp	r25, r24
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    11d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    11da:	df 01       	movw	r26, r30
    11dc:	a8 0f       	add	r26, r24
    11de:	b1 1d       	adc	r27, r1
    11e0:	5d 96       	adiw	r26, 0x1d	; 29
    11e2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    11e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	9f 73       	andi	r25, 0x3F	; 63
    11ea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    11f4:	08 95       	ret

000011f6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    11f6:	fc 01       	movw	r30, r24
    11f8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    11fa:	44 8d       	ldd	r20, Z+28	; 0x1c
    11fc:	25 2f       	mov	r18, r21
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	84 2f       	mov	r24, r20
    1202:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1204:	82 1b       	sub	r24, r18
    1206:	93 0b       	sbc	r25, r19
    1208:	54 17       	cp	r21, r20
    120a:	10 f0       	brcs	.+4      	; 0x1210 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    120c:	cf 96       	adiw	r24, 0x3f	; 63
    120e:	08 95       	ret
  return tail - head - 1;
    1210:	01 97       	sbiw	r24, 0x01	; 1
}
    1212:	08 95       	ret

00001214 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1214:	87 e9       	ldi	r24, 0x97	; 151
    1216:	9a e0       	ldi	r25, 0x0A	; 10
    1218:	89 2b       	or	r24, r25
    121a:	39 f0       	breq	.+14     	; 0x122a <_Z14serialEventRunv+0x16>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	89 2b       	or	r24, r25
    1222:	19 f0       	breq	.+6      	; 0x122a <_Z14serialEventRunv+0x16>
    1224:	84 d1       	rcall	.+776    	; 0x152e <_Z17Serial0_availablev>
    1226:	81 11       	cpse	r24, r1
    1228:	25 c0       	rjmp	.+74     	; 0x1274 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	89 2b       	or	r24, r25
    1230:	41 f0       	breq	.+16     	; 0x1242 <_Z14serialEventRunv+0x2e>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	89 2b       	or	r24, r25
    1238:	21 f0       	breq	.+8      	; 0x1242 <_Z14serialEventRunv+0x2e>
    123a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    123e:	81 11       	cpse	r24, r1
    1240:	1c c0       	rjmp	.+56     	; 0x127a <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	89 2b       	or	r24, r25
    1248:	41 f0       	breq	.+16     	; 0x125a <_Z14serialEventRunv+0x46>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	89 2b       	or	r24, r25
    1250:	21 f0       	breq	.+8      	; 0x125a <_Z14serialEventRunv+0x46>
    1252:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1256:	81 11       	cpse	r24, r1
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	89 2b       	or	r24, r25
    1260:	a1 f0       	breq	.+40     	; 0x128a <_Z14serialEventRunv+0x76>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	89 2b       	or	r24, r25
    1268:	81 f0       	breq	.+32     	; 0x128a <_Z14serialEventRunv+0x76>
    126a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    126e:	81 11       	cpse	r24, r1
    1270:	0a c0       	rjmp	.+20     	; 0x1286 <_Z14serialEventRunv+0x72>
    1272:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1274:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1278:	d8 cf       	rjmp	.-80     	; 0x122a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    127a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    127e:	e1 cf       	rjmp	.-62     	; 0x1242 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1280:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1284:	ea cf       	rjmp	.-44     	; 0x125a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    128a:	08 95       	ret

0000128c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    128c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    128e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1290:	df 01       	movw	r26, r30
    1292:	a8 0f       	add	r26, r24
    1294:	b1 1d       	adc	r27, r1
    1296:	a3 5a       	subi	r26, 0xA3	; 163
    1298:	bf 4f       	sbci	r27, 0xFF	; 255
    129a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    129c:	84 8d       	ldd	r24, Z+28	; 0x1c
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	8f 73       	andi	r24, 0x3F	; 63
    12a4:	99 27       	eor	r25, r25
    12a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    12a8:	a6 89       	ldd	r26, Z+22	; 0x16
    12aa:	b7 89       	ldd	r27, Z+23	; 0x17
    12ac:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    12ae:	a0 89       	ldd	r26, Z+16	; 0x10
    12b0:	b1 89       	ldd	r27, Z+17	; 0x11
    12b2:	8c 91       	ld	r24, X
    12b4:	83 70       	andi	r24, 0x03	; 3
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    12ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    12bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    12be:	98 13       	cpse	r25, r24
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    12c2:	02 88       	ldd	r0, Z+18	; 0x12
    12c4:	f3 89       	ldd	r31, Z+19	; 0x13
    12c6:	e0 2d       	mov	r30, r0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 7d       	andi	r24, 0xDF	; 223
    12cc:	80 83       	st	Z, r24
    12ce:	08 95       	ret

000012d0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
  _written = true;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    12e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12e6:	98 13       	cpse	r25, r24
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <_ZN14HardwareSerial5writeEh+0x24>
    12ea:	e8 89       	ldd	r30, Y+16	; 0x10
    12ec:	f9 89       	ldd	r31, Y+17	; 0x11
    12ee:	80 81       	ld	r24, Z
    12f0:	85 fd       	sbrc	r24, 5
    12f2:	25 c0       	rjmp	.+74     	; 0x133e <_ZN14HardwareSerial5writeEh+0x6e>
    12f4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    12f6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	0f 5f       	subi	r16, 0xFF	; 255
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	0f 73       	andi	r16, 0x3F	; 63
    1300:	11 27       	eor	r17, r17
    1302:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1304:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1306:	e8 12       	cpse	r14, r24
    1308:	0b c0       	rjmp	.+22     	; 0x1320 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	07 fc       	sbrc	r0, 7
    130e:	fa cf       	rjmp	.-12     	; 0x1304 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1310:	e8 89       	ldd	r30, Y+16	; 0x10
    1312:	f9 89       	ldd	r31, Y+17	; 0x11
    1314:	80 81       	ld	r24, Z
    1316:	85 ff       	sbrs	r24, 5
    1318:	f5 cf       	rjmp	.-22     	; 0x1304 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    131a:	ce 01       	movw	r24, r28
    131c:	b7 df       	rcall	.-146    	; 0x128c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    131e:	f2 cf       	rjmp	.-28     	; 0x1304 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1322:	fe 01       	movw	r30, r28
    1324:	e8 0f       	add	r30, r24
    1326:	f1 1d       	adc	r31, r1
    1328:	e3 5a       	subi	r30, 0xA3	; 163
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    132e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1330:	f8 94       	cli
    _tx_buffer_head = i;
    1332:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1334:	ea 89       	ldd	r30, Y+18	; 0x12
    1336:	fb 89       	ldd	r31, Y+19	; 0x13
    1338:	80 81       	ld	r24, Z
    133a:	80 62       	ori	r24, 0x20	; 32
    133c:	0a c0       	rjmp	.+20     	; 0x1352 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    133e:	9f b7       	in	r25, 0x3f	; 63
    1340:	f8 94       	cli
      *_udr = c;
    1342:	ee 89       	ldd	r30, Y+22	; 0x16
    1344:	ff 89       	ldd	r31, Y+23	; 0x17
    1346:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1348:	e8 89       	ldd	r30, Y+16	; 0x10
    134a:	f9 89       	ldd	r31, Y+17	; 0x11
    134c:	80 81       	ld	r24, Z
    134e:	83 70       	andi	r24, 0x03	; 3
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1354:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	08 95       	ret

00001368 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    136e:	88 8d       	ldd	r24, Y+24	; 0x18
    1370:	88 23       	and	r24, r24
    1372:	c1 f0       	breq	.+48     	; 0x13a4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1374:	ea 89       	ldd	r30, Y+18	; 0x12
    1376:	fb 89       	ldd	r31, Y+19	; 0x13
    1378:	80 81       	ld	r24, Z
    137a:	85 fd       	sbrc	r24, 5
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <_ZN14HardwareSerial5flushEv+0x20>
    137e:	a8 89       	ldd	r26, Y+16	; 0x10
    1380:	b9 89       	ldd	r27, Y+17	; 0x11
    1382:	8c 91       	ld	r24, X
    1384:	86 fd       	sbrc	r24, 6
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	07 fc       	sbrc	r0, 7
    138c:	f5 cf       	rjmp	.-22     	; 0x1378 <_ZN14HardwareSerial5flushEv+0x10>
    138e:	80 81       	ld	r24, Z
    1390:	85 ff       	sbrs	r24, 5
    1392:	f2 cf       	rjmp	.-28     	; 0x1378 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1394:	a8 89       	ldd	r26, Y+16	; 0x10
    1396:	b9 89       	ldd	r27, Y+17	; 0x11
    1398:	8c 91       	ld	r24, X
    139a:	85 ff       	sbrs	r24, 5
    139c:	ed cf       	rjmp	.-38     	; 0x1378 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    139e:	ce 01       	movw	r24, r28
    13a0:	75 df       	rcall	.-278    	; 0x128c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13a2:	e8 cf       	rjmp	.-48     	; 0x1374 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
    13ba:	6a 01       	movw	r12, r20
    13bc:	7b 01       	movw	r14, r22
    13be:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    13c0:	e8 89       	ldd	r30, Y+16	; 0x10
    13c2:	f9 89       	ldd	r31, Y+17	; 0x11
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13c8:	41 15       	cp	r20, r1
    13ca:	51 4e       	sbci	r21, 0xE1	; 225
    13cc:	61 05       	cpc	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	a9 f0       	breq	.+42     	; 0x13fc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	79 e0       	ldi	r23, 0x09	; 9
    13d6:	8d e3       	ldi	r24, 0x3D	; 61
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a7 01       	movw	r20, r14
    13dc:	96 01       	movw	r18, r12
    13de:	34 d4       	rcall	.+2152   	; 0x1c48 <__udivmodsi4>
    13e0:	da 01       	movw	r26, r20
    13e2:	c9 01       	movw	r24, r18
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	a1 09       	sbc	r26, r1
    13e8:	b1 09       	sbc	r27, r1
    13ea:	b6 95       	lsr	r27
    13ec:	a7 95       	ror	r26
    13ee:	97 95       	ror	r25
    13f0:	87 95       	ror	r24
    13f2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13f4:	21 15       	cp	r18, r1
    13f6:	80 e1       	ldi	r24, 0x10	; 16
    13f8:	38 07       	cpc	r19, r24
    13fa:	a0 f0       	brcs	.+40     	; 0x1424 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    13fc:	e8 89       	ldd	r30, Y+16	; 0x10
    13fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1400:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1402:	60 e8       	ldi	r22, 0x80	; 128
    1404:	74 e8       	ldi	r23, 0x84	; 132
    1406:	8e e1       	ldi	r24, 0x1E	; 30
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	1c d4       	rcall	.+2104   	; 0x1c48 <__udivmodsi4>
    1410:	da 01       	movw	r26, r20
    1412:	c9 01       	movw	r24, r18
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	a1 09       	sbc	r26, r1
    1418:	b1 09       	sbc	r27, r1
    141a:	b6 95       	lsr	r27
    141c:	a7 95       	ror	r26
    141e:	97 95       	ror	r25
    1420:	87 95       	ror	r24
    1422:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1424:	ec 85       	ldd	r30, Y+12	; 0x0c
    1426:	fd 85       	ldd	r31, Y+13	; 0x0d
    1428:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    142a:	ee 85       	ldd	r30, Y+14	; 0x0e
    142c:	ff 85       	ldd	r31, Y+15	; 0x0f
    142e:	20 83       	st	Z, r18

  _written = false;
    1430:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1432:	ec 89       	ldd	r30, Y+20	; 0x14
    1434:	fd 89       	ldd	r31, Y+21	; 0x15
    1436:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1438:	ea 89       	ldd	r30, Y+18	; 0x12
    143a:	fb 89       	ldd	r31, Y+19	; 0x13
    143c:	80 81       	ld	r24, Z
    143e:	80 61       	ori	r24, 0x10	; 16
    1440:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1442:	ea 89       	ldd	r30, Y+18	; 0x12
    1444:	fb 89       	ldd	r31, Y+19	; 0x13
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    144c:	ea 89       	ldd	r30, Y+18	; 0x12
    144e:	fb 89       	ldd	r31, Y+19	; 0x13
    1450:	80 81       	ld	r24, Z
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1456:	ea 89       	ldd	r30, Y+18	; 0x12
    1458:	fb 89       	ldd	r31, Y+19	; 0x13
    145a:	80 81       	ld	r24, Z
    145c:	8f 7d       	andi	r24, 0xDF	; 223
    145e:	80 83       	st	Z, r24
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	08 95       	ret

00001470 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	0b b6       	in	r0, 0x3b	; 59
    147c:	0f 92       	push	r0
    147e:	2f 93       	push	r18
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1488:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <Serial+0x10>
    148c:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <Serial+0x11>
    1490:	80 81       	ld	r24, Z
    1492:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <Serial+0x16>
    1496:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <Serial+0x17>
    149a:	82 fd       	sbrc	r24, 2
    149c:	12 c0       	rjmp	.+36     	; 0x14c2 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    149e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    14a0:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <Serial+0x19>
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    14a8:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <Serial+0x1a>
    14ac:	82 17       	cp	r24, r18
    14ae:	51 f0       	breq	.+20     	; 0x14c4 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    14b0:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <Serial+0x19>
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	e6 54       	subi	r30, 0x46	; 70
    14b8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    14bc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <Serial+0x19>
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14c2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	9f 91       	pop	r25
    14ca:	8f 91       	pop	r24
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0b be       	out	0x3b, r0	; 59
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	0b b6       	in	r0, 0x3b	; 59
    14e8:	0f 92       	push	r0
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1502:	8a eb       	ldi	r24, 0xBA	; 186
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	c2 de       	rcall	.-636    	; 0x128c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	0b be       	out	0x3b, r0	; 59
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    152e:	8a eb       	ldi	r24, 0xBA	; 186
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	33 de       	rcall	.-922    	; 0x119a <_ZN14HardwareSerial9availableEv>
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	89 2b       	or	r24, r25
    1538:	09 f4       	brne	.+2      	; 0x153c <_Z17Serial0_availablev+0xe>
    153a:	20 e0       	ldi	r18, 0x00	; 0
}
    153c:	82 2f       	mov	r24, r18
    153e:	08 95       	ret

00001540 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1540:	ea eb       	ldi	r30, 0xBA	; 186
    1542:	f2 e0       	ldi	r31, 0x02	; 2
    1544:	13 82       	std	Z+3, r1	; 0x03
    1546:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1548:	88 ee       	ldi	r24, 0xE8	; 232
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	84 83       	std	Z+4, r24	; 0x04
    1552:	95 83       	std	Z+5, r25	; 0x05
    1554:	a6 83       	std	Z+6, r26	; 0x06
    1556:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1558:	86 e6       	ldi	r24, 0x66	; 102
    155a:	92 e0       	ldi	r25, 0x02	; 2
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
    1560:	85 ec       	ldi	r24, 0xC5	; 197
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	95 87       	std	Z+13, r25	; 0x0d
    1566:	84 87       	std	Z+12, r24	; 0x0c
    1568:	84 ec       	ldi	r24, 0xC4	; 196
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	97 87       	std	Z+15, r25	; 0x0f
    156e:	86 87       	std	Z+14, r24	; 0x0e
    1570:	80 ec       	ldi	r24, 0xC0	; 192
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	91 8b       	std	Z+17, r25	; 0x11
    1576:	80 8b       	std	Z+16, r24	; 0x10
    1578:	81 ec       	ldi	r24, 0xC1	; 193
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	93 8b       	std	Z+19, r25	; 0x13
    157e:	82 8b       	std	Z+18, r24	; 0x12
    1580:	82 ec       	ldi	r24, 0xC2	; 194
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	95 8b       	std	Z+21, r25	; 0x15
    1586:	84 8b       	std	Z+20, r24	; 0x14
    1588:	86 ec       	ldi	r24, 0xC6	; 198
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	97 8b       	std	Z+23, r25	; 0x17
    158e:	86 8b       	std	Z+22, r24	; 0x16
    1590:	11 8e       	std	Z+25, r1	; 0x19
    1592:	12 8e       	std	Z+26, r1	; 0x1a
    1594:	13 8e       	std	Z+27, r1	; 0x1b
    1596:	14 8e       	std	Z+28, r1	; 0x1c
    1598:	08 95       	ret

0000159a <initVariant>:
    159a:	08 95       	ret

0000159c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    159c:	2b d1       	rcall	.+598    	; 0x17f4 <init>

	initVariant();
    159e:	fd df       	rcall	.-6      	; 0x159a <initVariant>
    15a0:	0e 94 c7 01 	call	0x38e	; 0x38e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    15a4:	ca e0       	ldi	r28, 0x0A	; 10
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    15a6:	d9 e0       	ldi	r29, 0x09	; 9
    15a8:	0e 94 2f 02 	call	0x45e	; 0x45e <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    15ac:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    15ae:	e1 f3       	breq	.-8      	; 0x15a8 <main+0xc>
    15b0:	31 de       	rcall	.-926    	; 0x1214 <_Z14serialEventRunv>
    15b2:	fa cf       	rjmp	.-12     	; 0x15a8 <main+0xc>

000015b4 <_ZdlPv>:
    15b4:	46 c4       	rjmp	.+2188   	; 0x1e42 <free>

000015b6 <_ZN5Print5writeEPKhj>:
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	6c 01       	movw	r12, r24
    15c8:	7a 01       	movw	r14, r20
    15ca:	8b 01       	movw	r16, r22
    15cc:	c0 e0       	ldi	r28, 0x00	; 0
    15ce:	d0 e0       	ldi	r29, 0x00	; 0
    15d0:	ce 15       	cp	r28, r14
    15d2:	df 05       	cpc	r29, r15
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <_ZN5Print5writeEPKhj+0x40>
    15d6:	d8 01       	movw	r26, r16
    15d8:	6d 91       	ld	r22, X+
    15da:	8d 01       	movw	r16, r26
    15dc:	d6 01       	movw	r26, r12
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	01 90       	ld	r0, Z+
    15e4:	f0 81       	ld	r31, Z
    15e6:	e0 2d       	mov	r30, r0
    15e8:	c6 01       	movw	r24, r12
    15ea:	19 95       	eicall
    15ec:	89 2b       	or	r24, r25
    15ee:	11 f0       	breq	.+4      	; 0x15f4 <_ZN5Print5writeEPKhj+0x3e>
    15f0:	21 96       	adiw	r28, 0x01	; 1
    15f2:	ee cf       	rjmp	.-36     	; 0x15d0 <_ZN5Print5writeEPKhj+0x1a>
    15f4:	7e 01       	movw	r14, r28
    15f6:	c7 01       	movw	r24, r14
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	08 95       	ret

0000160a <_ZN5Print5writeEPKc>:
    160a:	61 15       	cp	r22, r1
    160c:	71 05       	cpc	r23, r1
    160e:	79 f0       	breq	.+30     	; 0x162e <_ZN5Print5writeEPKc+0x24>
    1610:	fb 01       	movw	r30, r22
    1612:	01 90       	ld	r0, Z+
    1614:	00 20       	and	r0, r0
    1616:	e9 f7       	brne	.-6      	; 0x1612 <_ZN5Print5writeEPKc+0x8>
    1618:	31 97       	sbiw	r30, 0x01	; 1
    161a:	af 01       	movw	r20, r30
    161c:	46 1b       	sub	r20, r22
    161e:	57 0b       	sbc	r21, r23
    1620:	dc 01       	movw	r26, r24
    1622:	ed 91       	ld	r30, X+
    1624:	fc 91       	ld	r31, X
    1626:	02 80       	ldd	r0, Z+2	; 0x02
    1628:	f3 81       	ldd	r31, Z+3	; 0x03
    162a:	e0 2d       	mov	r30, r0
    162c:	19 94       	eijmp
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	08 95       	ret

00001634 <_ZN5Print5printERK6String>:
    1634:	db 01       	movw	r26, r22
    1636:	14 96       	adiw	r26, 0x04	; 4
    1638:	4d 91       	ld	r20, X+
    163a:	5c 91       	ld	r21, X
    163c:	15 97       	sbiw	r26, 0x05	; 5
    163e:	6d 91       	ld	r22, X+
    1640:	7c 91       	ld	r23, X
    1642:	dc 01       	movw	r26, r24
    1644:	ed 91       	ld	r30, X+
    1646:	fc 91       	ld	r31, X
    1648:	02 80       	ldd	r0, Z+2	; 0x02
    164a:	f3 81       	ldd	r31, Z+3	; 0x03
    164c:	e0 2d       	mov	r30, r0
    164e:	19 94       	eijmp

00001650 <_ZN5Print7printlnEv>:
    1650:	64 e7       	ldi	r22, 0x74	; 116
    1652:	72 e0       	ldi	r23, 0x02	; 2
    1654:	da cf       	rjmp	.-76     	; 0x160a <_ZN5Print5writeEPKc>

00001656 <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	ec 01       	movw	r28, r24
  size_t n = print(s);
    1660:	e9 df       	rcall	.-46     	; 0x1634 <_ZN5Print5printERK6String>
    1662:	8c 01       	movw	r16, r24
  n += println();
    1664:	ce 01       	movw	r24, r28
    1666:	f4 df       	rcall	.-24     	; 0x1650 <_ZN5Print7printlnEv>
  return n;
}
    1668:	80 0f       	add	r24, r16
    166a:	91 1f       	adc	r25, r17
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	08 95       	ret

00001676 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1676:	1f 92       	push	r1
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	0f 92       	push	r0
    167e:	11 24       	eor	r1, r1
    1680:	2f 93       	push	r18
    1682:	3f 93       	push	r19
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    168c:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <timer0_millis>
    1690:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <timer0_millis+0x1>
    1694:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <timer0_millis+0x2>
    1698:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    169c:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    16a0:	23 e0       	ldi	r18, 0x03	; 3
    16a2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    16a4:	2d 37       	cpi	r18, 0x7D	; 125
    16a6:	20 f4       	brcc	.+8      	; 0x16b0 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	a1 1d       	adc	r26, r1
    16ac:	b1 1d       	adc	r27, r1
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    16b0:	26 e8       	ldi	r18, 0x86	; 134
    16b2:	23 0f       	add	r18, r19
		m += 1;
    16b4:	02 96       	adiw	r24, 0x02	; 2
    16b6:	a1 1d       	adc	r26, r1
    16b8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    16ba:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <timer0_fract>
	timer0_millis = m;
    16be:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <timer0_millis>
    16c2:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <timer0_millis+0x1>
    16c6:	a0 93 5a 03 	sts	0x035A, r26	; 0x80035a <timer0_millis+0x2>
    16ca:	b0 93 5b 03 	sts	0x035B, r27	; 0x80035b <timer0_millis+0x3>
	timer0_overflow_count++;
    16ce:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <timer0_overflow_count>
    16d2:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <timer0_overflow_count+0x1>
    16d6:	a0 91 5e 03 	lds	r26, 0x035E	; 0x80035e <timer0_overflow_count+0x2>
    16da:	b0 91 5f 03 	lds	r27, 0x035F	; 0x80035f <timer0_overflow_count+0x3>
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	a1 1d       	adc	r26, r1
    16e2:	b1 1d       	adc	r27, r1
    16e4:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <timer0_overflow_count>
    16e8:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <timer0_overflow_count+0x1>
    16ec:	a0 93 5e 03 	sts	0x035E, r26	; 0x80035e <timer0_overflow_count+0x2>
    16f0:	b0 93 5f 03 	sts	0x035F, r27	; 0x80035f <timer0_overflow_count+0x3>
}
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    170a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    170c:	f8 94       	cli
	m = timer0_millis;
    170e:	60 91 58 03 	lds	r22, 0x0358	; 0x800358 <timer0_millis>
    1712:	70 91 59 03 	lds	r23, 0x0359	; 0x800359 <timer0_millis+0x1>
    1716:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <timer0_millis+0x2>
    171a:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <timer0_millis+0x3>
	SREG = oldSREG;
    171e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1720:	08 95       	ret

00001722 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1722:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1724:	f8 94       	cli
	m = timer0_overflow_count;
    1726:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <timer0_overflow_count>
    172a:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <timer0_overflow_count+0x1>
    172e:	a0 91 5e 03 	lds	r26, 0x035E	; 0x80035e <timer0_overflow_count+0x2>
    1732:	b0 91 5f 03 	lds	r27, 0x035F	; 0x80035f <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1736:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1738:	a8 9b       	sbis	0x15, 0	; 21
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <micros+0x24>
    173c:	2f 3f       	cpi	r18, 0xFF	; 255
    173e:	19 f0       	breq	.+6      	; 0x1746 <micros+0x24>
		m++;
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	a1 1d       	adc	r26, r1
    1744:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1746:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1748:	ba 2f       	mov	r27, r26
    174a:	a9 2f       	mov	r26, r25
    174c:	98 2f       	mov	r25, r24
    174e:	88 27       	eor	r24, r24
    1750:	82 0f       	add	r24, r18
    1752:	91 1d       	adc	r25, r1
    1754:	a1 1d       	adc	r26, r1
    1756:	b1 1d       	adc	r27, r1
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	42 e0       	ldi	r20, 0x02	; 2
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	4a 95       	dec	r20
    1768:	d1 f7       	brne	.-12     	; 0x175e <micros+0x3c>
}
    176a:	08 95       	ret

0000176c <delay>:

void delay(unsigned long ms)
{
    176c:	8f 92       	push	r8
    176e:	9f 92       	push	r9
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	6b 01       	movw	r12, r22
    177e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1780:	d0 df       	rcall	.-96     	; 0x1722 <micros>
    1782:	4b 01       	movw	r8, r22
    1784:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1786:	c1 14       	cp	r12, r1
    1788:	d1 04       	cpc	r13, r1
    178a:	e1 04       	cpc	r14, r1
    178c:	f1 04       	cpc	r15, r1
		yield();
    178e:	f1 f0       	breq	.+60     	; 0x17cc <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1790:	5a d2       	rcall	.+1204   	; 0x1c46 <yield>
    1792:	c7 df       	rcall	.-114    	; 0x1722 <micros>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	88 19       	sub	r24, r8
    179a:	99 09       	sbc	r25, r9
    179c:	aa 09       	sbc	r26, r10
    179e:	bb 09       	sbc	r27, r11
    17a0:	88 3e       	cpi	r24, 0xE8	; 232
    17a2:	93 40       	sbci	r25, 0x03	; 3
    17a4:	a1 05       	cpc	r26, r1
    17a6:	b1 05       	cpc	r27, r1
    17a8:	70 f3       	brcs	.-36     	; 0x1786 <delay+0x1a>
			ms--;
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	c2 1a       	sub	r12, r18
    17ae:	d1 08       	sbc	r13, r1
    17b0:	e1 08       	sbc	r14, r1
    17b2:	f1 08       	sbc	r15, r1
			start += 1000;
    17b4:	88 ee       	ldi	r24, 0xE8	; 232
    17b6:	88 0e       	add	r8, r24
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	98 1e       	adc	r9, r24
    17bc:	a1 1c       	adc	r10, r1
    17be:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    17c0:	c1 14       	cp	r12, r1
    17c2:	d1 04       	cpc	r13, r1
    17c4:	e1 04       	cpc	r14, r1
    17c6:	f1 04       	cpc	r15, r1
    17c8:	21 f7       	brne	.-56     	; 0x1792 <delay+0x26>
    17ca:	dd cf       	rjmp	.-70     	; 0x1786 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	08 95       	ret

000017de <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	91 05       	cpc	r25, r1
    17e2:	38 f0       	brcs	.+14     	; 0x17f2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    17ec:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <delayMicroseconds+0x10>
    17f2:	08 95       	ret

000017f4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17f4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17f6:	84 b5       	in	r24, 0x24	; 36
    17f8:	82 60       	ori	r24, 0x02	; 2
    17fa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17fc:	84 b5       	in	r24, 0x24	; 36
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1802:	85 b5       	in	r24, 0x25	; 37
    1804:	82 60       	ori	r24, 0x02	; 2
    1806:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1808:	85 b5       	in	r24, 0x25	; 37
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    180e:	ee e6       	ldi	r30, 0x6E	; 110
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1818:	e1 e8       	ldi	r30, 0x81	; 129
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1824:	80 81       	ld	r24, Z
    1826:	81 60       	ori	r24, 0x01	; 1
    1828:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    182a:	e0 e8       	ldi	r30, 0x80	; 128
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	81 60       	ori	r24, 0x01	; 1
    1832:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1834:	e1 eb       	ldi	r30, 0xB1	; 177
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	84 60       	ori	r24, 0x04	; 4
    183c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    183e:	e0 eb       	ldi	r30, 0xB0	; 176
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1848:	e1 e9       	ldi	r30, 0x91	; 145
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	82 60       	ori	r24, 0x02	; 2
    1850:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1852:	80 81       	ld	r24, Z
    1854:	81 60       	ori	r24, 0x01	; 1
    1856:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1858:	e0 e9       	ldi	r30, 0x90	; 144
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1862:	e1 ea       	ldi	r30, 0xA1	; 161
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	82 60       	ori	r24, 0x02	; 2
    186a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1872:	e0 ea       	ldi	r30, 0xA0	; 160
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	81 60       	ori	r24, 0x01	; 1
    187a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    187c:	e1 e2       	ldi	r30, 0x21	; 33
    187e:	f1 e0       	ldi	r31, 0x01	; 1
    1880:	80 81       	ld	r24, Z
    1882:	82 60       	ori	r24, 0x02	; 2
    1884:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    188c:	e0 e2       	ldi	r30, 0x20	; 32
    188e:	f1 e0       	ldi	r31, 0x01	; 1
    1890:	80 81       	ld	r24, Z
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1896:	ea e7       	ldi	r30, 0x7A	; 122
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	84 60       	ori	r24, 0x04	; 4
    189e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    18a0:	80 81       	ld	r24, Z
    18a2:	82 60       	ori	r24, 0x02	; 2
    18a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    18a6:	80 81       	ld	r24, Z
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    18ac:	80 81       	ld	r24, Z
    18ae:	80 68       	ori	r24, 0x80	; 128
    18b0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    18b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    18b6:	08 95       	ret

000018b8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	fc 01       	movw	r30, r24
    18bc:	31 97       	sbiw	r30, 0x01	; 1
    18be:	e2 31       	cpi	r30, 0x12	; 18
    18c0:	f1 05       	cpc	r31, r1
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <turnOffPWM+0xe>
    18c4:	4d c0       	rjmp	.+154    	; 0x1960 <turnOffPWM+0xa8>
    18c6:	88 27       	eor	r24, r24
    18c8:	ee 58       	subi	r30, 0x8E	; 142
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	8f 4f       	sbci	r24, 0xFF	; 255
    18ce:	fa c1       	rjmp	.+1012   	; 0x1cc4 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    18d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    18d4:	8f 77       	andi	r24, 0x7F	; 127
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    18dc:	8f 7d       	andi	r24, 0xDF	; 223
    18de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    18e2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    18e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    18e8:	87 7f       	andi	r24, 0xF7	; 247
    18ea:	f9 cf       	rjmp	.-14     	; 0x18de <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    18ec:	84 b5       	in	r24, 0x24	; 36
    18ee:	8f 77       	andi	r24, 0x7F	; 127
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    18f2:	84 b5       	in	r24, 0x24	; 36
    18f4:	8f 7d       	andi	r24, 0xDF	; 223
    18f6:	84 bd       	out	0x24, r24	; 36
    18f8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    18fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    18fe:	8f 77       	andi	r24, 0x7F	; 127
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1902:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1906:	8f 7d       	andi	r24, 0xDF	; 223
    1908:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    190c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    190e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1912:	8f 77       	andi	r24, 0x7F	; 127
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1916:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    191a:	8f 7d       	andi	r24, 0xDF	; 223
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    191e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1922:	87 7f       	andi	r24, 0xF7	; 247
    1924:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1928:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    192a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1932:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    193a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    193e:	87 7f       	andi	r24, 0xF7	; 247
    1940:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1944:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1946:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    194a:	8f 77       	andi	r24, 0x7F	; 127
    194c:	07 c0       	rjmp	.+14     	; 0x195c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    194e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1952:	8f 7d       	andi	r24, 0xDF	; 223
    1954:	03 c0       	rjmp	.+6      	; 0x195c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1956:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    195a:	87 7f       	andi	r24, 0xF7	; 247
    195c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1960:	08 95       	ret

00001962 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	fc 01       	movw	r30, r24
    196a:	e8 5b       	subi	r30, 0xB8	; 184
    196c:	fd 4f       	sbci	r31, 0xFD	; 253
    196e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1970:	fc 01       	movw	r30, r24
    1972:	e2 57       	subi	r30, 0x72	; 114
    1974:	fd 4f       	sbci	r31, 0xFD	; 253
    1976:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1978:	88 23       	and	r24, r24
    197a:	61 f1       	breq	.+88     	; 0x19d4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	fc 01       	movw	r30, r24
    1984:	e8 5f       	subi	r30, 0xF8	; 248
    1986:	fc 4f       	sbci	r31, 0xFC	; 252
    1988:	c5 91       	lpm	r28, Z+
    198a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    198c:	fc 01       	movw	r30, r24
    198e:	e2 51       	subi	r30, 0x12	; 18
    1990:	fd 4f       	sbci	r31, 0xFD	; 253
    1992:	a5 91       	lpm	r26, Z+
    1994:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1996:	61 11       	cpse	r22, r1
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    199a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    199c:	f8 94       	cli
		*reg &= ~bit;
    199e:	88 81       	ld	r24, Y
    19a0:	20 95       	com	r18
    19a2:	82 23       	and	r24, r18
    19a4:	88 83       	st	Y, r24
		*out &= ~bit;
    19a6:	ec 91       	ld	r30, X
    19a8:	2e 23       	and	r18, r30
    19aa:	0b c0       	rjmp	.+22     	; 0x19c2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    19ac:	62 30       	cpi	r22, 0x02	; 2
    19ae:	61 f4       	brne	.+24     	; 0x19c8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    19b0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19b2:	f8 94       	cli
		*reg &= ~bit;
    19b4:	88 81       	ld	r24, Y
    19b6:	32 2f       	mov	r19, r18
    19b8:	30 95       	com	r19
    19ba:	83 23       	and	r24, r19
    19bc:	88 83       	st	Y, r24
		*out |= bit;
    19be:	ec 91       	ld	r30, X
    19c0:	2e 2b       	or	r18, r30
    19c2:	2c 93       	st	X, r18
		SREG = oldSREG;
    19c4:	9f bf       	out	0x3f, r25	; 63
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    19c8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    19ca:	f8 94       	cli
		*reg |= bit;
    19cc:	e8 81       	ld	r30, Y
    19ce:	2e 2b       	or	r18, r30
    19d0:	28 83       	st	Y, r18
		SREG = oldSREG;
    19d2:	8f bf       	out	0x3f, r24	; 63
	}
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	f9 01       	movw	r30, r18
    19e6:	ee 5f       	subi	r30, 0xFE	; 254
    19e8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ea:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    19ec:	f9 01       	movw	r30, r18
    19ee:	e8 5b       	subi	r30, 0xB8	; 184
    19f0:	fd 4f       	sbci	r31, 0xFD	; 253
    19f2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    19f4:	f9 01       	movw	r30, r18
    19f6:	e2 57       	subi	r30, 0x72	; 114
    19f8:	fd 4f       	sbci	r31, 0xFD	; 253
    19fa:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    19fc:	cc 23       	and	r28, r28
    19fe:	b9 f0       	breq	.+46     	; 0x1a2e <digitalWrite+0x54>
    1a00:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a02:	81 11       	cpse	r24, r1
    1a04:	59 df       	rcall	.-334    	; 0x18b8 <turnOffPWM>

	out = portOutputRegister(port);
    1a06:	ec 2f       	mov	r30, r28
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	e2 51       	subi	r30, 0x12	; 18
    1a10:	fd 4f       	sbci	r31, 0xFD	; 253
    1a12:	a5 91       	lpm	r26, Z+
    1a14:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a16:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a18:	f8 94       	cli

	if (val == LOW) {
    1a1a:	11 11       	cpse	r17, r1
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <digitalWrite+0x4c>
		*out &= ~bit;
    1a1e:	8c 91       	ld	r24, X
    1a20:	d0 95       	com	r29
    1a22:	d8 23       	and	r29, r24
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <digitalWrite+0x50>
	} else {
		*out |= bit;
    1a26:	ec 91       	ld	r30, X
    1a28:	de 2b       	or	r29, r30
    1a2a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1a2c:	9f bf       	out	0x3f, r25	; 63
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	08 95       	ret

00001a36 <_ZNK6String14StringIfHelperEv>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
	*this = buf;
}
    1a36:	08 95       	ret

00001a38 <_ZN6StringD1Ev>:
    1a38:	fc 01       	movw	r30, r24
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <_ZN6StringD1Ev+0xc>
    1a42:	ff c1       	rjmp	.+1022   	; 0x1e42 <free>
    1a44:	08 95       	ret

00001a46 <_ZN6String10invalidateEv>:
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	ec 01       	movw	r28, r24
    1a4c:	88 81       	ld	r24, Y
    1a4e:	99 81       	ldd	r25, Y+1	; 0x01
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <_ZN6String10invalidateEv+0x10>
    1a54:	f6 d1       	rcall	.+1004   	; 0x1e42 <free>
    1a56:	19 82       	std	Y+1, r1	; 0x01
    1a58:	18 82       	st	Y, r1
    1a5a:	1d 82       	std	Y+5, r1	; 0x05
    1a5c:	1c 82       	std	Y+4, r1	; 0x04
    1a5e:	1b 82       	std	Y+3, r1	; 0x03
    1a60:	1a 82       	std	Y+2, r1	; 0x02
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <_ZN6String12changeBufferEj>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	ec 01       	movw	r28, r24
    1a72:	8b 01       	movw	r16, r22
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	88 81       	ld	r24, Y
    1a7a:	99 81       	ldd	r25, Y+1	; 0x01
    1a7c:	6b d2       	rcall	.+1238   	; 0x1f54 <realloc>
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	31 f0       	breq	.+12     	; 0x1a8e <_ZN6String12changeBufferEj+0x26>
    1a82:	99 83       	std	Y+1, r25	; 0x01
    1a84:	88 83       	st	Y, r24
    1a86:	1b 83       	std	Y+3, r17	; 0x03
    1a88:	0a 83       	std	Y+2, r16	; 0x02
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <_ZN6String12changeBufferEj+0x28>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <_ZN6String7reserveEj>:
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	ec 01       	movw	r28, r24
    1aa0:	88 81       	ld	r24, Y
    1aa2:	99 81       	ldd	r25, Y+1	; 0x01
    1aa4:	89 2b       	or	r24, r25
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <_ZN6String7reserveEj+0x18>
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1aac:	86 17       	cp	r24, r22
    1aae:	97 07       	cpc	r25, r23
    1ab0:	58 f4       	brcc	.+22     	; 0x1ac8 <_ZN6String7reserveEj+0x2e>
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	d9 df       	rcall	.-78     	; 0x1a68 <_ZN6String12changeBufferEj>
    1ab6:	88 23       	and	r24, r24
    1ab8:	41 f0       	breq	.+16     	; 0x1aca <_ZN6String7reserveEj+0x30>
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	9d 81       	ldd	r25, Y+5	; 0x05
    1abe:	89 2b       	or	r24, r25
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <_ZN6String7reserveEj+0x2e>
    1ac2:	e8 81       	ld	r30, Y
    1ac4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ac6:	10 82       	st	Z, r1
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <_ZN6String4copyEPKcj>:
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	ec 01       	movw	r28, r24
    1ade:	7b 01       	movw	r14, r22
    1ae0:	8a 01       	movw	r16, r20
    1ae2:	ba 01       	movw	r22, r20
    1ae4:	da df       	rcall	.-76     	; 0x1a9a <_ZN6String7reserveEj>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <_ZN6String4copyEPKcj+0x20>
    1aea:	ce 01       	movw	r24, r28
    1aec:	ac df       	rcall	.-168    	; 0x1a46 <_ZN6String10invalidateEv>
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <_ZN6String4copyEPKcj+0x2c>
    1af0:	1d 83       	std	Y+5, r17	; 0x05
    1af2:	0c 83       	std	Y+4, r16	; 0x04
    1af4:	b7 01       	movw	r22, r14
    1af6:	88 81       	ld	r24, Y
    1af8:	99 81       	ldd	r25, Y+1	; 0x01
    1afa:	15 d3       	rcall	.+1578   	; 0x2126 <strcpy>
    1afc:	ce 01       	movw	r24, r28
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	08 95       	ret

00001b0c <_ZN6StringC1EPKc>:
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	11 82       	std	Z+1, r1	; 0x01
    1b10:	10 82       	st	Z, r1
    1b12:	13 82       	std	Z+3, r1	; 0x03
    1b14:	12 82       	std	Z+2, r1	; 0x02
    1b16:	15 82       	std	Z+5, r1	; 0x05
    1b18:	14 82       	std	Z+4, r1	; 0x04
    1b1a:	61 15       	cp	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	49 f0       	breq	.+18     	; 0x1b32 <_ZN6StringC1EPKc+0x26>
    1b20:	fb 01       	movw	r30, r22
    1b22:	01 90       	ld	r0, Z+
    1b24:	00 20       	and	r0, r0
    1b26:	e9 f7       	brne	.-6      	; 0x1b22 <_ZN6StringC1EPKc+0x16>
    1b28:	31 97       	sbiw	r30, 0x01	; 1
    1b2a:	af 01       	movw	r20, r30
    1b2c:	46 1b       	sub	r20, r22
    1b2e:	57 0b       	sbc	r21, r23
    1b30:	cf cf       	rjmp	.-98     	; 0x1ad0 <_ZN6String4copyEPKcj>
    1b32:	08 95       	ret

00001b34 <_ZN6String4moveERS_>:
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	8c 01       	movw	r16, r24
    1b3e:	eb 01       	movw	r28, r22
    1b40:	fc 01       	movw	r30, r24
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	c1 f0       	breq	.+48     	; 0x1b7a <_ZN6String4moveERS_+0x46>
    1b4a:	68 81       	ld	r22, Y
    1b4c:	79 81       	ldd	r23, Y+1	; 0x01
    1b4e:	61 15       	cp	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	91 f0       	breq	.+36     	; 0x1b78 <_ZN6String4moveERS_+0x44>
    1b54:	2b e1       	ldi	r18, 0x1B	; 27
    1b56:	3d e0       	ldi	r19, 0x0D	; 13
    1b58:	23 2b       	or	r18, r19
    1b5a:	71 f0       	breq	.+28     	; 0x1b78 <_ZN6String4moveERS_+0x44>
    1b5c:	42 81       	ldd	r20, Z+2	; 0x02
    1b5e:	53 81       	ldd	r21, Z+3	; 0x03
    1b60:	2c 81       	ldd	r18, Y+4	; 0x04
    1b62:	3d 81       	ldd	r19, Y+5	; 0x05
    1b64:	42 17       	cp	r20, r18
    1b66:	53 07       	cpc	r21, r19
    1b68:	38 f0       	brcs	.+14     	; 0x1b78 <_ZN6String4moveERS_+0x44>
    1b6a:	dd d2       	rcall	.+1466   	; 0x2126 <strcpy>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	f8 01       	movw	r30, r16
    1b72:	95 83       	std	Z+5, r25	; 0x05
    1b74:	84 83       	std	Z+4, r24	; 0x04
    1b76:	12 c0       	rjmp	.+36     	; 0x1b9c <_ZN6String4moveERS_+0x68>
    1b78:	64 d1       	rcall	.+712    	; 0x1e42 <free>
    1b7a:	88 81       	ld	r24, Y
    1b7c:	99 81       	ldd	r25, Y+1	; 0x01
    1b7e:	f8 01       	movw	r30, r16
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	93 83       	std	Z+3, r25	; 0x03
    1b8a:	82 83       	std	Z+2, r24	; 0x02
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	95 83       	std	Z+5, r25	; 0x05
    1b92:	84 83       	std	Z+4, r24	; 0x04
    1b94:	19 82       	std	Y+1, r1	; 0x01
    1b96:	18 82       	st	Y, r1
    1b98:	1b 82       	std	Y+3, r1	; 0x03
    1b9a:	1a 82       	std	Y+2, r1	; 0x02
    1b9c:	1d 82       	std	Y+5, r1	; 0x05
    1b9e:	1c 82       	std	Y+4, r1	; 0x04
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <_ZN6StringaSEO15StringSumHelper>:
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	ec 01       	movw	r28, r24
    1bb0:	68 17       	cp	r22, r24
    1bb2:	79 07       	cpc	r23, r25
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <_ZN6StringaSEO15StringSumHelper+0xe>
    1bb6:	be df       	rcall	.-132    	; 0x1b34 <_ZN6String4moveERS_>
    1bb8:	ce 01       	movw	r24, r28
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	08 95       	ret

00001bc0 <_ZN6StringaSEPKc>:
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	ec 01       	movw	r28, r24
    1bc6:	61 15       	cp	r22, r1
    1bc8:	71 05       	cpc	r23, r1
    1bca:	51 f0       	breq	.+20     	; 0x1be0 <_ZN6StringaSEPKc+0x20>
    1bcc:	fb 01       	movw	r30, r22
    1bce:	01 90       	ld	r0, Z+
    1bd0:	00 20       	and	r0, r0
    1bd2:	e9 f7       	brne	.-6      	; 0x1bce <_ZN6StringaSEPKc+0xe>
    1bd4:	31 97       	sbiw	r30, 0x01	; 1
    1bd6:	af 01       	movw	r20, r30
    1bd8:	46 1b       	sub	r20, r22
    1bda:	57 0b       	sbc	r21, r23
    1bdc:	79 df       	rcall	.-270    	; 0x1ad0 <_ZN6String4copyEPKcj>
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <_ZN6StringaSEPKc+0x22>
    1be0:	32 df       	rcall	.-412    	; 0x1a46 <_ZN6String10invalidateEv>
    1be2:	ce 01       	movw	r24, r28
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <_ZN6StringC1Efh>:

String::String(float value, unsigned char decimalPlaces)
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	a1 97       	sbiw	r28, 0x21	; 33
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	7c 01       	movw	r14, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	11 82       	std	Z+1, r1	; 0x01
    1c10:	10 82       	st	Z, r1
	capacity = 0;
    1c12:	13 82       	std	Z+3, r1	; 0x03
    1c14:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1c16:	15 82       	std	Z+5, r1	; 0x05
    1c18:	14 82       	std	Z+4, r1	; 0x04

String::String(float value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    1c1a:	42 e0       	ldi	r20, 0x02	; 2
    1c1c:	42 0f       	add	r20, r18
    1c1e:	8e 01       	movw	r16, r28
    1c20:	0f 5f       	subi	r16, 0xFF	; 255
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	57 d0       	rcall	.+174    	; 0x1cd4 <dtostrf>
    1c26:	bc 01       	movw	r22, r24
    1c28:	c7 01       	movw	r24, r14
    1c2a:	ca df       	rcall	.-108    	; 0x1bc0 <_ZN6StringaSEPKc>
}
    1c2c:	a1 96       	adiw	r28, 0x21	; 33
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	08 95       	ret

00001c46 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1c46:	08 95       	ret

00001c48 <__udivmodsi4>:
    1c48:	a1 e2       	ldi	r26, 0x21	; 33
    1c4a:	1a 2e       	mov	r1, r26
    1c4c:	aa 1b       	sub	r26, r26
    1c4e:	bb 1b       	sub	r27, r27
    1c50:	fd 01       	movw	r30, r26
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <__udivmodsi4_ep>

00001c54 <__udivmodsi4_loop>:
    1c54:	aa 1f       	adc	r26, r26
    1c56:	bb 1f       	adc	r27, r27
    1c58:	ee 1f       	adc	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	a2 17       	cp	r26, r18
    1c5e:	b3 07       	cpc	r27, r19
    1c60:	e4 07       	cpc	r30, r20
    1c62:	f5 07       	cpc	r31, r21
    1c64:	20 f0       	brcs	.+8      	; 0x1c6e <__udivmodsi4_ep>
    1c66:	a2 1b       	sub	r26, r18
    1c68:	b3 0b       	sbc	r27, r19
    1c6a:	e4 0b       	sbc	r30, r20
    1c6c:	f5 0b       	sbc	r31, r21

00001c6e <__udivmodsi4_ep>:
    1c6e:	66 1f       	adc	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	1a 94       	dec	r1
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <__udivmodsi4_loop>
    1c7a:	60 95       	com	r22
    1c7c:	70 95       	com	r23
    1c7e:	80 95       	com	r24
    1c80:	90 95       	com	r25
    1c82:	9b 01       	movw	r18, r22
    1c84:	ac 01       	movw	r20, r24
    1c86:	bd 01       	movw	r22, r26
    1c88:	cf 01       	movw	r24, r30
    1c8a:	08 95       	ret

00001c8c <__divmodsi4>:
    1c8c:	05 2e       	mov	r0, r21
    1c8e:	97 fb       	bst	r25, 7
    1c90:	16 f4       	brtc	.+4      	; 0x1c96 <__divmodsi4+0xa>
    1c92:	00 94       	com	r0
    1c94:	0f d0       	rcall	.+30     	; 0x1cb4 <__negsi2>
    1c96:	57 fd       	sbrc	r21, 7
    1c98:	05 d0       	rcall	.+10     	; 0x1ca4 <__divmodsi4_neg2>
    1c9a:	d6 df       	rcall	.-84     	; 0x1c48 <__udivmodsi4>
    1c9c:	07 fc       	sbrc	r0, 7
    1c9e:	02 d0       	rcall	.+4      	; 0x1ca4 <__divmodsi4_neg2>
    1ca0:	46 f4       	brtc	.+16     	; 0x1cb2 <__divmodsi4_exit>
    1ca2:	08 c0       	rjmp	.+16     	; 0x1cb4 <__negsi2>

00001ca4 <__divmodsi4_neg2>:
    1ca4:	50 95       	com	r21
    1ca6:	40 95       	com	r20
    1ca8:	30 95       	com	r19
    1caa:	21 95       	neg	r18
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	4f 4f       	sbci	r20, 0xFF	; 255
    1cb0:	5f 4f       	sbci	r21, 0xFF	; 255

00001cb2 <__divmodsi4_exit>:
    1cb2:	08 95       	ret

00001cb4 <__negsi2>:
    1cb4:	90 95       	com	r25
    1cb6:	80 95       	com	r24
    1cb8:	70 95       	com	r23
    1cba:	61 95       	neg	r22
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	08 95       	ret

00001cc4 <__tablejump2__>:
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	88 1f       	adc	r24, r24
    1cca:	8b bf       	out	0x3b, r24	; 59
    1ccc:	07 90       	elpm	r0, Z+
    1cce:	f6 91       	elpm	r31, Z
    1cd0:	e0 2d       	mov	r30, r0
    1cd2:	19 94       	eijmp

00001cd4 <dtostrf>:
    1cd4:	ef 92       	push	r14
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	e8 01       	movw	r28, r16
    1ce0:	47 fd       	sbrc	r20, 7
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <dtostrf+0x14>
    1ce4:	34 e0       	ldi	r19, 0x04	; 4
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <dtostrf+0x16>
    1ce8:	34 e1       	ldi	r19, 0x14	; 20
    1cea:	04 2e       	mov	r0, r20
    1cec:	00 0c       	add	r0, r0
    1cee:	55 0b       	sbc	r21, r21
    1cf0:	57 ff       	sbrs	r21, 7
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <dtostrf+0x26>
    1cf4:	51 95       	neg	r21
    1cf6:	41 95       	neg	r20
    1cf8:	51 09       	sbc	r21, r1
    1cfa:	e3 2e       	mov	r14, r19
    1cfc:	02 2f       	mov	r16, r18
    1cfe:	24 2f       	mov	r18, r20
    1d00:	ae 01       	movw	r20, r28
    1d02:	27 d2       	rcall	.+1102   	; 0x2152 <dtoa_prf>
    1d04:	ce 01       	movw	r24, r28
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ef 90       	pop	r14
    1d10:	08 95       	ret

00001d12 <malloc>:
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	10 f4       	brcc	.+4      	; 0x1d24 <malloc+0x12>
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <__flp>
    1d28:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <__flp+0x1>
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	19 f1       	breq	.+70     	; 0x1d7e <malloc+0x6c>
    1d38:	40 81       	ld	r20, Z
    1d3a:	51 81       	ldd	r21, Z+1	; 0x01
    1d3c:	02 81       	ldd	r16, Z+2	; 0x02
    1d3e:	13 81       	ldd	r17, Z+3	; 0x03
    1d40:	48 17       	cp	r20, r24
    1d42:	59 07       	cpc	r21, r25
    1d44:	c8 f0       	brcs	.+50     	; 0x1d78 <malloc+0x66>
    1d46:	84 17       	cp	r24, r20
    1d48:	95 07       	cpc	r25, r21
    1d4a:	69 f4       	brne	.+26     	; 0x1d66 <malloc+0x54>
    1d4c:	10 97       	sbiw	r26, 0x00	; 0
    1d4e:	31 f0       	breq	.+12     	; 0x1d5c <malloc+0x4a>
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	0c 93       	st	X, r16
    1d54:	12 97       	sbiw	r26, 0x02	; 2
    1d56:	13 96       	adiw	r26, 0x03	; 3
    1d58:	1c 93       	st	X, r17
    1d5a:	27 c0       	rjmp	.+78     	; 0x1daa <malloc+0x98>
    1d5c:	00 93 62 03 	sts	0x0362, r16	; 0x800362 <__flp>
    1d60:	10 93 63 03 	sts	0x0363, r17	; 0x800363 <__flp+0x1>
    1d64:	22 c0       	rjmp	.+68     	; 0x1daa <malloc+0x98>
    1d66:	21 15       	cp	r18, r1
    1d68:	31 05       	cpc	r19, r1
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <malloc+0x60>
    1d6c:	42 17       	cp	r20, r18
    1d6e:	53 07       	cpc	r21, r19
    1d70:	18 f4       	brcc	.+6      	; 0x1d78 <malloc+0x66>
    1d72:	9a 01       	movw	r18, r20
    1d74:	bd 01       	movw	r22, r26
    1d76:	ef 01       	movw	r28, r30
    1d78:	df 01       	movw	r26, r30
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	db cf       	rjmp	.-74     	; 0x1d34 <malloc+0x22>
    1d7e:	21 15       	cp	r18, r1
    1d80:	31 05       	cpc	r19, r1
    1d82:	f9 f0       	breq	.+62     	; 0x1dc2 <malloc+0xb0>
    1d84:	28 1b       	sub	r18, r24
    1d86:	39 0b       	sbc	r19, r25
    1d88:	24 30       	cpi	r18, 0x04	; 4
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	80 f4       	brcc	.+32     	; 0x1dae <malloc+0x9c>
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	61 15       	cp	r22, r1
    1d94:	71 05       	cpc	r23, r1
    1d96:	21 f0       	breq	.+8      	; 0x1da0 <malloc+0x8e>
    1d98:	fb 01       	movw	r30, r22
    1d9a:	93 83       	std	Z+3, r25	; 0x03
    1d9c:	82 83       	std	Z+2, r24	; 0x02
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <malloc+0x96>
    1da0:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <__flp+0x1>
    1da4:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__flp>
    1da8:	fe 01       	movw	r30, r28
    1daa:	32 96       	adiw	r30, 0x02	; 2
    1dac:	44 c0       	rjmp	.+136    	; 0x1e36 <malloc+0x124>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	81 93       	st	Z+, r24
    1db6:	91 93       	st	Z+, r25
    1db8:	22 50       	subi	r18, 0x02	; 2
    1dba:	31 09       	sbc	r19, r1
    1dbc:	39 83       	std	Y+1, r19	; 0x01
    1dbe:	28 83       	st	Y, r18
    1dc0:	3a c0       	rjmp	.+116    	; 0x1e36 <malloc+0x124>
    1dc2:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__brkval>
    1dc6:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <__brkval+0x1>
    1dca:	23 2b       	or	r18, r19
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <malloc+0xcc>
    1dce:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1dd2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1dd6:	30 93 61 03 	sts	0x0361, r19	; 0x800361 <__brkval+0x1>
    1dda:	20 93 60 03 	sts	0x0360, r18	; 0x800360 <__brkval>
    1dde:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1de2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1de6:	21 15       	cp	r18, r1
    1de8:	31 05       	cpc	r19, r1
    1dea:	41 f4       	brne	.+16     	; 0x1dfc <malloc+0xea>
    1dec:	2d b7       	in	r18, 0x3d	; 61
    1dee:	3e b7       	in	r19, 0x3e	; 62
    1df0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1df4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1df8:	24 1b       	sub	r18, r20
    1dfa:	35 0b       	sbc	r19, r21
    1dfc:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <__brkval>
    1e00:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <__brkval+0x1>
    1e04:	e2 17       	cp	r30, r18
    1e06:	f3 07       	cpc	r31, r19
    1e08:	a0 f4       	brcc	.+40     	; 0x1e32 <malloc+0x120>
    1e0a:	2e 1b       	sub	r18, r30
    1e0c:	3f 0b       	sbc	r19, r31
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	78 f0       	brcs	.+30     	; 0x1e32 <malloc+0x120>
    1e14:	ac 01       	movw	r20, r24
    1e16:	4e 5f       	subi	r20, 0xFE	; 254
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	24 17       	cp	r18, r20
    1e1c:	35 07       	cpc	r19, r21
    1e1e:	48 f0       	brcs	.+18     	; 0x1e32 <malloc+0x120>
    1e20:	4e 0f       	add	r20, r30
    1e22:	5f 1f       	adc	r21, r31
    1e24:	50 93 61 03 	sts	0x0361, r21	; 0x800361 <__brkval+0x1>
    1e28:	40 93 60 03 	sts	0x0360, r20	; 0x800360 <__brkval>
    1e2c:	81 93       	st	Z+, r24
    1e2e:	91 93       	st	Z+, r25
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <malloc+0x124>
    1e32:	e0 e0       	ldi	r30, 0x00	; 0
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	cf 01       	movw	r24, r30
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	08 95       	ret

00001e42 <free>:
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <free+0xa>
    1e4a:	81 c0       	rjmp	.+258    	; 0x1f4e <free+0x10c>
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	32 97       	sbiw	r30, 0x02	; 2
    1e50:	13 82       	std	Z+3, r1	; 0x03
    1e52:	12 82       	std	Z+2, r1	; 0x02
    1e54:	a0 91 62 03 	lds	r26, 0x0362	; 0x800362 <__flp>
    1e58:	b0 91 63 03 	lds	r27, 0x0363	; 0x800363 <__flp+0x1>
    1e5c:	10 97       	sbiw	r26, 0x00	; 0
    1e5e:	81 f4       	brne	.+32     	; 0x1e80 <free+0x3e>
    1e60:	20 81       	ld	r18, Z
    1e62:	31 81       	ldd	r19, Z+1	; 0x01
    1e64:	82 0f       	add	r24, r18
    1e66:	93 1f       	adc	r25, r19
    1e68:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__brkval>
    1e6c:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <__brkval+0x1>
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	51 f5       	brne	.+84     	; 0x1eca <free+0x88>
    1e76:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__brkval+0x1>
    1e7a:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__brkval>
    1e7e:	67 c0       	rjmp	.+206    	; 0x1f4e <free+0x10c>
    1e80:	ed 01       	movw	r28, r26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	ce 17       	cp	r28, r30
    1e88:	df 07       	cpc	r29, r31
    1e8a:	40 f4       	brcc	.+16     	; 0x1e9c <free+0x5a>
    1e8c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e8e:	5b 81       	ldd	r21, Y+3	; 0x03
    1e90:	9e 01       	movw	r18, r28
    1e92:	41 15       	cp	r20, r1
    1e94:	51 05       	cpc	r21, r1
    1e96:	f1 f0       	breq	.+60     	; 0x1ed4 <free+0x92>
    1e98:	ea 01       	movw	r28, r20
    1e9a:	f5 cf       	rjmp	.-22     	; 0x1e86 <free+0x44>
    1e9c:	d3 83       	std	Z+3, r29	; 0x03
    1e9e:	c2 83       	std	Z+2, r28	; 0x02
    1ea0:	40 81       	ld	r20, Z
    1ea2:	51 81       	ldd	r21, Z+1	; 0x01
    1ea4:	84 0f       	add	r24, r20
    1ea6:	95 1f       	adc	r25, r21
    1ea8:	c8 17       	cp	r28, r24
    1eaa:	d9 07       	cpc	r29, r25
    1eac:	59 f4       	brne	.+22     	; 0x1ec4 <free+0x82>
    1eae:	88 81       	ld	r24, Y
    1eb0:	99 81       	ldd	r25, Y+1	; 0x01
    1eb2:	84 0f       	add	r24, r20
    1eb4:	95 1f       	adc	r25, r21
    1eb6:	02 96       	adiw	r24, 0x02	; 2
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	93 83       	std	Z+3, r25	; 0x03
    1ec2:	82 83       	std	Z+2, r24	; 0x02
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	29 f4       	brne	.+10     	; 0x1ed4 <free+0x92>
    1eca:	f0 93 63 03 	sts	0x0363, r31	; 0x800363 <__flp+0x1>
    1ece:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <__flp>
    1ed2:	3d c0       	rjmp	.+122    	; 0x1f4e <free+0x10c>
    1ed4:	e9 01       	movw	r28, r18
    1ed6:	fb 83       	std	Y+3, r31	; 0x03
    1ed8:	ea 83       	std	Y+2, r30	; 0x02
    1eda:	49 91       	ld	r20, Y+
    1edc:	59 91       	ld	r21, Y+
    1ede:	c4 0f       	add	r28, r20
    1ee0:	d5 1f       	adc	r29, r21
    1ee2:	ec 17       	cp	r30, r28
    1ee4:	fd 07       	cpc	r31, r29
    1ee6:	61 f4       	brne	.+24     	; 0x1f00 <free+0xbe>
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	84 0f       	add	r24, r20
    1eee:	95 1f       	adc	r25, r21
    1ef0:	02 96       	adiw	r24, 0x02	; 2
    1ef2:	e9 01       	movw	r28, r18
    1ef4:	99 83       	std	Y+1, r25	; 0x01
    1ef6:	88 83       	st	Y, r24
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	e0 e0       	ldi	r30, 0x00	; 0
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	12 96       	adiw	r26, 0x02	; 2
    1f06:	8d 91       	ld	r24, X+
    1f08:	9c 91       	ld	r25, X
    1f0a:	13 97       	sbiw	r26, 0x03	; 3
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	19 f0       	breq	.+6      	; 0x1f16 <free+0xd4>
    1f10:	fd 01       	movw	r30, r26
    1f12:	dc 01       	movw	r26, r24
    1f14:	f7 cf       	rjmp	.-18     	; 0x1f04 <free+0xc2>
    1f16:	8d 91       	ld	r24, X+
    1f18:	9c 91       	ld	r25, X
    1f1a:	11 97       	sbiw	r26, 0x01	; 1
    1f1c:	9d 01       	movw	r18, r26
    1f1e:	2e 5f       	subi	r18, 0xFE	; 254
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__brkval>
    1f2a:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <__brkval+0x1>
    1f2e:	28 17       	cp	r18, r24
    1f30:	39 07       	cpc	r19, r25
    1f32:	69 f4       	brne	.+26     	; 0x1f4e <free+0x10c>
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	29 f4       	brne	.+10     	; 0x1f42 <free+0x100>
    1f38:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <__flp+0x1>
    1f3c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__flp>
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <free+0x104>
    1f42:	13 82       	std	Z+3, r1	; 0x03
    1f44:	12 82       	std	Z+2, r1	; 0x02
    1f46:	b0 93 61 03 	sts	0x0361, r27	; 0x800361 <__brkval+0x1>
    1f4a:	a0 93 60 03 	sts	0x0360, r26	; 0x800360 <__brkval>
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <realloc>:
    1f54:	6f 92       	push	r6
    1f56:	7f 92       	push	r7
    1f58:	8f 92       	push	r8
    1f5a:	9f 92       	push	r9
    1f5c:	af 92       	push	r10
    1f5e:	bf 92       	push	r11
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	81 f4       	brne	.+32     	; 0x1f94 <realloc+0x40>
    1f74:	cb 01       	movw	r24, r22
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	bf 90       	pop	r11
    1f88:	af 90       	pop	r10
    1f8a:	9f 90       	pop	r9
    1f8c:	8f 90       	pop	r8
    1f8e:	7f 90       	pop	r7
    1f90:	6f 90       	pop	r6
    1f92:	bf ce       	rjmp	.-642    	; 0x1d12 <malloc>
    1f94:	fc 01       	movw	r30, r24
    1f96:	e6 0f       	add	r30, r22
    1f98:	f7 1f       	adc	r31, r23
    1f9a:	9c 01       	movw	r18, r24
    1f9c:	22 50       	subi	r18, 0x02	; 2
    1f9e:	31 09       	sbc	r19, r1
    1fa0:	e2 17       	cp	r30, r18
    1fa2:	f3 07       	cpc	r31, r19
    1fa4:	08 f4       	brcc	.+2      	; 0x1fa8 <realloc+0x54>
    1fa6:	a5 c0       	rjmp	.+330    	; 0x20f2 <__DATA_REGION_LENGTH__+0xf2>
    1fa8:	ec 01       	movw	r28, r24
    1faa:	d9 01       	movw	r26, r18
    1fac:	0d 91       	ld	r16, X+
    1fae:	1c 91       	ld	r17, X
    1fb0:	11 97       	sbiw	r26, 0x01	; 1
    1fb2:	06 17       	cp	r16, r22
    1fb4:	17 07       	cpc	r17, r23
    1fb6:	a8 f0       	brcs	.+42     	; 0x1fe2 <realloc+0x8e>
    1fb8:	05 30       	cpi	r16, 0x05	; 5
    1fba:	11 05       	cpc	r17, r1
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <realloc+0x6c>
    1fbe:	97 c0       	rjmp	.+302    	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	04 97       	sbiw	r24, 0x04	; 4
    1fc4:	86 17       	cp	r24, r22
    1fc6:	97 07       	cpc	r25, r23
    1fc8:	08 f4       	brcc	.+2      	; 0x1fcc <realloc+0x78>
    1fca:	91 c0       	rjmp	.+290    	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    1fcc:	02 50       	subi	r16, 0x02	; 2
    1fce:	11 09       	sbc	r17, r1
    1fd0:	06 1b       	sub	r16, r22
    1fd2:	17 0b       	sbc	r17, r23
    1fd4:	01 93       	st	Z+, r16
    1fd6:	11 93       	st	Z+, r17
    1fd8:	6d 93       	st	X+, r22
    1fda:	7c 93       	st	X, r23
    1fdc:	cf 01       	movw	r24, r30
    1fde:	31 df       	rcall	.-414    	; 0x1e42 <free>
    1fe0:	86 c0       	rjmp	.+268    	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    1fe2:	5b 01       	movw	r10, r22
    1fe4:	a0 1a       	sub	r10, r16
    1fe6:	b1 0a       	sbc	r11, r17
    1fe8:	4c 01       	movw	r8, r24
    1fea:	80 0e       	add	r8, r16
    1fec:	91 1e       	adc	r9, r17
    1fee:	a0 91 62 03 	lds	r26, 0x0362	; 0x800362 <__flp>
    1ff2:	b0 91 63 03 	lds	r27, 0x0363	; 0x800363 <__flp+0x1>
    1ff6:	61 2c       	mov	r6, r1
    1ff8:	71 2c       	mov	r7, r1
    1ffa:	e1 2c       	mov	r14, r1
    1ffc:	f1 2c       	mov	r15, r1
    1ffe:	10 97       	sbiw	r26, 0x00	; 0
    2000:	09 f4       	brne	.+2      	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    2002:	46 c0       	rjmp	.+140    	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    2004:	8d 91       	ld	r24, X+
    2006:	9c 91       	ld	r25, X
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	a8 15       	cp	r26, r8
    200c:	b9 05       	cpc	r27, r9
    200e:	b1 f5       	brne	.+108    	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2010:	6c 01       	movw	r12, r24
    2012:	42 e0       	ldi	r20, 0x02	; 2
    2014:	c4 0e       	add	r12, r20
    2016:	d1 1c       	adc	r13, r1
    2018:	ca 14       	cp	r12, r10
    201a:	db 04       	cpc	r13, r11
    201c:	78 f1       	brcs	.+94     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    201e:	4c 01       	movw	r8, r24
    2020:	8a 18       	sub	r8, r10
    2022:	9b 08       	sbc	r9, r11
    2024:	64 01       	movw	r12, r8
    2026:	42 e0       	ldi	r20, 0x02	; 2
    2028:	c4 0e       	add	r12, r20
    202a:	d1 1c       	adc	r13, r1
    202c:	12 96       	adiw	r26, 0x02	; 2
    202e:	bc 90       	ld	r11, X
    2030:	12 97       	sbiw	r26, 0x02	; 2
    2032:	13 96       	adiw	r26, 0x03	; 3
    2034:	ac 91       	ld	r26, X
    2036:	b5 e0       	ldi	r27, 0x05	; 5
    2038:	cb 16       	cp	r12, r27
    203a:	d1 04       	cpc	r13, r1
    203c:	40 f0       	brcs	.+16     	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    203e:	b2 82       	std	Z+2, r11	; 0x02
    2040:	a3 83       	std	Z+3, r26	; 0x03
    2042:	91 82       	std	Z+1, r9	; 0x01
    2044:	80 82       	st	Z, r8
    2046:	d9 01       	movw	r26, r18
    2048:	6d 93       	st	X+, r22
    204a:	7c 93       	st	X, r23
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    204e:	0e 5f       	subi	r16, 0xFE	; 254
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	80 0f       	add	r24, r16
    2054:	91 1f       	adc	r25, r17
    2056:	f9 01       	movw	r30, r18
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	80 83       	st	Z, r24
    205c:	eb 2d       	mov	r30, r11
    205e:	fa 2f       	mov	r31, r26
    2060:	e1 14       	cp	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	31 f0       	breq	.+12     	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2066:	d7 01       	movw	r26, r14
    2068:	13 96       	adiw	r26, 0x03	; 3
    206a:	fc 93       	st	X, r31
    206c:	ee 93       	st	-X, r30
    206e:	12 97       	sbiw	r26, 0x02	; 2
    2070:	3e c0       	rjmp	.+124    	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    2072:	f0 93 63 03 	sts	0x0363, r31	; 0x800363 <__flp+0x1>
    2076:	e0 93 62 03 	sts	0x0362, r30	; 0x800362 <__flp>
    207a:	39 c0       	rjmp	.+114    	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    207c:	68 16       	cp	r6, r24
    207e:	79 06       	cpc	r7, r25
    2080:	08 f4       	brcc	.+2      	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    2082:	3c 01       	movw	r6, r24
    2084:	7d 01       	movw	r14, r26
    2086:	12 96       	adiw	r26, 0x02	; 2
    2088:	0d 90       	ld	r0, X+
    208a:	bc 91       	ld	r27, X
    208c:	a0 2d       	mov	r26, r0
    208e:	b7 cf       	rjmp	.-146    	; 0x1ffe <realloc+0xaa>
    2090:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__brkval>
    2094:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__brkval+0x1>
    2098:	88 16       	cp	r8, r24
    209a:	99 06       	cpc	r9, r25
    209c:	e1 f4       	brne	.+56     	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
    209e:	66 16       	cp	r6, r22
    20a0:	77 06       	cpc	r7, r23
    20a2:	c8 f4       	brcc	.+50     	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
    20a4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    20a8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <__DATA_REGION_LENGTH__+0xc0>
    20b0:	8d b7       	in	r24, 0x3d	; 61
    20b2:	9e b7       	in	r25, 0x3e	; 62
    20b4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    20b8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    20bc:	84 1b       	sub	r24, r20
    20be:	95 0b       	sbc	r25, r21
    20c0:	e8 17       	cp	r30, r24
    20c2:	f9 07       	cpc	r31, r25
    20c4:	b0 f4       	brcc	.+44     	; 0x20f2 <__DATA_REGION_LENGTH__+0xf2>
    20c6:	f0 93 61 03 	sts	0x0361, r31	; 0x800361 <__brkval+0x1>
    20ca:	e0 93 60 03 	sts	0x0360, r30	; 0x800360 <__brkval>
    20ce:	f9 01       	movw	r30, r18
    20d0:	71 83       	std	Z+1, r23	; 0x01
    20d2:	60 83       	st	Z, r22
    20d4:	0c c0       	rjmp	.+24     	; 0x20ee <__DATA_REGION_LENGTH__+0xee>
    20d6:	cb 01       	movw	r24, r22
    20d8:	1c de       	rcall	.-968    	; 0x1d12 <malloc>
    20da:	7c 01       	movw	r14, r24
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	49 f0       	breq	.+18     	; 0x20f2 <__DATA_REGION_LENGTH__+0xf2>
    20e0:	a8 01       	movw	r20, r16
    20e2:	be 01       	movw	r22, r28
    20e4:	17 d0       	rcall	.+46     	; 0x2114 <memcpy>
    20e6:	ce 01       	movw	r24, r28
    20e8:	ac de       	rcall	.-680    	; 0x1e42 <free>
    20ea:	c7 01       	movw	r24, r14
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    20ee:	ce 01       	movw	r24, r28
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	bf 90       	pop	r11
    2108:	af 90       	pop	r10
    210a:	9f 90       	pop	r9
    210c:	8f 90       	pop	r8
    210e:	7f 90       	pop	r7
    2110:	6f 90       	pop	r6
    2112:	08 95       	ret

00002114 <memcpy>:
    2114:	fb 01       	movw	r30, r22
    2116:	dc 01       	movw	r26, r24
    2118:	02 c0       	rjmp	.+4      	; 0x211e <memcpy+0xa>
    211a:	01 90       	ld	r0, Z+
    211c:	0d 92       	st	X+, r0
    211e:	41 50       	subi	r20, 0x01	; 1
    2120:	50 40       	sbci	r21, 0x00	; 0
    2122:	d8 f7       	brcc	.-10     	; 0x211a <memcpy+0x6>
    2124:	08 95       	ret

00002126 <strcpy>:
    2126:	fb 01       	movw	r30, r22
    2128:	dc 01       	movw	r26, r24
    212a:	01 90       	ld	r0, Z+
    212c:	0d 92       	st	X+, r0
    212e:	00 20       	and	r0, r0
    2130:	e1 f7       	brne	.-8      	; 0x212a <strcpy+0x4>
    2132:	08 95       	ret

00002134 <strncpy>:
    2134:	fb 01       	movw	r30, r22
    2136:	dc 01       	movw	r26, r24
    2138:	41 50       	subi	r20, 0x01	; 1
    213a:	50 40       	sbci	r21, 0x00	; 0
    213c:	48 f0       	brcs	.+18     	; 0x2150 <strncpy+0x1c>
    213e:	01 90       	ld	r0, Z+
    2140:	0d 92       	st	X+, r0
    2142:	00 20       	and	r0, r0
    2144:	c9 f7       	brne	.-14     	; 0x2138 <strncpy+0x4>
    2146:	01 c0       	rjmp	.+2      	; 0x214a <strncpy+0x16>
    2148:	1d 92       	st	X+, r1
    214a:	41 50       	subi	r20, 0x01	; 1
    214c:	50 40       	sbci	r21, 0x00	; 0
    214e:	e0 f7       	brcc	.-8      	; 0x2148 <strncpy+0x14>
    2150:	08 95       	ret

00002152 <dtoa_prf>:
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	29 97       	sbiw	r28, 0x09	; 9
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	6a 01       	movw	r12, r20
    217c:	12 2f       	mov	r17, r18
    217e:	b0 2e       	mov	r11, r16
    2180:	2b e3       	ldi	r18, 0x3B	; 59
    2182:	20 17       	cp	r18, r16
    2184:	20 f0       	brcs	.+8      	; 0x218e <dtoa_prf+0x3c>
    2186:	ff 24       	eor	r15, r15
    2188:	f3 94       	inc	r15
    218a:	f0 0e       	add	r15, r16
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <dtoa_prf+0x40>
    218e:	2c e3       	ldi	r18, 0x3C	; 60
    2190:	f2 2e       	mov	r15, r18
    2192:	0f 2d       	mov	r16, r15
    2194:	27 e0       	ldi	r18, 0x07	; 7
    2196:	ae 01       	movw	r20, r28
    2198:	4f 5f       	subi	r20, 0xFF	; 255
    219a:	5f 4f       	sbci	r21, 0xFF	; 255
    219c:	50 d1       	rcall	.+672    	; 0x243e <__ftoa_engine>
    219e:	bc 01       	movw	r22, r24
    21a0:	49 81       	ldd	r20, Y+1	; 0x01
    21a2:	84 2f       	mov	r24, r20
    21a4:	89 70       	andi	r24, 0x09	; 9
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	31 f0       	breq	.+12     	; 0x21b6 <dtoa_prf+0x64>
    21aa:	e1 fc       	sbrc	r14, 1
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <dtoa_prf+0x68>
    21ae:	e0 fe       	sbrs	r14, 0
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <dtoa_prf+0x6c>
    21b2:	90 e2       	ldi	r25, 0x20	; 32
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <dtoa_prf+0x6e>
    21b6:	9d e2       	ldi	r25, 0x2D	; 45
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <dtoa_prf+0x6e>
    21ba:	9b e2       	ldi	r25, 0x2B	; 43
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <dtoa_prf+0x6e>
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	5e 2d       	mov	r21, r14
    21c2:	50 71       	andi	r21, 0x10	; 16
    21c4:	43 ff       	sbrs	r20, 3
    21c6:	3c c0       	rjmp	.+120    	; 0x2240 <__stack+0x41>
    21c8:	91 11       	cpse	r25, r1
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <dtoa_prf+0x7e>
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <dtoa_prf+0x80>
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	81 17       	cp	r24, r17
    21d4:	18 f4       	brcc	.+6      	; 0x21dc <dtoa_prf+0x8a>
    21d6:	21 2f       	mov	r18, r17
    21d8:	28 1b       	sub	r18, r24
    21da:	01 c0       	rjmp	.+2      	; 0x21de <dtoa_prf+0x8c>
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	51 11       	cpse	r21, r1
    21e0:	0b c0       	rjmp	.+22     	; 0x21f8 <dtoa_prf+0xa6>
    21e2:	f6 01       	movw	r30, r12
    21e4:	82 2f       	mov	r24, r18
    21e6:	30 e2       	ldi	r19, 0x20	; 32
    21e8:	88 23       	and	r24, r24
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <dtoa_prf+0xa0>
    21ec:	31 93       	st	Z+, r19
    21ee:	81 50       	subi	r24, 0x01	; 1
    21f0:	fb cf       	rjmp	.-10     	; 0x21e8 <dtoa_prf+0x96>
    21f2:	c2 0e       	add	r12, r18
    21f4:	d1 1c       	adc	r13, r1
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	99 23       	and	r25, r25
    21fa:	29 f0       	breq	.+10     	; 0x2206 <__stack+0x7>
    21fc:	d6 01       	movw	r26, r12
    21fe:	9c 93       	st	X, r25
    2200:	f6 01       	movw	r30, r12
    2202:	31 96       	adiw	r30, 0x01	; 1
    2204:	6f 01       	movw	r12, r30
    2206:	c6 01       	movw	r24, r12
    2208:	03 96       	adiw	r24, 0x03	; 3
    220a:	e2 fe       	sbrs	r14, 2
    220c:	0a c0       	rjmp	.+20     	; 0x2222 <__stack+0x23>
    220e:	3e e4       	ldi	r19, 0x4E	; 78
    2210:	d6 01       	movw	r26, r12
    2212:	3c 93       	st	X, r19
    2214:	41 e4       	ldi	r20, 0x41	; 65
    2216:	11 96       	adiw	r26, 0x01	; 1
    2218:	4c 93       	st	X, r20
    221a:	11 97       	sbiw	r26, 0x01	; 1
    221c:	12 96       	adiw	r26, 0x02	; 2
    221e:	3c 93       	st	X, r19
    2220:	06 c0       	rjmp	.+12     	; 0x222e <__stack+0x2f>
    2222:	3e e6       	ldi	r19, 0x6E	; 110
    2224:	f6 01       	movw	r30, r12
    2226:	30 83       	st	Z, r19
    2228:	41 e6       	ldi	r20, 0x61	; 97
    222a:	41 83       	std	Z+1, r20	; 0x01
    222c:	32 83       	std	Z+2, r19	; 0x02
    222e:	fc 01       	movw	r30, r24
    2230:	32 2f       	mov	r19, r18
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	33 23       	and	r19, r19
    2236:	09 f4       	brne	.+2      	; 0x223a <__stack+0x3b>
    2238:	42 c0       	rjmp	.+132    	; 0x22be <__stack+0xbf>
    223a:	41 93       	st	Z+, r20
    223c:	31 50       	subi	r19, 0x01	; 1
    223e:	fa cf       	rjmp	.-12     	; 0x2234 <__stack+0x35>
    2240:	42 ff       	sbrs	r20, 2
    2242:	44 c0       	rjmp	.+136    	; 0x22cc <__stack+0xcd>
    2244:	91 11       	cpse	r25, r1
    2246:	02 c0       	rjmp	.+4      	; 0x224c <__stack+0x4d>
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	01 c0       	rjmp	.+2      	; 0x224e <__stack+0x4f>
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	81 17       	cp	r24, r17
    2250:	18 f4       	brcc	.+6      	; 0x2258 <__stack+0x59>
    2252:	21 2f       	mov	r18, r17
    2254:	28 1b       	sub	r18, r24
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__stack+0x5b>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	51 11       	cpse	r21, r1
    225c:	0b c0       	rjmp	.+22     	; 0x2274 <__stack+0x75>
    225e:	f6 01       	movw	r30, r12
    2260:	82 2f       	mov	r24, r18
    2262:	30 e2       	ldi	r19, 0x20	; 32
    2264:	88 23       	and	r24, r24
    2266:	19 f0       	breq	.+6      	; 0x226e <__stack+0x6f>
    2268:	31 93       	st	Z+, r19
    226a:	81 50       	subi	r24, 0x01	; 1
    226c:	fb cf       	rjmp	.-10     	; 0x2264 <__stack+0x65>
    226e:	c2 0e       	add	r12, r18
    2270:	d1 1c       	adc	r13, r1
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	99 23       	and	r25, r25
    2276:	29 f0       	breq	.+10     	; 0x2282 <__stack+0x83>
    2278:	d6 01       	movw	r26, r12
    227a:	9c 93       	st	X, r25
    227c:	f6 01       	movw	r30, r12
    227e:	31 96       	adiw	r30, 0x01	; 1
    2280:	6f 01       	movw	r12, r30
    2282:	c6 01       	movw	r24, r12
    2284:	03 96       	adiw	r24, 0x03	; 3
    2286:	e2 fe       	sbrs	r14, 2
    2288:	0b c0       	rjmp	.+22     	; 0x22a0 <__stack+0xa1>
    228a:	39 e4       	ldi	r19, 0x49	; 73
    228c:	d6 01       	movw	r26, r12
    228e:	3c 93       	st	X, r19
    2290:	3e e4       	ldi	r19, 0x4E	; 78
    2292:	11 96       	adiw	r26, 0x01	; 1
    2294:	3c 93       	st	X, r19
    2296:	11 97       	sbiw	r26, 0x01	; 1
    2298:	36 e4       	ldi	r19, 0x46	; 70
    229a:	12 96       	adiw	r26, 0x02	; 2
    229c:	3c 93       	st	X, r19
    229e:	07 c0       	rjmp	.+14     	; 0x22ae <__stack+0xaf>
    22a0:	39 e6       	ldi	r19, 0x69	; 105
    22a2:	f6 01       	movw	r30, r12
    22a4:	30 83       	st	Z, r19
    22a6:	3e e6       	ldi	r19, 0x6E	; 110
    22a8:	31 83       	std	Z+1, r19	; 0x01
    22aa:	36 e6       	ldi	r19, 0x66	; 102
    22ac:	32 83       	std	Z+2, r19	; 0x02
    22ae:	fc 01       	movw	r30, r24
    22b0:	32 2f       	mov	r19, r18
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	33 23       	and	r19, r19
    22b6:	19 f0       	breq	.+6      	; 0x22be <__stack+0xbf>
    22b8:	41 93       	st	Z+, r20
    22ba:	31 50       	subi	r19, 0x01	; 1
    22bc:	fb cf       	rjmp	.-10     	; 0x22b4 <__stack+0xb5>
    22be:	fc 01       	movw	r30, r24
    22c0:	e2 0f       	add	r30, r18
    22c2:	f1 1d       	adc	r31, r1
    22c4:	10 82       	st	Z, r1
    22c6:	8e ef       	ldi	r24, 0xFE	; 254
    22c8:	9f ef       	ldi	r25, 0xFF	; 255
    22ca:	a6 c0       	rjmp	.+332    	; 0x2418 <__stack+0x219>
    22cc:	21 e0       	ldi	r18, 0x01	; 1
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	91 11       	cpse	r25, r1
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__stack+0xd9>
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	16 16       	cp	r1, r22
    22da:	17 06       	cpc	r1, r23
    22dc:	1c f4       	brge	.+6      	; 0x22e4 <__stack+0xe5>
    22de:	fb 01       	movw	r30, r22
    22e0:	31 96       	adiw	r30, 0x01	; 1
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <__stack+0xe9>
    22e4:	e1 e0       	ldi	r30, 0x01	; 1
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	2e 0f       	add	r18, r30
    22ea:	3f 1f       	adc	r19, r31
    22ec:	bb 20       	and	r11, r11
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <__stack+0xf9>
    22f0:	eb 2d       	mov	r30, r11
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	31 96       	adiw	r30, 0x01	; 1
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <__stack+0xfd>
    22f8:	e0 e0       	ldi	r30, 0x00	; 0
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	2e 0f       	add	r18, r30
    22fe:	3f 1f       	adc	r19, r31
    2300:	e1 2f       	mov	r30, r17
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	2e 17       	cp	r18, r30
    2306:	3f 07       	cpc	r19, r31
    2308:	1c f4       	brge	.+6      	; 0x2310 <__stack+0x111>
    230a:	12 1b       	sub	r17, r18
    230c:	21 2f       	mov	r18, r17
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <__stack+0x113>
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	8e 2d       	mov	r24, r14
    2314:	88 71       	andi	r24, 0x18	; 24
    2316:	59 f4       	brne	.+22     	; 0x232e <__stack+0x12f>
    2318:	f6 01       	movw	r30, r12
    231a:	82 2f       	mov	r24, r18
    231c:	30 e2       	ldi	r19, 0x20	; 32
    231e:	88 23       	and	r24, r24
    2320:	19 f0       	breq	.+6      	; 0x2328 <__stack+0x129>
    2322:	31 93       	st	Z+, r19
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	fb cf       	rjmp	.-10     	; 0x231e <__stack+0x11f>
    2328:	c2 0e       	add	r12, r18
    232a:	d1 1c       	adc	r13, r1
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	99 23       	and	r25, r25
    2330:	29 f0       	breq	.+10     	; 0x233c <__stack+0x13d>
    2332:	d6 01       	movw	r26, r12
    2334:	9c 93       	st	X, r25
    2336:	f6 01       	movw	r30, r12
    2338:	31 96       	adiw	r30, 0x01	; 1
    233a:	6f 01       	movw	r12, r30
    233c:	51 11       	cpse	r21, r1
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <__stack+0x157>
    2340:	f6 01       	movw	r30, r12
    2342:	82 2f       	mov	r24, r18
    2344:	90 e3       	ldi	r25, 0x30	; 48
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <__stack+0x151>
    234a:	91 93       	st	Z+, r25
    234c:	81 50       	subi	r24, 0x01	; 1
    234e:	fb cf       	rjmp	.-10     	; 0x2346 <__stack+0x147>
    2350:	c2 0e       	add	r12, r18
    2352:	d1 1c       	adc	r13, r1
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	0f 2d       	mov	r16, r15
    2358:	06 0f       	add	r16, r22
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	34 2f       	mov	r19, r20
    235e:	30 71       	andi	r19, 0x10	; 16
    2360:	44 ff       	sbrs	r20, 4
    2362:	03 c0       	rjmp	.+6      	; 0x236a <__stack+0x16b>
    2364:	91 33       	cpi	r25, 0x31	; 49
    2366:	09 f4       	brne	.+2      	; 0x236a <__stack+0x16b>
    2368:	01 50       	subi	r16, 0x01	; 1
    236a:	10 16       	cp	r1, r16
    236c:	24 f4       	brge	.+8      	; 0x2376 <__stack+0x177>
    236e:	09 30       	cpi	r16, 0x09	; 9
    2370:	18 f0       	brcs	.+6      	; 0x2378 <__stack+0x179>
    2372:	08 e0       	ldi	r16, 0x08	; 8
    2374:	01 c0       	rjmp	.+2      	; 0x2378 <__stack+0x179>
    2376:	01 e0       	ldi	r16, 0x01	; 1
    2378:	ab 01       	movw	r20, r22
    237a:	77 ff       	sbrs	r23, 7
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <__stack+0x183>
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	fb 01       	movw	r30, r22
    2384:	e4 1b       	sub	r30, r20
    2386:	f5 0b       	sbc	r31, r21
    2388:	a1 e0       	ldi	r26, 0x01	; 1
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ac 0f       	add	r26, r28
    238e:	bd 1f       	adc	r27, r29
    2390:	ea 0f       	add	r30, r26
    2392:	fb 1f       	adc	r31, r27
    2394:	8e e2       	ldi	r24, 0x2E	; 46
    2396:	a8 2e       	mov	r10, r24
    2398:	4b 01       	movw	r8, r22
    239a:	80 1a       	sub	r8, r16
    239c:	91 08       	sbc	r9, r1
    239e:	0b 2d       	mov	r16, r11
    23a0:	10 e0       	ldi	r17, 0x00	; 0
    23a2:	11 95       	neg	r17
    23a4:	01 95       	neg	r16
    23a6:	11 09       	sbc	r17, r1
    23a8:	4f 3f       	cpi	r20, 0xFF	; 255
    23aa:	bf ef       	ldi	r27, 0xFF	; 255
    23ac:	5b 07       	cpc	r21, r27
    23ae:	21 f4       	brne	.+8      	; 0x23b8 <__stack+0x1b9>
    23b0:	d6 01       	movw	r26, r12
    23b2:	ac 92       	st	X, r10
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	6d 01       	movw	r12, r26
    23b8:	64 17       	cp	r22, r20
    23ba:	75 07       	cpc	r23, r21
    23bc:	2c f0       	brlt	.+10     	; 0x23c8 <__stack+0x1c9>
    23be:	84 16       	cp	r8, r20
    23c0:	95 06       	cpc	r9, r21
    23c2:	14 f4       	brge	.+4      	; 0x23c8 <__stack+0x1c9>
    23c4:	81 81       	ldd	r24, Z+1	; 0x01
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <__stack+0x1cb>
    23c8:	80 e3       	ldi	r24, 0x30	; 48
    23ca:	41 50       	subi	r20, 0x01	; 1
    23cc:	51 09       	sbc	r21, r1
    23ce:	31 96       	adiw	r30, 0x01	; 1
    23d0:	d6 01       	movw	r26, r12
    23d2:	11 96       	adiw	r26, 0x01	; 1
    23d4:	7d 01       	movw	r14, r26
    23d6:	40 17       	cp	r20, r16
    23d8:	51 07       	cpc	r21, r17
    23da:	24 f0       	brlt	.+8      	; 0x23e4 <__stack+0x1e5>
    23dc:	d6 01       	movw	r26, r12
    23de:	8c 93       	st	X, r24
    23e0:	67 01       	movw	r12, r14
    23e2:	e2 cf       	rjmp	.-60     	; 0x23a8 <__stack+0x1a9>
    23e4:	64 17       	cp	r22, r20
    23e6:	75 07       	cpc	r23, r21
    23e8:	39 f4       	brne	.+14     	; 0x23f8 <__stack+0x1f9>
    23ea:	96 33       	cpi	r25, 0x36	; 54
    23ec:	20 f4       	brcc	.+8      	; 0x23f6 <__stack+0x1f7>
    23ee:	95 33       	cpi	r25, 0x35	; 53
    23f0:	19 f4       	brne	.+6      	; 0x23f8 <__stack+0x1f9>
    23f2:	31 11       	cpse	r19, r1
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <__stack+0x1f9>
    23f6:	81 e3       	ldi	r24, 0x31	; 49
    23f8:	f6 01       	movw	r30, r12
    23fa:	80 83       	st	Z, r24
    23fc:	f7 01       	movw	r30, r14
    23fe:	82 2f       	mov	r24, r18
    2400:	90 e2       	ldi	r25, 0x20	; 32
    2402:	88 23       	and	r24, r24
    2404:	19 f0       	breq	.+6      	; 0x240c <__stack+0x20d>
    2406:	91 93       	st	Z+, r25
    2408:	81 50       	subi	r24, 0x01	; 1
    240a:	fb cf       	rjmp	.-10     	; 0x2402 <__stack+0x203>
    240c:	f7 01       	movw	r30, r14
    240e:	e2 0f       	add	r30, r18
    2410:	f1 1d       	adc	r31, r1
    2412:	10 82       	st	Z, r1
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	29 96       	adiw	r28, 0x09	; 9
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	9f 90       	pop	r9
    243a:	8f 90       	pop	r8
    243c:	08 95       	ret

0000243e <__ftoa_engine>:
    243e:	28 30       	cpi	r18, 0x08	; 8
    2440:	08 f0       	brcs	.+2      	; 0x2444 <__ftoa_engine+0x6>
    2442:	27 e0       	ldi	r18, 0x07	; 7
    2444:	33 27       	eor	r19, r19
    2446:	da 01       	movw	r26, r20
    2448:	99 0f       	add	r25, r25
    244a:	31 1d       	adc	r19, r1
    244c:	87 fd       	sbrc	r24, 7
    244e:	91 60       	ori	r25, 0x01	; 1
    2450:	00 96       	adiw	r24, 0x00	; 0
    2452:	61 05       	cpc	r22, r1
    2454:	71 05       	cpc	r23, r1
    2456:	39 f4       	brne	.+14     	; 0x2466 <__ftoa_engine+0x28>
    2458:	32 60       	ori	r19, 0x02	; 2
    245a:	2e 5f       	subi	r18, 0xFE	; 254
    245c:	3d 93       	st	X+, r19
    245e:	30 e3       	ldi	r19, 0x30	; 48
    2460:	2a 95       	dec	r18
    2462:	e1 f7       	brne	.-8      	; 0x245c <__ftoa_engine+0x1e>
    2464:	08 95       	ret
    2466:	9f 3f       	cpi	r25, 0xFF	; 255
    2468:	30 f0       	brcs	.+12     	; 0x2476 <__ftoa_engine+0x38>
    246a:	80 38       	cpi	r24, 0x80	; 128
    246c:	71 05       	cpc	r23, r1
    246e:	61 05       	cpc	r22, r1
    2470:	09 f0       	breq	.+2      	; 0x2474 <__ftoa_engine+0x36>
    2472:	3c 5f       	subi	r19, 0xFC	; 252
    2474:	3c 5f       	subi	r19, 0xFC	; 252
    2476:	3d 93       	st	X+, r19
    2478:	91 30       	cpi	r25, 0x01	; 1
    247a:	08 f0       	brcs	.+2      	; 0x247e <__ftoa_engine+0x40>
    247c:	80 68       	ori	r24, 0x80	; 128
    247e:	91 1d       	adc	r25, r1
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	1f 93       	push	r17
    2486:	0f 93       	push	r16
    2488:	ff 92       	push	r15
    248a:	ef 92       	push	r14
    248c:	19 2f       	mov	r17, r25
    248e:	98 7f       	andi	r25, 0xF8	; 248
    2490:	96 95       	lsr	r25
    2492:	e9 2f       	mov	r30, r25
    2494:	96 95       	lsr	r25
    2496:	96 95       	lsr	r25
    2498:	e9 0f       	add	r30, r25
    249a:	ff 27       	eor	r31, r31
    249c:	ee 59       	subi	r30, 0x9E	; 158
    249e:	fe 4f       	sbci	r31, 0xFE	; 254
    24a0:	99 27       	eor	r25, r25
    24a2:	33 27       	eor	r19, r19
    24a4:	ee 24       	eor	r14, r14
    24a6:	ff 24       	eor	r15, r15
    24a8:	a7 01       	movw	r20, r14
    24aa:	e7 01       	movw	r28, r14
    24ac:	05 90       	lpm	r0, Z+
    24ae:	08 94       	sec
    24b0:	07 94       	ror	r0
    24b2:	28 f4       	brcc	.+10     	; 0x24be <__ftoa_engine+0x80>
    24b4:	36 0f       	add	r19, r22
    24b6:	e7 1e       	adc	r14, r23
    24b8:	f8 1e       	adc	r15, r24
    24ba:	49 1f       	adc	r20, r25
    24bc:	51 1d       	adc	r21, r1
    24be:	66 0f       	add	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	06 94       	lsr	r0
    24c8:	a1 f7       	brne	.-24     	; 0x24b2 <__ftoa_engine+0x74>
    24ca:	05 90       	lpm	r0, Z+
    24cc:	07 94       	ror	r0
    24ce:	28 f4       	brcc	.+10     	; 0x24da <__ftoa_engine+0x9c>
    24d0:	e7 0e       	add	r14, r23
    24d2:	f8 1e       	adc	r15, r24
    24d4:	49 1f       	adc	r20, r25
    24d6:	56 1f       	adc	r21, r22
    24d8:	c1 1d       	adc	r28, r1
    24da:	77 0f       	add	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	66 1f       	adc	r22, r22
    24e2:	06 94       	lsr	r0
    24e4:	a1 f7       	brne	.-24     	; 0x24ce <__ftoa_engine+0x90>
    24e6:	05 90       	lpm	r0, Z+
    24e8:	07 94       	ror	r0
    24ea:	28 f4       	brcc	.+10     	; 0x24f6 <__ftoa_engine+0xb8>
    24ec:	f8 0e       	add	r15, r24
    24ee:	49 1f       	adc	r20, r25
    24f0:	56 1f       	adc	r21, r22
    24f2:	c7 1f       	adc	r28, r23
    24f4:	d1 1d       	adc	r29, r1
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	66 1f       	adc	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	06 94       	lsr	r0
    2500:	a1 f7       	brne	.-24     	; 0x24ea <__ftoa_engine+0xac>
    2502:	05 90       	lpm	r0, Z+
    2504:	07 94       	ror	r0
    2506:	20 f4       	brcc	.+8      	; 0x2510 <__ftoa_engine+0xd2>
    2508:	49 0f       	add	r20, r25
    250a:	56 1f       	adc	r21, r22
    250c:	c7 1f       	adc	r28, r23
    250e:	d8 1f       	adc	r29, r24
    2510:	99 0f       	add	r25, r25
    2512:	66 1f       	adc	r22, r22
    2514:	77 1f       	adc	r23, r23
    2516:	88 1f       	adc	r24, r24
    2518:	06 94       	lsr	r0
    251a:	a9 f7       	brne	.-22     	; 0x2506 <__ftoa_engine+0xc8>
    251c:	84 91       	lpm	r24, Z
    251e:	10 95       	com	r17
    2520:	17 70       	andi	r17, 0x07	; 7
    2522:	41 f0       	breq	.+16     	; 0x2534 <__ftoa_engine+0xf6>
    2524:	d6 95       	lsr	r29
    2526:	c7 95       	ror	r28
    2528:	57 95       	ror	r21
    252a:	47 95       	ror	r20
    252c:	f7 94       	ror	r15
    252e:	e7 94       	ror	r14
    2530:	1a 95       	dec	r17
    2532:	c1 f7       	brne	.-16     	; 0x2524 <__ftoa_engine+0xe6>
    2534:	e8 e0       	ldi	r30, 0x08	; 8
    2536:	f1 e0       	ldi	r31, 0x01	; 1
    2538:	68 94       	set
    253a:	15 90       	lpm	r1, Z+
    253c:	15 91       	lpm	r17, Z+
    253e:	35 91       	lpm	r19, Z+
    2540:	65 91       	lpm	r22, Z+
    2542:	95 91       	lpm	r25, Z+
    2544:	05 90       	lpm	r0, Z+
    2546:	7f e2       	ldi	r23, 0x2F	; 47
    2548:	73 95       	inc	r23
    254a:	e1 18       	sub	r14, r1
    254c:	f1 0a       	sbc	r15, r17
    254e:	43 0b       	sbc	r20, r19
    2550:	56 0b       	sbc	r21, r22
    2552:	c9 0b       	sbc	r28, r25
    2554:	d0 09       	sbc	r29, r0
    2556:	c0 f7       	brcc	.-16     	; 0x2548 <__ftoa_engine+0x10a>
    2558:	e1 0c       	add	r14, r1
    255a:	f1 1e       	adc	r15, r17
    255c:	43 1f       	adc	r20, r19
    255e:	56 1f       	adc	r21, r22
    2560:	c9 1f       	adc	r28, r25
    2562:	d0 1d       	adc	r29, r0
    2564:	7e f4       	brtc	.+30     	; 0x2584 <__ftoa_engine+0x146>
    2566:	70 33       	cpi	r23, 0x30	; 48
    2568:	11 f4       	brne	.+4      	; 0x256e <__ftoa_engine+0x130>
    256a:	8a 95       	dec	r24
    256c:	e6 cf       	rjmp	.-52     	; 0x253a <__ftoa_engine+0xfc>
    256e:	e8 94       	clt
    2570:	01 50       	subi	r16, 0x01	; 1
    2572:	30 f0       	brcs	.+12     	; 0x2580 <__ftoa_engine+0x142>
    2574:	08 0f       	add	r16, r24
    2576:	0a f4       	brpl	.+2      	; 0x257a <__ftoa_engine+0x13c>
    2578:	00 27       	eor	r16, r16
    257a:	02 17       	cp	r16, r18
    257c:	08 f4       	brcc	.+2      	; 0x2580 <__ftoa_engine+0x142>
    257e:	20 2f       	mov	r18, r16
    2580:	23 95       	inc	r18
    2582:	02 2f       	mov	r16, r18
    2584:	7a 33       	cpi	r23, 0x3A	; 58
    2586:	28 f0       	brcs	.+10     	; 0x2592 <__ftoa_engine+0x154>
    2588:	79 e3       	ldi	r23, 0x39	; 57
    258a:	7d 93       	st	X+, r23
    258c:	2a 95       	dec	r18
    258e:	e9 f7       	brne	.-6      	; 0x258a <__ftoa_engine+0x14c>
    2590:	10 c0       	rjmp	.+32     	; 0x25b2 <__ftoa_engine+0x174>
    2592:	7d 93       	st	X+, r23
    2594:	2a 95       	dec	r18
    2596:	89 f6       	brne	.-94     	; 0x253a <__ftoa_engine+0xfc>
    2598:	06 94       	lsr	r0
    259a:	97 95       	ror	r25
    259c:	67 95       	ror	r22
    259e:	37 95       	ror	r19
    25a0:	17 95       	ror	r17
    25a2:	17 94       	ror	r1
    25a4:	e1 18       	sub	r14, r1
    25a6:	f1 0a       	sbc	r15, r17
    25a8:	43 0b       	sbc	r20, r19
    25aa:	56 0b       	sbc	r21, r22
    25ac:	c9 0b       	sbc	r28, r25
    25ae:	d0 09       	sbc	r29, r0
    25b0:	98 f0       	brcs	.+38     	; 0x25d8 <__ftoa_engine+0x19a>
    25b2:	23 95       	inc	r18
    25b4:	7e 91       	ld	r23, -X
    25b6:	73 95       	inc	r23
    25b8:	7a 33       	cpi	r23, 0x3A	; 58
    25ba:	08 f0       	brcs	.+2      	; 0x25be <__ftoa_engine+0x180>
    25bc:	70 e3       	ldi	r23, 0x30	; 48
    25be:	7c 93       	st	X, r23
    25c0:	20 13       	cpse	r18, r16
    25c2:	b8 f7       	brcc	.-18     	; 0x25b2 <__ftoa_engine+0x174>
    25c4:	7e 91       	ld	r23, -X
    25c6:	70 61       	ori	r23, 0x10	; 16
    25c8:	7d 93       	st	X+, r23
    25ca:	30 f0       	brcs	.+12     	; 0x25d8 <__ftoa_engine+0x19a>
    25cc:	83 95       	inc	r24
    25ce:	71 e3       	ldi	r23, 0x31	; 49
    25d0:	7d 93       	st	X+, r23
    25d2:	70 e3       	ldi	r23, 0x30	; 48
    25d4:	2a 95       	dec	r18
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <__ftoa_engine+0x192>
    25d8:	11 24       	eor	r1, r1
    25da:	ef 90       	pop	r14
    25dc:	ff 90       	pop	r15
    25de:	0f 91       	pop	r16
    25e0:	1f 91       	pop	r17
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	99 27       	eor	r25, r25
    25e8:	87 fd       	sbrc	r24, 7
    25ea:	90 95       	com	r25
    25ec:	08 95       	ret

000025ee <__do_global_dtors>:
    25ee:	11 e0       	ldi	r17, 0x01	; 1
    25f0:	c3 e9       	ldi	r28, 0x93	; 147
    25f2:	d1 e0       	ldi	r29, 0x01	; 1
    25f4:	00 e0       	ldi	r16, 0x00	; 0
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <__do_global_dtors+0x14>
    25f8:	80 2f       	mov	r24, r16
    25fa:	fe 01       	movw	r30, r28
    25fc:	63 db       	rcall	.-2362   	; 0x1cc4 <__tablejump2__>
    25fe:	21 96       	adiw	r28, 0x01	; 1
    2600:	01 1d       	adc	r16, r1
    2602:	c4 39       	cpi	r28, 0x94	; 148
    2604:	d1 07       	cpc	r29, r17
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	08 07       	cpc	r16, r24
    260a:	b1 f7       	brne	.-20     	; 0x25f8 <__do_global_dtors+0xa>
    260c:	f8 94       	cli

0000260e <__stop_program>:
    260e:	ff cf       	rjmp	.-2      	; 0x260e <__stop_program>
