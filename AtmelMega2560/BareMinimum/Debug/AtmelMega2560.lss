
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800200  00001fea  0000207e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800272  00800272  000020f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0ba  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000296f  00000000  00000000  0000d602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002548  00000000  00000000  0000ff71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c18  00000000  00000000  000124bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002db4  00000000  00000000  000130d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004206  00000000  00000000  00015e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0001a08e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	53 c1       	rjmp	.+678    	; 0x2ac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c1       	rjmp	.+674    	; 0x2ac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c1       	rjmp	.+670    	; 0x2ac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c1       	rjmp	.+666    	; 0x2ac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c1       	rjmp	.+662    	; 0x2ac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c1       	rjmp	.+658    	; 0x2ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c1       	rjmp	.+654    	; 0x2ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c1       	rjmp	.+650    	; 0x2ac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c1       	rjmp	.+646    	; 0x2ac <__bad_interrupt>
      26:	00 00       	nop
      28:	41 c1       	rjmp	.+642    	; 0x2ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3f c1       	rjmp	.+638    	; 0x2ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c1       	rjmp	.+634    	; 0x2ac <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c1       	rjmp	.+630    	; 0x2ac <__bad_interrupt>
      36:	00 00       	nop
      38:	39 c1       	rjmp	.+626    	; 0x2ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	37 c1       	rjmp	.+622    	; 0x2ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c1       	rjmp	.+618    	; 0x2ac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c1       	rjmp	.+614    	; 0x2ac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c1       	rjmp	.+610    	; 0x2ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c1       	rjmp	.+606    	; 0x2ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c1       	rjmp	.+602    	; 0x2ac <__bad_interrupt>
      52:	00 00       	nop
      54:	2b c1       	rjmp	.+598    	; 0x2ac <__bad_interrupt>
      56:	00 00       	nop
      58:	29 c1       	rjmp	.+594    	; 0x2ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_23>
      60:	25 c1       	rjmp	.+586    	; 0x2ac <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_25>
      68:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_26>
      6c:	1f c1       	rjmp	.+574    	; 0x2ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	1d c1       	rjmp	.+570    	; 0x2ac <__bad_interrupt>
      72:	00 00       	nop
      74:	1b c1       	rjmp	.+566    	; 0x2ac <__bad_interrupt>
      76:	00 00       	nop
      78:	19 c1       	rjmp	.+562    	; 0x2ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	17 c1       	rjmp	.+558    	; 0x2ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	15 c1       	rjmp	.+554    	; 0x2ac <__bad_interrupt>
      82:	00 00       	nop
      84:	13 c1       	rjmp	.+550    	; 0x2ac <__bad_interrupt>
      86:	00 00       	nop
      88:	11 c1       	rjmp	.+546    	; 0x2ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0f c1       	rjmp	.+542    	; 0x2ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	0d c1       	rjmp	.+538    	; 0x2ac <__bad_interrupt>
      92:	00 00       	nop
      94:	0b c1       	rjmp	.+534    	; 0x2ac <__bad_interrupt>
      96:	00 00       	nop
      98:	09 c1       	rjmp	.+530    	; 0x2ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	07 c1       	rjmp	.+526    	; 0x2ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	05 c1       	rjmp	.+522    	; 0x2ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	03 c1       	rjmp	.+518    	; 0x2ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	01 c1       	rjmp	.+514    	; 0x2ac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ff c0       	rjmp	.+510    	; 0x2ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fd c0       	rjmp	.+506    	; 0x2ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fb c0       	rjmp	.+502    	; 0x2ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f9 c0       	rjmp	.+498    	; 0x2ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f7 c0       	rjmp	.+494    	; 0x2ac <__bad_interrupt>
      be:	00 00       	nop
      c0:	f5 c0       	rjmp	.+490    	; 0x2ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f3 c0       	rjmp	.+486    	; 0x2ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f1 c0       	rjmp	.+482    	; 0x2ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ef c0       	rjmp	.+478    	; 0x2ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ed c0       	rjmp	.+474    	; 0x2ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	eb c0       	rjmp	.+470    	; 0x2ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e9 c0       	rjmp	.+466    	; 0x2ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	e7 c0       	rjmp	.+462    	; 0x2ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	e5 c0       	rjmp	.+458    	; 0x2ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	43 0d       	add	r20, r3
      e6:	46 0d       	add	r20, r6
      e8:	35 0d       	add	r19, r5
      ea:	39 0d       	add	r19, r9
      ec:	3f 0d       	add	r19, r15
      ee:	7d 0d       	add	r23, r13
      f0:	4a 0d       	add	r20, r10
      f2:	4e 0d       	add	r20, r14
      f4:	54 0d       	add	r21, r4
      f6:	58 0d       	add	r21, r8
      f8:	5c 0d       	add	r21, r12
      fa:	62 0d       	add	r22, r2
      fc:	66 0d       	add	r22, r6
      fe:	6a 0d       	add	r22, r10
     100:	7d 0d       	add	r23, r13
     102:	70 0d       	add	r23, r0
     104:	74 0d       	add	r23, r4
     106:	78 0d       	add	r23, r8

00000108 <__trampolines_end>:
     108:	25 00       	.word	0x0025	; ????

0000010a <_ZZ4loopE3__c_1>:
     10a:	48 3a 20 00                                         H: .

0000010e <_ZZ4loopE3__c_0>:
     10e:	54 3a 20 00                                         T: .

00000112 <_ZZ4loopE3__c>:
     112:	45 72 72 6f 72 20 74 65 6d 70 65 72 61 74 75 72     Error temperatur
     122:	65 21 00                                            e!.

00000125 <digital_pin_to_timer_PGM>:
     125:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     151:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000016b <digital_pin_to_bit_mask_PGM>:
     16b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     17b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     18b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     19b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1ab:	04 08 10 20 40 80                                   ... @.

000001b1 <digital_pin_to_port_PGM>:
     1b1:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1c1:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1d1:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1e1:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1f1:	0b 0b 0b 0b 0b 0b                                   ......

000001f7 <port_to_input_PGM>:
     1f7:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     207:	00 01 00 00 03 01 06 01 09 01                       ..........

00000211 <port_to_output_PGM>:
     211:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     221:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000022b <port_to_mode_PGM>:
     22b:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     23b:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000246 <__ctors_start>:
     246:	6d 02       	muls	r22, r29
     248:	20 0a       	sbc	r2, r16

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	d1 e2       	ldi	r29, 0x21	; 33
     252:	de bf       	out	0x3e, r29	; 62
     254:	cd bf       	out	0x3d, r28	; 61
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0c bf       	out	0x3c, r16	; 60

0000025a <__do_copy_data>:
     25a:	12 e0       	ldi	r17, 0x02	; 2
     25c:	a0 e0       	ldi	r26, 0x00	; 0
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	ea ee       	ldi	r30, 0xEA	; 234
     262:	ff e1       	ldi	r31, 0x1F	; 31
     264:	00 e0       	ldi	r16, 0x00	; 0
     266:	0b bf       	out	0x3b, r16	; 59
     268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x14>
     26a:	07 90       	elpm	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	a2 37       	cpi	r26, 0x72	; 114
     270:	b1 07       	cpc	r27, r17
     272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0x10>

00000274 <__do_clear_bss>:
     274:	23 e0       	ldi	r18, 0x03	; 3
     276:	a2 e7       	ldi	r26, 0x72	; 114
     278:	b2 e0       	ldi	r27, 0x02	; 2
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a6 34       	cpi	r26, 0x46	; 70
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>

00000284 <__do_global_ctors>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	c5 e2       	ldi	r28, 0x25	; 37
     288:	d1 e0       	ldi	r29, 0x01	; 1
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	06 c0       	rjmp	.+12     	; 0x29a <__do_global_ctors+0x16>
     28e:	21 97       	sbiw	r28, 0x01	; 1
     290:	01 09       	sbc	r16, r1
     292:	80 2f       	mov	r24, r16
     294:	fe 01       	movw	r30, r28
     296:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__tablejump2__>
     29a:	c3 32       	cpi	r28, 0x23	; 35
     29c:	d1 07       	cpc	r29, r17
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 07       	cpc	r16, r24
     2a2:	a9 f7       	brne	.-22     	; 0x28e <__do_global_ctors+0xa>
     2a4:	0e 94 4e 0a 	call	0x149c	; 0x149c <main>
     2a8:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <_exit>

000002ac <__bad_interrupt>:
     2ac:	a9 ce       	rjmp	.-686    	; 0x0 <__vectors>

000002ae <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     2ae:	08 95       	ret

000002b0 <setup>:
uint32_t delayMS;

#pragma endregion DHT

void setup()
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	e1 97       	sbiw	r28, 0x31	; 49
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2c8:	26 e0       	ldi	r18, 0x06	; 6
     2ca:	40 e8       	ldi	r20, 0x80	; 128
     2cc:	55 e2       	ldi	r21, 0x25	; 37
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	8c e9       	ldi	r24, 0x9C	; 156
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	e9 d7       	rcall	.+4050   	; 0x12aa <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	
	#pragma region  DHT

	// Initialize device.
	dht.begin();
     2d8:	86 e7       	ldi	r24, 0x76	; 118
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	05 d4       	rcall	.+2058   	; 0xae8 <_ZN11DHT_Unified5beginEv>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     2de:	06 e7       	ldi	r16, 0x76	; 118
     2e0:	12 e0       	ldi	r17, 0x02	; 2
     2e2:	f8 01       	movw	r30, r16
     2e4:	86 89       	ldd	r24, Z+22	; 0x16
     2e6:	8b a7       	std	Y+43, r24	; 0x2b
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     2e8:	89 e3       	ldi	r24, 0x39	; 57
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	9a a7       	std	Y+42, r25	; 0x2a
     2ee:	89 a7       	std	Y+41, r24	; 0x29
     2f0:	87 89       	ldd	r24, Z+23	; 0x17
     2f2:	90 8d       	ldd	r25, Z+24	; 0x18
     2f4:	9d a7       	std	Y+45, r25	; 0x2d
     2f6:	8c a7       	std	Y+44, r24	; 0x2c
     2f8:	81 8d       	ldd	r24, Z+25	; 0x19
     2fa:	92 8d       	ldd	r25, Z+26	; 0x1a
     2fc:	a3 8d       	ldd	r26, Z+27	; 0x1b
     2fe:	b4 8d       	ldd	r27, Z+28	; 0x1c
     300:	8e a7       	std	Y+46, r24	; 0x2e
     302:	9f a7       	std	Y+47, r25	; 0x2f
     304:	a8 ab       	std	Y+48, r26	; 0x30
     306:	b9 ab       	std	Y+49, r27	; 0x31
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     308:	be 01       	movw	r22, r28
     30a:	6f 5f       	subi	r22, 0xFF	; 255
     30c:	7f 4f       	sbci	r23, 0xFF	; 255
     30e:	ce 01       	movw	r24, r28
     310:	89 96       	adiw	r24, 0x29	; 41
     312:	30 d4       	rcall	.+2144   	; 0xb74 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     314:	f8 01       	movw	r30, r16
     316:	87 8d       	ldd	r24, Z+31	; 0x1f
     318:	8b a7       	std	Y+43, r24	; 0x2b
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     31a:	87 e4       	ldi	r24, 0x47	; 71
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	9a a7       	std	Y+42, r25	; 0x2a
     320:	89 a7       	std	Y+41, r24	; 0x29
     322:	80 a1       	ldd	r24, Z+32	; 0x20
     324:	91 a1       	ldd	r25, Z+33	; 0x21
     326:	9d a7       	std	Y+45, r25	; 0x2d
     328:	8c a7       	std	Y+44, r24	; 0x2c
     32a:	82 a1       	ldd	r24, Z+34	; 0x22
     32c:	93 a1       	ldd	r25, Z+35	; 0x23
     32e:	a4 a1       	ldd	r26, Z+36	; 0x24
     330:	b5 a1       	ldd	r27, Z+37	; 0x25
     332:	8e a7       	std	Y+46, r24	; 0x2e
     334:	9f a7       	std	Y+47, r25	; 0x2f
     336:	a8 ab       	std	Y+48, r26	; 0x30
     338:	b9 ab       	std	Y+49, r27	; 0x31
	dht.humidity().getSensor(&sensor);
     33a:	be 01       	movw	r22, r28
     33c:	6f 5f       	subi	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	ce 01       	movw	r24, r28
     342:	89 96       	adiw	r24, 0x29	; 41
     344:	a8 d4       	rcall	.+2384   	; 0xc96 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     346:	6d a1       	ldd	r22, Y+37	; 0x25
     348:	7e a1       	ldd	r23, Y+38	; 0x26
     34a:	8f a1       	ldd	r24, Y+39	; 0x27
     34c:	98 a5       	ldd	r25, Y+40	; 0x28
     34e:	28 ee       	ldi	r18, 0xE8	; 232
     350:	33 e0       	ldi	r19, 0x03	; 3
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__divmodsi4>
     35a:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <__data_end>
     35e:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <__data_end+0x1>
     362:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <__data_end+0x2>
     366:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <__data_end+0x3>
	
	#pragma endregion DHT

}
     36a:	e1 96       	adiw	r28, 0x31	; 49
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <loop>:

void loop()
{
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	ad 97       	sbiw	r28, 0x2d	; 45
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     394:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <__data_end>
     398:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <__data_end+0x1>
     39c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end+0x2>
     3a0:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0x3>
     3a4:	0e 94 83 0c 	call	0x1906	; 0x1906 <delay>
     3a8:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <dht+0x16>
     3ac:	8f a3       	std	Y+39, r24	; 0x27
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     3ae:	89 e3       	ldi	r24, 0x39	; 57
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	9e a3       	std	Y+38, r25	; 0x26
     3b4:	8d a3       	std	Y+37, r24	; 0x25
     3b6:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <dht+0x17>
     3ba:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <dht+0x18>
     3be:	99 a7       	std	Y+41, r25	; 0x29
     3c0:	88 a7       	std	Y+40, r24	; 0x28
     3c2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <dht+0x19>
     3c6:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <dht+0x1a>
     3ca:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <dht+0x1b>
     3ce:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <dht+0x1c>
     3d2:	8a a7       	std	Y+42, r24	; 0x2a
     3d4:	9b a7       	std	Y+43, r25	; 0x2b
     3d6:	ac a7       	std	Y+44, r26	; 0x2c
     3d8:	bd a7       	std	Y+45, r27	; 0x2d

	#pragma region DHT Temperature

	// Get temperature event and print its value.
	sensors_event_t event;
	dht.temperature().getEvent(&event);
     3da:	be 01       	movw	r22, r28
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	ce 01       	movw	r24, r28
     3e2:	85 96       	adiw	r24, 0x25	; 37
     3e4:	d7 d2       	rcall	.+1454   	; 0x994 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
	
	if (isnan(event.temperature))
     3e6:	6d 89       	ldd	r22, Y+21	; 0x15
     3e8:	7e 89       	ldd	r23, Y+22	; 0x16
     3ea:	8f 89       	ldd	r24, Y+23	; 0x17
     3ec:	98 8d       	ldd	r25, Y+24	; 0x18
     3ee:	9b 01       	movw	r18, r22
     3f0:	ac 01       	movw	r20, r24
     3f2:	4f d6       	rcall	.+3230   	; 0x1092 <__unordsf2>
     3f4:	88 23       	and	r24, r24
     3f6:	39 f0       	breq	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		// print error on display
		Serial.println(F("Error temperature!"));
     3f8:	62 e1       	ldi	r22, 0x12	; 18
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	8c e9       	ldi	r24, 0x9C	; 156
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN5Print7printlnEPK19__FlashStringHelper>
     404:	16 c0       	rjmp	.+44     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	}
	else
	{
		Serial.print(F("T: "));
     406:	6e e0       	ldi	r22, 0x0E	; 14
     408:	71 e0       	ldi	r23, 0x01	; 1
     40a:	8c e9       	ldi	r24, 0x9C	; 156
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(event.temperature);
     412:	4d 89       	ldd	r20, Y+21	; 0x15
     414:	5e 89       	ldd	r21, Y+22	; 0x16
     416:	6f 89       	ldd	r22, Y+23	; 0x17
     418:	78 8d       	ldd	r23, Y+24	; 0x18
     41a:	22 e0       	ldi	r18, 0x02	; 2
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	8c e9       	ldi	r24, 0x9C	; 156
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN5Print5printEdi>
		Serial.println("C");
     426:	66 e0       	ldi	r22, 0x06	; 6
     428:	72 e0       	ldi	r23, 0x02	; 2
     42a:	8c e9       	ldi	r24, 0x9C	; 156
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN5Print7printlnEPKc>
     432:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <dht+0x1f>
     436:	8f a3       	std	Y+39, r24	; 0x27
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     438:	87 e4       	ldi	r24, 0x47	; 71
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	9e a3       	std	Y+38, r25	; 0x26
     43e:	8d a3       	std	Y+37, r24	; 0x25
     440:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <dht+0x20>
     444:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <dht+0x21>
     448:	99 a7       	std	Y+41, r25	; 0x29
     44a:	88 a7       	std	Y+40, r24	; 0x28
     44c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <dht+0x22>
     450:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <dht+0x23>
     454:	a0 91 9a 02 	lds	r26, 0x029A	; 0x80029a <dht+0x24>
     458:	b0 91 9b 02 	lds	r27, 0x029B	; 0x80029b <dht+0x25>
     45c:	8a a7       	std	Y+42, r24	; 0x2a
     45e:	9b a7       	std	Y+43, r25	; 0x2b
     460:	ac a7       	std	Y+44, r26	; 0x2c
     462:	bd a7       	std	Y+45, r27	; 0x2d
	#pragma endregion DHT Temperature

	#pragma region DHT humidity

	// Get humidity event and print its value.
	dht.humidity().getEvent(&event);
     464:	be 01       	movw	r22, r28
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	ce 01       	movw	r24, r28
     46c:	85 96       	adiw	r24, 0x25	; 37
     46e:	cb d2       	rcall	.+1430   	; 0xa06 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
	
	if (isnan(event.relative_humidity))
     470:	6d 89       	ldd	r22, Y+21	; 0x15
     472:	7e 89       	ldd	r23, Y+22	; 0x16
     474:	8f 89       	ldd	r24, Y+23	; 0x17
     476:	98 8d       	ldd	r25, Y+24	; 0x18
     478:	9b 01       	movw	r18, r22
     47a:	ac 01       	movw	r20, r24
     47c:	0a d6       	rcall	.+3092   	; 0x1092 <__unordsf2>
     47e:	88 23       	and	r24, r24
     480:	39 f0       	breq	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	{
		// print error on display
		Serial.println("Error humidity!");
     482:	68 e0       	ldi	r22, 0x08	; 8
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	8c e9       	ldi	r24, 0x9C	; 156
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN5Print7printlnEPKc>
     48e:	16 c0       	rjmp	.+44     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	}
	else
	{
		Serial.print(F("H: "));
     490:	6a e0       	ldi	r22, 0x0A	; 10
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	8c e9       	ldi	r24, 0x9C	; 156
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(event.relative_humidity);
     49c:	4d 89       	ldd	r20, Y+21	; 0x15
     49e:	5e 89       	ldd	r21, Y+22	; 0x16
     4a0:	6f 89       	ldd	r22, Y+23	; 0x17
     4a2:	78 8d       	ldd	r23, Y+24	; 0x18
     4a4:	22 e0       	ldi	r18, 0x02	; 2
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	8c e9       	ldi	r24, 0x9C	; 156
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN5Print5printEdi>
		Serial.println(F("%"));
     4b0:	68 e0       	ldi	r22, 0x08	; 8
     4b2:	71 e0       	ldi	r23, 0x01	; 1
     4b4:	8c e9       	ldi	r24, 0x9C	; 156
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	#pragma endregion DHT humidity
	
	delay(50);
     4bc:	62 e3       	ldi	r22, 0x32	; 50
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 83 0c 	call	0x1906	; 0x1906 <delay>
}
     4c8:	ad 96       	adiw	r28, 0x2d	; 45
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <_GLOBAL__sub_I_dht>:
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     4ea:	aa 24       	eor	r10, r10
     4ec:	aa 94       	dec	r10
     4ee:	ba 2c       	mov	r11, r10
     4f0:	65 01       	movw	r12, r10
     4f2:	ee 24       	eor	r14, r14
     4f4:	ea 94       	dec	r14
     4f6:	fe 2c       	mov	r15, r14
     4f8:	87 01       	movw	r16, r14
     4fa:	26 e0       	ldi	r18, 0x06	; 6
     4fc:	4b e0       	ldi	r20, 0x0B	; 11
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	86 e7       	ldi	r24, 0x76	; 118
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	ba d2       	rcall	.+1396   	; 0xa7a <_ZN11DHT_UnifiedC1Ehhhll>
	}
	
	#pragma endregion DHT humidity
	
	delay(50);
}
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	08 95       	ret

00000518 <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     518:	dc 01       	movw	r26, r24
     51a:	15 96       	adiw	r26, 0x05	; 5
     51c:	6c 93       	st	X, r22
     51e:	15 97       	sbiw	r26, 0x05	; 5
     520:	16 96       	adiw	r26, 0x06	; 6
     522:	4c 93       	st	X, r20
     524:	16 97       	sbiw	r26, 0x06	; 6
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	fb 01       	movw	r30, r22
     52a:	e5 59       	subi	r30, 0x95	; 149
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	e4 91       	lpm	r30, Z
     530:	17 96       	adiw	r26, 0x07	; 7
     532:	ec 93       	st	X, r30
     534:	17 97       	sbiw	r26, 0x07	; 7
     536:	fb 01       	movw	r30, r22
     538:	ef 54       	subi	r30, 0x4F	; 79
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	64 91       	lpm	r22, Z
     53e:	18 96       	adiw	r26, 0x08	; 8
     540:	6c 93       	st	X, r22
     542:	18 97       	sbiw	r26, 0x08	; 8
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5e e3       	ldi	r21, 0x3E	; 62
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	1d 96       	adiw	r26, 0x0d	; 13
     54e:	4d 93       	st	X+, r20
     550:	5d 93       	st	X+, r21
     552:	6d 93       	st	X+, r22
     554:	7c 93       	st	X, r23
     556:	50 97       	sbiw	r26, 0x10	; 16
     558:	08 95       	ret

0000055a <_ZN3DHT5beginEh>:
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
     562:	16 2f       	mov	r17, r22
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	8d 81       	ldd	r24, Y+5	; 0x05
     568:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <pinMode>
     56c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <millis>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	80 5d       	subi	r24, 0xD0	; 208
     576:	97 40       	sbci	r25, 0x07	; 7
     578:	a1 09       	sbc	r26, r1
     57a:	b1 09       	sbc	r27, r1
     57c:	89 87       	std	Y+9, r24	; 0x09
     57e:	9a 87       	std	Y+10, r25	; 0x0a
     580:	ab 87       	std	Y+11, r26	; 0x0b
     582:	bc 87       	std	Y+12, r27	; 0x0c
     584:	1a 8b       	std	Y+18, r17	; 0x12
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	08 95       	ret

0000058e <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	ec 01       	movw	r28, r24
     59e:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
     5a0:	66 23       	and	r22, r22
     5a2:	11 f0       	breq	.+4      	; 0x5a8 <_ZN3DHT11expectPulseEb+0x1a>
     5a4:	91 2f       	mov	r25, r17
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <_ZN3DHT11expectPulseEb+0x1c>
     5a8:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
     5aa:	28 85       	ldd	r18, Y+8	; 0x08
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	29 50       	subi	r18, 0x09	; 9
     5b4:	3e 4f       	sbci	r19, 0xFE	; 254
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
     5b6:	a0 e0       	ldi	r26, 0x00	; 0
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
     5ba:	f9 01       	movw	r30, r18
     5bc:	45 91       	lpm	r20, Z+
     5be:	54 91       	lpm	r21, Z
     5c0:	fa 01       	movw	r30, r20
     5c2:	80 81       	ld	r24, Z
     5c4:	81 23       	and	r24, r17
     5c6:	ad 01       	movw	r20, r26
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	98 13       	cpse	r25, r24
     5ce:	0f c0       	rjmp	.+30     	; 0x5ee <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
     5d0:	11 96       	adiw	r26, 0x01	; 1
     5d2:	cd 84       	ldd	r12, Y+13	; 0x0d
     5d4:	de 84       	ldd	r13, Y+14	; 0x0e
     5d6:	ef 84       	ldd	r14, Y+15	; 0x0f
     5d8:	f8 88       	ldd	r15, Y+16	; 0x10
     5da:	4c 15       	cp	r20, r12
     5dc:	5d 05       	cpc	r21, r13
     5de:	6e 05       	cpc	r22, r14
     5e0:	7f 05       	cpc	r23, r15
     5e2:	58 f3       	brcs	.-42     	; 0x5ba <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
     5e4:	3f ef       	ldi	r19, 0xFF	; 255
     5e6:	2f ef       	ldi	r18, 0xFF	; 255
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	9f ef       	ldi	r25, 0xFF	; 255
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
     5ee:	3a 2f       	mov	r19, r26
     5f0:	25 2f       	mov	r18, r21
     5f2:	cb 01       	movw	r24, r22
}
     5f4:	63 2f       	mov	r22, r19
     5f6:	72 2f       	mov	r23, r18
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	c0 54       	subi	r28, 0x40	; 64
     626:	d1 40       	sbci	r29, 0x01	; 1
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	8c 01       	movw	r16, r24
     634:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     636:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
     63a:	f1 10       	cpse	r15, r1
     63c:	16 c0       	rjmp	.+44     	; 0x66a <_ZN3DHT4readEb+0x62>
     63e:	f8 01       	movw	r30, r16
     640:	c1 84       	ldd	r12, Z+9	; 0x09
     642:	d2 84       	ldd	r13, Z+10	; 0x0a
     644:	e3 84       	ldd	r14, Z+11	; 0x0b
     646:	f4 84       	ldd	r15, Z+12	; 0x0c
     648:	9b 01       	movw	r18, r22
     64a:	ac 01       	movw	r20, r24
     64c:	2c 19       	sub	r18, r12
     64e:	3d 09       	sbc	r19, r13
     650:	4e 09       	sbc	r20, r14
     652:	5f 09       	sbc	r21, r15
     654:	69 01       	movw	r12, r18
     656:	7a 01       	movw	r14, r20
     658:	30 ed       	ldi	r19, 0xD0	; 208
     65a:	c3 16       	cp	r12, r19
     65c:	37 e0       	ldi	r19, 0x07	; 7
     65e:	d3 06       	cpc	r13, r19
     660:	e1 04       	cpc	r14, r1
     662:	f1 04       	cpc	r15, r1
     664:	10 f4       	brcc	.+4      	; 0x66a <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     666:	81 89       	ldd	r24, Z+17	; 0x11
     668:	b6 c0       	rjmp	.+364    	; 0x7d6 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
     66a:	f8 01       	movw	r30, r16
     66c:	61 87       	std	Z+9, r22	; 0x09
     66e:	72 87       	std	Z+10, r23	; 0x0a
     670:	83 87       	std	Z+11, r24	; 0x0b
     672:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     674:	14 82       	std	Z+4, r1	; 0x04
     676:	13 82       	std	Z+3, r1	; 0x03
     678:	12 82       	std	Z+2, r1	; 0x02
     67a:	11 82       	std	Z+1, r1	; 0x01
     67c:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
     67e:	62 e0       	ldi	r22, 0x02	; 2
     680:	85 81       	ldd	r24, Z+5	; 0x05
     682:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <pinMode>
  delay(1);
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 83 0c 	call	0x1906	; 0x1906 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	f8 01       	movw	r30, r16
     696:	85 81       	ldd	r24, Z+5	; 0x05
     698:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <pinMode>
  digitalWrite(_pin, LOW);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	f8 01       	movw	r30, r16
     6a0:	85 81       	ldd	r24, Z+5	; 0x05
     6a2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <digitalWrite>
  switch (_type) {
     6a6:	f8 01       	movw	r30, r16
     6a8:	86 81       	ldd	r24, Z+6	; 0x06
     6aa:	85 51       	subi	r24, 0x15	; 21
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	28 f4       	brcc	.+10     	; 0x6ba <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
     6b0:	8c e4       	ldi	r24, 0x4C	; 76
     6b2:	94 e0       	ldi	r25, 0x04	; 4
     6b4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <delayMicroseconds>
    break;
     6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
     6ba:	64 e1       	ldi	r22, 0x14	; 20
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 83 0c 	call	0x1906	; 0x1906 <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	f8 01       	movw	r30, r16
     6ca:	85 81       	ldd	r24, Z+5	; 0x05
     6cc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
     6d0:	f8 01       	movw	r30, r16
     6d2:	82 89       	ldd	r24, Z+18	; 0x12
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
     6da:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	c8 01       	movw	r24, r16
     6e0:	56 df       	rcall	.-340    	; 0x58e <_ZN3DHT11expectPulseEb>
     6e2:	6f 3f       	cpi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	8f 4f       	sbci	r24, 0xFF	; 255
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
     6ec:	f8 01       	movw	r30, r16
     6ee:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
     6f0:	78 94       	sei
     6f2:	42 c0       	rjmp	.+132    	; 0x778 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	c8 01       	movw	r24, r16
     6f8:	4a df       	rcall	.-364    	; 0x58e <_ZN3DHT11expectPulseEb>
     6fa:	6f 3f       	cpi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	8f 4f       	sbci	r24, 0xFF	; 255
     700:	9f 4f       	sbci	r25, 0xFF	; 255
     702:	a1 f3       	breq	.-24     	; 0x6ec <_ZN3DHT4readEb+0xe4>
     704:	9e 01       	movw	r18, r28
     706:	2f 5f       	subi	r18, 0xFF	; 255
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	79 01       	movw	r14, r18
     70c:	5e 01       	movw	r10, r28
     70e:	3f eb       	ldi	r19, 0xBF	; 191
     710:	a3 1a       	sub	r10, r19
     712:	3e ef       	ldi	r19, 0xFE	; 254
     714:	b3 0a       	sbc	r11, r19
     716:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	c8 01       	movw	r24, r16
     71c:	38 df       	rcall	.-400    	; 0x58e <_ZN3DHT11expectPulseEb>
     71e:	f6 01       	movw	r30, r12
     720:	60 83       	st	Z, r22
     722:	71 83       	std	Z+1, r23	; 0x01
     724:	82 83       	std	Z+2, r24	; 0x02
     726:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	c8 01       	movw	r24, r16
     72c:	30 df       	rcall	.-416    	; 0x58e <_ZN3DHT11expectPulseEb>
     72e:	f6 01       	movw	r30, r12
     730:	64 83       	std	Z+4, r22	; 0x04
     732:	75 83       	std	Z+5, r23	; 0x05
     734:	86 83       	std	Z+6, r24	; 0x06
     736:	97 83       	std	Z+7, r25	; 0x07
     738:	f8 e0       	ldi	r31, 0x08	; 8
     73a:	cf 0e       	add	r12, r31
     73c:	d1 1c       	adc	r13, r1
     73e:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
     740:	db 04       	cpc	r13, r11
     742:	51 f7       	brne	.-44     	; 0x718 <_ZN3DHT4readEb+0x110>
     744:	78 94       	sei
     746:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
     74c:	80 80       	ld	r8, Z
     74e:	91 80       	ldd	r9, Z+1	; 0x01
     750:	a2 80       	ldd	r10, Z+2	; 0x02
     752:	b3 80       	ldd	r11, Z+3	; 0x03
     754:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
     756:	55 81       	ldd	r21, Z+5	; 0x05
     758:	66 81       	ldd	r22, Z+6	; 0x06
     75a:	77 81       	ldd	r23, Z+7	; 0x07
     75c:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
     75e:	8f 16       	cp	r8, r31
     760:	9f 06       	cpc	r9, r31
     762:	af 06       	cpc	r10, r31
     764:	bf 06       	cpc	r11, r31
     766:	31 f0       	breq	.+12     	; 0x774 <_ZN3DHT4readEb+0x16c>
     768:	4f 3f       	cpi	r20, 0xFF	; 255
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	58 07       	cpc	r21, r24
     76e:	68 07       	cpc	r22, r24
     770:	78 07       	cpc	r23, r24
     772:	21 f4       	brne	.+8      	; 0x77c <_ZN3DHT4readEb+0x174>
     774:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
     776:	11 8a       	std	Z+17, r1	; 0x11
     778:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
     77a:	2d c0       	rjmp	.+90     	; 0x7d6 <_ZN3DHT4readEb+0x1ce>
     77c:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	f5 95       	asr	r31
     782:	e7 95       	ror	r30
     784:	8a 95       	dec	r24
     786:	e1 f7       	brne	.-8      	; 0x780 <_ZN3DHT4readEb+0x178>
     788:	e0 0f       	add	r30, r16
     78a:	f1 1f       	adc	r31, r17
     78c:	80 81       	ld	r24, Z
     78e:	88 0f       	add	r24, r24
     790:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     792:	95 06       	cpc	r9, r21
     794:	a6 06       	cpc	r10, r22
     796:	b7 06       	cpc	r11, r23
     798:	08 f4       	brcc	.+2      	; 0x79c <_ZN3DHT4readEb+0x194>
     79a:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
     79c:	80 83       	st	Z, r24
     79e:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	f8 e0       	ldi	r31, 0x08	; 8
     7a4:	ef 0e       	add	r14, r31
     7a6:	f1 1c       	adc	r15, r1
     7a8:	28 32       	cpi	r18, 0x28	; 40
     7aa:	31 05       	cpc	r19, r1
     7ac:	71 f6       	brne	.-100    	; 0x74a <_ZN3DHT4readEb+0x142>
     7ae:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     7b0:	24 81       	ldd	r18, Z+4	; 0x04
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 81       	ld	r20, Z
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	84 0f       	add	r24, r20
     7bc:	91 1d       	adc	r25, r1
     7be:	42 81       	ldd	r20, Z+2	; 0x02
     7c0:	84 0f       	add	r24, r20
     7c2:	91 1d       	adc	r25, r1
     7c4:	43 81       	ldd	r20, Z+3	; 0x03
     7c6:	84 0f       	add	r24, r20
     7c8:	91 1d       	adc	r25, r1
     7ca:	99 27       	eor	r25, r25
     7cc:	28 17       	cp	r18, r24
     7ce:	39 07       	cpc	r19, r25
     7d0:	89 f6       	brne	.-94     	; 0x774 <_ZN3DHT4readEb+0x16c>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
     7d4:	81 8b       	std	Z+17, r24	; 0x11
     7d6:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     7d8:	de 4f       	sbci	r29, 0xFE	; 254
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	9f 90       	pop	r9
     7fa:	8f 90       	pop	r8
     7fc:	08 95       	ret

000007fe <_ZN3DHT15readTemperatureEbb>:
     7fe:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	8c 01       	movw	r16, r24
     810:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
     812:	64 2f       	mov	r22, r20
     814:	f9 de       	rcall	.-526    	; 0x608 <_ZN3DHT4readEb>
     816:	88 23       	and	r24, r24
     818:	09 f4       	brne	.+2      	; 0x81c <_ZN3DHT15readTemperatureEbb+0x1e>
     81a:	6b c0       	rjmp	.+214    	; 0x8f2 <_ZN3DHT15readTemperatureEbb+0xf4>
    switch (_type) {
     81c:	f8 01       	movw	r30, r16
     81e:	86 81       	ldd	r24, Z+6	; 0x06
     820:	8c 30       	cpi	r24, 0x0C	; 12
     822:	09 f4       	brne	.+2      	; 0x826 <_ZN3DHT15readTemperatureEbb+0x28>
     824:	3e c0       	rjmp	.+124    	; 0x8a2 <_ZN3DHT15readTemperatureEbb+0xa4>
     826:	18 f4       	brcc	.+6      	; 0x82e <_ZN3DHT15readTemperatureEbb+0x30>
     828:	8b 30       	cpi	r24, 0x0B	; 11
     82a:	b9 f0       	breq	.+46     	; 0x85a <_ZN3DHT15readTemperatureEbb+0x5c>
     82c:	62 c0       	rjmp	.+196    	; 0x8f2 <_ZN3DHT15readTemperatureEbb+0xf4>
     82e:	85 51       	subi	r24, 0x15	; 21
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	08 f0       	brcs	.+2      	; 0x836 <_ZN3DHT15readTemperatureEbb+0x38>
     834:	5e c0       	rjmp	.+188    	; 0x8f2 <_ZN3DHT15readTemperatureEbb+0xf4>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
     836:	f8 01       	movw	r30, r16
     838:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
     83a:	6d 2f       	mov	r22, r29
     83c:	6f 77       	andi	r22, 0x7F	; 127
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	76 2f       	mov	r23, r22
     842:	66 27       	eor	r22, r22
     844:	83 81       	ldd	r24, Z+3	; 0x03
     846:	68 2b       	or	r22, r24
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	09 d3       	rcall	.+1554   	; 0xe60 <__floatunsisf>
     84e:	2d ec       	ldi	r18, 0xCD	; 205
     850:	3c ec       	ldi	r19, 0xCC	; 204
     852:	4c ec       	ldi	r20, 0xCC	; 204
     854:	5d e3       	ldi	r21, 0x3D	; 61
     856:	ba d3       	rcall	.+1908   	; 0xfcc <__mulsf3>
     858:	3d c0       	rjmp	.+122    	; 0x8d4 <_ZN3DHT15readTemperatureEbb+0xd6>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
     85a:	f8 01       	movw	r30, r16
     85c:	62 81       	ldd	r22, Z+2	; 0x02
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fd d2       	rcall	.+1530   	; 0xe60 <__floatunsisf>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
     86a:	f8 01       	movw	r30, r16
     86c:	d3 81       	ldd	r29, Z+3	; 0x03
     86e:	d7 ff       	sbrs	r29, 7
     870:	09 c0       	rjmp	.+18     	; 0x884 <_ZN3DHT15readTemperatureEbb+0x86>
        f = -1 - f;
     872:	9b 01       	movw	r18, r22
     874:	ac 01       	movw	r20, r24
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	9f eb       	ldi	r25, 0xBF	; 191
     87e:	87 d2       	rcall	.+1294   	; 0xd8e <__subsf3>
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
     884:	6d 2f       	mov	r22, r29
     886:	6f 70       	andi	r22, 0x0F	; 15
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	ea d2       	rcall	.+1492   	; 0xe64 <__floatsisf>
     890:	2d ec       	ldi	r18, 0xCD	; 205
     892:	3c ec       	ldi	r19, 0xCC	; 204
     894:	4c ec       	ldi	r20, 0xCC	; 204
     896:	5d e3       	ldi	r21, 0x3D	; 61
     898:	99 d3       	rcall	.+1842   	; 0xfcc <__mulsf3>
     89a:	a7 01       	movw	r20, r14
     89c:	96 01       	movw	r18, r12
     89e:	78 d2       	rcall	.+1264   	; 0xd90 <__addsf3>
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <_ZN3DHT15readTemperatureEbb+0xda>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
     8a2:	f8 01       	movw	r30, r16
     8a4:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
     8a6:	63 81       	ldd	r22, Z+3	; 0x03
     8a8:	6f 70       	andi	r22, 0x0F	; 15
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	d9 d2       	rcall	.+1458   	; 0xe64 <__floatsisf>
     8b2:	2d ec       	ldi	r18, 0xCD	; 205
     8b4:	3c ec       	ldi	r19, 0xCC	; 204
     8b6:	4c ec       	ldi	r20, 0xCC	; 204
     8b8:	5d e3       	ldi	r21, 0x3D	; 61
     8ba:	88 d3       	rcall	.+1808   	; 0xfcc <__mulsf3>
     8bc:	6b 01       	movw	r12, r22
     8be:	7c 01       	movw	r14, r24
     8c0:	6d 2f       	mov	r22, r29
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	cb d2       	rcall	.+1430   	; 0xe60 <__floatunsisf>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	5e d2       	rcall	.+1212   	; 0xd90 <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
     8d4:	d7 fd       	sbrc	r29, 7
        f *= -1;
      }
      if (S) {
     8d6:	90 58       	subi	r25, 0x80	; 128
     8d8:	cc 23       	and	r28, r28
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
     8da:	79 f0       	breq	.+30     	; 0x8fa <_ZN3DHT15readTemperatureEbb+0xfc>
     8dc:	26 e6       	ldi	r18, 0x66	; 102
     8de:	36 e6       	ldi	r19, 0x66	; 102
     8e0:	46 ee       	ldi	r20, 0xE6	; 230
     8e2:	5f e3       	ldi	r21, 0x3F	; 63
     8e4:	73 d3       	rcall	.+1766   	; 0xfcc <__mulsf3>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	52 e4       	ldi	r21, 0x42	; 66
     8ee:	50 d2       	rcall	.+1184   	; 0xd90 <__addsf3>
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <_ZN3DHT15readTemperatureEbb+0xfc>
     8f2:	60 e0       	ldi	r22, 0x00	; 0
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 ec       	ldi	r24, 0xC0	; 192
     8f8:	9f e7       	ldi	r25, 0x7F	; 127
     8fa:	df 91       	pop	r29
      }
      break;
    }
  }
  return f;
}
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <_ZN3DHT12readHumidityEb>:
     90c:	cf 92       	push	r12
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
     91a:	76 de       	rcall	.-788    	; 0x608 <_ZN3DHT4readEb>
     91c:	88 23       	and	r24, r24
     91e:	69 f1       	breq	.+90     	; 0x97a <_ZN3DHT12readHumidityEb+0x6e>
    switch (_type) {
     920:	8e 81       	ldd	r24, Y+6	; 0x06
     922:	8b 30       	cpi	r24, 0x0B	; 11
     924:	50 f1       	brcs	.+84     	; 0x97a <_ZN3DHT12readHumidityEb+0x6e>
     926:	8d 30       	cpi	r24, 0x0D	; 13
     928:	88 f0       	brcs	.+34     	; 0x94c <_ZN3DHT12readHumidityEb+0x40>
     92a:	85 51       	subi	r24, 0x15	; 21
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f5       	brcc	.+74     	; 0x97a <_ZN3DHT12readHumidityEb+0x6e>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
     930:	68 81       	ld	r22, Y
     932:	79 81       	ldd	r23, Y+1	; 0x01
     934:	76 27       	eor	r23, r22
     936:	67 27       	eor	r22, r23
     938:	76 27       	eor	r23, r22
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 d2       	rcall	.+1312   	; 0xe60 <__floatunsisf>
      f *= 0.1;
     940:	2d ec       	ldi	r18, 0xCD	; 205
     942:	3c ec       	ldi	r19, 0xCC	; 204
     944:	4c ec       	ldi	r20, 0xCC	; 204
     946:	5d e3       	ldi	r21, 0x3D	; 61
     948:	41 d3       	rcall	.+1666   	; 0xfcc <__mulsf3>
      break;
     94a:	1b c0       	rjmp	.+54     	; 0x982 <_ZN3DHT12readHumidityEb+0x76>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
     94c:	69 81       	ldd	r22, Y+1	; 0x01
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	87 d2       	rcall	.+1294   	; 0xe64 <__floatsisf>
     956:	2d ec       	ldi	r18, 0xCD	; 205
     958:	3c ec       	ldi	r19, 0xCC	; 204
     95a:	4c ec       	ldi	r20, 0xCC	; 204
     95c:	5d e3       	ldi	r21, 0x3D	; 61
     95e:	36 d3       	rcall	.+1644   	; 0xfcc <__mulsf3>
     960:	6b 01       	movw	r12, r22
     962:	7c 01       	movw	r14, r24
     964:	68 81       	ld	r22, Y
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	7b d2       	rcall	.+1270   	; 0xe64 <__floatsisf>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c7 01       	movw	r24, r14
     974:	b6 01       	movw	r22, r12
     976:	0c d2       	rcall	.+1048   	; 0xd90 <__addsf3>
     978:	04 c0       	rjmp	.+8      	; 0x982 <_ZN3DHT12readHumidityEb+0x76>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 ec       	ldi	r24, 0xC0	; 192
     980:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	08 95       	ret

00000990 <_ZN11DHT_Unified8HumidityD1Ev>:
     990:	08 95       	ret

00000992 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     992:	08 95       	ret

00000994 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	8c 01       	movw	r16, r24
     99e:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     9a0:	84 e2       	ldi	r24, 0x24	; 36
     9a2:	fb 01       	movw	r30, r22
     9a4:	11 92       	st	Z+, r1
     9a6:	8a 95       	dec	r24
     9a8:	e9 f7       	brne	.-6      	; 0x9a4 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     9aa:	84 e2       	ldi	r24, 0x24	; 36
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	88 83       	st	Y, r24
     9b4:	99 83       	std	Y+1, r25	; 0x01
     9b6:	aa 83       	std	Y+2, r26	; 0x02
     9b8:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     9ba:	f8 01       	movw	r30, r16
     9bc:	85 81       	ldd	r24, Z+5	; 0x05
     9be:	96 81       	ldd	r25, Z+6	; 0x06
     9c0:	a7 81       	ldd	r26, Z+7	; 0x07
     9c2:	b0 85       	ldd	r27, Z+8	; 0x08
     9c4:	8c 83       	std	Y+4, r24	; 0x04
     9c6:	9d 83       	std	Y+5, r25	; 0x05
     9c8:	ae 83       	std	Y+6, r26	; 0x06
     9ca:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     9cc:	8d e0       	ldi	r24, 0x0D	; 13
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	88 87       	std	Y+8, r24	; 0x08
     9d6:	99 87       	std	Y+9, r25	; 0x09
     9d8:	aa 87       	std	Y+10, r26	; 0x0a
     9da:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     9dc:	63 d7       	rcall	.+3782   	; 0x18a4 <millis>
     9de:	68 8b       	std	Y+16, r22	; 0x10
     9e0:	79 8b       	std	Y+17, r23	; 0x11
     9e2:	8a 8b       	std	Y+18, r24	; 0x12
     9e4:	9b 8b       	std	Y+19, r25	; 0x13
  event->temperature = _parent->_dht.readTemperature();
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	f8 01       	movw	r30, r16
     9ec:	83 81       	ldd	r24, Z+3	; 0x03
     9ee:	94 81       	ldd	r25, Z+4	; 0x04
     9f0:	06 df       	rcall	.-500    	; 0x7fe <_ZN3DHT15readTemperatureEbb>
     9f2:	6c 8b       	std	Y+20, r22	; 0x14
     9f4:	7d 8b       	std	Y+21, r23	; 0x15
     9f6:	8e 8b       	std	Y+22, r24	; 0x16
     9f8:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	8c 01       	movw	r16, r24
     a10:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     a12:	84 e2       	ldi	r24, 0x24	; 36
     a14:	fb 01       	movw	r30, r22
     a16:	11 92       	st	Z+, r1
     a18:	8a 95       	dec	r24
     a1a:	e9 f7       	brne	.-6      	; 0xa16 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     a1c:	84 e2       	ldi	r24, 0x24	; 36
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	88 83       	st	Y, r24
     a26:	99 83       	std	Y+1, r25	; 0x01
     a28:	aa 83       	std	Y+2, r26	; 0x02
     a2a:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     a2c:	f8 01       	movw	r30, r16
     a2e:	85 81       	ldd	r24, Z+5	; 0x05
     a30:	96 81       	ldd	r25, Z+6	; 0x06
     a32:	a7 81       	ldd	r26, Z+7	; 0x07
     a34:	b0 85       	ldd	r27, Z+8	; 0x08
     a36:	8c 83       	std	Y+4, r24	; 0x04
     a38:	9d 83       	std	Y+5, r25	; 0x05
     a3a:	ae 83       	std	Y+6, r26	; 0x06
     a3c:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     a3e:	8c e0       	ldi	r24, 0x0C	; 12
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	88 87       	std	Y+8, r24	; 0x08
     a48:	99 87       	std	Y+9, r25	; 0x09
     a4a:	aa 87       	std	Y+10, r26	; 0x0a
     a4c:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     a4e:	2a d7       	rcall	.+3668   	; 0x18a4 <millis>
     a50:	68 8b       	std	Y+16, r22	; 0x10
     a52:	79 8b       	std	Y+17, r23	; 0x11
     a54:	8a 8b       	std	Y+18, r24	; 0x12
     a56:	9b 8b       	std	Y+19, r25	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	f8 01       	movw	r30, r16
     a5c:	83 81       	ldd	r24, Z+3	; 0x03
     a5e:	94 81       	ldd	r25, Z+4	; 0x04
     a60:	55 df       	rcall	.-342    	; 0x90c <_ZN3DHT12readHumidityEb>
     a62:	6c 8b       	std	Y+20, r22	; 0x14
     a64:	7d 8b       	std	Y+21, r23	; 0x15
     a66:	8e 8b       	std	Y+22, r24	; 0x16
     a68:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <_ZN11DHT_Unified8HumidityD0Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     a76:	1e c5       	rjmp	.+2620   	; 0x14b4 <_ZdlPv>

00000a78 <_ZN11DHT_Unified11TemperatureD0Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     a78:	1d c5       	rjmp	.+2618   	; 0x14b4 <_ZdlPv>

00000a7a <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
     a7a:	4f 92       	push	r4
     a7c:	5f 92       	push	r5
     a7e:	6f 92       	push	r6
     a80:	7f 92       	push	r7
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	94 2e       	mov	r9, r20
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     a9c:	3d dd       	rcall	.-1414   	; 0x518 <_ZN3DHTC1Ehhh>
     a9e:	9b 8a       	std	Y+19, r9	; 0x13
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     aa0:	89 e3       	ldi	r24, 0x39	; 57
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	9d 8b       	std	Y+21, r25	; 0x15
     aa6:	8c 8b       	std	Y+20, r24	; 0x14
     aa8:	d8 8f       	std	Y+24, r29	; 0x18
     aaa:	cf 8b       	std	Y+23, r28	; 0x17
     aac:	e9 8e       	std	Y+25, r14	; 0x19
     aae:	fa 8e       	std	Y+26, r15	; 0x1a
     ab0:	0b 8f       	std	Y+27, r16	; 0x1b
     ab2:	1c 8f       	std	Y+28, r17	; 0x1c
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     ab4:	87 e4       	ldi	r24, 0x47	; 71
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9e 8f       	std	Y+30, r25	; 0x1e
     aba:	8d 8f       	std	Y+29, r24	; 0x1d
     abc:	d9 a3       	std	Y+33, r29	; 0x21
     abe:	c8 a3       	std	Y+32, r28	; 0x20
     ac0:	aa a2       	std	Y+34, r10	; 0x22
     ac2:	bb a2       	std	Y+35, r11	; 0x23
     ac4:	cc a2       	std	Y+36, r12	; 0x24
     ac6:	dd a2       	std	Y+37, r13	; 0x25
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	9f 90       	pop	r9
     ade:	7f 90       	pop	r7
     ae0:	6f 90       	pop	r6
     ae2:	5f 90       	pop	r5
     ae4:	4f 90       	pop	r4
     ae6:	08 95       	ret

00000ae8 <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
     ae8:	67 e3       	ldi	r22, 0x37	; 55
     aea:	37 cd       	rjmp	.-1426   	; 0x55a <_ZN3DHT5beginEh>

00000aec <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	eb 01       	movw	r28, r22
  switch (_type) {
     af2:	fc 01       	movw	r30, r24
     af4:	83 89       	ldd	r24, Z+19	; 0x13
     af6:	8c 30       	cpi	r24, 0x0C	; 12
     af8:	89 f0       	breq	.+34     	; 0xb1c <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>
     afa:	38 f4       	brcc	.+14     	; 0xb0a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
     afc:	8b 30       	cpi	r24, 0x0B	; 11
     afe:	c1 f4       	brne	.+48     	; 0xb30 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
     b00:	4b e0       	ldi	r20, 0x0B	; 11
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	68 e1       	ldi	r22, 0x18	; 24
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	17 c0       	rjmp	.+46     	; 0xb38 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
  switch (_type) {
     b0a:	85 31       	cpi	r24, 0x15	; 21
     b0c:	61 f0       	breq	.+24     	; 0xb26 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3a>
     b0e:	86 31       	cpi	r24, 0x16	; 22
     b10:	79 f4       	brne	.+30     	; 0xb30 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    break;
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
     b12:	4b e0       	ldi	r20, 0x0B	; 11
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6a e2       	ldi	r22, 0x2A	; 42
     b18:	72 e0       	ldi	r23, 0x02	; 2
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
  switch (_type) {
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    break;
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
     b1c:	4b e0       	ldi	r20, 0x0B	; 11
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	6e e1       	ldi	r22, 0x1E	; 30
     b22:	72 e0       	ldi	r23, 0x02	; 2
     b24:	09 c0       	rjmp	.+18     	; 0xb38 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
     b26:	4b e0       	ldi	r20, 0x0B	; 11
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	64 e2       	ldi	r22, 0x24	; 36
     b2c:	72 e0       	ldi	r23, 0x02	; 2
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
     b30:	4b e0       	ldi	r20, 0x0B	; 11
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e3       	ldi	r22, 0x30	; 48
     b36:	72 e0       	ldi	r23, 0x02	; 2
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <strncpy>
    break;
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
     b3e:	1b 86       	std	Y+11, r1	; 0x0b
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
     b46:	fb 01       	movw	r30, r22
  switch (_type) {
     b48:	dc 01       	movw	r26, r24
     b4a:	53 96       	adiw	r26, 0x13	; 19
     b4c:	8c 91       	ld	r24, X
     b4e:	8c 30       	cpi	r24, 0x0C	; 12
     b50:	41 f0       	breq	.+16     	; 0xb62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     b52:	38 f4       	brcc	.+14     	; 0xb62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     b54:	8b 30       	cpi	r24, 0x0B	; 11
     b56:	29 f4       	brne	.+10     	; 0xb62 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	92 e4       	ldi	r25, 0x42	; 66
     b5c:	af e0       	ldi	r26, 0x0F	; 15
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x24>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    break;
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
     b62:	80 e8       	ldi	r24, 0x80	; 128
     b64:	94 e8       	ldi	r25, 0x84	; 132
     b66:	ae e1       	ldi	r26, 0x1E	; 30
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	84 a3       	std	Z+36, r24	; 0x24
     b6c:	95 a3       	std	Z+37, r25	; 0x25
     b6e:	a6 a3       	std	Z+38, r26	; 0x26
     b70:	b7 a3       	std	Z+39, r27	; 0x27
     b72:	08 95       	ret

00000b74 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	8c 01       	movw	r16, r24
     b7e:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     b80:	88 e2       	ldi	r24, 0x28	; 40
     b82:	db 01       	movw	r26, r22
     b84:	1d 92       	st	X+, r1
     b86:	8a 95       	dec	r24
     b88:	e9 f7       	brne	.-6      	; 0xb84 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     b8a:	f8 01       	movw	r30, r16
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	94 81       	ldd	r25, Z+4	; 0x04
     b90:	ad df       	rcall	.-166    	; 0xaec <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	8c 87       	std	Y+12, r24	; 0x0c
     b9c:	9d 87       	std	Y+13, r25	; 0x0d
     b9e:	ae 87       	std	Y+14, r26	; 0x0e
     ba0:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     ba2:	f8 01       	movw	r30, r16
     ba4:	85 81       	ldd	r24, Z+5	; 0x05
     ba6:	96 81       	ldd	r25, Z+6	; 0x06
     ba8:	a7 81       	ldd	r26, Z+7	; 0x07
     baa:	b0 85       	ldd	r27, Z+8	; 0x08
     bac:	88 8b       	std	Y+16, r24	; 0x10
     bae:	99 8b       	std	Y+17, r25	; 0x11
     bb0:	aa 8b       	std	Y+18, r26	; 0x12
     bb2:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     bb4:	8d e0       	ldi	r24, 0x0D	; 13
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	8c 8b       	std	Y+20, r24	; 0x14
     bbe:	9d 8b       	std	Y+21, r25	; 0x15
     bc0:	ae 8b       	std	Y+22, r26	; 0x16
     bc2:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     bc4:	be 01       	movw	r22, r28
     bc6:	83 81       	ldd	r24, Z+3	; 0x03
     bc8:	94 81       	ldd	r25, Z+4	; 0x04
     bca:	bd df       	rcall	.-134    	; 0xb46 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     bcc:	d8 01       	movw	r26, r16
     bce:	13 96       	adiw	r26, 0x03	; 3
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	14 97       	sbiw	r26, 0x04	; 4
     bd6:	83 89       	ldd	r24, Z+19	; 0x13
     bd8:	8c 30       	cpi	r24, 0x0C	; 12
     bda:	f1 f0       	breq	.+60     	; 0xc18 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xa4>
     bdc:	a0 f4       	brcc	.+40     	; 0xc06 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x92>
     bde:	8b 30       	cpi	r24, 0x0B	; 11
     be0:	09 f0       	breq	.+2      	; 0xbe4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>
     be2:	48 c0       	rjmp	.+144    	; 0xc74 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
  case DHT11:
    sensor->max_value = 50.0F;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	a8 e4       	ldi	r26, 0x48	; 72
     bea:	b2 e4       	ldi	r27, 0x42	; 66
     bec:	88 8f       	std	Y+24, r24	; 0x18
     bee:	99 8f       	std	Y+25, r25	; 0x19
     bf0:	aa 8f       	std	Y+26, r26	; 0x1a
     bf2:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     bf4:	1c 8e       	std	Y+28, r1	; 0x1c
     bf6:	1d 8e       	std	Y+29, r1	; 0x1d
     bf8:	1e 8e       	std	Y+30, r1	; 0x1e
     bfa:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 2.0F;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e4       	ldi	r27, 0x40	; 64
     c04:	32 c0       	rjmp	.+100    	; 0xc6a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     c06:	85 31       	cpi	r24, 0x15	; 21
     c08:	e1 f0       	breq	.+56     	; 0xc42 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xce>
     c0a:	86 31       	cpi	r24, 0x16	; 22
     c0c:	99 f5       	brne	.+102    	; 0xc74 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    sensor->max_value = 80.0F;
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	aa ef       	ldi	r26, 0xFA	; 250
     c14:	b2 e4       	ldi	r27, 0x42	; 66
     c16:	19 c0       	rjmp	.+50     	; 0xc4a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 50.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 2.0F;
    break;
  case DHT12:
    sensor->max_value = 60.0F;
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e7       	ldi	r26, 0x70	; 112
     c1e:	b2 e4       	ldi	r27, 0x42	; 66
     c20:	88 8f       	std	Y+24, r24	; 0x18
     c22:	99 8f       	std	Y+25, r25	; 0x19
     c24:	aa 8f       	std	Y+26, r26	; 0x1a
     c26:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -20.0F;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 ea       	ldi	r26, 0xA0	; 160
     c2e:	b1 ec       	ldi	r27, 0xC1	; 193
     c30:	8c 8f       	std	Y+28, r24	; 0x1c
     c32:	9d 8f       	std	Y+29, r25	; 0x1d
     c34:	ae 8f       	std	Y+30, r26	; 0x1e
     c36:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.5F;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	bf e3       	ldi	r27, 0x3F	; 63
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
    break;
  case DHT21:
    sensor->max_value = 80.0F;
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a0 ea       	ldi	r26, 0xA0	; 160
     c48:	b2 e4       	ldi	r27, 0x42	; 66
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     c4a:	88 8f       	std	Y+24, r24	; 0x18
     c4c:	99 8f       	std	Y+25, r25	; 0x19
     c4e:	aa 8f       	std	Y+26, r26	; 0x1a
     c50:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -40.0F;
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a0 e2       	ldi	r26, 0x20	; 32
     c58:	b2 ec       	ldi	r27, 0xC2	; 194
     c5a:	8c 8f       	std	Y+28, r24	; 0x1c
     c5c:	9d 8f       	std	Y+29, r25	; 0x1d
     c5e:	ae 8f       	std	Y+30, r26	; 0x1e
     c60:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.1F;
     c62:	8d ec       	ldi	r24, 0xCD	; 205
     c64:	9c ec       	ldi	r25, 0xCC	; 204
     c66:	ac ec       	ldi	r26, 0xCC	; 204
     c68:	bd e3       	ldi	r27, 0x3D	; 61
     c6a:	88 a3       	std	Y+32, r24	; 0x20
     c6c:	99 a3       	std	Y+33, r25	; 0x21
     c6e:	aa a3       	std	Y+34, r26	; 0x22
     c70:	bb a3       	std	Y+35, r27	; 0x23
    break;
     c72:	0c c0       	rjmp	.+24     	; 0xc8c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x118>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     c74:	18 8e       	std	Y+24, r1	; 0x18
     c76:	19 8e       	std	Y+25, r1	; 0x19
     c78:	1a 8e       	std	Y+26, r1	; 0x1a
     c7a:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     c7c:	1c 8e       	std	Y+28, r1	; 0x1c
     c7e:	1d 8e       	std	Y+29, r1	; 0x1d
     c80:	1e 8e       	std	Y+30, r1	; 0x1e
     c82:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
     c84:	18 a2       	std	Y+32, r1	; 0x20
     c86:	19 a2       	std	Y+33, r1	; 0x21
     c88:	1a a2       	std	Y+34, r1	; 0x22
     c8a:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	8c 01       	movw	r16, r24
     ca0:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	db 01       	movw	r26, r22
     ca6:	1d 92       	st	X+, r1
     ca8:	8a 95       	dec	r24
     caa:	e9 f7       	brne	.-6      	; 0xca6 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     cac:	f8 01       	movw	r30, r16
     cae:	83 81       	ldd	r24, Z+3	; 0x03
     cb0:	94 81       	ldd	r25, Z+4	; 0x04
     cb2:	1c df       	rcall	.-456    	; 0xaec <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	8c 87       	std	Y+12, r24	; 0x0c
     cbe:	9d 87       	std	Y+13, r25	; 0x0d
     cc0:	ae 87       	std	Y+14, r26	; 0x0e
     cc2:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     cc4:	f8 01       	movw	r30, r16
     cc6:	85 81       	ldd	r24, Z+5	; 0x05
     cc8:	96 81       	ldd	r25, Z+6	; 0x06
     cca:	a7 81       	ldd	r26, Z+7	; 0x07
     ccc:	b0 85       	ldd	r27, Z+8	; 0x08
     cce:	88 8b       	std	Y+16, r24	; 0x10
     cd0:	99 8b       	std	Y+17, r25	; 0x11
     cd2:	aa 8b       	std	Y+18, r26	; 0x12
     cd4:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     cd6:	8c e0       	ldi	r24, 0x0C	; 12
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a0 e0       	ldi	r26, 0x00	; 0
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	8c 8b       	std	Y+20, r24	; 0x14
     ce0:	9d 8b       	std	Y+21, r25	; 0x15
     ce2:	ae 8b       	std	Y+22, r26	; 0x16
     ce4:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     ce6:	be 01       	movw	r22, r28
     ce8:	83 81       	ldd	r24, Z+3	; 0x03
     cea:	94 81       	ldd	r25, Z+4	; 0x04
     cec:	2c df       	rcall	.-424    	; 0xb46 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     cee:	d8 01       	movw	r26, r16
     cf0:	13 96       	adiw	r26, 0x03	; 3
     cf2:	ed 91       	ld	r30, X+
     cf4:	fc 91       	ld	r31, X
     cf6:	14 97       	sbiw	r26, 0x04	; 4
     cf8:	83 89       	ldd	r24, Z+19	; 0x13
     cfa:	8c 30       	cpi	r24, 0x0C	; 12
     cfc:	69 f0       	breq	.+26     	; 0xd18 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x82>
     cfe:	38 f4       	brcc	.+14     	; 0xd0e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x78>
     d00:	8b 30       	cpi	r24, 0x0B	; 11
     d02:	a1 f5       	brne	.+104    	; 0xd6c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
  case DHT11:
    sensor->max_value = 80.0F;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 ea       	ldi	r26, 0xA0	; 160
     d0a:	b2 e4       	ldi	r27, 0x42	; 66
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x8a>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     d0e:	85 31       	cpi	r24, 0x15	; 21
     d10:	c1 f0       	breq	.+48     	; 0xd42 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
     d12:	86 31       	cpi	r24, 0x16	; 22
     d14:	b1 f0       	breq	.+44     	; 0xd42 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
     d16:	2a c0       	rjmp	.+84     	; 0xd6c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 80.0F;
    sensor->min_value = 20.0F;
    sensor->resolution = 5.0F;
    break;
  case DHT12:
    sensor->max_value = 95.0F;
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	ae eb       	ldi	r26, 0xBE	; 190
     d1e:	b2 e4       	ldi	r27, 0x42	; 66
     d20:	88 8f       	std	Y+24, r24	; 0x18
     d22:	99 8f       	std	Y+25, r25	; 0x19
     d24:	aa 8f       	std	Y+26, r26	; 0x1a
     d26:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 20.0F;
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 ea       	ldi	r26, 0xA0	; 160
     d2e:	b1 e4       	ldi	r27, 0x41	; 65
     d30:	8c 8f       	std	Y+28, r24	; 0x1c
     d32:	9d 8f       	std	Y+29, r25	; 0x1d
     d34:	ae 8f       	std	Y+30, r26	; 0x1e
     d36:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 5.0F;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 ea       	ldi	r26, 0xA0	; 160
     d3e:	b0 e4       	ldi	r27, 0x40	; 64
     d40:	10 c0       	rjmp	.+32     	; 0xd62 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xcc>
    sensor->max_value = 100.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 100.0F;
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a8 ec       	ldi	r26, 0xC8	; 200
     d48:	b2 e4       	ldi	r27, 0x42	; 66
     d4a:	88 8f       	std	Y+24, r24	; 0x18
     d4c:	99 8f       	std	Y+25, r25	; 0x19
     d4e:	aa 8f       	std	Y+26, r26	; 0x1a
     d50:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     d52:	1c 8e       	std	Y+28, r1	; 0x1c
     d54:	1d 8e       	std	Y+29, r1	; 0x1d
     d56:	1e 8e       	std	Y+30, r1	; 0x1e
     d58:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.1F;
     d5a:	8d ec       	ldi	r24, 0xCD	; 205
     d5c:	9c ec       	ldi	r25, 0xCC	; 204
     d5e:	ac ec       	ldi	r26, 0xCC	; 204
     d60:	bd e3       	ldi	r27, 0x3D	; 61
     d62:	88 a3       	std	Y+32, r24	; 0x20
     d64:	99 a3       	std	Y+33, r25	; 0x21
     d66:	aa a3       	std	Y+34, r26	; 0x22
     d68:	bb a3       	std	Y+35, r27	; 0x23
    break;
     d6a:	0c c0       	rjmp	.+24     	; 0xd84 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xee>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     d6c:	18 8e       	std	Y+24, r1	; 0x18
     d6e:	19 8e       	std	Y+25, r1	; 0x19
     d70:	1a 8e       	std	Y+26, r1	; 0x1a
     d72:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     d74:	1c 8e       	std	Y+28, r1	; 0x1c
     d76:	1d 8e       	std	Y+29, r1	; 0x1d
     d78:	1e 8e       	std	Y+30, r1	; 0x1e
     d7a:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
     d7c:	18 a2       	std	Y+32, r1	; 0x20
     d7e:	19 a2       	std	Y+33, r1	; 0x21
     d80:	1a a2       	std	Y+34, r1	; 0x22
     d82:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	08 95       	ret

00000d8e <__subsf3>:
     d8e:	50 58       	subi	r21, 0x80	; 128

00000d90 <__addsf3>:
     d90:	bb 27       	eor	r27, r27
     d92:	aa 27       	eor	r26, r26
     d94:	0e d0       	rcall	.+28     	; 0xdb2 <__addsf3x>
     d96:	dc c0       	rjmp	.+440    	; 0xf50 <__fp_round>
     d98:	cd d0       	rcall	.+410    	; 0xf34 <__fp_pscA>
     d9a:	30 f0       	brcs	.+12     	; 0xda8 <__addsf3+0x18>
     d9c:	d2 d0       	rcall	.+420    	; 0xf42 <__fp_pscB>
     d9e:	20 f0       	brcs	.+8      	; 0xda8 <__addsf3+0x18>
     da0:	31 f4       	brne	.+12     	; 0xdae <__addsf3+0x1e>
     da2:	9f 3f       	cpi	r25, 0xFF	; 255
     da4:	11 f4       	brne	.+4      	; 0xdaa <__addsf3+0x1a>
     da6:	1e f4       	brtc	.+6      	; 0xdae <__addsf3+0x1e>
     da8:	c2 c0       	rjmp	.+388    	; 0xf2e <__fp_nan>
     daa:	0e f4       	brtc	.+2      	; 0xdae <__addsf3+0x1e>
     dac:	e0 95       	com	r30
     dae:	e7 fb       	bst	r30, 7
     db0:	b8 c0       	rjmp	.+368    	; 0xf22 <__fp_inf>

00000db2 <__addsf3x>:
     db2:	e9 2f       	mov	r30, r25
     db4:	de d0       	rcall	.+444    	; 0xf72 <__fp_split3>
     db6:	80 f3       	brcs	.-32     	; 0xd98 <__addsf3+0x8>
     db8:	ba 17       	cp	r27, r26
     dba:	62 07       	cpc	r22, r18
     dbc:	73 07       	cpc	r23, r19
     dbe:	84 07       	cpc	r24, r20
     dc0:	95 07       	cpc	r25, r21
     dc2:	18 f0       	brcs	.+6      	; 0xdca <__addsf3x+0x18>
     dc4:	71 f4       	brne	.+28     	; 0xde2 <__addsf3x+0x30>
     dc6:	9e f5       	brtc	.+102    	; 0xe2e <__addsf3x+0x7c>
     dc8:	f6 c0       	rjmp	.+492    	; 0xfb6 <__fp_zero>
     dca:	0e f4       	brtc	.+2      	; 0xdce <__addsf3x+0x1c>
     dcc:	e0 95       	com	r30
     dce:	0b 2e       	mov	r0, r27
     dd0:	ba 2f       	mov	r27, r26
     dd2:	a0 2d       	mov	r26, r0
     dd4:	0b 01       	movw	r0, r22
     dd6:	b9 01       	movw	r22, r18
     dd8:	90 01       	movw	r18, r0
     dda:	0c 01       	movw	r0, r24
     ddc:	ca 01       	movw	r24, r20
     dde:	a0 01       	movw	r20, r0
     de0:	11 24       	eor	r1, r1
     de2:	ff 27       	eor	r31, r31
     de4:	59 1b       	sub	r21, r25
     de6:	99 f0       	breq	.+38     	; 0xe0e <__addsf3x+0x5c>
     de8:	59 3f       	cpi	r21, 0xF9	; 249
     dea:	50 f4       	brcc	.+20     	; 0xe00 <__addsf3x+0x4e>
     dec:	50 3e       	cpi	r21, 0xE0	; 224
     dee:	68 f1       	brcs	.+90     	; 0xe4a <__addsf3x+0x98>
     df0:	1a 16       	cp	r1, r26
     df2:	f0 40       	sbci	r31, 0x00	; 0
     df4:	a2 2f       	mov	r26, r18
     df6:	23 2f       	mov	r18, r19
     df8:	34 2f       	mov	r19, r20
     dfa:	44 27       	eor	r20, r20
     dfc:	58 5f       	subi	r21, 0xF8	; 248
     dfe:	f3 cf       	rjmp	.-26     	; 0xde6 <__addsf3x+0x34>
     e00:	46 95       	lsr	r20
     e02:	37 95       	ror	r19
     e04:	27 95       	ror	r18
     e06:	a7 95       	ror	r26
     e08:	f0 40       	sbci	r31, 0x00	; 0
     e0a:	53 95       	inc	r21
     e0c:	c9 f7       	brne	.-14     	; 0xe00 <__addsf3x+0x4e>
     e0e:	7e f4       	brtc	.+30     	; 0xe2e <__addsf3x+0x7c>
     e10:	1f 16       	cp	r1, r31
     e12:	ba 0b       	sbc	r27, r26
     e14:	62 0b       	sbc	r22, r18
     e16:	73 0b       	sbc	r23, r19
     e18:	84 0b       	sbc	r24, r20
     e1a:	ba f0       	brmi	.+46     	; 0xe4a <__addsf3x+0x98>
     e1c:	91 50       	subi	r25, 0x01	; 1
     e1e:	a1 f0       	breq	.+40     	; 0xe48 <__addsf3x+0x96>
     e20:	ff 0f       	add	r31, r31
     e22:	bb 1f       	adc	r27, r27
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	c2 f7       	brpl	.-16     	; 0xe1c <__addsf3x+0x6a>
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <__addsf3x+0x98>
     e2e:	ba 0f       	add	r27, r26
     e30:	62 1f       	adc	r22, r18
     e32:	73 1f       	adc	r23, r19
     e34:	84 1f       	adc	r24, r20
     e36:	48 f4       	brcc	.+18     	; 0xe4a <__addsf3x+0x98>
     e38:	87 95       	ror	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b7 95       	ror	r27
     e40:	f7 95       	ror	r31
     e42:	9e 3f       	cpi	r25, 0xFE	; 254
     e44:	08 f0       	brcs	.+2      	; 0xe48 <__addsf3x+0x96>
     e46:	b3 cf       	rjmp	.-154    	; 0xdae <__addsf3+0x1e>
     e48:	93 95       	inc	r25
     e4a:	88 0f       	add	r24, r24
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <__addsf3x+0x9e>
     e4e:	99 27       	eor	r25, r25
     e50:	ee 0f       	add	r30, r30
     e52:	97 95       	ror	r25
     e54:	87 95       	ror	r24
     e56:	08 95       	ret

00000e58 <__cmpsf2>:
     e58:	40 d0       	rcall	.+128    	; 0xeda <__fp_cmp>
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <__cmpsf2+0x6>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	08 95       	ret

00000e60 <__floatunsisf>:
     e60:	e8 94       	clt
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <__floatsisf+0x12>

00000e64 <__floatsisf>:
     e64:	97 fb       	bst	r25, 7
     e66:	3e f4       	brtc	.+14     	; 0xe76 <__floatsisf+0x12>
     e68:	90 95       	com	r25
     e6a:	80 95       	com	r24
     e6c:	70 95       	com	r23
     e6e:	61 95       	neg	r22
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	99 23       	and	r25, r25
     e78:	a9 f0       	breq	.+42     	; 0xea4 <__floatsisf+0x40>
     e7a:	f9 2f       	mov	r31, r25
     e7c:	96 e9       	ldi	r25, 0x96	; 150
     e7e:	bb 27       	eor	r27, r27
     e80:	93 95       	inc	r25
     e82:	f6 95       	lsr	r31
     e84:	87 95       	ror	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	f1 11       	cpse	r31, r1
     e8e:	f8 cf       	rjmp	.-16     	; 0xe80 <__floatsisf+0x1c>
     e90:	fa f4       	brpl	.+62     	; 0xed0 <__floatsisf+0x6c>
     e92:	bb 0f       	add	r27, r27
     e94:	11 f4       	brne	.+4      	; 0xe9a <__floatsisf+0x36>
     e96:	60 ff       	sbrs	r22, 0
     e98:	1b c0       	rjmp	.+54     	; 0xed0 <__floatsisf+0x6c>
     e9a:	6f 5f       	subi	r22, 0xFF	; 255
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	16 c0       	rjmp	.+44     	; 0xed0 <__floatsisf+0x6c>
     ea4:	88 23       	and	r24, r24
     ea6:	11 f0       	breq	.+4      	; 0xeac <__floatsisf+0x48>
     ea8:	96 e9       	ldi	r25, 0x96	; 150
     eaa:	11 c0       	rjmp	.+34     	; 0xece <__floatsisf+0x6a>
     eac:	77 23       	and	r23, r23
     eae:	21 f0       	breq	.+8      	; 0xeb8 <__floatsisf+0x54>
     eb0:	9e e8       	ldi	r25, 0x8E	; 142
     eb2:	87 2f       	mov	r24, r23
     eb4:	76 2f       	mov	r23, r22
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <__floatsisf+0x5e>
     eb8:	66 23       	and	r22, r22
     eba:	71 f0       	breq	.+28     	; 0xed8 <__floatsisf+0x74>
     ebc:	96 e8       	ldi	r25, 0x86	; 134
     ebe:	86 2f       	mov	r24, r22
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	2a f0       	brmi	.+10     	; 0xed0 <__floatsisf+0x6c>
     ec6:	9a 95       	dec	r25
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	da f7       	brpl	.-10     	; 0xec6 <__floatsisf+0x62>
     ed0:	88 0f       	add	r24, r24
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	97 f9       	bld	r25, 7
     ed8:	08 95       	ret

00000eda <__fp_cmp>:
     eda:	99 0f       	add	r25, r25
     edc:	00 08       	sbc	r0, r0
     ede:	55 0f       	add	r21, r21
     ee0:	aa 0b       	sbc	r26, r26
     ee2:	e0 e8       	ldi	r30, 0x80	; 128
     ee4:	fe ef       	ldi	r31, 0xFE	; 254
     ee6:	16 16       	cp	r1, r22
     ee8:	17 06       	cpc	r1, r23
     eea:	e8 07       	cpc	r30, r24
     eec:	f9 07       	cpc	r31, r25
     eee:	c0 f0       	brcs	.+48     	; 0xf20 <__fp_cmp+0x46>
     ef0:	12 16       	cp	r1, r18
     ef2:	13 06       	cpc	r1, r19
     ef4:	e4 07       	cpc	r30, r20
     ef6:	f5 07       	cpc	r31, r21
     ef8:	98 f0       	brcs	.+38     	; 0xf20 <__fp_cmp+0x46>
     efa:	62 1b       	sub	r22, r18
     efc:	73 0b       	sbc	r23, r19
     efe:	84 0b       	sbc	r24, r20
     f00:	95 0b       	sbc	r25, r21
     f02:	39 f4       	brne	.+14     	; 0xf12 <__fp_cmp+0x38>
     f04:	0a 26       	eor	r0, r26
     f06:	61 f0       	breq	.+24     	; 0xf20 <__fp_cmp+0x46>
     f08:	23 2b       	or	r18, r19
     f0a:	24 2b       	or	r18, r20
     f0c:	25 2b       	or	r18, r21
     f0e:	21 f4       	brne	.+8      	; 0xf18 <__fp_cmp+0x3e>
     f10:	08 95       	ret
     f12:	0a 26       	eor	r0, r26
     f14:	09 f4       	brne	.+2      	; 0xf18 <__fp_cmp+0x3e>
     f16:	a1 40       	sbci	r26, 0x01	; 1
     f18:	a6 95       	lsr	r26
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	81 1d       	adc	r24, r1
     f1e:	81 1d       	adc	r24, r1
     f20:	08 95       	ret

00000f22 <__fp_inf>:
     f22:	97 f9       	bld	r25, 7
     f24:	9f 67       	ori	r25, 0x7F	; 127
     f26:	80 e8       	ldi	r24, 0x80	; 128
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	08 95       	ret

00000f2e <__fp_nan>:
     f2e:	9f ef       	ldi	r25, 0xFF	; 255
     f30:	80 ec       	ldi	r24, 0xC0	; 192
     f32:	08 95       	ret

00000f34 <__fp_pscA>:
     f34:	00 24       	eor	r0, r0
     f36:	0a 94       	dec	r0
     f38:	16 16       	cp	r1, r22
     f3a:	17 06       	cpc	r1, r23
     f3c:	18 06       	cpc	r1, r24
     f3e:	09 06       	cpc	r0, r25
     f40:	08 95       	ret

00000f42 <__fp_pscB>:
     f42:	00 24       	eor	r0, r0
     f44:	0a 94       	dec	r0
     f46:	12 16       	cp	r1, r18
     f48:	13 06       	cpc	r1, r19
     f4a:	14 06       	cpc	r1, r20
     f4c:	05 06       	cpc	r0, r21
     f4e:	08 95       	ret

00000f50 <__fp_round>:
     f50:	09 2e       	mov	r0, r25
     f52:	03 94       	inc	r0
     f54:	00 0c       	add	r0, r0
     f56:	11 f4       	brne	.+4      	; 0xf5c <__fp_round+0xc>
     f58:	88 23       	and	r24, r24
     f5a:	52 f0       	brmi	.+20     	; 0xf70 <__fp_round+0x20>
     f5c:	bb 0f       	add	r27, r27
     f5e:	40 f4       	brcc	.+16     	; 0xf70 <__fp_round+0x20>
     f60:	bf 2b       	or	r27, r31
     f62:	11 f4       	brne	.+4      	; 0xf68 <__fp_round+0x18>
     f64:	60 ff       	sbrs	r22, 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__fp_round+0x20>
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	08 95       	ret

00000f72 <__fp_split3>:
     f72:	57 fd       	sbrc	r21, 7
     f74:	90 58       	subi	r25, 0x80	; 128
     f76:	44 0f       	add	r20, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	59 f0       	breq	.+22     	; 0xf92 <__fp_splitA+0x10>
     f7c:	5f 3f       	cpi	r21, 0xFF	; 255
     f7e:	71 f0       	breq	.+28     	; 0xf9c <__fp_splitA+0x1a>
     f80:	47 95       	ror	r20

00000f82 <__fp_splitA>:
     f82:	88 0f       	add	r24, r24
     f84:	97 fb       	bst	r25, 7
     f86:	99 1f       	adc	r25, r25
     f88:	61 f0       	breq	.+24     	; 0xfa2 <__fp_splitA+0x20>
     f8a:	9f 3f       	cpi	r25, 0xFF	; 255
     f8c:	79 f0       	breq	.+30     	; 0xfac <__fp_splitA+0x2a>
     f8e:	87 95       	ror	r24
     f90:	08 95       	ret
     f92:	12 16       	cp	r1, r18
     f94:	13 06       	cpc	r1, r19
     f96:	14 06       	cpc	r1, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	f2 cf       	rjmp	.-28     	; 0xf80 <__fp_split3+0xe>
     f9c:	46 95       	lsr	r20
     f9e:	f1 df       	rcall	.-30     	; 0xf82 <__fp_splitA>
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <__fp_splitA+0x30>
     fa2:	16 16       	cp	r1, r22
     fa4:	17 06       	cpc	r1, r23
     fa6:	18 06       	cpc	r1, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	f1 cf       	rjmp	.-30     	; 0xf8e <__fp_splitA+0xc>
     fac:	86 95       	lsr	r24
     fae:	71 05       	cpc	r23, r1
     fb0:	61 05       	cpc	r22, r1
     fb2:	08 94       	sec
     fb4:	08 95       	ret

00000fb6 <__fp_zero>:
     fb6:	e8 94       	clt

00000fb8 <__fp_szero>:
     fb8:	bb 27       	eor	r27, r27
     fba:	66 27       	eor	r22, r22
     fbc:	77 27       	eor	r23, r23
     fbe:	cb 01       	movw	r24, r22
     fc0:	97 f9       	bld	r25, 7
     fc2:	08 95       	ret

00000fc4 <__gesf2>:
     fc4:	8a df       	rcall	.-236    	; 0xeda <__fp_cmp>
     fc6:	08 f4       	brcc	.+2      	; 0xfca <__gesf2+0x6>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	08 95       	ret

00000fcc <__mulsf3>:
     fcc:	0b d0       	rcall	.+22     	; 0xfe4 <__mulsf3x>
     fce:	c0 cf       	rjmp	.-128    	; 0xf50 <__fp_round>
     fd0:	b1 df       	rcall	.-158    	; 0xf34 <__fp_pscA>
     fd2:	28 f0       	brcs	.+10     	; 0xfde <__mulsf3+0x12>
     fd4:	b6 df       	rcall	.-148    	; 0xf42 <__fp_pscB>
     fd6:	18 f0       	brcs	.+6      	; 0xfde <__mulsf3+0x12>
     fd8:	95 23       	and	r25, r21
     fda:	09 f0       	breq	.+2      	; 0xfde <__mulsf3+0x12>
     fdc:	a2 cf       	rjmp	.-188    	; 0xf22 <__fp_inf>
     fde:	a7 cf       	rjmp	.-178    	; 0xf2e <__fp_nan>
     fe0:	11 24       	eor	r1, r1
     fe2:	ea cf       	rjmp	.-44     	; 0xfb8 <__fp_szero>

00000fe4 <__mulsf3x>:
     fe4:	c6 df       	rcall	.-116    	; 0xf72 <__fp_split3>
     fe6:	a0 f3       	brcs	.-24     	; 0xfd0 <__mulsf3+0x4>

00000fe8 <__mulsf3_pse>:
     fe8:	95 9f       	mul	r25, r21
     fea:	d1 f3       	breq	.-12     	; 0xfe0 <__mulsf3+0x14>
     fec:	95 0f       	add	r25, r21
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	55 1f       	adc	r21, r21
     ff2:	62 9f       	mul	r22, r18
     ff4:	f0 01       	movw	r30, r0
     ff6:	72 9f       	mul	r23, r18
     ff8:	bb 27       	eor	r27, r27
     ffa:	f0 0d       	add	r31, r0
     ffc:	b1 1d       	adc	r27, r1
     ffe:	63 9f       	mul	r22, r19
    1000:	aa 27       	eor	r26, r26
    1002:	f0 0d       	add	r31, r0
    1004:	b1 1d       	adc	r27, r1
    1006:	aa 1f       	adc	r26, r26
    1008:	64 9f       	mul	r22, r20
    100a:	66 27       	eor	r22, r22
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	66 1f       	adc	r22, r22
    1012:	82 9f       	mul	r24, r18
    1014:	22 27       	eor	r18, r18
    1016:	b0 0d       	add	r27, r0
    1018:	a1 1d       	adc	r26, r1
    101a:	62 1f       	adc	r22, r18
    101c:	73 9f       	mul	r23, r19
    101e:	b0 0d       	add	r27, r0
    1020:	a1 1d       	adc	r26, r1
    1022:	62 1f       	adc	r22, r18
    1024:	83 9f       	mul	r24, r19
    1026:	a0 0d       	add	r26, r0
    1028:	61 1d       	adc	r22, r1
    102a:	22 1f       	adc	r18, r18
    102c:	74 9f       	mul	r23, r20
    102e:	33 27       	eor	r19, r19
    1030:	a0 0d       	add	r26, r0
    1032:	61 1d       	adc	r22, r1
    1034:	23 1f       	adc	r18, r19
    1036:	84 9f       	mul	r24, r20
    1038:	60 0d       	add	r22, r0
    103a:	21 1d       	adc	r18, r1
    103c:	82 2f       	mov	r24, r18
    103e:	76 2f       	mov	r23, r22
    1040:	6a 2f       	mov	r22, r26
    1042:	11 24       	eor	r1, r1
    1044:	9f 57       	subi	r25, 0x7F	; 127
    1046:	50 40       	sbci	r21, 0x00	; 0
    1048:	8a f0       	brmi	.+34     	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
    104a:	e1 f0       	breq	.+56     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    104c:	88 23       	and	r24, r24
    104e:	4a f0       	brmi	.+18     	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	bb 1f       	adc	r27, r27
    1056:	66 1f       	adc	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	50 40       	sbci	r21, 0x00	; 0
    1060:	a9 f7       	brne	.-22     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
    1062:	9e 3f       	cpi	r25, 0xFE	; 254
    1064:	51 05       	cpc	r21, r1
    1066:	70 f0       	brcs	.+28     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1068:	5c cf       	rjmp	.-328    	; 0xf22 <__fp_inf>
    106a:	a6 cf       	rjmp	.-180    	; 0xfb8 <__fp_szero>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	ec f3       	brlt	.-6      	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1070:	98 3e       	cpi	r25, 0xE8	; 232
    1072:	dc f3       	brlt	.-10     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1074:	86 95       	lsr	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	b7 95       	ror	r27
    107c:	f7 95       	ror	r31
    107e:	e7 95       	ror	r30
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	c1 f7       	brne	.-16     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    1084:	fe 2b       	or	r31, r30
    1086:	88 0f       	add	r24, r24
    1088:	91 1d       	adc	r25, r1
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <__unordsf2>:
    1092:	23 df       	rcall	.-442    	; 0xeda <__fp_cmp>
    1094:	88 0b       	sbc	r24, r24
    1096:	99 0b       	sbc	r25, r25
    1098:	08 95       	ret

0000109a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    109a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    109c:	91 8d       	ldd	r25, Z+25	; 0x19
    109e:	22 8d       	ldd	r18, Z+26	; 0x1a
    10a0:	89 2f       	mov	r24, r25
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	80 5c       	subi	r24, 0xC0	; 192
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	82 1b       	sub	r24, r18
    10aa:	91 09       	sbc	r25, r1
}
    10ac:	8f 73       	andi	r24, 0x3F	; 63
    10ae:	99 27       	eor	r25, r25
    10b0:	08 95       	ret

000010b2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    10b2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    10b4:	91 8d       	ldd	r25, Z+25	; 0x19
    10b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    10b8:	98 17       	cp	r25, r24
    10ba:	31 f0       	breq	.+12     	; 0x10c8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    10bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    10be:	e8 0f       	add	r30, r24
    10c0:	f1 1d       	adc	r31, r1
    10c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    10cc:	08 95       	ret

000010ce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    10ce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    10d0:	91 8d       	ldd	r25, Z+25	; 0x19
    10d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    10d4:	98 17       	cp	r25, r24
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    10d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    10da:	df 01       	movw	r26, r30
    10dc:	a8 0f       	add	r26, r24
    10de:	b1 1d       	adc	r27, r1
    10e0:	5d 96       	adiw	r26, 0x1d	; 29
    10e2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    10e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    10e6:	9f 5f       	subi	r25, 0xFF	; 255
    10e8:	9f 73       	andi	r25, 0x3F	; 63
    10ea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    10f4:	08 95       	ret

000010f6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    10f6:	fc 01       	movw	r30, r24
    10f8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    10fa:	44 8d       	ldd	r20, Z+28	; 0x1c
    10fc:	25 2f       	mov	r18, r21
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	84 2f       	mov	r24, r20
    1102:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1104:	82 1b       	sub	r24, r18
    1106:	93 0b       	sbc	r25, r19
    1108:	54 17       	cp	r21, r20
    110a:	10 f0       	brcs	.+4      	; 0x1110 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    110c:	cf 96       	adiw	r24, 0x3f	; 63
    110e:	08 95       	ret
  return tail - head - 1;
    1110:	01 97       	sbiw	r24, 0x01	; 1
}
    1112:	08 95       	ret

00001114 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1114:	87 e1       	ldi	r24, 0x17	; 23
    1116:	9a e0       	ldi	r25, 0x0A	; 10
    1118:	89 2b       	or	r24, r25
    111a:	39 f0       	breq	.+14     	; 0x112a <_Z14serialEventRunv+0x16>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	89 2b       	or	r24, r25
    1122:	19 f0       	breq	.+6      	; 0x112a <_Z14serialEventRunv+0x16>
    1124:	84 d1       	rcall	.+776    	; 0x142e <_Z17Serial0_availablev>
    1126:	81 11       	cpse	r24, r1
    1128:	25 c0       	rjmp	.+74     	; 0x1174 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	89 2b       	or	r24, r25
    1130:	41 f0       	breq	.+16     	; 0x1142 <_Z14serialEventRunv+0x2e>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	89 2b       	or	r24, r25
    1138:	21 f0       	breq	.+8      	; 0x1142 <_Z14serialEventRunv+0x2e>
    113a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    113e:	81 11       	cpse	r24, r1
    1140:	1c c0       	rjmp	.+56     	; 0x117a <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	89 2b       	or	r24, r25
    1148:	41 f0       	breq	.+16     	; 0x115a <_Z14serialEventRunv+0x46>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	89 2b       	or	r24, r25
    1150:	21 f0       	breq	.+8      	; 0x115a <_Z14serialEventRunv+0x46>
    1152:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1156:	81 11       	cpse	r24, r1
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	89 2b       	or	r24, r25
    1160:	a1 f0       	breq	.+40     	; 0x118a <_Z14serialEventRunv+0x76>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	89 2b       	or	r24, r25
    1168:	81 f0       	breq	.+32     	; 0x118a <_Z14serialEventRunv+0x76>
    116a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    116e:	81 11       	cpse	r24, r1
    1170:	0a c0       	rjmp	.+20     	; 0x1186 <_Z14serialEventRunv+0x72>
    1172:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1174:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1178:	d8 cf       	rjmp	.-80     	; 0x112a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    117a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    117e:	e1 cf       	rjmp	.-62     	; 0x1142 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1180:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1184:	ea cf       	rjmp	.-44     	; 0x115a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    118a:	08 95       	ret

0000118c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    118c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    118e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1190:	df 01       	movw	r26, r30
    1192:	a8 0f       	add	r26, r24
    1194:	b1 1d       	adc	r27, r1
    1196:	a3 5a       	subi	r26, 0xA3	; 163
    1198:	bf 4f       	sbci	r27, 0xFF	; 255
    119a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    119c:	84 8d       	ldd	r24, Z+28	; 0x1c
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	8f 73       	andi	r24, 0x3F	; 63
    11a4:	99 27       	eor	r25, r25
    11a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    11a8:	a6 89       	ldd	r26, Z+22	; 0x16
    11aa:	b7 89       	ldd	r27, Z+23	; 0x17
    11ac:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    11ae:	a0 89       	ldd	r26, Z+16	; 0x10
    11b0:	b1 89       	ldd	r27, Z+17	; 0x11
    11b2:	8c 91       	ld	r24, X
    11b4:	83 70       	andi	r24, 0x03	; 3
    11b6:	80 64       	ori	r24, 0x40	; 64
    11b8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    11ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    11bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    11be:	98 13       	cpse	r25, r24
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    11c2:	02 88       	ldd	r0, Z+18	; 0x12
    11c4:	f3 89       	ldd	r31, Z+19	; 0x13
    11c6:	e0 2d       	mov	r30, r0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 7d       	andi	r24, 0xDF	; 223
    11cc:	80 83       	st	Z, r24
    11ce:	08 95       	ret

000011d0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
  _written = true;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    11e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11e6:	98 13       	cpse	r25, r24
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <_ZN14HardwareSerial5writeEh+0x24>
    11ea:	e8 89       	ldd	r30, Y+16	; 0x10
    11ec:	f9 89       	ldd	r31, Y+17	; 0x11
    11ee:	80 81       	ld	r24, Z
    11f0:	85 fd       	sbrc	r24, 5
    11f2:	25 c0       	rjmp	.+74     	; 0x123e <_ZN14HardwareSerial5writeEh+0x6e>
    11f4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    11f6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	0f 5f       	subi	r16, 0xFF	; 255
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	0f 73       	andi	r16, 0x3F	; 63
    1200:	11 27       	eor	r17, r17
    1202:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1204:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1206:	e8 12       	cpse	r14, r24
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	07 fc       	sbrc	r0, 7
    120e:	fa cf       	rjmp	.-12     	; 0x1204 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1210:	e8 89       	ldd	r30, Y+16	; 0x10
    1212:	f9 89       	ldd	r31, Y+17	; 0x11
    1214:	80 81       	ld	r24, Z
    1216:	85 ff       	sbrs	r24, 5
    1218:	f5 cf       	rjmp	.-22     	; 0x1204 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    121a:	ce 01       	movw	r24, r28
    121c:	b7 df       	rcall	.-146    	; 0x118c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    121e:	f2 cf       	rjmp	.-28     	; 0x1204 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1222:	fe 01       	movw	r30, r28
    1224:	e8 0f       	add	r30, r24
    1226:	f1 1d       	adc	r31, r1
    1228:	e3 5a       	subi	r30, 0xA3	; 163
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    122e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1230:	f8 94       	cli
    _tx_buffer_head = i;
    1232:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1234:	ea 89       	ldd	r30, Y+18	; 0x12
    1236:	fb 89       	ldd	r31, Y+19	; 0x13
    1238:	80 81       	ld	r24, Z
    123a:	80 62       	ori	r24, 0x20	; 32
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    123e:	9f b7       	in	r25, 0x3f	; 63
    1240:	f8 94       	cli
      *_udr = c;
    1242:	ee 89       	ldd	r30, Y+22	; 0x16
    1244:	ff 89       	ldd	r31, Y+23	; 0x17
    1246:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1248:	e8 89       	ldd	r30, Y+16	; 0x10
    124a:	f9 89       	ldd	r31, Y+17	; 0x11
    124c:	80 81       	ld	r24, Z
    124e:	83 70       	andi	r24, 0x03	; 3
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1254:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	08 95       	ret

00001268 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    126e:	88 8d       	ldd	r24, Y+24	; 0x18
    1270:	88 23       	and	r24, r24
    1272:	c1 f0       	breq	.+48     	; 0x12a4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1274:	ea 89       	ldd	r30, Y+18	; 0x12
    1276:	fb 89       	ldd	r31, Y+19	; 0x13
    1278:	80 81       	ld	r24, Z
    127a:	85 fd       	sbrc	r24, 5
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <_ZN14HardwareSerial5flushEv+0x20>
    127e:	a8 89       	ldd	r26, Y+16	; 0x10
    1280:	b9 89       	ldd	r27, Y+17	; 0x11
    1282:	8c 91       	ld	r24, X
    1284:	86 fd       	sbrc	r24, 6
    1286:	0e c0       	rjmp	.+28     	; 0x12a4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	07 fc       	sbrc	r0, 7
    128c:	f5 cf       	rjmp	.-22     	; 0x1278 <_ZN14HardwareSerial5flushEv+0x10>
    128e:	80 81       	ld	r24, Z
    1290:	85 ff       	sbrs	r24, 5
    1292:	f2 cf       	rjmp	.-28     	; 0x1278 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1294:	a8 89       	ldd	r26, Y+16	; 0x10
    1296:	b9 89       	ldd	r27, Y+17	; 0x11
    1298:	8c 91       	ld	r24, X
    129a:	85 ff       	sbrs	r24, 5
    129c:	ed cf       	rjmp	.-38     	; 0x1278 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    129e:	ce 01       	movw	r24, r28
    12a0:	75 df       	rcall	.-278    	; 0x118c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    12a2:	e8 cf       	rjmp	.-48     	; 0x1274 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	ec 01       	movw	r28, r24
    12ba:	6a 01       	movw	r12, r20
    12bc:	7b 01       	movw	r14, r22
    12be:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    12c0:	e8 89       	ldd	r30, Y+16	; 0x10
    12c2:	f9 89       	ldd	r31, Y+17	; 0x11
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12c8:	41 15       	cp	r20, r1
    12ca:	51 4e       	sbci	r21, 0xE1	; 225
    12cc:	61 05       	cpc	r22, r1
    12ce:	71 05       	cpc	r23, r1
    12d0:	a9 f0       	breq	.+42     	; 0x12fc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	79 e0       	ldi	r23, 0x09	; 9
    12d6:	8d e3       	ldi	r24, 0x3D	; 61
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a7 01       	movw	r20, r14
    12dc:	96 01       	movw	r18, r12
    12de:	0d d5       	rcall	.+2586   	; 0x1cfa <__udivmodsi4>
    12e0:	da 01       	movw	r26, r20
    12e2:	c9 01       	movw	r24, r18
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	a1 09       	sbc	r26, r1
    12e8:	b1 09       	sbc	r27, r1
    12ea:	b6 95       	lsr	r27
    12ec:	a7 95       	ror	r26
    12ee:	97 95       	ror	r25
    12f0:	87 95       	ror	r24
    12f2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12f4:	21 15       	cp	r18, r1
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	38 07       	cpc	r19, r24
    12fa:	a0 f0       	brcs	.+40     	; 0x1324 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    12fc:	e8 89       	ldd	r30, Y+16	; 0x10
    12fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1300:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1302:	60 e8       	ldi	r22, 0x80	; 128
    1304:	74 e8       	ldi	r23, 0x84	; 132
    1306:	8e e1       	ldi	r24, 0x1E	; 30
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a7 01       	movw	r20, r14
    130c:	96 01       	movw	r18, r12
    130e:	f5 d4       	rcall	.+2538   	; 0x1cfa <__udivmodsi4>
    1310:	da 01       	movw	r26, r20
    1312:	c9 01       	movw	r24, r18
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	a1 09       	sbc	r26, r1
    1318:	b1 09       	sbc	r27, r1
    131a:	b6 95       	lsr	r27
    131c:	a7 95       	ror	r26
    131e:	97 95       	ror	r25
    1320:	87 95       	ror	r24
    1322:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1324:	ec 85       	ldd	r30, Y+12	; 0x0c
    1326:	fd 85       	ldd	r31, Y+13	; 0x0d
    1328:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    132a:	ee 85       	ldd	r30, Y+14	; 0x0e
    132c:	ff 85       	ldd	r31, Y+15	; 0x0f
    132e:	20 83       	st	Z, r18

  _written = false;
    1330:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1332:	ec 89       	ldd	r30, Y+20	; 0x14
    1334:	fd 89       	ldd	r31, Y+21	; 0x15
    1336:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1338:	ea 89       	ldd	r30, Y+18	; 0x12
    133a:	fb 89       	ldd	r31, Y+19	; 0x13
    133c:	80 81       	ld	r24, Z
    133e:	80 61       	ori	r24, 0x10	; 16
    1340:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1342:	ea 89       	ldd	r30, Y+18	; 0x12
    1344:	fb 89       	ldd	r31, Y+19	; 0x13
    1346:	80 81       	ld	r24, Z
    1348:	88 60       	ori	r24, 0x08	; 8
    134a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    134c:	ea 89       	ldd	r30, Y+18	; 0x12
    134e:	fb 89       	ldd	r31, Y+19	; 0x13
    1350:	80 81       	ld	r24, Z
    1352:	80 68       	ori	r24, 0x80	; 128
    1354:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1356:	ea 89       	ldd	r30, Y+18	; 0x12
    1358:	fb 89       	ldd	r31, Y+19	; 0x13
    135a:	80 81       	ld	r24, Z
    135c:	8f 7d       	andi	r24, 0xDF	; 223
    135e:	80 83       	st	Z, r24
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	08 95       	ret

00001370 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	0b b6       	in	r0, 0x3b	; 59
    137c:	0f 92       	push	r0
    137e:	2f 93       	push	r18
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1388:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <Serial+0x10>
    138c:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <Serial+0x11>
    1390:	80 81       	ld	r24, Z
    1392:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <Serial+0x16>
    1396:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <Serial+0x17>
    139a:	82 fd       	sbrc	r24, 2
    139c:	12 c0       	rjmp	.+36     	; 0x13c2 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    139e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    13a0:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <Serial+0x19>
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    13a8:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <Serial+0x1a>
    13ac:	82 17       	cp	r24, r18
    13ae:	51 f0       	breq	.+20     	; 0x13c4 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    13b0:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <Serial+0x19>
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	e4 56       	subi	r30, 0x64	; 100
    13b8:	fd 4f       	sbci	r31, 0xFD	; 253
    13ba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    13bc:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <Serial+0x19>
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    13c2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    13c4:	ff 91       	pop	r31
    13c6:	ef 91       	pop	r30
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0b be       	out	0x3b, r0	; 59
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	0b b6       	in	r0, 0x3b	; 59
    13e8:	0f 92       	push	r0
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1402:	8c e9       	ldi	r24, 0x9C	; 156
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	c2 de       	rcall	.-636    	; 0x118c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0b be       	out	0x3b, r0	; 59
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0
    142a:	1f 90       	pop	r1
    142c:	18 95       	reti

0000142e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    142e:	8c e9       	ldi	r24, 0x9C	; 156
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	33 de       	rcall	.-922    	; 0x109a <_ZN14HardwareSerial9availableEv>
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	89 2b       	or	r24, r25
    1438:	09 f4       	brne	.+2      	; 0x143c <_Z17Serial0_availablev+0xe>
    143a:	20 e0       	ldi	r18, 0x00	; 0
}
    143c:	82 2f       	mov	r24, r18
    143e:	08 95       	ret

00001440 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1440:	ec e9       	ldi	r30, 0x9C	; 156
    1442:	f2 e0       	ldi	r31, 0x02	; 2
    1444:	13 82       	std	Z+3, r1	; 0x03
    1446:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1448:	88 ee       	ldi	r24, 0xE8	; 232
    144a:	93 e0       	ldi	r25, 0x03	; 3
    144c:	a0 e0       	ldi	r26, 0x00	; 0
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	84 83       	std	Z+4, r24	; 0x04
    1452:	95 83       	std	Z+5, r25	; 0x05
    1454:	a6 83       	std	Z+6, r26	; 0x06
    1456:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1458:	85 e5       	ldi	r24, 0x55	; 85
    145a:	92 e0       	ldi	r25, 0x02	; 2
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
    1460:	85 ec       	ldi	r24, 0xC5	; 197
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	95 87       	std	Z+13, r25	; 0x0d
    1466:	84 87       	std	Z+12, r24	; 0x0c
    1468:	84 ec       	ldi	r24, 0xC4	; 196
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	97 87       	std	Z+15, r25	; 0x0f
    146e:	86 87       	std	Z+14, r24	; 0x0e
    1470:	80 ec       	ldi	r24, 0xC0	; 192
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	91 8b       	std	Z+17, r25	; 0x11
    1476:	80 8b       	std	Z+16, r24	; 0x10
    1478:	81 ec       	ldi	r24, 0xC1	; 193
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	93 8b       	std	Z+19, r25	; 0x13
    147e:	82 8b       	std	Z+18, r24	; 0x12
    1480:	82 ec       	ldi	r24, 0xC2	; 194
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	95 8b       	std	Z+21, r25	; 0x15
    1486:	84 8b       	std	Z+20, r24	; 0x14
    1488:	86 ec       	ldi	r24, 0xC6	; 198
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	97 8b       	std	Z+23, r25	; 0x17
    148e:	86 8b       	std	Z+22, r24	; 0x16
    1490:	11 8e       	std	Z+25, r1	; 0x19
    1492:	12 8e       	std	Z+26, r1	; 0x1a
    1494:	13 8e       	std	Z+27, r1	; 0x1b
    1496:	14 8e       	std	Z+28, r1	; 0x1c
    1498:	08 95       	ret

0000149a <initVariant>:
    149a:	08 95       	ret

0000149c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    149c:	78 d2       	rcall	.+1264   	; 0x198e <init>

	initVariant();
    149e:	fd df       	rcall	.-6      	; 0x149a <initVariant>
    14a0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    14a4:	ca e8       	ldi	r28, 0x8A	; 138
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    14a6:	d8 e0       	ldi	r29, 0x08	; 8
    14a8:	0e 94 c0 01 	call	0x380	; 0x380 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    14ac:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    14ae:	e1 f3       	breq	.-8      	; 0x14a8 <main+0xc>
    14b0:	31 de       	rcall	.-926    	; 0x1114 <_Z14serialEventRunv>
    14b2:	fa cf       	rjmp	.-12     	; 0x14a8 <main+0xc>

000014b4 <_ZdlPv>:
    14b4:	00 c5       	rjmp	.+2560   	; 0x1eb6 <free>

000014b6 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	6c 01       	movw	r12, r24
    14c8:	7a 01       	movw	r14, r20
    14ca:	8b 01       	movw	r16, r22
    14cc:	c0 e0       	ldi	r28, 0x00	; 0
    14ce:	d0 e0       	ldi	r29, 0x00	; 0
    14d0:	ce 15       	cp	r28, r14
    14d2:	df 05       	cpc	r29, r15
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <_ZN5Print5writeEPKhj+0x40>
    14d6:	d8 01       	movw	r26, r16
    14d8:	6d 91       	ld	r22, X+
    14da:	8d 01       	movw	r16, r26
    14dc:	d6 01       	movw	r26, r12
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	01 90       	ld	r0, Z+
    14e4:	f0 81       	ld	r31, Z
    14e6:	e0 2d       	mov	r30, r0
    14e8:	c6 01       	movw	r24, r12
    14ea:	19 95       	eicall
    14ec:	89 2b       	or	r24, r25
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <_ZN5Print5writeEPKhj+0x3e>
    14f0:	21 96       	adiw	r28, 0x01	; 1
    14f2:	ee cf       	rjmp	.-36     	; 0x14d0 <_ZN5Print5writeEPKhj+0x1a>
    14f4:	7e 01       	movw	r14, r28
    14f6:	c7 01       	movw	r24, r14
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	08 95       	ret

0000150a <_ZN5Print5writeEPKc>:
    150a:	61 15       	cp	r22, r1
    150c:	71 05       	cpc	r23, r1
    150e:	79 f0       	breq	.+30     	; 0x152e <_ZN5Print5writeEPKc+0x24>
    1510:	fb 01       	movw	r30, r22
    1512:	01 90       	ld	r0, Z+
    1514:	00 20       	and	r0, r0
    1516:	e9 f7       	brne	.-6      	; 0x1512 <_ZN5Print5writeEPKc+0x8>
    1518:	31 97       	sbiw	r30, 0x01	; 1
    151a:	af 01       	movw	r20, r30
    151c:	46 1b       	sub	r20, r22
    151e:	57 0b       	sbc	r21, r23
    1520:	dc 01       	movw	r26, r24
    1522:	ed 91       	ld	r30, X+
    1524:	fc 91       	ld	r31, X
    1526:	02 80       	ldd	r0, Z+2	; 0x02
    1528:	f3 81       	ldd	r31, Z+3	; 0x03
    152a:	e0 2d       	mov	r30, r0
    152c:	19 94       	eijmp
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	08 95       	ret

00001534 <_ZN5Print5printEPK19__FlashStringHelper>:
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	8c 01       	movw	r16, r24
    1542:	7b 01       	movw	r14, r22
    1544:	c0 e0       	ldi	r28, 0x00	; 0
    1546:	d0 e0       	ldi	r29, 0x00	; 0
    1548:	f7 01       	movw	r30, r14
    154a:	ec 0f       	add	r30, r28
    154c:	fd 1f       	adc	r31, r29
    154e:	64 91       	lpm	r22, Z
    1550:	66 23       	and	r22, r22
    1552:	61 f0       	breq	.+24     	; 0x156c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1554:	d8 01       	movw	r26, r16
    1556:	ed 91       	ld	r30, X+
    1558:	fc 91       	ld	r31, X
    155a:	01 90       	ld	r0, Z+
    155c:	f0 81       	ld	r31, Z
    155e:	e0 2d       	mov	r30, r0
    1560:	c8 01       	movw	r24, r16
    1562:	19 95       	eicall
    1564:	89 2b       	or	r24, r25
    1566:	11 f0       	breq	.+4      	; 0x156c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1568:	21 96       	adiw	r28, 0x01	; 1
    156a:	ee cf       	rjmp	.-36     	; 0x1548 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    156c:	ce 01       	movw	r24, r28
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	08 95       	ret

0000157c <_ZN5Print5printEc>:
    157c:	dc 01       	movw	r26, r24
    157e:	ed 91       	ld	r30, X+
    1580:	fc 91       	ld	r31, X
    1582:	01 90       	ld	r0, Z+
    1584:	f0 81       	ld	r31, Z
    1586:	e0 2d       	mov	r30, r0
    1588:	19 94       	eijmp

0000158a <_ZN5Print7printlnEv>:
    158a:	63 e6       	ldi	r22, 0x63	; 99
    158c:	72 e0       	ldi	r23, 0x02	; 2
    158e:	bd cf       	rjmp	.-134    	; 0x150a <_ZN5Print5writeEPKc>

00001590 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
    159a:	cc df       	rcall	.-104    	; 0x1534 <_ZN5Print5printEPK19__FlashStringHelper>
    159c:	8c 01       	movw	r16, r24
    159e:	ce 01       	movw	r24, r28
    15a0:	f4 df       	rcall	.-24     	; 0x158a <_ZN5Print7printlnEv>
    15a2:	80 0f       	add	r24, r16
    15a4:	91 1f       	adc	r25, r17
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	08 95       	ret

000015b0 <_ZN5Print7printlnEPKc>:
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	ec 01       	movw	r28, r24
    15ba:	a7 df       	rcall	.-178    	; 0x150a <_ZN5Print5writeEPKc>
    15bc:	8c 01       	movw	r16, r24
    15be:	ce 01       	movw	r24, r28
    15c0:	e4 df       	rcall	.-56     	; 0x158a <_ZN5Print7printlnEv>
    15c2:	80 0f       	add	r24, r16
    15c4:	91 1f       	adc	r25, r17
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	08 95       	ret

000015d0 <_ZN5Print11printNumberEmh>:
    15d0:	8f 92       	push	r8
    15d2:	9f 92       	push	r9
    15d4:	af 92       	push	r10
    15d6:	bf 92       	push	r11
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	a1 97       	sbiw	r28, 0x21	; 33
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	7c 01       	movw	r14, r24
    15f6:	fa 01       	movw	r30, r20
    15f8:	cb 01       	movw	r24, r22
    15fa:	19 a2       	std	Y+33, r1	; 0x21
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <_ZN5Print11printNumberEmh+0x32>
    1600:	2a e0       	ldi	r18, 0x0A	; 10
    1602:	8e 01       	movw	r16, r28
    1604:	0f 5d       	subi	r16, 0xDF	; 223
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	82 2e       	mov	r8, r18
    160a:	91 2c       	mov	r9, r1
    160c:	a1 2c       	mov	r10, r1
    160e:	b1 2c       	mov	r11, r1
    1610:	bf 01       	movw	r22, r30
    1612:	a5 01       	movw	r20, r10
    1614:	94 01       	movw	r18, r8
    1616:	71 d3       	rcall	.+1762   	; 0x1cfa <__udivmodsi4>
    1618:	f9 01       	movw	r30, r18
    161a:	ca 01       	movw	r24, r20
    161c:	01 50       	subi	r16, 0x01	; 1
    161e:	11 09       	sbc	r17, r1
    1620:	6a 30       	cpi	r22, 0x0A	; 10
    1622:	10 f4       	brcc	.+4      	; 0x1628 <_ZN5Print11printNumberEmh+0x58>
    1624:	60 5d       	subi	r22, 0xD0	; 208
    1626:	01 c0       	rjmp	.+2      	; 0x162a <_ZN5Print11printNumberEmh+0x5a>
    1628:	69 5c       	subi	r22, 0xC9	; 201
    162a:	d8 01       	movw	r26, r16
    162c:	6c 93       	st	X, r22
    162e:	23 2b       	or	r18, r19
    1630:	24 2b       	or	r18, r20
    1632:	25 2b       	or	r18, r21
    1634:	69 f7       	brne	.-38     	; 0x1610 <_ZN5Print11printNumberEmh+0x40>
    1636:	b8 01       	movw	r22, r16
    1638:	c7 01       	movw	r24, r14
    163a:	67 df       	rcall	.-306    	; 0x150a <_ZN5Print5writeEPKc>
    163c:	a1 96       	adiw	r28, 0x21	; 33
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	9f 90       	pop	r9
    165a:	8f 90       	pop	r8
    165c:	08 95       	ret

0000165e <_ZN5Print5printEmi>:
    165e:	21 15       	cp	r18, r1
    1660:	31 05       	cpc	r19, r1
    1662:	41 f4       	brne	.+16     	; 0x1674 <_ZN5Print5printEmi+0x16>
    1664:	dc 01       	movw	r26, r24
    1666:	ed 91       	ld	r30, X+
    1668:	fc 91       	ld	r31, X
    166a:	01 90       	ld	r0, Z+
    166c:	f0 81       	ld	r31, Z
    166e:	e0 2d       	mov	r30, r0
    1670:	64 2f       	mov	r22, r20
    1672:	19 94       	eijmp
    1674:	ad cf       	rjmp	.-166    	; 0x15d0 <_ZN5Print11printNumberEmh>

00001676 <_ZN5Print5printEji>:
    1676:	9a 01       	movw	r18, r20
    1678:	ab 01       	movw	r20, r22
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	ef cf       	rjmp	.-34     	; 0x165e <_ZN5Print5printEmi>

00001680 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1680:	7f 92       	push	r7
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	8c 01       	movw	r16, r24
    169c:	6a 01       	movw	r12, r20
    169e:	7b 01       	movw	r14, r22
    16a0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    16a2:	9a 01       	movw	r18, r20
    16a4:	ab 01       	movw	r20, r22
    16a6:	c7 01       	movw	r24, r14
    16a8:	b6 01       	movw	r22, r12
    16aa:	f3 dc       	rcall	.-1562   	; 0x1092 <__unordsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	19 f0       	breq	.+6      	; 0x16b6 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16b0:	66 e6       	ldi	r22, 0x66	; 102
    16b2:	72 e0       	ldi	r23, 0x02	; 2
    16b4:	24 c0       	rjmp	.+72     	; 0x16fe <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    16b6:	46 01       	movw	r8, r12
    16b8:	57 01       	movw	r10, r14
    16ba:	e8 94       	clt
    16bc:	b7 f8       	bld	r11, 7
    16be:	2f ef       	ldi	r18, 0xFF	; 255
    16c0:	3f ef       	ldi	r19, 0xFF	; 255
    16c2:	4f e7       	ldi	r20, 0x7F	; 127
    16c4:	5f e7       	ldi	r21, 0x7F	; 127
    16c6:	c5 01       	movw	r24, r10
    16c8:	b4 01       	movw	r22, r8
    16ca:	e3 dc       	rcall	.-1594   	; 0x1092 <__unordsf2>
    16cc:	81 11       	cpse	r24, r1
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <_ZN5Print10printFloatEdh+0x68>
    16d0:	2f ef       	ldi	r18, 0xFF	; 255
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	5f e7       	ldi	r21, 0x7F	; 127
    16d8:	c5 01       	movw	r24, r10
    16da:	b4 01       	movw	r22, r8
    16dc:	bd db       	rcall	.-2182   	; 0xe58 <__cmpsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	1c f4       	brge	.+6      	; 0x16e8 <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16e2:	6a e6       	ldi	r22, 0x6A	; 106
    16e4:	72 e0       	ldi	r23, 0x02	; 2
    16e6:	0b c0       	rjmp	.+22     	; 0x16fe <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    16e8:	2f ef       	ldi	r18, 0xFF	; 255
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	5f e4       	ldi	r21, 0x4F	; 79
    16f0:	c7 01       	movw	r24, r14
    16f2:	b6 01       	movw	r22, r12
    16f4:	67 dc       	rcall	.-1842   	; 0xfc4 <__gesf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	8c f4       	brge	.+34     	; 0x171c <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16fa:	6e e6       	ldi	r22, 0x6E	; 110
    16fc:	72 e0       	ldi	r23, 0x02	; 2
    16fe:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1718:	7f 90       	pop	r7
    171a:	f7 ce       	rjmp	.-530    	; 0x150a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	4f e7       	ldi	r20, 0x7F	; 127
    1722:	5f ec       	ldi	r21, 0xCF	; 207
    1724:	c7 01       	movw	r24, r14
    1726:	b6 01       	movw	r22, r12
    1728:	97 db       	rcall	.-2258   	; 0xe58 <__cmpsf2>
    172a:	87 fd       	sbrc	r24, 7
    172c:	e6 cf       	rjmp	.-52     	; 0x16fa <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	a9 01       	movw	r20, r18
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	8f db       	rcall	.-2274   	; 0xe58 <__cmpsf2>
    173a:	87 ff       	sbrs	r24, 7
    173c:	09 c0       	rjmp	.+18     	; 0x1750 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    173e:	6d e2       	ldi	r22, 0x2D	; 45
    1740:	c8 01       	movw	r24, r16
    1742:	1c df       	rcall	.-456    	; 0x157c <_ZN5Print5printEc>
    1744:	ec 01       	movw	r28, r24
    1746:	f7 fa       	bst	r15, 7
     number = -number;
    1748:	f0 94       	com	r15
    174a:	f7 f8       	bld	r15, 7
    174c:	f0 94       	com	r15
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <_ZN5Print10printFloatEdh+0xd4>
    1750:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1752:	d0 e0       	ldi	r29, 0x00	; 0
    1754:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1756:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    175e:	7b 14       	cp	r7, r11
    1760:	39 f0       	breq	.+14     	; 0x1770 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    176a:	33 d2       	rcall	.+1126   	; 0x1bd2 <__divsf3>
    176c:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    176e:	f7 cf       	rjmp	.-18     	; 0x175e <_ZN5Print10printFloatEdh+0xde>
    1770:	a7 01       	movw	r20, r14
    1772:	96 01       	movw	r18, r12
    1774:	0d db       	rcall	.-2534   	; 0xd90 <__addsf3>
    1776:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1778:	7c 01       	movw	r14, r24
    177a:	93 d2       	rcall	.+1318   	; 0x1ca2 <__fixunssfsi>
    177c:	4b 01       	movw	r8, r22
    177e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	ab 01       	movw	r20, r22
    1784:	bc 01       	movw	r22, r24
    1786:	c8 01       	movw	r24, r16
    1788:	23 df       	rcall	.-442    	; 0x15d0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    178a:	c8 0f       	add	r28, r24
    178c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    178e:	77 20       	and	r7, r7
    1790:	79 f1       	breq	.+94     	; 0x17f0 <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1792:	c5 01       	movw	r24, r10
    1794:	b4 01       	movw	r22, r8
    1796:	64 db       	rcall	.-2360   	; 0xe60 <__floatunsisf>
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	c7 01       	movw	r24, r14
    179e:	b6 01       	movw	r22, r12
    17a0:	f6 da       	rcall	.-2580   	; 0xd8e <__subsf3>
    17a2:	6b 01       	movw	r12, r22
    17a4:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    17a6:	6e e2       	ldi	r22, 0x2E	; 46
    17a8:	c8 01       	movw	r24, r16
    17aa:	e8 de       	rcall	.-560    	; 0x157c <_ZN5Print5printEc>
    17ac:	c8 0f       	add	r28, r24
    17ae:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	07 dc       	rcall	.-2034   	; 0xfcc <__mulsf3>
    17be:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    17c0:	5c 01       	movw	r10, r24
    17c2:	6f d2       	rcall	.+1246   	; 0x1ca2 <__fixunssfsi>
    17c4:	6b 01       	movw	r12, r22
    n += print(toPrint);
    17c6:	7c 01       	movw	r14, r24
    17c8:	4a e0       	ldi	r20, 0x0A	; 10
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	c8 01       	movw	r24, r16
    17ce:	53 df       	rcall	.-346    	; 0x1676 <_ZN5Print5printEji>
    17d0:	c8 0f       	add	r28, r24
    17d2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    17d4:	b6 01       	movw	r22, r12
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	42 db       	rcall	.-2428   	; 0xe60 <__floatunsisf>
    17dc:	9b 01       	movw	r18, r22
    17de:	ac 01       	movw	r20, r24
    17e0:	c5 01       	movw	r24, r10
    17e2:	b4 01       	movw	r22, r8
    17e4:	d4 da       	rcall	.-2648   	; 0xd8e <__subsf3>
    17e6:	6b 01       	movw	r12, r22
    17e8:	7c 01       	movw	r14, r24
    17ea:	7a 94       	dec	r7
    17ec:	71 10       	cpse	r7, r1
    17ee:	e0 cf       	rjmp	.-64     	; 0x17b0 <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    17f0:	ce 01       	movw	r24, r28
    17f2:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    17f4:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	9f 90       	pop	r9
    1808:	8f 90       	pop	r8
    180a:	7f 90       	pop	r7
    180c:	08 95       	ret

0000180e <_ZN5Print5printEdi>:
    180e:	38 cf       	rjmp	.-400    	; 0x1680 <_ZN5Print10printFloatEdh>

00001810 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	8f 93       	push	r24
    1820:	9f 93       	push	r25
    1822:	af 93       	push	r26
    1824:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1826:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <timer0_millis>
    182a:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <timer0_millis+0x1>
    182e:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <timer0_millis+0x2>
    1832:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1836:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    183a:	23 e0       	ldi	r18, 0x03	; 3
    183c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    183e:	2d 37       	cpi	r18, 0x7D	; 125
    1840:	20 f4       	brcc	.+8      	; 0x184a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	a1 1d       	adc	r26, r1
    1846:	b1 1d       	adc	r27, r1
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    184a:	26 e8       	ldi	r18, 0x86	; 134
    184c:	23 0f       	add	r18, r19
		m += 1;
    184e:	02 96       	adiw	r24, 0x02	; 2
    1850:	a1 1d       	adc	r26, r1
    1852:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1854:	20 93 39 03 	sts	0x0339, r18	; 0x800339 <timer0_fract>
	timer0_millis = m;
    1858:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timer0_millis>
    185c:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timer0_millis+0x1>
    1860:	a0 93 3c 03 	sts	0x033C, r26	; 0x80033c <timer0_millis+0x2>
    1864:	b0 93 3d 03 	sts	0x033D, r27	; 0x80033d <timer0_millis+0x3>
	timer0_overflow_count++;
    1868:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <timer0_overflow_count>
    186c:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <timer0_overflow_count+0x1>
    1870:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <timer0_overflow_count+0x2>
    1874:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <timer0_overflow_count+0x3>
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	a1 1d       	adc	r26, r1
    187c:	b1 1d       	adc	r27, r1
    187e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <timer0_overflow_count>
    1882:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <timer0_overflow_count+0x1>
    1886:	a0 93 40 03 	sts	0x0340, r26	; 0x800340 <timer0_overflow_count+0x2>
    188a:	b0 93 41 03 	sts	0x0341, r27	; 0x800341 <timer0_overflow_count+0x3>
}
    188e:	bf 91       	pop	r27
    1890:	af 91       	pop	r26
    1892:	9f 91       	pop	r25
    1894:	8f 91       	pop	r24
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    18a4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    18a6:	f8 94       	cli
	m = timer0_millis;
    18a8:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <timer0_millis>
    18ac:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <timer0_millis+0x1>
    18b0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <timer0_millis+0x2>
    18b4:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <timer0_millis+0x3>
	SREG = oldSREG;
    18b8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    18ba:	08 95       	ret

000018bc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    18bc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    18be:	f8 94       	cli
	m = timer0_overflow_count;
    18c0:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <timer0_overflow_count>
    18c4:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <timer0_overflow_count+0x1>
    18c8:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <timer0_overflow_count+0x2>
    18cc:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    18d0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    18d2:	a8 9b       	sbis	0x15, 0	; 21
    18d4:	05 c0       	rjmp	.+10     	; 0x18e0 <micros+0x24>
    18d6:	2f 3f       	cpi	r18, 0xFF	; 255
    18d8:	19 f0       	breq	.+6      	; 0x18e0 <micros+0x24>
		m++;
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	a1 1d       	adc	r26, r1
    18de:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    18e0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    18e2:	ba 2f       	mov	r27, r26
    18e4:	a9 2f       	mov	r26, r25
    18e6:	98 2f       	mov	r25, r24
    18e8:	88 27       	eor	r24, r24
    18ea:	82 0f       	add	r24, r18
    18ec:	91 1d       	adc	r25, r1
    18ee:	a1 1d       	adc	r26, r1
    18f0:	b1 1d       	adc	r27, r1
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	42 e0       	ldi	r20, 0x02	; 2
    18f8:	66 0f       	add	r22, r22
    18fa:	77 1f       	adc	r23, r23
    18fc:	88 1f       	adc	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	4a 95       	dec	r20
    1902:	d1 f7       	brne	.-12     	; 0x18f8 <micros+0x3c>
}
    1904:	08 95       	ret

00001906 <delay>:

void delay(unsigned long ms)
{
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	6b 01       	movw	r12, r22
    1918:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    191a:	d0 df       	rcall	.-96     	; 0x18bc <micros>
    191c:	4b 01       	movw	r8, r22
    191e:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1920:	c1 14       	cp	r12, r1
    1922:	d1 04       	cpc	r13, r1
    1924:	e1 04       	cpc	r14, r1
    1926:	f1 04       	cpc	r15, r1
		yield();
    1928:	f1 f0       	breq	.+60     	; 0x1966 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    192a:	52 d1       	rcall	.+676    	; 0x1bd0 <yield>
    192c:	c7 df       	rcall	.-114    	; 0x18bc <micros>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	88 19       	sub	r24, r8
    1934:	99 09       	sbc	r25, r9
    1936:	aa 09       	sbc	r26, r10
    1938:	bb 09       	sbc	r27, r11
    193a:	88 3e       	cpi	r24, 0xE8	; 232
    193c:	93 40       	sbci	r25, 0x03	; 3
    193e:	a1 05       	cpc	r26, r1
    1940:	b1 05       	cpc	r27, r1
    1942:	70 f3       	brcs	.-36     	; 0x1920 <delay+0x1a>
			ms--;
    1944:	21 e0       	ldi	r18, 0x01	; 1
    1946:	c2 1a       	sub	r12, r18
    1948:	d1 08       	sbc	r13, r1
    194a:	e1 08       	sbc	r14, r1
    194c:	f1 08       	sbc	r15, r1
			start += 1000;
    194e:	88 ee       	ldi	r24, 0xE8	; 232
    1950:	88 0e       	add	r8, r24
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	98 1e       	adc	r9, r24
    1956:	a1 1c       	adc	r10, r1
    1958:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    195a:	c1 14       	cp	r12, r1
    195c:	d1 04       	cpc	r13, r1
    195e:	e1 04       	cpc	r14, r1
    1960:	f1 04       	cpc	r15, r1
    1962:	21 f7       	brne	.-56     	; 0x192c <delay+0x26>
    1964:	dd cf       	rjmp	.-70     	; 0x1920 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	9f 90       	pop	r9
    1974:	8f 90       	pop	r8
    1976:	08 95       	ret

00001978 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	38 f0       	brcs	.+14     	; 0x198c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1986:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <delayMicroseconds+0x10>
    198c:	08 95       	ret

0000198e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    198e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1990:	84 b5       	in	r24, 0x24	; 36
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1996:	84 b5       	in	r24, 0x24	; 36
    1998:	81 60       	ori	r24, 0x01	; 1
    199a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    199c:	85 b5       	in	r24, 0x25	; 37
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    19a2:	85 b5       	in	r24, 0x25	; 37
    19a4:	81 60       	ori	r24, 0x01	; 1
    19a6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    19a8:	ee e6       	ldi	r30, 0x6E	; 110
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	81 60       	ori	r24, 0x01	; 1
    19b0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    19b2:	e1 e8       	ldi	r30, 0x81	; 129
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    19b8:	80 81       	ld	r24, Z
    19ba:	82 60       	ori	r24, 0x02	; 2
    19bc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    19be:	80 81       	ld	r24, Z
    19c0:	81 60       	ori	r24, 0x01	; 1
    19c2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    19c4:	e0 e8       	ldi	r30, 0x80	; 128
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	81 60       	ori	r24, 0x01	; 1
    19cc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    19ce:	e1 eb       	ldi	r30, 0xB1	; 177
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	84 60       	ori	r24, 0x04	; 4
    19d6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    19d8:	e0 eb       	ldi	r30, 0xB0	; 176
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	81 60       	ori	r24, 0x01	; 1
    19e0:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    19e2:	e1 e9       	ldi	r30, 0x91	; 145
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	82 60       	ori	r24, 0x02	; 2
    19ea:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    19ec:	80 81       	ld	r24, Z
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    19f2:	e0 e9       	ldi	r30, 0x90	; 144
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	81 60       	ori	r24, 0x01	; 1
    19fa:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    19fc:	e1 ea       	ldi	r30, 0xA1	; 161
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1a06:	80 81       	ld	r24, Z
    1a08:	81 60       	ori	r24, 0x01	; 1
    1a0a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1a0c:	e0 ea       	ldi	r30, 0xA0	; 160
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	81 60       	ori	r24, 0x01	; 1
    1a14:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1a16:	e1 e2       	ldi	r30, 0x21	; 33
    1a18:	f1 e0       	ldi	r31, 0x01	; 1
    1a1a:	80 81       	ld	r24, Z
    1a1c:	82 60       	ori	r24, 0x02	; 2
    1a1e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1a20:	80 81       	ld	r24, Z
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1a26:	e0 e2       	ldi	r30, 0x20	; 32
    1a28:	f1 e0       	ldi	r31, 0x01	; 1
    1a2a:	80 81       	ld	r24, Z
    1a2c:	81 60       	ori	r24, 0x01	; 1
    1a2e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1a30:	ea e7       	ldi	r30, 0x7A	; 122
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	84 60       	ori	r24, 0x04	; 4
    1a38:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 60       	ori	r24, 0x02	; 2
    1a3e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1a40:	80 81       	ld	r24, Z
    1a42:	81 60       	ori	r24, 0x01	; 1
    1a44:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1a46:	80 81       	ld	r24, Z
    1a48:	80 68       	ori	r24, 0x80	; 128
    1a4a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a4c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    1a50:	08 95       	ret

00001a52 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	fc 01       	movw	r30, r24
    1a56:	31 97       	sbiw	r30, 0x01	; 1
    1a58:	e2 31       	cpi	r30, 0x12	; 18
    1a5a:	f1 05       	cpc	r31, r1
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <turnOffPWM+0xe>
    1a5e:	4d c0       	rjmp	.+154    	; 0x1afa <turnOffPWM+0xa8>
    1a60:	88 27       	eor	r24, r24
    1a62:	ee 58       	subi	r30, 0x8E	; 142
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	86 c1       	rjmp	.+780    	; 0x1d76 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1a6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1a6e:	8f 77       	andi	r24, 0x7F	; 127
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1a76:	8f 7d       	andi	r24, 0xDF	; 223
    1a78:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1a7c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1a7e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1a82:	87 7f       	andi	r24, 0xF7	; 247
    1a84:	f9 cf       	rjmp	.-14     	; 0x1a78 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1a86:	84 b5       	in	r24, 0x24	; 36
    1a88:	8f 77       	andi	r24, 0x7F	; 127
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1a8c:	84 b5       	in	r24, 0x24	; 36
    1a8e:	8f 7d       	andi	r24, 0xDF	; 223
    1a90:	84 bd       	out	0x24, r24	; 36
    1a92:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1a94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1a98:	8f 77       	andi	r24, 0x7F	; 127
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1a9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1aa0:	8f 7d       	andi	r24, 0xDF	; 223
    1aa2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1aa6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1aa8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1aac:	8f 77       	andi	r24, 0x7F	; 127
    1aae:	07 c0       	rjmp	.+14     	; 0x1abe <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1ab0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1ab4:	8f 7d       	andi	r24, 0xDF	; 223
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1ab8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1abc:	87 7f       	andi	r24, 0xF7	; 247
    1abe:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1ac2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1ac4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1ac8:	8f 77       	andi	r24, 0x7F	; 127
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1acc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1ad4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1ad8:	87 7f       	andi	r24, 0xF7	; 247
    1ada:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1ade:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1ae0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1ae8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1aec:	8f 7d       	andi	r24, 0xDF	; 223
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1af0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1af4:	87 7f       	andi	r24, 0xF7	; 247
    1af6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1afa:	08 95       	ret

00001afc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	fc 01       	movw	r30, r24
    1b04:	e5 59       	subi	r30, 0x95	; 149
    1b06:	fe 4f       	sbci	r31, 0xFE	; 254
    1b08:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	ef 54       	subi	r30, 0x4F	; 79
    1b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b10:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b12:	88 23       	and	r24, r24
    1b14:	61 f1       	breq	.+88     	; 0x1b6e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e5 5d       	subi	r30, 0xD5	; 213
    1b20:	fd 4f       	sbci	r31, 0xFD	; 253
    1b22:	c5 91       	lpm	r28, Z+
    1b24:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b26:	fc 01       	movw	r30, r24
    1b28:	ef 5e       	subi	r30, 0xEF	; 239
    1b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2c:	a5 91       	lpm	r26, Z+
    1b2e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1b30:	61 11       	cpse	r22, r1
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1b34:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b36:	f8 94       	cli
		*reg &= ~bit;
    1b38:	88 81       	ld	r24, Y
    1b3a:	20 95       	com	r18
    1b3c:	82 23       	and	r24, r18
    1b3e:	88 83       	st	Y, r24
		*out &= ~bit;
    1b40:	ec 91       	ld	r30, X
    1b42:	2e 23       	and	r18, r30
    1b44:	0b c0       	rjmp	.+22     	; 0x1b5c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1b46:	62 30       	cpi	r22, 0x02	; 2
    1b48:	61 f4       	brne	.+24     	; 0x1b62 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1b4a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b4c:	f8 94       	cli
		*reg &= ~bit;
    1b4e:	88 81       	ld	r24, Y
    1b50:	32 2f       	mov	r19, r18
    1b52:	30 95       	com	r19
    1b54:	83 23       	and	r24, r19
    1b56:	88 83       	st	Y, r24
		*out |= bit;
    1b58:	ec 91       	ld	r30, X
    1b5a:	2e 2b       	or	r18, r30
    1b5c:	2c 93       	st	X, r18
		SREG = oldSREG;
    1b5e:	9f bf       	out	0x3f, r25	; 63
    1b60:	06 c0       	rjmp	.+12     	; 0x1b6e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1b62:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1b64:	f8 94       	cli
		*reg |= bit;
    1b66:	e8 81       	ld	r30, Y
    1b68:	2e 2b       	or	r18, r30
    1b6a:	28 83       	st	Y, r18
		SREG = oldSREG;
    1b6c:	8f bf       	out	0x3f, r24	; 63
	}
}
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	f9 01       	movw	r30, r18
    1b80:	eb 5d       	subi	r30, 0xDB	; 219
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1b86:	f9 01       	movw	r30, r18
    1b88:	e5 59       	subi	r30, 0x95	; 149
    1b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1b8e:	f9 01       	movw	r30, r18
    1b90:	ef 54       	subi	r30, 0x4F	; 79
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b96:	cc 23       	and	r28, r28
    1b98:	b9 f0       	breq	.+46     	; 0x1bc8 <digitalWrite+0x54>
    1b9a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	59 df       	rcall	.-334    	; 0x1a52 <turnOffPWM>

	out = portOutputRegister(port);
    1ba0:	ec 2f       	mov	r30, r28
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	ef 5e       	subi	r30, 0xEF	; 239
    1baa:	fd 4f       	sbci	r31, 0xFD	; 253
    1bac:	a5 91       	lpm	r26, Z+
    1bae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1bb0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1bb2:	f8 94       	cli

	if (val == LOW) {
    1bb4:	11 11       	cpse	r17, r1
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <digitalWrite+0x4c>
		*out &= ~bit;
    1bb8:	8c 91       	ld	r24, X
    1bba:	d0 95       	com	r29
    1bbc:	d8 23       	and	r29, r24
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1bc0:	ec 91       	ld	r30, X
    1bc2:	de 2b       	or	r29, r30
    1bc4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1bc6:	9f bf       	out	0x3f, r25	; 63
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	08 95       	ret

00001bd0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1bd0:	08 95       	ret

00001bd2 <__divsf3>:
    1bd2:	0c d0       	rcall	.+24     	; 0x1bec <__divsf3x>
    1bd4:	bd c9       	rjmp	.-3206   	; 0xf50 <__fp_round>
    1bd6:	b5 d9       	rcall	.-3222   	; 0xf42 <__fp_pscB>
    1bd8:	40 f0       	brcs	.+16     	; 0x1bea <__divsf3+0x18>
    1bda:	ac d9       	rcall	.-3240   	; 0xf34 <__fp_pscA>
    1bdc:	30 f0       	brcs	.+12     	; 0x1bea <__divsf3+0x18>
    1bde:	21 f4       	brne	.+8      	; 0x1be8 <__divsf3+0x16>
    1be0:	5f 3f       	cpi	r21, 0xFF	; 255
    1be2:	19 f0       	breq	.+6      	; 0x1bea <__divsf3+0x18>
    1be4:	9e c9       	rjmp	.-3268   	; 0xf22 <__fp_inf>
    1be6:	51 11       	cpse	r21, r1
    1be8:	e7 c9       	rjmp	.-3122   	; 0xfb8 <__fp_szero>
    1bea:	a1 c9       	rjmp	.-3262   	; 0xf2e <__fp_nan>

00001bec <__divsf3x>:
    1bec:	c2 d9       	rcall	.-3196   	; 0xf72 <__fp_split3>
    1bee:	98 f3       	brcs	.-26     	; 0x1bd6 <__divsf3+0x4>

00001bf0 <__divsf3_pse>:
    1bf0:	99 23       	and	r25, r25
    1bf2:	c9 f3       	breq	.-14     	; 0x1be6 <__divsf3+0x14>
    1bf4:	55 23       	and	r21, r21
    1bf6:	b1 f3       	breq	.-20     	; 0x1be4 <__divsf3+0x12>
    1bf8:	95 1b       	sub	r25, r21
    1bfa:	55 0b       	sbc	r21, r21
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	aa 27       	eor	r26, r26
    1c00:	62 17       	cp	r22, r18
    1c02:	73 07       	cpc	r23, r19
    1c04:	84 07       	cpc	r24, r20
    1c06:	38 f0       	brcs	.+14     	; 0x1c16 <__divsf3_pse+0x26>
    1c08:	9f 5f       	subi	r25, 0xFF	; 255
    1c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0c:	22 0f       	add	r18, r18
    1c0e:	33 1f       	adc	r19, r19
    1c10:	44 1f       	adc	r20, r20
    1c12:	aa 1f       	adc	r26, r26
    1c14:	a9 f3       	breq	.-22     	; 0x1c00 <__divsf3_pse+0x10>
    1c16:	33 d0       	rcall	.+102    	; 0x1c7e <__divsf3_pse+0x8e>
    1c18:	0e 2e       	mov	r0, r30
    1c1a:	3a f0       	brmi	.+14     	; 0x1c2a <__divsf3_pse+0x3a>
    1c1c:	e0 e8       	ldi	r30, 0x80	; 128
    1c1e:	30 d0       	rcall	.+96     	; 0x1c80 <__divsf3_pse+0x90>
    1c20:	91 50       	subi	r25, 0x01	; 1
    1c22:	50 40       	sbci	r21, 0x00	; 0
    1c24:	e6 95       	lsr	r30
    1c26:	00 1c       	adc	r0, r0
    1c28:	ca f7       	brpl	.-14     	; 0x1c1c <__divsf3_pse+0x2c>
    1c2a:	29 d0       	rcall	.+82     	; 0x1c7e <__divsf3_pse+0x8e>
    1c2c:	fe 2f       	mov	r31, r30
    1c2e:	27 d0       	rcall	.+78     	; 0x1c7e <__divsf3_pse+0x8e>
    1c30:	66 0f       	add	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	bb 1f       	adc	r27, r27
    1c38:	26 17       	cp	r18, r22
    1c3a:	37 07       	cpc	r19, r23
    1c3c:	48 07       	cpc	r20, r24
    1c3e:	ab 07       	cpc	r26, r27
    1c40:	b0 e8       	ldi	r27, 0x80	; 128
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <__divsf3_pse+0x56>
    1c44:	bb 0b       	sbc	r27, r27
    1c46:	80 2d       	mov	r24, r0
    1c48:	bf 01       	movw	r22, r30
    1c4a:	ff 27       	eor	r31, r31
    1c4c:	93 58       	subi	r25, 0x83	; 131
    1c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c50:	2a f0       	brmi	.+10     	; 0x1c5c <__divsf3_pse+0x6c>
    1c52:	9e 3f       	cpi	r25, 0xFE	; 254
    1c54:	51 05       	cpc	r21, r1
    1c56:	68 f0       	brcs	.+26     	; 0x1c72 <__divsf3_pse+0x82>
    1c58:	64 c9       	rjmp	.-3384   	; 0xf22 <__fp_inf>
    1c5a:	ae c9       	rjmp	.-3236   	; 0xfb8 <__fp_szero>
    1c5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5e:	ec f3       	brlt	.-6      	; 0x1c5a <__divsf3_pse+0x6a>
    1c60:	98 3e       	cpi	r25, 0xE8	; 232
    1c62:	dc f3       	brlt	.-10     	; 0x1c5a <__divsf3_pse+0x6a>
    1c64:	86 95       	lsr	r24
    1c66:	77 95       	ror	r23
    1c68:	67 95       	ror	r22
    1c6a:	b7 95       	ror	r27
    1c6c:	f7 95       	ror	r31
    1c6e:	9f 5f       	subi	r25, 0xFF	; 255
    1c70:	c9 f7       	brne	.-14     	; 0x1c64 <__divsf3_pse+0x74>
    1c72:	88 0f       	add	r24, r24
    1c74:	91 1d       	adc	r25, r1
    1c76:	96 95       	lsr	r25
    1c78:	87 95       	ror	r24
    1c7a:	97 f9       	bld	r25, 7
    1c7c:	08 95       	ret
    1c7e:	e1 e0       	ldi	r30, 0x01	; 1
    1c80:	66 0f       	add	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	bb 1f       	adc	r27, r27
    1c88:	62 17       	cp	r22, r18
    1c8a:	73 07       	cpc	r23, r19
    1c8c:	84 07       	cpc	r24, r20
    1c8e:	ba 07       	cpc	r27, r26
    1c90:	20 f0       	brcs	.+8      	; 0x1c9a <__divsf3_pse+0xaa>
    1c92:	62 1b       	sub	r22, r18
    1c94:	73 0b       	sbc	r23, r19
    1c96:	84 0b       	sbc	r24, r20
    1c98:	ba 0b       	sbc	r27, r26
    1c9a:	ee 1f       	adc	r30, r30
    1c9c:	88 f7       	brcc	.-30     	; 0x1c80 <__divsf3_pse+0x90>
    1c9e:	e0 95       	com	r30
    1ca0:	08 95       	ret

00001ca2 <__fixunssfsi>:
    1ca2:	6f d9       	rcall	.-3362   	; 0xf82 <__fp_splitA>
    1ca4:	88 f0       	brcs	.+34     	; 0x1cc8 <__fixunssfsi+0x26>
    1ca6:	9f 57       	subi	r25, 0x7F	; 127
    1ca8:	90 f0       	brcs	.+36     	; 0x1cce <__fixunssfsi+0x2c>
    1caa:	b9 2f       	mov	r27, r25
    1cac:	99 27       	eor	r25, r25
    1cae:	b7 51       	subi	r27, 0x17	; 23
    1cb0:	a0 f0       	brcs	.+40     	; 0x1cda <__fixunssfsi+0x38>
    1cb2:	d1 f0       	breq	.+52     	; 0x1ce8 <__fixunssfsi+0x46>
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	1a f0       	brmi	.+6      	; 0x1cc4 <__fixunssfsi+0x22>
    1cbe:	ba 95       	dec	r27
    1cc0:	c9 f7       	brne	.-14     	; 0x1cb4 <__fixunssfsi+0x12>
    1cc2:	12 c0       	rjmp	.+36     	; 0x1ce8 <__fixunssfsi+0x46>
    1cc4:	b1 30       	cpi	r27, 0x01	; 1
    1cc6:	81 f0       	breq	.+32     	; 0x1ce8 <__fixunssfsi+0x46>
    1cc8:	76 d9       	rcall	.-3348   	; 0xfb6 <__fp_zero>
    1cca:	b1 e0       	ldi	r27, 0x01	; 1
    1ccc:	08 95       	ret
    1cce:	73 c9       	rjmp	.-3354   	; 0xfb6 <__fp_zero>
    1cd0:	67 2f       	mov	r22, r23
    1cd2:	78 2f       	mov	r23, r24
    1cd4:	88 27       	eor	r24, r24
    1cd6:	b8 5f       	subi	r27, 0xF8	; 248
    1cd8:	39 f0       	breq	.+14     	; 0x1ce8 <__fixunssfsi+0x46>
    1cda:	b9 3f       	cpi	r27, 0xF9	; 249
    1cdc:	cc f3       	brlt	.-14     	; 0x1cd0 <__fixunssfsi+0x2e>
    1cde:	86 95       	lsr	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	b3 95       	inc	r27
    1ce6:	d9 f7       	brne	.-10     	; 0x1cde <__fixunssfsi+0x3c>
    1ce8:	3e f4       	brtc	.+14     	; 0x1cf8 <__fixunssfsi+0x56>
    1cea:	90 95       	com	r25
    1cec:	80 95       	com	r24
    1cee:	70 95       	com	r23
    1cf0:	61 95       	neg	r22
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	08 95       	ret

00001cfa <__udivmodsi4>:
    1cfa:	a1 e2       	ldi	r26, 0x21	; 33
    1cfc:	1a 2e       	mov	r1, r26
    1cfe:	aa 1b       	sub	r26, r26
    1d00:	bb 1b       	sub	r27, r27
    1d02:	fd 01       	movw	r30, r26
    1d04:	0d c0       	rjmp	.+26     	; 0x1d20 <__udivmodsi4_ep>

00001d06 <__udivmodsi4_loop>:
    1d06:	aa 1f       	adc	r26, r26
    1d08:	bb 1f       	adc	r27, r27
    1d0a:	ee 1f       	adc	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	a2 17       	cp	r26, r18
    1d10:	b3 07       	cpc	r27, r19
    1d12:	e4 07       	cpc	r30, r20
    1d14:	f5 07       	cpc	r31, r21
    1d16:	20 f0       	brcs	.+8      	; 0x1d20 <__udivmodsi4_ep>
    1d18:	a2 1b       	sub	r26, r18
    1d1a:	b3 0b       	sbc	r27, r19
    1d1c:	e4 0b       	sbc	r30, r20
    1d1e:	f5 0b       	sbc	r31, r21

00001d20 <__udivmodsi4_ep>:
    1d20:	66 1f       	adc	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	88 1f       	adc	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	1a 94       	dec	r1
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <__udivmodsi4_loop>
    1d2c:	60 95       	com	r22
    1d2e:	70 95       	com	r23
    1d30:	80 95       	com	r24
    1d32:	90 95       	com	r25
    1d34:	9b 01       	movw	r18, r22
    1d36:	ac 01       	movw	r20, r24
    1d38:	bd 01       	movw	r22, r26
    1d3a:	cf 01       	movw	r24, r30
    1d3c:	08 95       	ret

00001d3e <__divmodsi4>:
    1d3e:	05 2e       	mov	r0, r21
    1d40:	97 fb       	bst	r25, 7
    1d42:	16 f4       	brtc	.+4      	; 0x1d48 <__divmodsi4+0xa>
    1d44:	00 94       	com	r0
    1d46:	0f d0       	rcall	.+30     	; 0x1d66 <__negsi2>
    1d48:	57 fd       	sbrc	r21, 7
    1d4a:	05 d0       	rcall	.+10     	; 0x1d56 <__divmodsi4_neg2>
    1d4c:	d6 df       	rcall	.-84     	; 0x1cfa <__udivmodsi4>
    1d4e:	07 fc       	sbrc	r0, 7
    1d50:	02 d0       	rcall	.+4      	; 0x1d56 <__divmodsi4_neg2>
    1d52:	46 f4       	brtc	.+16     	; 0x1d64 <__divmodsi4_exit>
    1d54:	08 c0       	rjmp	.+16     	; 0x1d66 <__negsi2>

00001d56 <__divmodsi4_neg2>:
    1d56:	50 95       	com	r21
    1d58:	40 95       	com	r20
    1d5a:	30 95       	com	r19
    1d5c:	21 95       	neg	r18
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	4f 4f       	sbci	r20, 0xFF	; 255
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255

00001d64 <__divmodsi4_exit>:
    1d64:	08 95       	ret

00001d66 <__negsi2>:
    1d66:	90 95       	com	r25
    1d68:	80 95       	com	r24
    1d6a:	70 95       	com	r23
    1d6c:	61 95       	neg	r22
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	8f 4f       	sbci	r24, 0xFF	; 255
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	08 95       	ret

00001d76 <__tablejump2__>:
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	8b bf       	out	0x3b, r24	; 59
    1d7e:	07 90       	elpm	r0, Z+
    1d80:	f6 91       	elpm	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	19 94       	eijmp

00001d86 <malloc>:
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	91 05       	cpc	r25, r1
    1d92:	10 f4       	brcc	.+4      	; 0x1d98 <malloc+0x12>
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__flp>
    1d9c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__flp+0x1>
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	30 97       	sbiw	r30, 0x00	; 0
    1daa:	19 f1       	breq	.+70     	; 0x1df2 <malloc+0x6c>
    1dac:	40 81       	ld	r20, Z
    1dae:	51 81       	ldd	r21, Z+1	; 0x01
    1db0:	02 81       	ldd	r16, Z+2	; 0x02
    1db2:	13 81       	ldd	r17, Z+3	; 0x03
    1db4:	48 17       	cp	r20, r24
    1db6:	59 07       	cpc	r21, r25
    1db8:	c8 f0       	brcs	.+50     	; 0x1dec <malloc+0x66>
    1dba:	84 17       	cp	r24, r20
    1dbc:	95 07       	cpc	r25, r21
    1dbe:	69 f4       	brne	.+26     	; 0x1dda <malloc+0x54>
    1dc0:	10 97       	sbiw	r26, 0x00	; 0
    1dc2:	31 f0       	breq	.+12     	; 0x1dd0 <malloc+0x4a>
    1dc4:	12 96       	adiw	r26, 0x02	; 2
    1dc6:	0c 93       	st	X, r16
    1dc8:	12 97       	sbiw	r26, 0x02	; 2
    1dca:	13 96       	adiw	r26, 0x03	; 3
    1dcc:	1c 93       	st	X, r17
    1dce:	27 c0       	rjmp	.+78     	; 0x1e1e <malloc+0x98>
    1dd0:	00 93 44 03 	sts	0x0344, r16	; 0x800344 <__flp>
    1dd4:	10 93 45 03 	sts	0x0345, r17	; 0x800345 <__flp+0x1>
    1dd8:	22 c0       	rjmp	.+68     	; 0x1e1e <malloc+0x98>
    1dda:	21 15       	cp	r18, r1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <malloc+0x60>
    1de0:	42 17       	cp	r20, r18
    1de2:	53 07       	cpc	r21, r19
    1de4:	18 f4       	brcc	.+6      	; 0x1dec <malloc+0x66>
    1de6:	9a 01       	movw	r18, r20
    1de8:	bd 01       	movw	r22, r26
    1dea:	ef 01       	movw	r28, r30
    1dec:	df 01       	movw	r26, r30
    1dee:	f8 01       	movw	r30, r16
    1df0:	db cf       	rjmp	.-74     	; 0x1da8 <malloc+0x22>
    1df2:	21 15       	cp	r18, r1
    1df4:	31 05       	cpc	r19, r1
    1df6:	f9 f0       	breq	.+62     	; 0x1e36 <malloc+0xb0>
    1df8:	28 1b       	sub	r18, r24
    1dfa:	39 0b       	sbc	r19, r25
    1dfc:	24 30       	cpi	r18, 0x04	; 4
    1dfe:	31 05       	cpc	r19, r1
    1e00:	80 f4       	brcc	.+32     	; 0x1e22 <malloc+0x9c>
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	61 15       	cp	r22, r1
    1e08:	71 05       	cpc	r23, r1
    1e0a:	21 f0       	breq	.+8      	; 0x1e14 <malloc+0x8e>
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	93 83       	std	Z+3, r25	; 0x03
    1e10:	82 83       	std	Z+2, r24	; 0x02
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <malloc+0x96>
    1e14:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <__flp+0x1>
    1e18:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <__flp>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	32 96       	adiw	r30, 0x02	; 2
    1e20:	44 c0       	rjmp	.+136    	; 0x1eaa <malloc+0x124>
    1e22:	fe 01       	movw	r30, r28
    1e24:	e2 0f       	add	r30, r18
    1e26:	f3 1f       	adc	r31, r19
    1e28:	81 93       	st	Z+, r24
    1e2a:	91 93       	st	Z+, r25
    1e2c:	22 50       	subi	r18, 0x02	; 2
    1e2e:	31 09       	sbc	r19, r1
    1e30:	39 83       	std	Y+1, r19	; 0x01
    1e32:	28 83       	st	Y, r18
    1e34:	3a c0       	rjmp	.+116    	; 0x1eaa <malloc+0x124>
    1e36:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <__brkval>
    1e3a:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <__brkval+0x1>
    1e3e:	23 2b       	or	r18, r19
    1e40:	41 f4       	brne	.+16     	; 0x1e52 <malloc+0xcc>
    1e42:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1e46:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1e4a:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <__brkval+0x1>
    1e4e:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <__brkval>
    1e52:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1e56:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1e5a:	21 15       	cp	r18, r1
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	41 f4       	brne	.+16     	; 0x1e70 <malloc+0xea>
    1e60:	2d b7       	in	r18, 0x3d	; 61
    1e62:	3e b7       	in	r19, 0x3e	; 62
    1e64:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1e68:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1e6c:	24 1b       	sub	r18, r20
    1e6e:	35 0b       	sbc	r19, r21
    1e70:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <__brkval>
    1e74:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <__brkval+0x1>
    1e78:	e2 17       	cp	r30, r18
    1e7a:	f3 07       	cpc	r31, r19
    1e7c:	a0 f4       	brcc	.+40     	; 0x1ea6 <malloc+0x120>
    1e7e:	2e 1b       	sub	r18, r30
    1e80:	3f 0b       	sbc	r19, r31
    1e82:	28 17       	cp	r18, r24
    1e84:	39 07       	cpc	r19, r25
    1e86:	78 f0       	brcs	.+30     	; 0x1ea6 <malloc+0x120>
    1e88:	ac 01       	movw	r20, r24
    1e8a:	4e 5f       	subi	r20, 0xFE	; 254
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8e:	24 17       	cp	r18, r20
    1e90:	35 07       	cpc	r19, r21
    1e92:	48 f0       	brcs	.+18     	; 0x1ea6 <malloc+0x120>
    1e94:	4e 0f       	add	r20, r30
    1e96:	5f 1f       	adc	r21, r31
    1e98:	50 93 43 03 	sts	0x0343, r21	; 0x800343 <__brkval+0x1>
    1e9c:	40 93 42 03 	sts	0x0342, r20	; 0x800342 <__brkval>
    1ea0:	81 93       	st	Z+, r24
    1ea2:	91 93       	st	Z+, r25
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <malloc+0x124>
    1ea6:	e0 e0       	ldi	r30, 0x00	; 0
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	cf 01       	movw	r24, r30
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <free>:
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <free+0xa>
    1ebe:	81 c0       	rjmp	.+258    	; 0x1fc2 <free+0x10c>
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	32 97       	sbiw	r30, 0x02	; 2
    1ec4:	13 82       	std	Z+3, r1	; 0x03
    1ec6:	12 82       	std	Z+2, r1	; 0x02
    1ec8:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <__flp>
    1ecc:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <__flp+0x1>
    1ed0:	10 97       	sbiw	r26, 0x00	; 0
    1ed2:	81 f4       	brne	.+32     	; 0x1ef4 <free+0x3e>
    1ed4:	20 81       	ld	r18, Z
    1ed6:	31 81       	ldd	r19, Z+1	; 0x01
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <__brkval>
    1ee0:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <__brkval+0x1>
    1ee4:	28 17       	cp	r18, r24
    1ee6:	39 07       	cpc	r19, r25
    1ee8:	51 f5       	brne	.+84     	; 0x1f3e <free+0x88>
    1eea:	f0 93 43 03 	sts	0x0343, r31	; 0x800343 <__brkval+0x1>
    1eee:	e0 93 42 03 	sts	0x0342, r30	; 0x800342 <__brkval>
    1ef2:	67 c0       	rjmp	.+206    	; 0x1fc2 <free+0x10c>
    1ef4:	ed 01       	movw	r28, r26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	ce 17       	cp	r28, r30
    1efc:	df 07       	cpc	r29, r31
    1efe:	40 f4       	brcc	.+16     	; 0x1f10 <free+0x5a>
    1f00:	4a 81       	ldd	r20, Y+2	; 0x02
    1f02:	5b 81       	ldd	r21, Y+3	; 0x03
    1f04:	9e 01       	movw	r18, r28
    1f06:	41 15       	cp	r20, r1
    1f08:	51 05       	cpc	r21, r1
    1f0a:	f1 f0       	breq	.+60     	; 0x1f48 <free+0x92>
    1f0c:	ea 01       	movw	r28, r20
    1f0e:	f5 cf       	rjmp	.-22     	; 0x1efa <free+0x44>
    1f10:	d3 83       	std	Z+3, r29	; 0x03
    1f12:	c2 83       	std	Z+2, r28	; 0x02
    1f14:	40 81       	ld	r20, Z
    1f16:	51 81       	ldd	r21, Z+1	; 0x01
    1f18:	84 0f       	add	r24, r20
    1f1a:	95 1f       	adc	r25, r21
    1f1c:	c8 17       	cp	r28, r24
    1f1e:	d9 07       	cpc	r29, r25
    1f20:	59 f4       	brne	.+22     	; 0x1f38 <free+0x82>
    1f22:	88 81       	ld	r24, Y
    1f24:	99 81       	ldd	r25, Y+1	; 0x01
    1f26:	84 0f       	add	r24, r20
    1f28:	95 1f       	adc	r25, r21
    1f2a:	02 96       	adiw	r24, 0x02	; 2
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	9b 81       	ldd	r25, Y+3	; 0x03
    1f34:	93 83       	std	Z+3, r25	; 0x03
    1f36:	82 83       	std	Z+2, r24	; 0x02
    1f38:	21 15       	cp	r18, r1
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	29 f4       	brne	.+10     	; 0x1f48 <free+0x92>
    1f3e:	f0 93 45 03 	sts	0x0345, r31	; 0x800345 <__flp+0x1>
    1f42:	e0 93 44 03 	sts	0x0344, r30	; 0x800344 <__flp>
    1f46:	3d c0       	rjmp	.+122    	; 0x1fc2 <free+0x10c>
    1f48:	e9 01       	movw	r28, r18
    1f4a:	fb 83       	std	Y+3, r31	; 0x03
    1f4c:	ea 83       	std	Y+2, r30	; 0x02
    1f4e:	49 91       	ld	r20, Y+
    1f50:	59 91       	ld	r21, Y+
    1f52:	c4 0f       	add	r28, r20
    1f54:	d5 1f       	adc	r29, r21
    1f56:	ec 17       	cp	r30, r28
    1f58:	fd 07       	cpc	r31, r29
    1f5a:	61 f4       	brne	.+24     	; 0x1f74 <free+0xbe>
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	84 0f       	add	r24, r20
    1f62:	95 1f       	adc	r25, r21
    1f64:	02 96       	adiw	r24, 0x02	; 2
    1f66:	e9 01       	movw	r28, r18
    1f68:	99 83       	std	Y+1, r25	; 0x01
    1f6a:	88 83       	st	Y, r24
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	9b 83       	std	Y+3, r25	; 0x03
    1f72:	8a 83       	std	Y+2, r24	; 0x02
    1f74:	e0 e0       	ldi	r30, 0x00	; 0
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	12 96       	adiw	r26, 0x02	; 2
    1f7a:	8d 91       	ld	r24, X+
    1f7c:	9c 91       	ld	r25, X
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <free+0xd4>
    1f84:	fd 01       	movw	r30, r26
    1f86:	dc 01       	movw	r26, r24
    1f88:	f7 cf       	rjmp	.-18     	; 0x1f78 <free+0xc2>
    1f8a:	8d 91       	ld	r24, X+
    1f8c:	9c 91       	ld	r25, X
    1f8e:	11 97       	sbiw	r26, 0x01	; 1
    1f90:	9d 01       	movw	r18, r26
    1f92:	2e 5f       	subi	r18, 0xFE	; 254
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <__brkval>
    1f9e:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <__brkval+0x1>
    1fa2:	28 17       	cp	r18, r24
    1fa4:	39 07       	cpc	r19, r25
    1fa6:	69 f4       	brne	.+26     	; 0x1fc2 <free+0x10c>
    1fa8:	30 97       	sbiw	r30, 0x00	; 0
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <free+0x100>
    1fac:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <__flp+0x1>
    1fb0:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <__flp>
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <free+0x104>
    1fb6:	13 82       	std	Z+3, r1	; 0x03
    1fb8:	12 82       	std	Z+2, r1	; 0x02
    1fba:	b0 93 43 03 	sts	0x0343, r27	; 0x800343 <__brkval+0x1>
    1fbe:	a0 93 42 03 	sts	0x0342, r26	; 0x800342 <__brkval>
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <strncpy>:
    1fc8:	fb 01       	movw	r30, r22
    1fca:	dc 01       	movw	r26, r24
    1fcc:	41 50       	subi	r20, 0x01	; 1
    1fce:	50 40       	sbci	r21, 0x00	; 0
    1fd0:	48 f0       	brcs	.+18     	; 0x1fe4 <strncpy+0x1c>
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	0d 92       	st	X+, r0
    1fd6:	00 20       	and	r0, r0
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <strncpy+0x4>
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <strncpy+0x16>
    1fdc:	1d 92       	st	X+, r1
    1fde:	41 50       	subi	r20, 0x01	; 1
    1fe0:	50 40       	sbci	r21, 0x00	; 0
    1fe2:	e0 f7       	brcc	.-8      	; 0x1fdc <strncpy+0x14>
    1fe4:	08 95       	ret

00001fe6 <_exit>:
    1fe6:	f8 94       	cli

00001fe8 <__stop_program>:
    1fe8:	ff cf       	rjmp	.-2      	; 0x1fe8 <__stop_program>
