
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800200  00006252  000062e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  008002e6  008002e6  000063cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000063cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c70  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018949  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004105  00000000  00000000  0001f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007726  00000000  00000000  00023afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003034  00000000  00000000  0002b220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058e0  00000000  00000000  0002e254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b5e2  00000000  00000000  00033b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bf0  00000000  00000000  0003f116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__vector_25>
      68:	0c 94 5f 29 	jmp	0x52be	; 0x52be <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4a 22 	jmp	0x4494	; 0x4494 <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a2 2b       	or	r26, r18
      e6:	a5 2b       	or	r26, r21
      e8:	94 2b       	or	r25, r20
      ea:	98 2b       	or	r25, r24
      ec:	9e 2b       	or	r25, r30
      ee:	dc 2b       	or	r29, r28
      f0:	a9 2b       	or	r26, r25
      f2:	ad 2b       	or	r26, r29
      f4:	b3 2b       	or	r27, r19
      f6:	b7 2b       	or	r27, r23
      f8:	bb 2b       	or	r27, r27
      fa:	c1 2b       	or	r28, r17
      fc:	c5 2b       	or	r28, r21
      fe:	c9 2b       	or	r28, r25
     100:	dc 2b       	or	r29, r28
     102:	cf 2b       	or	r28, r31
     104:	d3 2b       	or	r29, r19
     106:	d7 2b       	or	r29, r23

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	2a 07       	cpc	r18, r26
     22a:	01 26       	eor	r0, r17
     22c:	91 29       	or	r25, r1

0000022e <__ctors_end>:
     22e:	36 07       	cpc	r19, r22

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	12 e0       	ldi	r17, 0x02	; 2
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e2 e5       	ldi	r30, 0x52	; 82
     248:	f2 e6       	ldi	r31, 0x62	; 98
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	a6 3e       	cpi	r26, 0xE6	; 230
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	a6 ee       	ldi	r26, 0xE6	; 230
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a0 34       	cpi	r26, 0x40	; 64
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 bf 29 	call	0x537e	; 0x537e <main>
     28e:	0c 94 18 31 	jmp	0x6230	; 0x6230 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <_ZNK6StringeqERKS_+0x6>
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	7c 83       	std	Y+4, r23	; 0x04
     2a6:	6b 83       	std	Y+3, r22	; 0x03
     2a8:	2b 81       	ldd	r18, Y+3	; 0x03
     2aa:	3c 81       	ldd	r19, Y+4	; 0x04
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	9a 81       	ldd	r25, Y+2	; 0x02
     2b0:	b9 01       	movw	r22, r18
     2b2:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <_ZNK6String6equalsERKS_>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <_ZNK6String9substringEj+0x6>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <_ZNK6String9substringEj+0x8>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	7c 83       	std	Y+4, r23	; 0x04
     2d6:	6b 83       	std	Y+3, r22	; 0x03
     2d8:	5e 83       	std	Y+6, r21	; 0x06
     2da:	4d 83       	std	Y+5, r20	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	fc 01       	movw	r30, r24
     2e2:	24 81       	ldd	r18, Z+4	; 0x04
     2e4:	35 81       	ldd	r19, Z+5	; 0x05
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	4d 81       	ldd	r20, Y+5	; 0x05
     2ec:	5e 81       	ldd	r21, Y+6	; 0x06
     2ee:	6b 81       	ldd	r22, Y+3	; 0x03
     2f0:	7c 81       	ldd	r23, Y+4	; 0x04
     2f2:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <_ZNK6String9substringEjj>
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	26 96       	adiw	r28, 0x06	; 6
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	00 d0       	rcall	.+0      	; 0x316 <_ZN5Print5writeEPKc+0xa>
     316:	1f 92       	push	r1
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	7c 83       	std	Y+4, r23	; 0x04
     322:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     324:	8b 81       	ldd	r24, Y+3	; 0x03
     326:	9c 81       	ldd	r25, Y+4	; 0x04
     328:	89 2b       	or	r24, r25
     32a:	19 f4       	brne	.+6      	; 0x332 <_ZN5Print5writeEPKc+0x26>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	15 c0       	rjmp	.+42     	; 0x35c <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	02 96       	adiw	r24, 0x02	; 2
     33e:	fc 01       	movw	r30, r24
     340:	00 81       	ld	r16, Z
     342:	11 81       	ldd	r17, Z+1	; 0x01
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 cd 30 	call	0x619a	; 0x619a <strlen>
     34c:	ac 01       	movw	r20, r24
     34e:	2b 81       	ldd	r18, Y+3	; 0x03
     350:	3c 81       	ldd	r19, Y+4	; 0x04
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	b9 01       	movw	r22, r18
     358:	f8 01       	movw	r30, r16
     35a:	19 95       	eicall
    }
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	08 95       	ret

0000036e <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <_ZN14HardwareSerial5beginEm+0x6>
     374:	00 d0       	rcall	.+0      	; 0x376 <_ZN14HardwareSerial5beginEm+0x8>
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	4b 83       	std	Y+3, r20	; 0x03
     380:	5c 83       	std	Y+4, r21	; 0x04
     382:	6d 83       	std	Y+5, r22	; 0x05
     384:	7e 83       	std	Y+6, r23	; 0x06
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	ad 81       	ldd	r26, Y+5	; 0x05
     38c:	be 81       	ldd	r27, Y+6	; 0x06
     38e:	e9 81       	ldd	r30, Y+1	; 0x01
     390:	fa 81       	ldd	r31, Y+2	; 0x02
     392:	26 e0       	ldi	r18, 0x06	; 6
     394:	ac 01       	movw	r20, r24
     396:	bd 01       	movw	r22, r26
     398:	cf 01       	movw	r24, r30
     39a:	0e 94 c6 28 	call	0x518c	; 0x518c <_ZN14HardwareSerial5beginEmh>
     39e:	00 00       	nop
     3a0:	26 96       	adiw	r28, 0x06	; 6
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	1f 92       	push	r1
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	1f 92       	push	r1
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	2f e6       	ldi	r18, 0x6F	; 111
     3e0:	32 e0       	ldi	r19, 0x02	; 2
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	fc 01       	movw	r30, r24
     3e8:	31 83       	std	Z+1, r19	; 0x01
     3ea:	20 83       	st	Z, r18
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	89 2b       	or	r24, r25
     3f2:	21 f0       	breq	.+8      	; 0x3fc <_ZN15Adafruit_SensorD1Ev+0x2e>
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	0e 94 cb 29 	call	0x5396	; 0x5396 <_ZdlPv>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <_ZN15Adafruit_SensorD0Ev>:
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	1f 92       	push	r1
     40c:	1f 92       	push	r1
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	d9 df       	rcall	.-78     	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	0e 94 cb 29 	call	0x5396	; 0x5396 <_ZdlPv>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     43e:	00 00       	nop
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	00 d0       	rcall	.+0      	; 0x452 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	7c 83       	std	Y+4, r23	; 0x04
     45e:	6b 83       	std	Y+3, r22	; 0x03
     460:	2f e6       	ldi	r18, 0x6F	; 111
     462:	32 e0       	ldi	r19, 0x02	; 2
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	fc 01       	movw	r30, r24
     46a:	31 83       	std	Z+1, r19	; 0x01
     46c:	20 83       	st	Z, r18
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	fc 01       	movw	r30, r24
     474:	22 81       	ldd	r18, Z+2	; 0x02
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	22 83       	std	Z+2, r18	; 0x02
     47e:	00 00       	nop
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     494:	1f 92       	push	r1
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	7c 83       	std	Y+4, r23	; 0x04
     4a0:	6b 83       	std	Y+3, r22	; 0x03
     4a2:	2b 81       	ldd	r18, Y+3	; 0x03
     4a4:	3c 81       	ldd	r19, Y+4	; 0x04
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	b9 01       	movw	r22, r18
     4ac:	cf df       	rcall	.-98     	; 0x44c <_ZN15Adafruit_SensorC1ERKS_>
     4ae:	2b e8       	ldi	r18, 0x8B	; 139
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	fc 01       	movw	r30, r24
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	9c 81       	ldd	r25, Y+4	; 0x04
     4c0:	fc 01       	movw	r30, r24
     4c2:	23 81       	ldd	r18, Z+3	; 0x03
     4c4:	34 81       	ldd	r19, Z+4	; 0x04
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	fc 01       	movw	r30, r24
     4cc:	34 83       	std	Z+4, r19	; 0x04
     4ce:	23 83       	std	Z+3, r18	; 0x03
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	9c 81       	ldd	r25, Y+4	; 0x04
     4d4:	fc 01       	movw	r30, r24
     4d6:	85 81       	ldd	r24, Z+5	; 0x05
     4d8:	96 81       	ldd	r25, Z+6	; 0x06
     4da:	a7 81       	ldd	r26, Z+7	; 0x07
     4dc:	b0 85       	ldd	r27, Z+8	; 0x08
     4de:	29 81       	ldd	r18, Y+1	; 0x01
     4e0:	3a 81       	ldd	r19, Y+2	; 0x02
     4e2:	f9 01       	movw	r30, r18
     4e4:	85 83       	std	Z+5, r24	; 0x05
     4e6:	96 83       	std	Z+6, r25	; 0x06
     4e8:	a7 83       	std	Z+7, r26	; 0x07
     4ea:	b0 87       	std	Z+8, r27	; 0x08
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 d0       	rcall	.+0      	; 0x502 <_ZN11DHT_Unified11temperatureEv+0x6>
     502:	1f 92       	push	r1
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	7c 83       	std	Y+4, r23	; 0x04
     50e:	6b 83       	std	Y+3, r22	; 0x03
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	9c 01       	movw	r18, r24
     516:	2c 5e       	subi	r18, 0xEC	; 236
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	b9 01       	movw	r22, r18
     520:	b6 df       	rcall	.-148    	; 0x48e <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	00 d0       	rcall	.+0      	; 0x53a <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	7c 83       	std	Y+4, r23	; 0x04
     546:	6b 83       	std	Y+3, r22	; 0x03
     548:	2b 81       	ldd	r18, Y+3	; 0x03
     54a:	3c 81       	ldd	r19, Y+4	; 0x04
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	b9 01       	movw	r22, r18
     552:	7c df       	rcall	.-264    	; 0x44c <_ZN15Adafruit_SensorC1ERKS_>
     554:	2d e7       	ldi	r18, 0x7D	; 125
     556:	32 e0       	ldi	r19, 0x02	; 2
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	fc 01       	movw	r30, r24
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	fc 01       	movw	r30, r24
     568:	23 81       	ldd	r18, Z+3	; 0x03
     56a:	34 81       	ldd	r19, Z+4	; 0x04
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	fc 01       	movw	r30, r24
     572:	34 83       	std	Z+4, r19	; 0x04
     574:	23 83       	std	Z+3, r18	; 0x03
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	9c 81       	ldd	r25, Y+4	; 0x04
     57a:	fc 01       	movw	r30, r24
     57c:	85 81       	ldd	r24, Z+5	; 0x05
     57e:	96 81       	ldd	r25, Z+6	; 0x06
     580:	a7 81       	ldd	r26, Z+7	; 0x07
     582:	b0 85       	ldd	r27, Z+8	; 0x08
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	3a 81       	ldd	r19, Y+2	; 0x02
     588:	f9 01       	movw	r30, r18
     58a:	85 83       	std	Z+5, r24	; 0x05
     58c:	96 83       	std	Z+6, r25	; 0x06
     58e:	a7 83       	std	Z+7, r26	; 0x07
     590:	b0 87       	std	Z+8, r27	; 0x08
     592:	00 00       	nop
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_ZN11DHT_Unified8humidityEv+0x6>
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	7c 83       	std	Y+4, r23	; 0x04
     5b4:	6b 83       	std	Y+3, r22	; 0x03
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	9c 01       	movw	r18, r24
     5bc:	23 5e       	subi	r18, 0xE3	; 227
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	b9 01       	movw	r22, r18
     5c6:	b6 df       	rcall	.-148    	; 0x534 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <_ZN7TwoWire5writeEi+0x6>
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	7c 83       	std	Y+4, r23	; 0x04
     5ec:	6b 83       	std	Y+3, r22	; 0x03
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 81       	ld	r18, Z
     5fc:	31 81       	ldd	r19, Z+1	; 0x01
     5fe:	4b 81       	ldd	r20, Y+3	; 0x03
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	64 2f       	mov	r22, r20
     606:	f9 01       	movw	r30, r18
     608:	19 95       	eicall
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	eb 97       	sbiw	r28, 0x3b	; 59
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	55 e2       	ldi	r21, 0x25	; 37
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	86 e9       	ldi	r24, 0x96	; 150
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	9a de       	rcall	.-716    	; 0x36e <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     63a:	8a e8       	ldi	r24, 0x8A	; 138
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 03 24 	call	0x4806	; 0x4806 <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     642:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     646:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     650:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     654:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     65e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     662:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     66c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     670:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	35 d2       	rcall	.+1130   	; 0xae8 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     67e:	86 ee       	ldi	r24, 0xE6	; 230
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     686:	ce 01       	movw	r24, r28
     688:	0b 96       	adiw	r24, 0x0b	; 11
     68a:	66 ee       	ldi	r22, 0xE6	; 230
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	36 df       	rcall	.-404    	; 0x4fc <_ZN11DHT_Unified11temperatureEv>
     690:	9e 01       	movw	r18, r28
     692:	2c 5e       	subi	r18, 0xEC	; 236
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	ce 01       	movw	r24, r28
     698:	0b 96       	adiw	r24, 0x0b	; 11
     69a:	b9 01       	movw	r22, r18
     69c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     6a0:	ce 01       	movw	r24, r28
     6a2:	0b 96       	adiw	r24, 0x0b	; 11
     6a4:	71 d3       	rcall	.+1762   	; 0xd88 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     6a6:	ce 01       	movw	r24, r28
     6a8:	02 96       	adiw	r24, 0x02	; 2
     6aa:	66 ee       	ldi	r22, 0xE6	; 230
     6ac:	72 e0       	ldi	r23, 0x02	; 2
     6ae:	79 df       	rcall	.-270    	; 0x5a2 <_ZN11DHT_Unified8humidityEv>
     6b0:	9e 01       	movw	r18, r28
     6b2:	2c 5e       	subi	r18, 0xEC	; 236
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	ce 01       	movw	r24, r28
     6b8:	02 96       	adiw	r24, 0x02	; 2
     6ba:	b9 01       	movw	r22, r18
     6bc:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     6c0:	ce 01       	movw	r24, r28
     6c2:	02 96       	adiw	r24, 0x02	; 2
     6c4:	94 d3       	rcall	.+1832   	; 0xdee <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     6c6:	88 ad       	ldd	r24, Y+56	; 0x38
     6c8:	99 ad       	ldd	r25, Y+57	; 0x39
     6ca:	aa ad       	ldd	r26, Y+58	; 0x3a
     6cc:	bb ad       	ldd	r27, Y+59	; 0x3b
     6ce:	28 ee       	ldi	r18, 0xE8	; 232
     6d0:	33 e0       	ldi	r19, 0x03	; 3
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__divmodsi4>
     6de:	da 01       	movw	r26, r20
     6e0:	c9 01       	movw	r24, r18
     6e2:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <delayMS>
     6e6:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <delayMS+0x1>
     6ea:	a0 93 0e 03 	sts	0x030E, r26	; 0x80030e <delayMS+0x2>
     6ee:	b0 93 0f 03 	sts	0x030F, r27	; 0x80030f <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     6f2:	86 e9       	ldi	r24, 0x96	; 150
     6f4:	94 e0       	ldi	r25, 0x04	; 4
     6f6:	5d de       	rcall	.-838    	; 0x3b2 <_ZN14HardwareSerialcvbEv>
     6f8:	98 2f       	mov	r25, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	89 27       	eor	r24, r25
     6fe:	88 23       	and	r24, r24
     700:	09 f0       	breq	.+2      	; 0x704 <setup+0xec>
     702:	f7 cf       	rjmp	.-18     	; 0x6f2 <setup+0xda>
  SPI.begin();         // Init SPI bus
     704:	0e 94 29 20 	call	0x4052	; 0x4052 <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     708:	86 e1       	ldi	r24, 0x16	; 22
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     710:	19 82       	std	Y+1, r1	; 0x01
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	60 f4       	brcc	.+24     	; 0x730 <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	8c 5d       	subi	r24, 0xDC	; 220
     720:	9c 4f       	sbci	r25, 0xFC	; 252
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	f1 cf       	rjmp	.-30     	; 0x712 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     730:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     734:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     738:	bc 01       	movw	r22, r24
     73a:	80 e3       	ldi	r24, 0x30	; 48
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e3       	ldi	r24, 0x30	; 48
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN5Servo5writeEi>

#pragma endregion Servo Motor
 
}
     74e:	00 00       	nop
     750:	eb 96       	adiw	r28, 0x3b	; 59
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <loop>:

void loop()
{
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	e6 97       	sbiw	r28, 0x36	; 54
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     778:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <delayMS>
     77c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <delayMS+0x1>
     780:	a0 91 0e 03 	lds	r26, 0x030E	; 0x80030e <delayMS+0x2>
     784:	b0 91 0f 03 	lds	r27, 0x030F	; 0x80030f <delayMS+0x3>
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     790:	ce 01       	movw	r24, r28
     792:	0a 96       	adiw	r24, 0x0a	; 10
     794:	66 ee       	ldi	r22, 0xE6	; 230
     796:	72 e0       	ldi	r23, 0x02	; 2
     798:	b1 de       	rcall	.-670    	; 0x4fc <_ZN11DHT_Unified11temperatureEv>
     79a:	9e 01       	movw	r18, r28
     79c:	2d 5e       	subi	r18, 0xED	; 237
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	ce 01       	movw	r24, r28
     7a2:	0a 96       	adiw	r24, 0x0a	; 10
     7a4:	b9 01       	movw	r22, r18
     7a6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     7aa:	ce 01       	movw	r24, r28
     7ac:	0a 96       	adiw	r24, 0x0a	; 10
     7ae:	ec d2       	rcall	.+1496   	; 0xd88 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     7b0:	8f a1       	ldd	r24, Y+39	; 0x27
     7b2:	98 a5       	ldd	r25, Y+40	; 0x28
     7b4:	a9 a5       	ldd	r26, Y+41	; 0x29
     7b6:	ba a5       	ldd	r27, Y+42	; 0x2a
     7b8:	11 e0       	ldi	r17, 0x01	; 1
     7ba:	9c 01       	movw	r18, r24
     7bc:	ad 01       	movw	r20, r26
     7be:	bc 01       	movw	r22, r24
     7c0:	cd 01       	movw	r24, r26
     7c2:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__unordsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	09 f4       	brne	.+2      	; 0x7cc <loop+0x6a>
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	11 23       	and	r17, r17
     7ce:	39 f0       	breq	.+14     	; 0x7de <loop+0x7c>
	{
		DhtSencorTemp = 420;
     7d0:	84 ea       	ldi	r24, 0xA4	; 164
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <DhtSencorTemp+0x1>
     7d8:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <DhtSencorTemp>
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <loop+0x98>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     7de:	8f a1       	ldd	r24, Y+39	; 0x27
     7e0:	98 a5       	ldd	r25, Y+40	; 0x28
     7e2:	a9 a5       	ldd	r26, Y+41	; 0x29
     7e4:	ba a5       	ldd	r27, Y+42	; 0x2a
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__fixsfsi>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <DhtSencorTemp+0x1>
     7f6:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     7fa:	66 ee       	ldi	r22, 0xE6	; 230
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	cf de       	rcall	.-610    	; 0x5a2 <_ZN11DHT_Unified8humidityEv>
     804:	ce 01       	movw	r24, r28
     806:	43 96       	adiw	r24, 0x13	; 19
     808:	bc 01       	movw	r22, r24
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	eb d2       	rcall	.+1494   	; 0xdee <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     818:	8f a1       	ldd	r24, Y+39	; 0x27
     81a:	98 a5       	ldd	r25, Y+40	; 0x28
     81c:	a9 a5       	ldd	r26, Y+41	; 0x29
     81e:	ba a5       	ldd	r27, Y+42	; 0x2a
     820:	11 e0       	ldi	r17, 0x01	; 1
     822:	9c 01       	movw	r18, r24
     824:	ad 01       	movw	r20, r26
     826:	bc 01       	movw	r22, r24
     828:	cd 01       	movw	r24, r26
     82a:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__unordsf2>
     82e:	88 23       	and	r24, r24
     830:	09 f4       	brne	.+2      	; 0x834 <loop+0xd2>
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	11 23       	and	r17, r17
     836:	39 f0       	breq	.+14     	; 0x846 <loop+0xe4>
	{
		DhtSencorHum = 360;
     838:	88 e6       	ldi	r24, 0x68	; 104
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <DhtSencorHum+0x1>
     840:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <DhtSencorHum>
     844:	0e c0       	rjmp	.+28     	; 0x862 <loop+0x100>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     846:	8f a1       	ldd	r24, Y+39	; 0x27
     848:	98 a5       	ldd	r25, Y+40	; 0x28
     84a:	a9 a5       	ldd	r26, Y+41	; 0x29
     84c:	ba a5       	ldd	r27, Y+42	; 0x2a
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__fixsfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <DhtSencorHum+0x1>
     85e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <DhtSencorHum>
	//Serial.print("Temp: ");
	//Serial.println(DhtSencorTemp);
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);
  
  Wire.beginTransmission(4);		// transmit to device #4
     862:	64 e0       	ldi	r22, 0x04	; 4
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	8a e8       	ldi	r24, 0x8A	; 138
     868:	94 e0       	ldi	r25, 0x04	; 4
     86a:	0e 94 39 24 	call	0x4872	; 0x4872 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     86e:	6e e0       	ldi	r22, 0x0E	; 14
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	8a e8       	ldi	r24, 0x8A	; 138
     874:	94 e0       	ldi	r25, 0x04	; 4
     876:	4a dd       	rcall	.-1388   	; 0x30c <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     878:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <DhtSencorTemp>
     87c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <DhtSencorTemp+0x1>
     880:	bc 01       	movw	r22, r24
     882:	8a e8       	ldi	r24, 0x8A	; 138
     884:	94 e0       	ldi	r25, 0x04	; 4
     886:	a9 de       	rcall	.-686    	; 0x5da <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     888:	8a e8       	ldi	r24, 0x8A	; 138
     88a:	94 e0       	ldi	r25, 0x04	; 4
     88c:	0e 94 74 24 	call	0x48e8	; 0x48e8 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     890:	64 e0       	ldi	r22, 0x04	; 4
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	8a e8       	ldi	r24, 0x8A	; 138
     896:	94 e0       	ldi	r25, 0x04	; 4
     898:	0e 94 39 24 	call	0x4872	; 0x4872 <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");			// sends some bytes
     89c:	65 e1       	ldi	r22, 0x15	; 21
     89e:	72 e0       	ldi	r23, 0x02	; 2
     8a0:	8a e8       	ldi	r24, 0x8A	; 138
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	33 dd       	rcall	.-1434   	; 0x30c <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorHum);		    // sends some bytes
     8a6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <DhtSencorHum>
     8aa:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <DhtSencorHum+0x1>
     8ae:	bc 01       	movw	r22, r24
     8b0:	8a e8       	ldi	r24, 0x8A	; 138
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	92 de       	rcall	.-732    	; 0x5da <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     8b6:	8a e8       	ldi	r24, 0x8A	; 138
     8b8:	94 e0       	ldi	r25, 0x04	; 4
     8ba:	0e 94 74 24 	call	0x48e8	; 0x48e8 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     8be:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <isCardValid+0x1>
     8c2:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <isCardValid>

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     8c6:	86 e1       	ldi	r24, 0x16	; 22
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     8ce:	98 2f       	mov	r25, r24
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	89 27       	eor	r24, r25
     8d4:	88 23       	and	r24, r24
     8d6:	49 f4       	brne	.+18     	; 0x8ea <loop+0x188>
     8d8:	86 e1       	ldi	r24, 0x16	; 22
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 2a 1a 	call	0x3454	; 0x3454 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     8e0:	98 2f       	mov	r25, r24
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	89 27       	eor	r24, r25
     8e6:	88 23       	and	r24, r24
     8e8:	11 f0       	breq	.+4      	; 0x8ee <loop+0x18c>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <loop+0x18e>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	88 23       	and	r24, r24
     8f2:	59 f0       	breq	.+22     	; 0x90a <loop+0x1a8>
	{
		delay(50);
     8f4:	62 e3       	ldi	r22, 0x32	; 50
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
		isCardValid = 0;
     900:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <isCardValid+0x1>
     904:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <isCardValid>
	}
	else 
	{
		isCardValid = RfidValidater();
     908:	19 c0       	rjmp	.+50     	; 0x93c <loop+0x1da>
     90a:	29 d0       	rcall	.+82     	; 0x95e <_Z13RfidValidaterv>
     90c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <isCardValid+0x1>
     910:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <isCardValid>

		// if card/chip is valid
		if (isCardValid == 1)
     914:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <isCardValid>
     918:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <isCardValid+0x1>
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	29 f4       	brne	.+10     	; 0x92a <loop+0x1c8>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
				
			// Move servo
			moveServo();
     924:	66 d1       	rcall	.+716    	; 0xbf2 <_Z12makeBipSoundi>
     926:	15 d1       	rcall	.+554    	; 0xb52 <_Z9moveServov>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     928:	09 c0       	rjmp	.+18     	; 0x93c <loop+0x1da>
     92a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <isCardValid>
     92e:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <isCardValid+0x1>
     932:	02 97       	sbiw	r24, 0x02	; 2
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     934:	19 f4       	brne	.+6      	; 0x93c <loop+0x1da>
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	5b d1       	rcall	.+694    	; 0xbf2 <_Z12makeBipSoundi>
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     93c:	68 ee       	ldi	r22, 0xE8	; 232
     93e:	73 e0       	ldi	r23, 0x03	; 3
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
}
     948:	00 00       	nop
     94a:	e6 96       	adiw	r28, 0x36	; 54
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <_Z13RfidValidaterv>:

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	69 97       	sbiw	r28, 0x19	; 25
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     976:	ce 01       	movw	r24, r28
     978:	44 96       	adiw	r24, 0x14	; 20
     97a:	6b e1       	ldi	r22, 0x1B	; 27
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     982:	19 82       	std	Y+1, r1	; 0x01
     984:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <mfrc522>
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	89 17       	cp	r24, r25
     98c:	08 f0       	brcs	.+2      	; 0x990 <_Z13RfidValidaterv+0x32>
     98e:	5f c0       	rjmp	.+190    	; 0xa4e <_Z13RfidValidaterv+0xf0>
	{
		Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	89 5e       	subi	r24, 0xE9	; 233
     998:	9c 4f       	sbci	r25, 0xFC	; 252
     99a:	fc 01       	movw	r30, r24
     99c:	80 81       	ld	r24, Z
     99e:	80 31       	cpi	r24, 0x10	; 16
     9a0:	18 f4       	brcc	.+6      	; 0x9a8 <_Z13RfidValidaterv+0x4a>
     9a2:	8c e1       	ldi	r24, 0x1C	; 28
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <_Z13RfidValidaterv+0x4e>
     9a8:	8f e1       	ldi	r24, 0x1F	; 31
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	bc 01       	movw	r22, r24
     9ae:	86 e9       	ldi	r24, 0x96	; 150
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	0e 94 f6 29 	call	0x53ec	; 0x53ec <_ZN5Print5printEPKc>
		Serial.print(mfrc522.uid.uidByte[i], HEX);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	89 5e       	subi	r24, 0xE9	; 233
     9be:	9c 4f       	sbci	r25, 0xFC	; 252
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	40 e1       	ldi	r20, 0x10	; 16
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	68 2f       	mov	r22, r24
     9ca:	86 e9       	ldi	r24, 0x96	; 150
     9cc:	94 e0       	ldi	r25, 0x04	; 4
     9ce:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <_ZN5Print5printEhi>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	89 5e       	subi	r24, 0xE9	; 233
     9da:	9c 4f       	sbci	r25, 0xFC	; 252
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	80 31       	cpi	r24, 0x10	; 16
     9e2:	18 f4       	brcc	.+6      	; 0x9ea <_Z13RfidValidaterv+0x8c>
     9e4:	8c e1       	ldi	r24, 0x1C	; 28
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <_Z13RfidValidaterv+0x90>
     9ea:	8f e1       	ldi	r24, 0x1F	; 31
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	9e 01       	movw	r18, r28
     9f0:	22 5f       	subi	r18, 0xF2	; 242
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	bc 01       	movw	r22, r24
     9f6:	c9 01       	movw	r24, r18
     9f8:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <_ZN6StringC1EPKc>
     9fc:	9e 01       	movw	r18, r28
     9fe:	22 5f       	subi	r18, 0xF2	; 242
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	ce 01       	movw	r24, r28
     a04:	44 96       	adiw	r24, 0x14	; 20
     a06:	b9 01       	movw	r22, r18
     a08:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <_ZN6String6concatERKS_>
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 96       	adiw	r24, 0x0e	; 14
     a10:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	89 5e       	subi	r24, 0xE9	; 233
     a1c:	9c 4f       	sbci	r25, 0xFC	; 252
     a1e:	fc 01       	movw	r30, r24
     a20:	20 81       	ld	r18, Z
     a22:	ce 01       	movw	r24, r28
     a24:	08 96       	adiw	r24, 0x08	; 8
     a26:	40 e1       	ldi	r20, 0x10	; 16
     a28:	62 2f       	mov	r22, r18
     a2a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <_ZN6StringC1Ehh>
     a2e:	9e 01       	movw	r18, r28
     a30:	28 5f       	subi	r18, 0xF8	; 248
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	ce 01       	movw	r24, r28
     a36:	44 96       	adiw	r24, 0x14	; 20
     a38:	b9 01       	movw	r22, r18
     a3a:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <_ZN6String6concatERKS_>
     a3e:	ce 01       	movw	r24, r28
     a40:	08 96       	adiw	r24, 0x08	; 8
     a42:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	9b cf       	rjmp	.-202    	; 0x984 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     a4e:	ce 01       	movw	r24, r28
     a50:	44 96       	adiw	r24, 0x14	; 20
     a52:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     a56:	ce 01       	movw	r24, r28
     a58:	02 96       	adiw	r24, 0x02	; 2
     a5a:	9e 01       	movw	r18, r28
     a5c:	2c 5e       	subi	r18, 0xEC	; 236
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	b9 01       	movw	r22, r18
     a66:	2e dc       	rcall	.-1956   	; 0x2c4 <_ZNK6String9substringEj>
     a68:	ce 01       	movw	r24, r28
     a6a:	02 96       	adiw	r24, 0x02	; 2
     a6c:	6a e2       	ldi	r22, 0x2A	; 42
     a6e:	73 e0       	ldi	r23, 0x03	; 3
     a70:	11 dc       	rcall	.-2014   	; 0x294 <_ZNK6StringeqERKS_>
     a72:	11 e0       	ldi	r17, 0x01	; 1
     a74:	88 23       	and	r24, r24
     a76:	09 f4       	brne	.+2      	; 0xa7a <_Z13RfidValidaterv+0x11c>
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	ce 01       	movw	r24, r28
     a7c:	02 96       	adiw	r24, 0x02	; 2
     a7e:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN6StringD1Ev>
     a82:	11 23       	and	r17, r17
     a84:	89 f0       	breq	.+34     	; 0xaa8 <_Z13RfidValidaterv+0x14a>
	{
		Serial.println();
     a86:	86 e9       	ldi	r24, 0x96	; 150
     a88:	94 e0       	ldi	r25, 0x04	; 4
     a8a:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     a8e:	61 e2       	ldi	r22, 0x21	; 33
     a90:	72 e0       	ldi	r23, 0x02	; 2
     a92:	86 e9       	ldi	r24, 0x96	; 150
     a94:	94 e0       	ldi	r25, 0x04	; 4
     a96:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN5Print7printlnEPKc>
		Serial.println();
     a9a:	86 e9       	ldi	r24, 0x96	; 150
     a9c:	94 e0       	ldi	r25, 0x04	; 4
     a9e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <_ZN5Print7printlnEv>
		return 1;
     aa2:	01 e0       	ldi	r16, 0x01	; 1
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	10 c0       	rjmp	.+32     	; 0xac8 <_Z13RfidValidaterv+0x16a>
	}
	else
	{
		Serial.println();
     aa8:	86 e9       	ldi	r24, 0x96	; 150
     aaa:	94 e0       	ldi	r25, 0x04	; 4
     aac:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <_ZN5Print7printlnEv>
		Serial.println(" Access denied");
     ab0:	63 e3       	ldi	r22, 0x33	; 51
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	86 e9       	ldi	r24, 0x96	; 150
     ab6:	94 e0       	ldi	r25, 0x04	; 4
     ab8:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN5Print7printlnEPKc>
		Serial.println();
     abc:	86 e9       	ldi	r24, 0x96	; 150
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <_ZN5Print7printlnEv>
		return 2;
     ac4:	02 e0       	ldi	r16, 0x02	; 2
     ac6:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     ac8:	ce 01       	movw	r24, r28
     aca:	44 96       	adiw	r24, 0x14	; 20
     acc:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN6StringD1Ev>
     ad0:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     ad2:	69 96       	adiw	r28, 0x19	; 25
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	1f 92       	push	r1
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     af4:	99 81       	ldd	r25, Y+1	; 0x01
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	89 27       	eor	r24, r25
     afa:	88 23       	and	r24, r24
     afc:	71 f0       	breq	.+28     	; 0xb1a <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     afe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     b02:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     b0c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     b10:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
	}
	if (status == true)
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	88 23       	and	r24, r24
     b1e:	71 f0       	breq	.+28     	; 0xb3c <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     b20:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     b24:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     b2e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     b32:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
	}
	delay(100);
     b3c:	64 e6       	ldi	r22, 0x64	; 100
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
}
     b48:	00 00       	nop
     b4a:	0f 90       	pop	r0
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     b5a:	80 e3       	ldi	r24, 0x30	; 48
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_ZN5Servo4readEv>
     b62:	21 e0       	ldi	r18, 0x01	; 1
     b64:	84 3b       	cpi	r24, 0xB4	; 180
     b66:	91 05       	cpc	r25, r1
     b68:	09 f0       	breq	.+2      	; 0xb6c <_Z9moveServov+0x1a>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	22 23       	and	r18, r18
     b6e:	81 f0       	breq	.+32     	; 0xb90 <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     b70:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     b74:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
		servo.write(0);
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	ad df       	rcall	.-166    	; 0xae8 <_Z11SetRfidLedsb>
     b8e:	27 c0       	rjmp	.+78     	; 0xbde <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     b90:	80 e3       	ldi	r24, 0x30	; 48
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_ZN5Servo4readEv>
     b98:	21 e0       	ldi	r18, 0x01	; 1
     b9a:	89 2b       	or	r24, r25
     b9c:	09 f0       	breq	.+2      	; 0xba0 <_Z9moveServov+0x4e>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	22 23       	and	r18, r18
     ba2:	81 f0       	breq	.+32     	; 0xbc4 <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     ba4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     ba8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
		servo.write(180);
     bb2:	64 eb       	ldi	r22, 0xB4	; 180
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e3       	ldi	r24, 0x30	; 48
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	93 df       	rcall	.-218    	; 0xae8 <_Z11SetRfidLedsb>
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     bc4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     bc8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
		servo.write(180);
     bd2:	64 eb       	ldi	r22, 0xB4	; 180
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 e3       	ldi	r24, 0x30	; 48
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN5Servo5writeEi>
	}
	delay(100);
     bde:	64 e6       	ldi	r22, 0x64	; 100
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
}
     bea:	00 00       	nop
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <_Z12makeBipSoundi+0x6>
     bf8:	1f 92       	push	r1
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	a9 f4       	brne	.+42     	; 0xc34 <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     c0a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     c0e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
		delay(100);
     c18:	64 e6       	ldi	r22, 0x64	; 100
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     c24:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     c28:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
     c32:	2f c0       	rjmp	.+94     	; 0xc92 <_Z12makeBipSoundi+0xa0>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	02 97       	sbiw	r24, 0x02	; 2
     c3a:	01 f5       	brne	.+64     	; 0xc7c <_Z12makeBipSoundi+0x8a>
	{
		// bibs 3 times
		for (int i = 0; i < 2;  i++)
     c3c:	1a 82       	std	Y+2, r1	; 0x02
     c3e:	19 82       	std	Y+1, r1	; 0x01
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	02 97       	sbiw	r24, 0x02	; 2
     c46:	2c f5       	brge	.+74     	; 0xc92 <_Z12makeBipSoundi+0xa0>
		{
			digitalWrite(BIP_PIN, HIGH); // start alarm
     c48:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     c4c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
			delay(50);
     c56:	62 e3       	ldi	r22, 0x32	; 50
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
			digitalWrite(BIP_PIN, LOW); // silence the alarm
     c62:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     c66:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 2;  i++)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	e2 cf       	rjmp	.-60     	; 0xc40 <_Z12makeBipSoundi+0x4e>
			delay(50);
			digitalWrite(BIP_PIN, LOW); // silence the alarm
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	03 97       	sbiw	r24, 0x03	; 3
     c82:	39 f4       	brne	.+14     	; 0xc92 <_Z12makeBipSoundi+0xa0>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     c84:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     c88:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
	}
	delay(100);
     c92:	64 e6       	ldi	r22, 0x64	; 100
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
     c9e:	00 00       	nop
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	1f 92       	push	r1
     cb4:	1f 92       	push	r1
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	4d 96       	adiw	r24, 0x1d	; 29
     cc4:	94 d0       	rcall	.+296    	; 0xdee <_ZN11DHT_Unified8HumidityD1Ev>
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	44 96       	adiw	r24, 0x14	; 20
     ccc:	5d d0       	rcall	.+186    	; 0xd88 <_ZN11DHT_Unified11TemperatureD1Ev>
     cce:	00 00       	nop
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <_Z41__static_initialization_and_destruction_0ii>:
     cda:	af 92       	push	r10
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <_Z41__static_initialization_and_destruction_0ii+0x16>
     cf0:	1f 92       	push	r1
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	7c 83       	std	Y+4, r23	; 0x04
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	11 f5       	brne	.+68     	; 0xd4a <_Z41__static_initialization_and_destruction_0ii+0x70>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	f1 f4       	brne	.+60     	; 0xd4a <_Z41__static_initialization_and_destruction_0ii+0x70>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     d0e:	aa 24       	eor	r10, r10
     d10:	aa 94       	dec	r10
     d12:	ba 2c       	mov	r11, r10
     d14:	65 01       	movw	r12, r10
     d16:	ee 24       	eor	r14, r14
     d18:	ea 94       	dec	r14
     d1a:	fe 2c       	mov	r15, r14
     d1c:	87 01       	movw	r16, r14
     d1e:	26 e0       	ldi	r18, 0x06	; 6
     d20:	4b e0       	ldi	r20, 0x0B	; 11
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	86 ee       	ldi	r24, 0xE6	; 230
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	c3 d6       	rcall	.+3462   	; 0x1ab0 <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     d2a:	45 e0       	ldi	r20, 0x05	; 5
     d2c:	65 e3       	ldi	r22, 0x35	; 53
     d2e:	86 e1       	ldi	r24, 0x16	; 22
     d30:	93 e0       	ldi	r25, 0x03	; 3
     d32:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     d36:	62 e4       	ldi	r22, 0x42	; 66
     d38:	72 e0       	ldi	r23, 0x02	; 2
     d3a:	8a e2       	ldi	r24, 0x2A	; 42
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     d42:	80 e3       	ldi	r24, 0x30	; 48
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN5ServoC1Ev>
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	89 2b       	or	r24, r25
     d50:	59 f4       	brne	.+22     	; 0xd68 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	39 f4       	brne	.+14     	; 0xd68 <_Z41__static_initialization_and_destruction_0ii+0x8e>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     d5a:	8a e2       	ldi	r24, 0x2A	; 42
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     d62:	86 ee       	ldi	r24, 0xE6	; 230
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	a3 df       	rcall	.-186    	; 0xcae <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     d68:	00 00       	nop
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	08 95       	ret

00000d88 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	1f 92       	push	r1
     d8e:	1f 92       	push	r1
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	2b e8       	ldi	r18, 0x8B	; 139
     d9a:	32 e0       	ldi	r19, 0x02	; 2
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	fc 01       	movw	r30, r24
     da2:	31 83       	std	Z+1, r19	; 0x01
     da4:	20 83       	st	Z, r18
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	11 db       	rcall	.-2526   	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	89 2b       	or	r24, r25
     db2:	21 f0       	breq	.+8      	; 0xdbc <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	0e 94 cb 29 	call	0x5396	; 0x5396 <_ZdlPv>
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <_ZN11DHT_Unified11TemperatureD0Ev>:
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	1f 92       	push	r1
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	d6 df       	rcall	.-84     	; 0xd88 <_ZN11DHT_Unified11TemperatureD1Ev>
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	0e 94 cb 29 	call	0x5396	; 0x5396 <_ZdlPv>
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	1f 92       	push	r1
     df4:	1f 92       	push	r1
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	2d e7       	ldi	r18, 0x7D	; 125
     e00:	32 e0       	ldi	r19, 0x02	; 2
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	fc 01       	movw	r30, r24
     e08:	31 83       	std	Z+1, r19	; 0x01
     e0a:	20 83       	st	Z, r18
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	de da       	rcall	.-2628   	; 0x3ce <_ZN15Adafruit_SensorD1Ev>
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	89 2b       	or	r24, r25
     e18:	21 f0       	breq	.+8      	; 0xe22 <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	0e 94 cb 29 	call	0x5396	; 0x5396 <_ZdlPv>
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <_ZN11DHT_Unified8HumidityD0Ev>:
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	1f 92       	push	r1
     e32:	1f 92       	push	r1
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	d6 df       	rcall	.-84     	; 0xdee <_ZN11DHT_Unified8HumidityD1Ev>
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	0e 94 cb 29 	call	0x5396	; 0x5396 <_ZdlPv>
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <_GLOBAL__sub_I_x>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	6f ef       	ldi	r22, 0xFF	; 255
     e5e:	7f ef       	ldi	r23, 0xFF	; 255
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	3a df       	rcall	.-396    	; 0xcda <_Z41__static_initialization_and_destruction_0ii>
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <_GLOBAL__sub_D_x>:
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	6f ef       	ldi	r22, 0xFF	; 255
     e76:	7f ef       	ldi	r23, 0xFF	; 255
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	2e df       	rcall	.-420    	; 0xcda <_Z41__static_initialization_and_destruction_0ii>
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	1f 92       	push	r1
     e8a:	1f 92       	push	r1
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	f8 94       	cli
     e96:	00 00       	nop
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <_ZN13InterruptLockD1Ev>:
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	1f 92       	push	r1
     ea8:	1f 92       	push	r1
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	78 94       	sei
     eb4:	00 00       	nop
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <_ZN3DHTC1Ehhh>:
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	2b 97       	sbiw	r28, 0x0b	; 11
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	98 87       	std	Y+8, r25	; 0x08
     ed6:	8f 83       	std	Y+7, r24	; 0x07
     ed8:	69 87       	std	Y+9, r22	; 0x09
     eda:	4a 87       	std	Y+10, r20	; 0x0a
     edc:	2b 87       	std	Y+11, r18	; 0x0b
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	29 85       	ldd	r18, Y+9	; 0x09
     ee4:	fc 01       	movw	r30, r24
     ee6:	25 83       	std	Z+5, r18	; 0x05
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	2a 85       	ldd	r18, Y+10	; 0x0a
     eee:	fc 01       	movw	r30, r24
     ef0:	26 83       	std	Z+6, r18	; 0x06
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	82 5b       	subi	r24, 0xB2	; 178
     efa:	9e 4f       	sbci	r25, 0xFE	; 254
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	fc 01       	movw	r30, r24
     f06:	84 91       	lpm	r24, Z
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	8f 81       	ldd	r24, Y+7	; 0x07
     f0c:	98 85       	ldd	r25, Y+8	; 0x08
     f0e:	2b 81       	ldd	r18, Y+3	; 0x03
     f10:	fc 01       	movw	r30, r24
     f12:	27 83       	std	Z+7, r18	; 0x07
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	8c 56       	subi	r24, 0x6C	; 108
     f1c:	9e 4f       	sbci	r25, 0xFE	; 254
     f1e:	9d 83       	std	Y+5, r25	; 0x05
     f20:	8c 83       	std	Y+4, r24	; 0x04
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	fc 01       	movw	r30, r24
     f28:	84 91       	lpm	r24, Z
     f2a:	8e 83       	std	Y+6, r24	; 0x06
     f2c:	8f 81       	ldd	r24, Y+7	; 0x07
     f2e:	98 85       	ldd	r25, Y+8	; 0x08
     f30:	2e 81       	ldd	r18, Y+6	; 0x06
     f32:	fc 01       	movw	r30, r24
     f34:	20 87       	std	Z+8, r18	; 0x08
     f36:	2f 81       	ldd	r18, Y+7	; 0x07
     f38:	38 85       	ldd	r19, Y+8	; 0x08
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	9e e3       	ldi	r25, 0x3E	; 62
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	f9 01       	movw	r30, r18
     f44:	85 87       	std	Z+13, r24	; 0x0d
     f46:	96 87       	std	Z+14, r25	; 0x0e
     f48:	a7 87       	std	Z+15, r26	; 0x0f
     f4a:	b0 8b       	std	Z+16, r27	; 0x10
     f4c:	00 00       	nop
     f4e:	2b 96       	adiw	r28, 0x0b	; 11
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <_ZN3DHT5beginEh>:
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	00 d0       	rcall	.+0      	; 0xf66 <_ZN3DHT5beginEh+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	6b 83       	std	Y+3, r22	; 0x03
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	85 81       	ldd	r24, Z+5	; 0x05
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
     f7e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <millis>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	80 5d       	subi	r24, 0xD0	; 208
     f88:	97 40       	sbci	r25, 0x07	; 7
     f8a:	a1 09       	sbc	r26, r1
     f8c:	b1 09       	sbc	r27, r1
     f8e:	29 81       	ldd	r18, Y+1	; 0x01
     f90:	3a 81       	ldd	r19, Y+2	; 0x02
     f92:	f9 01       	movw	r30, r18
     f94:	81 87       	std	Z+9, r24	; 0x09
     f96:	92 87       	std	Z+10, r25	; 0x0a
     f98:	a3 87       	std	Z+11, r26	; 0x0b
     f9a:	b4 87       	std	Z+12, r27	; 0x0c
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	2b 81       	ldd	r18, Y+3	; 0x03
     fa2:	fc 01       	movw	r30, r24
     fa4:	22 8b       	std	Z+18, r18	; 0x12
     fa6:	00 00       	nop
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <_ZN3DHT15readTemperatureEbb>:
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	28 97       	sbiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
     fcc:	6f 83       	std	Y+7, r22	; 0x07
     fce:	48 87       	std	Y+8, r20	; 0x08
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 ec       	ldi	r26, 0xC0	; 192
     fd6:	bf e7       	ldi	r27, 0x7F	; 127
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	ab 83       	std	Y+3, r26	; 0x03
     fde:	bc 83       	std	Y+4, r27	; 0x04
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	68 85       	ldd	r22, Y+8	; 0x08
     fe6:	1d d2       	rcall	.+1082   	; 0x1422 <_ZN3DHT4readEb>
     fe8:	88 23       	and	r24, r24
     fea:	09 f4       	brne	.+2      	; 0xfee <_ZN3DHT15readTemperatureEbb+0x3a>
     fec:	34 c1       	rjmp	.+616    	; 0x1256 <__EEPROM_REGION_LENGTH__+0x256>
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	fc 01       	movw	r30, r24
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	8c 30       	cpi	r24, 0x0C	; 12
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1000:	72 c0       	rjmp	.+228    	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
    1002:	8d 30       	cpi	r24, 0x0D	; 13
    1004:	91 05       	cpc	r25, r1
    1006:	1c f4       	brge	.+6      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1008:	0b 97       	sbiw	r24, 0x0b	; 11
    100a:	31 f0       	breq	.+12     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    100c:	24 c1       	rjmp	.+584    	; 0x1256 <__EEPROM_REGION_LENGTH__+0x256>
    100e:	45 97       	sbiw	r24, 0x15	; 21
    1010:	02 97       	sbiw	r24, 0x02	; 2
    1012:	08 f0       	brcs	.+2      	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1014:	20 c1       	rjmp	.+576    	; 0x1256 <__EEPROM_REGION_LENGTH__+0x256>
    1016:	c7 c0       	rjmp	.+398    	; 0x11a6 <__EEPROM_REGION_LENGTH__+0x1a6>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	fc 01       	movw	r30, r24
    101e:	82 81       	ldd	r24, Z+2	; 0x02
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__floatunsisf>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	ab 83       	std	Y+3, r26	; 0x03
    103a:	bc 83       	std	Y+4, r27	; 0x04
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	fc 01       	movw	r30, r24
    1042:	83 81       	ldd	r24, Z+3	; 0x03
    1044:	88 23       	and	r24, r24
    1046:	84 f4       	brge	.+32     	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1048:	29 81       	ldd	r18, Y+1	; 0x01
    104a:	3a 81       	ldd	r19, Y+2	; 0x02
    104c:	4b 81       	ldd	r20, Y+3	; 0x03
    104e:	5c 81       	ldd	r21, Y+4	; 0x04
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 e8       	ldi	r24, 0x80	; 128
    1056:	9f eb       	ldi	r25, 0xBF	; 191
    1058:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__subsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	ab 83       	std	Y+3, r26	; 0x03
    1066:	bc 83       	std	Y+4, r27	; 0x04
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	fc 01       	movw	r30, r24
    106e:	83 81       	ldd	r24, Z+3	; 0x03
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	8f 70       	andi	r24, 0x0F	; 15
    1076:	99 27       	eor	r25, r25
    1078:	09 2e       	mov	r0, r25
    107a:	00 0c       	add	r0, r0
    107c:	aa 0b       	sbc	r26, r26
    107e:	bb 0b       	sbc	r27, r27
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__floatsisf>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	2d ec       	ldi	r18, 0xCD	; 205
    108e:	3c ec       	ldi	r19, 0xCC	; 204
    1090:	4c ec       	ldi	r20, 0xCC	; 204
    1092:	5d e3       	ldi	r21, 0x3D	; 61
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9c 01       	movw	r18, r24
    10a2:	ad 01       	movw	r20, r26
    10a4:	69 81       	ldd	r22, Y+1	; 0x01
    10a6:	7a 81       	ldd	r23, Y+2	; 0x02
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__addsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	ab 83       	std	Y+3, r26	; 0x03
    10ba:	bc 83       	std	Y+4, r27	; 0x04
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	88 23       	and	r24, r24
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
    10c2:	c4 c0       	rjmp	.+392    	; 0x124c <__EEPROM_REGION_LENGTH__+0x24c>
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	ab 81       	ldd	r26, Y+3	; 0x03
    10ca:	bc 81       	ldd	r27, Y+4	; 0x04
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	ac 01       	movw	r20, r24
    10d2:	bd 01       	movw	r22, r26
    10d4:	c9 01       	movw	r24, r18
    10d6:	ce d0       	rcall	.+412    	; 0x1274 <_ZN3DHT11convertCtoFEf>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	ab 83       	std	Y+3, r26	; 0x03
    10e2:	bc 83       	std	Y+4, r27	; 0x04
    10e4:	b3 c0       	rjmp	.+358    	; 0x124c <__EEPROM_REGION_LENGTH__+0x24c>
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	fc 01       	movw	r30, r24
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__floatunsisf>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	ab 83       	std	Y+3, r26	; 0x03
    1108:	bc 83       	std	Y+4, r27	; 0x04
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	fc 01       	movw	r30, r24
    1110:	83 81       	ldd	r24, Z+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	8f 70       	andi	r24, 0x0F	; 15
    1118:	99 27       	eor	r25, r25
    111a:	09 2e       	mov	r0, r25
    111c:	00 0c       	add	r0, r0
    111e:	aa 0b       	sbc	r26, r26
    1120:	bb 0b       	sbc	r27, r27
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__floatsisf>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	2d ec       	ldi	r18, 0xCD	; 205
    1130:	3c ec       	ldi	r19, 0xCC	; 204
    1132:	4c ec       	ldi	r20, 0xCC	; 204
    1134:	5d e3       	ldi	r21, 0x3D	; 61
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9c 01       	movw	r18, r24
    1144:	ad 01       	movw	r20, r26
    1146:	69 81       	ldd	r22, Y+1	; 0x01
    1148:	7a 81       	ldd	r23, Y+2	; 0x02
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__addsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	ab 83       	std	Y+3, r26	; 0x03
    115c:	bc 83       	std	Y+4, r27	; 0x04
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	fc 01       	movw	r30, r24
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	88 23       	and	r24, r24
    1168:	4c f4       	brge	.+18     	; 0x117c <__EEPROM_REGION_LENGTH__+0x17c>
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	ab 81       	ldd	r26, Y+3	; 0x03
    1170:	bc 81       	ldd	r27, Y+4	; 0x04
    1172:	b0 58       	subi	r27, 0x80	; 128
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	ab 83       	std	Y+3, r26	; 0x03
    117a:	bc 83       	std	Y+4, r27	; 0x04
    117c:	8f 81       	ldd	r24, Y+7	; 0x07
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <__EEPROM_REGION_LENGTH__+0x184>
    1182:	66 c0       	rjmp	.+204    	; 0x1250 <__EEPROM_REGION_LENGTH__+0x250>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	ab 81       	ldd	r26, Y+3	; 0x03
    118a:	bc 81       	ldd	r27, Y+4	; 0x04
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	ac 01       	movw	r20, r24
    1192:	bd 01       	movw	r22, r26
    1194:	c9 01       	movw	r24, r18
    1196:	6e d0       	rcall	.+220    	; 0x1274 <_ZN3DHT11convertCtoFEf>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	ab 83       	std	Y+3, r26	; 0x03
    11a2:	bc 83       	std	Y+4, r27	; 0x04
    11a4:	55 c0       	rjmp	.+170    	; 0x1250 <__EEPROM_REGION_LENGTH__+0x250>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	fc 01       	movw	r30, r24
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	8f 77       	andi	r24, 0x7F	; 127
    11b4:	99 27       	eor	r25, r25
    11b6:	38 2f       	mov	r19, r24
    11b8:	22 27       	eor	r18, r18
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	fc 01       	movw	r30, r24
    11c0:	83 81       	ldd	r24, Z+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	82 2b       	or	r24, r18
    11c8:	93 2b       	or	r25, r19
    11ca:	cc 01       	movw	r24, r24
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__floatunsisf>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	ab 83       	std	Y+3, r26	; 0x03
    11e2:	bc 83       	std	Y+4, r27	; 0x04
    11e4:	2d ec       	ldi	r18, 0xCD	; 205
    11e6:	3c ec       	ldi	r19, 0xCC	; 204
    11e8:	4c ec       	ldi	r20, 0xCC	; 204
    11ea:	5d e3       	ldi	r21, 0x3D	; 61
    11ec:	69 81       	ldd	r22, Y+1	; 0x01
    11ee:	7a 81       	ldd	r23, Y+2	; 0x02
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	ab 83       	std	Y+3, r26	; 0x03
    1202:	bc 83       	std	Y+4, r27	; 0x04
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	fc 01       	movw	r30, r24
    120a:	82 81       	ldd	r24, Z+2	; 0x02
    120c:	88 23       	and	r24, r24
    120e:	4c f4       	brge	.+18     	; 0x1222 <__EEPROM_REGION_LENGTH__+0x222>
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	ab 81       	ldd	r26, Y+3	; 0x03
    1216:	bc 81       	ldd	r27, Y+4	; 0x04
    1218:	b0 58       	subi	r27, 0x80	; 128
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	ab 83       	std	Y+3, r26	; 0x03
    1220:	bc 83       	std	Y+4, r27	; 0x04
    1222:	8f 81       	ldd	r24, Y+7	; 0x07
    1224:	88 23       	and	r24, r24
    1226:	b1 f0       	breq	.+44     	; 0x1254 <__EEPROM_REGION_LENGTH__+0x254>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	ab 81       	ldd	r26, Y+3	; 0x03
    122e:	bc 81       	ldd	r27, Y+4	; 0x04
    1230:	2d 81       	ldd	r18, Y+5	; 0x05
    1232:	3e 81       	ldd	r19, Y+6	; 0x06
    1234:	ac 01       	movw	r20, r24
    1236:	bd 01       	movw	r22, r26
    1238:	c9 01       	movw	r24, r18
    123a:	1c d0       	rcall	.+56     	; 0x1274 <_ZN3DHT11convertCtoFEf>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	ab 83       	std	Y+3, r26	; 0x03
    1246:	bc 83       	std	Y+4, r27	; 0x04
    1248:	00 00       	nop
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__EEPROM_REGION_LENGTH__+0x254>
    124c:	00 00       	nop
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <__EEPROM_REGION_LENGTH__+0x256>
    1250:	00 00       	nop
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <__EEPROM_REGION_LENGTH__+0x256>
    1254:	00 00       	nop
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	ab 81       	ldd	r26, Y+3	; 0x03
    125c:	bc 81       	ldd	r27, Y+4	; 0x04
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	28 96       	adiw	r28, 0x08	; 8
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <_ZN3DHT11convertCtoFEf>:
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	00 d0       	rcall	.+0      	; 0x127a <_ZN3DHT11convertCtoFEf+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <_ZN3DHT11convertCtoFEf+0x8>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	4b 83       	std	Y+3, r20	; 0x03
    1286:	5c 83       	std	Y+4, r21	; 0x04
    1288:	6d 83       	std	Y+5, r22	; 0x05
    128a:	7e 83       	std	Y+6, r23	; 0x06
    128c:	26 e6       	ldi	r18, 0x66	; 102
    128e:	36 e6       	ldi	r19, 0x66	; 102
    1290:	46 ee       	ldi	r20, 0xE6	; 230
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	6b 81       	ldd	r22, Y+3	; 0x03
    1296:	7c 81       	ldd	r23, Y+4	; 0x04
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	52 e4       	ldi	r21, 0x42	; 66
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__addsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	26 96       	adiw	r28, 0x06	; 6
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <_ZN3DHT12readHumidityEb>:
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	27 97       	sbiw	r28, 0x07	; 7
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	6f 83       	std	Y+7, r22	; 0x07
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 ec       	ldi	r26, 0xC0	; 192
    12f6:	bf e7       	ldi	r27, 0x7F	; 127
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	ab 83       	std	Y+3, r26	; 0x03
    12fe:	bc 83       	std	Y+4, r27	; 0x04
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	8d d0       	rcall	.+282    	; 0x1422 <_ZN3DHT4readEb>
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <_ZN3DHT12readHumidityEb+0x40>
    130c:	77 c0       	rjmp	.+238    	; 0x13fc <_ZN3DHT12readHumidityEb+0x12e>
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	fc 01       	movw	r30, r24
    1314:	86 81       	ldd	r24, Z+6	; 0x06
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	8b 30       	cpi	r24, 0x0B	; 11
    131c:	91 05       	cpc	r25, r1
    131e:	0c f4       	brge	.+2      	; 0x1322 <_ZN3DHT12readHumidityEb+0x54>
    1320:	6d c0       	rjmp	.+218    	; 0x13fc <_ZN3DHT12readHumidityEb+0x12e>
    1322:	8d 30       	cpi	r24, 0x0D	; 13
    1324:	91 05       	cpc	r25, r1
    1326:	2c f0       	brlt	.+10     	; 0x1332 <_ZN3DHT12readHumidityEb+0x64>
    1328:	45 97       	sbiw	r24, 0x15	; 21
    132a:	02 97       	sbiw	r24, 0x02	; 2
    132c:	08 f0       	brcs	.+2      	; 0x1330 <_ZN3DHT12readHumidityEb+0x62>
    132e:	66 c0       	rjmp	.+204    	; 0x13fc <_ZN3DHT12readHumidityEb+0x12e>
    1330:	37 c0       	rjmp	.+110    	; 0x13a0 <_ZN3DHT12readHumidityEb+0xd2>
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	fc 01       	movw	r30, r24
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	09 2e       	mov	r0, r25
    1340:	00 0c       	add	r0, r0
    1342:	aa 0b       	sbc	r26, r26
    1344:	bb 0b       	sbc	r27, r27
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__floatsisf>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	fc 01       	movw	r30, r24
    1358:	81 81       	ldd	r24, Z+1	; 0x01
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	09 2e       	mov	r0, r25
    1360:	00 0c       	add	r0, r0
    1362:	aa 0b       	sbc	r26, r26
    1364:	bb 0b       	sbc	r27, r27
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__floatsisf>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	2d ec       	ldi	r18, 0xCD	; 205
    1374:	3c ec       	ldi	r19, 0xCC	; 204
    1376:	4c ec       	ldi	r20, 0xCC	; 204
    1378:	5d e3       	ldi	r21, 0x3D	; 61
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9c 01       	movw	r18, r24
    1388:	ad 01       	movw	r20, r26
    138a:	c7 01       	movw	r24, r14
    138c:	b6 01       	movw	r22, r12
    138e:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__addsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	ab 83       	std	Y+3, r26	; 0x03
    139c:	bc 83       	std	Y+4, r27	; 0x04
    139e:	2e c0       	rjmp	.+92     	; 0x13fc <_ZN3DHT12readHumidityEb+0x12e>
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	38 2f       	mov	r19, r24
    13ae:	22 27       	eor	r18, r18
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	fc 01       	movw	r30, r24
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	82 2b       	or	r24, r18
    13be:	93 2b       	or	r25, r19
    13c0:	cc 01       	movw	r24, r24
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__floatunsisf>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	ab 83       	std	Y+3, r26	; 0x03
    13d8:	bc 83       	std	Y+4, r27	; 0x04
    13da:	2d ec       	ldi	r18, 0xCD	; 205
    13dc:	3c ec       	ldi	r19, 0xCC	; 204
    13de:	4c ec       	ldi	r20, 0xCC	; 204
    13e0:	5d e3       	ldi	r21, 0x3D	; 61
    13e2:	69 81       	ldd	r22, Y+1	; 0x01
    13e4:	7a 81       	ldd	r23, Y+2	; 0x02
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	ab 83       	std	Y+3, r26	; 0x03
    13f8:	bc 83       	std	Y+4, r27	; 0x04
    13fa:	00 00       	nop
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	ab 81       	ldd	r26, Y+3	; 0x03
    1402:	bc 81       	ldd	r27, Y+4	; 0x04
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	27 96       	adiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	08 95       	ret

00001422 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    1422:	af 92       	push	r10
    1424:	bf 92       	push	r11
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	c4 55       	subi	r28, 0x54	; 84
    143a:	d1 40       	sbci	r29, 0x01	; 1
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	9e 01       	movw	r18, r28
    1448:	2e 5a       	subi	r18, 0xAE	; 174
    144a:	3e 4f       	sbci	r19, 0xFE	; 254
    144c:	f9 01       	movw	r30, r18
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	80 83       	st	Z, r24
    1452:	ce 01       	movw	r24, r28
    1454:	8c 5a       	subi	r24, 0xAC	; 172
    1456:	9e 4f       	sbci	r25, 0xFE	; 254
    1458:	fc 01       	movw	r30, r24
    145a:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    145c:	0e 94 b1 2a 	call	0x5562	; 0x5562 <millis>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	af 83       	std	Y+7, r26	; 0x07
    146a:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    146c:	ce 01       	movw	r24, r28
    146e:	8c 5a       	subi	r24, 0xAC	; 172
    1470:	9e 4f       	sbci	r25, 0xFE	; 254
    1472:	fc 01       	movw	r30, r24
    1474:	90 81       	ld	r25, Z
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 27       	eor	r24, r25
    147a:	88 23       	and	r24, r24
    147c:	29 f1       	breq	.+74     	; 0x14c8 <_ZN3DHT4readEb+0xa6>
    147e:	ce 01       	movw	r24, r28
    1480:	8e 5a       	subi	r24, 0xAE	; 174
    1482:	9e 4f       	sbci	r25, 0xFE	; 254
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	fc 01       	movw	r30, r24
    148c:	81 85       	ldd	r24, Z+9	; 0x09
    148e:	92 85       	ldd	r25, Z+10	; 0x0a
    1490:	a3 85       	ldd	r26, Z+11	; 0x0b
    1492:	b4 85       	ldd	r27, Z+12	; 0x0c
    1494:	2d 81       	ldd	r18, Y+5	; 0x05
    1496:	3e 81       	ldd	r19, Y+6	; 0x06
    1498:	4f 81       	ldd	r20, Y+7	; 0x07
    149a:	58 85       	ldd	r21, Y+8	; 0x08
    149c:	59 01       	movw	r10, r18
    149e:	6a 01       	movw	r12, r20
    14a0:	a8 1a       	sub	r10, r24
    14a2:	b9 0a       	sbc	r11, r25
    14a4:	ca 0a       	sbc	r12, r26
    14a6:	db 0a       	sbc	r13, r27
    14a8:	d6 01       	movw	r26, r12
    14aa:	c5 01       	movw	r24, r10
    14ac:	80 3d       	cpi	r24, 0xD0	; 208
    14ae:	97 40       	sbci	r25, 0x07	; 7
    14b0:	a1 05       	cpc	r26, r1
    14b2:	b1 05       	cpc	r27, r1
    14b4:	48 f4       	brcc	.+18     	; 0x14c8 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    14b6:	ce 01       	movw	r24, r28
    14b8:	8e 5a       	subi	r24, 0xAE	; 174
    14ba:	9e 4f       	sbci	r25, 0xFE	; 254
    14bc:	fc 01       	movw	r30, r24
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	fc 01       	movw	r30, r24
    14c4:	f1 88       	ldd	r15, Z+17	; 0x11
    14c6:	5f c2       	rjmp	.+1214   	; 0x1986 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    14c8:	ce 01       	movw	r24, r28
    14ca:	8e 5a       	subi	r24, 0xAE	; 174
    14cc:	9e 4f       	sbci	r25, 0xFE	; 254
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 81       	ld	r18, Z
    14d2:	31 81       	ldd	r19, Z+1	; 0x01
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	af 81       	ldd	r26, Y+7	; 0x07
    14da:	b8 85       	ldd	r27, Y+8	; 0x08
    14dc:	f9 01       	movw	r30, r18
    14de:	81 87       	std	Z+9, r24	; 0x09
    14e0:	92 87       	std	Z+10, r25	; 0x0a
    14e2:	a3 87       	std	Z+11, r26	; 0x0b
    14e4:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    14e6:	ce 01       	movw	r24, r28
    14e8:	8e 5a       	subi	r24, 0xAE	; 174
    14ea:	9e 4f       	sbci	r25, 0xFE	; 254
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	fc 01       	movw	r30, r24
    14f4:	14 82       	std	Z+4, r1	; 0x04
    14f6:	ce 01       	movw	r24, r28
    14f8:	8e 5a       	subi	r24, 0xAE	; 174
    14fa:	9e 4f       	sbci	r25, 0xFE	; 254
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	fc 01       	movw	r30, r24
    1504:	24 81       	ldd	r18, Z+4	; 0x04
    1506:	ce 01       	movw	r24, r28
    1508:	8e 5a       	subi	r24, 0xAE	; 174
    150a:	9e 4f       	sbci	r25, 0xFE	; 254
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	fc 01       	movw	r30, r24
    1514:	23 83       	std	Z+3, r18	; 0x03
    1516:	ce 01       	movw	r24, r28
    1518:	8e 5a       	subi	r24, 0xAE	; 174
    151a:	9e 4f       	sbci	r25, 0xFE	; 254
    151c:	fc 01       	movw	r30, r24
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	fc 01       	movw	r30, r24
    1524:	23 81       	ldd	r18, Z+3	; 0x03
    1526:	ce 01       	movw	r24, r28
    1528:	8e 5a       	subi	r24, 0xAE	; 174
    152a:	9e 4f       	sbci	r25, 0xFE	; 254
    152c:	fc 01       	movw	r30, r24
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	fc 01       	movw	r30, r24
    1534:	22 83       	std	Z+2, r18	; 0x02
    1536:	ce 01       	movw	r24, r28
    1538:	8e 5a       	subi	r24, 0xAE	; 174
    153a:	9e 4f       	sbci	r25, 0xFE	; 254
    153c:	fc 01       	movw	r30, r24
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	fc 01       	movw	r30, r24
    1544:	22 81       	ldd	r18, Z+2	; 0x02
    1546:	ce 01       	movw	r24, r28
    1548:	8e 5a       	subi	r24, 0xAE	; 174
    154a:	9e 4f       	sbci	r25, 0xFE	; 254
    154c:	fc 01       	movw	r30, r24
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	fc 01       	movw	r30, r24
    1554:	21 83       	std	Z+1, r18	; 0x01
    1556:	ce 01       	movw	r24, r28
    1558:	8e 5a       	subi	r24, 0xAE	; 174
    155a:	9e 4f       	sbci	r25, 0xFE	; 254
    155c:	fc 01       	movw	r30, r24
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	fc 01       	movw	r30, r24
    1564:	21 81       	ldd	r18, Z+1	; 0x01
    1566:	ce 01       	movw	r24, r28
    1568:	8e 5a       	subi	r24, 0xAE	; 174
    156a:	9e 4f       	sbci	r25, 0xFE	; 254
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	fc 01       	movw	r30, r24
    1574:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1576:	ce 01       	movw	r24, r28
    1578:	8e 5a       	subi	r24, 0xAE	; 174
    157a:	9e 4f       	sbci	r25, 0xFE	; 254
    157c:	fc 01       	movw	r30, r24
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	fc 01       	movw	r30, r24
    1584:	85 81       	ldd	r24, Z+5	; 0x05
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
  delay(1);
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    1598:	ce 01       	movw	r24, r28
    159a:	8e 5a       	subi	r24, 0xAE	; 174
    159c:	9e 4f       	sbci	r25, 0xFE	; 254
    159e:	fc 01       	movw	r30, r24
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	fc 01       	movw	r30, r24
    15a6:	85 81       	ldd	r24, Z+5	; 0x05
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
  digitalWrite(_pin, LOW);
    15ae:	ce 01       	movw	r24, r28
    15b0:	8e 5a       	subi	r24, 0xAE	; 174
    15b2:	9e 4f       	sbci	r25, 0xFE	; 254
    15b4:	fc 01       	movw	r30, r24
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	fc 01       	movw	r30, r24
    15bc:	85 81       	ldd	r24, Z+5	; 0x05
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
  switch (_type) {
    15c4:	ce 01       	movw	r24, r28
    15c6:	8e 5a       	subi	r24, 0xAE	; 174
    15c8:	9e 4f       	sbci	r25, 0xFE	; 254
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	fc 01       	movw	r30, r24
    15d2:	86 81       	ldd	r24, Z+6	; 0x06
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	45 97       	sbiw	r24, 0x15	; 21
    15da:	02 97       	sbiw	r24, 0x02	; 2
    15dc:	28 f4       	brcc	.+10     	; 0x15e8 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    15de:	8c e4       	ldi	r24, 0x4C	; 76
    15e0:	94 e0       	ldi	r25, 0x04	; 4
    15e2:	0e 94 1b 2b 	call	0x5636	; 0x5636 <delayMicroseconds>
    break;
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    15e8:	64 e1       	ldi	r22, 0x14	; 20
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
    break;
    15f4:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    15f6:	ce 01       	movw	r24, r28
    15f8:	8e 5a       	subi	r24, 0xAE	; 174
    15fa:	9e 4f       	sbci	r25, 0xFE	; 254
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	fc 01       	movw	r30, r24
    1604:	85 81       	ldd	r24, Z+5	; 0x05
    1606:	62 e0       	ldi	r22, 0x02	; 2
    1608:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    160c:	ce 01       	movw	r24, r28
    160e:	8e 5a       	subi	r24, 0xAE	; 174
    1610:	9e 4f       	sbci	r25, 0xFE	; 254
    1612:	fc 01       	movw	r30, r24
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	fc 01       	movw	r30, r24
    161a:	82 89       	ldd	r24, Z+18	; 0x12
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 1b 2b 	call	0x5636	; 0x5636 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1624:	ce 01       	movw	r24, r28
    1626:	8f 5a       	subi	r24, 0xAF	; 175
    1628:	9e 4f       	sbci	r25, 0xFE	; 254
    162a:	2c dc       	rcall	.-1960   	; 0xe84 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    162c:	ce 01       	movw	r24, r28
    162e:	8e 5a       	subi	r24, 0xAE	; 174
    1630:	9e 4f       	sbci	r25, 0xFE	; 254
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	b7 d1       	rcall	.+878    	; 0x19aa <_ZN3DHT11expectPulseEb>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	21 e0       	ldi	r18, 0x01	; 1
    1642:	8f 3f       	cpi	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	af 4f       	sbci	r26, 0xFF	; 255
    1648:	bf 4f       	sbci	r27, 0xFF	; 255
    164a:	09 f0       	breq	.+2      	; 0x164e <_ZN3DHT4readEb+0x22c>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	22 23       	and	r18, r18
    1650:	99 f0       	breq	.+38     	; 0x1678 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    1652:	ce 01       	movw	r24, r28
    1654:	8e 5a       	subi	r24, 0xAE	; 174
    1656:	9e 4f       	sbci	r25, 0xFE	; 254
    1658:	fc 01       	movw	r30, r24
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	fc 01       	movw	r30, r24
    1660:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    1662:	ce 01       	movw	r24, r28
    1664:	8e 5a       	subi	r24, 0xAE	; 174
    1666:	9e 4f       	sbci	r25, 0xFE	; 254
    1668:	fc 01       	movw	r30, r24
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	fc 01       	movw	r30, r24
    1670:	f1 88       	ldd	r15, Z+17	; 0x11
    1672:	00 e0       	ldi	r16, 0x00	; 0
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	72 c0       	rjmp	.+228    	; 0x175c <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1678:	ce 01       	movw	r24, r28
    167a:	8e 5a       	subi	r24, 0xAE	; 174
    167c:	9e 4f       	sbci	r25, 0xFE	; 254
    167e:	fc 01       	movw	r30, r24
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	91 d1       	rcall	.+802    	; 0x19aa <_ZN3DHT11expectPulseEb>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	8f 3f       	cpi	r24, 0xFF	; 255
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	af 4f       	sbci	r26, 0xFF	; 255
    1694:	bf 4f       	sbci	r27, 0xFF	; 255
    1696:	09 f0       	breq	.+2      	; 0x169a <_ZN3DHT4readEb+0x278>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	22 23       	and	r18, r18
    169c:	99 f0       	breq	.+38     	; 0x16c4 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    169e:	ce 01       	movw	r24, r28
    16a0:	8e 5a       	subi	r24, 0xAE	; 174
    16a2:	9e 4f       	sbci	r25, 0xFE	; 254
    16a4:	fc 01       	movw	r30, r24
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	fc 01       	movw	r30, r24
    16ac:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    16ae:	ce 01       	movw	r24, r28
    16b0:	8e 5a       	subi	r24, 0xAE	; 174
    16b2:	9e 4f       	sbci	r25, 0xFE	; 254
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	fc 01       	movw	r30, r24
    16bc:	f1 88       	ldd	r15, Z+17	; 0x11
    16be:	00 e0       	ldi	r16, 0x00	; 0
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	4c c0       	rjmp	.+152    	; 0x175c <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    16c4:	1a 82       	std	Y+2, r1	; 0x02
    16c6:	19 82       	std	Y+1, r1	; 0x01
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	80 35       	cpi	r24, 0x50	; 80
    16ce:	91 05       	cpc	r25, r1
    16d0:	0c f0       	brlt	.+2      	; 0x16d4 <_ZN3DHT4readEb+0x2b2>
    16d2:	42 c0       	rjmp	.+132    	; 0x1758 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    16d4:	ce 01       	movw	r24, r28
    16d6:	8e 5a       	subi	r24, 0xAE	; 174
    16d8:	9e 4f       	sbci	r25, 0xFE	; 254
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	63 d1       	rcall	.+710    	; 0x19aa <_ZN3DHT11expectPulseEb>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	29 81       	ldd	r18, Y+1	; 0x01
    16ea:	3a 81       	ldd	r19, Y+2	; 0x02
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	ae 01       	movw	r20, r28
    16f6:	4f 5f       	subi	r20, 0xFF	; 255
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	24 0f       	add	r18, r20
    16fc:	35 1f       	adc	r19, r21
    16fe:	20 5f       	subi	r18, 0xF0	; 240
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	f9 01       	movw	r30, r18
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	8c 01       	movw	r16, r24
    1712:	0f 5f       	subi	r16, 0xFF	; 255
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	ce 01       	movw	r24, r28
    1718:	8e 5a       	subi	r24, 0xAE	; 174
    171a:	9e 4f       	sbci	r25, 0xFE	; 254
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	42 d1       	rcall	.+644    	; 0x19aa <_ZN3DHT11expectPulseEb>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	98 01       	movw	r18, r16
    172c:	22 0f       	add	r18, r18
    172e:	33 1f       	adc	r19, r19
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	ae 01       	movw	r20, r28
    1736:	4f 5f       	subi	r20, 0xFF	; 255
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	24 0f       	add	r18, r20
    173c:	35 1f       	adc	r19, r21
    173e:	20 5f       	subi	r18, 0xF0	; 240
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	f9 01       	movw	r30, r18
    1744:	80 83       	st	Z, r24
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	a2 83       	std	Z+2, r26	; 0x02
    174a:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	02 96       	adiw	r24, 0x02	; 2
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	b8 cf       	rjmp	.-144    	; 0x16c8 <_ZN3DHT4readEb+0x2a6>
    1758:	01 e0       	ldi	r16, 0x01	; 1
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	ce 01       	movw	r24, r28
    175e:	8f 5a       	subi	r24, 0xAF	; 175
    1760:	9e 4f       	sbci	r25, 0xFE	; 254
    1762:	9f db       	rcall	.-2242   	; 0xea2 <_ZN13InterruptLockD1Ev>
    1764:	01 30       	cpi	r16, 0x01	; 1
    1766:	11 05       	cpc	r17, r1
    1768:	09 f0       	breq	.+2      	; 0x176c <_ZN3DHT4readEb+0x34a>
    176a:	0d c1       	rjmp	.+538    	; 0x1986 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    176c:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    176e:	1c 82       	std	Y+4, r1	; 0x04
    1770:	1b 82       	std	Y+3, r1	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	88 97       	sbiw	r24, 0x28	; 40
    1778:	0c f0       	brlt	.+2      	; 0x177c <_ZN3DHT4readEb+0x35a>
    177a:	a7 c0       	rjmp	.+334    	; 0x18ca <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	9e 01       	movw	r18, r28
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	40 96       	adiw	r24, 0x10	; 16
    1798:	fc 01       	movw	r30, r24
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	a2 81       	ldd	r26, Z+2	; 0x02
    17a0:	b3 81       	ldd	r27, Z+3	; 0x03
    17a2:	89 87       	std	Y+9, r24	; 0x09
    17a4:	9a 87       	std	Y+10, r25	; 0x0a
    17a6:	ab 87       	std	Y+11, r26	; 0x0b
    17a8:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	9e 01       	movw	r18, r28
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	40 96       	adiw	r24, 0x10	; 16
    17c8:	fc 01       	movw	r30, r24
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	a2 81       	ldd	r26, Z+2	; 0x02
    17d0:	b3 81       	ldd	r27, Z+3	; 0x03
    17d2:	8d 87       	std	Y+13, r24	; 0x0d
    17d4:	9e 87       	std	Y+14, r25	; 0x0e
    17d6:	af 87       	std	Y+15, r26	; 0x0f
    17d8:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	ab 85       	ldd	r26, Y+11	; 0x0b
    17e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    17e2:	8f 3f       	cpi	r24, 0xFF	; 255
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	af 4f       	sbci	r26, 0xFF	; 255
    17e8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ea:	49 f0       	breq	.+18     	; 0x17fe <_ZN3DHT4readEb+0x3dc>
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	af 85       	ldd	r26, Y+15	; 0x0f
    17f2:	b8 89       	ldd	r27, Y+16	; 0x10
    17f4:	8f 3f       	cpi	r24, 0xFF	; 255
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	af 4f       	sbci	r26, 0xFF	; 255
    17fa:	bf 4f       	sbci	r27, 0xFF	; 255
    17fc:	89 f4       	brne	.+34     	; 0x1820 <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    17fe:	ce 01       	movw	r24, r28
    1800:	8e 5a       	subi	r24, 0xAE	; 174
    1802:	9e 4f       	sbci	r25, 0xFE	; 254
    1804:	fc 01       	movw	r30, r24
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	fc 01       	movw	r30, r24
    180c:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    180e:	ce 01       	movw	r24, r28
    1810:	8e 5a       	subi	r24, 0xAE	; 174
    1812:	9e 4f       	sbci	r25, 0xFE	; 254
    1814:	fc 01       	movw	r30, r24
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	fc 01       	movw	r30, r24
    181c:	f1 88       	ldd	r15, Z+17	; 0x11
    181e:	b3 c0       	rjmp	.+358    	; 0x1986 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	99 23       	and	r25, r25
    1826:	0c f4       	brge	.+2      	; 0x182a <_ZN3DHT4readEb+0x408>
    1828:	07 96       	adiw	r24, 0x07	; 7
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	95 95       	asr	r25
    1830:	87 95       	ror	r24
    1832:	95 95       	asr	r25
    1834:	87 95       	ror	r24
    1836:	9e 01       	movw	r18, r28
    1838:	2e 5a       	subi	r18, 0xAE	; 174
    183a:	3e 4f       	sbci	r19, 0xFE	; 254
    183c:	f9 01       	movw	r30, r18
    183e:	20 81       	ld	r18, Z
    1840:	31 81       	ldd	r19, Z+1	; 0x01
    1842:	28 0f       	add	r18, r24
    1844:	39 1f       	adc	r19, r25
    1846:	f9 01       	movw	r30, r18
    1848:	20 81       	ld	r18, Z
    184a:	42 2f       	mov	r20, r18
    184c:	44 0f       	add	r20, r20
    184e:	9e 01       	movw	r18, r28
    1850:	2e 5a       	subi	r18, 0xAE	; 174
    1852:	3e 4f       	sbci	r19, 0xFE	; 254
    1854:	f9 01       	movw	r30, r18
    1856:	20 81       	ld	r18, Z
    1858:	31 81       	ldd	r19, Z+1	; 0x01
    185a:	82 0f       	add	r24, r18
    185c:	93 1f       	adc	r25, r19
    185e:	fc 01       	movw	r30, r24
    1860:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    1862:	2d 85       	ldd	r18, Y+13	; 0x0d
    1864:	3e 85       	ldd	r19, Y+14	; 0x0e
    1866:	4f 85       	ldd	r20, Y+15	; 0x0f
    1868:	58 89       	ldd	r21, Y+16	; 0x10
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1870:	bc 85       	ldd	r27, Y+12	; 0x0c
    1872:	82 17       	cp	r24, r18
    1874:	93 07       	cpc	r25, r19
    1876:	a4 07       	cpc	r26, r20
    1878:	b5 07       	cpc	r27, r21
    187a:	08 f5       	brcc	.+66     	; 0x18be <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	99 23       	and	r25, r25
    1882:	0c f4       	brge	.+2      	; 0x1886 <_ZN3DHT4readEb+0x464>
    1884:	07 96       	adiw	r24, 0x07	; 7
    1886:	95 95       	asr	r25
    1888:	87 95       	ror	r24
    188a:	95 95       	asr	r25
    188c:	87 95       	ror	r24
    188e:	95 95       	asr	r25
    1890:	87 95       	ror	r24
    1892:	9e 01       	movw	r18, r28
    1894:	2e 5a       	subi	r18, 0xAE	; 174
    1896:	3e 4f       	sbci	r19, 0xFE	; 254
    1898:	f9 01       	movw	r30, r18
    189a:	20 81       	ld	r18, Z
    189c:	31 81       	ldd	r19, Z+1	; 0x01
    189e:	28 0f       	add	r18, r24
    18a0:	39 1f       	adc	r19, r25
    18a2:	f9 01       	movw	r30, r18
    18a4:	20 81       	ld	r18, Z
    18a6:	42 2f       	mov	r20, r18
    18a8:	41 60       	ori	r20, 0x01	; 1
    18aa:	9e 01       	movw	r18, r28
    18ac:	2e 5a       	subi	r18, 0xAE	; 174
    18ae:	3e 4f       	sbci	r19, 0xFE	; 254
    18b0:	f9 01       	movw	r30, r18
    18b2:	20 81       	ld	r18, Z
    18b4:	31 81       	ldd	r19, Z+1	; 0x01
    18b6:	82 0f       	add	r24, r18
    18b8:	93 1f       	adc	r25, r19
    18ba:	fc 01       	movw	r30, r24
    18bc:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
    18c8:	54 cf       	rjmp	.-344    	; 0x1772 <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    18ca:	ce 01       	movw	r24, r28
    18cc:	8e 5a       	subi	r24, 0xAE	; 174
    18ce:	9e 4f       	sbci	r25, 0xFE	; 254
    18d0:	fc 01       	movw	r30, r24
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	fc 01       	movw	r30, r24
    18d8:	84 81       	ldd	r24, Z+4	; 0x04
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	ce 01       	movw	r24, r28
    18e0:	8e 5a       	subi	r24, 0xAE	; 174
    18e2:	9e 4f       	sbci	r25, 0xFE	; 254
    18e4:	fc 01       	movw	r30, r24
    18e6:	80 81       	ld	r24, Z
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	fc 01       	movw	r30, r24
    18ec:	80 81       	ld	r24, Z
    18ee:	48 2f       	mov	r20, r24
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	ce 01       	movw	r24, r28
    18f4:	8e 5a       	subi	r24, 0xAE	; 174
    18f6:	9e 4f       	sbci	r25, 0xFE	; 254
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	fc 01       	movw	r30, r24
    1900:	81 81       	ldd	r24, Z+1	; 0x01
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	48 0f       	add	r20, r24
    1908:	59 1f       	adc	r21, r25
    190a:	ce 01       	movw	r24, r28
    190c:	8e 5a       	subi	r24, 0xAE	; 174
    190e:	9e 4f       	sbci	r25, 0xFE	; 254
    1910:	fc 01       	movw	r30, r24
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	fc 01       	movw	r30, r24
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	48 0f       	add	r20, r24
    1920:	59 1f       	adc	r21, r25
    1922:	ce 01       	movw	r24, r28
    1924:	8e 5a       	subi	r24, 0xAE	; 174
    1926:	9e 4f       	sbci	r25, 0xFE	; 254
    1928:	fc 01       	movw	r30, r24
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	fc 01       	movw	r30, r24
    1930:	83 81       	ldd	r24, Z+3	; 0x03
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	84 0f       	add	r24, r20
    1938:	95 1f       	adc	r25, r21
    193a:	99 27       	eor	r25, r25
    193c:	28 17       	cp	r18, r24
    193e:	39 07       	cpc	r19, r25
    1940:	91 f4       	brne	.+36     	; 0x1966 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1942:	ce 01       	movw	r24, r28
    1944:	8e 5a       	subi	r24, 0xAE	; 174
    1946:	9e 4f       	sbci	r25, 0xFE	; 254
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	fc 01       	movw	r30, r24
    1952:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1954:	ce 01       	movw	r24, r28
    1956:	8e 5a       	subi	r24, 0xAE	; 174
    1958:	9e 4f       	sbci	r25, 0xFE	; 254
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	fc 01       	movw	r30, r24
    1962:	f1 88       	ldd	r15, Z+17	; 0x11
    1964:	10 c0       	rjmp	.+32     	; 0x1986 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1966:	ce 01       	movw	r24, r28
    1968:	8e 5a       	subi	r24, 0xAE	; 174
    196a:	9e 4f       	sbci	r25, 0xFE	; 254
    196c:	fc 01       	movw	r30, r24
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	fc 01       	movw	r30, r24
    1974:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1976:	ce 01       	movw	r24, r28
    1978:	8e 5a       	subi	r24, 0xAE	; 174
    197a:	9e 4f       	sbci	r25, 0xFE	; 254
    197c:	fc 01       	movw	r30, r24
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	fc 01       	movw	r30, r24
    1984:	f1 88       	ldd	r15, Z+17	; 0x11
    1986:	8f 2d       	mov	r24, r15
  }
}
    1988:	cc 5a       	subi	r28, 0xAC	; 172
    198a:	de 4f       	sbci	r29, 0xFE	; 254
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	08 95       	ret

000019aa <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	2a 97       	sbiw	r28, 0x0a	; 10
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	99 87       	std	Y+9, r25	; 0x09
    19c0:	88 87       	std	Y+8, r24	; 0x08
    19c2:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    19c4:	1a 82       	std	Y+2, r1	; 0x02
    19c6:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    19c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ca:	88 23       	and	r24, r24
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <_ZN3DHT11expectPulseEb+0x2e>
    19ce:	88 85       	ldd	r24, Y+8	; 0x08
    19d0:	99 85       	ldd	r25, Y+9	; 0x09
    19d2:	fc 01       	movw	r30, r24
    19d4:	87 81       	ldd	r24, Z+7	; 0x07
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <_ZN3DHT11expectPulseEb+0x30>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    19dc:	88 85       	ldd	r24, Y+8	; 0x08
    19de:	99 85       	ldd	r25, Y+9	; 0x09
    19e0:	fc 01       	movw	r30, r24
    19e2:	80 85       	ldd	r24, Z+8	; 0x08
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	86 52       	subi	r24, 0x26	; 38
    19ee:	9e 4f       	sbci	r25, 0xFE	; 254
    19f0:	9d 83       	std	Y+5, r25	; 0x05
    19f2:	8c 83       	std	Y+4, r24	; 0x04
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	fc 01       	movw	r30, r24
    19fa:	25 91       	lpm	r18, Z+
    19fc:	34 91       	lpm	r19, Z
    19fe:	cf 01       	movw	r24, r30
    1a00:	3f 83       	std	Y+7, r19	; 0x07
    1a02:	2e 83       	std	Y+6, r18	; 0x06
    1a04:	9d 83       	std	Y+5, r25	; 0x05
    1a06:	8c 83       	std	Y+4, r24	; 0x04
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 81       	ld	r18, Z
    1a10:	88 85       	ldd	r24, Y+8	; 0x08
    1a12:	99 85       	ldd	r25, Y+9	; 0x09
    1a14:	fc 01       	movw	r30, r24
    1a16:	87 81       	ldd	r24, Z+7	; 0x07
    1a18:	28 23       	and	r18, r24
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	29 17       	cp	r18, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <_ZN3DHT11expectPulseEb+0x7a>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	88 23       	and	r24, r24
    1a26:	f9 f0       	breq	.+62     	; 0x1a66 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	9c 01       	movw	r18, r24
    1a2e:	2f 5f       	subi	r18, 0xFF	; 255
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	3a 83       	std	Y+2, r19	; 0x02
    1a34:	29 83       	std	Y+1, r18	; 0x01
    1a36:	9c 01       	movw	r18, r24
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	88 85       	ldd	r24, Y+8	; 0x08
    1a3e:	99 85       	ldd	r25, Y+9	; 0x09
    1a40:	fc 01       	movw	r30, r24
    1a42:	85 85       	ldd	r24, Z+13	; 0x0d
    1a44:	96 85       	ldd	r25, Z+14	; 0x0e
    1a46:	a7 85       	ldd	r26, Z+15	; 0x0f
    1a48:	b0 89       	ldd	r27, Z+16	; 0x10
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	28 17       	cp	r18, r24
    1a4e:	39 07       	cpc	r19, r25
    1a50:	4a 07       	cpc	r20, r26
    1a52:	5b 07       	cpc	r21, r27
    1a54:	08 f4       	brcc	.+2      	; 0x1a58 <_ZN3DHT11expectPulseEb+0xae>
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	66 23       	and	r22, r22
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <_ZN3DHT11expectPulseEb+0xb4>
    1a5c:	bf cf       	rjmp	.-130    	; 0x19dc <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	9f ef       	ldi	r25, 0xFF	; 255
    1a62:	dc 01       	movw	r26, r24
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	cc 01       	movw	r24, r24
    1a6c:	a0 e0       	ldi	r26, 0x00	; 0
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
}
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	2a 96       	adiw	r28, 0x0a	; 10
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	1f 92       	push	r1
    1a8c:	1f 92       	push	r1
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	2f e6       	ldi	r18, 0x6F	; 111
    1a98:	32 e0       	ldi	r19, 0x02	; 2
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	31 83       	std	Z+1, r19	; 0x01
    1aa2:	20 83       	st	Z, r18
    1aa4:	00 00       	nop
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	2d 97       	sbiw	r28, 0x0d	; 13
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	6b 83       	std	Y+3, r22	; 0x03
    1ada:	4c 83       	std	Y+4, r20	; 0x04
    1adc:	2d 83       	std	Y+5, r18	; 0x05
    1ade:	ee 82       	std	Y+6, r14	; 0x06
    1ae0:	ff 82       	std	Y+7, r15	; 0x07
    1ae2:	08 87       	std	Y+8, r16	; 0x08
    1ae4:	19 87       	std	Y+9, r17	; 0x09
    1ae6:	aa 86       	std	Y+10, r10	; 0x0a
    1ae8:	bb 86       	std	Y+11, r11	; 0x0b
    1aea:	cc 86       	std	Y+12, r12	; 0x0c
    1aec:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	2d 81       	ldd	r18, Y+5	; 0x05
    1af4:	4c 81       	ldd	r20, Y+4	; 0x04
    1af6:	6b 81       	ldd	r22, Y+3	; 0x03
    1af8:	e3 d9       	rcall	.-3130   	; 0xec0 <_ZN3DHTC1Ehhh>
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	fc 01       	movw	r30, r24
    1b02:	23 8b       	std	Z+19, r18	; 0x13
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	fc 01       	movw	r30, r24
    1b0a:	74 96       	adiw	r30, 0x14	; 20
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	a8 85       	ldd	r26, Y+8	; 0x08
    1b12:	b9 85       	ldd	r27, Y+9	; 0x09
    1b14:	69 81       	ldd	r22, Y+1	; 0x01
    1b16:	7a 81       	ldd	r23, Y+2	; 0x02
    1b18:	9c 01       	movw	r18, r24
    1b1a:	ad 01       	movw	r20, r26
    1b1c:	cf 01       	movw	r24, r30
    1b1e:	f6 d0       	rcall	.+492    	; 0x1d0c <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	fc 01       	movw	r30, r24
    1b26:	7d 96       	adiw	r30, 0x1d	; 29
    1b28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b2c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b2e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b30:	69 81       	ldd	r22, Y+1	; 0x01
    1b32:	7a 81       	ldd	r23, Y+2	; 0x02
    1b34:	9c 01       	movw	r18, r24
    1b36:	ad 01       	movw	r20, r26
    1b38:	cf 01       	movw	r24, r30
    1b3a:	7e d2       	rcall	.+1276   	; 0x2038 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1b3c:	00 00       	nop
    1b3e:	2d 96       	adiw	r28, 0x0d	; 13
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	cf 90       	pop	r12
    1b5a:	bf 90       	pop	r11
    1b5c:	af 90       	pop	r10
    1b5e:	08 95       	ret

00001b60 <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	1f 92       	push	r1
    1b66:	1f 92       	push	r1
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	67 e3       	ldi	r22, 0x37	; 55
    1b76:	f4 d9       	rcall	.-3096   	; 0xf60 <_ZN3DHT5beginEh>
    1b78:	00 00       	nop
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1b8a:	1f 92       	push	r1
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	7c 83       	std	Y+4, r23	; 0x04
    1b96:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	83 89       	ldd	r24, Z+19	; 0x13
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	8c 30       	cpi	r24, 0x0C	; 12
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	b1 f0       	breq	.+44     	; 0x1bd6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1baa:	8d 30       	cpi	r24, 0x0D	; 13
    1bac:	91 05       	cpc	r25, r1
    1bae:	1c f4       	brge	.+6      	; 0x1bb6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1bb0:	0b 97       	sbiw	r24, 0x0b	; 11
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1bb4:	2e c0       	rjmp	.+92     	; 0x1c12 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1bb6:	85 31       	cpi	r24, 0x15	; 21
    1bb8:	91 05       	cpc	r25, r1
    1bba:	b9 f0       	breq	.+46     	; 0x1bea <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1bbc:	46 97       	sbiw	r24, 0x16	; 22
    1bbe:	f9 f0       	breq	.+62     	; 0x1bfe <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1bc0:	28 c0       	rjmp	.+80     	; 0x1c12 <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1bc2:	2b e0       	ldi	r18, 0x0B	; 11
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	a9 01       	movw	r20, r18
    1bcc:	6e e4       	ldi	r22, 0x4E	; 78
    1bce:	72 e0       	ldi	r23, 0x02	; 2
    1bd0:	0e 94 d6 30 	call	0x61ac	; 0x61ac <strncpy>
    break;
    1bd4:	28 c0       	rjmp	.+80     	; 0x1c26 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1bd6:	2b e0       	ldi	r18, 0x0B	; 11
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	a9 01       	movw	r20, r18
    1be0:	64 e5       	ldi	r22, 0x54	; 84
    1be2:	72 e0       	ldi	r23, 0x02	; 2
    1be4:	0e 94 d6 30 	call	0x61ac	; 0x61ac <strncpy>
    break;
    1be8:	1e c0       	rjmp	.+60     	; 0x1c26 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1bea:	2b e0       	ldi	r18, 0x0B	; 11
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	6a e5       	ldi	r22, 0x5A	; 90
    1bf6:	72 e0       	ldi	r23, 0x02	; 2
    1bf8:	0e 94 d6 30 	call	0x61ac	; 0x61ac <strncpy>
    break;
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1bfe:	2b e0       	ldi	r18, 0x0B	; 11
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	a9 01       	movw	r20, r18
    1c08:	60 e6       	ldi	r22, 0x60	; 96
    1c0a:	72 e0       	ldi	r23, 0x02	; 2
    1c0c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <strncpy>
    break;
    1c10:	0a c0       	rjmp	.+20     	; 0x1c26 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1c12:	2b e0       	ldi	r18, 0x0B	; 11
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	66 e6       	ldi	r22, 0x66	; 102
    1c1e:	72 e0       	ldi	r23, 0x02	; 2
    1c20:	0e 94 d6 30 	call	0x61ac	; 0x61ac <strncpy>
    break;
    1c24:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1c26:	8b e0       	ldi	r24, 0x0B	; 11
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	fc 01       	movw	r30, r24
    1c34:	10 82       	st	Z, r1
}
    1c36:	00 00       	nop
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	08 95       	ret

00001c46 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1c4c:	1f 92       	push	r1
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	7c 83       	std	Y+4, r23	; 0x04
    1c58:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	fc 01       	movw	r30, r24
    1c60:	83 89       	ldd	r24, Z+19	; 0x13
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	8c 30       	cpi	r24, 0x0C	; 12
    1c68:	91 05       	cpc	r25, r1
    1c6a:	c1 f0       	breq	.+48     	; 0x1c9c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1c6c:	8d 30       	cpi	r24, 0x0D	; 13
    1c6e:	91 05       	cpc	r25, r1
    1c70:	1c f4       	brge	.+6      	; 0x1c78 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1c72:	0b 97       	sbiw	r24, 0x0b	; 11
    1c74:	39 f0       	breq	.+14     	; 0x1c84 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1c76:	36 c0       	rjmp	.+108    	; 0x1ce4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1c78:	85 31       	cpi	r24, 0x15	; 21
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	d9 f0       	breq	.+54     	; 0x1cb4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1c7e:	46 97       	sbiw	r24, 0x16	; 22
    1c80:	29 f1       	breq	.+74     	; 0x1ccc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1c82:	30 c0       	rjmp	.+96     	; 0x1ce4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	80 e4       	ldi	r24, 0x40	; 64
    1c8a:	92 e4       	ldi	r25, 0x42	; 66
    1c8c:	af e0       	ldi	r26, 0x0F	; 15
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	f9 01       	movw	r30, r18
    1c92:	84 a3       	std	Z+36, r24	; 0x24
    1c94:	95 a3       	std	Z+37, r25	; 0x25
    1c96:	a6 a3       	std	Z+38, r26	; 0x26
    1c98:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1c9a:	30 c0       	rjmp	.+96     	; 0x1cfc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	80 e8       	ldi	r24, 0x80	; 128
    1ca2:	94 e8       	ldi	r25, 0x84	; 132
    1ca4:	ae e1       	ldi	r26, 0x1E	; 30
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	f9 01       	movw	r30, r18
    1caa:	84 a3       	std	Z+36, r24	; 0x24
    1cac:	95 a3       	std	Z+37, r25	; 0x25
    1cae:	a6 a3       	std	Z+38, r26	; 0x26
    1cb0:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1cb2:	24 c0       	rjmp	.+72     	; 0x1cfc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	80 e8       	ldi	r24, 0x80	; 128
    1cba:	94 e8       	ldi	r25, 0x84	; 132
    1cbc:	ae e1       	ldi	r26, 0x1E	; 30
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	84 a3       	std	Z+36, r24	; 0x24
    1cc4:	95 a3       	std	Z+37, r25	; 0x25
    1cc6:	a6 a3       	std	Z+38, r26	; 0x26
    1cc8:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1cca:	18 c0       	rjmp	.+48     	; 0x1cfc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	80 e8       	ldi	r24, 0x80	; 128
    1cd2:	94 e8       	ldi	r25, 0x84	; 132
    1cd4:	ae e1       	ldi	r26, 0x1E	; 30
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	f9 01       	movw	r30, r18
    1cda:	84 a3       	std	Z+36, r24	; 0x24
    1cdc:	95 a3       	std	Z+37, r25	; 0x25
    1cde:	a6 a3       	std	Z+38, r26	; 0x26
    1ce0:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1ce2:	0c c0       	rjmp	.+24     	; 0x1cfc <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	80 e8       	ldi	r24, 0x80	; 128
    1cea:	94 e8       	ldi	r25, 0x84	; 132
    1cec:	ae e1       	ldi	r26, 0x1E	; 30
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	84 a3       	std	Z+36, r24	; 0x24
    1cf4:	95 a3       	std	Z+37, r25	; 0x25
    1cf6:	a6 a3       	std	Z+38, r26	; 0x26
    1cf8:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1cfa:	00 00       	nop
  }
}
    1cfc:	00 00       	nop
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	28 97       	sbiw	r28, 0x08	; 8
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	7c 83       	std	Y+4, r23	; 0x04
    1d26:	6b 83       	std	Y+3, r22	; 0x03
    1d28:	2d 83       	std	Y+5, r18	; 0x05
    1d2a:	3e 83       	std	Y+6, r19	; 0x06
    1d2c:	4f 83       	std	Y+7, r20	; 0x07
    1d2e:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	a8 de       	rcall	.-688    	; 0x1a86 <_ZN15Adafruit_SensorC1Ev>
    1d36:	2b e8       	ldi	r18, 0x8B	; 139
    1d38:	32 e0       	ldi	r19, 0x02	; 2
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	fc 01       	movw	r30, r24
    1d40:	31 83       	std	Z+1, r19	; 0x01
    1d42:	20 83       	st	Z, r18
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	34 83       	std	Z+4, r19	; 0x04
    1d50:	23 83       	std	Z+3, r18	; 0x03
    1d52:	29 81       	ldd	r18, Y+1	; 0x01
    1d54:	3a 81       	ldd	r19, Y+2	; 0x02
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	af 81       	ldd	r26, Y+7	; 0x07
    1d5c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d5e:	f9 01       	movw	r30, r18
    1d60:	85 83       	std	Z+5, r24	; 0x05
    1d62:	96 83       	std	Z+6, r25	; 0x06
    1d64:	a7 83       	std	Z+7, r26	; 0x07
    1d66:	b0 87       	std	Z+8, r27	; 0x08
    1d68:	00 00       	nop
    1d6a:	28 96       	adiw	r28, 0x08	; 8
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1d82:	1f 92       	push	r1
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	7c 83       	std	Y+4, r23	; 0x04
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	44 e2       	ldi	r20, 0x24	; 36
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	0e 94 b6 30 	call	0x616c	; 0x616c <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1da0:	84 e2       	ldi	r24, 0x24	; 36
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	f9 01       	movw	r30, r18
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	fc 01       	movw	r30, r24
    1dbc:	85 81       	ldd	r24, Z+5	; 0x05
    1dbe:	96 81       	ldd	r25, Z+6	; 0x06
    1dc0:	a7 81       	ldd	r26, Z+7	; 0x07
    1dc2:	b0 85       	ldd	r27, Z+8	; 0x08
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	f9 01       	movw	r30, r18
    1dca:	84 83       	std	Z+4, r24	; 0x04
    1dcc:	95 83       	std	Z+5, r25	; 0x05
    1dce:	a6 83       	std	Z+6, r26	; 0x06
    1dd0:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd6:	8d e0       	ldi	r24, 0x0D	; 13
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	f9 01       	movw	r30, r18
    1de0:	80 87       	std	Z+8, r24	; 0x08
    1de2:	91 87       	std	Z+9, r25	; 0x09
    1de4:	a2 87       	std	Z+10, r26	; 0x0a
    1de6:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1de8:	0e 94 b1 2a 	call	0x5562	; 0x5562 <millis>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	2b 81       	ldd	r18, Y+3	; 0x03
    1df2:	3c 81       	ldd	r19, Y+4	; 0x04
    1df4:	f9 01       	movw	r30, r18
    1df6:	80 8b       	std	Z+16, r24	; 0x10
    1df8:	91 8b       	std	Z+17, r25	; 0x11
    1dfa:	a2 8b       	std	Z+18, r26	; 0x12
    1dfc:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	fc 01       	movw	r30, r24
    1e04:	83 81       	ldd	r24, Z+3	; 0x03
    1e06:	94 81       	ldd	r25, Z+4	; 0x04
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	d3 d8       	rcall	.-3674   	; 0xfb4 <_ZN3DHT15readTemperatureEbb>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	3c 81       	ldd	r19, Y+4	; 0x04
    1e16:	f9 01       	movw	r30, r18
    1e18:	84 8b       	std	Z+20, r24	; 0x14
    1e1a:	95 8b       	std	Z+21, r25	; 0x15
    1e1c:	a6 8b       	std	Z+22, r26	; 0x16
    1e1e:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1e36:	1f 92       	push	r1
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	7c 83       	std	Y+4, r23	; 0x04
    1e42:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	48 e2       	ldi	r20, 0x28	; 40
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	0e 94 b6 30 	call	0x616c	; 0x616c <memset>
  // Set sensor name.
  _parent->setName(sensor);
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	fc 01       	movw	r30, r24
    1e5a:	83 81       	ldd	r24, Z+3	; 0x03
    1e5c:	94 81       	ldd	r25, Z+4	; 0x04
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	b9 01       	movw	r22, r18
    1e64:	8f de       	rcall	.-738    	; 0x1b84 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	f9 01       	movw	r30, r18
    1e74:	84 87       	std	Z+12, r24	; 0x0c
    1e76:	95 87       	std	Z+13, r25	; 0x0d
    1e78:	a6 87       	std	Z+14, r26	; 0x0e
    1e7a:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	fc 01       	movw	r30, r24
    1e82:	85 81       	ldd	r24, Z+5	; 0x05
    1e84:	96 81       	ldd	r25, Z+6	; 0x06
    1e86:	a7 81       	ldd	r26, Z+7	; 0x07
    1e88:	b0 85       	ldd	r27, Z+8	; 0x08
    1e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8e:	f9 01       	movw	r30, r18
    1e90:	80 8b       	std	Z+16, r24	; 0x10
    1e92:	91 8b       	std	Z+17, r25	; 0x11
    1e94:	a2 8b       	std	Z+18, r26	; 0x12
    1e96:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	8d e0       	ldi	r24, 0x0D	; 13
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e0       	ldi	r26, 0x00	; 0
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	84 8b       	std	Z+20, r24	; 0x14
    1ea8:	95 8b       	std	Z+21, r25	; 0x15
    1eaa:	a6 8b       	std	Z+22, r26	; 0x16
    1eac:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	83 81       	ldd	r24, Z+3	; 0x03
    1eb6:	94 81       	ldd	r25, Z+4	; 0x04
    1eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eba:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	c3 de       	rcall	.-634    	; 0x1c46 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	83 81       	ldd	r24, Z+3	; 0x03
    1ec8:	94 81       	ldd	r25, Z+4	; 0x04
    1eca:	fc 01       	movw	r30, r24
    1ecc:	83 89       	ldd	r24, Z+19	; 0x13
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	8c 30       	cpi	r24, 0x0C	; 12
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	61 f1       	breq	.+88     	; 0x1f30 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    1ed8:	8d 30       	cpi	r24, 0x0D	; 13
    1eda:	91 05       	cpc	r25, r1
    1edc:	1c f4       	brge	.+6      	; 0x1ee4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xb4>
    1ede:	0b 97       	sbiw	r24, 0x0b	; 11
    1ee0:	49 f0       	breq	.+18     	; 0x1ef4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc4>
    1ee2:	8c c0       	rjmp	.+280    	; 0x1ffc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x1cc>
    1ee4:	85 31       	cpi	r24, 0x15	; 21
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xbc>
    1eea:	44 c0       	rjmp	.+136    	; 0x1f74 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x144>
    1eec:	46 97       	sbiw	r24, 0x16	; 22
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xc2>
    1ef0:	63 c0       	rjmp	.+198    	; 0x1fb8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x188>
    1ef2:	84 c0       	rjmp	.+264    	; 0x1ffc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x1cc>
  case DHT11:
    sensor->max_value = 50.0F;
    1ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a8 e4       	ldi	r26, 0x48	; 72
    1efe:	b2 e4       	ldi	r27, 0x42	; 66
    1f00:	f9 01       	movw	r30, r18
    1f02:	80 8f       	std	Z+24, r24	; 0x18
    1f04:	91 8f       	std	Z+25, r25	; 0x19
    1f06:	a2 8f       	std	Z+26, r26	; 0x1a
    1f08:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	fc 01       	movw	r30, r24
    1f10:	14 8e       	std	Z+28, r1	; 0x1c
    1f12:	15 8e       	std	Z+29, r1	; 0x1d
    1f14:	16 8e       	std	Z+30, r1	; 0x1e
    1f16:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    1f18:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e0       	ldi	r26, 0x00	; 0
    1f22:	b0 e4       	ldi	r27, 0x40	; 64
    1f24:	f9 01       	movw	r30, r18
    1f26:	80 a3       	std	Z+32, r24	; 0x20
    1f28:	91 a3       	std	Z+33, r25	; 0x21
    1f2a:	a2 a3       	std	Z+34, r26	; 0x22
    1f2c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1f2e:	7c c0       	rjmp	.+248    	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
  case DHT12:
    sensor->max_value = 60.0F;
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	3c 81       	ldd	r19, Y+4	; 0x04
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a0 e7       	ldi	r26, 0x70	; 112
    1f3a:	b2 e4       	ldi	r27, 0x42	; 66
    1f3c:	f9 01       	movw	r30, r18
    1f3e:	80 8f       	std	Z+24, r24	; 0x18
    1f40:	91 8f       	std	Z+25, r25	; 0x19
    1f42:	a2 8f       	std	Z+26, r26	; 0x1a
    1f44:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f50:	b1 ec       	ldi	r27, 0xC1	; 193
    1f52:	f9 01       	movw	r30, r18
    1f54:	84 8f       	std	Z+28, r24	; 0x1c
    1f56:	95 8f       	std	Z+29, r25	; 0x1d
    1f58:	a6 8f       	std	Z+30, r26	; 0x1e
    1f5a:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    1f5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	bf e3       	ldi	r27, 0x3F	; 63
    1f68:	f9 01       	movw	r30, r18
    1f6a:	80 a3       	std	Z+32, r24	; 0x20
    1f6c:	91 a3       	std	Z+33, r25	; 0x21
    1f6e:	a2 a3       	std	Z+34, r26	; 0x22
    1f70:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1f72:	5a c0       	rjmp	.+180    	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
  case DHT21:
    sensor->max_value = 80.0F;
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f7e:	b2 e4       	ldi	r27, 0x42	; 66
    1f80:	f9 01       	movw	r30, r18
    1f82:	80 8f       	std	Z+24, r24	; 0x18
    1f84:	91 8f       	std	Z+25, r25	; 0x19
    1f86:	a2 8f       	std	Z+26, r26	; 0x1a
    1f88:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    1f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e2       	ldi	r26, 0x20	; 32
    1f94:	b2 ec       	ldi	r27, 0xC2	; 194
    1f96:	f9 01       	movw	r30, r18
    1f98:	84 8f       	std	Z+28, r24	; 0x1c
    1f9a:	95 8f       	std	Z+29, r25	; 0x1d
    1f9c:	a6 8f       	std	Z+30, r26	; 0x1e
    1f9e:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    1fa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa4:	8d ec       	ldi	r24, 0xCD	; 205
    1fa6:	9c ec       	ldi	r25, 0xCC	; 204
    1fa8:	ac ec       	ldi	r26, 0xCC	; 204
    1faa:	bd e3       	ldi	r27, 0x3D	; 61
    1fac:	f9 01       	movw	r30, r18
    1fae:	80 a3       	std	Z+32, r24	; 0x20
    1fb0:	91 a3       	std	Z+33, r25	; 0x21
    1fb2:	a2 a3       	std	Z+34, r26	; 0x22
    1fb4:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1fb6:	38 c0       	rjmp	.+112    	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
  case DHT22:
    sensor->max_value = 125.0F;
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	aa ef       	ldi	r26, 0xFA	; 250
    1fc2:	b2 e4       	ldi	r27, 0x42	; 66
    1fc4:	f9 01       	movw	r30, r18
    1fc6:	80 8f       	std	Z+24, r24	; 0x18
    1fc8:	91 8f       	std	Z+25, r25	; 0x19
    1fca:	a2 8f       	std	Z+26, r26	; 0x1a
    1fcc:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 e2       	ldi	r26, 0x20	; 32
    1fd8:	b2 ec       	ldi	r27, 0xC2	; 194
    1fda:	f9 01       	movw	r30, r18
    1fdc:	84 8f       	std	Z+28, r24	; 0x1c
    1fde:	95 8f       	std	Z+29, r25	; 0x1d
    1fe0:	a6 8f       	std	Z+30, r26	; 0x1e
    1fe2:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	8d ec       	ldi	r24, 0xCD	; 205
    1fea:	9c ec       	ldi	r25, 0xCC	; 204
    1fec:	ac ec       	ldi	r26, 0xCC	; 204
    1fee:	bd e3       	ldi	r27, 0x3D	; 61
    1ff0:	f9 01       	movw	r30, r18
    1ff2:	80 a3       	std	Z+32, r24	; 0x20
    1ff4:	91 a3       	std	Z+33, r25	; 0x21
    1ff6:	a2 a3       	std	Z+34, r26	; 0x22
    1ff8:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    1ffa:	16 c0       	rjmp	.+44     	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	fc 01       	movw	r30, r24
    2002:	10 8e       	std	Z+24, r1	; 0x18
    2004:	11 8e       	std	Z+25, r1	; 0x19
    2006:	12 8e       	std	Z+26, r1	; 0x1a
    2008:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	fc 01       	movw	r30, r24
    2010:	14 8e       	std	Z+28, r1	; 0x1c
    2012:	15 8e       	std	Z+29, r1	; 0x1d
    2014:	16 8e       	std	Z+30, r1	; 0x1e
    2016:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	fc 01       	movw	r30, r24
    201e:	10 a2       	std	Z+32, r1	; 0x20
    2020:	11 a2       	std	Z+33, r1	; 0x21
    2022:	12 a2       	std	Z+34, r1	; 0x22
    2024:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2026:	00 00       	nop
  }
}
    2028:	00 00       	nop
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	08 95       	ret

00002038 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	28 97       	sbiw	r28, 0x08	; 8
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	7c 83       	std	Y+4, r23	; 0x04
    2052:	6b 83       	std	Y+3, r22	; 0x03
    2054:	2d 83       	std	Y+5, r18	; 0x05
    2056:	3e 83       	std	Y+6, r19	; 0x06
    2058:	4f 83       	std	Y+7, r20	; 0x07
    205a:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	12 dd       	rcall	.-1500   	; 0x1a86 <_ZN15Adafruit_SensorC1Ev>
    2062:	2d e7       	ldi	r18, 0x7D	; 125
    2064:	32 e0       	ldi	r19, 0x02	; 2
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	fc 01       	movw	r30, r24
    206c:	31 83       	std	Z+1, r19	; 0x01
    206e:	20 83       	st	Z, r18
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	fc 01       	movw	r30, r24
    207a:	34 83       	std	Z+4, r19	; 0x04
    207c:	23 83       	std	Z+3, r18	; 0x03
    207e:	29 81       	ldd	r18, Y+1	; 0x01
    2080:	3a 81       	ldd	r19, Y+2	; 0x02
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	af 81       	ldd	r26, Y+7	; 0x07
    2088:	b8 85       	ldd	r27, Y+8	; 0x08
    208a:	f9 01       	movw	r30, r18
    208c:	85 83       	std	Z+5, r24	; 0x05
    208e:	96 83       	std	Z+6, r25	; 0x06
    2090:	a7 83       	std	Z+7, r26	; 0x07
    2092:	b0 87       	std	Z+8, r27	; 0x08
    2094:	00 00       	nop
    2096:	28 96       	adiw	r28, 0x08	; 8
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	08 95       	ret

000020a8 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    20ae:	1f 92       	push	r1
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	7c 83       	std	Y+4, r23	; 0x04
    20ba:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	44 e2       	ldi	r20, 0x24	; 36
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	0e 94 b6 30 	call	0x616c	; 0x616c <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    20cc:	84 e2       	ldi	r24, 0x24	; 36
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e0       	ldi	r26, 0x00	; 0
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	f9 01       	movw	r30, r18
    20da:	80 83       	st	Z, r24
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	a2 83       	std	Z+2, r26	; 0x02
    20e0:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	fc 01       	movw	r30, r24
    20e8:	85 81       	ldd	r24, Z+5	; 0x05
    20ea:	96 81       	ldd	r25, Z+6	; 0x06
    20ec:	a7 81       	ldd	r26, Z+7	; 0x07
    20ee:	b0 85       	ldd	r27, Z+8	; 0x08
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	f9 01       	movw	r30, r18
    20f6:	84 83       	std	Z+4, r24	; 0x04
    20f8:	95 83       	std	Z+5, r25	; 0x05
    20fa:	a6 83       	std	Z+6, r26	; 0x06
    20fc:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	8c e0       	ldi	r24, 0x0C	; 12
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e0       	ldi	r26, 0x00	; 0
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	f9 01       	movw	r30, r18
    210c:	80 87       	std	Z+8, r24	; 0x08
    210e:	91 87       	std	Z+9, r25	; 0x09
    2110:	a2 87       	std	Z+10, r26	; 0x0a
    2112:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2114:	0e 94 b1 2a 	call	0x5562	; 0x5562 <millis>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	3c 81       	ldd	r19, Y+4	; 0x04
    2120:	f9 01       	movw	r30, r18
    2122:	80 8b       	std	Z+16, r24	; 0x10
    2124:	91 8b       	std	Z+17, r25	; 0x11
    2126:	a2 8b       	std	Z+18, r26	; 0x12
    2128:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	fc 01       	movw	r30, r24
    2130:	83 81       	ldd	r24, Z+3	; 0x03
    2132:	94 81       	ldd	r25, Z+4	; 0x04
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	cb d8       	rcall	.-3690   	; 0x12ce <_ZN3DHT12readHumidityEb>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	2b 81       	ldd	r18, Y+3	; 0x03
    213e:	3c 81       	ldd	r19, Y+4	; 0x04
    2140:	f9 01       	movw	r30, r18
    2142:	84 8b       	std	Z+20, r24	; 0x14
    2144:	95 8b       	std	Z+21, r25	; 0x15
    2146:	a6 8b       	std	Z+22, r26	; 0x16
    2148:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    214a:	81 e0       	ldi	r24, 0x01	; 1
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	08 95       	ret

0000215a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	00 d0       	rcall	.+0      	; 0x2160 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    2160:	1f 92       	push	r1
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	7c 83       	std	Y+4, r23	; 0x04
    216c:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	48 e2       	ldi	r20, 0x28	; 40
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	0e 94 b6 30 	call	0x616c	; 0x616c <memset>
  // Set sensor name.
  _parent->setName(sensor);
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	fc 01       	movw	r30, r24
    2184:	83 81       	ldd	r24, Z+3	; 0x03
    2186:	94 81       	ldd	r25, Z+4	; 0x04
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	3c 81       	ldd	r19, Y+4	; 0x04
    218c:	b9 01       	movw	r22, r18
    218e:	fa dc       	rcall	.-1548   	; 0x1b84 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a0 e0       	ldi	r26, 0x00	; 0
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	f9 01       	movw	r30, r18
    219e:	84 87       	std	Z+12, r24	; 0x0c
    21a0:	95 87       	std	Z+13, r25	; 0x0d
    21a2:	a6 87       	std	Z+14, r26	; 0x0e
    21a4:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	fc 01       	movw	r30, r24
    21ac:	85 81       	ldd	r24, Z+5	; 0x05
    21ae:	96 81       	ldd	r25, Z+6	; 0x06
    21b0:	a7 81       	ldd	r26, Z+7	; 0x07
    21b2:	b0 85       	ldd	r27, Z+8	; 0x08
    21b4:	2b 81       	ldd	r18, Y+3	; 0x03
    21b6:	3c 81       	ldd	r19, Y+4	; 0x04
    21b8:	f9 01       	movw	r30, r18
    21ba:	80 8b       	std	Z+16, r24	; 0x10
    21bc:	91 8b       	std	Z+17, r25	; 0x11
    21be:	a2 8b       	std	Z+18, r26	; 0x12
    21c0:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    21c2:	2b 81       	ldd	r18, Y+3	; 0x03
    21c4:	3c 81       	ldd	r19, Y+4	; 0x04
    21c6:	8c e0       	ldi	r24, 0x0C	; 12
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e0       	ldi	r26, 0x00	; 0
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	f9 01       	movw	r30, r18
    21d0:	84 8b       	std	Z+20, r24	; 0x14
    21d2:	95 8b       	std	Z+21, r25	; 0x15
    21d4:	a6 8b       	std	Z+22, r26	; 0x16
    21d6:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	fc 01       	movw	r30, r24
    21de:	83 81       	ldd	r24, Z+3	; 0x03
    21e0:	94 81       	ldd	r25, Z+4	; 0x04
    21e2:	2b 81       	ldd	r18, Y+3	; 0x03
    21e4:	3c 81       	ldd	r19, Y+4	; 0x04
    21e6:	b9 01       	movw	r22, r18
    21e8:	2e dd       	rcall	.-1444   	; 0x1c46 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	fc 01       	movw	r30, r24
    21f0:	83 81       	ldd	r24, Z+3	; 0x03
    21f2:	94 81       	ldd	r25, Z+4	; 0x04
    21f4:	fc 01       	movw	r30, r24
    21f6:	83 89       	ldd	r24, Z+19	; 0x13
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	8c 30       	cpi	r24, 0x0C	; 12
    21fe:	91 05       	cpc	r25, r1
    2200:	81 f1       	breq	.+96     	; 0x2262 <__stack+0x63>
    2202:	8d 30       	cpi	r24, 0x0D	; 13
    2204:	91 05       	cpc	r25, r1
    2206:	1c f4       	brge	.+6      	; 0x220e <__stack+0xf>
    2208:	0b 97       	sbiw	r24, 0x0b	; 11
    220a:	49 f0       	breq	.+18     	; 0x221e <__stack+0x1f>
    220c:	88 c0       	rjmp	.+272    	; 0x231e <__stack+0x11f>
    220e:	85 31       	cpi	r24, 0x15	; 21
    2210:	91 05       	cpc	r25, r1
    2212:	09 f4       	brne	.+2      	; 0x2216 <__stack+0x17>
    2214:	48 c0       	rjmp	.+144    	; 0x22a6 <__stack+0xa7>
    2216:	46 97       	sbiw	r24, 0x16	; 22
    2218:	09 f4       	brne	.+2      	; 0x221c <__stack+0x1d>
    221a:	63 c0       	rjmp	.+198    	; 0x22e2 <__stack+0xe3>
    221c:	80 c0       	rjmp	.+256    	; 0x231e <__stack+0x11f>
  case DHT11:
    sensor->max_value = 80.0F;
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 ea       	ldi	r26, 0xA0	; 160
    2228:	b2 e4       	ldi	r27, 0x42	; 66
    222a:	f9 01       	movw	r30, r18
    222c:	80 8f       	std	Z+24, r24	; 0x18
    222e:	91 8f       	std	Z+25, r25	; 0x19
    2230:	a2 8f       	std	Z+26, r26	; 0x1a
    2232:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 ea       	ldi	r26, 0xA0	; 160
    223e:	b1 e4       	ldi	r27, 0x41	; 65
    2240:	f9 01       	movw	r30, r18
    2242:	84 8f       	std	Z+28, r24	; 0x1c
    2244:	95 8f       	std	Z+29, r25	; 0x1d
    2246:	a6 8f       	std	Z+30, r26	; 0x1e
    2248:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ea       	ldi	r26, 0xA0	; 160
    2254:	b0 e4       	ldi	r27, 0x40	; 64
    2256:	f9 01       	movw	r30, r18
    2258:	80 a3       	std	Z+32, r24	; 0x20
    225a:	91 a3       	std	Z+33, r25	; 0x21
    225c:	a2 a3       	std	Z+34, r26	; 0x22
    225e:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2260:	74 c0       	rjmp	.+232    	; 0x234a <__stack+0x14b>
  case DHT12:
    sensor->max_value = 95.0F;
    2262:	2b 81       	ldd	r18, Y+3	; 0x03
    2264:	3c 81       	ldd	r19, Y+4	; 0x04
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	ae eb       	ldi	r26, 0xBE	; 190
    226c:	b2 e4       	ldi	r27, 0x42	; 66
    226e:	f9 01       	movw	r30, r18
    2270:	80 8f       	std	Z+24, r24	; 0x18
    2272:	91 8f       	std	Z+25, r25	; 0x19
    2274:	a2 8f       	std	Z+26, r26	; 0x1a
    2276:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2278:	2b 81       	ldd	r18, Y+3	; 0x03
    227a:	3c 81       	ldd	r19, Y+4	; 0x04
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 ea       	ldi	r26, 0xA0	; 160
    2282:	b1 e4       	ldi	r27, 0x41	; 65
    2284:	f9 01       	movw	r30, r18
    2286:	84 8f       	std	Z+28, r24	; 0x1c
    2288:	95 8f       	std	Z+29, r25	; 0x1d
    228a:	a6 8f       	std	Z+30, r26	; 0x1e
    228c:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	3c 81       	ldd	r19, Y+4	; 0x04
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 ea       	ldi	r26, 0xA0	; 160
    2298:	b0 e4       	ldi	r27, 0x40	; 64
    229a:	f9 01       	movw	r30, r18
    229c:	80 a3       	std	Z+32, r24	; 0x20
    229e:	91 a3       	std	Z+33, r25	; 0x21
    22a0:	a2 a3       	std	Z+34, r26	; 0x22
    22a2:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    22a4:	52 c0       	rjmp	.+164    	; 0x234a <__stack+0x14b>
  case DHT21:
    sensor->max_value = 100.0F;
    22a6:	2b 81       	ldd	r18, Y+3	; 0x03
    22a8:	3c 81       	ldd	r19, Y+4	; 0x04
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a8 ec       	ldi	r26, 0xC8	; 200
    22b0:	b2 e4       	ldi	r27, 0x42	; 66
    22b2:	f9 01       	movw	r30, r18
    22b4:	80 8f       	std	Z+24, r24	; 0x18
    22b6:	91 8f       	std	Z+25, r25	; 0x19
    22b8:	a2 8f       	std	Z+26, r26	; 0x1a
    22ba:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	fc 01       	movw	r30, r24
    22c2:	14 8e       	std	Z+28, r1	; 0x1c
    22c4:	15 8e       	std	Z+29, r1	; 0x1d
    22c6:	16 8e       	std	Z+30, r1	; 0x1e
    22c8:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    22ca:	2b 81       	ldd	r18, Y+3	; 0x03
    22cc:	3c 81       	ldd	r19, Y+4	; 0x04
    22ce:	8d ec       	ldi	r24, 0xCD	; 205
    22d0:	9c ec       	ldi	r25, 0xCC	; 204
    22d2:	ac ec       	ldi	r26, 0xCC	; 204
    22d4:	bd e3       	ldi	r27, 0x3D	; 61
    22d6:	f9 01       	movw	r30, r18
    22d8:	80 a3       	std	Z+32, r24	; 0x20
    22da:	91 a3       	std	Z+33, r25	; 0x21
    22dc:	a2 a3       	std	Z+34, r26	; 0x22
    22de:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    22e0:	34 c0       	rjmp	.+104    	; 0x234a <__stack+0x14b>
  case DHT22:
    sensor->max_value = 100.0F;
    22e2:	2b 81       	ldd	r18, Y+3	; 0x03
    22e4:	3c 81       	ldd	r19, Y+4	; 0x04
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a8 ec       	ldi	r26, 0xC8	; 200
    22ec:	b2 e4       	ldi	r27, 0x42	; 66
    22ee:	f9 01       	movw	r30, r18
    22f0:	80 8f       	std	Z+24, r24	; 0x18
    22f2:	91 8f       	std	Z+25, r25	; 0x19
    22f4:	a2 8f       	std	Z+26, r26	; 0x1a
    22f6:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	fc 01       	movw	r30, r24
    22fe:	14 8e       	std	Z+28, r1	; 0x1c
    2300:	15 8e       	std	Z+29, r1	; 0x1d
    2302:	16 8e       	std	Z+30, r1	; 0x1e
    2304:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    2306:	2b 81       	ldd	r18, Y+3	; 0x03
    2308:	3c 81       	ldd	r19, Y+4	; 0x04
    230a:	8d ec       	ldi	r24, 0xCD	; 205
    230c:	9c ec       	ldi	r25, 0xCC	; 204
    230e:	ac ec       	ldi	r26, 0xCC	; 204
    2310:	bd e3       	ldi	r27, 0x3D	; 61
    2312:	f9 01       	movw	r30, r18
    2314:	80 a3       	std	Z+32, r24	; 0x20
    2316:	91 a3       	std	Z+33, r25	; 0x21
    2318:	a2 a3       	std	Z+34, r26	; 0x22
    231a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    231c:	16 c0       	rjmp	.+44     	; 0x234a <__stack+0x14b>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	fc 01       	movw	r30, r24
    2324:	10 8e       	std	Z+24, r1	; 0x18
    2326:	11 8e       	std	Z+25, r1	; 0x19
    2328:	12 8e       	std	Z+26, r1	; 0x1a
    232a:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	fc 01       	movw	r30, r24
    2332:	14 8e       	std	Z+28, r1	; 0x1c
    2334:	15 8e       	std	Z+29, r1	; 0x1d
    2336:	16 8e       	std	Z+30, r1	; 0x1e
    2338:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	fc 01       	movw	r30, r24
    2340:	10 a2       	std	Z+32, r1	; 0x20
    2342:	11 a2       	std	Z+33, r1	; 0x21
    2344:	12 a2       	std	Z+34, r1	; 0x22
    2346:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2348:	00 00       	nop
  }
}
    234a:	00 00       	nop
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	08 95       	ret

0000235a <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    235a:	0f 93       	push	r16
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	28 97       	sbiw	r28, 0x08	; 8
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	4b 83       	std	Y+3, r20	; 0x03
    2376:	5c 83       	std	Y+4, r21	; 0x04
    2378:	6d 83       	std	Y+5, r22	; 0x05
    237a:	7e 83       	std	Y+6, r23	; 0x06
    237c:	2f 83       	std	Y+7, r18	; 0x07
    237e:	08 87       	std	Y+8, r16	; 0x08
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	ad 81       	ldd	r26, Y+5	; 0x05
    2386:	be 81       	ldd	r27, Y+6	; 0x06
    2388:	e9 81       	ldd	r30, Y+1	; 0x01
    238a:	fa 81       	ldd	r31, Y+2	; 0x02
    238c:	08 85       	ldd	r16, Y+8	; 0x08
    238e:	2f 81       	ldd	r18, Y+7	; 0x07
    2390:	ac 01       	movw	r20, r24
    2392:	bd 01       	movw	r22, r26
    2394:	cf 01       	movw	r24, r30
    2396:	0b d0       	rcall	.+22     	; 0x23ae <_ZN11SPISettings16init_MightInlineEmhh>
    2398:	00 00       	nop
    239a:	28 96       	adiw	r28, 0x08	; 8
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	0f 91       	pop	r16
    23ac:	08 95       	ret

000023ae <_ZN11SPISettings16init_MightInlineEmhh>:
    23ae:	0f 93       	push	r16
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	65 97       	sbiw	r28, 0x15	; 21
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	9f 87       	std	Y+15, r25	; 0x0f
    23c6:	8e 87       	std	Y+14, r24	; 0x0e
    23c8:	48 8b       	std	Y+16, r20	; 0x10
    23ca:	59 8b       	std	Y+17, r21	; 0x11
    23cc:	6a 8b       	std	Y+18, r22	; 0x12
    23ce:	7b 8b       	std	Y+19, r23	; 0x13
    23d0:	2c 8b       	std	Y+20, r18	; 0x14
    23d2:	0d 8b       	std	Y+21, r16	; 0x15
    23d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	88 89       	ldd	r24, Y+16	; 0x10
    23de:	99 89       	ldd	r25, Y+17	; 0x11
    23e0:	aa 89       	ldd	r26, Y+18	; 0x12
    23e2:	bb 89       	ldd	r27, Y+19	; 0x13
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	ad 83       	std	Y+5, r26	; 0x05
    23ea:	be 83       	std	Y+6, r27	; 0x06
    23ec:	8c 89       	ldd	r24, Y+20	; 0x14
    23ee:	8f 83       	std	Y+7, r24	; 0x07
    23f0:	8d 89       	ldd	r24, Y+21	; 0x15
    23f2:	88 87       	std	Y+8, r24	; 0x08
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	92 e1       	ldi	r25, 0x12	; 18
    23f8:	aa e7       	ldi	r26, 0x7A	; 122
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	89 87       	std	Y+9, r24	; 0x09
    23fe:	9a 87       	std	Y+10, r25	; 0x0a
    2400:	ab 87       	std	Y+11, r26	; 0x0b
    2402:	bc 87       	std	Y+12, r27	; 0x0c
    2404:	1d 86       	std	Y+13, r1	; 0x0d
    2406:	8d 85       	ldd	r24, Y+13	; 0x0d
    2408:	86 30       	cpi	r24, 0x06	; 6
    240a:	e8 f4       	brcc	.+58     	; 0x2446 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    240c:	2b 81       	ldd	r18, Y+3	; 0x03
    240e:	3c 81       	ldd	r19, Y+4	; 0x04
    2410:	4d 81       	ldd	r20, Y+5	; 0x05
    2412:	5e 81       	ldd	r21, Y+6	; 0x06
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	ab 85       	ldd	r26, Y+11	; 0x0b
    241a:	bc 85       	ldd	r27, Y+12	; 0x0c
    241c:	28 17       	cp	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	4a 07       	cpc	r20, r26
    2422:	5b 07       	cpc	r21, r27
    2424:	80 f4       	brcc	.+32     	; 0x2446 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	ab 85       	ldd	r26, Y+11	; 0x0b
    242c:	bc 85       	ldd	r27, Y+12	; 0x0c
    242e:	b6 95       	lsr	r27
    2430:	a7 95       	ror	r26
    2432:	97 95       	ror	r25
    2434:	87 95       	ror	r24
    2436:	89 87       	std	Y+9, r24	; 0x09
    2438:	9a 87       	std	Y+10, r25	; 0x0a
    243a:	ab 87       	std	Y+11, r26	; 0x0b
    243c:	bc 87       	std	Y+12, r27	; 0x0c
    243e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2440:	8f 5f       	subi	r24, 0xFF	; 255
    2442:	8d 87       	std	Y+13, r24	; 0x0d
    2444:	e0 cf       	rjmp	.-64     	; 0x2406 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	86 30       	cpi	r24, 0x06	; 6
    244a:	11 f4       	brne	.+4      	; 0x2450 <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    244c:	87 e0       	ldi	r24, 0x07	; 7
    244e:	8d 87       	std	Y+13, r24	; 0x0d
    2450:	9d 85       	ldd	r25, Y+13	; 0x0d
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	89 27       	eor	r24, r25
    2456:	8d 87       	std	Y+13, r24	; 0x0d
    2458:	8f 81       	ldd	r24, Y+7	; 0x07
    245a:	88 23       	and	r24, r24
    245c:	11 f4       	brne	.+4      	; 0x2462 <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    245e:	80 e7       	ldi	r24, 0x70	; 112
    2460:	01 c0       	rjmp	.+2      	; 0x2464 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2462:	80 e5       	ldi	r24, 0x50	; 80
    2464:	98 85       	ldd	r25, Y+8	; 0x08
    2466:	9c 70       	andi	r25, 0x0C	; 12
    2468:	29 2f       	mov	r18, r25
    246a:	28 2b       	or	r18, r24
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	95 95       	asr	r25
    2474:	87 95       	ror	r24
    2476:	83 70       	andi	r24, 0x03	; 3
    2478:	82 2b       	or	r24, r18
    247a:	28 2f       	mov	r18, r24
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
    2484:	8d 85       	ldd	r24, Y+13	; 0x0d
    2486:	28 2f       	mov	r18, r24
    2488:	21 70       	andi	r18, 0x01	; 1
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	fc 01       	movw	r30, r24
    2490:	21 83       	std	Z+1, r18	; 0x01
    2492:	00 00       	nop
    2494:	65 96       	adiw	r28, 0x15	; 21
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret

000024a8 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9b 83       	std	Y+3, r25	; 0x03
    24b4:	8a 83       	std	Y+2, r24	; 0x02
    24b6:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    24ba:	88 23       	and	r24, r24
    24bc:	31 f1       	breq	.+76     	; 0x250a <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    24be:	8f e5       	ldi	r24, 0x5F	; 95
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	fc 01       	movw	r30, r24
    24c4:	80 81       	ld	r24, Z
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	f8 94       	cli
    24ca:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	c9 f4       	brne	.+50     	; 0x2504 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    24d2:	8d e3       	ldi	r24, 0x3D	; 61
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	fc 01       	movw	r30, r24
    24d8:	80 81       	ld	r24, Z
    24da:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <_ZN8SPIClass13interruptSaveE>
    24de:	8d e3       	ldi	r24, 0x3D	; 61
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	2d e3       	ldi	r18, 0x3D	; 61
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	f9 01       	movw	r30, r18
    24e8:	20 81       	ld	r18, Z
    24ea:	32 2f       	mov	r19, r18
    24ec:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <_ZN8SPIClass13interruptMaskE>
    24f0:	20 95       	com	r18
    24f2:	23 23       	and	r18, r19
    24f4:	fc 01       	movw	r30, r24
    24f6:	20 83       	st	Z, r18
    24f8:	8f e5       	ldi	r24, 0x5F	; 95
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	29 81       	ldd	r18, Y+1	; 0x01
    24fe:	fc 01       	movw	r30, r24
    2500:	20 83       	st	Z, r18
    2502:	03 c0       	rjmp	.+6      	; 0x250a <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <_ZN8SPIClass13interruptSaveE>
    250a:	8c e4       	ldi	r24, 0x4C	; 76
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	2a 81       	ldd	r18, Y+2	; 0x02
    2510:	fc 01       	movw	r30, r24
    2512:	20 83       	st	Z, r18
    2514:	8d e4       	ldi	r24, 0x4D	; 77
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	2b 81       	ldd	r18, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	20 83       	st	Z, r18
    251e:	00 00       	nop
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <_ZN8SPIClass8transferEh>:
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	1f 92       	push	r1
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	8e e4       	ldi	r24, 0x4E	; 78
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	29 81       	ldd	r18, Y+1	; 0x01
    253e:	fc 01       	movw	r30, r24
    2540:	20 83       	st	Z, r18
    2542:	00 00       	nop
    2544:	8d e4       	ldi	r24, 0x4D	; 77
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	fc 01       	movw	r30, r24
    254a:	80 81       	ld	r24, Z
    254c:	80 95       	com	r24
    254e:	88 1f       	adc	r24, r24
    2550:	88 27       	eor	r24, r24
    2552:	88 1f       	adc	r24, r24
    2554:	88 23       	and	r24, r24
    2556:	09 f0       	breq	.+2      	; 0x255a <_ZN8SPIClass8transferEh+0x2e>
    2558:	f5 cf       	rjmp	.-22     	; 0x2544 <_ZN8SPIClass8transferEh+0x18>
    255a:	8e e4       	ldi	r24, 0x4E	; 78
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	fc 01       	movw	r30, r24
    2560:	80 81       	ld	r24, Z
    2562:	0f 90       	pop	r0
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

0000256a <_ZN8SPIClass14endTransactionEv>:
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	1f 92       	push	r1
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    2578:	88 23       	and	r24, r24
    257a:	e1 f0       	breq	.+56     	; 0x25b4 <_ZN8SPIClass14endTransactionEv+0x4a>
    257c:	8f e5       	ldi	r24, 0x5F	; 95
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	fc 01       	movw	r30, r24
    2582:	80 81       	ld	r24, Z
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	f8 94       	cli
    2588:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	61 f4       	brne	.+24     	; 0x25a8 <_ZN8SPIClass14endTransactionEv+0x3e>
    2590:	8d e3       	ldi	r24, 0x3D	; 61
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <_ZN8SPIClass13interruptSaveE>
    2598:	fc 01       	movw	r30, r24
    259a:	20 83       	st	Z, r18
    259c:	8f e5       	ldi	r24, 0x5F	; 95
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	29 81       	ldd	r18, Y+1	; 0x01
    25a2:	fc 01       	movw	r30, r24
    25a4:	20 83       	st	Z, r18
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <_ZN8SPIClass14endTransactionEv+0x4a>
    25a8:	8f e5       	ldi	r24, 0x5F	; 95
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <_ZN8SPIClass13interruptSaveE>
    25b0:	fc 01       	movw	r30, r24
    25b2:	20 83       	st	Z, r18
    25b4:	00 00       	nop
    25b6:	0f 90       	pop	r0
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	08 95       	ret

000025be <_ZN7MFRC522C1Ehh>:
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <_ZN7MFRC522C1Ehh+0x6>
    25c4:	1f 92       	push	r1
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	6b 83       	std	Y+3, r22	; 0x03
    25d0:	4c 83       	std	Y+4, r20	; 0x04
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	2b 81       	ldd	r18, Y+3	; 0x03
    25d8:	fc 01       	movw	r30, r24
    25da:	24 87       	std	Z+12, r18	; 0x0c
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	2c 81       	ldd	r18, Y+4	; 0x04
    25e2:	fc 01       	movw	r30, r24
    25e4:	25 87       	std	Z+13, r18	; 0x0d
    25e6:	00 00       	nop
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	08 95       	ret

000025f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    25f6:	0f 93       	push	r16
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	6d 83       	std	Y+5, r22	; 0x05
    260a:	4e 83       	std	Y+6, r20	; 0x06
    260c:	00 e0       	ldi	r16, 0x00	; 0
    260e:	21 e0       	ldi	r18, 0x01	; 1
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	ba 01       	movw	r22, r20
    2616:	ce 01       	movw	r24, r28
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	9f de       	rcall	.-706    	; 0x235a <_ZN11SPISettingsC1Emhh>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	43 df       	rcall	.-378    	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	fc 01       	movw	r30, r24
    2628:	84 85       	ldd	r24, Z+12	; 0x0c
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	8e 77       	andi	r24, 0x7E	; 126
    2634:	7b df       	rcall	.-266    	; 0x252c <_ZN8SPIClass8transferEh>
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	79 df       	rcall	.-270    	; 0x252c <_ZN8SPIClass8transferEh>
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	84 85       	ldd	r24, Z+12	; 0x0c
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    2648:	90 df       	rcall	.-224    	; 0x256a <_ZN8SPIClass14endTransactionEv>
    264a:	00 00       	nop
    264c:	26 96       	adiw	r28, 0x06	; 6
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	0f 91       	pop	r16
    265e:	08 95       	ret

00002660 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    2660:	0f 93       	push	r16
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	29 97       	sbiw	r28, 0x09	; 9
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	9d 83       	std	Y+5, r25	; 0x05
    2678:	8c 83       	std	Y+4, r24	; 0x04
    267a:	6e 83       	std	Y+6, r22	; 0x06
    267c:	4f 83       	std	Y+7, r20	; 0x07
    267e:	39 87       	std	Y+9, r19	; 0x09
    2680:	28 87       	std	Y+8, r18	; 0x08
    2682:	ce 01       	movw	r24, r28
    2684:	02 96       	adiw	r24, 0x02	; 2
    2686:	00 e0       	ldi	r16, 0x00	; 0
    2688:	21 e0       	ldi	r18, 0x01	; 1
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	ba 01       	movw	r22, r20
    2690:	64 de       	rcall	.-824    	; 0x235a <_ZN11SPISettingsC1Emhh>
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	9b 81       	ldd	r25, Y+3	; 0x03
    2696:	08 df       	rcall	.-496    	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	fc 01       	movw	r30, r24
    269e:	84 85       	ldd	r24, Z+12	; 0x0c
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    26a6:	8e 81       	ldd	r24, Y+6	; 0x06
    26a8:	8e 77       	andi	r24, 0x7E	; 126
    26aa:	40 df       	rcall	.-384    	; 0x252c <_ZN8SPIClass8transferEh>
    26ac:	19 82       	std	Y+1, r1	; 0x01
    26ae:	99 81       	ldd	r25, Y+1	; 0x01
    26b0:	8f 81       	ldd	r24, Y+7	; 0x07
    26b2:	98 17       	cp	r25, r24
    26b4:	70 f4       	brcc	.+28     	; 0x26d2 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	28 85       	ldd	r18, Y+8	; 0x08
    26be:	39 85       	ldd	r19, Y+9	; 0x09
    26c0:	82 0f       	add	r24, r18
    26c2:	93 1f       	adc	r25, r19
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	31 df       	rcall	.-414    	; 0x252c <_ZN8SPIClass8transferEh>
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	ee cf       	rjmp	.-36     	; 0x26ae <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	fc 01       	movw	r30, r24
    26d8:	84 85       	ldd	r24, Z+12	; 0x0c
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    26e0:	44 df       	rcall	.-376    	; 0x256a <_ZN8SPIClass14endTransactionEv>
    26e2:	00 00       	nop
    26e4:	29 96       	adiw	r28, 0x09	; 9
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    26f8:	0f 93       	push	r16
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    2700:	00 d0       	rcall	.+0      	; 0x2702 <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	9d 83       	std	Y+5, r25	; 0x05
    2708:	8c 83       	std	Y+4, r24	; 0x04
    270a:	6e 83       	std	Y+6, r22	; 0x06
    270c:	ce 01       	movw	r24, r28
    270e:	02 96       	adiw	r24, 0x02	; 2
    2710:	00 e0       	ldi	r16, 0x00	; 0
    2712:	21 e0       	ldi	r18, 0x01	; 1
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	ba 01       	movw	r22, r20
    271a:	1f de       	rcall	.-962    	; 0x235a <_ZN11SPISettingsC1Emhh>
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	c3 de       	rcall	.-634    	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2722:	8c 81       	ldd	r24, Y+4	; 0x04
    2724:	9d 81       	ldd	r25, Y+5	; 0x05
    2726:	fc 01       	movw	r30, r24
    2728:	84 85       	ldd	r24, Z+12	; 0x0c
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	8e 77       	andi	r24, 0x7E	; 126
    2734:	80 68       	ori	r24, 0x80	; 128
    2736:	fa de       	rcall	.-524    	; 0x252c <_ZN8SPIClass8transferEh>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	f8 de       	rcall	.-528    	; 0x252c <_ZN8SPIClass8transferEh>
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	fc 01       	movw	r30, r24
    2744:	84 85       	ldd	r24, Z+12	; 0x0c
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    274c:	0e df       	rcall	.-484    	; 0x256a <_ZN8SPIClass14endTransactionEv>
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	26 96       	adiw	r28, 0x06	; 6
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret

00002764 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	2e 97       	sbiw	r28, 0x0e	; 14
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	99 87       	std	Y+9, r25	; 0x09
    277e:	88 87       	std	Y+8, r24	; 0x08
    2780:	6a 87       	std	Y+10, r22	; 0x0a
    2782:	4b 87       	std	Y+11, r20	; 0x0b
    2784:	3d 87       	std	Y+13, r19	; 0x0d
    2786:	2c 87       	std	Y+12, r18	; 0x0c
    2788:	0e 87       	std	Y+14, r16	; 0x0e
    278a:	8b 85       	ldd	r24, Y+11	; 0x0b
    278c:	88 23       	and	r24, r24
    278e:	09 f4       	brne	.+2      	; 0x2792 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    2790:	7e c0       	rjmp	.+252    	; 0x288e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    2792:	8a 85       	ldd	r24, Y+10	; 0x0a
    2794:	8e 77       	andi	r24, 0x7E	; 126
    2796:	80 68       	ori	r24, 0x80	; 128
    2798:	8c 83       	std	Y+4, r24	; 0x04
    279a:	19 82       	std	Y+1, r1	; 0x01
    279c:	ce 01       	movw	r24, r28
    279e:	06 96       	adiw	r24, 0x06	; 6
    27a0:	00 e0       	ldi	r16, 0x00	; 0
    27a2:	21 e0       	ldi	r18, 0x01	; 1
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	ba 01       	movw	r22, r20
    27aa:	d7 dd       	rcall	.-1106   	; 0x235a <_ZN11SPISettingsC1Emhh>
    27ac:	8e 81       	ldd	r24, Y+6	; 0x06
    27ae:	9f 81       	ldd	r25, Y+7	; 0x07
    27b0:	7b de       	rcall	.-778    	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27b2:	88 85       	ldd	r24, Y+8	; 0x08
    27b4:	99 85       	ldd	r25, Y+9	; 0x09
    27b6:	fc 01       	movw	r30, r24
    27b8:	84 85       	ldd	r24, Z+12	; 0x0c
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    27c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c2:	81 50       	subi	r24, 0x01	; 1
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	b1 de       	rcall	.-670    	; 0x252c <_ZN8SPIClass8transferEh>
    27ca:	99 81       	ldd	r25, Y+1	; 0x01
    27cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ce:	98 17       	cp	r25, r24
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    27d2:	48 c0       	rjmp	.+144    	; 0x2864 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	88 23       	and	r24, r24
    27d8:	a9 f5       	brne	.+106    	; 0x2844 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    27da:	8e 85       	ldd	r24, Y+14	; 0x0e
    27dc:	88 23       	and	r24, r24
    27de:	91 f1       	breq	.+100    	; 0x2844 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    27e0:	1a 82       	std	Y+2, r1	; 0x02
    27e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    27e4:	8b 83       	std	Y+3, r24	; 0x03
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	88 30       	cpi	r24, 0x08	; 8
    27ea:	90 f4       	brcc	.+36     	; 0x2810 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	2a 95       	dec	r18
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    2800:	98 2f       	mov	r25, r24
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	89 2b       	or	r24, r25
    2806:	8a 83       	std	Y+2, r24	; 0x02
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	8b 83       	std	Y+3, r24	; 0x03
    280e:	eb cf       	rjmp	.-42     	; 0x27e6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	8c de       	rcall	.-744    	; 0x252c <_ZN8SPIClass8transferEh>
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	2c 85       	ldd	r18, Y+12	; 0x0c
    281e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2820:	82 0f       	add	r24, r18
    2822:	93 1f       	adc	r25, r19
    2824:	fc 01       	movw	r30, r24
    2826:	80 81       	ld	r24, Z
    2828:	98 2f       	mov	r25, r24
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	80 95       	com	r24
    282e:	89 23       	and	r24, r25
    2830:	2d 81       	ldd	r18, Y+5	; 0x05
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	92 23       	and	r25, r18
    2836:	89 2b       	or	r24, r25
    2838:	28 2f       	mov	r18, r24
    283a:	8c 85       	ldd	r24, Y+12	; 0x0c
    283c:	9d 85       	ldd	r25, Y+13	; 0x0d
    283e:	fc 01       	movw	r30, r24
    2840:	20 83       	st	Z, r18
    2842:	0c c0       	rjmp	.+24     	; 0x285c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	88 2f       	mov	r24, r24
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	2c 85       	ldd	r18, Y+12	; 0x0c
    284c:	3d 85       	ldd	r19, Y+13	; 0x0d
    284e:	89 01       	movw	r16, r18
    2850:	08 0f       	add	r16, r24
    2852:	19 1f       	adc	r17, r25
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	6a de       	rcall	.-812    	; 0x252c <_ZN8SPIClass8transferEh>
    2858:	f8 01       	movw	r30, r16
    285a:	80 83       	st	Z, r24
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	b3 cf       	rjmp	.-154    	; 0x27ca <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	2c 85       	ldd	r18, Y+12	; 0x0c
    286c:	3d 85       	ldd	r19, Y+13	; 0x0d
    286e:	89 01       	movw	r16, r18
    2870:	08 0f       	add	r16, r24
    2872:	19 1f       	adc	r17, r25
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	5a de       	rcall	.-844    	; 0x252c <_ZN8SPIClass8transferEh>
    2878:	f8 01       	movw	r30, r16
    287a:	80 83       	st	Z, r24
    287c:	88 85       	ldd	r24, Y+8	; 0x08
    287e:	99 85       	ldd	r25, Y+9	; 0x09
    2880:	fc 01       	movw	r30, r24
    2882:	84 85       	ldd	r24, Z+12	; 0x0c
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    288a:	6f de       	rcall	.-802    	; 0x256a <_ZN8SPIClass14endTransactionEv>
    288c:	01 c0       	rjmp	.+2      	; 0x2890 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    288e:	00 00       	nop
    2890:	2e 96       	adiw	r28, 0x0e	; 14
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

000028a6 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    28ac:	1f 92       	push	r1
    28ae:	1f 92       	push	r1
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9b 83       	std	Y+3, r25	; 0x03
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	6c 83       	std	Y+4, r22	; 0x04
    28ba:	4d 83       	std	Y+5, r20	; 0x05
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	6c 81       	ldd	r22, Y+4	; 0x04
    28c2:	1a df       	rcall	.-460    	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	99 81       	ldd	r25, Y+1	; 0x01
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	29 2f       	mov	r18, r25
    28cc:	28 2b       	or	r18, r24
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	42 2f       	mov	r20, r18
    28d4:	6c 81       	ldd	r22, Y+4	; 0x04
    28d6:	8f de       	rcall	.-738    	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    28d8:	00 00       	nop
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	08 95       	ret

000028ea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    28f0:	1f 92       	push	r1
    28f2:	1f 92       	push	r1
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	9b 83       	std	Y+3, r25	; 0x03
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	6c 83       	std	Y+4, r22	; 0x04
    28fe:	4d 83       	std	Y+5, r20	; 0x05
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	6c 81       	ldd	r22, Y+4	; 0x04
    2906:	f8 de       	rcall	.-528    	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	98 2f       	mov	r25, r24
    290e:	90 95       	com	r25
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	89 23       	and	r24, r25
    2914:	28 2f       	mov	r18, r24
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	42 2f       	mov	r20, r18
    291c:	6c 81       	ldd	r22, Y+4	; 0x04
    291e:	6b de       	rcall	.-810    	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2920:	00 00       	nop
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret

00002932 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	2a 97       	sbiw	r28, 0x0a	; 10
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	9d 83       	std	Y+5, r25	; 0x05
    294c:	8c 83       	std	Y+4, r24	; 0x04
    294e:	7f 83       	std	Y+7, r23	; 0x07
    2950:	6e 83       	std	Y+6, r22	; 0x06
    2952:	48 87       	std	Y+8, r20	; 0x08
    2954:	3a 87       	std	Y+10, r19	; 0x0a
    2956:	29 87       	std	Y+9, r18	; 0x09
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	9d 81       	ldd	r25, Y+5	; 0x05
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	62 e0       	ldi	r22, 0x02	; 2
    2960:	4a de       	rcall	.-876    	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	44 e0       	ldi	r20, 0x04	; 4
    2968:	6a e0       	ldi	r22, 0x0A	; 10
    296a:	45 de       	rcall	.-886    	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    296c:	8c 81       	ldd	r24, Y+4	; 0x04
    296e:	9d 81       	ldd	r25, Y+5	; 0x05
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	64 e1       	ldi	r22, 0x14	; 20
    2974:	98 df       	rcall	.-208    	; 0x28a6 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2976:	2e 81       	ldd	r18, Y+6	; 0x06
    2978:	3f 81       	ldd	r19, Y+7	; 0x07
    297a:	8c 81       	ldd	r24, Y+4	; 0x04
    297c:	9d 81       	ldd	r25, Y+5	; 0x05
    297e:	48 85       	ldd	r20, Y+8	; 0x08
    2980:	62 e1       	ldi	r22, 0x12	; 18
    2982:	6e de       	rcall	.-804    	; 0x2660 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2984:	8c 81       	ldd	r24, Y+4	; 0x04
    2986:	9d 81       	ldd	r25, Y+5	; 0x05
    2988:	43 e0       	ldi	r20, 0x03	; 3
    298a:	62 e0       	ldi	r22, 0x02	; 2
    298c:	34 de       	rcall	.-920    	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    298e:	88 e8       	ldi	r24, 0x88	; 136
    2990:	93 e1       	ldi	r25, 0x13	; 19
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	6a e0       	ldi	r22, 0x0A	; 10
    299c:	ad de       	rcall	.-678    	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    299e:	8b 83       	std	Y+3, r24	; 0x03
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	84 70       	andi	r24, 0x04	; 4
    29a8:	99 27       	eor	r25, r25
    29aa:	89 2b       	or	r24, r25
    29ac:	79 f4       	brne	.+30     	; 0x29cc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	21 e0       	ldi	r18, 0x01	; 1
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	89 2b       	or	r24, r25
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	22 23       	and	r18, r18
    29c6:	39 f3       	breq	.-50     	; 0x2996 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	1b c0       	rjmp	.+54     	; 0x2a02 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    29cc:	00 00       	nop
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	9d 81       	ldd	r25, Y+5	; 0x05
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	62 e0       	ldi	r22, 0x02	; 2
    29d6:	0f de       	rcall	.-994    	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    29d8:	8c 81       	ldd	r24, Y+4	; 0x04
    29da:	9d 81       	ldd	r25, Y+5	; 0x05
    29dc:	64 e4       	ldi	r22, 0x44	; 68
    29de:	8c de       	rcall	.-744    	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29e0:	28 2f       	mov	r18, r24
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	fc 01       	movw	r30, r24
    29e8:	20 83       	st	Z, r18
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	8c 01       	movw	r16, r24
    29f0:	0f 5f       	subi	r16, 0xFF	; 255
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04
    29f6:	9d 81       	ldd	r25, Y+5	; 0x05
    29f8:	62 e4       	ldi	r22, 0x42	; 66
    29fa:	7e de       	rcall	.-772    	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29fc:	f8 01       	movw	r30, r16
    29fe:	80 83       	st	Z, r24
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	2a 96       	adiw	r28, 0x0a	; 10
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	08 95       	ret

00002a18 <_ZN7MFRC5228PCD_InitEv>:
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	1f 92       	push	r1
    2a1e:	1f 92       	push	r1
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	84 85       	ldd	r24, Z+12	; 0x0c
    2a30:	61 e0       	ldi	r22, 0x01	; 1
    2a32:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	84 85       	ldd	r24, Z+12	; 0x0c
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
    2a40:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	fc 01       	movw	r30, r24
    2a4a:	85 85       	ldd	r24, Z+13	; 0x0d
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	fc 01       	movw	r30, r24
    2a58:	85 85       	ldd	r24, Z+13	; 0x0d
    2a5a:	0e 94 47 2c 	call	0x588e	; 0x588e <digitalRead>
    2a5e:	21 e0       	ldi	r18, 0x01	; 1
    2a60:	89 2b       	or	r24, r25
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <_ZN7MFRC5228PCD_InitEv+0x4e>
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	22 23       	and	r18, r18
    2a68:	71 f0       	breq	.+28     	; 0x2a86 <_ZN7MFRC5228PCD_InitEv+0x6e>
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	fc 01       	movw	r30, r24
    2a70:	85 85       	ldd	r24, Z+13	; 0x0d
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    2a78:	62 e3       	ldi	r22, 0x32	; 50
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
    2a84:	03 c0       	rjmp	.+6      	; 0x2a8c <_ZN7MFRC5228PCD_InitEv+0x74>
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	27 d0       	rcall	.+78     	; 0x2ada <_ZN7MFRC5229PCD_ResetEv>
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	64 e5       	ldi	r22, 0x54	; 84
    2a94:	b0 dd       	rcall	.-1184   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	49 ea       	ldi	r20, 0xA9	; 169
    2a9c:	66 e5       	ldi	r22, 0x56	; 86
    2a9e:	ab dd       	rcall	.-1194   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa4:	43 e0       	ldi	r20, 0x03	; 3
    2aa6:	68 e5       	ldi	r22, 0x58	; 88
    2aa8:	a6 dd       	rcall	.-1204   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	48 ee       	ldi	r20, 0xE8	; 232
    2ab0:	6a e5       	ldi	r22, 0x5A	; 90
    2ab2:	a1 dd       	rcall	.-1214   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	40 e4       	ldi	r20, 0x40	; 64
    2aba:	6a e2       	ldi	r22, 0x2A	; 42
    2abc:	9c dd       	rcall	.-1224   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	4d e3       	ldi	r20, 0x3D	; 61
    2ac4:	62 e2       	ldi	r22, 0x22	; 34
    2ac6:	97 dd       	rcall	.-1234   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	2e d0       	rcall	.+92     	; 0x2b2a <_ZN7MFRC52213PCD_AntennaOnEv>
    2ace:	00 00       	nop
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <_ZN7MFRC5229PCD_ResetEv>:
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	1f 92       	push	r1
    2ae0:	1f 92       	push	r1
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	4f e0       	ldi	r20, 0x0F	; 15
    2af0:	62 e0       	ldi	r22, 0x02	; 2
    2af2:	81 dd       	rcall	.-1278   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2af4:	62 e3       	ldi	r22, 0x32	; 50
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <delay>
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	62 e0       	ldi	r22, 0x02	; 2
    2b06:	f8 dd       	rcall	.-1040   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	80 71       	andi	r24, 0x10	; 16
    2b0e:	99 27       	eor	r25, r25
    2b10:	21 e0       	ldi	r18, 0x01	; 1
    2b12:	89 2b       	or	r24, r25
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	22 23       	and	r18, r18
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <_ZN7MFRC5229PCD_ResetEv+0x44>
    2b1c:	f1 cf       	rjmp	.-30     	; 0x2b00 <_ZN7MFRC5229PCD_ResetEv+0x26>
    2b1e:	00 00       	nop
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	08 95       	ret

00002b2a <_ZN7MFRC52213PCD_AntennaOnEv>:
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	9b 83       	std	Y+3, r25	; 0x03
    2b36:	8a 83       	std	Y+2, r24	; 0x02
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3c:	68 e2       	ldi	r22, 0x28	; 40
    2b3e:	dc dd       	rcall	.-1096   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	83 70       	andi	r24, 0x03	; 3
    2b4a:	99 27       	eor	r25, r25
    2b4c:	03 97       	sbiw	r24, 0x03	; 3
    2b4e:	41 f0       	breq	.+16     	; 0x2b60 <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	28 2f       	mov	r18, r24
    2b54:	23 60       	ori	r18, 0x03	; 3
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5a:	42 2f       	mov	r20, r18
    2b5c:	68 e2       	ldi	r22, 0x28	; 40
    2b5e:	4b dd       	rcall	.-1386   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b60:	00 00       	nop
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2b6e:	8f 92       	push	r8
    2b70:	af 92       	push	r10
    2b72:	bf 92       	push	r11
    2b74:	cf 92       	push	r12
    2b76:	df 92       	push	r13
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	2e 97       	sbiw	r28, 0x0e	; 14
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	9b 83       	std	Y+3, r25	; 0x03
    2b96:	8a 83       	std	Y+2, r24	; 0x02
    2b98:	7d 83       	std	Y+5, r23	; 0x05
    2b9a:	6c 83       	std	Y+4, r22	; 0x04
    2b9c:	4e 83       	std	Y+6, r20	; 0x06
    2b9e:	38 87       	std	Y+8, r19	; 0x08
    2ba0:	2f 83       	std	Y+7, r18	; 0x07
    2ba2:	1a 87       	std	Y+10, r17	; 0x0a
    2ba4:	09 87       	std	Y+9, r16	; 0x09
    2ba6:	fc 86       	std	Y+12, r15	; 0x0c
    2ba8:	eb 86       	std	Y+11, r14	; 0x0b
    2baa:	cd 86       	std	Y+13, r12	; 0x0d
    2bac:	ae 86       	std	Y+14, r10	; 0x0e
    2bae:	80 e3       	ldi	r24, 0x30	; 48
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	eb 85       	ldd	r30, Y+11	; 0x0b
    2bb4:	fc 85       	ldd	r31, Y+12	; 0x0c
    2bb6:	69 85       	ldd	r22, Y+9	; 0x09
    2bb8:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bba:	4f 81       	ldd	r20, Y+7	; 0x07
    2bbc:	58 85       	ldd	r21, Y+8	; 0x08
    2bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	ae 85       	ldd	r26, Y+14	; 0x0e
    2bc8:	af 93       	push	r26
    2bca:	8d 84       	ldd	r8, Y+13	; 0x0d
    2bcc:	5f 01       	movw	r10, r30
    2bce:	6b 01       	movw	r12, r22
    2bd0:	7a 01       	movw	r14, r20
    2bd2:	0e 81       	ldd	r16, Y+6	; 0x06
    2bd4:	49 81       	ldd	r20, Y+1	; 0x01
    2bd6:	6c e0       	ldi	r22, 0x0C	; 12
    2bd8:	13 d0       	rcall	.+38     	; 0x2c00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2bda:	0f 90       	pop	r0
    2bdc:	2e 96       	adiw	r28, 0x0e	; 14
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	ff 90       	pop	r15
    2bf2:	ef 90       	pop	r14
    2bf4:	df 90       	pop	r13
    2bf6:	cf 90       	pop	r12
    2bf8:	bf 90       	pop	r11
    2bfa:	af 90       	pop	r10
    2bfc:	8f 90       	pop	r8
    2bfe:	08 95       	ret

00002c00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2c00:	8f 92       	push	r8
    2c02:	af 92       	push	r10
    2c04:	bf 92       	push	r11
    2c06:	cf 92       	push	r12
    2c08:	df 92       	push	r13
    2c0a:	ef 92       	push	r14
    2c0c:	ff 92       	push	r15
    2c0e:	0f 93       	push	r16
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	68 97       	sbiw	r28, 0x18	; 24
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	9c 87       	std	Y+12, r25	; 0x0c
    2c26:	8b 87       	std	Y+11, r24	; 0x0b
    2c28:	6d 87       	std	Y+13, r22	; 0x0d
    2c2a:	4e 87       	std	Y+14, r20	; 0x0e
    2c2c:	38 8b       	std	Y+16, r19	; 0x10
    2c2e:	2f 87       	std	Y+15, r18	; 0x0f
    2c30:	09 8b       	std	Y+17, r16	; 0x11
    2c32:	fb 8a       	std	Y+19, r15	; 0x13
    2c34:	ea 8a       	std	Y+18, r14	; 0x12
    2c36:	dd 8a       	std	Y+21, r13	; 0x15
    2c38:	cc 8a       	std	Y+20, r12	; 0x14
    2c3a:	bf 8a       	std	Y+23, r11	; 0x17
    2c3c:	ae 8a       	std	Y+22, r10	; 0x16
    2c3e:	88 8e       	std	Y+24, r8	; 0x18
    2c40:	8e 89       	ldd	r24, Y+22	; 0x16
    2c42:	9f 89       	ldd	r25, Y+23	; 0x17
    2c44:	89 2b       	or	r24, r25
    2c46:	29 f0       	breq	.+10     	; 0x2c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    2c48:	8e 89       	ldd	r24, Y+22	; 0x16
    2c4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	80 81       	ld	r24, Z
    2c50:	01 c0       	rjmp	.+2      	; 0x2c54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	8c 83       	std	Y+4, r24	; 0x04
    2c56:	88 8d       	ldd	r24, Y+24	; 0x18
    2c58:	98 2f       	mov	r25, r24
    2c5a:	92 95       	swap	r25
    2c5c:	90 7f       	andi	r25, 0xF0	; 240
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	89 0f       	add	r24, r25
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c66:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	62 e0       	ldi	r22, 0x02	; 2
    2c6c:	c4 dc       	rcall	.-1656   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	68 e0       	ldi	r22, 0x08	; 8
    2c76:	bf dc       	rcall	.-1666   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c78:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	64 e1       	ldi	r22, 0x14	; 20
    2c80:	12 de       	rcall	.-988    	; 0x28a6 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2c82:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c84:	38 89       	ldd	r19, Y+16	; 0x10
    2c86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c88:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c8a:	49 89       	ldd	r20, Y+17	; 0x11
    2c8c:	62 e1       	ldi	r22, 0x12	; 18
    2c8e:	e8 dc       	rcall	.-1584   	; 0x2660 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2c90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c92:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c94:	4d 81       	ldd	r20, Y+5	; 0x05
    2c96:	6a e1       	ldi	r22, 0x1A	; 26
    2c98:	ae dc       	rcall	.-1700   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c9e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ca0:	62 e0       	ldi	r22, 0x02	; 2
    2ca2:	a9 dc       	rcall	.-1710   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	8c 30       	cpi	r24, 0x0C	; 12
    2ca8:	29 f4       	brne	.+10     	; 0x2cb4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2caa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cac:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cae:	40 e8       	ldi	r20, 0x80	; 128
    2cb0:	6a e1       	ldi	r22, 0x1A	; 26
    2cb2:	f9 dd       	rcall	.-1038   	; 0x28a6 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2cb4:	80 ed       	ldi	r24, 0xD0	; 208
    2cb6:	97 e0       	ldi	r25, 0x07	; 7
    2cb8:	9b 83       	std	Y+3, r25	; 0x03
    2cba:	8a 83       	std	Y+2, r24	; 0x02
    2cbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cc0:	68 e0       	ldi	r22, 0x08	; 8
    2cc2:	1a dd       	rcall	.-1484   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2cc4:	8e 83       	std	Y+6, r24	; 0x06
    2cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cca:	89 23       	and	r24, r25
    2ccc:	88 23       	and	r24, r24
    2cce:	c1 f4       	brne	.+48     	; 0x2d00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    2cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	81 70       	andi	r24, 0x01	; 1
    2cd8:	99 27       	eor	r25, r25
    2cda:	89 2b       	or	r24, r25
    2cdc:	11 f0       	breq	.+4      	; 0x2ce2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	b4 c0       	rjmp	.+360    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	9b 83       	std	Y+3, r25	; 0x03
    2cea:	8a 83       	std	Y+2, r24	; 0x02
    2cec:	21 e0       	ldi	r18, 0x01	; 1
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	89 2b       	or	r24, r25
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	22 23       	and	r18, r18
    2cfa:	01 f3       	breq	.-64     	; 0x2cbc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
    2cfe:	a5 c0       	rjmp	.+330    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d00:	00 00       	nop
    2d02:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d04:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d06:	6c e0       	ldi	r22, 0x0C	; 12
    2d08:	f7 dc       	rcall	.-1554   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d0a:	8f 83       	std	Y+7, r24	; 0x07
    2d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	83 71       	andi	r24, 0x13	; 19
    2d14:	99 27       	eor	r25, r25
    2d16:	89 2b       	or	r24, r25
    2d18:	11 f0       	breq	.+4      	; 0x2d1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	96 c0       	rjmp	.+300    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d1e:	8a 89       	ldd	r24, Y+18	; 0x12
    2d20:	9b 89       	ldd	r25, Y+19	; 0x13
    2d22:	89 2b       	or	r24, r25
    2d24:	71 f1       	breq	.+92     	; 0x2d82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2d26:	8c 89       	ldd	r24, Y+20	; 0x14
    2d28:	9d 89       	ldd	r25, Y+21	; 0x15
    2d2a:	89 2b       	or	r24, r25
    2d2c:	51 f1       	breq	.+84     	; 0x2d82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d30:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d32:	64 e1       	ldi	r22, 0x14	; 20
    2d34:	e1 dc       	rcall	.-1598   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d36:	8e 83       	std	Y+6, r24	; 0x06
    2d38:	8c 89       	ldd	r24, Y+20	; 0x14
    2d3a:	9d 89       	ldd	r25, Y+21	; 0x15
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	90 81       	ld	r25, Z
    2d40:	8e 81       	ldd	r24, Y+6	; 0x06
    2d42:	98 17       	cp	r25, r24
    2d44:	10 f4       	brcc	.+4      	; 0x2d4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    2d46:	84 e0       	ldi	r24, 0x04	; 4
    2d48:	80 c0       	rjmp	.+256    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d4a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d4c:	9d 89       	ldd	r25, Y+21	; 0x15
    2d4e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d50:	fc 01       	movw	r30, r24
    2d52:	20 83       	st	Z, r18
    2d54:	2a 89       	ldd	r18, Y+18	; 0x12
    2d56:	3b 89       	ldd	r19, Y+19	; 0x13
    2d58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d5c:	08 8d       	ldd	r16, Y+24	; 0x18
    2d5e:	4e 81       	ldd	r20, Y+6	; 0x06
    2d60:	62 e1       	ldi	r22, 0x12	; 18
    2d62:	00 dd       	rcall	.-1536   	; 0x2764 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    2d64:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d66:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d68:	68 e1       	ldi	r22, 0x18	; 24
    2d6a:	c6 dc       	rcall	.-1652   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2d6c:	87 70       	andi	r24, 0x07	; 7
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	8e 89       	ldd	r24, Y+22	; 0x16
    2d72:	9f 89       	ldd	r25, Y+23	; 0x17
    2d74:	89 2b       	or	r24, r25
    2d76:	29 f0       	breq	.+10     	; 0x2d82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2d78:	8e 89       	ldd	r24, Y+22	; 0x16
    2d7a:	9f 89       	ldd	r25, Y+23	; 0x17
    2d7c:	29 81       	ldd	r18, Y+1	; 0x01
    2d7e:	fc 01       	movw	r30, r24
    2d80:	20 83       	st	Z, r18
    2d82:	8f 81       	ldd	r24, Y+7	; 0x07
    2d84:	88 2f       	mov	r24, r24
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	88 70       	andi	r24, 0x08	; 8
    2d8a:	99 27       	eor	r25, r25
    2d8c:	89 2b       	or	r24, r25
    2d8e:	11 f0       	breq	.+4      	; 0x2d94 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	5b c0       	rjmp	.+182    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2d94:	8a 89       	ldd	r24, Y+18	; 0x12
    2d96:	9b 89       	ldd	r25, Y+19	; 0x13
    2d98:	89 2b       	or	r24, r25
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    2d9c:	55 c0       	rjmp	.+170    	; 0x2e48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2d9e:	8c 89       	ldd	r24, Y+20	; 0x14
    2da0:	9d 89       	ldd	r25, Y+21	; 0x15
    2da2:	89 2b       	or	r24, r25
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    2da6:	50 c0       	rjmp	.+160    	; 0x2e48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2da8:	8e a1       	ldd	r24, Y+38	; 0x26
    2daa:	88 23       	and	r24, r24
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    2dae:	4c c0       	rjmp	.+152    	; 0x2e48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2db0:	8c 89       	ldd	r24, Y+20	; 0x14
    2db2:	9d 89       	ldd	r25, Y+21	; 0x15
    2db4:	fc 01       	movw	r30, r24
    2db6:	80 81       	ld	r24, Z
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	29 f4       	brne	.+10     	; 0x2dc6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	84 30       	cpi	r24, 0x04	; 4
    2dc0:	11 f4       	brne	.+4      	; 0x2dc6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2dc2:	8f ef       	ldi	r24, 0xFF	; 255
    2dc4:	42 c0       	rjmp	.+132    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2dc6:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc8:	9d 89       	ldd	r25, Y+21	; 0x15
    2dca:	fc 01       	movw	r30, r24
    2dcc:	80 81       	ld	r24, Z
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	18 f0       	brcs	.+6      	; 0x2dd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 23       	and	r24, r24
    2dd6:	11 f0       	breq	.+4      	; 0x2ddc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    2dd8:	87 e0       	ldi	r24, 0x07	; 7
    2dda:	37 c0       	rjmp	.+110    	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ddc:	8c 89       	ldd	r24, Y+20	; 0x14
    2dde:	9d 89       	ldd	r25, Y+21	; 0x15
    2de0:	fc 01       	movw	r30, r24
    2de2:	80 81       	ld	r24, Z
    2de4:	4e ef       	ldi	r20, 0xFE	; 254
    2de6:	48 0f       	add	r20, r24
    2de8:	9e 01       	movw	r18, r28
    2dea:	27 5f       	subi	r18, 0xF7	; 247
    2dec:	3f 4f       	sbci	r19, 0xFF	; 255
    2dee:	6a 89       	ldd	r22, Y+18	; 0x12
    2df0:	7b 89       	ldd	r23, Y+19	; 0x13
    2df2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2df6:	9d dd       	rcall	.-1222   	; 0x2932 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2df8:	88 87       	std	Y+8, r24	; 0x08
    2dfa:	88 85       	ldd	r24, Y+8	; 0x08
    2dfc:	88 23       	and	r24, r24
    2dfe:	11 f0       	breq	.+4      	; 0x2e04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    2e00:	88 85       	ldd	r24, Y+8	; 0x08
    2e02:	23 c0       	rjmp	.+70     	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e04:	8c 89       	ldd	r24, Y+20	; 0x14
    2e06:	9d 89       	ldd	r25, Y+21	; 0x15
    2e08:	fc 01       	movw	r30, r24
    2e0a:	80 81       	ld	r24, Z
    2e0c:	88 2f       	mov	r24, r24
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	02 97       	sbiw	r24, 0x02	; 2
    2e12:	2a 89       	ldd	r18, Y+18	; 0x12
    2e14:	3b 89       	ldd	r19, Y+19	; 0x13
    2e16:	82 0f       	add	r24, r18
    2e18:	93 1f       	adc	r25, r19
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	90 81       	ld	r25, Z
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	98 17       	cp	r25, r24
    2e22:	81 f4       	brne	.+32     	; 0x2e44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    2e24:	8c 89       	ldd	r24, Y+20	; 0x14
    2e26:	9d 89       	ldd	r25, Y+21	; 0x15
    2e28:	fc 01       	movw	r30, r24
    2e2a:	80 81       	ld	r24, Z
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	2a 89       	ldd	r18, Y+18	; 0x12
    2e34:	3b 89       	ldd	r19, Y+19	; 0x13
    2e36:	82 0f       	add	r24, r18
    2e38:	93 1f       	adc	r25, r19
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	90 81       	ld	r25, Z
    2e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e40:	98 17       	cp	r25, r24
    2e42:	11 f0       	breq	.+4      	; 0x2e48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2e44:	87 e0       	ldi	r24, 0x07	; 7
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	68 96       	adiw	r28, 0x18	; 24
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	0f 91       	pop	r16
    2e5c:	ff 90       	pop	r15
    2e5e:	ef 90       	pop	r14
    2e60:	df 90       	pop	r13
    2e62:	cf 90       	pop	r12
    2e64:	bf 90       	pop	r11
    2e66:	af 90       	pop	r10
    2e68:	8f 90       	pop	r8
    2e6a:	08 95       	ret

00002e6c <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	9a 83       	std	Y+2, r25	; 0x02
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	7c 83       	std	Y+4, r23	; 0x04
    2e7e:	6b 83       	std	Y+3, r22	; 0x03
    2e80:	5e 83       	std	Y+6, r21	; 0x06
    2e82:	4d 83       	std	Y+5, r20	; 0x05
    2e84:	2d 81       	ldd	r18, Y+5	; 0x05
    2e86:	3e 81       	ldd	r19, Y+6	; 0x06
    2e88:	4b 81       	ldd	r20, Y+3	; 0x03
    2e8a:	5c 81       	ldd	r21, Y+4	; 0x04
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e90:	66 e2       	ldi	r22, 0x26	; 38
    2e92:	09 d0       	rcall	.+18     	; 0x2ea6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    2e94:	26 96       	adiw	r28, 0x06	; 6
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	08 95       	ret

00002ea6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2ea6:	af 92       	push	r10
    2ea8:	cf 92       	push	r12
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	29 97       	sbiw	r28, 0x09	; 9
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	6d 83       	std	Y+5, r22	; 0x05
    2ecc:	5f 83       	std	Y+7, r21	; 0x07
    2ece:	4e 83       	std	Y+6, r20	; 0x06
    2ed0:	39 87       	std	Y+9, r19	; 0x09
    2ed2:	28 87       	std	Y+8, r18	; 0x08
    2ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed8:	89 2b       	or	r24, r25
    2eda:	31 f0       	breq	.+12     	; 0x2ee8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    2edc:	88 85       	ldd	r24, Y+8	; 0x08
    2ede:	99 85       	ldd	r25, Y+9	; 0x09
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	80 81       	ld	r24, Z
    2ee4:	82 30       	cpi	r24, 0x02	; 2
    2ee6:	10 f4       	brcc	.+4      	; 0x2eec <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    2ee8:	84 e0       	ldi	r24, 0x04	; 4
    2eea:	2a c0       	rjmp	.+84     	; 0x2f40 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	6c e1       	ldi	r22, 0x1C	; 28
    2ef4:	fa dc       	rcall	.-1548   	; 0x28ea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    2ef6:	87 e0       	ldi	r24, 0x07	; 7
    2ef8:	8a 83       	std	Y+2, r24	; 0x02
    2efa:	fe 01       	movw	r30, r28
    2efc:	32 96       	adiw	r30, 0x02	; 2
    2efe:	48 85       	ldd	r20, Y+8	; 0x08
    2f00:	59 85       	ldd	r21, Y+9	; 0x09
    2f02:	2e 81       	ldd	r18, Y+6	; 0x06
    2f04:	3f 81       	ldd	r19, Y+7	; 0x07
    2f06:	be 01       	movw	r22, r28
    2f08:	6b 5f       	subi	r22, 0xFB	; 251
    2f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f10:	a1 2c       	mov	r10, r1
    2f12:	c1 2c       	mov	r12, r1
    2f14:	7f 01       	movw	r14, r30
    2f16:	8a 01       	movw	r16, r20
    2f18:	41 e0       	ldi	r20, 0x01	; 1
    2f1a:	29 de       	rcall	.-942    	; 0x2b6e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	88 23       	and	r24, r24
    2f22:	11 f0       	breq	.+4      	; 0x2f28 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	0c c0       	rjmp	.+24     	; 0x2f40 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2f28:	88 85       	ldd	r24, Y+8	; 0x08
    2f2a:	99 85       	ldd	r25, Y+9	; 0x09
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	80 81       	ld	r24, Z
    2f30:	82 30       	cpi	r24, 0x02	; 2
    2f32:	19 f4       	brne	.+6      	; 0x2f3a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	88 23       	and	r24, r24
    2f38:	11 f0       	breq	.+4      	; 0x2f3e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	29 96       	adiw	r28, 0x09	; 9
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	1f 91       	pop	r17
    2f52:	0f 91       	pop	r16
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	cf 90       	pop	r12
    2f5a:	af 90       	pop	r10
    2f5c:	08 95       	ret

00002f5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    2f5e:	af 92       	push	r10
    2f60:	cf 92       	push	r12
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	a1 97       	sbiw	r28, 0x21	; 33
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f80:	8d 8f       	std	Y+29, r24	; 0x1d
    2f82:	78 a3       	std	Y+32, r23	; 0x20
    2f84:	6f 8f       	std	Y+31, r22	; 0x1f
    2f86:	49 a3       	std	Y+33, r20	; 0x21
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	8c 83       	std	Y+4, r24	; 0x04
    2f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8e:	81 35       	cpi	r24, 0x51	; 81
    2f90:	10 f0       	brcs	.+4      	; 0x2f96 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    2f92:	86 e0       	ldi	r24, 0x06	; 6
    2f94:	29 c2       	rjmp	.+1106   	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    2f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	6c e1       	ldi	r22, 0x1C	; 28
    2f9e:	a5 dc       	rcall	.-1718   	; 0x28ea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    2fa0:	19 82       	std	Y+1, r1	; 0x01
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    2fa8:	14 c2       	rjmp	.+1064   	; 0x33d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    2faa:	8c 81       	ldd	r24, Y+4	; 0x04
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	b1 f0       	breq	.+44     	; 0x2fe2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    2fb6:	83 30       	cpi	r24, 0x03	; 3
    2fb8:	91 05       	cpc	r25, r1
    2fba:	29 f1       	breq	.+74     	; 0x3006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	49 f5       	brne	.+82     	; 0x3012 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    2fc0:	83 e9       	ldi	r24, 0x93	; 147
    2fc2:	8a 8b       	std	Y+18, r24	; 0x12
    2fc4:	1f 82       	std	Y+7, r1	; 0x07
    2fc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc8:	88 23       	and	r24, r24
    2fca:	41 f0       	breq	.+16     	; 0x2fdc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    2fcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fce:	98 a1       	ldd	r25, Y+32	; 0x20
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	80 81       	ld	r24, Z
    2fd4:	85 30       	cpi	r24, 0x05	; 5
    2fd6:	10 f0       	brcs	.+4      	; 0x2fdc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	1a c0       	rjmp	.+52     	; 0x3016 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    2fe2:	85 e9       	ldi	r24, 0x95	; 149
    2fe4:	8a 8b       	std	Y+18, r24	; 0x12
    2fe6:	83 e0       	ldi	r24, 0x03	; 3
    2fe8:	8f 83       	std	Y+7, r24	; 0x07
    2fea:	89 a1       	ldd	r24, Y+33	; 0x21
    2fec:	88 23       	and	r24, r24
    2fee:	41 f0       	breq	.+16     	; 0x3000 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    2ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ff2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	80 81       	ld	r24, Z
    2ff8:	88 30       	cpi	r24, 0x08	; 8
    2ffa:	10 f0       	brcs	.+4      	; 0x3000 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	8b 83       	std	Y+3, r24	; 0x03
    3004:	08 c0       	rjmp	.+16     	; 0x3016 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3006:	87 e9       	ldi	r24, 0x97	; 151
    3008:	8a 8b       	std	Y+18, r24	; 0x12
    300a:	86 e0       	ldi	r24, 0x06	; 6
    300c:	8f 83       	std	Y+7, r24	; 0x07
    300e:	1b 82       	std	Y+3, r1	; 0x03
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3012:	85 e0       	ldi	r24, 0x05	; 5
    3014:	e9 c1       	rjmp	.+978    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3016:	8f 81       	ldd	r24, Y+7	; 0x07
    3018:	88 0f       	add	r24, r24
    301a:	88 0f       	add	r24, r24
    301c:	88 0f       	add	r24, r24
    301e:	99 a1       	ldd	r25, Y+33	; 0x21
    3020:	f9 2f       	mov	r31, r25
    3022:	f8 1b       	sub	r31, r24
    3024:	8f 2f       	mov	r24, r31
    3026:	88 87       	std	Y+8, r24	; 0x08
    3028:	88 85       	ldd	r24, Y+8	; 0x08
    302a:	88 23       	and	r24, r24
    302c:	0c f4       	brge	.+2      	; 0x3030 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    302e:	18 86       	std	Y+8, r1	; 0x08
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	8e 83       	std	Y+6, r24	; 0x06
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	88 23       	and	r24, r24
    3038:	71 f0       	breq	.+28     	; 0x3056 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    303a:	8e 81       	ldd	r24, Y+6	; 0x06
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	98 0f       	add	r25, r24
    3040:	9e 83       	std	Y+6, r25	; 0x06
    3042:	88 2f       	mov	r24, r24
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	9e 01       	movw	r18, r28
    3048:	2e 5e       	subi	r18, 0xEE	; 238
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	82 0f       	add	r24, r18
    304e:	93 1f       	adc	r25, r19
    3050:	28 e8       	ldi	r18, 0x88	; 136
    3052:	fc 01       	movw	r30, r24
    3054:	20 83       	st	Z, r18
    3056:	88 85       	ldd	r24, Y+8	; 0x08
    3058:	88 23       	and	r24, r24
    305a:	0c f4       	brge	.+2      	; 0x305e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    305c:	89 5f       	subi	r24, 0xF9	; 249
    305e:	85 95       	asr	r24
    3060:	85 95       	asr	r24
    3062:	85 95       	asr	r24
    3064:	98 2f       	mov	r25, r24
    3066:	88 85       	ldd	r24, Y+8	; 0x08
    3068:	87 70       	andi	r24, 0x07	; 7
    306a:	88 23       	and	r24, r24
    306c:	11 f0       	breq	.+4      	; 0x3072 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	89 0f       	add	r24, r25
    3076:	8c 87       	std	Y+12, r24	; 0x0c
    3078:	8c 85       	ldd	r24, Y+12	; 0x0c
    307a:	88 23       	and	r24, r24
    307c:	99 f1       	breq	.+102    	; 0x30e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	88 23       	and	r24, r24
    3082:	11 f0       	breq	.+4      	; 0x3088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	01 c0       	rjmp	.+2      	; 0x308a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    3088:	84 e0       	ldi	r24, 0x04	; 4
    308a:	8e 87       	std	Y+14, r24	; 0x0e
    308c:	9c 85       	ldd	r25, Y+12	; 0x0c
    308e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3090:	89 17       	cp	r24, r25
    3092:	10 f4       	brcc	.+4      	; 0x3098 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    3094:	8e 85       	ldd	r24, Y+14	; 0x0e
    3096:	8c 87       	std	Y+12, r24	; 0x0c
    3098:	1d 82       	std	Y+5, r1	; 0x05
    309a:	9d 81       	ldd	r25, Y+5	; 0x05
    309c:	8c 85       	ldd	r24, Y+12	; 0x0c
    309e:	98 17       	cp	r25, r24
    30a0:	08 f5       	brcc	.+66     	; 0x30e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    30a2:	8e 81       	ldd	r24, Y+6	; 0x06
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    30a6:	98 0f       	add	r25, r24
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	2f 81       	ldd	r18, Y+7	; 0x07
    30b0:	42 2f       	mov	r20, r18
    30b2:	50 e0       	ldi	r21, 0x00	; 0
    30b4:	2d 81       	ldd	r18, Y+5	; 0x05
    30b6:	22 2f       	mov	r18, r18
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	24 0f       	add	r18, r20
    30bc:	35 1f       	adc	r19, r21
    30be:	4f 8d       	ldd	r20, Y+31	; 0x1f
    30c0:	58 a1       	ldd	r21, Y+32	; 0x20
    30c2:	24 0f       	add	r18, r20
    30c4:	35 1f       	adc	r19, r21
    30c6:	2f 5f       	subi	r18, 0xFF	; 255
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	f9 01       	movw	r30, r18
    30cc:	40 81       	ld	r20, Z
    30ce:	9e 01       	movw	r18, r28
    30d0:	2e 5e       	subi	r18, 0xEE	; 238
    30d2:	3f 4f       	sbci	r19, 0xFF	; 255
    30d4:	82 0f       	add	r24, r18
    30d6:	93 1f       	adc	r25, r19
    30d8:	fc 01       	movw	r30, r24
    30da:	40 83       	st	Z, r20
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	8f 5f       	subi	r24, 0xFF	; 255
    30e0:	8d 83       	std	Y+5, r24	; 0x05
    30e2:	db cf       	rjmp	.-74     	; 0x309a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	88 23       	and	r24, r24
    30e8:	19 f0       	breq	.+6      	; 0x30f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    30ea:	88 85       	ldd	r24, Y+8	; 0x08
    30ec:	88 5f       	subi	r24, 0xF8	; 248
    30ee:	88 87       	std	Y+8, r24	; 0x08
    30f0:	1a 82       	std	Y+2, r1	; 0x02
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	88 23       	and	r24, r24
    30f6:	09 f0       	breq	.+2      	; 0x30fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    30f8:	f5 c0       	rjmp	.+490    	; 0x32e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    30fa:	88 85       	ldd	r24, Y+8	; 0x08
    30fc:	80 32       	cpi	r24, 0x20	; 32
    30fe:	3c f1       	brlt	.+78     	; 0x314e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    3100:	80 e7       	ldi	r24, 0x70	; 112
    3102:	8b 8b       	std	Y+19, r24	; 0x13
    3104:	9c 89       	ldd	r25, Y+20	; 0x14
    3106:	8d 89       	ldd	r24, Y+21	; 0x15
    3108:	98 27       	eor	r25, r24
    310a:	8e 89       	ldd	r24, Y+22	; 0x16
    310c:	98 27       	eor	r25, r24
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	89 27       	eor	r24, r25
    3112:	88 8f       	std	Y+24, r24	; 0x18
    3114:	ce 01       	movw	r24, r28
    3116:	42 96       	adiw	r24, 0x12	; 18
    3118:	9c 01       	movw	r18, r24
    311a:	29 5f       	subi	r18, 0xF9	; 249
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	be 01       	movw	r22, r28
    3120:	6e 5e       	subi	r22, 0xEE	; 238
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3126:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3128:	47 e0       	ldi	r20, 0x07	; 7
    312a:	03 dc       	rcall	.-2042   	; 0x2932 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    312c:	8f 87       	std	Y+15, r24	; 0x0f
    312e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3130:	88 23       	and	r24, r24
    3132:	11 f0       	breq	.+4      	; 0x3138 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    3134:	8f 85       	ldd	r24, Y+15	; 0x0f
    3136:	58 c1       	rjmp	.+688    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3138:	1b 8e       	std	Y+27, r1	; 0x1b
    313a:	89 e0       	ldi	r24, 0x09	; 9
    313c:	89 87       	std	Y+9, r24	; 0x09
    313e:	ce 01       	movw	r24, r28
    3140:	42 96       	adiw	r24, 0x12	; 18
    3142:	06 96       	adiw	r24, 0x06	; 6
    3144:	9b 87       	std	Y+11, r25	; 0x0b
    3146:	8a 87       	std	Y+10, r24	; 0x0a
    3148:	83 e0       	ldi	r24, 0x03	; 3
    314a:	8c 8f       	std	Y+28, r24	; 0x1c
    314c:	33 c0       	rjmp	.+102    	; 0x31b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    314e:	88 85       	ldd	r24, Y+8	; 0x08
    3150:	87 78       	andi	r24, 0x87	; 135
    3152:	88 23       	and	r24, r24
    3154:	1c f4       	brge	.+6      	; 0x315c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3156:	81 50       	subi	r24, 0x01	; 1
    3158:	88 6f       	ori	r24, 0xF8	; 248
    315a:	8f 5f       	subi	r24, 0xFF	; 255
    315c:	8b 8f       	std	Y+27, r24	; 0x1b
    315e:	88 85       	ldd	r24, Y+8	; 0x08
    3160:	88 23       	and	r24, r24
    3162:	0c f4       	brge	.+2      	; 0x3166 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    3164:	89 5f       	subi	r24, 0xF9	; 249
    3166:	85 95       	asr	r24
    3168:	85 95       	asr	r24
    316a:	85 95       	asr	r24
    316c:	8d 83       	std	Y+5, r24	; 0x05
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	8e 5f       	subi	r24, 0xFE	; 254
    3172:	8e 83       	std	Y+6, r24	; 0x06
    3174:	8e 81       	ldd	r24, Y+6	; 0x06
    3176:	98 2f       	mov	r25, r24
    3178:	92 95       	swap	r25
    317a:	90 7f       	andi	r25, 0xF0	; 240
    317c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317e:	89 0f       	add	r24, r25
    3180:	8b 8b       	std	Y+19, r24	; 0x13
    3182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3184:	88 23       	and	r24, r24
    3186:	11 f0       	breq	.+4      	; 0x318c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	01 c0       	rjmp	.+2      	; 0x318e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	89 0f       	add	r24, r25
    3192:	89 87       	std	Y+9, r24	; 0x09
    3194:	8e 81       	ldd	r24, Y+6	; 0x06
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	9e 01       	movw	r18, r28
    319c:	2e 5e       	subi	r18, 0xEE	; 238
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	82 0f       	add	r24, r18
    31a2:	93 1f       	adc	r25, r19
    31a4:	9b 87       	std	Y+11, r25	; 0x0b
    31a6:	8a 87       	std	Y+10, r24	; 0x0a
    31a8:	99 e0       	ldi	r25, 0x09	; 9
    31aa:	8e 81       	ldd	r24, Y+6	; 0x06
    31ac:	f9 2f       	mov	r31, r25
    31ae:	f8 1b       	sub	r31, r24
    31b0:	8f 2f       	mov	r24, r31
    31b2:	8c 8f       	std	Y+28, r24	; 0x1c
    31b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b6:	88 8b       	std	Y+16, r24	; 0x10
    31b8:	88 89       	ldd	r24, Y+16	; 0x10
    31ba:	98 2f       	mov	r25, r24
    31bc:	92 95       	swap	r25
    31be:	90 7f       	andi	r25, 0xF0	; 240
    31c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c2:	29 2f       	mov	r18, r25
    31c4:	28 0f       	add	r18, r24
    31c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ca:	42 2f       	mov	r20, r18
    31cc:	6a e1       	ldi	r22, 0x1A	; 26
    31ce:	13 da       	rcall	.-3034   	; 0x25f6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    31d0:	fe 01       	movw	r30, r28
    31d2:	7b 96       	adiw	r30, 0x1b	; 27
    31d4:	ae 01       	movw	r20, r28
    31d6:	44 5e       	subi	r20, 0xE4	; 228
    31d8:	5f 4f       	sbci	r21, 0xFF	; 255
    31da:	2a 85       	ldd	r18, Y+10	; 0x0a
    31dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    31de:	be 01       	movw	r22, r28
    31e0:	6e 5e       	subi	r22, 0xEE	; 238
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31e8:	a1 2c       	mov	r10, r1
    31ea:	c8 88       	ldd	r12, Y+16	; 0x10
    31ec:	7f 01       	movw	r14, r30
    31ee:	8a 01       	movw	r16, r20
    31f0:	49 85       	ldd	r20, Y+9	; 0x09
    31f2:	bd dc       	rcall	.-1670   	; 0x2b6e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    31f4:	8f 87       	std	Y+15, r24	; 0x0f
    31f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f8:	82 30       	cpi	r24, 0x02	; 2
    31fa:	09 f0       	breq	.+2      	; 0x31fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    31fc:	65 c0       	rjmp	.+202    	; 0x32c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    31fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3202:	6c e1       	ldi	r22, 0x1C	; 28
    3204:	79 da       	rcall	.-2830   	; 0x26f8 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3206:	89 8b       	std	Y+17, r24	; 0x11
    3208:	89 89       	ldd	r24, Y+17	; 0x11
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	80 72       	andi	r24, 0x20	; 32
    3210:	99 27       	eor	r25, r25
    3212:	89 2b       	or	r24, r25
    3214:	11 f0       	breq	.+4      	; 0x321a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    3216:	82 e0       	ldi	r24, 0x02	; 2
    3218:	e7 c0       	rjmp	.+462    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    321a:	89 89       	ldd	r24, Y+17	; 0x11
    321c:	8f 71       	andi	r24, 0x1F	; 31
    321e:	8d 87       	std	Y+13, r24	; 0x0d
    3220:	8d 85       	ldd	r24, Y+13	; 0x0d
    3222:	88 23       	and	r24, r24
    3224:	11 f4       	brne	.+4      	; 0x322a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3226:	80 e2       	ldi	r24, 0x20	; 32
    3228:	8d 87       	std	Y+13, r24	; 0x0d
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	88 85       	ldd	r24, Y+8	; 0x08
    3232:	08 2e       	mov	r0, r24
    3234:	00 0c       	add	r0, r0
    3236:	99 0b       	sbc	r25, r25
    3238:	82 17       	cp	r24, r18
    323a:	93 07       	cpc	r25, r19
    323c:	14 f0       	brlt	.+4      	; 0x3242 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    323e:	85 e0       	ldi	r24, 0x05	; 5
    3240:	d3 c0       	rjmp	.+422    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3242:	8d 85       	ldd	r24, Y+13	; 0x0d
    3244:	88 87       	std	Y+8, r24	; 0x08
    3246:	88 85       	ldd	r24, Y+8	; 0x08
    3248:	08 2e       	mov	r0, r24
    324a:	00 0c       	add	r0, r0
    324c:	99 0b       	sbc	r25, r25
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	87 70       	andi	r24, 0x07	; 7
    3252:	90 78       	andi	r25, 0x80	; 128
    3254:	99 23       	and	r25, r25
    3256:	24 f4       	brge	.+8      	; 0x3260 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	88 6f       	ori	r24, 0xF8	; 248
    325c:	9f 6f       	ori	r25, 0xFF	; 255
    325e:	01 96       	adiw	r24, 0x01	; 1
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	88 85       	ldd	r24, Y+8	; 0x08
    3264:	88 23       	and	r24, r24
    3266:	0c f4       	brge	.+2      	; 0x326a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3268:	89 5f       	subi	r24, 0xF9	; 249
    326a:	85 95       	asr	r24
    326c:	85 95       	asr	r24
    326e:	85 95       	asr	r24
    3270:	98 2f       	mov	r25, r24
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	88 23       	and	r24, r24
    3276:	11 f0       	breq	.+4      	; 0x327c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	01 c0       	rjmp	.+2      	; 0x327e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	89 0f       	add	r24, r25
    3280:	8f 5f       	subi	r24, 0xFF	; 255
    3282:	8e 83       	std	Y+6, r24	; 0x06
    3284:	8e 81       	ldd	r24, Y+6	; 0x06
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	2e 81       	ldd	r18, Y+6	; 0x06
    328c:	22 2f       	mov	r18, r18
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	ae 01       	movw	r20, r28
    3292:	4e 5e       	subi	r20, 0xEE	; 238
    3294:	5f 4f       	sbci	r21, 0xFF	; 255
    3296:	24 0f       	add	r18, r20
    3298:	35 1f       	adc	r19, r21
    329a:	f9 01       	movw	r30, r18
    329c:	20 81       	ld	r18, Z
    329e:	62 2f       	mov	r22, r18
    32a0:	2d 81       	ldd	r18, Y+5	; 0x05
    32a2:	42 2f       	mov	r20, r18
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	21 e0       	ldi	r18, 0x01	; 1
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    32ac:	22 0f       	add	r18, r18
    32ae:	33 1f       	adc	r19, r19
    32b0:	4a 95       	dec	r20
    32b2:	e2 f7       	brpl	.-8      	; 0x32ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    32b4:	26 2b       	or	r18, r22
    32b6:	42 2f       	mov	r20, r18
    32b8:	9e 01       	movw	r18, r28
    32ba:	2e 5e       	subi	r18, 0xEE	; 238
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	82 0f       	add	r24, r18
    32c0:	93 1f       	adc	r25, r19
    32c2:	fc 01       	movw	r30, r24
    32c4:	40 83       	st	Z, r20
    32c6:	15 cf       	rjmp	.-470    	; 0x30f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    32c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ca:	88 23       	and	r24, r24
    32cc:	11 f0       	breq	.+4      	; 0x32d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    32ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d0:	8b c0       	rjmp	.+278    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    32d2:	88 85       	ldd	r24, Y+8	; 0x08
    32d4:	80 32       	cpi	r24, 0x20	; 32
    32d6:	1c f0       	brlt	.+6      	; 0x32de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	8a 83       	std	Y+2, r24	; 0x02
    32dc:	0a cf       	rjmp	.-492    	; 0x30f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    32de:	80 e2       	ldi	r24, 0x20	; 32
    32e0:	88 87       	std	Y+8, r24	; 0x08
    32e2:	07 cf       	rjmp	.-498    	; 0x30f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    32e4:	8c 89       	ldd	r24, Y+20	; 0x14
    32e6:	88 38       	cpi	r24, 0x88	; 136
    32e8:	11 f4       	brne	.+4      	; 0x32ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    32ea:	83 e0       	ldi	r24, 0x03	; 3
    32ec:	01 c0       	rjmp	.+2      	; 0x32f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	8e 83       	std	Y+6, r24	; 0x06
    32f2:	8c 89       	ldd	r24, Y+20	; 0x14
    32f4:	88 38       	cpi	r24, 0x88	; 136
    32f6:	11 f4       	brne	.+4      	; 0x32fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    32fc:	84 e0       	ldi	r24, 0x04	; 4
    32fe:	8c 87       	std	Y+12, r24	; 0x0c
    3300:	1d 82       	std	Y+5, r1	; 0x05
    3302:	9d 81       	ldd	r25, Y+5	; 0x05
    3304:	8c 85       	ldd	r24, Y+12	; 0x0c
    3306:	98 17       	cp	r25, r24
    3308:	00 f5       	brcc	.+64     	; 0x334a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    330a:	8f 81       	ldd	r24, Y+7	; 0x07
    330c:	28 2f       	mov	r18, r24
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	88 2f       	mov	r24, r24
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	82 0f       	add	r24, r18
    3318:	93 1f       	adc	r25, r19
    331a:	2e 81       	ldd	r18, Y+6	; 0x06
    331c:	31 e0       	ldi	r19, 0x01	; 1
    331e:	32 0f       	add	r19, r18
    3320:	3e 83       	std	Y+6, r19	; 0x06
    3322:	22 2f       	mov	r18, r18
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	ae 01       	movw	r20, r28
    3328:	4e 5e       	subi	r20, 0xEE	; 238
    332a:	5f 4f       	sbci	r21, 0xFF	; 255
    332c:	24 0f       	add	r18, r20
    332e:	35 1f       	adc	r19, r21
    3330:	f9 01       	movw	r30, r18
    3332:	40 81       	ld	r20, Z
    3334:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3336:	38 a1       	ldd	r19, Y+32	; 0x20
    3338:	82 0f       	add	r24, r18
    333a:	93 1f       	adc	r25, r19
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	fc 01       	movw	r30, r24
    3340:	40 83       	st	Z, r20
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	8d 83       	std	Y+5, r24	; 0x05
    3348:	dc cf       	rjmp	.-72     	; 0x3302 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    334a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    334c:	83 30       	cpi	r24, 0x03	; 3
    334e:	19 f4       	brne	.+6      	; 0x3356 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    3350:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3352:	88 23       	and	r24, r24
    3354:	11 f0       	breq	.+4      	; 0x335a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	47 c0       	rjmp	.+142    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    335a:	ce 01       	movw	r24, r28
    335c:	42 96       	adiw	r24, 0x12	; 18
    335e:	9c 01       	movw	r18, r24
    3360:	2e 5f       	subi	r18, 0xFE	; 254
    3362:	3f 4f       	sbci	r19, 0xFF	; 255
    3364:	6a 85       	ldd	r22, Y+10	; 0x0a
    3366:	7b 85       	ldd	r23, Y+11	; 0x0b
    3368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    336a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    336c:	41 e0       	ldi	r20, 0x01	; 1
    336e:	e1 da       	rcall	.-2622   	; 0x2932 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3370:	8f 87       	std	Y+15, r24	; 0x0f
    3372:	8f 85       	ldd	r24, Y+15	; 0x0f
    3374:	88 23       	and	r24, r24
    3376:	11 f0       	breq	.+4      	; 0x337c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    3378:	8f 85       	ldd	r24, Y+15	; 0x0f
    337a:	36 c0       	rjmp	.+108    	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    337c:	2c 89       	ldd	r18, Y+20	; 0x14
    337e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3380:	9b 85       	ldd	r25, Y+11	; 0x0b
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	fc 01       	movw	r30, r24
    3386:	80 81       	ld	r24, Z
    3388:	28 17       	cp	r18, r24
    338a:	41 f4       	brne	.+16     	; 0x339c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    338c:	2d 89       	ldd	r18, Y+21	; 0x15
    338e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3390:	9b 85       	ldd	r25, Y+11	; 0x0b
    3392:	02 96       	adiw	r24, 0x02	; 2
    3394:	fc 01       	movw	r30, r24
    3396:	80 81       	ld	r24, Z
    3398:	28 17       	cp	r18, r24
    339a:	11 f0       	breq	.+4      	; 0x33a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    339c:	87 e0       	ldi	r24, 0x07	; 7
    339e:	24 c0       	rjmp	.+72     	; 0x33e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a4:	fc 01       	movw	r30, r24
    33a6:	80 81       	ld	r24, Z
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	84 70       	andi	r24, 0x04	; 4
    33ae:	99 27       	eor	r25, r25
    33b0:	89 2b       	or	r24, r25
    33b2:	21 f0       	breq	.+8      	; 0x33bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    33b4:	8c 81       	ldd	r24, Y+4	; 0x04
    33b6:	8f 5f       	subi	r24, 0xFF	; 255
    33b8:	8c 83       	std	Y+4, r24	; 0x04
    33ba:	f3 cd       	rjmp	.-1050   	; 0x2fa2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c4:	fc 01       	movw	r30, r24
    33c6:	20 81       	ld	r18, Z
    33c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33ca:	98 a1       	ldd	r25, Y+32	; 0x20
    33cc:	fc 01       	movw	r30, r24
    33ce:	23 87       	std	Z+11, r18	; 0x0b
    33d0:	e8 cd       	rjmp	.-1072   	; 0x2fa2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	89 2f       	mov	r24, r25
    33d6:	88 0f       	add	r24, r24
    33d8:	89 0f       	add	r24, r25
    33da:	21 e0       	ldi	r18, 0x01	; 1
    33dc:	28 0f       	add	r18, r24
    33de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e0:	98 a1       	ldd	r25, Y+32	; 0x20
    33e2:	fc 01       	movw	r30, r24
    33e4:	20 83       	st	Z, r18
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	a1 96       	adiw	r28, 0x21	; 33
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	cf 90       	pop	r12
    3402:	af 90       	pop	r10
    3404:	08 95       	ret

00003406 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
    340a:	00 d0       	rcall	.+0      	; 0x340c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    340c:	00 d0       	rcall	.+0      	; 0x340e <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    341a:	ae 01       	movw	r20, r28
    341c:	4c 5f       	subi	r20, 0xFC	; 252
    341e:	5f 4f       	sbci	r21, 0xFF	; 255
    3420:	9e 01       	movw	r18, r28
    3422:	2e 5f       	subi	r18, 0xFE	; 254
    3424:	3f 4f       	sbci	r19, 0xFF	; 255
    3426:	8d 81       	ldd	r24, Y+5	; 0x05
    3428:	9e 81       	ldd	r25, Y+6	; 0x06
    342a:	b9 01       	movw	r22, r18
    342c:	1f dd       	rcall	.-1474   	; 0x2e6c <_ZN7MFRC52213PICC_RequestAEPhS0_>
    342e:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	88 23       	and	r24, r24
    3434:	19 f0       	breq	.+6      	; 0x343c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	82 30       	cpi	r24, 0x02	; 2
    343a:	11 f4       	brne	.+4      	; 0x3440 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	01 c0       	rjmp	.+2      	; 0x3442 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    3440:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    3442:	26 96       	adiw	r28, 0x06	; 6
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	08 95       	ret

00003454 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	00 d0       	rcall	.+0      	; 0x345a <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	9b 83       	std	Y+3, r25	; 0x03
    3460:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    3462:	2a 81       	ldd	r18, Y+2	; 0x02
    3464:	3b 81       	ldd	r19, Y+3	; 0x03
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	9b 81       	ldd	r25, Y+3	; 0x03
    346a:	40 e0       	ldi	r20, 0x00	; 0
    346c:	b9 01       	movw	r22, r18
    346e:	77 dd       	rcall	.-1298   	; 0x2f5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    3470:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	99 81       	ldd	r25, Y+1	; 0x01
    3476:	99 23       	and	r25, r25
    3478:	09 f0       	breq	.+2      	; 0x347c <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    347a:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	08 95       	ret

00003488 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	00 d0       	rcall	.+0      	; 0x348e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    348e:	1f 92       	push	r1
    3490:	1f 92       	push	r1
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	7b 83       	std	Y+3, r23	; 0x03
    349a:	6a 83       	std	Y+2, r22	; 0x02
    349c:	5d 83       	std	Y+5, r21	; 0x05
    349e:	4c 83       	std	Y+4, r20	; 0x04
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	88 2f       	mov	r24, r24
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	8d 53       	subi	r24, 0x3D	; 61
    34a8:	9c 4f       	sbci	r25, 0xFC	; 252
    34aa:	fc 01       	movw	r30, r24
    34ac:	80 81       	ld	r24, Z
    34ae:	88 1f       	adc	r24, r24
    34b0:	88 27       	eor	r24, r24
    34b2:	88 1f       	adc	r24, r24
    34b4:	88 23       	and	r24, r24
    34b6:	31 f0       	breq	.+12     	; 0x34c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	9b 81       	ldd	r25, Y+3	; 0x03
    34bc:	fc 01       	movw	r30, r24
    34be:	11 82       	std	Z+1, r1	; 0x01
    34c0:	10 82       	st	Z, r1
    34c2:	72 c0       	rjmp	.+228    	; 0x35a8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	c9 01       	movw	r24, r18
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	82 0f       	add	r24, r18
    34d2:	93 1f       	adc	r25, r19
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	9c 01       	movw	r18, r24
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	8d 53       	subi	r24, 0x3D	; 61
    34e6:	9c 4f       	sbci	r25, 0xFC	; 252
    34e8:	fc 01       	movw	r30, r24
    34ea:	80 81       	ld	r24, Z
    34ec:	08 2e       	mov	r0, r24
    34ee:	00 0c       	add	r0, r0
    34f0:	99 0b       	sbc	r25, r25
    34f2:	28 0f       	add	r18, r24
    34f4:	39 1f       	adc	r19, r25
    34f6:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <ServoCount>
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	28 17       	cp	r18, r24
    3500:	39 07       	cpc	r19, r25
    3502:	4c f5       	brge	.+82     	; 0x3556 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	c9 01       	movw	r24, r18
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	82 0f       	add	r24, r18
    3512:	93 1f       	adc	r25, r19
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	9c 01       	movw	r18, r24
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	88 2f       	mov	r24, r24
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	8d 53       	subi	r24, 0x3D	; 61
    3526:	9c 4f       	sbci	r25, 0xFC	; 252
    3528:	fc 01       	movw	r30, r24
    352a:	80 81       	ld	r24, Z
    352c:	08 2e       	mov	r0, r24
    352e:	00 0c       	add	r0, r0
    3530:	99 0b       	sbc	r25, r25
    3532:	28 0f       	add	r18, r24
    3534:	39 1f       	adc	r19, r25
    3536:	c9 01       	movw	r24, r18
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	8d 5c       	subi	r24, 0xCD	; 205
    3542:	9c 4f       	sbci	r25, 0xFC	; 252
    3544:	fc 01       	movw	r30, r24
    3546:	80 81       	ld	r24, Z
    3548:	86 fb       	bst	r24, 6
    354a:	88 27       	eor	r24, r24
    354c:	80 f9       	bld	r24, 0
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	11 f4       	brne	.+4      	; 0x3556 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	88 23       	and	r24, r24
    355a:	31 f1       	breq	.+76     	; 0x35a8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	c9 01       	movw	r24, r18
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	82 0f       	add	r24, r18
    356a:	93 1f       	adc	r25, r19
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	9c 01       	movw	r18, r24
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	88 2f       	mov	r24, r24
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	8d 53       	subi	r24, 0x3D	; 61
    357e:	9c 4f       	sbci	r25, 0xFC	; 252
    3580:	fc 01       	movw	r30, r24
    3582:	80 81       	ld	r24, Z
    3584:	08 2e       	mov	r0, r24
    3586:	00 0c       	add	r0, r0
    3588:	99 0b       	sbc	r25, r25
    358a:	28 0f       	add	r18, r24
    358c:	39 1f       	adc	r19, r25
    358e:	c9 01       	movw	r24, r18
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	82 0f       	add	r24, r18
    3596:	93 1f       	adc	r25, r19
    3598:	8d 5c       	subi	r24, 0xCD	; 205
    359a:	9c 4f       	sbci	r25, 0xFC	; 252
    359c:	fc 01       	movw	r30, r24
    359e:	80 81       	ld	r24, Z
    35a0:	8f 73       	andi	r24, 0x3F	; 63
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	88 2f       	mov	r24, r24
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9c 01       	movw	r18, r24
    35b0:	2d 53       	subi	r18, 0x3D	; 61
    35b2:	3c 4f       	sbci	r19, 0xFC	; 252
    35b4:	f9 01       	movw	r30, r18
    35b6:	20 81       	ld	r18, Z
    35b8:	2f 5f       	subi	r18, 0xFF	; 255
    35ba:	8d 53       	subi	r24, 0x3D	; 61
    35bc:	9c 4f       	sbci	r25, 0xFC	; 252
    35be:	fc 01       	movw	r30, r24
    35c0:	20 83       	st	Z, r18
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	c9 01       	movw	r24, r18
    35ca:	88 0f       	add	r24, r24
    35cc:	99 1f       	adc	r25, r25
    35ce:	82 0f       	add	r24, r18
    35d0:	93 1f       	adc	r25, r19
    35d2:	88 0f       	add	r24, r24
    35d4:	99 1f       	adc	r25, r25
    35d6:	88 0f       	add	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	9c 01       	movw	r18, r24
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	88 2f       	mov	r24, r24
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	8d 53       	subi	r24, 0x3D	; 61
    35e4:	9c 4f       	sbci	r25, 0xFC	; 252
    35e6:	fc 01       	movw	r30, r24
    35e8:	80 81       	ld	r24, Z
    35ea:	08 2e       	mov	r0, r24
    35ec:	00 0c       	add	r0, r0
    35ee:	99 0b       	sbc	r25, r25
    35f0:	28 0f       	add	r18, r24
    35f2:	39 1f       	adc	r19, r25
    35f4:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <ServoCount>
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	28 17       	cp	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	5c f4       	brge	.+22     	; 0x3618 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	88 2f       	mov	r24, r24
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	8d 53       	subi	r24, 0x3D	; 61
    360a:	9c 4f       	sbci	r25, 0xFC	; 252
    360c:	fc 01       	movw	r30, r24
    360e:	80 81       	ld	r24, Z
    3610:	8c 30       	cpi	r24, 0x0C	; 12
    3612:	14 f4       	brge	.+4      	; 0x3618 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	01 c0       	rjmp	.+2      	; 0x361a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	88 23       	and	r24, r24
    361c:	09 f4       	brne	.+2      	; 0x3620 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    361e:	7f c0       	rjmp	.+254    	; 0x371e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	fc 01       	movw	r30, r24
    3626:	40 81       	ld	r20, Z
    3628:	51 81       	ldd	r21, Z+1	; 0x01
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	c9 01       	movw	r24, r18
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	82 0f       	add	r24, r18
    3638:	93 1f       	adc	r25, r19
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	9c 01       	movw	r18, r24
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	8d 53       	subi	r24, 0x3D	; 61
    364c:	9c 4f       	sbci	r25, 0xFC	; 252
    364e:	fc 01       	movw	r30, r24
    3650:	80 81       	ld	r24, Z
    3652:	08 2e       	mov	r0, r24
    3654:	00 0c       	add	r0, r0
    3656:	99 0b       	sbc	r25, r25
    3658:	28 0f       	add	r18, r24
    365a:	39 1f       	adc	r19, r25
    365c:	c9 01       	movw	r24, r18
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	82 0f       	add	r24, r18
    3664:	93 1f       	adc	r25, r19
    3666:	8c 5c       	subi	r24, 0xCC	; 204
    3668:	9c 4f       	sbci	r25, 0xFC	; 252
    366a:	fc 01       	movw	r30, r24
    366c:	80 81       	ld	r24, Z
    366e:	91 81       	ldd	r25, Z+1	; 0x01
    3670:	9a 01       	movw	r18, r20
    3672:	28 0f       	add	r18, r24
    3674:	39 1f       	adc	r19, r25
    3676:	8c 81       	ldd	r24, Y+4	; 0x04
    3678:	9d 81       	ldd	r25, Y+5	; 0x05
    367a:	fc 01       	movw	r30, r24
    367c:	31 83       	std	Z+1, r19	; 0x01
    367e:	20 83       	st	Z, r18
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	28 2f       	mov	r18, r24
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	c9 01       	movw	r24, r18
    3688:	88 0f       	add	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	82 0f       	add	r24, r18
    368e:	93 1f       	adc	r25, r19
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	9c 01       	movw	r18, r24
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	8d 53       	subi	r24, 0x3D	; 61
    36a2:	9c 4f       	sbci	r25, 0xFC	; 252
    36a4:	fc 01       	movw	r30, r24
    36a6:	80 81       	ld	r24, Z
    36a8:	08 2e       	mov	r0, r24
    36aa:	00 0c       	add	r0, r0
    36ac:	99 0b       	sbc	r25, r25
    36ae:	28 0f       	add	r18, r24
    36b0:	39 1f       	adc	r19, r25
    36b2:	c9 01       	movw	r24, r18
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	8d 5c       	subi	r24, 0xCD	; 205
    36be:	9c 4f       	sbci	r25, 0xFC	; 252
    36c0:	fc 01       	movw	r30, r24
    36c2:	80 81       	ld	r24, Z
    36c4:	86 fb       	bst	r24, 6
    36c6:	88 27       	eor	r24, r24
    36c8:	80 f9       	bld	r24, 0
    36ca:	88 23       	and	r24, r24
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    36ce:	51 c0       	rjmp	.+162    	; 0x3772 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	c9 01       	movw	r24, r18
    36d8:	88 0f       	add	r24, r24
    36da:	99 1f       	adc	r25, r25
    36dc:	82 0f       	add	r24, r18
    36de:	93 1f       	adc	r25, r19
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	9c 01       	movw	r18, r24
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	88 2f       	mov	r24, r24
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	8d 53       	subi	r24, 0x3D	; 61
    36f2:	9c 4f       	sbci	r25, 0xFC	; 252
    36f4:	fc 01       	movw	r30, r24
    36f6:	80 81       	ld	r24, Z
    36f8:	08 2e       	mov	r0, r24
    36fa:	00 0c       	add	r0, r0
    36fc:	99 0b       	sbc	r25, r25
    36fe:	28 0f       	add	r18, r24
    3700:	39 1f       	adc	r19, r25
    3702:	c9 01       	movw	r24, r18
    3704:	88 0f       	add	r24, r24
    3706:	99 1f       	adc	r25, r25
    3708:	82 0f       	add	r24, r18
    370a:	93 1f       	adc	r25, r19
    370c:	8d 5c       	subi	r24, 0xCD	; 205
    370e:	9c 4f       	sbci	r25, 0xFC	; 252
    3710:	fc 01       	movw	r30, r24
    3712:	80 81       	ld	r24, Z
    3714:	8f 73       	andi	r24, 0x3F	; 63
    3716:	61 e0       	ldi	r22, 0x01	; 1
    3718:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    371c:	2a c0       	rjmp	.+84     	; 0x3772 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	9b 81       	ldd	r25, Y+3	; 0x03
    3722:	fc 01       	movw	r30, r24
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	04 96       	adiw	r24, 0x04	; 4
    372a:	21 e0       	ldi	r18, 0x01	; 1
    372c:	80 34       	cpi	r24, 0x40	; 64
    372e:	9c 49       	sbci	r25, 0x9C	; 156
    3730:	08 f0       	brcs	.+2      	; 0x3734 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	22 23       	and	r18, r18
    3736:	41 f0       	breq	.+16     	; 0x3748 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3738:	8c 81       	ldd	r24, Y+4	; 0x04
    373a:	9d 81       	ldd	r25, Y+5	; 0x05
    373c:	20 e4       	ldi	r18, 0x40	; 64
    373e:	3c e9       	ldi	r19, 0x9C	; 156
    3740:	fc 01       	movw	r30, r24
    3742:	31 83       	std	Z+1, r19	; 0x01
    3744:	20 83       	st	Z, r18
    3746:	0d c0       	rjmp	.+26     	; 0x3762 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	9b 81       	ldd	r25, Y+3	; 0x03
    374c:	fc 01       	movw	r30, r24
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	9c 01       	movw	r18, r24
    3754:	2c 5f       	subi	r18, 0xFC	; 252
    3756:	3f 4f       	sbci	r19, 0xFF	; 255
    3758:	8c 81       	ldd	r24, Y+4	; 0x04
    375a:	9d 81       	ldd	r25, Y+5	; 0x05
    375c:	fc 01       	movw	r30, r24
    375e:	31 83       	std	Z+1, r19	; 0x01
    3760:	20 83       	st	Z, r18
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	88 2f       	mov	r24, r24
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	8d 53       	subi	r24, 0x3D	; 61
    376a:	9c 4f       	sbci	r25, 0xFC	; 252
    376c:	2f ef       	ldi	r18, 0xFF	; 255
    376e:	fc 01       	movw	r30, r24
    3770:	20 83       	st	Z, r18
    3772:	00 00       	nop
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	08 95       	ret

00003784 <__vector_17>:
    3784:	1f 92       	push	r1
    3786:	0f 92       	push	r0
    3788:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    378c:	0f 92       	push	r0
    378e:	11 24       	eor	r1, r1
    3790:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3794:	0f 92       	push	r0
    3796:	2f 93       	push	r18
    3798:	3f 93       	push	r19
    379a:	4f 93       	push	r20
    379c:	5f 93       	push	r21
    379e:	6f 93       	push	r22
    37a0:	7f 93       	push	r23
    37a2:	8f 93       	push	r24
    37a4:	9f 93       	push	r25
    37a6:	af 93       	push	r26
    37a8:	bf 93       	push	r27
    37aa:	ef 93       	push	r30
    37ac:	ff 93       	push	r31
    37ae:	cf 93       	push	r28
    37b0:	df 93       	push	r29
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	48 e8       	ldi	r20, 0x88	; 136
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	64 e8       	ldi	r22, 0x84	; 132
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	63 de       	rcall	.-826    	; 0x3488 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    37c2:	00 00       	nop
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	ff 91       	pop	r31
    37ca:	ef 91       	pop	r30
    37cc:	bf 91       	pop	r27
    37ce:	af 91       	pop	r26
    37d0:	9f 91       	pop	r25
    37d2:	8f 91       	pop	r24
    37d4:	7f 91       	pop	r23
    37d6:	6f 91       	pop	r22
    37d8:	5f 91       	pop	r21
    37da:	4f 91       	pop	r20
    37dc:	3f 91       	pop	r19
    37de:	2f 91       	pop	r18
    37e0:	0f 90       	pop	r0
    37e2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    37e6:	0f 90       	pop	r0
    37e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    37ec:	0f 90       	pop	r0
    37ee:	1f 90       	pop	r1
    37f0:	18 95       	reti

000037f2 <__vector_32>:
    37f2:	1f 92       	push	r1
    37f4:	0f 92       	push	r0
    37f6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    37fa:	0f 92       	push	r0
    37fc:	11 24       	eor	r1, r1
    37fe:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3802:	0f 92       	push	r0
    3804:	2f 93       	push	r18
    3806:	3f 93       	push	r19
    3808:	4f 93       	push	r20
    380a:	5f 93       	push	r21
    380c:	6f 93       	push	r22
    380e:	7f 93       	push	r23
    3810:	8f 93       	push	r24
    3812:	9f 93       	push	r25
    3814:	af 93       	push	r26
    3816:	bf 93       	push	r27
    3818:	ef 93       	push	r30
    381a:	ff 93       	push	r31
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	48 e9       	ldi	r20, 0x98	; 152
    3826:	50 e0       	ldi	r21, 0x00	; 0
    3828:	64 e9       	ldi	r22, 0x94	; 148
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	82 e0       	ldi	r24, 0x02	; 2
    382e:	2c de       	rcall	.-936    	; 0x3488 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3830:	00 00       	nop
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	ff 91       	pop	r31
    3838:	ef 91       	pop	r30
    383a:	bf 91       	pop	r27
    383c:	af 91       	pop	r26
    383e:	9f 91       	pop	r25
    3840:	8f 91       	pop	r24
    3842:	7f 91       	pop	r23
    3844:	6f 91       	pop	r22
    3846:	5f 91       	pop	r21
    3848:	4f 91       	pop	r20
    384a:	3f 91       	pop	r19
    384c:	2f 91       	pop	r18
    384e:	0f 90       	pop	r0
    3850:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3854:	0f 90       	pop	r0
    3856:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    385a:	0f 90       	pop	r0
    385c:	1f 90       	pop	r1
    385e:	18 95       	reti

00003860 <__vector_42>:
    3860:	1f 92       	push	r1
    3862:	0f 92       	push	r0
    3864:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3868:	0f 92       	push	r0
    386a:	11 24       	eor	r1, r1
    386c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3870:	0f 92       	push	r0
    3872:	2f 93       	push	r18
    3874:	3f 93       	push	r19
    3876:	4f 93       	push	r20
    3878:	5f 93       	push	r21
    387a:	6f 93       	push	r22
    387c:	7f 93       	push	r23
    387e:	8f 93       	push	r24
    3880:	9f 93       	push	r25
    3882:	af 93       	push	r26
    3884:	bf 93       	push	r27
    3886:	ef 93       	push	r30
    3888:	ff 93       	push	r31
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	48 ea       	ldi	r20, 0xA8	; 168
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	64 ea       	ldi	r22, 0xA4	; 164
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	83 e0       	ldi	r24, 0x03	; 3
    389c:	f5 dd       	rcall	.-1046   	; 0x3488 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    389e:	00 00       	nop
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	ff 91       	pop	r31
    38a6:	ef 91       	pop	r30
    38a8:	bf 91       	pop	r27
    38aa:	af 91       	pop	r26
    38ac:	9f 91       	pop	r25
    38ae:	8f 91       	pop	r24
    38b0:	7f 91       	pop	r23
    38b2:	6f 91       	pop	r22
    38b4:	5f 91       	pop	r21
    38b6:	4f 91       	pop	r20
    38b8:	3f 91       	pop	r19
    38ba:	2f 91       	pop	r18
    38bc:	0f 90       	pop	r0
    38be:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38c2:	0f 90       	pop	r0
    38c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38c8:	0f 90       	pop	r0
    38ca:	1f 90       	pop	r1
    38cc:	18 95       	reti

000038ce <__vector_47>:
    38ce:	1f 92       	push	r1
    38d0:	0f 92       	push	r0
    38d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38d6:	0f 92       	push	r0
    38d8:	11 24       	eor	r1, r1
    38da:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38de:	0f 92       	push	r0
    38e0:	2f 93       	push	r18
    38e2:	3f 93       	push	r19
    38e4:	4f 93       	push	r20
    38e6:	5f 93       	push	r21
    38e8:	6f 93       	push	r22
    38ea:	7f 93       	push	r23
    38ec:	8f 93       	push	r24
    38ee:	9f 93       	push	r25
    38f0:	af 93       	push	r26
    38f2:	bf 93       	push	r27
    38f4:	ef 93       	push	r30
    38f6:	ff 93       	push	r31
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	48 e2       	ldi	r20, 0x28	; 40
    3902:	51 e0       	ldi	r21, 0x01	; 1
    3904:	64 e2       	ldi	r22, 0x24	; 36
    3906:	71 e0       	ldi	r23, 0x01	; 1
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	be dd       	rcall	.-1156   	; 0x3488 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    390c:	00 00       	nop
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	ff 91       	pop	r31
    3914:	ef 91       	pop	r30
    3916:	bf 91       	pop	r27
    3918:	af 91       	pop	r26
    391a:	9f 91       	pop	r25
    391c:	8f 91       	pop	r24
    391e:	7f 91       	pop	r23
    3920:	6f 91       	pop	r22
    3922:	5f 91       	pop	r21
    3924:	4f 91       	pop	r20
    3926:	3f 91       	pop	r19
    3928:	2f 91       	pop	r18
    392a:	0f 90       	pop	r0
    392c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3930:	0f 90       	pop	r0
    3932:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3936:	0f 90       	pop	r0
    3938:	1f 90       	pop	r1
    393a:	18 95       	reti

0000393c <_ZL7initISR18timer16_Sequence_t>:
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	1f 92       	push	r1
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	81 30       	cpi	r24, 0x01	; 1
    394c:	01 f5       	brne	.+64     	; 0x398e <_ZL7initISR18timer16_Sequence_t+0x52>
    394e:	80 e8       	ldi	r24, 0x80	; 128
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	fc 01       	movw	r30, r24
    3954:	10 82       	st	Z, r1
    3956:	81 e8       	ldi	r24, 0x81	; 129
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	22 e0       	ldi	r18, 0x02	; 2
    395c:	fc 01       	movw	r30, r24
    395e:	20 83       	st	Z, r18
    3960:	84 e8       	ldi	r24, 0x84	; 132
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	fc 01       	movw	r30, r24
    3966:	11 82       	std	Z+1, r1	; 0x01
    3968:	10 82       	st	Z, r1
    396a:	86 e3       	ldi	r24, 0x36	; 54
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	26 e3       	ldi	r18, 0x36	; 54
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	f9 01       	movw	r30, r18
    3974:	20 81       	ld	r18, Z
    3976:	22 60       	ori	r18, 0x02	; 2
    3978:	fc 01       	movw	r30, r24
    397a:	20 83       	st	Z, r18
    397c:	8f e6       	ldi	r24, 0x6F	; 111
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	2f e6       	ldi	r18, 0x6F	; 111
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	f9 01       	movw	r30, r18
    3986:	20 81       	ld	r18, Z
    3988:	22 60       	ori	r18, 0x02	; 2
    398a:	fc 01       	movw	r30, r24
    398c:	20 83       	st	Z, r18
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	82 30       	cpi	r24, 0x02	; 2
    3992:	c1 f4       	brne	.+48     	; 0x39c4 <_ZL7initISR18timer16_Sequence_t+0x88>
    3994:	80 e9       	ldi	r24, 0x90	; 144
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	fc 01       	movw	r30, r24
    399a:	10 82       	st	Z, r1
    399c:	81 e9       	ldi	r24, 0x91	; 145
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	22 e0       	ldi	r18, 0x02	; 2
    39a2:	fc 01       	movw	r30, r24
    39a4:	20 83       	st	Z, r18
    39a6:	84 e9       	ldi	r24, 0x94	; 148
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	fc 01       	movw	r30, r24
    39ac:	11 82       	std	Z+1, r1	; 0x01
    39ae:	10 82       	st	Z, r1
    39b0:	88 e3       	ldi	r24, 0x38	; 56
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	22 e0       	ldi	r18, 0x02	; 2
    39b6:	fc 01       	movw	r30, r24
    39b8:	20 83       	st	Z, r18
    39ba:	81 e7       	ldi	r24, 0x71	; 113
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	22 e0       	ldi	r18, 0x02	; 2
    39c0:	fc 01       	movw	r30, r24
    39c2:	20 83       	st	Z, r18
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	83 30       	cpi	r24, 0x03	; 3
    39c8:	c1 f4       	brne	.+48     	; 0x39fa <_ZL7initISR18timer16_Sequence_t+0xbe>
    39ca:	80 ea       	ldi	r24, 0xA0	; 160
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	fc 01       	movw	r30, r24
    39d0:	10 82       	st	Z, r1
    39d2:	81 ea       	ldi	r24, 0xA1	; 161
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	22 e0       	ldi	r18, 0x02	; 2
    39d8:	fc 01       	movw	r30, r24
    39da:	20 83       	st	Z, r18
    39dc:	84 ea       	ldi	r24, 0xA4	; 164
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	fc 01       	movw	r30, r24
    39e2:	11 82       	std	Z+1, r1	; 0x01
    39e4:	10 82       	st	Z, r1
    39e6:	89 e3       	ldi	r24, 0x39	; 57
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	22 e0       	ldi	r18, 0x02	; 2
    39ec:	fc 01       	movw	r30, r24
    39ee:	20 83       	st	Z, r18
    39f0:	82 e7       	ldi	r24, 0x72	; 114
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	22 e0       	ldi	r18, 0x02	; 2
    39f6:	fc 01       	movw	r30, r24
    39f8:	20 83       	st	Z, r18
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	88 23       	and	r24, r24
    39fe:	c1 f4       	brne	.+48     	; 0x3a30 <_ZL7initISR18timer16_Sequence_t+0xf4>
    3a00:	80 e2       	ldi	r24, 0x20	; 32
    3a02:	91 e0       	ldi	r25, 0x01	; 1
    3a04:	fc 01       	movw	r30, r24
    3a06:	10 82       	st	Z, r1
    3a08:	81 e2       	ldi	r24, 0x21	; 33
    3a0a:	91 e0       	ldi	r25, 0x01	; 1
    3a0c:	22 e0       	ldi	r18, 0x02	; 2
    3a0e:	fc 01       	movw	r30, r24
    3a10:	20 83       	st	Z, r18
    3a12:	84 e2       	ldi	r24, 0x24	; 36
    3a14:	91 e0       	ldi	r25, 0x01	; 1
    3a16:	fc 01       	movw	r30, r24
    3a18:	11 82       	std	Z+1, r1	; 0x01
    3a1a:	10 82       	st	Z, r1
    3a1c:	8a e3       	ldi	r24, 0x3A	; 58
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	22 e0       	ldi	r18, 0x02	; 2
    3a22:	fc 01       	movw	r30, r24
    3a24:	20 83       	st	Z, r18
    3a26:	83 e7       	ldi	r24, 0x73	; 115
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	22 e0       	ldi	r18, 0x02	; 2
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	20 83       	st	Z, r18
    3a30:	00 00       	nop
    3a32:	0f 90       	pop	r0
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	08 95       	ret

00003a3a <_ZL13isTimerActive18timer16_Sequence_t>:
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	1f 92       	push	r1
    3a40:	1f 92       	push	r1
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	8a 83       	std	Y+2, r24	; 0x02
    3a48:	19 82       	std	Y+1, r1	; 0x01
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	8c 30       	cpi	r24, 0x0C	; 12
    3a4e:	30 f5       	brcc	.+76     	; 0x3a9c <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    3a50:	8a 81       	ldd	r24, Y+2	; 0x02
    3a52:	28 2f       	mov	r18, r24
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	c9 01       	movw	r24, r18
    3a58:	88 0f       	add	r24, r24
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	82 0f       	add	r24, r18
    3a5e:	93 1f       	adc	r25, r19
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	9c 01       	movw	r18, r24
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	88 2f       	mov	r24, r24
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	28 0f       	add	r18, r24
    3a72:	39 1f       	adc	r19, r25
    3a74:	c9 01       	movw	r24, r18
    3a76:	88 0f       	add	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	82 0f       	add	r24, r18
    3a7c:	93 1f       	adc	r25, r19
    3a7e:	8d 5c       	subi	r24, 0xCD	; 205
    3a80:	9c 4f       	sbci	r25, 0xFC	; 252
    3a82:	fc 01       	movw	r30, r24
    3a84:	80 81       	ld	r24, Z
    3a86:	86 fb       	bst	r24, 6
    3a88:	88 27       	eor	r24, r24
    3a8a:	80 f9       	bld	r24, 0
    3a8c:	81 30       	cpi	r24, 0x01	; 1
    3a8e:	11 f4       	brne	.+4      	; 0x3a94 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	05 c0       	rjmp	.+10     	; 0x3a9e <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	8f 5f       	subi	r24, 0xFF	; 255
    3a98:	89 83       	std	Y+1, r24	; 0x01
    3a9a:	d7 cf       	rjmp	.-82     	; 0x3a4a <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	08 95       	ret

00003aa8 <_ZN5ServoC1Ev>:
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	1f 92       	push	r1
    3aae:	1f 92       	push	r1
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	9a 83       	std	Y+2, r25	; 0x02
    3ab6:	89 83       	std	Y+1, r24	; 0x01
    3ab8:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <ServoCount>
    3abc:	80 33       	cpi	r24, 0x30	; 48
    3abe:	e8 f4       	brcc	.+58     	; 0x3afa <_ZN5ServoC1Ev+0x52>
    3ac0:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <ServoCount>
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	82 0f       	add	r24, r18
    3ac8:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <ServoCount>
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	20 83       	st	Z, r18
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad8:	fc 01       	movw	r30, r24
    3ada:	80 81       	ld	r24, Z
    3adc:	28 2f       	mov	r18, r24
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	c9 01       	movw	r24, r18
    3ae2:	88 0f       	add	r24, r24
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	82 0f       	add	r24, r18
    3ae8:	93 1f       	adc	r25, r19
    3aea:	8c 5c       	subi	r24, 0xCC	; 204
    3aec:	9c 4f       	sbci	r25, 0xFC	; 252
    3aee:	28 eb       	ldi	r18, 0xB8	; 184
    3af0:	3b e0       	ldi	r19, 0x0B	; 11
    3af2:	fc 01       	movw	r30, r24
    3af4:	31 83       	std	Z+1, r19	; 0x01
    3af6:	20 83       	st	Z, r18
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <_ZN5ServoC1Ev+0x5c>
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
    3afe:	2f ef       	ldi	r18, 0xFF	; 255
    3b00:	fc 01       	movw	r30, r24
    3b02:	20 83       	st	Z, r18
    3b04:	00 00       	nop
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	df 91       	pop	r29
    3b0c:	cf 91       	pop	r28
    3b0e:	08 95       	ret

00003b10 <_ZN5Servo6attachEi>:
    3b10:	cf 93       	push	r28
    3b12:	df 93       	push	r29
    3b14:	00 d0       	rcall	.+0      	; 0x3b16 <_ZN5Servo6attachEi+0x6>
    3b16:	1f 92       	push	r1
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	9a 83       	std	Y+2, r25	; 0x02
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	7c 83       	std	Y+4, r23	; 0x04
    3b22:	6b 83       	std	Y+3, r22	; 0x03
    3b24:	6b 81       	ldd	r22, Y+3	; 0x03
    3b26:	7c 81       	ldd	r23, Y+4	; 0x04
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2c:	20 e6       	ldi	r18, 0x60	; 96
    3b2e:	39 e0       	ldi	r19, 0x09	; 9
    3b30:	40 e2       	ldi	r20, 0x20	; 32
    3b32:	52 e0       	ldi	r21, 0x02	; 2
    3b34:	07 d0       	rcall	.+14     	; 0x3b44 <_ZN5Servo6attachEiii>
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	08 95       	ret

00003b44 <_ZN5Servo6attachEiii>:
    3b44:	cf 93       	push	r28
    3b46:	df 93       	push	r29
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	29 97       	sbiw	r28, 0x09	; 9
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	9b 83       	std	Y+3, r25	; 0x03
    3b5a:	8a 83       	std	Y+2, r24	; 0x02
    3b5c:	7d 83       	std	Y+5, r23	; 0x05
    3b5e:	6c 83       	std	Y+4, r22	; 0x04
    3b60:	5f 83       	std	Y+7, r21	; 0x07
    3b62:	4e 83       	std	Y+6, r20	; 0x06
    3b64:	39 87       	std	Y+9, r19	; 0x09
    3b66:	28 87       	std	Y+8, r18	; 0x08
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	80 81       	ld	r24, Z
    3b70:	80 33       	cpi	r24, 0x30	; 48
    3b72:	08 f0       	brcs	.+2      	; 0x3b76 <_ZN5Servo6attachEiii+0x32>
    3b74:	6b c0       	rjmp	.+214    	; 0x3c4c <_ZN5Servo6attachEiii+0x108>
    3b76:	8c 81       	ldd	r24, Y+4	; 0x04
    3b78:	61 e0       	ldi	r22, 0x01	; 1
    3b7a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	fc 01       	movw	r30, r24
    3b84:	80 81       	ld	r24, Z
    3b86:	28 2f       	mov	r18, r24
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b8c:	48 2f       	mov	r20, r24
    3b8e:	4f 73       	andi	r20, 0x3F	; 63
    3b90:	c9 01       	movw	r24, r18
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	82 0f       	add	r24, r18
    3b98:	93 1f       	adc	r25, r19
    3b9a:	8d 5c       	subi	r24, 0xCD	; 205
    3b9c:	9c 4f       	sbci	r25, 0xFC	; 252
    3b9e:	24 2f       	mov	r18, r20
    3ba0:	2f 73       	andi	r18, 0x3F	; 63
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	30 81       	ld	r19, Z
    3ba6:	30 7c       	andi	r19, 0xC0	; 192
    3ba8:	23 2b       	or	r18, r19
    3baa:	fc 01       	movw	r30, r24
    3bac:	20 83       	st	Z, r18
    3bae:	20 e2       	ldi	r18, 0x20	; 32
    3bb0:	32 e0       	ldi	r19, 0x02	; 2
    3bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    3bb6:	a9 01       	movw	r20, r18
    3bb8:	48 1b       	sub	r20, r24
    3bba:	59 0b       	sbc	r21, r25
    3bbc:	ca 01       	movw	r24, r20
    3bbe:	99 23       	and	r25, r25
    3bc0:	0c f4       	brge	.+2      	; 0x3bc4 <_ZN5Servo6attachEiii+0x80>
    3bc2:	03 96       	adiw	r24, 0x03	; 3
    3bc4:	95 95       	asr	r25
    3bc6:	87 95       	ror	r24
    3bc8:	95 95       	asr	r25
    3bca:	87 95       	ror	r24
    3bcc:	28 2f       	mov	r18, r24
    3bce:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	21 83       	std	Z+1, r18	; 0x01
    3bd6:	20 e6       	ldi	r18, 0x60	; 96
    3bd8:	39 e0       	ldi	r19, 0x09	; 9
    3bda:	88 85       	ldd	r24, Y+8	; 0x08
    3bdc:	99 85       	ldd	r25, Y+9	; 0x09
    3bde:	a9 01       	movw	r20, r18
    3be0:	48 1b       	sub	r20, r24
    3be2:	59 0b       	sbc	r21, r25
    3be4:	ca 01       	movw	r24, r20
    3be6:	99 23       	and	r25, r25
    3be8:	0c f4       	brge	.+2      	; 0x3bec <_ZN5Servo6attachEiii+0xa8>
    3bea:	03 96       	adiw	r24, 0x03	; 3
    3bec:	95 95       	asr	r25
    3bee:	87 95       	ror	r24
    3bf0:	95 95       	asr	r25
    3bf2:	87 95       	ror	r24
    3bf4:	28 2f       	mov	r18, r24
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	22 83       	std	Z+2, r18	; 0x02
    3bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3c00:	9b 81       	ldd	r25, Y+3	; 0x03
    3c02:	fc 01       	movw	r30, r24
    3c04:	90 81       	ld	r25, Z
    3c06:	8b ea       	ldi	r24, 0xAB	; 171
    3c08:	98 9f       	mul	r25, r24
    3c0a:	81 2d       	mov	r24, r1
    3c0c:	11 24       	eor	r1, r1
    3c0e:	86 95       	lsr	r24
    3c10:	86 95       	lsr	r24
    3c12:	86 95       	lsr	r24
    3c14:	89 83       	std	Y+1, r24	; 0x01
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	10 df       	rcall	.-480    	; 0x3a3a <_ZL13isTimerActive18timer16_Sequence_t>
    3c1a:	98 2f       	mov	r25, r24
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	89 27       	eor	r24, r25
    3c20:	88 23       	and	r24, r24
    3c22:	11 f0       	breq	.+4      	; 0x3c28 <_ZN5Servo6attachEiii+0xe4>
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	8a de       	rcall	.-748    	; 0x393c <_ZL7initISR18timer16_Sequence_t>
    3c28:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	80 81       	ld	r24, Z
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	c9 01       	movw	r24, r18
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	82 0f       	add	r24, r18
    3c3c:	93 1f       	adc	r25, r19
    3c3e:	8d 5c       	subi	r24, 0xCD	; 205
    3c40:	9c 4f       	sbci	r25, 0xFC	; 252
    3c42:	fc 01       	movw	r30, r24
    3c44:	20 81       	ld	r18, Z
    3c46:	20 64       	ori	r18, 0x40	; 64
    3c48:	fc 01       	movw	r30, r24
    3c4a:	20 83       	st	Z, r18
    3c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c50:	fc 01       	movw	r30, r24
    3c52:	80 81       	ld	r24, Z
    3c54:	29 96       	adiw	r28, 0x09	; 9
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	08 95       	ret

00003c66 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    3c66:	6f 92       	push	r6
    3c68:	7f 92       	push	r7
    3c6a:	8f 92       	push	r8
    3c6c:	9f 92       	push	r9
    3c6e:	af 92       	push	r10
    3c70:	bf 92       	push	r11
    3c72:	cf 92       	push	r12
    3c74:	df 92       	push	r13
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	00 d0       	rcall	.+0      	; 0x3c84 <_ZN5Servo5writeEi+0x1e>
    3c84:	1f 92       	push	r1
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	7c 83       	std	Y+4, r23	; 0x04
    3c90:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	80 32       	cpi	r24, 0x20	; 32
    3c98:	92 40       	sbci	r25, 0x02	; 2
    3c9a:	0c f0       	brlt	.+2      	; 0x3c9e <_ZN5Servo5writeEi+0x38>
    3c9c:	5c c0       	rjmp	.+184    	; 0x3d56 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	99 23       	and	r25, r25
    3ca4:	14 f4       	brge	.+4      	; 0x3caa <_ZN5Servo5writeEi+0x44>
    3ca6:	1c 82       	std	Y+4, r1	; 0x04
    3ca8:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    3caa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cac:	9c 81       	ldd	r25, Y+4	; 0x04
    3cae:	85 3b       	cpi	r24, 0xB5	; 181
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	24 f0       	brlt	.+8      	; 0x3cbc <_ZN5Servo5writeEi+0x56>
    3cb4:	84 eb       	ldi	r24, 0xB4	; 180
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	9c 83       	std	Y+4, r25	; 0x04
    3cba:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	08 2e       	mov	r0, r24
    3cc6:	00 0c       	add	r0, r0
    3cc8:	99 0b       	sbc	r25, r25
    3cca:	28 e5       	ldi	r18, 0x58	; 88
    3ccc:	32 e0       	ldi	r19, 0x02	; 2
    3cce:	a9 01       	movw	r20, r18
    3cd0:	48 1b       	sub	r20, r24
    3cd2:	59 0b       	sbc	r21, r25
    3cd4:	ca 01       	movw	r24, r20
    3cd6:	88 0f       	add	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	88 0f       	add	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	09 2e       	mov	r0, r25
    3ce0:	00 0c       	add	r0, r0
    3ce2:	aa 0b       	sbc	r26, r26
    3ce4:	bb 0b       	sbc	r27, r27
    3ce6:	29 81       	ldd	r18, Y+1	; 0x01
    3ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    3cea:	f9 01       	movw	r30, r18
    3cec:	21 81       	ldd	r18, Z+1	; 0x01
    3cee:	02 2e       	mov	r0, r18
    3cf0:	00 0c       	add	r0, r0
    3cf2:	33 0b       	sbc	r19, r19
    3cf4:	48 e8       	ldi	r20, 0x88	; 136
    3cf6:	50 e0       	ldi	r21, 0x00	; 0
    3cf8:	ba 01       	movw	r22, r20
    3cfa:	62 1b       	sub	r22, r18
    3cfc:	73 0b       	sbc	r23, r19
    3cfe:	9b 01       	movw	r18, r22
    3d00:	22 0f       	add	r18, r18
    3d02:	33 1f       	adc	r19, r19
    3d04:	22 0f       	add	r18, r18
    3d06:	33 1f       	adc	r19, r19
    3d08:	03 2e       	mov	r0, r19
    3d0a:	00 0c       	add	r0, r0
    3d0c:	44 0b       	sbc	r20, r20
    3d0e:	55 0b       	sbc	r21, r21
    3d10:	6b 81       	ldd	r22, Y+3	; 0x03
    3d12:	7c 81       	ldd	r23, Y+4	; 0x04
    3d14:	3b 01       	movw	r6, r22
    3d16:	77 0f       	add	r23, r23
    3d18:	88 08       	sbc	r8, r8
    3d1a:	99 08       	sbc	r9, r9
    3d1c:	6b 2f       	mov	r22, r27
    3d1e:	6f 93       	push	r22
    3d20:	6a 2f       	mov	r22, r26
    3d22:	6f 93       	push	r22
    3d24:	69 2f       	mov	r22, r25
    3d26:	6f 93       	push	r22
    3d28:	8f 93       	push	r24
    3d2a:	59 01       	movw	r10, r18
    3d2c:	6a 01       	movw	r12, r20
    3d2e:	14 eb       	ldi	r17, 0xB4	; 180
    3d30:	e1 2e       	mov	r14, r17
    3d32:	f1 2c       	mov	r15, r1
    3d34:	00 e0       	ldi	r16, 0x00	; 0
    3d36:	10 e0       	ldi	r17, 0x00	; 0
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	a9 01       	movw	r20, r18
    3d3e:	c4 01       	movw	r24, r8
    3d40:	b3 01       	movw	r22, r6
    3d42:	0e 94 6f 2c 	call	0x58de	; 0x58de <_Z3maplllll>
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	9c 83       	std	Y+4, r25	; 0x04
    3d54:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    3d56:	2b 81       	ldd	r18, Y+3	; 0x03
    3d58:	3c 81       	ldd	r19, Y+4	; 0x04
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5e:	b9 01       	movw	r22, r18
    3d60:	14 d0       	rcall	.+40     	; 0x3d8a <_ZN5Servo17writeMicrosecondsEi>
}
    3d62:	00 00       	nop
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	1f 91       	pop	r17
    3d72:	0f 91       	pop	r16
    3d74:	ff 90       	pop	r15
    3d76:	ef 90       	pop	r14
    3d78:	df 90       	pop	r13
    3d7a:	cf 90       	pop	r12
    3d7c:	bf 90       	pop	r11
    3d7e:	af 90       	pop	r10
    3d80:	9f 90       	pop	r9
    3d82:	8f 90       	pop	r8
    3d84:	7f 90       	pop	r7
    3d86:	6f 90       	pop	r6
    3d88:	08 95       	ret

00003d8a <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <_ZN5Servo17writeMicrosecondsEi+0x6>
    3d90:	00 d0       	rcall	.+0      	; 0x3d92 <_ZN5Servo17writeMicrosecondsEi+0x8>
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	9c 83       	std	Y+4, r25	; 0x04
    3d98:	8b 83       	std	Y+3, r24	; 0x03
    3d9a:	7e 83       	std	Y+6, r23	; 0x06
    3d9c:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3da0:	9c 81       	ldd	r25, Y+4	; 0x04
    3da2:	fc 01       	movw	r30, r24
    3da4:	80 81       	ld	r24, Z
    3da6:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	80 33       	cpi	r24, 0x30	; 48
    3dac:	08 f0       	brcs	.+2      	; 0x3db0 <_ZN5Servo17writeMicrosecondsEi+0x26>
    3dae:	99 c0       	rjmp	.+306    	; 0x3ee2 <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3db0:	8b 81       	ldd	r24, Y+3	; 0x03
    3db2:	9c 81       	ldd	r25, Y+4	; 0x04
    3db4:	fc 01       	movw	r30, r24
    3db6:	81 81       	ldd	r24, Z+1	; 0x01
    3db8:	08 2e       	mov	r0, r24
    3dba:	00 0c       	add	r0, r0
    3dbc:	99 0b       	sbc	r25, r25
    3dbe:	28 e8       	ldi	r18, 0x88	; 136
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	a9 01       	movw	r20, r18
    3dc4:	48 1b       	sub	r20, r24
    3dc6:	59 0b       	sbc	r21, r25
    3dc8:	ca 01       	movw	r24, r20
    3dca:	9c 01       	movw	r18, r24
    3dcc:	22 0f       	add	r18, r18
    3dce:	33 1f       	adc	r19, r19
    3dd0:	22 0f       	add	r18, r18
    3dd2:	33 1f       	adc	r19, r19
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd8:	82 17       	cp	r24, r18
    3dda:	93 07       	cpc	r25, r19
    3ddc:	a4 f4       	brge	.+40     	; 0x3e06 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	9c 81       	ldd	r25, Y+4	; 0x04
    3de2:	fc 01       	movw	r30, r24
    3de4:	81 81       	ldd	r24, Z+1	; 0x01
    3de6:	08 2e       	mov	r0, r24
    3de8:	00 0c       	add	r0, r0
    3dea:	99 0b       	sbc	r25, r25
    3dec:	28 e8       	ldi	r18, 0x88	; 136
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	a9 01       	movw	r20, r18
    3df2:	48 1b       	sub	r20, r24
    3df4:	59 0b       	sbc	r21, r25
    3df6:	ca 01       	movw	r24, r20
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	9e 83       	std	Y+6, r25	; 0x06
    3e02:	8d 83       	std	Y+5, r24	; 0x05
    3e04:	2a c0       	rjmp	.+84     	; 0x3e5a <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    3e06:	8b 81       	ldd	r24, Y+3	; 0x03
    3e08:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	08 2e       	mov	r0, r24
    3e10:	00 0c       	add	r0, r0
    3e12:	99 0b       	sbc	r25, r25
    3e14:	28 e5       	ldi	r18, 0x58	; 88
    3e16:	32 e0       	ldi	r19, 0x02	; 2
    3e18:	a9 01       	movw	r20, r18
    3e1a:	48 1b       	sub	r20, r24
    3e1c:	59 0b       	sbc	r21, r25
    3e1e:	ca 01       	movw	r24, r20
    3e20:	9c 01       	movw	r18, r24
    3e22:	22 0f       	add	r18, r18
    3e24:	33 1f       	adc	r19, r19
    3e26:	22 0f       	add	r18, r18
    3e28:	33 1f       	adc	r19, r19
    3e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e2e:	28 17       	cp	r18, r24
    3e30:	39 07       	cpc	r19, r25
    3e32:	9c f4       	brge	.+38     	; 0x3e5a <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	9c 81       	ldd	r25, Y+4	; 0x04
    3e38:	fc 01       	movw	r30, r24
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	08 2e       	mov	r0, r24
    3e3e:	00 0c       	add	r0, r0
    3e40:	99 0b       	sbc	r25, r25
    3e42:	28 e5       	ldi	r18, 0x58	; 88
    3e44:	32 e0       	ldi	r19, 0x02	; 2
    3e46:	a9 01       	movw	r20, r18
    3e48:	48 1b       	sub	r20, r24
    3e4a:	59 0b       	sbc	r21, r25
    3e4c:	ca 01       	movw	r24, r20
    3e4e:	88 0f       	add	r24, r24
    3e50:	99 1f       	adc	r25, r25
    3e52:	88 0f       	add	r24, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    3e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5e:	02 97       	sbiw	r24, 0x02	; 2
    3e60:	9e 83       	std	Y+6, r25	; 0x06
    3e62:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3e64:	8d 81       	ldd	r24, Y+5	; 0x05
    3e66:	9e 81       	ldd	r25, Y+6	; 0x06
    3e68:	09 2e       	mov	r0, r25
    3e6a:	00 0c       	add	r0, r0
    3e6c:	aa 0b       	sbc	r26, r26
    3e6e:	bb 0b       	sbc	r27, r27
    3e70:	88 0f       	add	r24, r24
    3e72:	99 1f       	adc	r25, r25
    3e74:	aa 1f       	adc	r26, r26
    3e76:	bb 1f       	adc	r27, r27
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	aa 1f       	adc	r26, r26
    3e7e:	bb 1f       	adc	r27, r27
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25
    3e84:	aa 1f       	adc	r26, r26
    3e86:	bb 1f       	adc	r27, r27
    3e88:	88 0f       	add	r24, r24
    3e8a:	99 1f       	adc	r25, r25
    3e8c:	aa 1f       	adc	r26, r26
    3e8e:	bb 1f       	adc	r27, r27
    3e90:	bb 23       	and	r27, r27
    3e92:	1c f4       	brge	.+6      	; 0x3e9a <_ZN5Servo17writeMicrosecondsEi+0x110>
    3e94:	07 96       	adiw	r24, 0x07	; 7
    3e96:	a1 1d       	adc	r26, r1
    3e98:	b1 1d       	adc	r27, r1
    3e9a:	68 94       	set
    3e9c:	12 f8       	bld	r1, 2
    3e9e:	b5 95       	asr	r27
    3ea0:	a7 95       	ror	r26
    3ea2:	97 95       	ror	r25
    3ea4:	87 95       	ror	r24
    3ea6:	16 94       	lsr	r1
    3ea8:	d1 f7       	brne	.-12     	; 0x3e9e <_ZN5Servo17writeMicrosecondsEi+0x114>
    3eaa:	9e 83       	std	Y+6, r25	; 0x06
    3eac:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    3eae:	8f e5       	ldi	r24, 0x5F	; 95
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	80 81       	ld	r24, Z
    3eb6:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    3eb8:	f8 94       	cli
    servos[channel].ticks = value;
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	4d 81       	ldd	r20, Y+5	; 0x05
    3ec2:	5e 81       	ldd	r21, Y+6	; 0x06
    3ec4:	c9 01       	movw	r24, r18
    3ec6:	88 0f       	add	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	82 0f       	add	r24, r18
    3ecc:	93 1f       	adc	r25, r19
    3ece:	8c 5c       	subi	r24, 0xCC	; 204
    3ed0:	9c 4f       	sbci	r25, 0xFC	; 252
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	51 83       	std	Z+1, r21	; 0x01
    3ed6:	40 83       	st	Z, r20
    SREG = oldSREG;
    3ed8:	8f e5       	ldi	r24, 0x5F	; 95
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	2a 81       	ldd	r18, Y+2	; 0x02
    3ede:	fc 01       	movw	r30, r24
    3ee0:	20 83       	st	Z, r18
  }
}
    3ee2:	00 00       	nop
    3ee4:	26 96       	adiw	r28, 0x06	; 6
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61
    3ef0:	df 91       	pop	r29
    3ef2:	cf 91       	pop	r28
    3ef4:	08 95       	ret

00003ef6 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    3ef6:	2f 92       	push	r2
    3ef8:	3f 92       	push	r3
    3efa:	4f 92       	push	r4
    3efc:	5f 92       	push	r5
    3efe:	6f 92       	push	r6
    3f00:	7f 92       	push	r7
    3f02:	8f 92       	push	r8
    3f04:	9f 92       	push	r9
    3f06:	af 92       	push	r10
    3f08:	bf 92       	push	r11
    3f0a:	cf 92       	push	r12
    3f0c:	df 92       	push	r13
    3f0e:	ef 92       	push	r14
    3f10:	ff 92       	push	r15
    3f12:	0f 93       	push	r16
    3f14:	1f 93       	push	r17
    3f16:	cf 93       	push	r28
    3f18:	df 93       	push	r29
    3f1a:	1f 92       	push	r1
    3f1c:	1f 92       	push	r1
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	9a 83       	std	Y+2, r25	; 0x02
    3f24:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    3f26:	89 81       	ldd	r24, Y+1	; 0x01
    3f28:	9a 81       	ldd	r25, Y+2	; 0x02
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	08 2e       	mov	r0, r24
    3f30:	00 0c       	add	r0, r0
    3f32:	99 0b       	sbc	r25, r25
    3f34:	28 e5       	ldi	r18, 0x58	; 88
    3f36:	32 e0       	ldi	r19, 0x02	; 2
    3f38:	a9 01       	movw	r20, r18
    3f3a:	48 1b       	sub	r20, r24
    3f3c:	59 0b       	sbc	r21, r25
    3f3e:	ca 01       	movw	r24, r20
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	88 0f       	add	r24, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	1c 01       	movw	r2, r24
    3f4a:	99 0f       	add	r25, r25
    3f4c:	44 08       	sbc	r4, r4
    3f4e:	55 08       	sbc	r5, r5
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
    3f52:	9a 81       	ldd	r25, Y+2	; 0x02
    3f54:	fc 01       	movw	r30, r24
    3f56:	81 81       	ldd	r24, Z+1	; 0x01
    3f58:	08 2e       	mov	r0, r24
    3f5a:	00 0c       	add	r0, r0
    3f5c:	99 0b       	sbc	r25, r25
    3f5e:	28 e8       	ldi	r18, 0x88	; 136
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	a9 01       	movw	r20, r18
    3f64:	48 1b       	sub	r20, r24
    3f66:	59 0b       	sbc	r21, r25
    3f68:	ca 01       	movw	r24, r20
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	3c 01       	movw	r6, r24
    3f74:	99 0f       	add	r25, r25
    3f76:	88 08       	sbc	r8, r8
    3f78:	99 08       	sbc	r9, r9
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7e:	30 d0       	rcall	.+96     	; 0x3fe0 <_ZN5Servo16readMicrosecondsEv>
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	09 2e       	mov	r0, r25
    3f84:	00 0c       	add	r0, r0
    3f86:	aa 0b       	sbc	r26, r26
    3f88:	bb 0b       	sbc	r27, r27
    3f8a:	1f 92       	push	r1
    3f8c:	1f 92       	push	r1
    3f8e:	1f 92       	push	r1
    3f90:	24 eb       	ldi	r18, 0xB4	; 180
    3f92:	2f 93       	push	r18
    3f94:	a1 2c       	mov	r10, r1
    3f96:	b1 2c       	mov	r11, r1
    3f98:	65 01       	movw	r12, r10
    3f9a:	82 01       	movw	r16, r4
    3f9c:	71 01       	movw	r14, r2
    3f9e:	a4 01       	movw	r20, r8
    3fa0:	93 01       	movw	r18, r6
    3fa2:	bc 01       	movw	r22, r24
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	0e 94 6f 2c 	call	0x58de	; 0x58de <_Z3maplllll>
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
}
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	df 91       	pop	r29
    3fbc:	cf 91       	pop	r28
    3fbe:	1f 91       	pop	r17
    3fc0:	0f 91       	pop	r16
    3fc2:	ff 90       	pop	r15
    3fc4:	ef 90       	pop	r14
    3fc6:	df 90       	pop	r13
    3fc8:	cf 90       	pop	r12
    3fca:	bf 90       	pop	r11
    3fcc:	af 90       	pop	r10
    3fce:	9f 90       	pop	r9
    3fd0:	8f 90       	pop	r8
    3fd2:	7f 90       	pop	r7
    3fd4:	6f 90       	pop	r6
    3fd6:	5f 90       	pop	r5
    3fd8:	4f 90       	pop	r4
    3fda:	3f 90       	pop	r3
    3fdc:	2f 90       	pop	r2
    3fde:	08 95       	ret

00003fe0 <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	00 d0       	rcall	.+0      	; 0x3fe6 <_ZN5Servo16readMicrosecondsEv+0x6>
    3fe6:	1f 92       	push	r1
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
    3fec:	9c 83       	std	Y+4, r25	; 0x04
    3fee:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    3ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	80 81       	ld	r24, Z
    3ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    3ffa:	01 f1       	breq	.+64     	; 0x403c <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    3ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    4000:	fc 01       	movw	r30, r24
    4002:	80 81       	ld	r24, Z
    4004:	28 2f       	mov	r18, r24
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	c9 01       	movw	r24, r18
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	82 0f       	add	r24, r18
    4010:	93 1f       	adc	r25, r19
    4012:	8c 5c       	subi	r24, 0xCC	; 204
    4014:	9c 4f       	sbci	r25, 0xFC	; 252
    4016:	fc 01       	movw	r30, r24
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	88 0f       	add	r24, r24
    401e:	99 1f       	adc	r25, r25
    4020:	88 0f       	add	r24, r24
    4022:	99 1f       	adc	r25, r25
    4024:	88 0f       	add	r24, r24
    4026:	99 1f       	adc	r25, r25
    4028:	92 95       	swap	r25
    402a:	82 95       	swap	r24
    402c:	8f 70       	andi	r24, 0x0F	; 15
    402e:	89 27       	eor	r24, r25
    4030:	9f 70       	andi	r25, 0x0F	; 15
    4032:	89 27       	eor	r24, r25
    4034:	02 96       	adiw	r24, 0x02	; 2
    4036:	9a 83       	std	Y+2, r25	; 0x02
    4038:	89 83       	std	Y+1, r24	; 0x01
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    403c:	1a 82       	std	Y+2, r1	; 0x02
    403e:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	08 95       	ret

00004052 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
    405a:	2f 97       	sbiw	r28, 0x0f	; 15
    405c:	0f b6       	in	r0, 0x3f	; 63
    405e:	f8 94       	cli
    4060:	de bf       	out	0x3e, r29	; 62
    4062:	0f be       	out	0x3f, r0	; 63
    4064:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4066:	8f e5       	ldi	r24, 0x5F	; 95
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	fc 01       	movw	r30, r24
    406c:	80 81       	ld	r24, Z
    406e:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4070:	f8 94       	cli
  if (!initialized) {
    4072:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZN8SPIClass11initializedE>
    4076:	88 23       	and	r24, r24
    4078:	09 f0       	breq	.+2      	; 0x407c <_ZN8SPIClass5beginEv+0x2a>
    407a:	5b c0       	rjmp	.+182    	; 0x4132 <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    407c:	89 ec       	ldi	r24, 0xC9	; 201
    407e:	91 e0       	ldi	r25, 0x01	; 1
    4080:	9b 83       	std	Y+3, r25	; 0x03
    4082:	8a 83       	std	Y+2, r24	; 0x02
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	9b 81       	ldd	r25, Y+3	; 0x03
    4088:	fc 01       	movw	r30, r24
    408a:	84 91       	lpm	r24, Z
    408c:	8c 83       	std	Y+4, r24	; 0x04
    408e:	8c 81       	ldd	r24, Y+4	; 0x04
    4090:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    4092:	83 e8       	ldi	r24, 0x83	; 131
    4094:	91 e0       	ldi	r25, 0x01	; 1
    4096:	9f 83       	std	Y+7, r25	; 0x07
    4098:	8e 83       	std	Y+6, r24	; 0x06
    409a:	8e 81       	ldd	r24, Y+6	; 0x06
    409c:	9f 81       	ldd	r25, Y+7	; 0x07
    409e:	fc 01       	movw	r30, r24
    40a0:	84 91       	lpm	r24, Z
    40a2:	88 87       	std	Y+8, r24	; 0x08
    40a4:	88 85       	ldd	r24, Y+8	; 0x08
    40a6:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    40a8:	8d 81       	ldd	r24, Y+5	; 0x05
    40aa:	88 2f       	mov	r24, r24
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	88 0f       	add	r24, r24
    40b0:	99 1f       	adc	r25, r25
    40b2:	82 5f       	subi	r24, 0xF2	; 242
    40b4:	9d 4f       	sbci	r25, 0xFD	; 253
    40b6:	9b 87       	std	Y+11, r25	; 0x0b
    40b8:	8a 87       	std	Y+10, r24	; 0x0a
    40ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    40bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    40be:	fc 01       	movw	r30, r24
    40c0:	25 91       	lpm	r18, Z+
    40c2:	34 91       	lpm	r19, Z
    40c4:	cf 01       	movw	r24, r30
    40c6:	3d 87       	std	Y+13, r19	; 0x0d
    40c8:	2c 87       	std	Y+12, r18	; 0x0c
    40ca:	9b 87       	std	Y+11, r25	; 0x0b
    40cc:	8a 87       	std	Y+10, r24	; 0x0a
    40ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    40d2:	9f 87       	std	Y+15, r25	; 0x0f
    40d4:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    40d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    40d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    40da:	fc 01       	movw	r30, r24
    40dc:	90 81       	ld	r25, Z
    40de:	89 85       	ldd	r24, Y+9	; 0x09
    40e0:	98 23       	and	r25, r24
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	99 23       	and	r25, r25
    40e6:	09 f0       	breq	.+2      	; 0x40ea <_ZN8SPIClass5beginEv+0x98>
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	88 23       	and	r24, r24
    40ec:	21 f0       	breq	.+8      	; 0x40f6 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    40ee:	61 e0       	ldi	r22, 0x01	; 1
    40f0:	85 e3       	ldi	r24, 0x35	; 53
    40f2:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	85 e3       	ldi	r24, 0x35	; 53
    40fa:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    40fe:	8c e4       	ldi	r24, 0x4C	; 76
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	2c e4       	ldi	r18, 0x4C	; 76
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	f9 01       	movw	r30, r18
    4108:	20 81       	ld	r18, Z
    410a:	20 61       	ori	r18, 0x10	; 16
    410c:	fc 01       	movw	r30, r24
    410e:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    4110:	8c e4       	ldi	r24, 0x4C	; 76
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	2c e4       	ldi	r18, 0x4C	; 76
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	f9 01       	movw	r30, r18
    411a:	20 81       	ld	r18, Z
    411c:	20 64       	ori	r18, 0x40	; 64
    411e:	fc 01       	movw	r30, r24
    4120:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4122:	61 e0       	ldi	r22, 0x01	; 1
    4124:	84 e3       	ldi	r24, 0x34	; 52
    4126:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
    pinMode(MOSI, OUTPUT);
    412a:	61 e0       	ldi	r22, 0x01	; 1
    412c:	83 e3       	ldi	r24, 0x33	; 51
    412e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <pinMode>
  }
  initialized++; // reference count
    4132:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZN8SPIClass11initializedE>
    4136:	8f 5f       	subi	r24, 0xFF	; 255
    4138:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    413c:	8f e5       	ldi	r24, 0x5F	; 95
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	29 81       	ldd	r18, Y+1	; 0x01
    4142:	fc 01       	movw	r30, r24
    4144:	20 83       	st	Z, r18
}
    4146:	00 00       	nop
    4148:	2f 96       	adiw	r28, 0x0f	; 15
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	df 91       	pop	r29
    4156:	cf 91       	pop	r28
    4158:	08 95       	ret

0000415a <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    415a:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_state>
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <twi_sendStop>
    4164:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_inRepStart>
    4168:	61 e0       	ldi	r22, 0x01	; 1
    416a:	84 e1       	ldi	r24, 0x14	; 20
    416c:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    4170:	61 e0       	ldi	r22, 0x01	; 1
    4172:	85 e1       	ldi	r24, 0x15	; 21
    4174:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    4178:	e9 eb       	ldi	r30, 0xB9	; 185
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	8e 7f       	andi	r24, 0xFE	; 254
    4180:	80 83       	st	Z, r24
    4182:	80 81       	ld	r24, Z
    4184:	8d 7f       	andi	r24, 0xFD	; 253
    4186:	80 83       	st	Z, r24
    4188:	88 e4       	ldi	r24, 0x48	; 72
    418a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    418e:	85 e4       	ldi	r24, 0x45	; 69
    4190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4194:	08 95       	ret

00004196 <twi_disable>:
    4196:	ec eb       	ldi	r30, 0xBC	; 188
    4198:	f0 e0       	ldi	r31, 0x00	; 0
    419a:	80 81       	ld	r24, Z
    419c:	8a 7b       	andi	r24, 0xBA	; 186
    419e:	80 83       	st	Z, r24
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	84 e1       	ldi	r24, 0x14	; 20
    41a4:	0e 94 19 2c 	call	0x5832	; 0x5832 <digitalWrite>
    41a8:	60 e0       	ldi	r22, 0x00	; 0
    41aa:	85 e1       	ldi	r24, 0x15	; 21
    41ac:	0c 94 19 2c 	jmp	0x5832	; 0x5832 <digitalWrite>

000041b0 <twi_transmit>:
    41b0:	40 91 ee 03 	lds	r20, 0x03EE	; 0x8003ee <twi_txBufferLength>
    41b4:	26 2f       	mov	r18, r22
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	24 0f       	add	r18, r20
    41ba:	31 1d       	adc	r19, r1
    41bc:	21 32       	cpi	r18, 0x21	; 33
    41be:	31 05       	cpc	r19, r1
    41c0:	dc f4       	brge	.+54     	; 0x41f8 <twi_transmit+0x48>
    41c2:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <twi_state>
    41c6:	24 30       	cpi	r18, 0x04	; 4
    41c8:	c9 f4       	brne	.+50     	; 0x41fc <twi_transmit+0x4c>
    41ca:	fc 01       	movw	r30, r24
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	86 17       	cp	r24, r22
    41d2:	58 f4       	brcc	.+22     	; 0x41ea <twi_transmit+0x3a>
    41d4:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <twi_txBufferLength>
    41d8:	21 91       	ld	r18, Z+
    41da:	dc 01       	movw	r26, r24
    41dc:	a0 51       	subi	r26, 0x10	; 16
    41de:	bc 4f       	sbci	r27, 0xFC	; 252
    41e0:	a3 0f       	add	r26, r19
    41e2:	b1 1d       	adc	r27, r1
    41e4:	2c 93       	st	X, r18
    41e6:	01 96       	adiw	r24, 0x01	; 1
    41e8:	f3 cf       	rjmp	.-26     	; 0x41d0 <twi_transmit+0x20>
    41ea:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <twi_txBufferLength>
    41ee:	68 0f       	add	r22, r24
    41f0:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <twi_txBufferLength>
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	08 95       	ret
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	08 95       	ret
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	08 95       	ret

00004200 <twi_attachSlaveRxEvent>:
    4200:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <twi_onSlaveReceive+0x1>
    4204:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_onSlaveReceive>
    4208:	08 95       	ret

0000420a <twi_attachSlaveTxEvent>:
    420a:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <twi_onSlaveTransmit+0x1>
    420e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <twi_onSlaveTransmit>
    4212:	08 95       	ret

00004214 <twi_releaseBus>:
    4214:	85 ec       	ldi	r24, 0xC5	; 197
    4216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    421a:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_state>
    421e:	08 95       	ret

00004220 <twi_handleTimeout>:
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	91 e0       	ldi	r25, 0x01	; 1
    4226:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <twi_timed_out_flag>
    422a:	88 23       	and	r24, r24
    422c:	51 f0       	breq	.+20     	; 0x4242 <twi_handleTimeout+0x22>
    422e:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4232:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4236:	af df       	rcall	.-162    	; 0x4196 <twi_disable>
    4238:	90 df       	rcall	.-224    	; 0x415a <twi_init>
    423a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    423e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	08 95       	ret

00004248 <twi_writeTo>:
    4248:	4f 92       	push	r4
    424a:	5f 92       	push	r5
    424c:	6f 92       	push	r6
    424e:	7f 92       	push	r7
    4250:	8f 92       	push	r8
    4252:	9f 92       	push	r9
    4254:	af 92       	push	r10
    4256:	bf 92       	push	r11
    4258:	cf 92       	push	r12
    425a:	df 92       	push	r13
    425c:	ef 92       	push	r14
    425e:	ff 92       	push	r15
    4260:	0f 93       	push	r16
    4262:	1f 93       	push	r17
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	41 32       	cpi	r20, 0x21	; 33
    426a:	08 f0       	brcs	.+2      	; 0x426e <twi_writeTo+0x26>
    426c:	c5 c0       	rjmp	.+394    	; 0x43f8 <twi_writeTo+0x1b0>
    426e:	12 2f       	mov	r17, r18
    4270:	f4 2e       	mov	r15, r20
    4272:	d7 2e       	mov	r13, r23
    4274:	e6 2e       	mov	r14, r22
    4276:	d8 2f       	mov	r29, r24
    4278:	0e 94 bd 2a 	call	0x557a	; 0x557a <micros>
    427c:	4b 01       	movw	r8, r22
    427e:	5c 01       	movw	r10, r24
    4280:	c0 91 3f 04 	lds	r28, 0x043F	; 0x80043f <twi_state>
    4284:	cc 23       	and	r28, r28
    4286:	11 f1       	breq	.+68     	; 0x42cc <twi_writeTo+0x84>
    4288:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <twi_timeout_us>
    428c:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    4290:	a0 91 3a 04 	lds	r26, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    4294:	b0 91 3b 04 	lds	r27, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    4298:	89 2b       	or	r24, r25
    429a:	8a 2b       	or	r24, r26
    429c:	8b 2b       	or	r24, r27
    429e:	81 f3       	breq	.-32     	; 0x4280 <twi_writeTo+0x38>
    42a0:	0e 94 bd 2a 	call	0x557a	; 0x557a <micros>
    42a4:	40 90 38 04 	lds	r4, 0x0438	; 0x800438 <twi_timeout_us>
    42a8:	50 90 39 04 	lds	r5, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    42ac:	60 90 3a 04 	lds	r6, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    42b0:	70 90 3b 04 	lds	r7, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	88 19       	sub	r24, r8
    42ba:	99 09       	sbc	r25, r9
    42bc:	aa 09       	sbc	r26, r10
    42be:	bb 09       	sbc	r27, r11
    42c0:	48 16       	cp	r4, r24
    42c2:	59 06       	cpc	r5, r25
    42c4:	6a 06       	cpc	r6, r26
    42c6:	7b 06       	cpc	r7, r27
    42c8:	d8 f6       	brcc	.-74     	; 0x4280 <twi_writeTo+0x38>
    42ca:	83 c0       	rjmp	.+262    	; 0x43d2 <twi_writeTo+0x18a>
    42cc:	82 e0       	ldi	r24, 0x02	; 2
    42ce:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <twi_state>
    42d2:	00 93 3d 04 	sts	0x043D, r16	; 0x80043d <twi_sendStop>
    42d6:	8f ef       	ldi	r24, 0xFF	; 255
    42d8:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_error>
    42dc:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <twi_masterBufferIndex>
    42e0:	f0 92 10 04 	sts	0x0410, r15	; 0x800410 <twi_masterBufferLength>
    42e4:	9e 2d       	mov	r25, r14
    42e6:	a2 e1       	ldi	r26, 0x12	; 18
    42e8:	b4 e0       	ldi	r27, 0x04	; 4
    42ea:	ee 2d       	mov	r30, r14
    42ec:	fd 2d       	mov	r31, r13
    42ee:	8e 2f       	mov	r24, r30
    42f0:	89 1b       	sub	r24, r25
    42f2:	8f 15       	cp	r24, r15
    42f4:	18 f4       	brcc	.+6      	; 0x42fc <twi_writeTo+0xb4>
    42f6:	81 91       	ld	r24, Z+
    42f8:	8d 93       	st	X+, r24
    42fa:	f9 cf       	rjmp	.-14     	; 0x42ee <twi_writeTo+0xa6>
    42fc:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <twi_slarw>
    4300:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_slarw>
    4304:	dd 0f       	add	r29, r29
    4306:	d9 2b       	or	r29, r25
    4308:	d0 93 3e 04 	sts	0x043E, r29	; 0x80043e <twi_slarw>
    430c:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_inRepStart>
    4310:	81 30       	cpi	r24, 0x01	; 1
    4312:	89 f5       	brne	.+98     	; 0x4376 <twi_writeTo+0x12e>
    4314:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_inRepStart>
    4318:	0e 94 bd 2a 	call	0x557a	; 0x557a <micros>
    431c:	6b 01       	movw	r12, r22
    431e:	7c 01       	movw	r14, r24
    4320:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_slarw>
    4324:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4328:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <twi_timeout_us>
    432c:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    4330:	a0 91 3a 04 	lds	r26, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    4334:	b0 91 3b 04 	lds	r27, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    4338:	89 2b       	or	r24, r25
    433a:	8a 2b       	or	r24, r26
    433c:	8b 2b       	or	r24, r27
    433e:	a9 f0       	breq	.+42     	; 0x436a <twi_writeTo+0x122>
    4340:	0e 94 bd 2a 	call	0x557a	; 0x557a <micros>
    4344:	80 90 38 04 	lds	r8, 0x0438	; 0x800438 <twi_timeout_us>
    4348:	90 90 39 04 	lds	r9, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    434c:	a0 90 3a 04 	lds	r10, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    4350:	b0 90 3b 04 	lds	r11, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	8c 19       	sub	r24, r12
    435a:	9d 09       	sbc	r25, r13
    435c:	ae 09       	sbc	r26, r14
    435e:	bf 09       	sbc	r27, r15
    4360:	88 16       	cp	r8, r24
    4362:	99 06       	cpc	r9, r25
    4364:	aa 06       	cpc	r10, r26
    4366:	bb 06       	cpc	r11, r27
    4368:	a0 f1       	brcs	.+104    	; 0x43d2 <twi_writeTo+0x18a>
    436a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    436e:	83 fd       	sbrc	r24, 3
    4370:	d7 cf       	rjmp	.-82     	; 0x4320 <twi_writeTo+0xd8>
    4372:	85 ec       	ldi	r24, 0xC5	; 197
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <twi_writeTo+0x130>
    4376:	85 ee       	ldi	r24, 0xE5	; 229
    4378:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    437c:	0e 94 bd 2a 	call	0x557a	; 0x557a <micros>
    4380:	6b 01       	movw	r12, r22
    4382:	7c 01       	movw	r14, r24
    4384:	11 23       	and	r17, r17
    4386:	51 f1       	breq	.+84     	; 0x43dc <twi_writeTo+0x194>
    4388:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <twi_state>
    438c:	82 30       	cpi	r24, 0x02	; 2
    438e:	31 f5       	brne	.+76     	; 0x43dc <twi_writeTo+0x194>
    4390:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <twi_timeout_us>
    4394:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    4398:	a0 91 3a 04 	lds	r26, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    439c:	b0 91 3b 04 	lds	r27, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    43a0:	89 2b       	or	r24, r25
    43a2:	8a 2b       	or	r24, r26
    43a4:	8b 2b       	or	r24, r27
    43a6:	71 f3       	breq	.-36     	; 0x4384 <twi_writeTo+0x13c>
    43a8:	0e 94 bd 2a 	call	0x557a	; 0x557a <micros>
    43ac:	80 90 38 04 	lds	r8, 0x0438	; 0x800438 <twi_timeout_us>
    43b0:	90 90 39 04 	lds	r9, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    43b4:	a0 90 3a 04 	lds	r10, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    43b8:	b0 90 3b 04 	lds	r11, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	8c 19       	sub	r24, r12
    43c2:	9d 09       	sbc	r25, r13
    43c4:	ae 09       	sbc	r26, r14
    43c6:	bf 09       	sbc	r27, r15
    43c8:	88 16       	cp	r8, r24
    43ca:	99 06       	cpc	r9, r25
    43cc:	aa 06       	cpc	r10, r26
    43ce:	bb 06       	cpc	r11, r27
    43d0:	c8 f6       	brcc	.-78     	; 0x4384 <twi_writeTo+0x13c>
    43d2:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <twi_do_reset_on_timeout>
    43d6:	24 df       	rcall	.-440    	; 0x4220 <twi_handleTimeout>
    43d8:	c5 e0       	ldi	r28, 0x05	; 5
    43da:	13 c0       	rjmp	.+38     	; 0x4402 <twi_writeTo+0x1ba>
    43dc:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_error>
    43e0:	8f 3f       	cpi	r24, 0xFF	; 255
    43e2:	79 f0       	breq	.+30     	; 0x4402 <twi_writeTo+0x1ba>
    43e4:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_error>
    43e8:	80 32       	cpi	r24, 0x20	; 32
    43ea:	41 f0       	breq	.+16     	; 0x43fc <twi_writeTo+0x1b4>
    43ec:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_error>
    43f0:	80 33       	cpi	r24, 0x30	; 48
    43f2:	31 f0       	breq	.+12     	; 0x4400 <twi_writeTo+0x1b8>
    43f4:	c4 e0       	ldi	r28, 0x04	; 4
    43f6:	05 c0       	rjmp	.+10     	; 0x4402 <twi_writeTo+0x1ba>
    43f8:	c1 e0       	ldi	r28, 0x01	; 1
    43fa:	03 c0       	rjmp	.+6      	; 0x4402 <twi_writeTo+0x1ba>
    43fc:	c2 e0       	ldi	r28, 0x02	; 2
    43fe:	01 c0       	rjmp	.+2      	; 0x4402 <twi_writeTo+0x1ba>
    4400:	c3 e0       	ldi	r28, 0x03	; 3
    4402:	8c 2f       	mov	r24, r28
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	ff 90       	pop	r15
    440e:	ef 90       	pop	r14
    4410:	df 90       	pop	r13
    4412:	cf 90       	pop	r12
    4414:	bf 90       	pop	r11
    4416:	af 90       	pop	r10
    4418:	9f 90       	pop	r9
    441a:	8f 90       	pop	r8
    441c:	7f 90       	pop	r7
    441e:	6f 90       	pop	r6
    4420:	5f 90       	pop	r5
    4422:	4f 90       	pop	r4
    4424:	08 95       	ret

00004426 <twi_stop>:
    4426:	85 ed       	ldi	r24, 0xD5	; 213
    4428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    442c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <twi_timeout_us>
    4430:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    4434:	a0 91 3a 04 	lds	r26, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    4438:	b0 91 3b 04 	lds	r27, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    443c:	07 96       	adiw	r24, 0x07	; 7
    443e:	a1 1d       	adc	r26, r1
    4440:	b1 1d       	adc	r27, r1
    4442:	23 e0       	ldi	r18, 0x03	; 3
    4444:	b6 95       	lsr	r27
    4446:	a7 95       	ror	r26
    4448:	97 95       	ror	r25
    444a:	87 95       	ror	r24
    444c:	2a 95       	dec	r18
    444e:	d1 f7       	brne	.-12     	; 0x4444 <twi_stop+0x1e>
    4450:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4454:	24 ff       	sbrs	r18, 4
    4456:	1b c0       	rjmp	.+54     	; 0x448e <twi_stop+0x68>
    4458:	40 91 38 04 	lds	r20, 0x0438	; 0x800438 <twi_timeout_us>
    445c:	50 91 39 04 	lds	r21, 0x0439	; 0x800439 <twi_timeout_us+0x1>
    4460:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <twi_timeout_us+0x2>
    4464:	70 91 3b 04 	lds	r23, 0x043B	; 0x80043b <twi_timeout_us+0x3>
    4468:	45 2b       	or	r20, r21
    446a:	46 2b       	or	r20, r22
    446c:	47 2b       	or	r20, r23
    446e:	81 f3       	breq	.-32     	; 0x4450 <twi_stop+0x2a>
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	a1 05       	cpc	r26, r1
    4474:	b1 05       	cpc	r27, r1
    4476:	41 f0       	breq	.+16     	; 0x4488 <twi_stop+0x62>
    4478:	25 e3       	ldi	r18, 0x35	; 53
    447a:	2a 95       	dec	r18
    447c:	f1 f7       	brne	.-4      	; 0x447a <twi_stop+0x54>
    447e:	00 00       	nop
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	a1 09       	sbc	r26, r1
    4484:	b1 09       	sbc	r27, r1
    4486:	e4 cf       	rjmp	.-56     	; 0x4450 <twi_stop+0x2a>
    4488:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <twi_do_reset_on_timeout>
    448c:	c9 ce       	rjmp	.-622    	; 0x4220 <twi_handleTimeout>
    448e:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_state>
    4492:	08 95       	ret

00004494 <__vector_39>:

ISR(TWI_vect)
{
    4494:	1f 92       	push	r1
    4496:	0f 92       	push	r0
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	0f 92       	push	r0
    449c:	11 24       	eor	r1, r1
    449e:	0b b6       	in	r0, 0x3b	; 59
    44a0:	0f 92       	push	r0
    44a2:	2f 93       	push	r18
    44a4:	3f 93       	push	r19
    44a6:	4f 93       	push	r20
    44a8:	5f 93       	push	r21
    44aa:	6f 93       	push	r22
    44ac:	7f 93       	push	r23
    44ae:	8f 93       	push	r24
    44b0:	9f 93       	push	r25
    44b2:	af 93       	push	r26
    44b4:	bf 93       	push	r27
    44b6:	ef 93       	push	r30
    44b8:	ff 93       	push	r31
  switch(TW_STATUS){
    44ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    44be:	88 7f       	andi	r24, 0xF8	; 248
    44c0:	80 36       	cpi	r24, 0x60	; 96
    44c2:	09 f4       	brne	.+2      	; 0x44c6 <__vector_39+0x32>
    44c4:	9d c0       	rjmp	.+314    	; 0x4600 <__vector_39+0x16c>
    44c6:	70 f5       	brcc	.+92     	; 0x4524 <__vector_39+0x90>
    44c8:	88 32       	cpi	r24, 0x28	; 40
    44ca:	09 f4       	brne	.+2      	; 0x44ce <__vector_39+0x3a>
    44cc:	5c c0       	rjmp	.+184    	; 0x4586 <__vector_39+0xf2>
    44ce:	90 f4       	brcc	.+36     	; 0x44f4 <__vector_39+0x60>
    44d0:	80 31       	cpi	r24, 0x10	; 16
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <__vector_39+0x42>
    44d4:	55 c0       	rjmp	.+170    	; 0x4580 <__vector_39+0xec>
    44d6:	38 f4       	brcc	.+14     	; 0x44e6 <__vector_39+0x52>
    44d8:	88 23       	and	r24, r24
    44da:	09 f4       	brne	.+2      	; 0x44de <__vector_39+0x4a>
    44dc:	f3 c0       	rjmp	.+486    	; 0x46c4 <__vector_39+0x230>
    44de:	88 30       	cpi	r24, 0x08	; 8
    44e0:	09 f4       	brne	.+2      	; 0x44e4 <__vector_39+0x50>
    44e2:	4e c0       	rjmp	.+156    	; 0x4580 <__vector_39+0xec>
    44e4:	f2 c0       	rjmp	.+484    	; 0x46ca <__vector_39+0x236>
    44e6:	88 31       	cpi	r24, 0x18	; 24
    44e8:	09 f4       	brne	.+2      	; 0x44ec <__vector_39+0x58>
    44ea:	4d c0       	rjmp	.+154    	; 0x4586 <__vector_39+0xf2>
    44ec:	80 32       	cpi	r24, 0x20	; 32
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <__vector_39+0x5e>
    44f0:	5e c0       	rjmp	.+188    	; 0x45ae <__vector_39+0x11a>
    44f2:	eb c0       	rjmp	.+470    	; 0x46ca <__vector_39+0x236>
    44f4:	80 34       	cpi	r24, 0x40	; 64
    44f6:	09 f4       	brne	.+2      	; 0x44fa <__vector_39+0x66>
    44f8:	69 c0       	rjmp	.+210    	; 0x45cc <__vector_39+0x138>
    44fa:	50 f4       	brcc	.+20     	; 0x4510 <__vector_39+0x7c>
    44fc:	80 33       	cpi	r24, 0x30	; 48
    44fe:	09 f4       	brne	.+2      	; 0x4502 <__vector_39+0x6e>
    4500:	56 c0       	rjmp	.+172    	; 0x45ae <__vector_39+0x11a>
    4502:	88 33       	cpi	r24, 0x38	; 56
    4504:	09 f0       	breq	.+2      	; 0x4508 <__vector_39+0x74>
    4506:	e1 c0       	rjmp	.+450    	; 0x46ca <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4508:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_error>
      twi_releaseBus();
    450c:	83 de       	rcall	.-762    	; 0x4214 <twi_releaseBus>
      break;
    450e:	dd c0       	rjmp	.+442    	; 0x46ca <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4510:	80 35       	cpi	r24, 0x50	; 80
    4512:	09 f4       	brne	.+2      	; 0x4516 <__vector_39+0x82>
    4514:	4f c0       	rjmp	.+158    	; 0x45b4 <__vector_39+0x120>
    4516:	88 35       	cpi	r24, 0x58	; 88
    4518:	09 f4       	brne	.+2      	; 0x451c <__vector_39+0x88>
    451a:	5d c0       	rjmp	.+186    	; 0x45d6 <__vector_39+0x142>
    451c:	88 34       	cpi	r24, 0x48	; 72
    451e:	09 f0       	breq	.+2      	; 0x4522 <__vector_39+0x8e>
    4520:	d4 c0       	rjmp	.+424    	; 0x46ca <__vector_39+0x236>
    4522:	d2 c0       	rjmp	.+420    	; 0x46c8 <__vector_39+0x234>
    4524:	88 39       	cpi	r24, 0x98	; 152
    4526:	09 f4       	brne	.+2      	; 0x452a <__vector_39+0x96>
    4528:	c3 c0       	rjmp	.+390    	; 0x46b0 <__vector_39+0x21c>
    452a:	a8 f4       	brcc	.+42     	; 0x4556 <__vector_39+0xc2>
    452c:	88 37       	cpi	r24, 0x78	; 120
    452e:	09 f4       	brne	.+2      	; 0x4532 <__vector_39+0x9e>
    4530:	67 c0       	rjmp	.+206    	; 0x4600 <__vector_39+0x16c>
    4532:	38 f4       	brcc	.+14     	; 0x4542 <__vector_39+0xae>
    4534:	88 36       	cpi	r24, 0x68	; 104
    4536:	09 f4       	brne	.+2      	; 0x453a <__vector_39+0xa6>
    4538:	63 c0       	rjmp	.+198    	; 0x4600 <__vector_39+0x16c>
    453a:	80 37       	cpi	r24, 0x70	; 112
    453c:	09 f4       	brne	.+2      	; 0x4540 <__vector_39+0xac>
    453e:	60 c0       	rjmp	.+192    	; 0x4600 <__vector_39+0x16c>
    4540:	c4 c0       	rjmp	.+392    	; 0x46ca <__vector_39+0x236>
    4542:	88 38       	cpi	r24, 0x88	; 136
    4544:	09 f4       	brne	.+2      	; 0x4548 <__vector_39+0xb4>
    4546:	b4 c0       	rjmp	.+360    	; 0x46b0 <__vector_39+0x21c>
    4548:	80 39       	cpi	r24, 0x90	; 144
    454a:	09 f4       	brne	.+2      	; 0x454e <__vector_39+0xba>
    454c:	5f c0       	rjmp	.+190    	; 0x460c <__vector_39+0x178>
    454e:	80 38       	cpi	r24, 0x80	; 128
    4550:	09 f0       	breq	.+2      	; 0x4554 <__vector_39+0xc0>
    4552:	bb c0       	rjmp	.+374    	; 0x46ca <__vector_39+0x236>
    4554:	5b c0       	rjmp	.+182    	; 0x460c <__vector_39+0x178>
    4556:	80 3b       	cpi	r24, 0xB0	; 176
    4558:	09 f4       	brne	.+2      	; 0x455c <__vector_39+0xc8>
    455a:	82 c0       	rjmp	.+260    	; 0x4660 <__vector_39+0x1cc>
    455c:	38 f4       	brcc	.+14     	; 0x456c <__vector_39+0xd8>
    455e:	80 3a       	cpi	r24, 0xA0	; 160
    4560:	09 f4       	brne	.+2      	; 0x4564 <__vector_39+0xd0>
    4562:	66 c0       	rjmp	.+204    	; 0x4630 <__vector_39+0x19c>
    4564:	88 3a       	cpi	r24, 0xA8	; 168
    4566:	09 f4       	brne	.+2      	; 0x456a <__vector_39+0xd6>
    4568:	7b c0       	rjmp	.+246    	; 0x4660 <__vector_39+0x1cc>
    456a:	af c0       	rjmp	.+350    	; 0x46ca <__vector_39+0x236>
    456c:	80 3c       	cpi	r24, 0xC0	; 192
    456e:	09 f4       	brne	.+2      	; 0x4572 <__vector_39+0xde>
    4570:	a3 c0       	rjmp	.+326    	; 0x46b8 <__vector_39+0x224>
    4572:	88 3c       	cpi	r24, 0xC8	; 200
    4574:	09 f4       	brne	.+2      	; 0x4578 <__vector_39+0xe4>
    4576:	a0 c0       	rjmp	.+320    	; 0x46b8 <__vector_39+0x224>
    4578:	88 3b       	cpi	r24, 0xB8	; 184
    457a:	09 f4       	brne	.+2      	; 0x457e <__vector_39+0xea>
    457c:	86 c0       	rjmp	.+268    	; 0x468a <__vector_39+0x1f6>
    457e:	a5 c0       	rjmp	.+330    	; 0x46ca <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4580:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_slarw>
    4584:	10 c0       	rjmp	.+32     	; 0x45a6 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4586:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <twi_masterBufferIndex>
    458a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <twi_masterBufferLength>
    458e:	98 17       	cp	r25, r24
    4590:	70 f5       	brcc	.+92     	; 0x45ee <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4592:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <twi_masterBufferIndex>
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	8e 0f       	add	r24, r30
    459a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <twi_masterBufferIndex>
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	ee 5e       	subi	r30, 0xEE	; 238
    45a2:	fb 4f       	sbci	r31, 0xFB	; 251
    45a4:	80 81       	ld	r24, Z
    45a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    45aa:	85 ec       	ldi	r24, 0xC5	; 197
    45ac:	82 c0       	rjmp	.+260    	; 0x46b2 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    45ae:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_error>
    45b2:	8a c0       	rjmp	.+276    	; 0x46c8 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    45b4:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <twi_masterBufferIndex>
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	8e 0f       	add	r24, r30
    45bc:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <twi_masterBufferIndex>
    45c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	ee 5e       	subi	r30, 0xEE	; 238
    45c8:	fb 4f       	sbci	r31, 0xFB	; 251
    45ca:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    45cc:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <twi_masterBufferIndex>
    45d0:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <twi_masterBufferLength>
    45d4:	6a c0       	rjmp	.+212    	; 0x46aa <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    45d6:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <twi_masterBufferIndex>
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	8e 0f       	add	r24, r30
    45de:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <twi_masterBufferIndex>
    45e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	ee 5e       	subi	r30, 0xEE	; 238
    45ea:	fb 4f       	sbci	r31, 0xFB	; 251
    45ec:	80 83       	st	Z, r24
      if (twi_sendStop){
    45ee:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_sendStop>
    45f2:	81 11       	cpse	r24, r1
    45f4:	69 c0       	rjmp	.+210    	; 0x46c8 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    45fc:	84 ea       	ldi	r24, 0xA4	; 164
    45fe:	5d c0       	rjmp	.+186    	; 0x46ba <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4600:	83 e0       	ldi	r24, 0x03	; 3
    4602:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4606:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <twi_rxBufferIndex>
    460a:	cf cf       	rjmp	.-98     	; 0x45aa <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    460c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <twi_rxBufferIndex>
    4610:	80 32       	cpi	r24, 0x20	; 32
    4612:	08 f0       	brcs	.+2      	; 0x4616 <__vector_39+0x182>
    4614:	4d c0       	rjmp	.+154    	; 0x46b0 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4616:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <twi_rxBufferIndex>
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	8e 0f       	add	r24, r30
    461e:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <twi_rxBufferIndex>
    4622:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4626:	f0 e0       	ldi	r31, 0x00	; 0
    4628:	e2 53       	subi	r30, 0x32	; 50
    462a:	fc 4f       	sbci	r31, 0xFC	; 252
    462c:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    462e:	bd cf       	rjmp	.-134    	; 0x45aa <__vector_39+0x116>
    4630:	f1 dd       	rcall	.-1054   	; 0x4214 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4632:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <twi_rxBufferIndex>
    4636:	80 32       	cpi	r24, 0x20	; 32
    4638:	30 f4       	brcc	.+12     	; 0x4646 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    463a:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <twi_rxBufferIndex>
    463e:	f0 e0       	ldi	r31, 0x00	; 0
    4640:	e2 53       	subi	r30, 0x32	; 50
    4642:	fc 4f       	sbci	r31, 0xFC	; 252
    4644:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4646:	60 91 cd 03 	lds	r22, 0x03CD	; 0x8003cd <twi_rxBufferIndex>
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	e0 91 32 04 	lds	r30, 0x0432	; 0x800432 <twi_onSlaveReceive>
    4650:	f0 91 33 04 	lds	r31, 0x0433	; 0x800433 <twi_onSlaveReceive+0x1>
    4654:	8e ec       	ldi	r24, 0xCE	; 206
    4656:	93 e0       	ldi	r25, 0x03	; 3
    4658:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    465a:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <twi_rxBufferIndex>
      break;
    465e:	35 c0       	rjmp	.+106    	; 0x46ca <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4660:	84 e0       	ldi	r24, 0x04	; 4
    4662:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4666:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    466a:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    466e:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <twi_onSlaveTransmit>
    4672:	f0 91 35 04 	lds	r31, 0x0435	; 0x800435 <twi_onSlaveTransmit+0x1>
    4676:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4678:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <twi_txBufferLength>
    467c:	81 11       	cpse	r24, r1
    467e:	05 c0       	rjmp	.+10     	; 0x468a <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4686:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    468a:	e0 91 ef 03 	lds	r30, 0x03EF	; 0x8003ef <twi_txBufferIndex>
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	8e 0f       	add	r24, r30
    4692:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <twi_txBufferIndex>
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	e0 51       	subi	r30, 0x10	; 16
    469a:	fc 4f       	sbci	r31, 0xFC	; 252
    469c:	80 81       	ld	r24, Z
    469e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    46a2:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <twi_txBufferIndex>
    46a6:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <twi_txBufferLength>
    46aa:	98 17       	cp	r25, r24
    46ac:	08 f4       	brcc	.+2      	; 0x46b0 <__vector_39+0x21c>
    46ae:	7d cf       	rjmp	.-262    	; 0x45aa <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    46b0:	85 e8       	ldi	r24, 0x85	; 133
    46b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46b6:	09 c0       	rjmp	.+18     	; 0x46ca <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    46b8:	85 ec       	ldi	r24, 0xC5	; 197
    46ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    46be:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_state>
      break;
    46c2:	03 c0       	rjmp	.+6      	; 0x46ca <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    46c4:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_error>
      twi_stop();
    46c8:	ae de       	rcall	.-676    	; 0x4426 <twi_stop>
      break;
  }
}
    46ca:	ff 91       	pop	r31
    46cc:	ef 91       	pop	r30
    46ce:	bf 91       	pop	r27
    46d0:	af 91       	pop	r26
    46d2:	9f 91       	pop	r25
    46d4:	8f 91       	pop	r24
    46d6:	7f 91       	pop	r23
    46d8:	6f 91       	pop	r22
    46da:	5f 91       	pop	r21
    46dc:	4f 91       	pop	r20
    46de:	3f 91       	pop	r19
    46e0:	2f 91       	pop	r18
    46e2:	0f 90       	pop	r0
    46e4:	0b be       	out	0x3b, r0	; 59
    46e6:	0f 90       	pop	r0
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	0f 90       	pop	r0
    46ec:	1f 90       	pop	r1
    46ee:	18 95       	reti

000046f0 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    46f0:	cf 93       	push	r28
    46f2:	df 93       	push	r29
    46f4:	00 d0       	rcall	.+0      	; 0x46f6 <_ZN5Print13setWriteErrorEi+0x6>
    46f6:	1f 92       	push	r1
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
    46fc:	9a 83       	std	Y+2, r25	; 0x02
    46fe:	89 83       	std	Y+1, r24	; 0x01
    4700:	7c 83       	std	Y+4, r23	; 0x04
    4702:	6b 83       	std	Y+3, r22	; 0x03
    4704:	89 81       	ldd	r24, Y+1	; 0x01
    4706:	9a 81       	ldd	r25, Y+2	; 0x02
    4708:	2b 81       	ldd	r18, Y+3	; 0x03
    470a:	3c 81       	ldd	r19, Y+4	; 0x04
    470c:	fc 01       	movw	r30, r24
    470e:	33 83       	std	Z+3, r19	; 0x03
    4710:	22 83       	std	Z+2, r18	; 0x02
    4712:	00 00       	nop
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	df 91       	pop	r29
    471e:	cf 91       	pop	r28
    4720:	08 95       	ret

00004722 <_ZN5PrintC1Ev>:
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	1f 92       	push	r1
    4728:	1f 92       	push	r1
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	9a 83       	std	Y+2, r25	; 0x02
    4730:	89 83       	std	Y+1, r24	; 0x01
    4732:	2e ed       	ldi	r18, 0xDE	; 222
    4734:	32 e0       	ldi	r19, 0x02	; 2
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	9a 81       	ldd	r25, Y+2	; 0x02
    473a:	fc 01       	movw	r30, r24
    473c:	31 83       	std	Z+1, r19	; 0x01
    473e:	20 83       	st	Z, r18
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	9a 81       	ldd	r25, Y+2	; 0x02
    4744:	fc 01       	movw	r30, r24
    4746:	13 82       	std	Z+3, r1	; 0x03
    4748:	12 82       	std	Z+2, r1	; 0x02
    474a:	00 00       	nop
    474c:	0f 90       	pop	r0
    474e:	0f 90       	pop	r0
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	08 95       	ret

00004756 <_ZN5Print17availableForWriteEv>:
    4756:	cf 93       	push	r28
    4758:	df 93       	push	r29
    475a:	1f 92       	push	r1
    475c:	1f 92       	push	r1
    475e:	cd b7       	in	r28, 0x3d	; 61
    4760:	de b7       	in	r29, 0x3e	; 62
    4762:	9a 83       	std	Y+2, r25	; 0x02
    4764:	89 83       	std	Y+1, r24	; 0x01
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	0f 90       	pop	r0
    476c:	0f 90       	pop	r0
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	08 95       	ret

00004774 <_ZN5Print5flushEv>:
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	1f 92       	push	r1
    477a:	1f 92       	push	r1
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	9a 83       	std	Y+2, r25	; 0x02
    4782:	89 83       	std	Y+1, r24	; 0x01
    4784:	00 00       	nop
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	08 95       	ret

00004790 <_ZN6StreamC1Ev>:
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	1f 92       	push	r1
    4796:	1f 92       	push	r1
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	9a 83       	std	Y+2, r25	; 0x02
    479e:	89 83       	std	Y+1, r24	; 0x01
    47a0:	89 81       	ldd	r24, Y+1	; 0x01
    47a2:	9a 81       	ldd	r25, Y+2	; 0x02
    47a4:	be df       	rcall	.-132    	; 0x4722 <_ZN5PrintC1Ev>
    47a6:	2b ea       	ldi	r18, 0xAB	; 171
    47a8:	32 e0       	ldi	r19, 0x02	; 2
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	9a 81       	ldd	r25, Y+2	; 0x02
    47ae:	fc 01       	movw	r30, r24
    47b0:	31 83       	std	Z+1, r19	; 0x01
    47b2:	20 83       	st	Z, r18
    47b4:	29 81       	ldd	r18, Y+1	; 0x01
    47b6:	3a 81       	ldd	r19, Y+2	; 0x02
    47b8:	88 ee       	ldi	r24, 0xE8	; 232
    47ba:	93 e0       	ldi	r25, 0x03	; 3
    47bc:	a0 e0       	ldi	r26, 0x00	; 0
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	f9 01       	movw	r30, r18
    47c2:	84 83       	std	Z+4, r24	; 0x04
    47c4:	95 83       	std	Z+5, r25	; 0x05
    47c6:	a6 83       	std	Z+6, r26	; 0x06
    47c8:	b7 83       	std	Z+7, r27	; 0x07
    47ca:	00 00       	nop
    47cc:	0f 90       	pop	r0
    47ce:	0f 90       	pop	r0
    47d0:	df 91       	pop	r29
    47d2:	cf 91       	pop	r28
    47d4:	08 95       	ret

000047d6 <_ZN7TwoWireC1Ev>:
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	1f 92       	push	r1
    47dc:	1f 92       	push	r1
    47de:	cd b7       	in	r28, 0x3d	; 61
    47e0:	de b7       	in	r29, 0x3e	; 62
    47e2:	9a 83       	std	Y+2, r25	; 0x02
    47e4:	89 83       	std	Y+1, r24	; 0x01
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ea:	d2 df       	rcall	.-92     	; 0x4790 <_ZN6StreamC1Ev>
    47ec:	29 e9       	ldi	r18, 0x99	; 153
    47ee:	32 e0       	ldi	r19, 0x02	; 2
    47f0:	89 81       	ldd	r24, Y+1	; 0x01
    47f2:	9a 81       	ldd	r25, Y+2	; 0x02
    47f4:	fc 01       	movw	r30, r24
    47f6:	31 83       	std	Z+1, r19	; 0x01
    47f8:	20 83       	st	Z, r18
    47fa:	00 00       	nop
    47fc:	0f 90       	pop	r0
    47fe:	0f 90       	pop	r0
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	08 95       	ret

00004806 <_ZN7TwoWire5beginEv>:
    4806:	cf 93       	push	r28
    4808:	df 93       	push	r29
    480a:	1f 92       	push	r1
    480c:	1f 92       	push	r1
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	9a 83       	std	Y+2, r25	; 0x02
    4814:	89 83       	std	Y+1, r24	; 0x01
    4816:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    481a:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZN7TwoWire14rxBufferLengthE>
    481e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    4822:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    4826:	99 dc       	rcall	.-1742   	; 0x415a <twi_init>
    4828:	8b ec       	ldi	r24, 0xCB	; 203
    482a:	95 e2       	ldi	r25, 0x25	; 37
    482c:	ee dc       	rcall	.-1572   	; 0x420a <twi_attachSlaveTxEvent>
    482e:	8e e7       	ldi	r24, 0x7E	; 126
    4830:	95 e2       	ldi	r25, 0x25	; 37
    4832:	e6 dc       	rcall	.-1588   	; 0x4200 <twi_attachSlaveRxEvent>
    4834:	00 00       	nop
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	df 91       	pop	r29
    483c:	cf 91       	pop	r28
    483e:	08 95       	ret

00004840 <_ZN7TwoWire17beginTransmissionEh>:
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
    4844:	00 d0       	rcall	.+0      	; 0x4846 <_ZN7TwoWire17beginTransmissionEh+0x6>
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	9a 83       	std	Y+2, r25	; 0x02
    484c:	89 83       	std	Y+1, r24	; 0x01
    484e:	6b 83       	std	Y+3, r22	; 0x03
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZN7TwoWire12transmittingE>
    4856:	8b 81       	ldd	r24, Y+3	; 0x03
    4858:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <_ZN7TwoWire9txAddressE>
    485c:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    4860:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    4864:	00 00       	nop
    4866:	0f 90       	pop	r0
    4868:	0f 90       	pop	r0
    486a:	0f 90       	pop	r0
    486c:	df 91       	pop	r29
    486e:	cf 91       	pop	r28
    4870:	08 95       	ret

00004872 <_ZN7TwoWire17beginTransmissionEi>:
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	00 d0       	rcall	.+0      	; 0x4878 <_ZN7TwoWire17beginTransmissionEi+0x6>
    4878:	1f 92       	push	r1
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	9a 83       	std	Y+2, r25	; 0x02
    4880:	89 83       	std	Y+1, r24	; 0x01
    4882:	7c 83       	std	Y+4, r23	; 0x04
    4884:	6b 83       	std	Y+3, r22	; 0x03
    4886:	2b 81       	ldd	r18, Y+3	; 0x03
    4888:	89 81       	ldd	r24, Y+1	; 0x01
    488a:	9a 81       	ldd	r25, Y+2	; 0x02
    488c:	62 2f       	mov	r22, r18
    488e:	d8 df       	rcall	.-80     	; 0x4840 <_ZN7TwoWire17beginTransmissionEh>
    4890:	00 00       	nop
    4892:	0f 90       	pop	r0
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	0f 90       	pop	r0
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	08 95       	ret

000048a0 <_ZN7TwoWire15endTransmissionEh>:
    48a0:	0f 93       	push	r16
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	00 d0       	rcall	.+0      	; 0x48a8 <_ZN7TwoWire15endTransmissionEh+0x8>
    48a8:	1f 92       	push	r1
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	9b 83       	std	Y+3, r25	; 0x03
    48b0:	8a 83       	std	Y+2, r24	; 0x02
    48b2:	6c 83       	std	Y+4, r22	; 0x04
    48b4:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    48b8:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZN7TwoWire9txAddressE>
    48bc:	0c 81       	ldd	r16, Y+4	; 0x04
    48be:	21 e0       	ldi	r18, 0x01	; 1
    48c0:	49 2f       	mov	r20, r25
    48c2:	63 e6       	ldi	r22, 0x63	; 99
    48c4:	74 e0       	ldi	r23, 0x04	; 4
    48c6:	c0 dc       	rcall	.-1664   	; 0x4248 <twi_writeTo>
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    48ce:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    48d2:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZN7TwoWire12transmittingE>
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	0f 90       	pop	r0
    48da:	0f 90       	pop	r0
    48dc:	0f 90       	pop	r0
    48de:	0f 90       	pop	r0
    48e0:	df 91       	pop	r29
    48e2:	cf 91       	pop	r28
    48e4:	0f 91       	pop	r16
    48e6:	08 95       	ret

000048e8 <_ZN7TwoWire15endTransmissionEv>:
    48e8:	cf 93       	push	r28
    48ea:	df 93       	push	r29
    48ec:	1f 92       	push	r1
    48ee:	1f 92       	push	r1
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	89 83       	std	Y+1, r24	; 0x01
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	61 e0       	ldi	r22, 0x01	; 1
    48fe:	d0 df       	rcall	.-96     	; 0x48a0 <_ZN7TwoWire15endTransmissionEh>
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	08 95       	ret

0000490a <_ZN7TwoWire5writeEh>:
    490a:	cf 93       	push	r28
    490c:	df 93       	push	r29
    490e:	00 d0       	rcall	.+0      	; 0x4910 <_ZN7TwoWire5writeEh+0x6>
    4910:	cd b7       	in	r28, 0x3d	; 61
    4912:	de b7       	in	r29, 0x3e	; 62
    4914:	9a 83       	std	Y+2, r25	; 0x02
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	6b 83       	std	Y+3, r22	; 0x03
    491a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZN7TwoWire12transmittingE>
    491e:	88 23       	and	r24, r24
    4920:	f9 f0       	breq	.+62     	; 0x4960 <_ZN7TwoWire5writeEh+0x56>
    4922:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    4926:	80 32       	cpi	r24, 0x20	; 32
    4928:	40 f0       	brcs	.+16     	; 0x493a <_ZN7TwoWire5writeEh+0x30>
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	9a 81       	ldd	r25, Y+2	; 0x02
    492e:	61 e0       	ldi	r22, 0x01	; 1
    4930:	70 e0       	ldi	r23, 0x00	; 0
    4932:	de de       	rcall	.-580    	; 0x46f0 <_ZN5Print13setWriteErrorEi>
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	19 c0       	rjmp	.+50     	; 0x496c <_ZN7TwoWire5writeEh+0x62>
    493a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    493e:	88 2f       	mov	r24, r24
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	2b 81       	ldd	r18, Y+3	; 0x03
    4944:	8d 59       	subi	r24, 0x9D	; 157
    4946:	9b 4f       	sbci	r25, 0xFB	; 251
    4948:	fc 01       	movw	r30, r24
    494a:	20 83       	st	Z, r18
    494c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    4950:	8f 5f       	subi	r24, 0xFF	; 255
    4952:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    4956:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    495a:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    495e:	04 c0       	rjmp	.+8      	; 0x4968 <_ZN7TwoWire5writeEh+0x5e>
    4960:	ce 01       	movw	r24, r28
    4962:	03 96       	adiw	r24, 0x03	; 3
    4964:	61 e0       	ldi	r22, 0x01	; 1
    4966:	24 dc       	rcall	.-1976   	; 0x41b0 <twi_transmit>
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	0f 90       	pop	r0
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	08 95       	ret

00004978 <_ZN7TwoWire5writeEPKhj>:
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	28 97       	sbiw	r28, 0x08	; 8
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	9c 83       	std	Y+4, r25	; 0x04
    498e:	8b 83       	std	Y+3, r24	; 0x03
    4990:	7e 83       	std	Y+6, r23	; 0x06
    4992:	6d 83       	std	Y+5, r22	; 0x05
    4994:	58 87       	std	Y+8, r21	; 0x08
    4996:	4f 83       	std	Y+7, r20	; 0x07
    4998:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZN7TwoWire12transmittingE>
    499c:	88 23       	and	r24, r24
    499e:	21 f1       	breq	.+72     	; 0x49e8 <_ZN7TwoWire5writeEPKhj+0x70>
    49a0:	1a 82       	std	Y+2, r1	; 0x02
    49a2:	19 82       	std	Y+1, r1	; 0x01
    49a4:	29 81       	ldd	r18, Y+1	; 0x01
    49a6:	3a 81       	ldd	r19, Y+2	; 0x02
    49a8:	8f 81       	ldd	r24, Y+7	; 0x07
    49aa:	98 85       	ldd	r25, Y+8	; 0x08
    49ac:	28 17       	cp	r18, r24
    49ae:	39 07       	cpc	r19, r25
    49b0:	00 f5       	brcc	.+64     	; 0x49f2 <_ZN7TwoWire5writeEPKhj+0x7a>
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	9c 81       	ldd	r25, Y+4	; 0x04
    49b6:	fc 01       	movw	r30, r24
    49b8:	80 81       	ld	r24, Z
    49ba:	91 81       	ldd	r25, Z+1	; 0x01
    49bc:	fc 01       	movw	r30, r24
    49be:	20 81       	ld	r18, Z
    49c0:	31 81       	ldd	r19, Z+1	; 0x01
    49c2:	4d 81       	ldd	r20, Y+5	; 0x05
    49c4:	5e 81       	ldd	r21, Y+6	; 0x06
    49c6:	89 81       	ldd	r24, Y+1	; 0x01
    49c8:	9a 81       	ldd	r25, Y+2	; 0x02
    49ca:	84 0f       	add	r24, r20
    49cc:	95 1f       	adc	r25, r21
    49ce:	fc 01       	movw	r30, r24
    49d0:	40 81       	ld	r20, Z
    49d2:	8b 81       	ldd	r24, Y+3	; 0x03
    49d4:	9c 81       	ldd	r25, Y+4	; 0x04
    49d6:	64 2f       	mov	r22, r20
    49d8:	f9 01       	movw	r30, r18
    49da:	19 95       	eicall
    49dc:	89 81       	ldd	r24, Y+1	; 0x01
    49de:	9a 81       	ldd	r25, Y+2	; 0x02
    49e0:	01 96       	adiw	r24, 0x01	; 1
    49e2:	9a 83       	std	Y+2, r25	; 0x02
    49e4:	89 83       	std	Y+1, r24	; 0x01
    49e6:	de cf       	rjmp	.-68     	; 0x49a4 <_ZN7TwoWire5writeEPKhj+0x2c>
    49e8:	2f 81       	ldd	r18, Y+7	; 0x07
    49ea:	8d 81       	ldd	r24, Y+5	; 0x05
    49ec:	9e 81       	ldd	r25, Y+6	; 0x06
    49ee:	62 2f       	mov	r22, r18
    49f0:	df db       	rcall	.-2114   	; 0x41b0 <twi_transmit>
    49f2:	8f 81       	ldd	r24, Y+7	; 0x07
    49f4:	98 85       	ldd	r25, Y+8	; 0x08
    49f6:	28 96       	adiw	r28, 0x08	; 8
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	df 91       	pop	r29
    4a04:	cf 91       	pop	r28
    4a06:	08 95       	ret

00004a08 <_ZN7TwoWire9availableEv>:
    4a08:	cf 93       	push	r28
    4a0a:	df 93       	push	r29
    4a0c:	1f 92       	push	r1
    4a0e:	1f 92       	push	r1
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	9a 83       	std	Y+2, r25	; 0x02
    4a16:	89 83       	std	Y+1, r24	; 0x01
    4a18:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZN7TwoWire14rxBufferLengthE>
    4a1c:	28 2f       	mov	r18, r24
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4a24:	88 2f       	mov	r24, r24
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	a9 01       	movw	r20, r18
    4a2a:	48 1b       	sub	r20, r24
    4a2c:	59 0b       	sbc	r21, r25
    4a2e:	ca 01       	movw	r24, r20
    4a30:	0f 90       	pop	r0
    4a32:	0f 90       	pop	r0
    4a34:	df 91       	pop	r29
    4a36:	cf 91       	pop	r28
    4a38:	08 95       	ret

00004a3a <_ZN7TwoWire4readEv>:
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	00 d0       	rcall	.+0      	; 0x4a40 <_ZN7TwoWire4readEv+0x6>
    4a40:	1f 92       	push	r1
    4a42:	cd b7       	in	r28, 0x3d	; 61
    4a44:	de b7       	in	r29, 0x3e	; 62
    4a46:	9c 83       	std	Y+4, r25	; 0x04
    4a48:	8b 83       	std	Y+3, r24	; 0x03
    4a4a:	8f ef       	ldi	r24, 0xFF	; 255
    4a4c:	9f ef       	ldi	r25, 0xFF	; 255
    4a4e:	9a 83       	std	Y+2, r25	; 0x02
    4a50:	89 83       	std	Y+1, r24	; 0x01
    4a52:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4a56:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZN7TwoWire14rxBufferLengthE>
    4a5a:	98 17       	cp	r25, r24
    4a5c:	88 f4       	brcc	.+34     	; 0x4a80 <_ZN7TwoWire4readEv+0x46>
    4a5e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4a62:	88 2f       	mov	r24, r24
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	80 5c       	subi	r24, 0xC0	; 192
    4a68:	9b 4f       	sbci	r25, 0xFB	; 251
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	80 81       	ld	r24, Z
    4a6e:	88 2f       	mov	r24, r24
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	9a 83       	std	Y+2, r25	; 0x02
    4a74:	89 83       	std	Y+1, r24	; 0x01
    4a76:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4a7a:	8f 5f       	subi	r24, 0xFF	; 255
    4a7c:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4a80:	89 81       	ldd	r24, Y+1	; 0x01
    4a82:	9a 81       	ldd	r25, Y+2	; 0x02
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	08 95       	ret

00004a92 <_ZN7TwoWire4peekEv>:
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
    4a96:	00 d0       	rcall	.+0      	; 0x4a98 <_ZN7TwoWire4peekEv+0x6>
    4a98:	1f 92       	push	r1
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    4a9e:	9c 83       	std	Y+4, r25	; 0x04
    4aa0:	8b 83       	std	Y+3, r24	; 0x03
    4aa2:	8f ef       	ldi	r24, 0xFF	; 255
    4aa4:	9f ef       	ldi	r25, 0xFF	; 255
    4aa6:	9a 83       	std	Y+2, r25	; 0x02
    4aa8:	89 83       	std	Y+1, r24	; 0x01
    4aaa:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4aae:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZN7TwoWire14rxBufferLengthE>
    4ab2:	98 17       	cp	r25, r24
    4ab4:	60 f4       	brcc	.+24     	; 0x4ace <_ZN7TwoWire4peekEv+0x3c>
    4ab6:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4aba:	88 2f       	mov	r24, r24
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	80 5c       	subi	r24, 0xC0	; 192
    4ac0:	9b 4f       	sbci	r25, 0xFB	; 251
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	80 81       	ld	r24, Z
    4ac6:	88 2f       	mov	r24, r24
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	9a 83       	std	Y+2, r25	; 0x02
    4acc:	89 83       	std	Y+1, r24	; 0x01
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	0f 90       	pop	r0
    4ad8:	0f 90       	pop	r0
    4ada:	df 91       	pop	r29
    4adc:	cf 91       	pop	r28
    4ade:	08 95       	ret

00004ae0 <_ZN7TwoWire5flushEv>:
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	1f 92       	push	r1
    4ae6:	1f 92       	push	r1
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	9a 83       	std	Y+2, r25	; 0x02
    4aee:	89 83       	std	Y+1, r24	; 0x01
    4af0:	00 00       	nop
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	08 95       	ret

00004afc <_ZN7TwoWire16onReceiveServiceEPhi>:
    4afc:	cf 93       	push	r28
    4afe:	df 93       	push	r29
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    4b02:	1f 92       	push	r1
    4b04:	1f 92       	push	r1
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	9b 83       	std	Y+3, r25	; 0x03
    4b0c:	8a 83       	std	Y+2, r24	; 0x02
    4b0e:	7d 83       	std	Y+5, r23	; 0x05
    4b10:	6c 83       	std	Y+4, r22	; 0x04
    4b12:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <_ZN7TwoWire14user_onReceiveE>
    4b16:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZN7TwoWire14user_onReceiveE+0x1>
    4b1a:	89 2b       	or	r24, r25
    4b1c:	89 f1       	breq	.+98     	; 0x4b80 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    4b1e:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4b22:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZN7TwoWire14rxBufferLengthE>
    4b26:	98 17       	cp	r25, r24
    4b28:	68 f1       	brcs	.+90     	; 0x4b84 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    4b2a:	19 82       	std	Y+1, r1	; 0x01
    4b2c:	89 81       	ldd	r24, Y+1	; 0x01
    4b2e:	28 2f       	mov	r18, r24
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	8c 81       	ldd	r24, Y+4	; 0x04
    4b34:	9d 81       	ldd	r25, Y+5	; 0x05
    4b36:	28 17       	cp	r18, r24
    4b38:	39 07       	cpc	r19, r25
    4b3a:	a4 f4       	brge	.+40     	; 0x4b64 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    4b3c:	89 81       	ldd	r24, Y+1	; 0x01
    4b3e:	88 2f       	mov	r24, r24
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	29 81       	ldd	r18, Y+1	; 0x01
    4b44:	22 2f       	mov	r18, r18
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	4a 81       	ldd	r20, Y+2	; 0x02
    4b4a:	5b 81       	ldd	r21, Y+3	; 0x03
    4b4c:	24 0f       	add	r18, r20
    4b4e:	35 1f       	adc	r19, r21
    4b50:	f9 01       	movw	r30, r18
    4b52:	20 81       	ld	r18, Z
    4b54:	80 5c       	subi	r24, 0xC0	; 192
    4b56:	9b 4f       	sbci	r25, 0xFB	; 251
    4b58:	fc 01       	movw	r30, r24
    4b5a:	20 83       	st	Z, r18
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	8f 5f       	subi	r24, 0xFF	; 255
    4b60:	89 83       	std	Y+1, r24	; 0x01
    4b62:	e4 cf       	rjmp	.-56     	; 0x4b2c <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    4b64:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZN7TwoWire13rxBufferIndexE>
    4b68:	8c 81       	ldd	r24, Y+4	; 0x04
    4b6a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <_ZN7TwoWire14rxBufferLengthE>
    4b6e:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <_ZN7TwoWire14user_onReceiveE>
    4b72:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <_ZN7TwoWire14user_onReceiveE+0x1>
    4b76:	8c 81       	ldd	r24, Y+4	; 0x04
    4b78:	9d 81       	ldd	r25, Y+5	; 0x05
    4b7a:	f9 01       	movw	r30, r18
    4b7c:	19 95       	eicall
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4b80:	00 00       	nop
    4b82:	01 c0       	rjmp	.+2      	; 0x4b86 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4b84:	00 00       	nop
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	df 91       	pop	r29
    4b92:	cf 91       	pop	r28
    4b94:	08 95       	ret

00004b96 <_ZN7TwoWire16onRequestServiceEv>:
    4b96:	cf 93       	push	r28
    4b98:	df 93       	push	r29
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
    4b9e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN7TwoWire14user_onRequestE>
    4ba2:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZN7TwoWire14user_onRequestE+0x1>
    4ba6:	89 2b       	or	r24, r25
    4ba8:	59 f0       	breq	.+22     	; 0x4bc0 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    4baa:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZN7TwoWire13txBufferIndexE>
    4bae:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZN7TwoWire14txBufferLengthE>
    4bb2:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN7TwoWire14user_onRequestE>
    4bb6:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZN7TwoWire14user_onRequestE+0x1>
    4bba:	fc 01       	movw	r30, r24
    4bbc:	19 95       	eicall
    4bbe:	01 c0       	rjmp	.+2      	; 0x4bc2 <_ZN7TwoWire16onRequestServiceEv+0x2c>
    4bc0:	00 00       	nop
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	08 95       	ret

00004bc8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	00 d0       	rcall	.+0      	; 0x4bce <_Z41__static_initialization_and_destruction_0ii+0x6>
    4bce:	1f 92       	push	r1
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	9a 83       	std	Y+2, r25	; 0x02
    4bd6:	89 83       	std	Y+1, r24	; 0x01
    4bd8:	7c 83       	std	Y+4, r23	; 0x04
    4bda:	6b 83       	std	Y+3, r22	; 0x03
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	9a 81       	ldd	r25, Y+2	; 0x02
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	39 f4       	brne	.+14     	; 0x4bf2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    4be4:	8b 81       	ldd	r24, Y+3	; 0x03
    4be6:	9c 81       	ldd	r25, Y+4	; 0x04
    4be8:	01 96       	adiw	r24, 0x01	; 1
    4bea:	19 f4       	brne	.+6      	; 0x4bf2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    4bec:	8a e8       	ldi	r24, 0x8A	; 138
    4bee:	94 e0       	ldi	r25, 0x04	; 4
    4bf0:	f2 dd       	rcall	.-1052   	; 0x47d6 <_ZN7TwoWireC1Ev>
    4bf2:	00 00       	nop
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	df 91       	pop	r29
    4bfe:	cf 91       	pop	r28
    4c00:	08 95       	ret

00004c02 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	cd b7       	in	r28, 0x3d	; 61
    4c08:	de b7       	in	r29, 0x3e	; 62
    4c0a:	6f ef       	ldi	r22, 0xFF	; 255
    4c0c:	7f ef       	ldi	r23, 0xFF	; 255
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	da df       	rcall	.-76     	; 0x4bc8 <_Z41__static_initialization_and_destruction_0ii>
    4c14:	df 91       	pop	r29
    4c16:	cf 91       	pop	r28
    4c18:	08 95       	ret

00004c1a <__subsf3>:
    4c1a:	50 58       	subi	r21, 0x80	; 128

00004c1c <__addsf3>:
    4c1c:	bb 27       	eor	r27, r27
    4c1e:	aa 27       	eor	r26, r26
    4c20:	0e d0       	rcall	.+28     	; 0x4c3e <__addsf3x>
    4c22:	09 c1       	rjmp	.+530    	; 0x4e36 <__fp_round>
    4c24:	fa d0       	rcall	.+500    	; 0x4e1a <__fp_pscA>
    4c26:	30 f0       	brcs	.+12     	; 0x4c34 <__addsf3+0x18>
    4c28:	ff d0       	rcall	.+510    	; 0x4e28 <__fp_pscB>
    4c2a:	20 f0       	brcs	.+8      	; 0x4c34 <__addsf3+0x18>
    4c2c:	31 f4       	brne	.+12     	; 0x4c3a <__addsf3+0x1e>
    4c2e:	9f 3f       	cpi	r25, 0xFF	; 255
    4c30:	11 f4       	brne	.+4      	; 0x4c36 <__addsf3+0x1a>
    4c32:	1e f4       	brtc	.+6      	; 0x4c3a <__addsf3+0x1e>
    4c34:	ef c0       	rjmp	.+478    	; 0x4e14 <__fp_nan>
    4c36:	0e f4       	brtc	.+2      	; 0x4c3a <__addsf3+0x1e>
    4c38:	e0 95       	com	r30
    4c3a:	e7 fb       	bst	r30, 7
    4c3c:	e5 c0       	rjmp	.+458    	; 0x4e08 <__fp_inf>

00004c3e <__addsf3x>:
    4c3e:	e9 2f       	mov	r30, r25
    4c40:	0b d1       	rcall	.+534    	; 0x4e58 <__fp_split3>
    4c42:	80 f3       	brcs	.-32     	; 0x4c24 <__addsf3+0x8>
    4c44:	ba 17       	cp	r27, r26
    4c46:	62 07       	cpc	r22, r18
    4c48:	73 07       	cpc	r23, r19
    4c4a:	84 07       	cpc	r24, r20
    4c4c:	95 07       	cpc	r25, r21
    4c4e:	18 f0       	brcs	.+6      	; 0x4c56 <__addsf3x+0x18>
    4c50:	71 f4       	brne	.+28     	; 0x4c6e <__addsf3x+0x30>
    4c52:	9e f5       	brtc	.+102    	; 0x4cba <__addsf3x+0x7c>
    4c54:	23 c1       	rjmp	.+582    	; 0x4e9c <__fp_zero>
    4c56:	0e f4       	brtc	.+2      	; 0x4c5a <__addsf3x+0x1c>
    4c58:	e0 95       	com	r30
    4c5a:	0b 2e       	mov	r0, r27
    4c5c:	ba 2f       	mov	r27, r26
    4c5e:	a0 2d       	mov	r26, r0
    4c60:	0b 01       	movw	r0, r22
    4c62:	b9 01       	movw	r22, r18
    4c64:	90 01       	movw	r18, r0
    4c66:	0c 01       	movw	r0, r24
    4c68:	ca 01       	movw	r24, r20
    4c6a:	a0 01       	movw	r20, r0
    4c6c:	11 24       	eor	r1, r1
    4c6e:	ff 27       	eor	r31, r31
    4c70:	59 1b       	sub	r21, r25
    4c72:	99 f0       	breq	.+38     	; 0x4c9a <__addsf3x+0x5c>
    4c74:	59 3f       	cpi	r21, 0xF9	; 249
    4c76:	50 f4       	brcc	.+20     	; 0x4c8c <__addsf3x+0x4e>
    4c78:	50 3e       	cpi	r21, 0xE0	; 224
    4c7a:	68 f1       	brcs	.+90     	; 0x4cd6 <__addsf3x+0x98>
    4c7c:	1a 16       	cp	r1, r26
    4c7e:	f0 40       	sbci	r31, 0x00	; 0
    4c80:	a2 2f       	mov	r26, r18
    4c82:	23 2f       	mov	r18, r19
    4c84:	34 2f       	mov	r19, r20
    4c86:	44 27       	eor	r20, r20
    4c88:	58 5f       	subi	r21, 0xF8	; 248
    4c8a:	f3 cf       	rjmp	.-26     	; 0x4c72 <__addsf3x+0x34>
    4c8c:	46 95       	lsr	r20
    4c8e:	37 95       	ror	r19
    4c90:	27 95       	ror	r18
    4c92:	a7 95       	ror	r26
    4c94:	f0 40       	sbci	r31, 0x00	; 0
    4c96:	53 95       	inc	r21
    4c98:	c9 f7       	brne	.-14     	; 0x4c8c <__addsf3x+0x4e>
    4c9a:	7e f4       	brtc	.+30     	; 0x4cba <__addsf3x+0x7c>
    4c9c:	1f 16       	cp	r1, r31
    4c9e:	ba 0b       	sbc	r27, r26
    4ca0:	62 0b       	sbc	r22, r18
    4ca2:	73 0b       	sbc	r23, r19
    4ca4:	84 0b       	sbc	r24, r20
    4ca6:	ba f0       	brmi	.+46     	; 0x4cd6 <__addsf3x+0x98>
    4ca8:	91 50       	subi	r25, 0x01	; 1
    4caa:	a1 f0       	breq	.+40     	; 0x4cd4 <__addsf3x+0x96>
    4cac:	ff 0f       	add	r31, r31
    4cae:	bb 1f       	adc	r27, r27
    4cb0:	66 1f       	adc	r22, r22
    4cb2:	77 1f       	adc	r23, r23
    4cb4:	88 1f       	adc	r24, r24
    4cb6:	c2 f7       	brpl	.-16     	; 0x4ca8 <__addsf3x+0x6a>
    4cb8:	0e c0       	rjmp	.+28     	; 0x4cd6 <__addsf3x+0x98>
    4cba:	ba 0f       	add	r27, r26
    4cbc:	62 1f       	adc	r22, r18
    4cbe:	73 1f       	adc	r23, r19
    4cc0:	84 1f       	adc	r24, r20
    4cc2:	48 f4       	brcc	.+18     	; 0x4cd6 <__addsf3x+0x98>
    4cc4:	87 95       	ror	r24
    4cc6:	77 95       	ror	r23
    4cc8:	67 95       	ror	r22
    4cca:	b7 95       	ror	r27
    4ccc:	f7 95       	ror	r31
    4cce:	9e 3f       	cpi	r25, 0xFE	; 254
    4cd0:	08 f0       	brcs	.+2      	; 0x4cd4 <__addsf3x+0x96>
    4cd2:	b3 cf       	rjmp	.-154    	; 0x4c3a <__addsf3+0x1e>
    4cd4:	93 95       	inc	r25
    4cd6:	88 0f       	add	r24, r24
    4cd8:	08 f0       	brcs	.+2      	; 0x4cdc <__addsf3x+0x9e>
    4cda:	99 27       	eor	r25, r25
    4cdc:	ee 0f       	add	r30, r30
    4cde:	97 95       	ror	r25
    4ce0:	87 95       	ror	r24
    4ce2:	08 95       	ret

00004ce4 <__fixsfsi>:
    4ce4:	04 d0       	rcall	.+8      	; 0x4cee <__fixunssfsi>
    4ce6:	68 94       	set
    4ce8:	b1 11       	cpse	r27, r1
    4cea:	d9 c0       	rjmp	.+434    	; 0x4e9e <__fp_szero>
    4cec:	08 95       	ret

00004cee <__fixunssfsi>:
    4cee:	bc d0       	rcall	.+376    	; 0x4e68 <__fp_splitA>
    4cf0:	88 f0       	brcs	.+34     	; 0x4d14 <__fixunssfsi+0x26>
    4cf2:	9f 57       	subi	r25, 0x7F	; 127
    4cf4:	90 f0       	brcs	.+36     	; 0x4d1a <__fixunssfsi+0x2c>
    4cf6:	b9 2f       	mov	r27, r25
    4cf8:	99 27       	eor	r25, r25
    4cfa:	b7 51       	subi	r27, 0x17	; 23
    4cfc:	a0 f0       	brcs	.+40     	; 0x4d26 <__fixunssfsi+0x38>
    4cfe:	d1 f0       	breq	.+52     	; 0x4d34 <__fixunssfsi+0x46>
    4d00:	66 0f       	add	r22, r22
    4d02:	77 1f       	adc	r23, r23
    4d04:	88 1f       	adc	r24, r24
    4d06:	99 1f       	adc	r25, r25
    4d08:	1a f0       	brmi	.+6      	; 0x4d10 <__fixunssfsi+0x22>
    4d0a:	ba 95       	dec	r27
    4d0c:	c9 f7       	brne	.-14     	; 0x4d00 <__fixunssfsi+0x12>
    4d0e:	12 c0       	rjmp	.+36     	; 0x4d34 <__fixunssfsi+0x46>
    4d10:	b1 30       	cpi	r27, 0x01	; 1
    4d12:	81 f0       	breq	.+32     	; 0x4d34 <__fixunssfsi+0x46>
    4d14:	c3 d0       	rcall	.+390    	; 0x4e9c <__fp_zero>
    4d16:	b1 e0       	ldi	r27, 0x01	; 1
    4d18:	08 95       	ret
    4d1a:	c0 c0       	rjmp	.+384    	; 0x4e9c <__fp_zero>
    4d1c:	67 2f       	mov	r22, r23
    4d1e:	78 2f       	mov	r23, r24
    4d20:	88 27       	eor	r24, r24
    4d22:	b8 5f       	subi	r27, 0xF8	; 248
    4d24:	39 f0       	breq	.+14     	; 0x4d34 <__fixunssfsi+0x46>
    4d26:	b9 3f       	cpi	r27, 0xF9	; 249
    4d28:	cc f3       	brlt	.-14     	; 0x4d1c <__fixunssfsi+0x2e>
    4d2a:	86 95       	lsr	r24
    4d2c:	77 95       	ror	r23
    4d2e:	67 95       	ror	r22
    4d30:	b3 95       	inc	r27
    4d32:	d9 f7       	brne	.-10     	; 0x4d2a <__fixunssfsi+0x3c>
    4d34:	3e f4       	brtc	.+14     	; 0x4d44 <__fixunssfsi+0x56>
    4d36:	90 95       	com	r25
    4d38:	80 95       	com	r24
    4d3a:	70 95       	com	r23
    4d3c:	61 95       	neg	r22
    4d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d40:	8f 4f       	sbci	r24, 0xFF	; 255
    4d42:	9f 4f       	sbci	r25, 0xFF	; 255
    4d44:	08 95       	ret

00004d46 <__floatunsisf>:
    4d46:	e8 94       	clt
    4d48:	09 c0       	rjmp	.+18     	; 0x4d5c <__floatsisf+0x12>

00004d4a <__floatsisf>:
    4d4a:	97 fb       	bst	r25, 7
    4d4c:	3e f4       	brtc	.+14     	; 0x4d5c <__floatsisf+0x12>
    4d4e:	90 95       	com	r25
    4d50:	80 95       	com	r24
    4d52:	70 95       	com	r23
    4d54:	61 95       	neg	r22
    4d56:	7f 4f       	sbci	r23, 0xFF	; 255
    4d58:	8f 4f       	sbci	r24, 0xFF	; 255
    4d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d5c:	99 23       	and	r25, r25
    4d5e:	a9 f0       	breq	.+42     	; 0x4d8a <__floatsisf+0x40>
    4d60:	f9 2f       	mov	r31, r25
    4d62:	96 e9       	ldi	r25, 0x96	; 150
    4d64:	bb 27       	eor	r27, r27
    4d66:	93 95       	inc	r25
    4d68:	f6 95       	lsr	r31
    4d6a:	87 95       	ror	r24
    4d6c:	77 95       	ror	r23
    4d6e:	67 95       	ror	r22
    4d70:	b7 95       	ror	r27
    4d72:	f1 11       	cpse	r31, r1
    4d74:	f8 cf       	rjmp	.-16     	; 0x4d66 <__floatsisf+0x1c>
    4d76:	fa f4       	brpl	.+62     	; 0x4db6 <__floatsisf+0x6c>
    4d78:	bb 0f       	add	r27, r27
    4d7a:	11 f4       	brne	.+4      	; 0x4d80 <__floatsisf+0x36>
    4d7c:	60 ff       	sbrs	r22, 0
    4d7e:	1b c0       	rjmp	.+54     	; 0x4db6 <__floatsisf+0x6c>
    4d80:	6f 5f       	subi	r22, 0xFF	; 255
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	8f 4f       	sbci	r24, 0xFF	; 255
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	16 c0       	rjmp	.+44     	; 0x4db6 <__floatsisf+0x6c>
    4d8a:	88 23       	and	r24, r24
    4d8c:	11 f0       	breq	.+4      	; 0x4d92 <__floatsisf+0x48>
    4d8e:	96 e9       	ldi	r25, 0x96	; 150
    4d90:	11 c0       	rjmp	.+34     	; 0x4db4 <__floatsisf+0x6a>
    4d92:	77 23       	and	r23, r23
    4d94:	21 f0       	breq	.+8      	; 0x4d9e <__floatsisf+0x54>
    4d96:	9e e8       	ldi	r25, 0x8E	; 142
    4d98:	87 2f       	mov	r24, r23
    4d9a:	76 2f       	mov	r23, r22
    4d9c:	05 c0       	rjmp	.+10     	; 0x4da8 <__floatsisf+0x5e>
    4d9e:	66 23       	and	r22, r22
    4da0:	71 f0       	breq	.+28     	; 0x4dbe <__floatsisf+0x74>
    4da2:	96 e8       	ldi	r25, 0x86	; 134
    4da4:	86 2f       	mov	r24, r22
    4da6:	70 e0       	ldi	r23, 0x00	; 0
    4da8:	60 e0       	ldi	r22, 0x00	; 0
    4daa:	2a f0       	brmi	.+10     	; 0x4db6 <__floatsisf+0x6c>
    4dac:	9a 95       	dec	r25
    4dae:	66 0f       	add	r22, r22
    4db0:	77 1f       	adc	r23, r23
    4db2:	88 1f       	adc	r24, r24
    4db4:	da f7       	brpl	.-10     	; 0x4dac <__floatsisf+0x62>
    4db6:	88 0f       	add	r24, r24
    4db8:	96 95       	lsr	r25
    4dba:	87 95       	ror	r24
    4dbc:	97 f9       	bld	r25, 7
    4dbe:	08 95       	ret

00004dc0 <__fp_cmp>:
    4dc0:	99 0f       	add	r25, r25
    4dc2:	00 08       	sbc	r0, r0
    4dc4:	55 0f       	add	r21, r21
    4dc6:	aa 0b       	sbc	r26, r26
    4dc8:	e0 e8       	ldi	r30, 0x80	; 128
    4dca:	fe ef       	ldi	r31, 0xFE	; 254
    4dcc:	16 16       	cp	r1, r22
    4dce:	17 06       	cpc	r1, r23
    4dd0:	e8 07       	cpc	r30, r24
    4dd2:	f9 07       	cpc	r31, r25
    4dd4:	c0 f0       	brcs	.+48     	; 0x4e06 <__fp_cmp+0x46>
    4dd6:	12 16       	cp	r1, r18
    4dd8:	13 06       	cpc	r1, r19
    4dda:	e4 07       	cpc	r30, r20
    4ddc:	f5 07       	cpc	r31, r21
    4dde:	98 f0       	brcs	.+38     	; 0x4e06 <__fp_cmp+0x46>
    4de0:	62 1b       	sub	r22, r18
    4de2:	73 0b       	sbc	r23, r19
    4de4:	84 0b       	sbc	r24, r20
    4de6:	95 0b       	sbc	r25, r21
    4de8:	39 f4       	brne	.+14     	; 0x4df8 <__fp_cmp+0x38>
    4dea:	0a 26       	eor	r0, r26
    4dec:	61 f0       	breq	.+24     	; 0x4e06 <__fp_cmp+0x46>
    4dee:	23 2b       	or	r18, r19
    4df0:	24 2b       	or	r18, r20
    4df2:	25 2b       	or	r18, r21
    4df4:	21 f4       	brne	.+8      	; 0x4dfe <__fp_cmp+0x3e>
    4df6:	08 95       	ret
    4df8:	0a 26       	eor	r0, r26
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <__fp_cmp+0x3e>
    4dfc:	a1 40       	sbci	r26, 0x01	; 1
    4dfe:	a6 95       	lsr	r26
    4e00:	8f ef       	ldi	r24, 0xFF	; 255
    4e02:	81 1d       	adc	r24, r1
    4e04:	81 1d       	adc	r24, r1
    4e06:	08 95       	ret

00004e08 <__fp_inf>:
    4e08:	97 f9       	bld	r25, 7
    4e0a:	9f 67       	ori	r25, 0x7F	; 127
    4e0c:	80 e8       	ldi	r24, 0x80	; 128
    4e0e:	70 e0       	ldi	r23, 0x00	; 0
    4e10:	60 e0       	ldi	r22, 0x00	; 0
    4e12:	08 95       	ret

00004e14 <__fp_nan>:
    4e14:	9f ef       	ldi	r25, 0xFF	; 255
    4e16:	80 ec       	ldi	r24, 0xC0	; 192
    4e18:	08 95       	ret

00004e1a <__fp_pscA>:
    4e1a:	00 24       	eor	r0, r0
    4e1c:	0a 94       	dec	r0
    4e1e:	16 16       	cp	r1, r22
    4e20:	17 06       	cpc	r1, r23
    4e22:	18 06       	cpc	r1, r24
    4e24:	09 06       	cpc	r0, r25
    4e26:	08 95       	ret

00004e28 <__fp_pscB>:
    4e28:	00 24       	eor	r0, r0
    4e2a:	0a 94       	dec	r0
    4e2c:	12 16       	cp	r1, r18
    4e2e:	13 06       	cpc	r1, r19
    4e30:	14 06       	cpc	r1, r20
    4e32:	05 06       	cpc	r0, r21
    4e34:	08 95       	ret

00004e36 <__fp_round>:
    4e36:	09 2e       	mov	r0, r25
    4e38:	03 94       	inc	r0
    4e3a:	00 0c       	add	r0, r0
    4e3c:	11 f4       	brne	.+4      	; 0x4e42 <__fp_round+0xc>
    4e3e:	88 23       	and	r24, r24
    4e40:	52 f0       	brmi	.+20     	; 0x4e56 <__fp_round+0x20>
    4e42:	bb 0f       	add	r27, r27
    4e44:	40 f4       	brcc	.+16     	; 0x4e56 <__fp_round+0x20>
    4e46:	bf 2b       	or	r27, r31
    4e48:	11 f4       	brne	.+4      	; 0x4e4e <__fp_round+0x18>
    4e4a:	60 ff       	sbrs	r22, 0
    4e4c:	04 c0       	rjmp	.+8      	; 0x4e56 <__fp_round+0x20>
    4e4e:	6f 5f       	subi	r22, 0xFF	; 255
    4e50:	7f 4f       	sbci	r23, 0xFF	; 255
    4e52:	8f 4f       	sbci	r24, 0xFF	; 255
    4e54:	9f 4f       	sbci	r25, 0xFF	; 255
    4e56:	08 95       	ret

00004e58 <__fp_split3>:
    4e58:	57 fd       	sbrc	r21, 7
    4e5a:	90 58       	subi	r25, 0x80	; 128
    4e5c:	44 0f       	add	r20, r20
    4e5e:	55 1f       	adc	r21, r21
    4e60:	59 f0       	breq	.+22     	; 0x4e78 <__fp_splitA+0x10>
    4e62:	5f 3f       	cpi	r21, 0xFF	; 255
    4e64:	71 f0       	breq	.+28     	; 0x4e82 <__fp_splitA+0x1a>
    4e66:	47 95       	ror	r20

00004e68 <__fp_splitA>:
    4e68:	88 0f       	add	r24, r24
    4e6a:	97 fb       	bst	r25, 7
    4e6c:	99 1f       	adc	r25, r25
    4e6e:	61 f0       	breq	.+24     	; 0x4e88 <__fp_splitA+0x20>
    4e70:	9f 3f       	cpi	r25, 0xFF	; 255
    4e72:	79 f0       	breq	.+30     	; 0x4e92 <__fp_splitA+0x2a>
    4e74:	87 95       	ror	r24
    4e76:	08 95       	ret
    4e78:	12 16       	cp	r1, r18
    4e7a:	13 06       	cpc	r1, r19
    4e7c:	14 06       	cpc	r1, r20
    4e7e:	55 1f       	adc	r21, r21
    4e80:	f2 cf       	rjmp	.-28     	; 0x4e66 <__fp_split3+0xe>
    4e82:	46 95       	lsr	r20
    4e84:	f1 df       	rcall	.-30     	; 0x4e68 <__fp_splitA>
    4e86:	08 c0       	rjmp	.+16     	; 0x4e98 <__fp_splitA+0x30>
    4e88:	16 16       	cp	r1, r22
    4e8a:	17 06       	cpc	r1, r23
    4e8c:	18 06       	cpc	r1, r24
    4e8e:	99 1f       	adc	r25, r25
    4e90:	f1 cf       	rjmp	.-30     	; 0x4e74 <__fp_splitA+0xc>
    4e92:	86 95       	lsr	r24
    4e94:	71 05       	cpc	r23, r1
    4e96:	61 05       	cpc	r22, r1
    4e98:	08 94       	sec
    4e9a:	08 95       	ret

00004e9c <__fp_zero>:
    4e9c:	e8 94       	clt

00004e9e <__fp_szero>:
    4e9e:	bb 27       	eor	r27, r27
    4ea0:	66 27       	eor	r22, r22
    4ea2:	77 27       	eor	r23, r23
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	97 f9       	bld	r25, 7
    4ea8:	08 95       	ret

00004eaa <__mulsf3>:
    4eaa:	0b d0       	rcall	.+22     	; 0x4ec2 <__mulsf3x>
    4eac:	c4 cf       	rjmp	.-120    	; 0x4e36 <__fp_round>
    4eae:	b5 df       	rcall	.-150    	; 0x4e1a <__fp_pscA>
    4eb0:	28 f0       	brcs	.+10     	; 0x4ebc <__mulsf3+0x12>
    4eb2:	ba df       	rcall	.-140    	; 0x4e28 <__fp_pscB>
    4eb4:	18 f0       	brcs	.+6      	; 0x4ebc <__mulsf3+0x12>
    4eb6:	95 23       	and	r25, r21
    4eb8:	09 f0       	breq	.+2      	; 0x4ebc <__mulsf3+0x12>
    4eba:	a6 cf       	rjmp	.-180    	; 0x4e08 <__fp_inf>
    4ebc:	ab cf       	rjmp	.-170    	; 0x4e14 <__fp_nan>
    4ebe:	11 24       	eor	r1, r1
    4ec0:	ee cf       	rjmp	.-36     	; 0x4e9e <__fp_szero>

00004ec2 <__mulsf3x>:
    4ec2:	ca df       	rcall	.-108    	; 0x4e58 <__fp_split3>
    4ec4:	a0 f3       	brcs	.-24     	; 0x4eae <__mulsf3+0x4>

00004ec6 <__mulsf3_pse>:
    4ec6:	95 9f       	mul	r25, r21
    4ec8:	d1 f3       	breq	.-12     	; 0x4ebe <__mulsf3+0x14>
    4eca:	95 0f       	add	r25, r21
    4ecc:	50 e0       	ldi	r21, 0x00	; 0
    4ece:	55 1f       	adc	r21, r21
    4ed0:	62 9f       	mul	r22, r18
    4ed2:	f0 01       	movw	r30, r0
    4ed4:	72 9f       	mul	r23, r18
    4ed6:	bb 27       	eor	r27, r27
    4ed8:	f0 0d       	add	r31, r0
    4eda:	b1 1d       	adc	r27, r1
    4edc:	63 9f       	mul	r22, r19
    4ede:	aa 27       	eor	r26, r26
    4ee0:	f0 0d       	add	r31, r0
    4ee2:	b1 1d       	adc	r27, r1
    4ee4:	aa 1f       	adc	r26, r26
    4ee6:	64 9f       	mul	r22, r20
    4ee8:	66 27       	eor	r22, r22
    4eea:	b0 0d       	add	r27, r0
    4eec:	a1 1d       	adc	r26, r1
    4eee:	66 1f       	adc	r22, r22
    4ef0:	82 9f       	mul	r24, r18
    4ef2:	22 27       	eor	r18, r18
    4ef4:	b0 0d       	add	r27, r0
    4ef6:	a1 1d       	adc	r26, r1
    4ef8:	62 1f       	adc	r22, r18
    4efa:	73 9f       	mul	r23, r19
    4efc:	b0 0d       	add	r27, r0
    4efe:	a1 1d       	adc	r26, r1
    4f00:	62 1f       	adc	r22, r18
    4f02:	83 9f       	mul	r24, r19
    4f04:	a0 0d       	add	r26, r0
    4f06:	61 1d       	adc	r22, r1
    4f08:	22 1f       	adc	r18, r18
    4f0a:	74 9f       	mul	r23, r20
    4f0c:	33 27       	eor	r19, r19
    4f0e:	a0 0d       	add	r26, r0
    4f10:	61 1d       	adc	r22, r1
    4f12:	23 1f       	adc	r18, r19
    4f14:	84 9f       	mul	r24, r20
    4f16:	60 0d       	add	r22, r0
    4f18:	21 1d       	adc	r18, r1
    4f1a:	82 2f       	mov	r24, r18
    4f1c:	76 2f       	mov	r23, r22
    4f1e:	6a 2f       	mov	r22, r26
    4f20:	11 24       	eor	r1, r1
    4f22:	9f 57       	subi	r25, 0x7F	; 127
    4f24:	50 40       	sbci	r21, 0x00	; 0
    4f26:	8a f0       	brmi	.+34     	; 0x4f4a <__mulsf3_pse+0x84>
    4f28:	e1 f0       	breq	.+56     	; 0x4f62 <__mulsf3_pse+0x9c>
    4f2a:	88 23       	and	r24, r24
    4f2c:	4a f0       	brmi	.+18     	; 0x4f40 <__mulsf3_pse+0x7a>
    4f2e:	ee 0f       	add	r30, r30
    4f30:	ff 1f       	adc	r31, r31
    4f32:	bb 1f       	adc	r27, r27
    4f34:	66 1f       	adc	r22, r22
    4f36:	77 1f       	adc	r23, r23
    4f38:	88 1f       	adc	r24, r24
    4f3a:	91 50       	subi	r25, 0x01	; 1
    4f3c:	50 40       	sbci	r21, 0x00	; 0
    4f3e:	a9 f7       	brne	.-22     	; 0x4f2a <__mulsf3_pse+0x64>
    4f40:	9e 3f       	cpi	r25, 0xFE	; 254
    4f42:	51 05       	cpc	r21, r1
    4f44:	70 f0       	brcs	.+28     	; 0x4f62 <__mulsf3_pse+0x9c>
    4f46:	60 cf       	rjmp	.-320    	; 0x4e08 <__fp_inf>
    4f48:	aa cf       	rjmp	.-172    	; 0x4e9e <__fp_szero>
    4f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    4f4c:	ec f3       	brlt	.-6      	; 0x4f48 <__mulsf3_pse+0x82>
    4f4e:	98 3e       	cpi	r25, 0xE8	; 232
    4f50:	dc f3       	brlt	.-10     	; 0x4f48 <__mulsf3_pse+0x82>
    4f52:	86 95       	lsr	r24
    4f54:	77 95       	ror	r23
    4f56:	67 95       	ror	r22
    4f58:	b7 95       	ror	r27
    4f5a:	f7 95       	ror	r31
    4f5c:	e7 95       	ror	r30
    4f5e:	9f 5f       	subi	r25, 0xFF	; 255
    4f60:	c1 f7       	brne	.-16     	; 0x4f52 <__mulsf3_pse+0x8c>
    4f62:	fe 2b       	or	r31, r30
    4f64:	88 0f       	add	r24, r24
    4f66:	91 1d       	adc	r25, r1
    4f68:	96 95       	lsr	r25
    4f6a:	87 95       	ror	r24
    4f6c:	97 f9       	bld	r25, 7
    4f6e:	08 95       	ret

00004f70 <__unordsf2>:
    4f70:	27 df       	rcall	.-434    	; 0x4dc0 <__fp_cmp>
    4f72:	88 0b       	sbc	r24, r24
    4f74:	99 0b       	sbc	r25, r25
    4f76:	08 95       	ret

00004f78 <__cxa_pure_virtual>:
    4f78:	0e 94 a1 30 	call	0x6142	; 0x6142 <abort>

00004f7c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4f7c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4f7e:	91 8d       	ldd	r25, Z+25	; 0x19
    4f80:	22 8d       	ldd	r18, Z+26	; 0x1a
    4f82:	89 2f       	mov	r24, r25
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	80 5c       	subi	r24, 0xC0	; 192
    4f88:	9f 4f       	sbci	r25, 0xFF	; 255
    4f8a:	82 1b       	sub	r24, r18
    4f8c:	91 09       	sbc	r25, r1
}
    4f8e:	8f 73       	andi	r24, 0x3F	; 63
    4f90:	99 27       	eor	r25, r25
    4f92:	08 95       	ret

00004f94 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4f94:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4f96:	91 8d       	ldd	r25, Z+25	; 0x19
    4f98:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f9a:	98 17       	cp	r25, r24
    4f9c:	31 f0       	breq	.+12     	; 0x4faa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4f9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fa0:	e8 0f       	add	r30, r24
    4fa2:	f1 1d       	adc	r31, r1
    4fa4:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4faa:	8f ef       	ldi	r24, 0xFF	; 255
    4fac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4fae:	08 95       	ret

00004fb0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4fb0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4fb2:	91 8d       	ldd	r25, Z+25	; 0x19
    4fb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fb6:	98 17       	cp	r25, r24
    4fb8:	61 f0       	breq	.+24     	; 0x4fd2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4fba:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fbc:	df 01       	movw	r26, r30
    4fbe:	a8 0f       	add	r26, r24
    4fc0:	b1 1d       	adc	r27, r1
    4fc2:	5d 96       	adiw	r26, 0x1d	; 29
    4fc4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4fc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    4fc8:	9f 5f       	subi	r25, 0xFF	; 255
    4fca:	9f 73       	andi	r25, 0x3F	; 63
    4fcc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4fd2:	8f ef       	ldi	r24, 0xFF	; 255
    4fd4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4fd6:	08 95       	ret

00004fd8 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    4fd8:	fc 01       	movw	r30, r24
    4fda:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    4fdc:	44 8d       	ldd	r20, Z+28	; 0x1c
    4fde:	25 2f       	mov	r18, r21
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	84 2f       	mov	r24, r20
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    4fe6:	82 1b       	sub	r24, r18
    4fe8:	93 0b       	sbc	r25, r19
    4fea:	54 17       	cp	r21, r20
    4fec:	10 f0       	brcs	.+4      	; 0x4ff2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    4fee:	cf 96       	adiw	r24, 0x3f	; 63
    4ff0:	08 95       	ret
  return tail - head - 1;
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
}
    4ff4:	08 95       	ret

00004ff6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4ff6:	88 e8       	ldi	r24, 0x88	; 136
    4ff8:	99 e2       	ldi	r25, 0x29	; 41
    4ffa:	89 2b       	or	r24, r25
    4ffc:	39 f0       	breq	.+14     	; 0x500c <_Z14serialEventRunv+0x16>
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	89 2b       	or	r24, r25
    5004:	19 f0       	breq	.+6      	; 0x500c <_Z14serialEventRunv+0x16>
    5006:	84 d1       	rcall	.+776    	; 0x5310 <_Z17Serial0_availablev>
    5008:	81 11       	cpse	r24, r1
    500a:	25 c0       	rjmp	.+74     	; 0x5056 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	89 2b       	or	r24, r25
    5012:	41 f0       	breq	.+16     	; 0x5024 <_Z14serialEventRunv+0x2e>
    5014:	80 e0       	ldi	r24, 0x00	; 0
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	89 2b       	or	r24, r25
    501a:	21 f0       	breq	.+8      	; 0x5024 <_Z14serialEventRunv+0x2e>
    501c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5020:	81 11       	cpse	r24, r1
    5022:	1c c0       	rjmp	.+56     	; 0x505c <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5024:	80 e0       	ldi	r24, 0x00	; 0
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	89 2b       	or	r24, r25
    502a:	41 f0       	breq	.+16     	; 0x503c <_Z14serialEventRunv+0x46>
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	89 2b       	or	r24, r25
    5032:	21 f0       	breq	.+8      	; 0x503c <_Z14serialEventRunv+0x46>
    5034:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5038:	81 11       	cpse	r24, r1
    503a:	13 c0       	rjmp	.+38     	; 0x5062 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    503c:	80 e0       	ldi	r24, 0x00	; 0
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	89 2b       	or	r24, r25
    5042:	a1 f0       	breq	.+40     	; 0x506c <_Z14serialEventRunv+0x76>
    5044:	80 e0       	ldi	r24, 0x00	; 0
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	89 2b       	or	r24, r25
    504a:	81 f0       	breq	.+32     	; 0x506c <_Z14serialEventRunv+0x76>
    504c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5050:	81 11       	cpse	r24, r1
    5052:	0a c0       	rjmp	.+20     	; 0x5068 <_Z14serialEventRunv+0x72>
    5054:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5056:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    505a:	d8 cf       	rjmp	.-80     	; 0x500c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    505c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5060:	e1 cf       	rjmp	.-62     	; 0x5024 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5062:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5066:	ea cf       	rjmp	.-44     	; 0x503c <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5068:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    506c:	08 95       	ret

0000506e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    506e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5070:	84 8d       	ldd	r24, Z+28	; 0x1c
    5072:	df 01       	movw	r26, r30
    5074:	a8 0f       	add	r26, r24
    5076:	b1 1d       	adc	r27, r1
    5078:	a3 5a       	subi	r26, 0xA3	; 163
    507a:	bf 4f       	sbci	r27, 0xFF	; 255
    507c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    507e:	84 8d       	ldd	r24, Z+28	; 0x1c
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	01 96       	adiw	r24, 0x01	; 1
    5084:	8f 73       	andi	r24, 0x3F	; 63
    5086:	99 27       	eor	r25, r25
    5088:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    508a:	a6 89       	ldd	r26, Z+22	; 0x16
    508c:	b7 89       	ldd	r27, Z+23	; 0x17
    508e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5090:	a0 89       	ldd	r26, Z+16	; 0x10
    5092:	b1 89       	ldd	r27, Z+17	; 0x11
    5094:	8c 91       	ld	r24, X
    5096:	83 70       	andi	r24, 0x03	; 3
    5098:	80 64       	ori	r24, 0x40	; 64
    509a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    509c:	93 8d       	ldd	r25, Z+27	; 0x1b
    509e:	84 8d       	ldd	r24, Z+28	; 0x1c
    50a0:	98 13       	cpse	r25, r24
    50a2:	06 c0       	rjmp	.+12     	; 0x50b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    50a4:	02 88       	ldd	r0, Z+18	; 0x12
    50a6:	f3 89       	ldd	r31, Z+19	; 0x13
    50a8:	e0 2d       	mov	r30, r0
    50aa:	80 81       	ld	r24, Z
    50ac:	8f 7d       	andi	r24, 0xDF	; 223
    50ae:	80 83       	st	Z, r24
    50b0:	08 95       	ret

000050b2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    50b2:	ef 92       	push	r14
    50b4:	ff 92       	push	r15
    50b6:	0f 93       	push	r16
    50b8:	1f 93       	push	r17
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	ec 01       	movw	r28, r24
  _written = true;
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    50c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    50c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    50c8:	98 13       	cpse	r25, r24
    50ca:	05 c0       	rjmp	.+10     	; 0x50d6 <_ZN14HardwareSerial5writeEh+0x24>
    50cc:	e8 89       	ldd	r30, Y+16	; 0x10
    50ce:	f9 89       	ldd	r31, Y+17	; 0x11
    50d0:	80 81       	ld	r24, Z
    50d2:	85 fd       	sbrc	r24, 5
    50d4:	25 c0       	rjmp	.+74     	; 0x5120 <_ZN14HardwareSerial5writeEh+0x6e>
    50d6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    50d8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    50da:	10 e0       	ldi	r17, 0x00	; 0
    50dc:	0f 5f       	subi	r16, 0xFF	; 255
    50de:	1f 4f       	sbci	r17, 0xFF	; 255
    50e0:	0f 73       	andi	r16, 0x3F	; 63
    50e2:	11 27       	eor	r17, r17
    50e4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    50e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    50e8:	e8 12       	cpse	r14, r24
    50ea:	0b c0       	rjmp	.+22     	; 0x5102 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    50ec:	0f b6       	in	r0, 0x3f	; 63
    50ee:	07 fc       	sbrc	r0, 7
    50f0:	fa cf       	rjmp	.-12     	; 0x50e6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    50f2:	e8 89       	ldd	r30, Y+16	; 0x10
    50f4:	f9 89       	ldd	r31, Y+17	; 0x11
    50f6:	80 81       	ld	r24, Z
    50f8:	85 ff       	sbrs	r24, 5
    50fa:	f5 cf       	rjmp	.-22     	; 0x50e6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    50fc:	ce 01       	movw	r24, r28
    50fe:	b7 df       	rcall	.-146    	; 0x506e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5100:	f2 cf       	rjmp	.-28     	; 0x50e6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5104:	fe 01       	movw	r30, r28
    5106:	e8 0f       	add	r30, r24
    5108:	f1 1d       	adc	r31, r1
    510a:	e3 5a       	subi	r30, 0xA3	; 163
    510c:	ff 4f       	sbci	r31, 0xFF	; 255
    510e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5110:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5112:	f8 94       	cli
    _tx_buffer_head = i;
    5114:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5116:	ea 89       	ldd	r30, Y+18	; 0x12
    5118:	fb 89       	ldd	r31, Y+19	; 0x13
    511a:	80 81       	ld	r24, Z
    511c:	80 62       	ori	r24, 0x20	; 32
    511e:	0a c0       	rjmp	.+20     	; 0x5134 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5120:	9f b7       	in	r25, 0x3f	; 63
    5122:	f8 94       	cli
      *_udr = c;
    5124:	ee 89       	ldd	r30, Y+22	; 0x16
    5126:	ff 89       	ldd	r31, Y+23	; 0x17
    5128:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    512a:	e8 89       	ldd	r30, Y+16	; 0x10
    512c:	f9 89       	ldd	r31, Y+17	; 0x11
    512e:	80 81       	ld	r24, Z
    5130:	83 70       	andi	r24, 0x03	; 3
    5132:	80 64       	ori	r24, 0x40	; 64
    5134:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5136:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	df 91       	pop	r29
    513e:	cf 91       	pop	r28
    5140:	1f 91       	pop	r17
    5142:	0f 91       	pop	r16
    5144:	ff 90       	pop	r15
    5146:	ef 90       	pop	r14
    5148:	08 95       	ret

0000514a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    514a:	cf 93       	push	r28
    514c:	df 93       	push	r29
    514e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5150:	88 8d       	ldd	r24, Y+24	; 0x18
    5152:	88 23       	and	r24, r24
    5154:	c1 f0       	breq	.+48     	; 0x5186 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5156:	ea 89       	ldd	r30, Y+18	; 0x12
    5158:	fb 89       	ldd	r31, Y+19	; 0x13
    515a:	80 81       	ld	r24, Z
    515c:	85 fd       	sbrc	r24, 5
    515e:	05 c0       	rjmp	.+10     	; 0x516a <_ZN14HardwareSerial5flushEv+0x20>
    5160:	a8 89       	ldd	r26, Y+16	; 0x10
    5162:	b9 89       	ldd	r27, Y+17	; 0x11
    5164:	8c 91       	ld	r24, X
    5166:	86 fd       	sbrc	r24, 6
    5168:	0e c0       	rjmp	.+28     	; 0x5186 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	07 fc       	sbrc	r0, 7
    516e:	f5 cf       	rjmp	.-22     	; 0x515a <_ZN14HardwareSerial5flushEv+0x10>
    5170:	80 81       	ld	r24, Z
    5172:	85 ff       	sbrs	r24, 5
    5174:	f2 cf       	rjmp	.-28     	; 0x515a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5176:	a8 89       	ldd	r26, Y+16	; 0x10
    5178:	b9 89       	ldd	r27, Y+17	; 0x11
    517a:	8c 91       	ld	r24, X
    517c:	85 ff       	sbrs	r24, 5
    517e:	ed cf       	rjmp	.-38     	; 0x515a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5180:	ce 01       	movw	r24, r28
    5182:	75 df       	rcall	.-278    	; 0x506e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5184:	e8 cf       	rjmp	.-48     	; 0x5156 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	08 95       	ret

0000518c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    518c:	cf 92       	push	r12
    518e:	df 92       	push	r13
    5190:	ef 92       	push	r14
    5192:	ff 92       	push	r15
    5194:	1f 93       	push	r17
    5196:	cf 93       	push	r28
    5198:	df 93       	push	r29
    519a:	ec 01       	movw	r28, r24
    519c:	6a 01       	movw	r12, r20
    519e:	7b 01       	movw	r14, r22
    51a0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    51a2:	e8 89       	ldd	r30, Y+16	; 0x10
    51a4:	f9 89       	ldd	r31, Y+17	; 0x11
    51a6:	82 e0       	ldi	r24, 0x02	; 2
    51a8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    51aa:	41 15       	cp	r20, r1
    51ac:	51 4e       	sbci	r21, 0xE1	; 225
    51ae:	61 05       	cpc	r22, r1
    51b0:	71 05       	cpc	r23, r1
    51b2:	a9 f0       	breq	.+42     	; 0x51de <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    51b4:	60 e0       	ldi	r22, 0x00	; 0
    51b6:	79 e0       	ldi	r23, 0x09	; 9
    51b8:	8d e3       	ldi	r24, 0x3D	; 61
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	a7 01       	movw	r20, r14
    51be:	96 01       	movw	r18, r12
    51c0:	60 d5       	rcall	.+2752   	; 0x5c82 <__udivmodsi4>
    51c2:	da 01       	movw	r26, r20
    51c4:	c9 01       	movw	r24, r18
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	a1 09       	sbc	r26, r1
    51ca:	b1 09       	sbc	r27, r1
    51cc:	b6 95       	lsr	r27
    51ce:	a7 95       	ror	r26
    51d0:	97 95       	ror	r25
    51d2:	87 95       	ror	r24
    51d4:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    51d6:	21 15       	cp	r18, r1
    51d8:	80 e1       	ldi	r24, 0x10	; 16
    51da:	38 07       	cpc	r19, r24
    51dc:	a0 f0       	brcs	.+40     	; 0x5206 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    51de:	e8 89       	ldd	r30, Y+16	; 0x10
    51e0:	f9 89       	ldd	r31, Y+17	; 0x11
    51e2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    51e4:	60 e8       	ldi	r22, 0x80	; 128
    51e6:	74 e8       	ldi	r23, 0x84	; 132
    51e8:	8e e1       	ldi	r24, 0x1E	; 30
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	a7 01       	movw	r20, r14
    51ee:	96 01       	movw	r18, r12
    51f0:	48 d5       	rcall	.+2704   	; 0x5c82 <__udivmodsi4>
    51f2:	da 01       	movw	r26, r20
    51f4:	c9 01       	movw	r24, r18
    51f6:	01 97       	sbiw	r24, 0x01	; 1
    51f8:	a1 09       	sbc	r26, r1
    51fa:	b1 09       	sbc	r27, r1
    51fc:	b6 95       	lsr	r27
    51fe:	a7 95       	ror	r26
    5200:	97 95       	ror	r25
    5202:	87 95       	ror	r24
    5204:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5206:	ec 85       	ldd	r30, Y+12	; 0x0c
    5208:	fd 85       	ldd	r31, Y+13	; 0x0d
    520a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    520c:	ee 85       	ldd	r30, Y+14	; 0x0e
    520e:	ff 85       	ldd	r31, Y+15	; 0x0f
    5210:	20 83       	st	Z, r18

  _written = false;
    5212:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5214:	ec 89       	ldd	r30, Y+20	; 0x14
    5216:	fd 89       	ldd	r31, Y+21	; 0x15
    5218:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    521a:	ea 89       	ldd	r30, Y+18	; 0x12
    521c:	fb 89       	ldd	r31, Y+19	; 0x13
    521e:	80 81       	ld	r24, Z
    5220:	80 61       	ori	r24, 0x10	; 16
    5222:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5224:	ea 89       	ldd	r30, Y+18	; 0x12
    5226:	fb 89       	ldd	r31, Y+19	; 0x13
    5228:	80 81       	ld	r24, Z
    522a:	88 60       	ori	r24, 0x08	; 8
    522c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    522e:	ea 89       	ldd	r30, Y+18	; 0x12
    5230:	fb 89       	ldd	r31, Y+19	; 0x13
    5232:	80 81       	ld	r24, Z
    5234:	80 68       	ori	r24, 0x80	; 128
    5236:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5238:	ea 89       	ldd	r30, Y+18	; 0x12
    523a:	fb 89       	ldd	r31, Y+19	; 0x13
    523c:	80 81       	ld	r24, Z
    523e:	8f 7d       	andi	r24, 0xDF	; 223
    5240:	80 83       	st	Z, r24
}
    5242:	df 91       	pop	r29
    5244:	cf 91       	pop	r28
    5246:	1f 91       	pop	r17
    5248:	ff 90       	pop	r15
    524a:	ef 90       	pop	r14
    524c:	df 90       	pop	r13
    524e:	cf 90       	pop	r12
    5250:	08 95       	ret

00005252 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5252:	1f 92       	push	r1
    5254:	0f 92       	push	r0
    5256:	0f b6       	in	r0, 0x3f	; 63
    5258:	0f 92       	push	r0
    525a:	11 24       	eor	r1, r1
    525c:	0b b6       	in	r0, 0x3b	; 59
    525e:	0f 92       	push	r0
    5260:	2f 93       	push	r18
    5262:	8f 93       	push	r24
    5264:	9f 93       	push	r25
    5266:	ef 93       	push	r30
    5268:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    526a:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <Serial+0x10>
    526e:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <Serial+0x11>
    5272:	80 81       	ld	r24, Z
    5274:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <Serial+0x16>
    5278:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <Serial+0x17>
    527c:	82 fd       	sbrc	r24, 2
    527e:	12 c0       	rjmp	.+36     	; 0x52a4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5280:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5282:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <Serial+0x19>
    5286:	8f 5f       	subi	r24, 0xFF	; 255
    5288:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    528a:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <Serial+0x1a>
    528e:	82 17       	cp	r24, r18
    5290:	51 f0       	breq	.+20     	; 0x52a6 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    5292:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <Serial+0x19>
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	ea 56       	subi	r30, 0x6A	; 106
    529a:	fb 4f       	sbci	r31, 0xFB	; 251
    529c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    529e:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <Serial+0x19>
    52a2:	01 c0       	rjmp	.+2      	; 0x52a6 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    52a4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    52a6:	ff 91       	pop	r31
    52a8:	ef 91       	pop	r30
    52aa:	9f 91       	pop	r25
    52ac:	8f 91       	pop	r24
    52ae:	2f 91       	pop	r18
    52b0:	0f 90       	pop	r0
    52b2:	0b be       	out	0x3b, r0	; 59
    52b4:	0f 90       	pop	r0
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	0f 90       	pop	r0
    52ba:	1f 90       	pop	r1
    52bc:	18 95       	reti

000052be <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    52be:	1f 92       	push	r1
    52c0:	0f 92       	push	r0
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	0f 92       	push	r0
    52c6:	11 24       	eor	r1, r1
    52c8:	0b b6       	in	r0, 0x3b	; 59
    52ca:	0f 92       	push	r0
    52cc:	2f 93       	push	r18
    52ce:	3f 93       	push	r19
    52d0:	4f 93       	push	r20
    52d2:	5f 93       	push	r21
    52d4:	6f 93       	push	r22
    52d6:	7f 93       	push	r23
    52d8:	8f 93       	push	r24
    52da:	9f 93       	push	r25
    52dc:	af 93       	push	r26
    52de:	bf 93       	push	r27
    52e0:	ef 93       	push	r30
    52e2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    52e4:	86 e9       	ldi	r24, 0x96	; 150
    52e6:	94 e0       	ldi	r25, 0x04	; 4
    52e8:	c2 de       	rcall	.-636    	; 0x506e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    52ea:	ff 91       	pop	r31
    52ec:	ef 91       	pop	r30
    52ee:	bf 91       	pop	r27
    52f0:	af 91       	pop	r26
    52f2:	9f 91       	pop	r25
    52f4:	8f 91       	pop	r24
    52f6:	7f 91       	pop	r23
    52f8:	6f 91       	pop	r22
    52fa:	5f 91       	pop	r21
    52fc:	4f 91       	pop	r20
    52fe:	3f 91       	pop	r19
    5300:	2f 91       	pop	r18
    5302:	0f 90       	pop	r0
    5304:	0b be       	out	0x3b, r0	; 59
    5306:	0f 90       	pop	r0
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	0f 90       	pop	r0
    530c:	1f 90       	pop	r1
    530e:	18 95       	reti

00005310 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5310:	86 e9       	ldi	r24, 0x96	; 150
    5312:	94 e0       	ldi	r25, 0x04	; 4
    5314:	33 de       	rcall	.-922    	; 0x4f7c <_ZN14HardwareSerial9availableEv>
    5316:	21 e0       	ldi	r18, 0x01	; 1
    5318:	89 2b       	or	r24, r25
    531a:	09 f4       	brne	.+2      	; 0x531e <_Z17Serial0_availablev+0xe>
    531c:	20 e0       	ldi	r18, 0x00	; 0
}
    531e:	82 2f       	mov	r24, r18
    5320:	08 95       	ret

00005322 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5322:	e6 e9       	ldi	r30, 0x96	; 150
    5324:	f4 e0       	ldi	r31, 0x04	; 4
    5326:	13 82       	std	Z+3, r1	; 0x03
    5328:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    532a:	88 ee       	ldi	r24, 0xE8	; 232
    532c:	93 e0       	ldi	r25, 0x03	; 3
    532e:	a0 e0       	ldi	r26, 0x00	; 0
    5330:	b0 e0       	ldi	r27, 0x00	; 0
    5332:	84 83       	std	Z+4, r24	; 0x04
    5334:	95 83       	std	Z+5, r25	; 0x05
    5336:	a6 83       	std	Z+6, r26	; 0x06
    5338:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    533a:	8d eb       	ldi	r24, 0xBD	; 189
    533c:	92 e0       	ldi	r25, 0x02	; 2
    533e:	91 83       	std	Z+1, r25	; 0x01
    5340:	80 83       	st	Z, r24
    5342:	85 ec       	ldi	r24, 0xC5	; 197
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	95 87       	std	Z+13, r25	; 0x0d
    5348:	84 87       	std	Z+12, r24	; 0x0c
    534a:	84 ec       	ldi	r24, 0xC4	; 196
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	97 87       	std	Z+15, r25	; 0x0f
    5350:	86 87       	std	Z+14, r24	; 0x0e
    5352:	80 ec       	ldi	r24, 0xC0	; 192
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	91 8b       	std	Z+17, r25	; 0x11
    5358:	80 8b       	std	Z+16, r24	; 0x10
    535a:	81 ec       	ldi	r24, 0xC1	; 193
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	93 8b       	std	Z+19, r25	; 0x13
    5360:	82 8b       	std	Z+18, r24	; 0x12
    5362:	82 ec       	ldi	r24, 0xC2	; 194
    5364:	90 e0       	ldi	r25, 0x00	; 0
    5366:	95 8b       	std	Z+21, r25	; 0x15
    5368:	84 8b       	std	Z+20, r24	; 0x14
    536a:	86 ec       	ldi	r24, 0xC6	; 198
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	97 8b       	std	Z+23, r25	; 0x17
    5370:	86 8b       	std	Z+22, r24	; 0x16
    5372:	11 8e       	std	Z+25, r1	; 0x19
    5374:	12 8e       	std	Z+26, r1	; 0x1a
    5376:	13 8e       	std	Z+27, r1	; 0x1b
    5378:	14 8e       	std	Z+28, r1	; 0x1c
    537a:	08 95       	ret

0000537c <initVariant>:
    537c:	08 95       	ret

0000537e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    537e:	66 d1       	rcall	.+716    	; 0x564c <init>

	initVariant();
    5380:	fd df       	rcall	.-6      	; 0x537c <initVariant>
    5382:	0e 94 0c 03 	call	0x618	; 0x618 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5386:	cb ef       	ldi	r28, 0xFB	; 251
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5388:	d7 e2       	ldi	r29, 0x27	; 39
    538a:	0e 94 b1 03 	call	0x762	; 0x762 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    538e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5390:	e1 f3       	breq	.-8      	; 0x538a <main+0xc>
    5392:	31 de       	rcall	.-926    	; 0x4ff6 <_Z14serialEventRunv>
    5394:	fa cf       	rjmp	.-12     	; 0x538a <main+0xc>

00005396 <_ZdlPv>:
    5396:	6c c5       	rjmp	.+2776   	; 0x5e70 <free>

00005398 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    5398:	cf 92       	push	r12
    539a:	df 92       	push	r13
    539c:	ef 92       	push	r14
    539e:	ff 92       	push	r15
    53a0:	0f 93       	push	r16
    53a2:	1f 93       	push	r17
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	6c 01       	movw	r12, r24
    53aa:	7a 01       	movw	r14, r20
    53ac:	8b 01       	movw	r16, r22
    53ae:	c0 e0       	ldi	r28, 0x00	; 0
    53b0:	d0 e0       	ldi	r29, 0x00	; 0
    53b2:	ce 15       	cp	r28, r14
    53b4:	df 05       	cpc	r29, r15
    53b6:	81 f0       	breq	.+32     	; 0x53d8 <_ZN5Print5writeEPKhj+0x40>
    53b8:	d8 01       	movw	r26, r16
    53ba:	6d 91       	ld	r22, X+
    53bc:	8d 01       	movw	r16, r26
    53be:	d6 01       	movw	r26, r12
    53c0:	ed 91       	ld	r30, X+
    53c2:	fc 91       	ld	r31, X
    53c4:	01 90       	ld	r0, Z+
    53c6:	f0 81       	ld	r31, Z
    53c8:	e0 2d       	mov	r30, r0
    53ca:	c6 01       	movw	r24, r12
    53cc:	19 95       	eicall
    53ce:	89 2b       	or	r24, r25
    53d0:	11 f0       	breq	.+4      	; 0x53d6 <_ZN5Print5writeEPKhj+0x3e>
    53d2:	21 96       	adiw	r28, 0x01	; 1
    53d4:	ee cf       	rjmp	.-36     	; 0x53b2 <_ZN5Print5writeEPKhj+0x1a>
    53d6:	7e 01       	movw	r14, r28
    53d8:	c7 01       	movw	r24, r14
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	1f 91       	pop	r17
    53e0:	0f 91       	pop	r16
    53e2:	ff 90       	pop	r15
    53e4:	ef 90       	pop	r14
    53e6:	df 90       	pop	r13
    53e8:	cf 90       	pop	r12
    53ea:	08 95       	ret

000053ec <_ZN5Print5printEPKc>:
    53ec:	0c 94 86 01 	jmp	0x30c	; 0x30c <_ZN5Print5writeEPKc>

000053f0 <_ZN5Print7printlnEv>:
    53f0:	6b ec       	ldi	r22, 0xCB	; 203
    53f2:	72 e0       	ldi	r23, 0x02	; 2
    53f4:	0c 94 86 01 	jmp	0x30c	; 0x30c <_ZN5Print5writeEPKc>

000053f8 <_ZN5Print7printlnEPKc>:
    53f8:	0f 93       	push	r16
    53fa:	1f 93       	push	r17
    53fc:	cf 93       	push	r28
    53fe:	df 93       	push	r29
    5400:	ec 01       	movw	r28, r24
    5402:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN5Print5writeEPKc>
    5406:	8c 01       	movw	r16, r24
    5408:	ce 01       	movw	r24, r28
    540a:	f2 df       	rcall	.-28     	; 0x53f0 <_ZN5Print7printlnEv>
    540c:	80 0f       	add	r24, r16
    540e:	91 1f       	adc	r25, r17
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	1f 91       	pop	r17
    5416:	0f 91       	pop	r16
    5418:	08 95       	ret

0000541a <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    541a:	8f 92       	push	r8
    541c:	9f 92       	push	r9
    541e:	af 92       	push	r10
    5420:	bf 92       	push	r11
    5422:	ef 92       	push	r14
    5424:	ff 92       	push	r15
    5426:	0f 93       	push	r16
    5428:	1f 93       	push	r17
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
    5432:	a1 97       	sbiw	r28, 0x21	; 33
    5434:	0f b6       	in	r0, 0x3f	; 63
    5436:	f8 94       	cli
    5438:	de bf       	out	0x3e, r29	; 62
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	cd bf       	out	0x3d, r28	; 61
    543e:	7c 01       	movw	r14, r24
    5440:	fa 01       	movw	r30, r20
    5442:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    5444:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5446:	22 30       	cpi	r18, 0x02	; 2
    5448:	08 f4       	brcc	.+2      	; 0x544c <_ZN5Print11printNumberEmh+0x32>
    544a:	2a e0       	ldi	r18, 0x0A	; 10
    544c:	8e 01       	movw	r16, r28
    544e:	0f 5d       	subi	r16, 0xDF	; 223
    5450:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    5452:	82 2e       	mov	r8, r18
    5454:	91 2c       	mov	r9, r1
    5456:	a1 2c       	mov	r10, r1
    5458:	b1 2c       	mov	r11, r1
    545a:	bf 01       	movw	r22, r30
    545c:	a5 01       	movw	r20, r10
    545e:	94 01       	movw	r18, r8
    5460:	10 d4       	rcall	.+2080   	; 0x5c82 <__udivmodsi4>
    n /= base;
    5462:	f9 01       	movw	r30, r18
    5464:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    5466:	01 50       	subi	r16, 0x01	; 1
    5468:	11 09       	sbc	r17, r1
    546a:	6a 30       	cpi	r22, 0x0A	; 10
    546c:	10 f4       	brcc	.+4      	; 0x5472 <_ZN5Print11printNumberEmh+0x58>
    546e:	60 5d       	subi	r22, 0xD0	; 208
    5470:	01 c0       	rjmp	.+2      	; 0x5474 <_ZN5Print11printNumberEmh+0x5a>
    5472:	69 5c       	subi	r22, 0xC9	; 201
    5474:	d8 01       	movw	r26, r16
    5476:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    5478:	23 2b       	or	r18, r19
    547a:	24 2b       	or	r18, r20
    547c:	25 2b       	or	r18, r21
    547e:	69 f7       	brne	.-38     	; 0x545a <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    5480:	b8 01       	movw	r22, r16
    5482:	c7 01       	movw	r24, r14
    5484:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN5Print5writeEPKc>
}
    5488:	a1 96       	adiw	r28, 0x21	; 33
    548a:	0f b6       	in	r0, 0x3f	; 63
    548c:	f8 94       	cli
    548e:	de bf       	out	0x3e, r29	; 62
    5490:	0f be       	out	0x3f, r0	; 63
    5492:	cd bf       	out	0x3d, r28	; 61
    5494:	df 91       	pop	r29
    5496:	cf 91       	pop	r28
    5498:	1f 91       	pop	r17
    549a:	0f 91       	pop	r16
    549c:	ff 90       	pop	r15
    549e:	ef 90       	pop	r14
    54a0:	bf 90       	pop	r11
    54a2:	af 90       	pop	r10
    54a4:	9f 90       	pop	r9
    54a6:	8f 90       	pop	r8
    54a8:	08 95       	ret

000054aa <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    54aa:	21 15       	cp	r18, r1
    54ac:	31 05       	cpc	r19, r1
    54ae:	41 f4       	brne	.+16     	; 0x54c0 <_ZN5Print5printEmi+0x16>
    54b0:	dc 01       	movw	r26, r24
    54b2:	ed 91       	ld	r30, X+
    54b4:	fc 91       	ld	r31, X
    54b6:	01 90       	ld	r0, Z+
    54b8:	f0 81       	ld	r31, Z
    54ba:	e0 2d       	mov	r30, r0
    54bc:	64 2f       	mov	r22, r20
    54be:	19 94       	eijmp
  else return printNumber(n, base);
    54c0:	ac cf       	rjmp	.-168    	; 0x541a <_ZN5Print11printNumberEmh>

000054c2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    54c2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    54c4:	46 2f       	mov	r20, r22
    54c6:	50 e0       	ldi	r21, 0x00	; 0
    54c8:	60 e0       	ldi	r22, 0x00	; 0
    54ca:	70 e0       	ldi	r23, 0x00	; 0
    54cc:	ee cf       	rjmp	.-36     	; 0x54aa <_ZN5Print5printEmi>

000054ce <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    54ce:	1f 92       	push	r1
    54d0:	0f 92       	push	r0
    54d2:	0f b6       	in	r0, 0x3f	; 63
    54d4:	0f 92       	push	r0
    54d6:	11 24       	eor	r1, r1
    54d8:	2f 93       	push	r18
    54da:	3f 93       	push	r19
    54dc:	8f 93       	push	r24
    54de:	9f 93       	push	r25
    54e0:	af 93       	push	r26
    54e2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    54e4:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <timer0_millis>
    54e8:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <timer0_millis+0x1>
    54ec:	a0 91 36 05 	lds	r26, 0x0536	; 0x800536 <timer0_millis+0x2>
    54f0:	b0 91 37 05 	lds	r27, 0x0537	; 0x800537 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    54f4:	30 91 33 05 	lds	r19, 0x0533	; 0x800533 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    54f8:	23 e0       	ldi	r18, 0x03	; 3
    54fa:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    54fc:	2d 37       	cpi	r18, 0x7D	; 125
    54fe:	20 f4       	brcc	.+8      	; 0x5508 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5500:	01 96       	adiw	r24, 0x01	; 1
    5502:	a1 1d       	adc	r26, r1
    5504:	b1 1d       	adc	r27, r1
    5506:	05 c0       	rjmp	.+10     	; 0x5512 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5508:	26 e8       	ldi	r18, 0x86	; 134
    550a:	23 0f       	add	r18, r19
		m += 1;
    550c:	02 96       	adiw	r24, 0x02	; 2
    550e:	a1 1d       	adc	r26, r1
    5510:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5512:	20 93 33 05 	sts	0x0533, r18	; 0x800533 <timer0_fract>
	timer0_millis = m;
    5516:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <timer0_millis>
    551a:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <timer0_millis+0x1>
    551e:	a0 93 36 05 	sts	0x0536, r26	; 0x800536 <timer0_millis+0x2>
    5522:	b0 93 37 05 	sts	0x0537, r27	; 0x800537 <timer0_millis+0x3>
	timer0_overflow_count++;
    5526:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <timer0_overflow_count>
    552a:	90 91 39 05 	lds	r25, 0x0539	; 0x800539 <timer0_overflow_count+0x1>
    552e:	a0 91 3a 05 	lds	r26, 0x053A	; 0x80053a <timer0_overflow_count+0x2>
    5532:	b0 91 3b 05 	lds	r27, 0x053B	; 0x80053b <timer0_overflow_count+0x3>
    5536:	01 96       	adiw	r24, 0x01	; 1
    5538:	a1 1d       	adc	r26, r1
    553a:	b1 1d       	adc	r27, r1
    553c:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <timer0_overflow_count>
    5540:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <timer0_overflow_count+0x1>
    5544:	a0 93 3a 05 	sts	0x053A, r26	; 0x80053a <timer0_overflow_count+0x2>
    5548:	b0 93 3b 05 	sts	0x053B, r27	; 0x80053b <timer0_overflow_count+0x3>
}
    554c:	bf 91       	pop	r27
    554e:	af 91       	pop	r26
    5550:	9f 91       	pop	r25
    5552:	8f 91       	pop	r24
    5554:	3f 91       	pop	r19
    5556:	2f 91       	pop	r18
    5558:	0f 90       	pop	r0
    555a:	0f be       	out	0x3f, r0	; 63
    555c:	0f 90       	pop	r0
    555e:	1f 90       	pop	r1
    5560:	18 95       	reti

00005562 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5562:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5564:	f8 94       	cli
	m = timer0_millis;
    5566:	60 91 34 05 	lds	r22, 0x0534	; 0x800534 <timer0_millis>
    556a:	70 91 35 05 	lds	r23, 0x0535	; 0x800535 <timer0_millis+0x1>
    556e:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <timer0_millis+0x2>
    5572:	90 91 37 05 	lds	r25, 0x0537	; 0x800537 <timer0_millis+0x3>
	SREG = oldSREG;
    5576:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5578:	08 95       	ret

0000557a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    557a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    557c:	f8 94       	cli
	m = timer0_overflow_count;
    557e:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <timer0_overflow_count>
    5582:	90 91 39 05 	lds	r25, 0x0539	; 0x800539 <timer0_overflow_count+0x1>
    5586:	a0 91 3a 05 	lds	r26, 0x053A	; 0x80053a <timer0_overflow_count+0x2>
    558a:	b0 91 3b 05 	lds	r27, 0x053B	; 0x80053b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    558e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5590:	a8 9b       	sbis	0x15, 0	; 21
    5592:	05 c0       	rjmp	.+10     	; 0x559e <micros+0x24>
    5594:	2f 3f       	cpi	r18, 0xFF	; 255
    5596:	19 f0       	breq	.+6      	; 0x559e <micros+0x24>
		m++;
    5598:	01 96       	adiw	r24, 0x01	; 1
    559a:	a1 1d       	adc	r26, r1
    559c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    559e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    55a0:	ba 2f       	mov	r27, r26
    55a2:	a9 2f       	mov	r26, r25
    55a4:	98 2f       	mov	r25, r24
    55a6:	88 27       	eor	r24, r24
    55a8:	82 0f       	add	r24, r18
    55aa:	91 1d       	adc	r25, r1
    55ac:	a1 1d       	adc	r26, r1
    55ae:	b1 1d       	adc	r27, r1
    55b0:	bc 01       	movw	r22, r24
    55b2:	cd 01       	movw	r24, r26
    55b4:	42 e0       	ldi	r20, 0x02	; 2
    55b6:	66 0f       	add	r22, r22
    55b8:	77 1f       	adc	r23, r23
    55ba:	88 1f       	adc	r24, r24
    55bc:	99 1f       	adc	r25, r25
    55be:	4a 95       	dec	r20
    55c0:	d1 f7       	brne	.-12     	; 0x55b6 <micros+0x3c>
}
    55c2:	08 95       	ret

000055c4 <delay>:

void delay(unsigned long ms)
{
    55c4:	8f 92       	push	r8
    55c6:	9f 92       	push	r9
    55c8:	af 92       	push	r10
    55ca:	bf 92       	push	r11
    55cc:	cf 92       	push	r12
    55ce:	df 92       	push	r13
    55d0:	ef 92       	push	r14
    55d2:	ff 92       	push	r15
    55d4:	6b 01       	movw	r12, r22
    55d6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    55d8:	d0 df       	rcall	.-96     	; 0x557a <micros>
    55da:	4b 01       	movw	r8, r22
    55dc:	5c 01       	movw	r10, r24

	while (ms > 0) {
    55de:	c1 14       	cp	r12, r1
    55e0:	d1 04       	cpc	r13, r1
    55e2:	e1 04       	cpc	r14, r1
    55e4:	f1 04       	cpc	r15, r1
		yield();
    55e6:	f1 f0       	breq	.+60     	; 0x5624 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    55e8:	3c d3       	rcall	.+1656   	; 0x5c62 <yield>
    55ea:	c7 df       	rcall	.-114    	; 0x557a <micros>
    55ec:	dc 01       	movw	r26, r24
    55ee:	cb 01       	movw	r24, r22
    55f0:	88 19       	sub	r24, r8
    55f2:	99 09       	sbc	r25, r9
    55f4:	aa 09       	sbc	r26, r10
    55f6:	bb 09       	sbc	r27, r11
    55f8:	88 3e       	cpi	r24, 0xE8	; 232
    55fa:	93 40       	sbci	r25, 0x03	; 3
    55fc:	a1 05       	cpc	r26, r1
    55fe:	b1 05       	cpc	r27, r1
    5600:	70 f3       	brcs	.-36     	; 0x55de <delay+0x1a>
			ms--;
    5602:	21 e0       	ldi	r18, 0x01	; 1
    5604:	c2 1a       	sub	r12, r18
    5606:	d1 08       	sbc	r13, r1
    5608:	e1 08       	sbc	r14, r1
    560a:	f1 08       	sbc	r15, r1
			start += 1000;
    560c:	88 ee       	ldi	r24, 0xE8	; 232
    560e:	88 0e       	add	r8, r24
    5610:	83 e0       	ldi	r24, 0x03	; 3
    5612:	98 1e       	adc	r9, r24
    5614:	a1 1c       	adc	r10, r1
    5616:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5618:	c1 14       	cp	r12, r1
    561a:	d1 04       	cpc	r13, r1
    561c:	e1 04       	cpc	r14, r1
    561e:	f1 04       	cpc	r15, r1
    5620:	21 f7       	brne	.-56     	; 0x55ea <delay+0x26>
    5622:	dd cf       	rjmp	.-70     	; 0x55de <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5624:	ff 90       	pop	r15
    5626:	ef 90       	pop	r14
    5628:	df 90       	pop	r13
    562a:	cf 90       	pop	r12
    562c:	bf 90       	pop	r11
    562e:	af 90       	pop	r10
    5630:	9f 90       	pop	r9
    5632:	8f 90       	pop	r8
    5634:	08 95       	ret

00005636 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5636:	82 30       	cpi	r24, 0x02	; 2
    5638:	91 05       	cpc	r25, r1
    563a:	38 f0       	brcs	.+14     	; 0x564a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    563c:	88 0f       	add	r24, r24
    563e:	99 1f       	adc	r25, r25
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5644:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5646:	01 97       	sbiw	r24, 0x01	; 1
    5648:	f1 f7       	brne	.-4      	; 0x5646 <delayMicroseconds+0x10>
    564a:	08 95       	ret

0000564c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    564c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    564e:	84 b5       	in	r24, 0x24	; 36
    5650:	82 60       	ori	r24, 0x02	; 2
    5652:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5654:	84 b5       	in	r24, 0x24	; 36
    5656:	81 60       	ori	r24, 0x01	; 1
    5658:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    565a:	85 b5       	in	r24, 0x25	; 37
    565c:	82 60       	ori	r24, 0x02	; 2
    565e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5660:	85 b5       	in	r24, 0x25	; 37
    5662:	81 60       	ori	r24, 0x01	; 1
    5664:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5666:	ee e6       	ldi	r30, 0x6E	; 110
    5668:	f0 e0       	ldi	r31, 0x00	; 0
    566a:	80 81       	ld	r24, Z
    566c:	81 60       	ori	r24, 0x01	; 1
    566e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5670:	e1 e8       	ldi	r30, 0x81	; 129
    5672:	f0 e0       	ldi	r31, 0x00	; 0
    5674:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5676:	80 81       	ld	r24, Z
    5678:	82 60       	ori	r24, 0x02	; 2
    567a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    567c:	80 81       	ld	r24, Z
    567e:	81 60       	ori	r24, 0x01	; 1
    5680:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5682:	e0 e8       	ldi	r30, 0x80	; 128
    5684:	f0 e0       	ldi	r31, 0x00	; 0
    5686:	80 81       	ld	r24, Z
    5688:	81 60       	ori	r24, 0x01	; 1
    568a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    568c:	e1 eb       	ldi	r30, 0xB1	; 177
    568e:	f0 e0       	ldi	r31, 0x00	; 0
    5690:	80 81       	ld	r24, Z
    5692:	84 60       	ori	r24, 0x04	; 4
    5694:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5696:	e0 eb       	ldi	r30, 0xB0	; 176
    5698:	f0 e0       	ldi	r31, 0x00	; 0
    569a:	80 81       	ld	r24, Z
    569c:	81 60       	ori	r24, 0x01	; 1
    569e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    56a0:	e1 e9       	ldi	r30, 0x91	; 145
    56a2:	f0 e0       	ldi	r31, 0x00	; 0
    56a4:	80 81       	ld	r24, Z
    56a6:	82 60       	ori	r24, 0x02	; 2
    56a8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    56aa:	80 81       	ld	r24, Z
    56ac:	81 60       	ori	r24, 0x01	; 1
    56ae:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    56b0:	e0 e9       	ldi	r30, 0x90	; 144
    56b2:	f0 e0       	ldi	r31, 0x00	; 0
    56b4:	80 81       	ld	r24, Z
    56b6:	81 60       	ori	r24, 0x01	; 1
    56b8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    56ba:	e1 ea       	ldi	r30, 0xA1	; 161
    56bc:	f0 e0       	ldi	r31, 0x00	; 0
    56be:	80 81       	ld	r24, Z
    56c0:	82 60       	ori	r24, 0x02	; 2
    56c2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    56c4:	80 81       	ld	r24, Z
    56c6:	81 60       	ori	r24, 0x01	; 1
    56c8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    56ca:	e0 ea       	ldi	r30, 0xA0	; 160
    56cc:	f0 e0       	ldi	r31, 0x00	; 0
    56ce:	80 81       	ld	r24, Z
    56d0:	81 60       	ori	r24, 0x01	; 1
    56d2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    56d4:	e1 e2       	ldi	r30, 0x21	; 33
    56d6:	f1 e0       	ldi	r31, 0x01	; 1
    56d8:	80 81       	ld	r24, Z
    56da:	82 60       	ori	r24, 0x02	; 2
    56dc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    56de:	80 81       	ld	r24, Z
    56e0:	81 60       	ori	r24, 0x01	; 1
    56e2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    56e4:	e0 e2       	ldi	r30, 0x20	; 32
    56e6:	f1 e0       	ldi	r31, 0x01	; 1
    56e8:	80 81       	ld	r24, Z
    56ea:	81 60       	ori	r24, 0x01	; 1
    56ec:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    56ee:	ea e7       	ldi	r30, 0x7A	; 122
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	80 81       	ld	r24, Z
    56f4:	84 60       	ori	r24, 0x04	; 4
    56f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    56f8:	80 81       	ld	r24, Z
    56fa:	82 60       	ori	r24, 0x02	; 2
    56fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    56fe:	80 81       	ld	r24, Z
    5700:	81 60       	ori	r24, 0x01	; 1
    5702:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5704:	80 81       	ld	r24, Z
    5706:	80 68       	ori	r24, 0x80	; 128
    5708:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    570a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    570e:	08 95       	ret

00005710 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	fc 01       	movw	r30, r24
    5714:	31 97       	sbiw	r30, 0x01	; 1
    5716:	e2 31       	cpi	r30, 0x12	; 18
    5718:	f1 05       	cpc	r31, r1
    571a:	08 f0       	brcs	.+2      	; 0x571e <turnOffPWM+0xe>
    571c:	4d c0       	rjmp	.+154    	; 0x57b8 <turnOffPWM+0xa8>
    571e:	88 27       	eor	r24, r24
    5720:	ee 58       	subi	r30, 0x8E	; 142
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	8f 4f       	sbci	r24, 0xFF	; 255
    5726:	eb c2       	rjmp	.+1494   	; 0x5cfe <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5728:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    572c:	8f 77       	andi	r24, 0x7F	; 127
    572e:	03 c0       	rjmp	.+6      	; 0x5736 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5730:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5734:	8f 7d       	andi	r24, 0xDF	; 223
    5736:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    573a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    573c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5740:	87 7f       	andi	r24, 0xF7	; 247
    5742:	f9 cf       	rjmp	.-14     	; 0x5736 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5744:	84 b5       	in	r24, 0x24	; 36
    5746:	8f 77       	andi	r24, 0x7F	; 127
    5748:	02 c0       	rjmp	.+4      	; 0x574e <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    574a:	84 b5       	in	r24, 0x24	; 36
    574c:	8f 7d       	andi	r24, 0xDF	; 223
    574e:	84 bd       	out	0x24, r24	; 36
    5750:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5752:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5756:	8f 77       	andi	r24, 0x7F	; 127
    5758:	03 c0       	rjmp	.+6      	; 0x5760 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    575a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    575e:	8f 7d       	andi	r24, 0xDF	; 223
    5760:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5764:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5766:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    576a:	8f 77       	andi	r24, 0x7F	; 127
    576c:	07 c0       	rjmp	.+14     	; 0x577c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    576e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5772:	8f 7d       	andi	r24, 0xDF	; 223
    5774:	03 c0       	rjmp	.+6      	; 0x577c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5776:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    577a:	87 7f       	andi	r24, 0xF7	; 247
    577c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5780:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5782:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5786:	8f 77       	andi	r24, 0x7F	; 127
    5788:	07 c0       	rjmp	.+14     	; 0x5798 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    578a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    578e:	8f 7d       	andi	r24, 0xDF	; 223
    5790:	03 c0       	rjmp	.+6      	; 0x5798 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5792:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5796:	87 7f       	andi	r24, 0xF7	; 247
    5798:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    579c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    579e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    57a2:	8f 77       	andi	r24, 0x7F	; 127
    57a4:	07 c0       	rjmp	.+14     	; 0x57b4 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    57a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    57aa:	8f 7d       	andi	r24, 0xDF	; 223
    57ac:	03 c0       	rjmp	.+6      	; 0x57b4 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    57ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    57b2:	87 7f       	andi	r24, 0xF7	; 247
    57b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    57b8:	08 95       	ret

000057ba <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    57ba:	cf 93       	push	r28
    57bc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	fc 01       	movw	r30, r24
    57c2:	e2 5b       	subi	r30, 0xB2	; 178
    57c4:	fe 4f       	sbci	r31, 0xFE	; 254
    57c6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    57c8:	fc 01       	movw	r30, r24
    57ca:	ec 56       	subi	r30, 0x6C	; 108
    57cc:	fe 4f       	sbci	r31, 0xFE	; 254
    57ce:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    57d0:	88 23       	and	r24, r24
    57d2:	61 f1       	breq	.+88     	; 0x582c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	88 0f       	add	r24, r24
    57d8:	99 1f       	adc	r25, r25
    57da:	fc 01       	movw	r30, r24
    57dc:	e2 5f       	subi	r30, 0xF2	; 242
    57de:	fd 4f       	sbci	r31, 0xFD	; 253
    57e0:	c5 91       	lpm	r28, Z+
    57e2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    57e4:	fc 01       	movw	r30, r24
    57e6:	ec 50       	subi	r30, 0x0C	; 12
    57e8:	fe 4f       	sbci	r31, 0xFE	; 254
    57ea:	a5 91       	lpm	r26, Z+
    57ec:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    57ee:	61 11       	cpse	r22, r1
    57f0:	09 c0       	rjmp	.+18     	; 0x5804 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    57f2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    57f4:	f8 94       	cli
		*reg &= ~bit;
    57f6:	88 81       	ld	r24, Y
    57f8:	20 95       	com	r18
    57fa:	82 23       	and	r24, r18
    57fc:	88 83       	st	Y, r24
		*out &= ~bit;
    57fe:	ec 91       	ld	r30, X
    5800:	2e 23       	and	r18, r30
    5802:	0b c0       	rjmp	.+22     	; 0x581a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5804:	62 30       	cpi	r22, 0x02	; 2
    5806:	61 f4       	brne	.+24     	; 0x5820 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5808:	9f b7       	in	r25, 0x3f	; 63
                cli();
    580a:	f8 94       	cli
		*reg &= ~bit;
    580c:	88 81       	ld	r24, Y
    580e:	32 2f       	mov	r19, r18
    5810:	30 95       	com	r19
    5812:	83 23       	and	r24, r19
    5814:	88 83       	st	Y, r24
		*out |= bit;
    5816:	ec 91       	ld	r30, X
    5818:	2e 2b       	or	r18, r30
    581a:	2c 93       	st	X, r18
		SREG = oldSREG;
    581c:	9f bf       	out	0x3f, r25	; 63
    581e:	06 c0       	rjmp	.+12     	; 0x582c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5820:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5822:	f8 94       	cli
		*reg |= bit;
    5824:	e8 81       	ld	r30, Y
    5826:	2e 2b       	or	r18, r30
    5828:	28 83       	st	Y, r18
		SREG = oldSREG;
    582a:	8f bf       	out	0x3f, r24	; 63
	}
}
    582c:	df 91       	pop	r29
    582e:	cf 91       	pop	r28
    5830:	08 95       	ret

00005832 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5832:	1f 93       	push	r17
    5834:	cf 93       	push	r28
    5836:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5838:	28 2f       	mov	r18, r24
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	f9 01       	movw	r30, r18
    583e:	e8 5f       	subi	r30, 0xF8	; 248
    5840:	fe 4f       	sbci	r31, 0xFE	; 254
    5842:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5844:	f9 01       	movw	r30, r18
    5846:	e2 5b       	subi	r30, 0xB2	; 178
    5848:	fe 4f       	sbci	r31, 0xFE	; 254
    584a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    584c:	f9 01       	movw	r30, r18
    584e:	ec 56       	subi	r30, 0x6C	; 108
    5850:	fe 4f       	sbci	r31, 0xFE	; 254
    5852:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5854:	cc 23       	and	r28, r28
    5856:	b9 f0       	breq	.+46     	; 0x5886 <digitalWrite+0x54>
    5858:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    585a:	81 11       	cpse	r24, r1
    585c:	59 df       	rcall	.-334    	; 0x5710 <turnOffPWM>

	out = portOutputRegister(port);
    585e:	ec 2f       	mov	r30, r28
    5860:	f0 e0       	ldi	r31, 0x00	; 0
    5862:	ee 0f       	add	r30, r30
    5864:	ff 1f       	adc	r31, r31
    5866:	ec 50       	subi	r30, 0x0C	; 12
    5868:	fe 4f       	sbci	r31, 0xFE	; 254
    586a:	a5 91       	lpm	r26, Z+
    586c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    586e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5870:	f8 94       	cli

	if (val == LOW) {
    5872:	11 11       	cpse	r17, r1
    5874:	04 c0       	rjmp	.+8      	; 0x587e <digitalWrite+0x4c>
		*out &= ~bit;
    5876:	8c 91       	ld	r24, X
    5878:	d0 95       	com	r29
    587a:	d8 23       	and	r29, r24
    587c:	02 c0       	rjmp	.+4      	; 0x5882 <digitalWrite+0x50>
	} else {
		*out |= bit;
    587e:	ec 91       	ld	r30, X
    5880:	de 2b       	or	r29, r30
    5882:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5884:	9f bf       	out	0x3f, r25	; 63
}
    5886:	df 91       	pop	r29
    5888:	cf 91       	pop	r28
    588a:	1f 91       	pop	r17
    588c:	08 95       	ret

0000588e <digitalRead>:

int digitalRead(uint8_t pin)
{
    588e:	cf 93       	push	r28
    5890:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5892:	28 2f       	mov	r18, r24
    5894:	30 e0       	ldi	r19, 0x00	; 0
    5896:	f9 01       	movw	r30, r18
    5898:	e8 5f       	subi	r30, 0xF8	; 248
    589a:	fe 4f       	sbci	r31, 0xFE	; 254
    589c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    589e:	f9 01       	movw	r30, r18
    58a0:	e2 5b       	subi	r30, 0xB2	; 178
    58a2:	fe 4f       	sbci	r31, 0xFE	; 254
    58a4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    58a6:	f9 01       	movw	r30, r18
    58a8:	ec 56       	subi	r30, 0x6C	; 108
    58aa:	fe 4f       	sbci	r31, 0xFE	; 254
    58ac:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    58ae:	cc 23       	and	r28, r28
    58b0:	89 f0       	breq	.+34     	; 0x58d4 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    58b2:	81 11       	cpse	r24, r1
    58b4:	2d df       	rcall	.-422    	; 0x5710 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    58b6:	ec 2f       	mov	r30, r28
    58b8:	f0 e0       	ldi	r31, 0x00	; 0
    58ba:	ee 0f       	add	r30, r30
    58bc:	ff 1f       	adc	r31, r31
    58be:	e6 52       	subi	r30, 0x26	; 38
    58c0:	fe 4f       	sbci	r31, 0xFE	; 254
    58c2:	a5 91       	lpm	r26, Z+
    58c4:	b4 91       	lpm	r27, Z
    58c6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    58c8:	ed 23       	and	r30, r29
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	21 f4       	brne	.+8      	; 0x58d8 <digitalRead+0x4a>
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	02 c0       	rjmp	.+4      	; 0x58d8 <digitalRead+0x4a>
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    58d8:	df 91       	pop	r29
    58da:	cf 91       	pop	r28
    58dc:	08 95       	ret

000058de <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    58de:	4f 92       	push	r4
    58e0:	5f 92       	push	r5
    58e2:	6f 92       	push	r6
    58e4:	7f 92       	push	r7
    58e6:	af 92       	push	r10
    58e8:	bf 92       	push	r11
    58ea:	cf 92       	push	r12
    58ec:	df 92       	push	r13
    58ee:	ef 92       	push	r14
    58f0:	ff 92       	push	r15
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	cd b7       	in	r28, 0x3d	; 61
    58fc:	de b7       	in	r29, 0x3e	; 62
    58fe:	29 01       	movw	r4, r18
    5900:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5902:	9b 01       	movw	r18, r22
    5904:	ac 01       	movw	r20, r24
    5906:	24 19       	sub	r18, r4
    5908:	35 09       	sbc	r19, r5
    590a:	46 09       	sbc	r20, r6
    590c:	57 09       	sbc	r21, r7
    590e:	8a 89       	ldd	r24, Y+18	; 0x12
    5910:	9b 89       	ldd	r25, Y+19	; 0x13
    5912:	ac 89       	ldd	r26, Y+20	; 0x14
    5914:	bd 89       	ldd	r27, Y+21	; 0x15
    5916:	bc 01       	movw	r22, r24
    5918:	cd 01       	movw	r24, r26
    591a:	6a 19       	sub	r22, r10
    591c:	7b 09       	sbc	r23, r11
    591e:	8c 09       	sbc	r24, r12
    5920:	9d 09       	sbc	r25, r13
    5922:	a0 d1       	rcall	.+832    	; 0x5c64 <__mulsi3>
    5924:	a8 01       	movw	r20, r16
    5926:	97 01       	movw	r18, r14
    5928:	24 19       	sub	r18, r4
    592a:	35 09       	sbc	r19, r5
    592c:	46 09       	sbc	r20, r6
    592e:	57 09       	sbc	r21, r7
    5930:	ca d1       	rcall	.+916    	; 0x5cc6 <__divmodsi4>
    5932:	ca 01       	movw	r24, r20
    5934:	b9 01       	movw	r22, r18
    5936:	6a 0d       	add	r22, r10
    5938:	7b 1d       	adc	r23, r11
    593a:	8c 1d       	adc	r24, r12
    593c:	9d 1d       	adc	r25, r13
}
    593e:	df 91       	pop	r29
    5940:	cf 91       	pop	r28
    5942:	1f 91       	pop	r17
    5944:	0f 91       	pop	r16
    5946:	ff 90       	pop	r15
    5948:	ef 90       	pop	r14
    594a:	df 90       	pop	r13
    594c:	cf 90       	pop	r12
    594e:	bf 90       	pop	r11
    5950:	af 90       	pop	r10
    5952:	7f 90       	pop	r7
    5954:	6f 90       	pop	r6
    5956:	5f 90       	pop	r5
    5958:	4f 90       	pop	r4
    595a:	08 95       	ret

0000595c <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    595c:	fc 01       	movw	r30, r24
    595e:	80 81       	ld	r24, Z
    5960:	91 81       	ldd	r25, Z+1	; 0x01
    5962:	00 97       	sbiw	r24, 0x00	; 0
    5964:	09 f0       	breq	.+2      	; 0x5968 <_ZN6StringD1Ev+0xc>
    5966:	84 c2       	rjmp	.+1288   	; 0x5e70 <free>
    5968:	08 95       	ret

0000596a <_ZN6String10invalidateEv>:
    596a:	cf 93       	push	r28
    596c:	df 93       	push	r29
    596e:	ec 01       	movw	r28, r24
    5970:	88 81       	ld	r24, Y
    5972:	99 81       	ldd	r25, Y+1	; 0x01
    5974:	00 97       	sbiw	r24, 0x00	; 0
    5976:	09 f0       	breq	.+2      	; 0x597a <_ZN6String10invalidateEv+0x10>
    5978:	7b d2       	rcall	.+1270   	; 0x5e70 <free>
    597a:	19 82       	std	Y+1, r1	; 0x01
    597c:	18 82       	st	Y, r1
    597e:	1d 82       	std	Y+5, r1	; 0x05
    5980:	1c 82       	std	Y+4, r1	; 0x04
    5982:	1b 82       	std	Y+3, r1	; 0x03
    5984:	1a 82       	std	Y+2, r1	; 0x02
    5986:	df 91       	pop	r29
    5988:	cf 91       	pop	r28
    598a:	08 95       	ret

0000598c <_ZN6String12changeBufferEj>:
    598c:	0f 93       	push	r16
    598e:	1f 93       	push	r17
    5990:	cf 93       	push	r28
    5992:	df 93       	push	r29
    5994:	ec 01       	movw	r28, r24
    5996:	8b 01       	movw	r16, r22
    5998:	6f 5f       	subi	r22, 0xFF	; 255
    599a:	7f 4f       	sbci	r23, 0xFF	; 255
    599c:	88 81       	ld	r24, Y
    599e:	99 81       	ldd	r25, Y+1	; 0x01
    59a0:	f0 d2       	rcall	.+1504   	; 0x5f82 <realloc>
    59a2:	00 97       	sbiw	r24, 0x00	; 0
    59a4:	31 f0       	breq	.+12     	; 0x59b2 <_ZN6String12changeBufferEj+0x26>
    59a6:	99 83       	std	Y+1, r25	; 0x01
    59a8:	88 83       	st	Y, r24
    59aa:	1b 83       	std	Y+3, r17	; 0x03
    59ac:	0a 83       	std	Y+2, r16	; 0x02
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	01 c0       	rjmp	.+2      	; 0x59b4 <_ZN6String12changeBufferEj+0x28>
    59b2:	80 e0       	ldi	r24, 0x00	; 0
    59b4:	df 91       	pop	r29
    59b6:	cf 91       	pop	r28
    59b8:	1f 91       	pop	r17
    59ba:	0f 91       	pop	r16
    59bc:	08 95       	ret

000059be <_ZN6String7reserveEj>:
    59be:	cf 93       	push	r28
    59c0:	df 93       	push	r29
    59c2:	ec 01       	movw	r28, r24
    59c4:	88 81       	ld	r24, Y
    59c6:	99 81       	ldd	r25, Y+1	; 0x01
    59c8:	89 2b       	or	r24, r25
    59ca:	29 f0       	breq	.+10     	; 0x59d6 <_ZN6String7reserveEj+0x18>
    59cc:	8a 81       	ldd	r24, Y+2	; 0x02
    59ce:	9b 81       	ldd	r25, Y+3	; 0x03
    59d0:	86 17       	cp	r24, r22
    59d2:	97 07       	cpc	r25, r23
    59d4:	58 f4       	brcc	.+22     	; 0x59ec <_ZN6String7reserveEj+0x2e>
    59d6:	ce 01       	movw	r24, r28
    59d8:	d9 df       	rcall	.-78     	; 0x598c <_ZN6String12changeBufferEj>
    59da:	88 23       	and	r24, r24
    59dc:	41 f0       	breq	.+16     	; 0x59ee <_ZN6String7reserveEj+0x30>
    59de:	8c 81       	ldd	r24, Y+4	; 0x04
    59e0:	9d 81       	ldd	r25, Y+5	; 0x05
    59e2:	89 2b       	or	r24, r25
    59e4:	19 f4       	brne	.+6      	; 0x59ec <_ZN6String7reserveEj+0x2e>
    59e6:	e8 81       	ld	r30, Y
    59e8:	f9 81       	ldd	r31, Y+1	; 0x01
    59ea:	10 82       	st	Z, r1
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	df 91       	pop	r29
    59f0:	cf 91       	pop	r28
    59f2:	08 95       	ret

000059f4 <_ZN6String4copyEPKcj>:
    59f4:	ef 92       	push	r14
    59f6:	ff 92       	push	r15
    59f8:	0f 93       	push	r16
    59fa:	1f 93       	push	r17
    59fc:	cf 93       	push	r28
    59fe:	df 93       	push	r29
    5a00:	ec 01       	movw	r28, r24
    5a02:	7b 01       	movw	r14, r22
    5a04:	8a 01       	movw	r16, r20
    5a06:	ba 01       	movw	r22, r20
    5a08:	da df       	rcall	.-76     	; 0x59be <_ZN6String7reserveEj>
    5a0a:	81 11       	cpse	r24, r1
    5a0c:	03 c0       	rjmp	.+6      	; 0x5a14 <_ZN6String4copyEPKcj+0x20>
    5a0e:	ce 01       	movw	r24, r28
    5a10:	ac df       	rcall	.-168    	; 0x596a <_ZN6String10invalidateEv>
    5a12:	06 c0       	rjmp	.+12     	; 0x5a20 <_ZN6String4copyEPKcj+0x2c>
    5a14:	1d 83       	std	Y+5, r17	; 0x05
    5a16:	0c 83       	std	Y+4, r16	; 0x04
    5a18:	b7 01       	movw	r22, r14
    5a1a:	88 81       	ld	r24, Y
    5a1c:	99 81       	ldd	r25, Y+1	; 0x01
    5a1e:	b6 d3       	rcall	.+1900   	; 0x618c <strcpy>
    5a20:	ce 01       	movw	r24, r28
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	1f 91       	pop	r17
    5a28:	0f 91       	pop	r16
    5a2a:	ff 90       	pop	r15
    5a2c:	ef 90       	pop	r14
    5a2e:	08 95       	ret

00005a30 <_ZN6StringC1EPKc>:
    5a30:	fc 01       	movw	r30, r24
    5a32:	11 82       	std	Z+1, r1	; 0x01
    5a34:	10 82       	st	Z, r1
    5a36:	13 82       	std	Z+3, r1	; 0x03
    5a38:	12 82       	std	Z+2, r1	; 0x02
    5a3a:	15 82       	std	Z+5, r1	; 0x05
    5a3c:	14 82       	std	Z+4, r1	; 0x04
    5a3e:	61 15       	cp	r22, r1
    5a40:	71 05       	cpc	r23, r1
    5a42:	49 f0       	breq	.+18     	; 0x5a56 <_ZN6StringC1EPKc+0x26>
    5a44:	fb 01       	movw	r30, r22
    5a46:	01 90       	ld	r0, Z+
    5a48:	00 20       	and	r0, r0
    5a4a:	e9 f7       	brne	.-6      	; 0x5a46 <_ZN6StringC1EPKc+0x16>
    5a4c:	31 97       	sbiw	r30, 0x01	; 1
    5a4e:	af 01       	movw	r20, r30
    5a50:	46 1b       	sub	r20, r22
    5a52:	57 0b       	sbc	r21, r23
    5a54:	cf cf       	rjmp	.-98     	; 0x59f4 <_ZN6String4copyEPKcj>
    5a56:	08 95       	ret

00005a58 <_ZN6StringaSEPKc>:
    5a58:	cf 93       	push	r28
    5a5a:	df 93       	push	r29
    5a5c:	ec 01       	movw	r28, r24
    5a5e:	61 15       	cp	r22, r1
    5a60:	71 05       	cpc	r23, r1
    5a62:	51 f0       	breq	.+20     	; 0x5a78 <_ZN6StringaSEPKc+0x20>
    5a64:	fb 01       	movw	r30, r22
    5a66:	01 90       	ld	r0, Z+
    5a68:	00 20       	and	r0, r0
    5a6a:	e9 f7       	brne	.-6      	; 0x5a66 <_ZN6StringaSEPKc+0xe>
    5a6c:	31 97       	sbiw	r30, 0x01	; 1
    5a6e:	af 01       	movw	r20, r30
    5a70:	46 1b       	sub	r20, r22
    5a72:	57 0b       	sbc	r21, r23
    5a74:	bf df       	rcall	.-130    	; 0x59f4 <_ZN6String4copyEPKcj>
    5a76:	01 c0       	rjmp	.+2      	; 0x5a7a <_ZN6StringaSEPKc+0x22>
    5a78:	78 df       	rcall	.-272    	; 0x596a <_ZN6String10invalidateEv>
    5a7a:	ce 01       	movw	r24, r28
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	08 95       	ret

00005a82 <_ZN6StringC1Ehh>:
    5a82:	0f 93       	push	r16
    5a84:	1f 93       	push	r17
    5a86:	cf 93       	push	r28
    5a88:	df 93       	push	r29
    5a8a:	cd b7       	in	r28, 0x3d	; 61
    5a8c:	de b7       	in	r29, 0x3e	; 62
    5a8e:	29 97       	sbiw	r28, 0x09	; 9
    5a90:	0f b6       	in	r0, 0x3f	; 63
    5a92:	f8 94       	cli
    5a94:	de bf       	out	0x3e, r29	; 62
    5a96:	0f be       	out	0x3f, r0	; 63
    5a98:	cd bf       	out	0x3d, r28	; 61
    5a9a:	8c 01       	movw	r16, r24
    5a9c:	86 2f       	mov	r24, r22
    5a9e:	f8 01       	movw	r30, r16
    5aa0:	11 82       	std	Z+1, r1	; 0x01
    5aa2:	10 82       	st	Z, r1
    5aa4:	13 82       	std	Z+3, r1	; 0x03
    5aa6:	12 82       	std	Z+2, r1	; 0x02
    5aa8:	15 82       	std	Z+5, r1	; 0x05
    5aaa:	14 82       	std	Z+4, r1	; 0x04
    5aac:	50 e0       	ldi	r21, 0x00	; 0
    5aae:	be 01       	movw	r22, r28
    5ab0:	6f 5f       	subi	r22, 0xFF	; 255
    5ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	89 d3       	rcall	.+1810   	; 0x61ca <utoa>
    5ab8:	be 01       	movw	r22, r28
    5aba:	6f 5f       	subi	r22, 0xFF	; 255
    5abc:	7f 4f       	sbci	r23, 0xFF	; 255
    5abe:	c8 01       	movw	r24, r16
    5ac0:	cb df       	rcall	.-106    	; 0x5a58 <_ZN6StringaSEPKc>
    5ac2:	29 96       	adiw	r28, 0x09	; 9
    5ac4:	0f b6       	in	r0, 0x3f	; 63
    5ac6:	f8 94       	cli
    5ac8:	de bf       	out	0x3e, r29	; 62
    5aca:	0f be       	out	0x3f, r0	; 63
    5acc:	cd bf       	out	0x3d, r28	; 61
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	08 95       	ret

00005ad8 <_ZN6String6concatEPKcj>:
    5ad8:	ef 92       	push	r14
    5ada:	ff 92       	push	r15
    5adc:	0f 93       	push	r16
    5ade:	1f 93       	push	r17
    5ae0:	cf 93       	push	r28
    5ae2:	df 93       	push	r29
    5ae4:	61 15       	cp	r22, r1
    5ae6:	71 05       	cpc	r23, r1
    5ae8:	11 f4       	brne	.+4      	; 0x5aee <_ZN6String6concatEPKcj+0x16>
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	1a c0       	rjmp	.+52     	; 0x5b22 <_ZN6String6concatEPKcj+0x4a>
    5aee:	41 15       	cp	r20, r1
    5af0:	51 05       	cpc	r21, r1
    5af2:	b1 f0       	breq	.+44     	; 0x5b20 <_ZN6String6concatEPKcj+0x48>
    5af4:	7b 01       	movw	r14, r22
    5af6:	ec 01       	movw	r28, r24
    5af8:	8c 81       	ldd	r24, Y+4	; 0x04
    5afa:	9d 81       	ldd	r25, Y+5	; 0x05
    5afc:	8a 01       	movw	r16, r20
    5afe:	08 0f       	add	r16, r24
    5b00:	19 1f       	adc	r17, r25
    5b02:	b8 01       	movw	r22, r16
    5b04:	ce 01       	movw	r24, r28
    5b06:	5b df       	rcall	.-330    	; 0x59be <_ZN6String7reserveEj>
    5b08:	88 23       	and	r24, r24
    5b0a:	79 f3       	breq	.-34     	; 0x5aea <_ZN6String6concatEPKcj+0x12>
    5b0c:	28 81       	ld	r18, Y
    5b0e:	39 81       	ldd	r19, Y+1	; 0x01
    5b10:	8c 81       	ldd	r24, Y+4	; 0x04
    5b12:	9d 81       	ldd	r25, Y+5	; 0x05
    5b14:	b7 01       	movw	r22, r14
    5b16:	82 0f       	add	r24, r18
    5b18:	93 1f       	adc	r25, r19
    5b1a:	38 d3       	rcall	.+1648   	; 0x618c <strcpy>
    5b1c:	1d 83       	std	Y+5, r17	; 0x05
    5b1e:	0c 83       	std	Y+4, r16	; 0x04
    5b20:	81 e0       	ldi	r24, 0x01	; 1
    5b22:	df 91       	pop	r29
    5b24:	cf 91       	pop	r28
    5b26:	1f 91       	pop	r17
    5b28:	0f 91       	pop	r16
    5b2a:	ff 90       	pop	r15
    5b2c:	ef 90       	pop	r14
    5b2e:	08 95       	ret

00005b30 <_ZN6String6concatERKS_>:
    5b30:	fb 01       	movw	r30, r22
    5b32:	44 81       	ldd	r20, Z+4	; 0x04
    5b34:	55 81       	ldd	r21, Z+5	; 0x05
    5b36:	60 81       	ld	r22, Z
    5b38:	71 81       	ldd	r23, Z+1	; 0x01
    5b3a:	ce cf       	rjmp	.-100    	; 0x5ad8 <_ZN6String6concatEPKcj>

00005b3c <_ZNK6String9compareToERKS_>:
    5b3c:	cf 93       	push	r28
    5b3e:	df 93       	push	r29
    5b40:	dc 01       	movw	r26, r24
    5b42:	ed 91       	ld	r30, X+
    5b44:	fc 91       	ld	r31, X
    5b46:	eb 01       	movw	r28, r22
    5b48:	a8 81       	ld	r26, Y
    5b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    5b4c:	30 97       	sbiw	r30, 0x00	; 0
    5b4e:	11 f0       	breq	.+4      	; 0x5b54 <_ZNK6String9compareToERKS_+0x18>
    5b50:	10 97       	sbiw	r26, 0x00	; 0
    5b52:	c9 f4       	brne	.+50     	; 0x5b86 <_ZNK6String9compareToERKS_+0x4a>
    5b54:	10 97       	sbiw	r26, 0x00	; 0
    5b56:	59 f0       	breq	.+22     	; 0x5b6e <_ZNK6String9compareToERKS_+0x32>
    5b58:	eb 01       	movw	r28, r22
    5b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    5b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    5b5e:	23 2b       	or	r18, r19
    5b60:	31 f0       	breq	.+12     	; 0x5b6e <_ZNK6String9compareToERKS_+0x32>
    5b62:	8c 91       	ld	r24, X
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	91 95       	neg	r25
    5b68:	81 95       	neg	r24
    5b6a:	91 09       	sbc	r25, r1
    5b6c:	13 c0       	rjmp	.+38     	; 0x5b94 <_ZNK6String9compareToERKS_+0x58>
    5b6e:	30 97       	sbiw	r30, 0x00	; 0
    5b70:	79 f0       	breq	.+30     	; 0x5b90 <_ZNK6String9compareToERKS_+0x54>
    5b72:	dc 01       	movw	r26, r24
    5b74:	14 96       	adiw	r26, 0x04	; 4
    5b76:	8d 91       	ld	r24, X+
    5b78:	9c 91       	ld	r25, X
    5b7a:	15 97       	sbiw	r26, 0x05	; 5
    5b7c:	89 2b       	or	r24, r25
    5b7e:	41 f0       	breq	.+16     	; 0x5b90 <_ZNK6String9compareToERKS_+0x54>
    5b80:	80 81       	ld	r24, Z
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	07 c0       	rjmp	.+14     	; 0x5b94 <_ZNK6String9compareToERKS_+0x58>
    5b86:	bd 01       	movw	r22, r26
    5b88:	cf 01       	movw	r24, r30
    5b8a:	df 91       	pop	r29
    5b8c:	cf 91       	pop	r28
    5b8e:	f5 c2       	rjmp	.+1514   	; 0x617a <strcmp>
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	08 95       	ret

00005b9a <_ZNK6String6equalsERKS_>:
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	44 81       	ldd	r20, Z+4	; 0x04
    5b9e:	55 81       	ldd	r21, Z+5	; 0x05
    5ba0:	fb 01       	movw	r30, r22
    5ba2:	24 81       	ldd	r18, Z+4	; 0x04
    5ba4:	35 81       	ldd	r19, Z+5	; 0x05
    5ba6:	42 17       	cp	r20, r18
    5ba8:	53 07       	cpc	r21, r19
    5baa:	21 f4       	brne	.+8      	; 0x5bb4 <_ZNK6String6equalsERKS_+0x1a>
    5bac:	c7 df       	rcall	.-114    	; 0x5b3c <_ZNK6String9compareToERKS_>
    5bae:	21 e0       	ldi	r18, 0x01	; 1
    5bb0:	89 2b       	or	r24, r25
    5bb2:	09 f0       	breq	.+2      	; 0x5bb6 <_ZNK6String6equalsERKS_+0x1c>
    5bb4:	20 e0       	ldi	r18, 0x00	; 0
    5bb6:	82 2f       	mov	r24, r18
    5bb8:	08 95       	ret

00005bba <_ZNK6String9substringEjj>:
    5bba:	bf 92       	push	r11
    5bbc:	cf 92       	push	r12
    5bbe:	df 92       	push	r13
    5bc0:	ef 92       	push	r14
    5bc2:	ff 92       	push	r15
    5bc4:	0f 93       	push	r16
    5bc6:	1f 93       	push	r17
    5bc8:	cf 93       	push	r28
    5bca:	df 93       	push	r29
    5bcc:	7c 01       	movw	r14, r24
    5bce:	6b 01       	movw	r12, r22
    5bd0:	8a 01       	movw	r16, r20
    5bd2:	e9 01       	movw	r28, r18
    5bd4:	24 17       	cp	r18, r20
    5bd6:	35 07       	cpc	r19, r21
    5bd8:	20 f4       	brcc	.+8      	; 0x5be2 <_ZNK6String9substringEjj+0x28>
    5bda:	81 2f       	mov	r24, r17
    5bdc:	89 01       	movw	r16, r18
    5bde:	c4 2f       	mov	r28, r20
    5be0:	d8 2f       	mov	r29, r24
    5be2:	6d ec       	ldi	r22, 0xCD	; 205
    5be4:	72 e0       	ldi	r23, 0x02	; 2
    5be6:	c7 01       	movw	r24, r14
    5be8:	23 df       	rcall	.-442    	; 0x5a30 <_ZN6StringC1EPKc>
    5bea:	d6 01       	movw	r26, r12
    5bec:	14 96       	adiw	r26, 0x04	; 4
    5bee:	8d 91       	ld	r24, X+
    5bf0:	9c 91       	ld	r25, X
    5bf2:	15 97       	sbiw	r26, 0x05	; 5
    5bf4:	08 17       	cp	r16, r24
    5bf6:	19 07       	cpc	r17, r25
    5bf8:	c0 f4       	brcc	.+48     	; 0x5c2a <_ZNK6String9substringEjj+0x70>
    5bfa:	8c 17       	cp	r24, r28
    5bfc:	9d 07       	cpc	r25, r29
    5bfe:	08 f4       	brcc	.+2      	; 0x5c02 <_ZNK6String9substringEjj+0x48>
    5c00:	ec 01       	movw	r28, r24
    5c02:	d6 01       	movw	r26, r12
    5c04:	ed 91       	ld	r30, X+
    5c06:	fc 91       	ld	r31, X
    5c08:	11 97       	sbiw	r26, 0x01	; 1
    5c0a:	ec 0f       	add	r30, r28
    5c0c:	fd 1f       	adc	r31, r29
    5c0e:	b0 80       	ld	r11, Z
    5c10:	10 82       	st	Z, r1
    5c12:	6d 91       	ld	r22, X+
    5c14:	7c 91       	ld	r23, X
    5c16:	60 0f       	add	r22, r16
    5c18:	71 1f       	adc	r23, r17
    5c1a:	c7 01       	movw	r24, r14
    5c1c:	1d df       	rcall	.-454    	; 0x5a58 <_ZN6StringaSEPKc>
    5c1e:	d6 01       	movw	r26, r12
    5c20:	ed 91       	ld	r30, X+
    5c22:	fc 91       	ld	r31, X
    5c24:	ec 0f       	add	r30, r28
    5c26:	fd 1f       	adc	r31, r29
    5c28:	b0 82       	st	Z, r11
    5c2a:	c7 01       	movw	r24, r14
    5c2c:	df 91       	pop	r29
    5c2e:	cf 91       	pop	r28
    5c30:	1f 91       	pop	r17
    5c32:	0f 91       	pop	r16
    5c34:	ff 90       	pop	r15
    5c36:	ef 90       	pop	r14
    5c38:	df 90       	pop	r13
    5c3a:	cf 90       	pop	r12
    5c3c:	bf 90       	pop	r11
    5c3e:	08 95       	ret

00005c40 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    5c40:	cf 93       	push	r28
    5c42:	df 93       	push	r29
	if (!buffer) return;
    5c44:	fc 01       	movw	r30, r24
    5c46:	c0 81       	ld	r28, Z
    5c48:	d1 81       	ldd	r29, Z+1	; 0x01
    5c4a:	20 97       	sbiw	r28, 0x00	; 0
    5c4c:	39 f0       	breq	.+14     	; 0x5c5c <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    5c4e:	88 81       	ld	r24, Y
    5c50:	88 23       	and	r24, r24
    5c52:	21 f0       	breq	.+8      	; 0x5c5c <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	79 d2       	rcall	.+1266   	; 0x614a <toupper>
    5c58:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    5c5a:	f9 cf       	rjmp	.-14     	; 0x5c4e <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    5c5c:	df 91       	pop	r29
    5c5e:	cf 91       	pop	r28
    5c60:	08 95       	ret

00005c62 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5c62:	08 95       	ret

00005c64 <__mulsi3>:
    5c64:	db 01       	movw	r26, r22
    5c66:	8f 93       	push	r24
    5c68:	9f 93       	push	r25
    5c6a:	51 d0       	rcall	.+162    	; 0x5d0e <__muluhisi3>
    5c6c:	bf 91       	pop	r27
    5c6e:	af 91       	pop	r26
    5c70:	a2 9f       	mul	r26, r18
    5c72:	80 0d       	add	r24, r0
    5c74:	91 1d       	adc	r25, r1
    5c76:	a3 9f       	mul	r26, r19
    5c78:	90 0d       	add	r25, r0
    5c7a:	b2 9f       	mul	r27, r18
    5c7c:	90 0d       	add	r25, r0
    5c7e:	11 24       	eor	r1, r1
    5c80:	08 95       	ret

00005c82 <__udivmodsi4>:
    5c82:	a1 e2       	ldi	r26, 0x21	; 33
    5c84:	1a 2e       	mov	r1, r26
    5c86:	aa 1b       	sub	r26, r26
    5c88:	bb 1b       	sub	r27, r27
    5c8a:	fd 01       	movw	r30, r26
    5c8c:	0d c0       	rjmp	.+26     	; 0x5ca8 <__udivmodsi4_ep>

00005c8e <__udivmodsi4_loop>:
    5c8e:	aa 1f       	adc	r26, r26
    5c90:	bb 1f       	adc	r27, r27
    5c92:	ee 1f       	adc	r30, r30
    5c94:	ff 1f       	adc	r31, r31
    5c96:	a2 17       	cp	r26, r18
    5c98:	b3 07       	cpc	r27, r19
    5c9a:	e4 07       	cpc	r30, r20
    5c9c:	f5 07       	cpc	r31, r21
    5c9e:	20 f0       	brcs	.+8      	; 0x5ca8 <__udivmodsi4_ep>
    5ca0:	a2 1b       	sub	r26, r18
    5ca2:	b3 0b       	sbc	r27, r19
    5ca4:	e4 0b       	sbc	r30, r20
    5ca6:	f5 0b       	sbc	r31, r21

00005ca8 <__udivmodsi4_ep>:
    5ca8:	66 1f       	adc	r22, r22
    5caa:	77 1f       	adc	r23, r23
    5cac:	88 1f       	adc	r24, r24
    5cae:	99 1f       	adc	r25, r25
    5cb0:	1a 94       	dec	r1
    5cb2:	69 f7       	brne	.-38     	; 0x5c8e <__udivmodsi4_loop>
    5cb4:	60 95       	com	r22
    5cb6:	70 95       	com	r23
    5cb8:	80 95       	com	r24
    5cba:	90 95       	com	r25
    5cbc:	9b 01       	movw	r18, r22
    5cbe:	ac 01       	movw	r20, r24
    5cc0:	bd 01       	movw	r22, r26
    5cc2:	cf 01       	movw	r24, r30
    5cc4:	08 95       	ret

00005cc6 <__divmodsi4>:
    5cc6:	05 2e       	mov	r0, r21
    5cc8:	97 fb       	bst	r25, 7
    5cca:	16 f4       	brtc	.+4      	; 0x5cd0 <__divmodsi4+0xa>
    5ccc:	00 94       	com	r0
    5cce:	0f d0       	rcall	.+30     	; 0x5cee <__negsi2>
    5cd0:	57 fd       	sbrc	r21, 7
    5cd2:	05 d0       	rcall	.+10     	; 0x5cde <__divmodsi4_neg2>
    5cd4:	d6 df       	rcall	.-84     	; 0x5c82 <__udivmodsi4>
    5cd6:	07 fc       	sbrc	r0, 7
    5cd8:	02 d0       	rcall	.+4      	; 0x5cde <__divmodsi4_neg2>
    5cda:	46 f4       	brtc	.+16     	; 0x5cec <__divmodsi4_exit>
    5cdc:	08 c0       	rjmp	.+16     	; 0x5cee <__negsi2>

00005cde <__divmodsi4_neg2>:
    5cde:	50 95       	com	r21
    5ce0:	40 95       	com	r20
    5ce2:	30 95       	com	r19
    5ce4:	21 95       	neg	r18
    5ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ce8:	4f 4f       	sbci	r20, 0xFF	; 255
    5cea:	5f 4f       	sbci	r21, 0xFF	; 255

00005cec <__divmodsi4_exit>:
    5cec:	08 95       	ret

00005cee <__negsi2>:
    5cee:	90 95       	com	r25
    5cf0:	80 95       	com	r24
    5cf2:	70 95       	com	r23
    5cf4:	61 95       	neg	r22
    5cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	08 95       	ret

00005cfe <__tablejump2__>:
    5cfe:	ee 0f       	add	r30, r30
    5d00:	ff 1f       	adc	r31, r31
    5d02:	88 1f       	adc	r24, r24
    5d04:	8b bf       	out	0x3b, r24	; 59
    5d06:	07 90       	elpm	r0, Z+
    5d08:	f6 91       	elpm	r31, Z
    5d0a:	e0 2d       	mov	r30, r0
    5d0c:	19 94       	eijmp

00005d0e <__muluhisi3>:
    5d0e:	09 d0       	rcall	.+18     	; 0x5d22 <__umulhisi3>
    5d10:	a5 9f       	mul	r26, r21
    5d12:	90 0d       	add	r25, r0
    5d14:	b4 9f       	mul	r27, r20
    5d16:	90 0d       	add	r25, r0
    5d18:	a4 9f       	mul	r26, r20
    5d1a:	80 0d       	add	r24, r0
    5d1c:	91 1d       	adc	r25, r1
    5d1e:	11 24       	eor	r1, r1
    5d20:	08 95       	ret

00005d22 <__umulhisi3>:
    5d22:	a2 9f       	mul	r26, r18
    5d24:	b0 01       	movw	r22, r0
    5d26:	b3 9f       	mul	r27, r19
    5d28:	c0 01       	movw	r24, r0
    5d2a:	a3 9f       	mul	r26, r19
    5d2c:	70 0d       	add	r23, r0
    5d2e:	81 1d       	adc	r24, r1
    5d30:	11 24       	eor	r1, r1
    5d32:	91 1d       	adc	r25, r1
    5d34:	b2 9f       	mul	r27, r18
    5d36:	70 0d       	add	r23, r0
    5d38:	81 1d       	adc	r24, r1
    5d3a:	11 24       	eor	r1, r1
    5d3c:	91 1d       	adc	r25, r1
    5d3e:	08 95       	ret

00005d40 <malloc>:
    5d40:	0f 93       	push	r16
    5d42:	1f 93       	push	r17
    5d44:	cf 93       	push	r28
    5d46:	df 93       	push	r29
    5d48:	82 30       	cpi	r24, 0x02	; 2
    5d4a:	91 05       	cpc	r25, r1
    5d4c:	10 f4       	brcc	.+4      	; 0x5d52 <malloc+0x12>
    5d4e:	82 e0       	ldi	r24, 0x02	; 2
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <__flp>
    5d56:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <__flp+0x1>
    5d5a:	20 e0       	ldi	r18, 0x00	; 0
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	a0 e0       	ldi	r26, 0x00	; 0
    5d60:	b0 e0       	ldi	r27, 0x00	; 0
    5d62:	30 97       	sbiw	r30, 0x00	; 0
    5d64:	19 f1       	breq	.+70     	; 0x5dac <malloc+0x6c>
    5d66:	40 81       	ld	r20, Z
    5d68:	51 81       	ldd	r21, Z+1	; 0x01
    5d6a:	02 81       	ldd	r16, Z+2	; 0x02
    5d6c:	13 81       	ldd	r17, Z+3	; 0x03
    5d6e:	48 17       	cp	r20, r24
    5d70:	59 07       	cpc	r21, r25
    5d72:	c8 f0       	brcs	.+50     	; 0x5da6 <malloc+0x66>
    5d74:	84 17       	cp	r24, r20
    5d76:	95 07       	cpc	r25, r21
    5d78:	69 f4       	brne	.+26     	; 0x5d94 <malloc+0x54>
    5d7a:	10 97       	sbiw	r26, 0x00	; 0
    5d7c:	31 f0       	breq	.+12     	; 0x5d8a <malloc+0x4a>
    5d7e:	12 96       	adiw	r26, 0x02	; 2
    5d80:	0c 93       	st	X, r16
    5d82:	12 97       	sbiw	r26, 0x02	; 2
    5d84:	13 96       	adiw	r26, 0x03	; 3
    5d86:	1c 93       	st	X, r17
    5d88:	27 c0       	rjmp	.+78     	; 0x5dd8 <malloc+0x98>
    5d8a:	00 93 3e 05 	sts	0x053E, r16	; 0x80053e <__flp>
    5d8e:	10 93 3f 05 	sts	0x053F, r17	; 0x80053f <__flp+0x1>
    5d92:	22 c0       	rjmp	.+68     	; 0x5dd8 <malloc+0x98>
    5d94:	21 15       	cp	r18, r1
    5d96:	31 05       	cpc	r19, r1
    5d98:	19 f0       	breq	.+6      	; 0x5da0 <malloc+0x60>
    5d9a:	42 17       	cp	r20, r18
    5d9c:	53 07       	cpc	r21, r19
    5d9e:	18 f4       	brcc	.+6      	; 0x5da6 <malloc+0x66>
    5da0:	9a 01       	movw	r18, r20
    5da2:	bd 01       	movw	r22, r26
    5da4:	ef 01       	movw	r28, r30
    5da6:	df 01       	movw	r26, r30
    5da8:	f8 01       	movw	r30, r16
    5daa:	db cf       	rjmp	.-74     	; 0x5d62 <malloc+0x22>
    5dac:	21 15       	cp	r18, r1
    5dae:	31 05       	cpc	r19, r1
    5db0:	f9 f0       	breq	.+62     	; 0x5df0 <malloc+0xb0>
    5db2:	28 1b       	sub	r18, r24
    5db4:	39 0b       	sbc	r19, r25
    5db6:	24 30       	cpi	r18, 0x04	; 4
    5db8:	31 05       	cpc	r19, r1
    5dba:	80 f4       	brcc	.+32     	; 0x5ddc <malloc+0x9c>
    5dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    5dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    5dc0:	61 15       	cp	r22, r1
    5dc2:	71 05       	cpc	r23, r1
    5dc4:	21 f0       	breq	.+8      	; 0x5dce <malloc+0x8e>
    5dc6:	fb 01       	movw	r30, r22
    5dc8:	93 83       	std	Z+3, r25	; 0x03
    5dca:	82 83       	std	Z+2, r24	; 0x02
    5dcc:	04 c0       	rjmp	.+8      	; 0x5dd6 <malloc+0x96>
    5dce:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <__flp+0x1>
    5dd2:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <__flp>
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	32 96       	adiw	r30, 0x02	; 2
    5dda:	44 c0       	rjmp	.+136    	; 0x5e64 <malloc+0x124>
    5ddc:	fe 01       	movw	r30, r28
    5dde:	e2 0f       	add	r30, r18
    5de0:	f3 1f       	adc	r31, r19
    5de2:	81 93       	st	Z+, r24
    5de4:	91 93       	st	Z+, r25
    5de6:	22 50       	subi	r18, 0x02	; 2
    5de8:	31 09       	sbc	r19, r1
    5dea:	39 83       	std	Y+1, r19	; 0x01
    5dec:	28 83       	st	Y, r18
    5dee:	3a c0       	rjmp	.+116    	; 0x5e64 <malloc+0x124>
    5df0:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <__brkval>
    5df4:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <__brkval+0x1>
    5df8:	23 2b       	or	r18, r19
    5dfa:	41 f4       	brne	.+16     	; 0x5e0c <malloc+0xcc>
    5dfc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5e00:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5e04:	30 93 3d 05 	sts	0x053D, r19	; 0x80053d <__brkval+0x1>
    5e08:	20 93 3c 05 	sts	0x053C, r18	; 0x80053c <__brkval>
    5e0c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5e10:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5e14:	21 15       	cp	r18, r1
    5e16:	31 05       	cpc	r19, r1
    5e18:	41 f4       	brne	.+16     	; 0x5e2a <malloc+0xea>
    5e1a:	2d b7       	in	r18, 0x3d	; 61
    5e1c:	3e b7       	in	r19, 0x3e	; 62
    5e1e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5e22:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5e26:	24 1b       	sub	r18, r20
    5e28:	35 0b       	sbc	r19, r21
    5e2a:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <__brkval>
    5e2e:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <__brkval+0x1>
    5e32:	e2 17       	cp	r30, r18
    5e34:	f3 07       	cpc	r31, r19
    5e36:	a0 f4       	brcc	.+40     	; 0x5e60 <malloc+0x120>
    5e38:	2e 1b       	sub	r18, r30
    5e3a:	3f 0b       	sbc	r19, r31
    5e3c:	28 17       	cp	r18, r24
    5e3e:	39 07       	cpc	r19, r25
    5e40:	78 f0       	brcs	.+30     	; 0x5e60 <malloc+0x120>
    5e42:	ac 01       	movw	r20, r24
    5e44:	4e 5f       	subi	r20, 0xFE	; 254
    5e46:	5f 4f       	sbci	r21, 0xFF	; 255
    5e48:	24 17       	cp	r18, r20
    5e4a:	35 07       	cpc	r19, r21
    5e4c:	48 f0       	brcs	.+18     	; 0x5e60 <malloc+0x120>
    5e4e:	4e 0f       	add	r20, r30
    5e50:	5f 1f       	adc	r21, r31
    5e52:	50 93 3d 05 	sts	0x053D, r21	; 0x80053d <__brkval+0x1>
    5e56:	40 93 3c 05 	sts	0x053C, r20	; 0x80053c <__brkval>
    5e5a:	81 93       	st	Z+, r24
    5e5c:	91 93       	st	Z+, r25
    5e5e:	02 c0       	rjmp	.+4      	; 0x5e64 <malloc+0x124>
    5e60:	e0 e0       	ldi	r30, 0x00	; 0
    5e62:	f0 e0       	ldi	r31, 0x00	; 0
    5e64:	cf 01       	movw	r24, r30
    5e66:	df 91       	pop	r29
    5e68:	cf 91       	pop	r28
    5e6a:	1f 91       	pop	r17
    5e6c:	0f 91       	pop	r16
    5e6e:	08 95       	ret

00005e70 <free>:
    5e70:	cf 93       	push	r28
    5e72:	df 93       	push	r29
    5e74:	00 97       	sbiw	r24, 0x00	; 0
    5e76:	09 f4       	brne	.+2      	; 0x5e7a <free+0xa>
    5e78:	81 c0       	rjmp	.+258    	; 0x5f7c <free+0x10c>
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	32 97       	sbiw	r30, 0x02	; 2
    5e7e:	13 82       	std	Z+3, r1	; 0x03
    5e80:	12 82       	std	Z+2, r1	; 0x02
    5e82:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <__flp>
    5e86:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <__flp+0x1>
    5e8a:	10 97       	sbiw	r26, 0x00	; 0
    5e8c:	81 f4       	brne	.+32     	; 0x5eae <free+0x3e>
    5e8e:	20 81       	ld	r18, Z
    5e90:	31 81       	ldd	r19, Z+1	; 0x01
    5e92:	82 0f       	add	r24, r18
    5e94:	93 1f       	adc	r25, r19
    5e96:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <__brkval>
    5e9a:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <__brkval+0x1>
    5e9e:	28 17       	cp	r18, r24
    5ea0:	39 07       	cpc	r19, r25
    5ea2:	51 f5       	brne	.+84     	; 0x5ef8 <free+0x88>
    5ea4:	f0 93 3d 05 	sts	0x053D, r31	; 0x80053d <__brkval+0x1>
    5ea8:	e0 93 3c 05 	sts	0x053C, r30	; 0x80053c <__brkval>
    5eac:	67 c0       	rjmp	.+206    	; 0x5f7c <free+0x10c>
    5eae:	ed 01       	movw	r28, r26
    5eb0:	20 e0       	ldi	r18, 0x00	; 0
    5eb2:	30 e0       	ldi	r19, 0x00	; 0
    5eb4:	ce 17       	cp	r28, r30
    5eb6:	df 07       	cpc	r29, r31
    5eb8:	40 f4       	brcc	.+16     	; 0x5eca <free+0x5a>
    5eba:	4a 81       	ldd	r20, Y+2	; 0x02
    5ebc:	5b 81       	ldd	r21, Y+3	; 0x03
    5ebe:	9e 01       	movw	r18, r28
    5ec0:	41 15       	cp	r20, r1
    5ec2:	51 05       	cpc	r21, r1
    5ec4:	f1 f0       	breq	.+60     	; 0x5f02 <free+0x92>
    5ec6:	ea 01       	movw	r28, r20
    5ec8:	f5 cf       	rjmp	.-22     	; 0x5eb4 <free+0x44>
    5eca:	d3 83       	std	Z+3, r29	; 0x03
    5ecc:	c2 83       	std	Z+2, r28	; 0x02
    5ece:	40 81       	ld	r20, Z
    5ed0:	51 81       	ldd	r21, Z+1	; 0x01
    5ed2:	84 0f       	add	r24, r20
    5ed4:	95 1f       	adc	r25, r21
    5ed6:	c8 17       	cp	r28, r24
    5ed8:	d9 07       	cpc	r29, r25
    5eda:	59 f4       	brne	.+22     	; 0x5ef2 <free+0x82>
    5edc:	88 81       	ld	r24, Y
    5ede:	99 81       	ldd	r25, Y+1	; 0x01
    5ee0:	84 0f       	add	r24, r20
    5ee2:	95 1f       	adc	r25, r21
    5ee4:	02 96       	adiw	r24, 0x02	; 2
    5ee6:	91 83       	std	Z+1, r25	; 0x01
    5ee8:	80 83       	st	Z, r24
    5eea:	8a 81       	ldd	r24, Y+2	; 0x02
    5eec:	9b 81       	ldd	r25, Y+3	; 0x03
    5eee:	93 83       	std	Z+3, r25	; 0x03
    5ef0:	82 83       	std	Z+2, r24	; 0x02
    5ef2:	21 15       	cp	r18, r1
    5ef4:	31 05       	cpc	r19, r1
    5ef6:	29 f4       	brne	.+10     	; 0x5f02 <free+0x92>
    5ef8:	f0 93 3f 05 	sts	0x053F, r31	; 0x80053f <__flp+0x1>
    5efc:	e0 93 3e 05 	sts	0x053E, r30	; 0x80053e <__flp>
    5f00:	3d c0       	rjmp	.+122    	; 0x5f7c <free+0x10c>
    5f02:	e9 01       	movw	r28, r18
    5f04:	fb 83       	std	Y+3, r31	; 0x03
    5f06:	ea 83       	std	Y+2, r30	; 0x02
    5f08:	49 91       	ld	r20, Y+
    5f0a:	59 91       	ld	r21, Y+
    5f0c:	c4 0f       	add	r28, r20
    5f0e:	d5 1f       	adc	r29, r21
    5f10:	ec 17       	cp	r30, r28
    5f12:	fd 07       	cpc	r31, r29
    5f14:	61 f4       	brne	.+24     	; 0x5f2e <free+0xbe>
    5f16:	80 81       	ld	r24, Z
    5f18:	91 81       	ldd	r25, Z+1	; 0x01
    5f1a:	84 0f       	add	r24, r20
    5f1c:	95 1f       	adc	r25, r21
    5f1e:	02 96       	adiw	r24, 0x02	; 2
    5f20:	e9 01       	movw	r28, r18
    5f22:	99 83       	std	Y+1, r25	; 0x01
    5f24:	88 83       	st	Y, r24
    5f26:	82 81       	ldd	r24, Z+2	; 0x02
    5f28:	93 81       	ldd	r25, Z+3	; 0x03
    5f2a:	9b 83       	std	Y+3, r25	; 0x03
    5f2c:	8a 83       	std	Y+2, r24	; 0x02
    5f2e:	e0 e0       	ldi	r30, 0x00	; 0
    5f30:	f0 e0       	ldi	r31, 0x00	; 0
    5f32:	12 96       	adiw	r26, 0x02	; 2
    5f34:	8d 91       	ld	r24, X+
    5f36:	9c 91       	ld	r25, X
    5f38:	13 97       	sbiw	r26, 0x03	; 3
    5f3a:	00 97       	sbiw	r24, 0x00	; 0
    5f3c:	19 f0       	breq	.+6      	; 0x5f44 <free+0xd4>
    5f3e:	fd 01       	movw	r30, r26
    5f40:	dc 01       	movw	r26, r24
    5f42:	f7 cf       	rjmp	.-18     	; 0x5f32 <free+0xc2>
    5f44:	8d 91       	ld	r24, X+
    5f46:	9c 91       	ld	r25, X
    5f48:	11 97       	sbiw	r26, 0x01	; 1
    5f4a:	9d 01       	movw	r18, r26
    5f4c:	2e 5f       	subi	r18, 0xFE	; 254
    5f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f50:	82 0f       	add	r24, r18
    5f52:	93 1f       	adc	r25, r19
    5f54:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <__brkval>
    5f58:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <__brkval+0x1>
    5f5c:	28 17       	cp	r18, r24
    5f5e:	39 07       	cpc	r19, r25
    5f60:	69 f4       	brne	.+26     	; 0x5f7c <free+0x10c>
    5f62:	30 97       	sbiw	r30, 0x00	; 0
    5f64:	29 f4       	brne	.+10     	; 0x5f70 <free+0x100>
    5f66:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <__flp+0x1>
    5f6a:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <__flp>
    5f6e:	02 c0       	rjmp	.+4      	; 0x5f74 <free+0x104>
    5f70:	13 82       	std	Z+3, r1	; 0x03
    5f72:	12 82       	std	Z+2, r1	; 0x02
    5f74:	b0 93 3d 05 	sts	0x053D, r27	; 0x80053d <__brkval+0x1>
    5f78:	a0 93 3c 05 	sts	0x053C, r26	; 0x80053c <__brkval>
    5f7c:	df 91       	pop	r29
    5f7e:	cf 91       	pop	r28
    5f80:	08 95       	ret

00005f82 <realloc>:
    5f82:	6f 92       	push	r6
    5f84:	7f 92       	push	r7
    5f86:	8f 92       	push	r8
    5f88:	9f 92       	push	r9
    5f8a:	af 92       	push	r10
    5f8c:	bf 92       	push	r11
    5f8e:	cf 92       	push	r12
    5f90:	df 92       	push	r13
    5f92:	ef 92       	push	r14
    5f94:	ff 92       	push	r15
    5f96:	0f 93       	push	r16
    5f98:	1f 93       	push	r17
    5f9a:	cf 93       	push	r28
    5f9c:	df 93       	push	r29
    5f9e:	00 97       	sbiw	r24, 0x00	; 0
    5fa0:	81 f4       	brne	.+32     	; 0x5fc2 <realloc+0x40>
    5fa2:	cb 01       	movw	r24, r22
    5fa4:	df 91       	pop	r29
    5fa6:	cf 91       	pop	r28
    5fa8:	1f 91       	pop	r17
    5faa:	0f 91       	pop	r16
    5fac:	ff 90       	pop	r15
    5fae:	ef 90       	pop	r14
    5fb0:	df 90       	pop	r13
    5fb2:	cf 90       	pop	r12
    5fb4:	bf 90       	pop	r11
    5fb6:	af 90       	pop	r10
    5fb8:	9f 90       	pop	r9
    5fba:	8f 90       	pop	r8
    5fbc:	7f 90       	pop	r7
    5fbe:	6f 90       	pop	r6
    5fc0:	bf ce       	rjmp	.-642    	; 0x5d40 <malloc>
    5fc2:	fc 01       	movw	r30, r24
    5fc4:	e6 0f       	add	r30, r22
    5fc6:	f7 1f       	adc	r31, r23
    5fc8:	9c 01       	movw	r18, r24
    5fca:	22 50       	subi	r18, 0x02	; 2
    5fcc:	31 09       	sbc	r19, r1
    5fce:	e2 17       	cp	r30, r18
    5fd0:	f3 07       	cpc	r31, r19
    5fd2:	08 f4       	brcc	.+2      	; 0x5fd6 <realloc+0x54>
    5fd4:	a5 c0       	rjmp	.+330    	; 0x6120 <realloc+0x19e>
    5fd6:	ec 01       	movw	r28, r24
    5fd8:	d9 01       	movw	r26, r18
    5fda:	0d 91       	ld	r16, X+
    5fdc:	1c 91       	ld	r17, X
    5fde:	11 97       	sbiw	r26, 0x01	; 1
    5fe0:	06 17       	cp	r16, r22
    5fe2:	17 07       	cpc	r17, r23
    5fe4:	a8 f0       	brcs	.+42     	; 0x6010 <realloc+0x8e>
    5fe6:	05 30       	cpi	r16, 0x05	; 5
    5fe8:	11 05       	cpc	r17, r1
    5fea:	08 f4       	brcc	.+2      	; 0x5fee <realloc+0x6c>
    5fec:	97 c0       	rjmp	.+302    	; 0x611c <realloc+0x19a>
    5fee:	c8 01       	movw	r24, r16
    5ff0:	04 97       	sbiw	r24, 0x04	; 4
    5ff2:	86 17       	cp	r24, r22
    5ff4:	97 07       	cpc	r25, r23
    5ff6:	08 f4       	brcc	.+2      	; 0x5ffa <realloc+0x78>
    5ff8:	91 c0       	rjmp	.+290    	; 0x611c <realloc+0x19a>
    5ffa:	02 50       	subi	r16, 0x02	; 2
    5ffc:	11 09       	sbc	r17, r1
    5ffe:	06 1b       	sub	r16, r22
    6000:	17 0b       	sbc	r17, r23
    6002:	01 93       	st	Z+, r16
    6004:	11 93       	st	Z+, r17
    6006:	6d 93       	st	X+, r22
    6008:	7c 93       	st	X, r23
    600a:	cf 01       	movw	r24, r30
    600c:	31 df       	rcall	.-414    	; 0x5e70 <free>
    600e:	86 c0       	rjmp	.+268    	; 0x611c <realloc+0x19a>
    6010:	5b 01       	movw	r10, r22
    6012:	a0 1a       	sub	r10, r16
    6014:	b1 0a       	sbc	r11, r17
    6016:	4c 01       	movw	r8, r24
    6018:	80 0e       	add	r8, r16
    601a:	91 1e       	adc	r9, r17
    601c:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <__flp>
    6020:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <__flp+0x1>
    6024:	61 2c       	mov	r6, r1
    6026:	71 2c       	mov	r7, r1
    6028:	e1 2c       	mov	r14, r1
    602a:	f1 2c       	mov	r15, r1
    602c:	10 97       	sbiw	r26, 0x00	; 0
    602e:	09 f4       	brne	.+2      	; 0x6032 <realloc+0xb0>
    6030:	46 c0       	rjmp	.+140    	; 0x60be <realloc+0x13c>
    6032:	8d 91       	ld	r24, X+
    6034:	9c 91       	ld	r25, X
    6036:	11 97       	sbiw	r26, 0x01	; 1
    6038:	a8 15       	cp	r26, r8
    603a:	b9 05       	cpc	r27, r9
    603c:	b1 f5       	brne	.+108    	; 0x60aa <realloc+0x128>
    603e:	6c 01       	movw	r12, r24
    6040:	42 e0       	ldi	r20, 0x02	; 2
    6042:	c4 0e       	add	r12, r20
    6044:	d1 1c       	adc	r13, r1
    6046:	ca 14       	cp	r12, r10
    6048:	db 04       	cpc	r13, r11
    604a:	78 f1       	brcs	.+94     	; 0x60aa <realloc+0x128>
    604c:	4c 01       	movw	r8, r24
    604e:	8a 18       	sub	r8, r10
    6050:	9b 08       	sbc	r9, r11
    6052:	64 01       	movw	r12, r8
    6054:	42 e0       	ldi	r20, 0x02	; 2
    6056:	c4 0e       	add	r12, r20
    6058:	d1 1c       	adc	r13, r1
    605a:	12 96       	adiw	r26, 0x02	; 2
    605c:	bc 90       	ld	r11, X
    605e:	12 97       	sbiw	r26, 0x02	; 2
    6060:	13 96       	adiw	r26, 0x03	; 3
    6062:	ac 91       	ld	r26, X
    6064:	b5 e0       	ldi	r27, 0x05	; 5
    6066:	cb 16       	cp	r12, r27
    6068:	d1 04       	cpc	r13, r1
    606a:	40 f0       	brcs	.+16     	; 0x607c <realloc+0xfa>
    606c:	b2 82       	std	Z+2, r11	; 0x02
    606e:	a3 83       	std	Z+3, r26	; 0x03
    6070:	91 82       	std	Z+1, r9	; 0x01
    6072:	80 82       	st	Z, r8
    6074:	d9 01       	movw	r26, r18
    6076:	6d 93       	st	X+, r22
    6078:	7c 93       	st	X, r23
    607a:	09 c0       	rjmp	.+18     	; 0x608e <realloc+0x10c>
    607c:	0e 5f       	subi	r16, 0xFE	; 254
    607e:	1f 4f       	sbci	r17, 0xFF	; 255
    6080:	80 0f       	add	r24, r16
    6082:	91 1f       	adc	r25, r17
    6084:	f9 01       	movw	r30, r18
    6086:	91 83       	std	Z+1, r25	; 0x01
    6088:	80 83       	st	Z, r24
    608a:	eb 2d       	mov	r30, r11
    608c:	fa 2f       	mov	r31, r26
    608e:	e1 14       	cp	r14, r1
    6090:	f1 04       	cpc	r15, r1
    6092:	31 f0       	breq	.+12     	; 0x60a0 <realloc+0x11e>
    6094:	d7 01       	movw	r26, r14
    6096:	13 96       	adiw	r26, 0x03	; 3
    6098:	fc 93       	st	X, r31
    609a:	ee 93       	st	-X, r30
    609c:	12 97       	sbiw	r26, 0x02	; 2
    609e:	3e c0       	rjmp	.+124    	; 0x611c <realloc+0x19a>
    60a0:	f0 93 3f 05 	sts	0x053F, r31	; 0x80053f <__flp+0x1>
    60a4:	e0 93 3e 05 	sts	0x053E, r30	; 0x80053e <__flp>
    60a8:	39 c0       	rjmp	.+114    	; 0x611c <realloc+0x19a>
    60aa:	68 16       	cp	r6, r24
    60ac:	79 06       	cpc	r7, r25
    60ae:	08 f4       	brcc	.+2      	; 0x60b2 <realloc+0x130>
    60b0:	3c 01       	movw	r6, r24
    60b2:	7d 01       	movw	r14, r26
    60b4:	12 96       	adiw	r26, 0x02	; 2
    60b6:	0d 90       	ld	r0, X+
    60b8:	bc 91       	ld	r27, X
    60ba:	a0 2d       	mov	r26, r0
    60bc:	b7 cf       	rjmp	.-146    	; 0x602c <realloc+0xaa>
    60be:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <__brkval>
    60c2:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <__brkval+0x1>
    60c6:	88 16       	cp	r8, r24
    60c8:	99 06       	cpc	r9, r25
    60ca:	e1 f4       	brne	.+56     	; 0x6104 <realloc+0x182>
    60cc:	66 16       	cp	r6, r22
    60ce:	77 06       	cpc	r7, r23
    60d0:	c8 f4       	brcc	.+50     	; 0x6104 <realloc+0x182>
    60d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    60d6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    60da:	00 97       	sbiw	r24, 0x00	; 0
    60dc:	41 f4       	brne	.+16     	; 0x60ee <realloc+0x16c>
    60de:	8d b7       	in	r24, 0x3d	; 61
    60e0:	9e b7       	in	r25, 0x3e	; 62
    60e2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    60e6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    60ea:	84 1b       	sub	r24, r20
    60ec:	95 0b       	sbc	r25, r21
    60ee:	e8 17       	cp	r30, r24
    60f0:	f9 07       	cpc	r31, r25
    60f2:	b0 f4       	brcc	.+44     	; 0x6120 <realloc+0x19e>
    60f4:	f0 93 3d 05 	sts	0x053D, r31	; 0x80053d <__brkval+0x1>
    60f8:	e0 93 3c 05 	sts	0x053C, r30	; 0x80053c <__brkval>
    60fc:	f9 01       	movw	r30, r18
    60fe:	71 83       	std	Z+1, r23	; 0x01
    6100:	60 83       	st	Z, r22
    6102:	0c c0       	rjmp	.+24     	; 0x611c <realloc+0x19a>
    6104:	cb 01       	movw	r24, r22
    6106:	1c de       	rcall	.-968    	; 0x5d40 <malloc>
    6108:	7c 01       	movw	r14, r24
    610a:	00 97       	sbiw	r24, 0x00	; 0
    610c:	49 f0       	breq	.+18     	; 0x6120 <realloc+0x19e>
    610e:	a8 01       	movw	r20, r16
    6110:	be 01       	movw	r22, r28
    6112:	23 d0       	rcall	.+70     	; 0x615a <memcpy>
    6114:	ce 01       	movw	r24, r28
    6116:	ac de       	rcall	.-680    	; 0x5e70 <free>
    6118:	c7 01       	movw	r24, r14
    611a:	04 c0       	rjmp	.+8      	; 0x6124 <realloc+0x1a2>
    611c:	ce 01       	movw	r24, r28
    611e:	02 c0       	rjmp	.+4      	; 0x6124 <realloc+0x1a2>
    6120:	80 e0       	ldi	r24, 0x00	; 0
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	df 91       	pop	r29
    6126:	cf 91       	pop	r28
    6128:	1f 91       	pop	r17
    612a:	0f 91       	pop	r16
    612c:	ff 90       	pop	r15
    612e:	ef 90       	pop	r14
    6130:	df 90       	pop	r13
    6132:	cf 90       	pop	r12
    6134:	bf 90       	pop	r11
    6136:	af 90       	pop	r10
    6138:	9f 90       	pop	r9
    613a:	8f 90       	pop	r8
    613c:	7f 90       	pop	r7
    613e:	6f 90       	pop	r6
    6140:	08 95       	ret

00006142 <abort>:
    6142:	81 e0       	ldi	r24, 0x01	; 1
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	f8 94       	cli
    6148:	73 c0       	rjmp	.+230    	; 0x6230 <__do_global_dtors>

0000614a <toupper>:
    614a:	91 11       	cpse	r25, r1
    614c:	08 95       	ret
    614e:	81 56       	subi	r24, 0x61	; 97
    6150:	8a 51       	subi	r24, 0x1A	; 26
    6152:	08 f4       	brcc	.+2      	; 0x6156 <toupper+0xc>
    6154:	80 52       	subi	r24, 0x20	; 32
    6156:	85 58       	subi	r24, 0x85	; 133
    6158:	08 95       	ret

0000615a <memcpy>:
    615a:	fb 01       	movw	r30, r22
    615c:	dc 01       	movw	r26, r24
    615e:	02 c0       	rjmp	.+4      	; 0x6164 <memcpy+0xa>
    6160:	01 90       	ld	r0, Z+
    6162:	0d 92       	st	X+, r0
    6164:	41 50       	subi	r20, 0x01	; 1
    6166:	50 40       	sbci	r21, 0x00	; 0
    6168:	d8 f7       	brcc	.-10     	; 0x6160 <memcpy+0x6>
    616a:	08 95       	ret

0000616c <memset>:
    616c:	dc 01       	movw	r26, r24
    616e:	01 c0       	rjmp	.+2      	; 0x6172 <memset+0x6>
    6170:	6d 93       	st	X+, r22
    6172:	41 50       	subi	r20, 0x01	; 1
    6174:	50 40       	sbci	r21, 0x00	; 0
    6176:	e0 f7       	brcc	.-8      	; 0x6170 <memset+0x4>
    6178:	08 95       	ret

0000617a <strcmp>:
    617a:	fb 01       	movw	r30, r22
    617c:	dc 01       	movw	r26, r24
    617e:	8d 91       	ld	r24, X+
    6180:	01 90       	ld	r0, Z+
    6182:	80 19       	sub	r24, r0
    6184:	01 10       	cpse	r0, r1
    6186:	d9 f3       	breq	.-10     	; 0x617e <strcmp+0x4>
    6188:	99 0b       	sbc	r25, r25
    618a:	08 95       	ret

0000618c <strcpy>:
    618c:	fb 01       	movw	r30, r22
    618e:	dc 01       	movw	r26, r24
    6190:	01 90       	ld	r0, Z+
    6192:	0d 92       	st	X+, r0
    6194:	00 20       	and	r0, r0
    6196:	e1 f7       	brne	.-8      	; 0x6190 <strcpy+0x4>
    6198:	08 95       	ret

0000619a <strlen>:
    619a:	fc 01       	movw	r30, r24
    619c:	01 90       	ld	r0, Z+
    619e:	00 20       	and	r0, r0
    61a0:	e9 f7       	brne	.-6      	; 0x619c <strlen+0x2>
    61a2:	80 95       	com	r24
    61a4:	90 95       	com	r25
    61a6:	8e 0f       	add	r24, r30
    61a8:	9f 1f       	adc	r25, r31
    61aa:	08 95       	ret

000061ac <strncpy>:
    61ac:	fb 01       	movw	r30, r22
    61ae:	dc 01       	movw	r26, r24
    61b0:	41 50       	subi	r20, 0x01	; 1
    61b2:	50 40       	sbci	r21, 0x00	; 0
    61b4:	48 f0       	brcs	.+18     	; 0x61c8 <strncpy+0x1c>
    61b6:	01 90       	ld	r0, Z+
    61b8:	0d 92       	st	X+, r0
    61ba:	00 20       	and	r0, r0
    61bc:	c9 f7       	brne	.-14     	; 0x61b0 <strncpy+0x4>
    61be:	01 c0       	rjmp	.+2      	; 0x61c2 <strncpy+0x16>
    61c0:	1d 92       	st	X+, r1
    61c2:	41 50       	subi	r20, 0x01	; 1
    61c4:	50 40       	sbci	r21, 0x00	; 0
    61c6:	e0 f7       	brcc	.-8      	; 0x61c0 <strncpy+0x14>
    61c8:	08 95       	ret

000061ca <utoa>:
    61ca:	45 32       	cpi	r20, 0x25	; 37
    61cc:	51 05       	cpc	r21, r1
    61ce:	18 f4       	brcc	.+6      	; 0x61d6 <utoa+0xc>
    61d0:	42 30       	cpi	r20, 0x02	; 2
    61d2:	08 f0       	brcs	.+2      	; 0x61d6 <utoa+0xc>
    61d4:	04 c0       	rjmp	.+8      	; 0x61de <__utoa_ncheck>
    61d6:	fb 01       	movw	r30, r22
    61d8:	10 82       	st	Z, r1
    61da:	cb 01       	movw	r24, r22
    61dc:	08 95       	ret

000061de <__utoa_ncheck>:
    61de:	bb 27       	eor	r27, r27

000061e0 <__utoa_common>:
    61e0:	fb 01       	movw	r30, r22
    61e2:	55 27       	eor	r21, r21
    61e4:	aa 27       	eor	r26, r26
    61e6:	88 0f       	add	r24, r24
    61e8:	99 1f       	adc	r25, r25
    61ea:	aa 1f       	adc	r26, r26
    61ec:	a4 17       	cp	r26, r20
    61ee:	10 f0       	brcs	.+4      	; 0x61f4 <__utoa_common+0x14>
    61f0:	a4 1b       	sub	r26, r20
    61f2:	83 95       	inc	r24
    61f4:	50 51       	subi	r21, 0x10	; 16
    61f6:	b9 f7       	brne	.-18     	; 0x61e6 <__utoa_common+0x6>
    61f8:	a0 5d       	subi	r26, 0xD0	; 208
    61fa:	aa 33       	cpi	r26, 0x3A	; 58
    61fc:	08 f0       	brcs	.+2      	; 0x6200 <__utoa_common+0x20>
    61fe:	a9 5d       	subi	r26, 0xD9	; 217
    6200:	a1 93       	st	Z+, r26
    6202:	00 97       	sbiw	r24, 0x00	; 0
    6204:	79 f7       	brne	.-34     	; 0x61e4 <__utoa_common+0x4>
    6206:	b1 11       	cpse	r27, r1
    6208:	b1 93       	st	Z+, r27
    620a:	11 92       	st	Z+, r1
    620c:	cb 01       	movw	r24, r22
    620e:	00 c0       	rjmp	.+0      	; 0x6210 <strrev>

00006210 <strrev>:
    6210:	dc 01       	movw	r26, r24
    6212:	fc 01       	movw	r30, r24
    6214:	67 2f       	mov	r22, r23
    6216:	71 91       	ld	r23, Z+
    6218:	77 23       	and	r23, r23
    621a:	e1 f7       	brne	.-8      	; 0x6214 <strrev+0x4>
    621c:	32 97       	sbiw	r30, 0x02	; 2
    621e:	04 c0       	rjmp	.+8      	; 0x6228 <strrev+0x18>
    6220:	7c 91       	ld	r23, X
    6222:	6d 93       	st	X+, r22
    6224:	70 83       	st	Z, r23
    6226:	62 91       	ld	r22, -Z
    6228:	ae 17       	cp	r26, r30
    622a:	bf 07       	cpc	r27, r31
    622c:	c8 f3       	brcs	.-14     	; 0x6220 <strrev+0x10>
    622e:	08 95       	ret

00006230 <__do_global_dtors>:
    6230:	11 e0       	ldi	r17, 0x01	; 1
    6232:	c7 e1       	ldi	r28, 0x17	; 23
    6234:	d1 e0       	ldi	r29, 0x01	; 1
    6236:	00 e0       	ldi	r16, 0x00	; 0
    6238:	05 c0       	rjmp	.+10     	; 0x6244 <__do_global_dtors+0x14>
    623a:	80 2f       	mov	r24, r16
    623c:	fe 01       	movw	r30, r28
    623e:	5f dd       	rcall	.-1346   	; 0x5cfe <__tablejump2__>
    6240:	21 96       	adiw	r28, 0x01	; 1
    6242:	01 1d       	adc	r16, r1
    6244:	c8 31       	cpi	r28, 0x18	; 24
    6246:	d1 07       	cpc	r29, r17
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	08 07       	cpc	r16, r24
    624c:	b1 f7       	brne	.-20     	; 0x623a <__do_global_dtors+0xa>
    624e:	f8 94       	cli

00006250 <__stop_program>:
    6250:	ff cf       	rjmp	.-2      	; 0x6250 <__stop_program>
