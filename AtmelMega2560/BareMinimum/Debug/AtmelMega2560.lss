
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800200  00003f02  00003f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000252  008002b6  008002b6  0000404c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001b2d8  00000000  00000000  00004c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004770  00000000  00000000  0001feec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006979  00000000  00000000  0002465c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a44  00000000  00000000  0002afd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005689  00000000  00000000  0002da1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f525  00000000  00000000  000330a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb0  00000000  00000000  000425ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c1       	rjmp	.+556    	; 0x22e <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c1       	rjmp	.+614    	; 0x290 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2f c1       	rjmp	.+606    	; 0x290 <__bad_interrupt>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_17>
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_23>
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__vector_25>
      68:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__vector_26>
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_32>
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ff c0       	rjmp	.+510    	; 0x290 <__bad_interrupt>
      92:	00 00       	nop
      94:	fd c0       	rjmp	.+506    	; 0x290 <__bad_interrupt>
      96:	00 00       	nop
      98:	fb c0       	rjmp	.+502    	; 0x290 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_39>
      a0:	f7 c0       	rjmp	.+494    	; 0x290 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f5 c0       	rjmp	.+490    	; 0x290 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_42>
      ac:	f1 c0       	rjmp	.+482    	; 0x290 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ef c0       	rjmp	.+478    	; 0x290 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ed c0       	rjmp	.+474    	; 0x290 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	eb c0       	rjmp	.+470    	; 0x290 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_47>
      c0:	e7 c0       	rjmp	.+462    	; 0x290 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e5 c0       	rjmp	.+458    	; 0x290 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e3 c0       	rjmp	.+454    	; 0x290 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e1 c0       	rjmp	.+450    	; 0x290 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	df c0       	rjmp	.+446    	; 0x290 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	dd c0       	rjmp	.+442    	; 0x290 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	db c0       	rjmp	.+438    	; 0x290 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d9 c0       	rjmp	.+434    	; 0x290 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d7 c0       	rjmp	.+430    	; 0x290 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	32 1a       	sub	r3, r18
      e6:	35 1a       	sub	r3, r21
      e8:	24 1a       	sub	r2, r20
      ea:	28 1a       	sub	r2, r24
      ec:	2e 1a       	sub	r2, r30
      ee:	6c 1a       	sub	r6, r28
      f0:	39 1a       	sub	r3, r25
      f2:	3d 1a       	sub	r3, r29
      f4:	43 1a       	sub	r4, r19
      f6:	47 1a       	sub	r4, r23
      f8:	4b 1a       	sub	r4, r27
      fa:	51 1a       	sub	r5, r17
      fc:	55 1a       	sub	r5, r21
      fe:	59 1a       	sub	r5, r25
     100:	6c 1a       	sub	r6, r28
     102:	5f 1a       	sub	r5, r31
     104:	63 1a       	sub	r6, r19
     106:	67 1a       	sub	r6, r23

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	2f 03       	fmul	r18, r23
     22a:	8b 14       	cp	r8, r11
     22c:	10 18       	sub	r1, r0

0000022e <__ctors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d1 e2       	ldi	r29, 0x21	; 33
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	0c bf       	out	0x3c, r16	; 60

0000023e <__do_copy_data>:
     23e:	12 e0       	ldi	r17, 0x02	; 2
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	e2 e0       	ldi	r30, 0x02	; 2
     246:	ff e3       	ldi	r31, 0x3F	; 63
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	0b bf       	out	0x3b, r16	; 59
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x14>
     24e:	07 90       	elpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a6 3b       	cpi	r26, 0xB6	; 182
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0x10>

00000258 <__do_clear_bss>:
     258:	25 e0       	ldi	r18, 0x05	; 5
     25a:	a6 eb       	ldi	r26, 0xB6	; 182
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a8 30       	cpi	r26, 0x08	; 8
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>

00000268 <__do_global_ctors>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	c7 e1       	ldi	r28, 0x17	; 23
     26c:	d1 e0       	ldi	r29, 0x01	; 1
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	06 c0       	rjmp	.+12     	; 0x27e <__do_global_ctors+0x16>
     272:	21 97       	sbiw	r28, 0x01	; 1
     274:	01 09       	sbc	r16, r1
     276:	80 2f       	mov	r24, r16
     278:	fe 01       	movw	r30, r28
     27a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__tablejump2__>
     27e:	c4 31       	cpi	r28, 0x14	; 20
     280:	d1 07       	cpc	r29, r17
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 07       	cpc	r16, r24
     286:	a9 f7       	brne	.-22     	; 0x272 <__do_global_ctors+0xa>
     288:	0e 94 3e 18 	call	0x307c	; 0x307c <main>
     28c:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     292:	08 95       	ret

00000294 <setup>:
	else if (soundMode == 3)
	{
		digitalWrite(10, HIGH); // start alarm
	}
	delay(100);
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	e1 97       	sbiw	r28, 0x31	; 49
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	26 e0       	ldi	r18, 0x06	; 6
     2b2:	40 e8       	ldi	r20, 0x80	; 128
     2b4:	55 e2       	ldi	r21, 0x25	; 37
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	8e e5       	ldi	r24, 0x5E	; 94
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN14HardwareSerial5beginEmh>
     2c2:	88 e0       	ldi	r24, 0x08	; 8
     2c4:	94 e0       	ldi	r25, 0x04	; 4
     2c6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN7TwoWire5beginEv>
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	8a e0       	ldi	r24, 0x0A	; 10
     2ce:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	8a e0       	ldi	r24, 0x0A	; 10
     2d6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     2da:	88 e0       	ldi	r24, 0x08	; 8
     2dc:	e8 2e       	mov	r14, r24
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	f8 2e       	mov	r15, r24
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	f7 01       	movw	r30, r14
     2e6:	80 81       	ld	r24, Z
     2e8:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
     2ec:	06 e0       	ldi	r16, 0x06	; 6
     2ee:	12 e0       	ldi	r17, 0x02	; 2
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	f8 01       	movw	r30, r16
     2f4:	80 81       	ld	r24, Z
     2f6:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	f7 01       	movw	r30, r14
     2fe:	80 81       	ld	r24, Z
     300:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	f8 01       	movw	r30, r16
     308:	80 81       	ld	r24, Z
     30a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     30e:	85 ed       	ldi	r24, 0xD5	; 213
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	aa d5       	rcall	.+2900   	; 0xe68 <_ZN11DHT_Unified5beginEv>
     314:	05 ed       	ldi	r16, 0xD5	; 213
     316:	12 e0       	ldi	r17, 0x02	; 2
     318:	f8 01       	movw	r30, r16
     31a:	86 89       	ldd	r24, Z+22	; 0x16
     31c:	8b a7       	std	Y+43, r24	; 0x2b
     31e:	8a e6       	ldi	r24, 0x6A	; 106
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	9a a7       	std	Y+42, r25	; 0x2a
     324:	89 a7       	std	Y+41, r24	; 0x29
     326:	87 89       	ldd	r24, Z+23	; 0x17
     328:	90 8d       	ldd	r25, Z+24	; 0x18
     32a:	9d a7       	std	Y+45, r25	; 0x2d
     32c:	8c a7       	std	Y+44, r24	; 0x2c
     32e:	81 8d       	ldd	r24, Z+25	; 0x19
     330:	92 8d       	ldd	r25, Z+26	; 0x1a
     332:	a3 8d       	ldd	r26, Z+27	; 0x1b
     334:	b4 8d       	ldd	r27, Z+28	; 0x1c
     336:	8e a7       	std	Y+46, r24	; 0x2e
     338:	9f a7       	std	Y+47, r25	; 0x2f
     33a:	a8 ab       	std	Y+48, r26	; 0x30
     33c:	b9 ab       	std	Y+49, r27	; 0x31
     33e:	be 01       	movw	r22, r28
     340:	6f 5f       	subi	r22, 0xFF	; 255
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	ce 01       	movw	r24, r28
     346:	89 96       	adiw	r24, 0x29	; 41
     348:	d5 d5       	rcall	.+2986   	; 0xef4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     34a:	f8 01       	movw	r30, r16
     34c:	87 8d       	ldd	r24, Z+31	; 0x1f
     34e:	8b a7       	std	Y+43, r24	; 0x2b
     350:	88 e7       	ldi	r24, 0x78	; 120
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	9a a7       	std	Y+42, r25	; 0x2a
     356:	89 a7       	std	Y+41, r24	; 0x29
     358:	80 a1       	ldd	r24, Z+32	; 0x20
     35a:	91 a1       	ldd	r25, Z+33	; 0x21
     35c:	9d a7       	std	Y+45, r25	; 0x2d
     35e:	8c a7       	std	Y+44, r24	; 0x2c
     360:	82 a1       	ldd	r24, Z+34	; 0x22
     362:	93 a1       	ldd	r25, Z+35	; 0x23
     364:	a4 a1       	ldd	r26, Z+36	; 0x24
     366:	b5 a1       	ldd	r27, Z+37	; 0x25
     368:	8e a7       	std	Y+46, r24	; 0x2e
     36a:	9f a7       	std	Y+47, r25	; 0x2f
     36c:	a8 ab       	std	Y+48, r26	; 0x30
     36e:	b9 ab       	std	Y+49, r27	; 0x31
     370:	be 01       	movw	r22, r28
     372:	6f 5f       	subi	r22, 0xFF	; 255
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	ce 01       	movw	r24, r28
     378:	89 96       	adiw	r24, 0x29	; 41
     37a:	4d d6       	rcall	.+3226   	; 0x1016 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     37c:	6d a1       	ldd	r22, Y+37	; 0x25
     37e:	7e a1       	ldd	r23, Y+38	; 0x26
     380:	8f a1       	ldd	r24, Y+39	; 0x27
     382:	98 a5       	ldd	r25, Y+40	; 0x28
     384:	28 ee       	ldi	r18, 0xE8	; 232
     386:	33 e0       	ldi	r19, 0x03	; 3
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__divmodsi4>
     390:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <delayMS>
     394:	30 93 d2 02 	sts	0x02D2, r19	; 0x8002d2 <delayMS+0x1>
     398:	40 93 d3 02 	sts	0x02D3, r20	; 0x8002d3 <delayMS+0x2>
     39c:	50 93 d4 02 	sts	0x02D4, r21	; 0x8002d4 <delayMS+0x3>
     3a0:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN8SPIClass5beginEv>
     3a4:	8f eb       	ldi	r24, 0xBF	; 191
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN7MFRC5228PCD_InitEv>
     3ac:	e9 eb       	ldi	r30, 0xB9	; 185
     3ae:	f2 e0       	ldi	r31, 0x02	; 2
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	80 83       	st	Z, r24
     3b4:	81 83       	std	Z+1, r24	; 0x01
     3b6:	82 83       	std	Z+2, r24	; 0x02
     3b8:	83 83       	std	Z+3, r24	; 0x03
     3ba:	84 83       	std	Z+4, r24	; 0x04
     3bc:	85 83       	std	Z+5, r24	; 0x05
     3be:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <Servo_pin>
     3c2:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <Servo_pin+0x1>
     3c6:	86 eb       	ldi	r24, 0xB6	; 182
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN5Servo6attachEi>
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	86 eb       	ldi	r24, 0xB6	; 182
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN5Servo5writeEi>
     3da:	e1 96       	adiw	r28, 0x31	; 49
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <_Z13RfidValidaterv>:
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	2c 97       	sbiw	r28, 0x0c	; 12
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	8f eb       	ldi	r24, 0xBF	; 191
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     416:	88 23       	and	r24, r24
     418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	8e c0       	rjmp	.+284    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     41c:	8f eb       	ldi	r24, 0xBF	; 191
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     424:	88 23       	and	r24, r24
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	87 c0       	rjmp	.+270    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     42a:	68 ea       	ldi	r22, 0xA8	; 168
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	ce 01       	movw	r24, r28
     430:	07 96       	adiw	r24, 0x07	; 7
     432:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_ZN6StringC1EPKc>
     436:	f1 2c       	mov	r15, r1
     438:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <mfrc522>
     43c:	f8 16       	cp	r15, r24
     43e:	08 f0       	brcs	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	45 c0       	rjmp	.+138    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     442:	0f 2d       	mov	r16, r15
     444:	10 e0       	ldi	r17, 0x00	; 0
     446:	01 54       	subi	r16, 0x41	; 65
     448:	1d 4f       	sbci	r17, 0xFD	; 253
     44a:	f8 01       	movw	r30, r16
     44c:	81 81       	ldd	r24, Z+1	; 0x01
     44e:	80 31       	cpi	r24, 0x10	; 16
     450:	18 f0       	brcs	.+6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     452:	67 e4       	ldi	r22, 0x47	; 71
     454:	72 e0       	ldi	r23, 0x02	; 2
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     458:	6c e0       	ldi	r22, 0x0C	; 12
     45a:	72 e0       	ldi	r23, 0x02	; 2
     45c:	8e e5       	ldi	r24, 0x5E	; 94
     45e:	94 e0       	ldi	r25, 0x04	; 4
     460:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN5Print5printEPKc>
     464:	40 e1       	ldi	r20, 0x10	; 16
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	f8 01       	movw	r30, r16
     46a:	61 81       	ldd	r22, Z+1	; 0x01
     46c:	8e e5       	ldi	r24, 0x5E	; 94
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_ZN5Print5printEhi>
     474:	f8 01       	movw	r30, r16
     476:	81 81       	ldd	r24, Z+1	; 0x01
     478:	80 31       	cpi	r24, 0x10	; 16
     47a:	18 f0       	brcs	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47c:	67 e4       	ldi	r22, 0x47	; 71
     47e:	72 e0       	ldi	r23, 0x02	; 2
     480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	6c e0       	ldi	r22, 0x0C	; 12
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	ce 01       	movw	r24, r28
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_ZN6StringC1EPKc>
     48e:	be 01       	movw	r22, r28
     490:	6f 5f       	subi	r22, 0xFF	; 255
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	ce 01       	movw	r24, r28
     496:	07 96       	adiw	r24, 0x07	; 7
     498:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN6String6concatERKS_>
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	0e 94 3e 1b 	call	0x367c	; 0x367c <_ZN6StringD1Ev>
     4a4:	40 e1       	ldi	r20, 0x10	; 16
     4a6:	f8 01       	movw	r30, r16
     4a8:	61 81       	ldd	r22, Z+1	; 0x01
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <_ZN6StringC1Ehh>
     4b2:	be 01       	movw	r22, r28
     4b4:	6f 5f       	subi	r22, 0xFF	; 255
     4b6:	7f 4f       	sbci	r23, 0xFF	; 255
     4b8:	ce 01       	movw	r24, r28
     4ba:	07 96       	adiw	r24, 0x07	; 7
     4bc:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN6String6concatERKS_>
     4c0:	ce 01       	movw	r24, r28
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	0e 94 3e 1b 	call	0x367c	; 0x367c <_ZN6StringD1Ev>
     4c8:	f3 94       	inc	r15
     4ca:	b6 cf       	rjmp	.-148    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     4cc:	ce 01       	movw	r24, r28
     4ce:	07 96       	adiw	r24, 0x07	; 7
     4d0:	0e 94 8f 1c 	call	0x391e	; 0x391e <_ZN6String11toUpperCaseEv>
     4d4:	2b 85       	ldd	r18, Y+11	; 0x0b
     4d6:	3c 85       	ldd	r19, Y+12	; 0x0c
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	be 01       	movw	r22, r28
     4de:	69 5f       	subi	r22, 0xF9	; 249
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_ZNK6String9substringEjj>
     4ea:	6f e0       	ldi	r22, 0x0F	; 15
     4ec:	72 e0       	ldi	r23, 0x02	; 2
     4ee:	ce 01       	movw	r24, r28
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	0e 94 2e 1c 	call	0x385c	; 0x385c <_ZNK6String6equalsEPKc>
     4f6:	18 2f       	mov	r17, r24
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	0e 94 3e 1b 	call	0x367c	; 0x367c <_ZN6StringD1Ev>
     500:	11 23       	and	r17, r17
     502:	69 f0       	breq	.+26     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     504:	6b e1       	ldi	r22, 0x1B	; 27
     506:	72 e0       	ldi	r23, 0x02	; 2
     508:	8e e5       	ldi	r24, 0x5E	; 94
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN5Print7printlnEPKc>
     510:	8e e5       	ldi	r24, 0x5E	; 94
     512:	94 e0       	ldi	r25, 0x04	; 4
     514:	0e 94 8b 18 	call	0x3116	; 0x3116 <_ZN5Print7printlnEv>
     518:	01 e0       	ldi	r16, 0x01	; 1
     51a:	10 e0       	ldi	r17, 0x00	; 0
     51c:	08 c0       	rjmp	.+16     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     51e:	6d e2       	ldi	r22, 0x2D	; 45
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	8e e5       	ldi	r24, 0x5E	; 94
     524:	94 e0       	ldi	r25, 0x04	; 4
     526:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN5Print7printlnEPKc>
     52a:	0f ef       	ldi	r16, 0xFF	; 255
     52c:	1f ef       	ldi	r17, 0xFF	; 255
     52e:	ce 01       	movw	r24, r28
     530:	07 96       	adiw	r24, 0x07	; 7
     532:	0e 94 3e 1b 	call	0x367c	; 0x367c <_ZN6StringD1Ev>
     536:	08 c0       	rjmp	.+16     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     538:	62 e3       	ldi	r22, 0x32	; 50
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	c8 01       	movw	r24, r16
     54a:	2c 96       	adiw	r28, 0x0c	; 12
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	08 95       	ret

00000562 <_Z14SwitchRfidLedsv>:
     562:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     566:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <RFID_GREEN_LED+0x1>
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	49 f4       	brne	.+18     	; 0x580 <_Z14SwitchRfidLedsv+0x1e>
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RFID_RED_LED>
     57c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     580:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RFID_RED_LED>
     584:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <RFID_RED_LED+0x1>
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	51 f4       	brne	.+20     	; 0x5a0 <_Z14SwitchRfidLedsv+0x3e>
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RFID_GREEN_LED>
     592:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RFID_RED_LED>
     59c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     5a0:	64 e6       	ldi	r22, 0x64	; 100
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <delay>

000005ac <_Z9moveServov>:
     5ac:	86 eb       	ldi	r24, 0xB6	; 182
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN5Servo4readEv>
     5b4:	84 3b       	cpi	r24, 0xB4	; 180
     5b6:	91 05       	cpc	r25, r1
     5b8:	41 f4       	brne	.+16     	; 0x5ca <_Z9moveServov+0x1e>
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Servo_pin>
     5c0:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	0b c0       	rjmp	.+22     	; 0x5e0 <_Z9moveServov+0x34>
     5ca:	86 eb       	ldi	r24, 0xB6	; 182
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN5Servo4readEv>
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Servo_pin>
     5d8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     5dc:	64 eb       	ldi	r22, 0xB4	; 180
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	86 eb       	ldi	r24, 0xB6	; 182
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN5Servo5writeEi>
     5e8:	64 e6       	ldi	r22, 0x64	; 100
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <delay>

000005f4 <_Z12makeBipSoundi>:
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	91 05       	cpc	r25, r1
     5f8:	49 f4       	brne	.+18     	; 0x60c <_Z12makeBipSoundi+0x18>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8a e0       	ldi	r24, 0x0A	; 10
     5fe:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     602:	64 e6       	ldi	r22, 0x64	; 100
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	19 c0       	rjmp	.+50     	; 0x63e <_Z12makeBipSoundi+0x4a>
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	91 05       	cpc	r25, r1
     610:	d1 f4       	brne	.+52     	; 0x646 <_Z12makeBipSoundi+0x52>
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	8a e0       	ldi	r24, 0x0A	; 10
     616:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     61a:	62 e3       	ldi	r22, 0x32	; 50
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	8a e0       	ldi	r24, 0x0A	; 10
     62a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     636:	62 e3       	ldi	r22, 0x32	; 50
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	03 c0       	rjmp	.+6      	; 0x64c <_Z12makeBipSoundi+0x58>
     646:	03 97       	sbiw	r24, 0x03	; 3
     648:	21 f4       	brne	.+8      	; 0x652 <_Z12makeBipSoundi+0x5e>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	8a e0       	ldi	r24, 0x0A	; 10
     64e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
     652:	64 e6       	ldi	r22, 0x64	; 100
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <delay>

0000065e <_GLOBAL__sub_I_x>:
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	aa 24       	eor	r10, r10
     670:	aa 94       	dec	r10
     672:	ba 2c       	mov	r11, r10
     674:	65 01       	movw	r12, r10
     676:	ee 24       	eor	r14, r14
     678:	ea 94       	dec	r14
     67a:	fe 2c       	mov	r15, r14
     67c:	87 01       	movw	r16, r14
     67e:	26 e0       	ldi	r18, 0x06	; 6
     680:	4b e0       	ldi	r20, 0x0B	; 11
     682:	62 e0       	ldi	r22, 0x02	; 2
     684:	85 ed       	ldi	r24, 0xD5	; 213
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	b8 d3       	rcall	.+1904   	; 0xdfa <_ZN11DHT_UnifiedC1Ehhhll>
     68a:	45 e0       	ldi	r20, 0x05	; 5
     68c:	65 e3       	ldi	r22, 0x35	; 53
     68e:	8f eb       	ldi	r24, 0xBF	; 191
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	d1 d5       	rcall	.+2978   	; 0x1236 <_ZN7MFRC522C1Ehh>
     694:	86 eb       	ldi	r24, 0xB6	; 182
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <_ZN5ServoC1Ev>

000006ac <loop>:
#pragma endregion Servo Motor
 
}

void loop()
{
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	ad 97       	sbiw	r28, 0x2d	; 45
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     6c8:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <delayMS>
     6cc:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <delayMS+0x1>
     6d0:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <delayMS+0x2>
     6d4:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <delayMS+0x3>
     6d8:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     6dc:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <dht+0x16>
     6e0:	8f a3       	std	Y+39, r24	; 0x27
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     6e2:	8a e6       	ldi	r24, 0x6A	; 106
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	9e a3       	std	Y+38, r25	; 0x26
     6e8:	8d a3       	std	Y+37, r24	; 0x25
     6ea:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <dht+0x17>
     6ee:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <dht+0x18>
     6f2:	99 a7       	std	Y+41, r25	; 0x29
     6f4:	88 a7       	std	Y+40, r24	; 0x28
     6f6:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <dht+0x19>
     6fa:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <dht+0x1a>
     6fe:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <dht+0x1b>
     702:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <dht+0x1c>
     706:	8a a7       	std	Y+42, r24	; 0x2a
     708:	9b a7       	std	Y+43, r25	; 0x2b
     70a:	ac a7       	std	Y+44, r26	; 0x2c
     70c:	bd a7       	std	Y+45, r27	; 0x2d
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     70e:	be 01       	movw	r22, r28
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	ce 01       	movw	r24, r28
     716:	85 96       	adiw	r24, 0x25	; 37
     718:	f9 d2       	rcall	.+1522   	; 0xd0c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
	
	// set Temperature value
	if (isnan(event.temperature))
     71a:	cd 88       	ldd	r12, Y+21	; 0x15
     71c:	de 88       	ldd	r13, Y+22	; 0x16
     71e:	ef 88       	ldd	r14, Y+23	; 0x17
     720:	f8 8c       	ldd	r15, Y+24	; 0x18
     722:	a7 01       	movw	r20, r14
     724:	96 01       	movw	r18, r12
     726:	c7 01       	movw	r24, r14
     728:	b6 01       	movw	r22, r12
     72a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__unordsf2>
     72e:	88 23       	and	r24, r24
     730:	39 f0       	breq	.+14     	; 0x740 <loop+0x94>
	{
		DhtSencorTemp = 420;
     732:	84 ea       	ldi	r24, 0xA4	; 164
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <DhtSencorTemp+0x1>
     73a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <DhtSencorTemp>
     73e:	08 c0       	rjmp	.+16     	; 0x750 <loop+0xa4>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__fixsfsi>
     748:	70 93 d0 02 	sts	0x02D0, r23	; 0x8002d0 <DhtSencorTemp+0x1>
     74c:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <DhtSencorTemp>
     750:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <dht+0x1f>
     754:	8f a3       	std	Y+39, r24	; 0x27
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     756:	88 e7       	ldi	r24, 0x78	; 120
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	9e a3       	std	Y+38, r25	; 0x26
     75c:	8d a3       	std	Y+37, r24	; 0x25
     75e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <dht+0x20>
     762:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <dht+0x21>
     766:	99 a7       	std	Y+41, r25	; 0x29
     768:	88 a7       	std	Y+40, r24	; 0x28
     76a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <dht+0x22>
     76e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <dht+0x23>
     772:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <dht+0x24>
     776:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <dht+0x25>
     77a:	8a a7       	std	Y+42, r24	; 0x2a
     77c:	9b a7       	std	Y+43, r25	; 0x2b
     77e:	ac a7       	std	Y+44, r26	; 0x2c
     780:	bd a7       	std	Y+45, r27	; 0x2d
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     782:	be 01       	movw	r22, r28
     784:	6f 5f       	subi	r22, 0xFF	; 255
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	85 96       	adiw	r24, 0x25	; 37
     78c:	f9 d2       	rcall	.+1522   	; 0xd80 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     78e:	cd 88       	ldd	r12, Y+21	; 0x15
     790:	de 88       	ldd	r13, Y+22	; 0x16
     792:	ef 88       	ldd	r14, Y+23	; 0x17
     794:	f8 8c       	ldd	r15, Y+24	; 0x18
     796:	a7 01       	movw	r20, r14
     798:	96 01       	movw	r18, r12
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__unordsf2>
     7a2:	88 23       	and	r24, r24
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <loop+0x108>
	{
		DhtSencorHum = 360;
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <DhtSencorHum+0x1>
     7ae:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <DhtSencorHum>
     7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <loop+0x118>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     7b4:	c7 01       	movw	r24, r14
     7b6:	b6 01       	movw	r22, r12
     7b8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__fixsfsi>
     7bc:	70 93 ce 02 	sts	0x02CE, r23	; 0x8002ce <DhtSencorHum+0x1>
     7c0:	60 93 cd 02 	sts	0x02CD, r22	; 0x8002cd <DhtSencorHum>
	//Serial.print("Temp: ");
	//Serial.println(DhtSencorTemp);
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);
  
  Wire.beginTransmission(4);		// transmit to device #4
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	88 e0       	ldi	r24, 0x08	; 8
     7ca:	94 e0       	ldi	r25, 0x04	; 4
     7cc:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN7TwoWire17beginTransmissionEi>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     7d0:	46 e0       	ldi	r20, 0x06	; 6
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	6c e3       	ldi	r22, 0x3C	; 60
     7d6:	72 e0       	ldi	r23, 0x02	; 2
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <_ZN7TwoWire5writeEPKhj>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     7e0:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <DhtSencorTemp>
     7e4:	88 e0       	ldi	r24, 0x08	; 8
     7e6:	94 e0       	ldi	r25, 0x04	; 4
     7e8:	0e 94 1f 14 	call	0x283e	; 0x283e <_ZN7TwoWire5writeEh>
  
  Wire.write("Temp: ");				// sends some bytes
  Wire.write(DhtSencorTemp);		// sends some bytes
  
  Wire.endTransmission();			// stop transmitting
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	94 e0       	ldi	r25, 0x04	; 4
     7f0:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     7f4:	64 e0       	ldi	r22, 0x04	; 4
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	88 e0       	ldi	r24, 0x08	; 8
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN7TwoWire17beginTransmissionEi>
     800:	45 e0       	ldi	r20, 0x05	; 5
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	63 e4       	ldi	r22, 0x43	; 67
     806:	72 e0       	ldi	r23, 0x02	; 2
     808:	88 e0       	ldi	r24, 0x08	; 8
     80a:	94 e0       	ldi	r25, 0x04	; 4
     80c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <_ZN7TwoWire5writeEPKhj>
     810:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <DhtSencorHum>
     814:	88 e0       	ldi	r24, 0x08	; 8
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	0e 94 1f 14 	call	0x283e	; 0x283e <_ZN7TwoWire5writeEh>
  
  Wire.write("Hum: ");			// sends some bytes
  Wire.write(DhtSencorHum);		    // sends some bytes
  
  Wire.endTransmission();			// stop transmitting
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	94 e0       	ldi	r25, 0x04	; 4
     820:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

#pragma region RFID lås (Hoveddør)

	int isCardValid = 0;
	isCardValid = RfidValidater();
     824:	e7 dd       	rcall	.-1074   	; 0x3f4 <_Z13RfidValidaterv>
	
	// if card/chip is valid
	if (isCardValid == 1)
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 05       	cpc	r25, r1
	{
		// Toggles the Front door status led's
		SwitchRfidLeds();
     82a:	31 f4       	brne	.+12     	; 0x838 <loop+0x18c>
				
		// makes 1 small bib sound
		makeBipSound(1);
     82c:	9a de       	rcall	.-716    	; 0x562 <_Z14SwitchRfidLedsv>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
		
		// Move servo
		moveServo();
     832:	e0 de       	rcall	.-576    	; 0x5f4 <_Z12makeBipSoundi>
     834:	bb de       	rcall	.-650    	; 0x5ac <_Z9moveServov>
	}
	// if card/chip is not valid
	else if (isCardValid == -1)
     836:	06 c0       	rjmp	.+12     	; 0x844 <loop+0x198>
     838:	01 96       	adiw	r24, 0x01	; 1
	{
		// Toggles the Front door status led's
		SwitchRfidLeds();
     83a:	21 f4       	brne	.+8      	; 0x844 <loop+0x198>
     83c:	92 de       	rcall	.-732    	; 0x562 <_Z14SwitchRfidLedsv>
				
		// makes 3 small bib sounds
		makeBipSound(2);
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	d8 de       	rcall	.-592    	; 0x5f4 <_Z12makeBipSoundi>
     844:	68 ee       	ldi	r22, 0xE8	; 232
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     846:	73 e0       	ldi	r23, 0x03	; 3
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
     850:	ad 96       	adiw	r28, 0x2d	; 45
}
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	08 95       	ret

0000086a <_ZN3DHTC1Ehhh>:
     86a:	dc 01       	movw	r26, r24
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     86c:	15 96       	adiw	r26, 0x05	; 5
     86e:	6c 93       	st	X, r22
     870:	15 97       	sbiw	r26, 0x05	; 5
     872:	16 96       	adiw	r26, 0x06	; 6
     874:	4c 93       	st	X, r20
     876:	16 97       	sbiw	r26, 0x06	; 6
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	fb 01       	movw	r30, r22
     87c:	e2 5b       	subi	r30, 0xB2	; 178
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	e4 91       	lpm	r30, Z
     882:	17 96       	adiw	r26, 0x07	; 7
     884:	ec 93       	st	X, r30
     886:	17 97       	sbiw	r26, 0x07	; 7
     888:	fb 01       	movw	r30, r22
     88a:	ec 56       	subi	r30, 0x6C	; 108
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	64 91       	lpm	r22, Z
     890:	18 96       	adiw	r26, 0x08	; 8
     892:	6c 93       	st	X, r22
     894:	18 97       	sbiw	r26, 0x08	; 8
     896:	40 e8       	ldi	r20, 0x80	; 128
     898:	5e e3       	ldi	r21, 0x3E	; 62
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	1d 96       	adiw	r26, 0x0d	; 13
     8a0:	4d 93       	st	X+, r20
     8a2:	5d 93       	st	X+, r21
     8a4:	6d 93       	st	X+, r22
     8a6:	7c 93       	st	X, r23
     8a8:	50 97       	sbiw	r26, 0x10	; 16
     8aa:	08 95       	ret

000008ac <_ZN3DHT5beginEh>:
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ec 01       	movw	r28, r24
     8b4:	16 2f       	mov	r17, r22
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ba:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
     8be:	0e 94 41 19 	call	0x3282	; 0x3282 <millis>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	80 5d       	subi	r24, 0xD0	; 208
     8c8:	97 40       	sbci	r25, 0x07	; 7
     8ca:	a1 09       	sbc	r26, r1
     8cc:	b1 09       	sbc	r27, r1
     8ce:	89 87       	std	Y+9, r24	; 0x09
     8d0:	9a 87       	std	Y+10, r25	; 0x0a
     8d2:	ab 87       	std	Y+11, r26	; 0x0b
     8d4:	bc 87       	std	Y+12, r27	; 0x0c
     8d6:	1a 8b       	std	Y+18, r17	; 0x12
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	ec 01       	movw	r28, r24
     8f0:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
     8f2:	66 23       	and	r22, r22
     8f4:	11 f0       	breq	.+4      	; 0x8fa <_ZN3DHT11expectPulseEb+0x1a>
     8f6:	91 2f       	mov	r25, r17
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <_ZN3DHT11expectPulseEb+0x1c>
     8fa:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
     8fc:	28 85       	ldd	r18, Y+8	; 0x08
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	22 0f       	add	r18, r18
     902:	33 1f       	adc	r19, r19
     904:	26 52       	subi	r18, 0x26	; 38
     906:	3e 4f       	sbci	r19, 0xFE	; 254
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
     90c:	f9 01       	movw	r30, r18
     90e:	45 91       	lpm	r20, Z+
     910:	54 91       	lpm	r21, Z
     912:	fa 01       	movw	r30, r20
     914:	80 81       	ld	r24, Z
     916:	81 23       	and	r24, r17
     918:	ad 01       	movw	r20, r26
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	98 13       	cpse	r25, r24
     920:	0f c0       	rjmp	.+30     	; 0x940 <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
     922:	11 96       	adiw	r26, 0x01	; 1
     924:	cd 84       	ldd	r12, Y+13	; 0x0d
     926:	de 84       	ldd	r13, Y+14	; 0x0e
     928:	ef 84       	ldd	r14, Y+15	; 0x0f
     92a:	f8 88       	ldd	r15, Y+16	; 0x10
     92c:	4c 15       	cp	r20, r12
     92e:	5d 05       	cpc	r21, r13
     930:	6e 05       	cpc	r22, r14
     932:	7f 05       	cpc	r23, r15
     934:	58 f3       	brcs	.-42     	; 0x90c <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	2f ef       	ldi	r18, 0xFF	; 255
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	9f ef       	ldi	r25, 0xFF	; 255
     93e:	03 c0       	rjmp	.+6      	; 0x946 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
     940:	3a 2f       	mov	r19, r26
     942:	25 2f       	mov	r18, r21
     944:	cb 01       	movw	r24, r22
}
     946:	63 2f       	mov	r22, r19
     948:	72 2f       	mov	r23, r18
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	08 95       	ret

0000095a <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	c0 54       	subi	r28, 0x40	; 64
     978:	d1 40       	sbci	r29, 0x01	; 1
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	8c 01       	movw	r16, r24
     986:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     988:	0e 94 41 19 	call	0x3282	; 0x3282 <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
     98c:	f1 10       	cpse	r15, r1
     98e:	16 c0       	rjmp	.+44     	; 0x9bc <_ZN3DHT4readEb+0x62>
     990:	f8 01       	movw	r30, r16
     992:	c1 84       	ldd	r12, Z+9	; 0x09
     994:	d2 84       	ldd	r13, Z+10	; 0x0a
     996:	e3 84       	ldd	r14, Z+11	; 0x0b
     998:	f4 84       	ldd	r15, Z+12	; 0x0c
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	2c 19       	sub	r18, r12
     9a0:	3d 09       	sbc	r19, r13
     9a2:	4e 09       	sbc	r20, r14
     9a4:	5f 09       	sbc	r21, r15
     9a6:	69 01       	movw	r12, r18
     9a8:	7a 01       	movw	r14, r20
     9aa:	30 ed       	ldi	r19, 0xD0	; 208
     9ac:	c3 16       	cp	r12, r19
     9ae:	37 e0       	ldi	r19, 0x07	; 7
     9b0:	d3 06       	cpc	r13, r19
     9b2:	e1 04       	cpc	r14, r1
     9b4:	f1 04       	cpc	r15, r1
     9b6:	10 f4       	brcc	.+4      	; 0x9bc <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     9b8:	81 89       	ldd	r24, Z+17	; 0x11
     9ba:	b6 c0       	rjmp	.+364    	; 0xb28 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
     9bc:	f8 01       	movw	r30, r16
     9be:	61 87       	std	Z+9, r22	; 0x09
     9c0:	72 87       	std	Z+10, r23	; 0x0a
     9c2:	83 87       	std	Z+11, r24	; 0x0b
     9c4:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     9c6:	14 82       	std	Z+4, r1	; 0x04
     9c8:	13 82       	std	Z+3, r1	; 0x03
     9ca:	12 82       	std	Z+2, r1	; 0x02
     9cc:	11 82       	std	Z+1, r1	; 0x01
     9ce:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	85 81       	ldd	r24, Z+5	; 0x05
     9d4:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
  delay(1);
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	f8 01       	movw	r30, r16
     9e8:	85 81       	ldd	r24, Z+5	; 0x05
     9ea:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
  digitalWrite(_pin, LOW);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	f8 01       	movw	r30, r16
     9f2:	85 81       	ldd	r24, Z+5	; 0x05
     9f4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
  switch (_type) {
     9f8:	f8 01       	movw	r30, r16
     9fa:	86 81       	ldd	r24, Z+6	; 0x06
     9fc:	85 51       	subi	r24, 0x15	; 21
     9fe:	82 30       	cpi	r24, 0x02	; 2
     a00:	28 f4       	brcc	.+10     	; 0xa0c <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
     a02:	8c e4       	ldi	r24, 0x4C	; 76
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	0e 94 ab 19 	call	0x3356	; 0x3356 <delayMicroseconds>
    break;
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
     a0c:	64 e1       	ldi	r22, 0x14	; 20
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	f8 01       	movw	r30, r16
     a1c:	85 81       	ldd	r24, Z+5	; 0x05
     a1e:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
     a22:	f8 01       	movw	r30, r16
     a24:	82 89       	ldd	r24, Z+18	; 0x12
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 ab 19 	call	0x3356	; 0x3356 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
     a2c:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	c8 01       	movw	r24, r16
     a32:	56 df       	rcall	.-340    	; 0x8e0 <_ZN3DHT11expectPulseEb>
     a34:	6f 3f       	cpi	r22, 0xFF	; 255
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	8f 4f       	sbci	r24, 0xFF	; 255
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	21 f4       	brne	.+8      	; 0xa46 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
     a3e:	f8 01       	movw	r30, r16
     a40:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
     a42:	78 94       	sei
     a44:	42 c0       	rjmp	.+132    	; 0xaca <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	c8 01       	movw	r24, r16
     a4a:	4a df       	rcall	.-364    	; 0x8e0 <_ZN3DHT11expectPulseEb>
     a4c:	6f 3f       	cpi	r22, 0xFF	; 255
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	8f 4f       	sbci	r24, 0xFF	; 255
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	a1 f3       	breq	.-24     	; 0xa3e <_ZN3DHT4readEb+0xe4>
     a56:	9e 01       	movw	r18, r28
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	79 01       	movw	r14, r18
     a5e:	5e 01       	movw	r10, r28
     a60:	3f eb       	ldi	r19, 0xBF	; 191
     a62:	a3 1a       	sub	r10, r19
     a64:	3e ef       	ldi	r19, 0xFE	; 254
     a66:	b3 0a       	sbc	r11, r19
     a68:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	c8 01       	movw	r24, r16
     a6e:	38 df       	rcall	.-400    	; 0x8e0 <_ZN3DHT11expectPulseEb>
     a70:	f6 01       	movw	r30, r12
     a72:	60 83       	st	Z, r22
     a74:	71 83       	std	Z+1, r23	; 0x01
     a76:	82 83       	std	Z+2, r24	; 0x02
     a78:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	c8 01       	movw	r24, r16
     a7e:	30 df       	rcall	.-416    	; 0x8e0 <_ZN3DHT11expectPulseEb>
     a80:	f6 01       	movw	r30, r12
     a82:	64 83       	std	Z+4, r22	; 0x04
     a84:	75 83       	std	Z+5, r23	; 0x05
     a86:	86 83       	std	Z+6, r24	; 0x06
     a88:	97 83       	std	Z+7, r25	; 0x07
     a8a:	f8 e0       	ldi	r31, 0x08	; 8
     a8c:	cf 0e       	add	r12, r31
     a8e:	d1 1c       	adc	r13, r1
     a90:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
     a92:	db 04       	cpc	r13, r11
     a94:	51 f7       	brne	.-44     	; 0xa6a <_ZN3DHT4readEb+0x110>
     a96:	78 94       	sei
     a98:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
     a9e:	80 80       	ld	r8, Z
     aa0:	91 80       	ldd	r9, Z+1	; 0x01
     aa2:	a2 80       	ldd	r10, Z+2	; 0x02
     aa4:	b3 80       	ldd	r11, Z+3	; 0x03
     aa6:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
     aa8:	55 81       	ldd	r21, Z+5	; 0x05
     aaa:	66 81       	ldd	r22, Z+6	; 0x06
     aac:	77 81       	ldd	r23, Z+7	; 0x07
     aae:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
     ab0:	8f 16       	cp	r8, r31
     ab2:	9f 06       	cpc	r9, r31
     ab4:	af 06       	cpc	r10, r31
     ab6:	bf 06       	cpc	r11, r31
     ab8:	31 f0       	breq	.+12     	; 0xac6 <_ZN3DHT4readEb+0x16c>
     aba:	4f 3f       	cpi	r20, 0xFF	; 255
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	58 07       	cpc	r21, r24
     ac0:	68 07       	cpc	r22, r24
     ac2:	78 07       	cpc	r23, r24
     ac4:	21 f4       	brne	.+8      	; 0xace <_ZN3DHT4readEb+0x174>
     ac6:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
     ac8:	11 8a       	std	Z+17, r1	; 0x11
     aca:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
     acc:	2d c0       	rjmp	.+90     	; 0xb28 <_ZN3DHT4readEb+0x1ce>
     ace:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	f5 95       	asr	r31
     ad4:	e7 95       	ror	r30
     ad6:	8a 95       	dec	r24
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <_ZN3DHT4readEb+0x178>
     ada:	e0 0f       	add	r30, r16
     adc:	f1 1f       	adc	r31, r17
     ade:	80 81       	ld	r24, Z
     ae0:	88 0f       	add	r24, r24
     ae2:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     ae4:	95 06       	cpc	r9, r21
     ae6:	a6 06       	cpc	r10, r22
     ae8:	b7 06       	cpc	r11, r23
     aea:	08 f4       	brcc	.+2      	; 0xaee <_ZN3DHT4readEb+0x194>
     aec:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
     aee:	80 83       	st	Z, r24
     af0:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	f8 e0       	ldi	r31, 0x08	; 8
     af6:	ef 0e       	add	r14, r31
     af8:	f1 1c       	adc	r15, r1
     afa:	28 32       	cpi	r18, 0x28	; 40
     afc:	31 05       	cpc	r19, r1
     afe:	71 f6       	brne	.-100    	; 0xa9c <_ZN3DHT4readEb+0x142>
     b00:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     b02:	24 81       	ldd	r18, Z+4	; 0x04
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 81       	ld	r20, Z
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	84 0f       	add	r24, r20
     b0e:	91 1d       	adc	r25, r1
     b10:	42 81       	ldd	r20, Z+2	; 0x02
     b12:	84 0f       	add	r24, r20
     b14:	91 1d       	adc	r25, r1
     b16:	43 81       	ldd	r20, Z+3	; 0x03
     b18:	84 0f       	add	r24, r20
     b1a:	91 1d       	adc	r25, r1
     b1c:	99 27       	eor	r25, r25
     b1e:	28 17       	cp	r18, r24
     b20:	39 07       	cpc	r19, r25
     b22:	89 f6       	brne	.-94     	; 0xac6 <_ZN3DHT4readEb+0x16c>
     b24:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
     b26:	81 8b       	std	Z+17, r24	; 0x11
     b28:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     b2a:	de 4f       	sbci	r29, 0xFE	; 254
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	9f 90       	pop	r9
     b4c:	8f 90       	pop	r8
     b4e:	08 95       	ret

00000b50 <_ZN3DHT15readTemperatureEbb>:
     b50:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	8c 01       	movw	r16, r24
     b62:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
     b64:	64 2f       	mov	r22, r20
     b66:	f9 de       	rcall	.-526    	; 0x95a <_ZN3DHT4readEb>
     b68:	88 23       	and	r24, r24
     b6a:	09 f4       	brne	.+2      	; 0xb6e <_ZN3DHT15readTemperatureEbb+0x1e>
     b6c:	78 c0       	rjmp	.+240    	; 0xc5e <_ZN3DHT15readTemperatureEbb+0x10e>
    switch (_type) {
     b6e:	f8 01       	movw	r30, r16
     b70:	86 81       	ldd	r24, Z+6	; 0x06
     b72:	8c 30       	cpi	r24, 0x0C	; 12
     b74:	09 f4       	brne	.+2      	; 0xb78 <_ZN3DHT15readTemperatureEbb+0x28>
     b76:	45 c0       	rjmp	.+138    	; 0xc02 <_ZN3DHT15readTemperatureEbb+0xb2>
     b78:	18 f4       	brcc	.+6      	; 0xb80 <_ZN3DHT15readTemperatureEbb+0x30>
     b7a:	8b 30       	cpi	r24, 0x0B	; 11
     b7c:	c9 f0       	breq	.+50     	; 0xbb0 <_ZN3DHT15readTemperatureEbb+0x60>
     b7e:	6f c0       	rjmp	.+222    	; 0xc5e <_ZN3DHT15readTemperatureEbb+0x10e>
     b80:	85 51       	subi	r24, 0x15	; 21
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	08 f0       	brcs	.+2      	; 0xb88 <_ZN3DHT15readTemperatureEbb+0x38>
     b86:	6b c0       	rjmp	.+214    	; 0xc5e <_ZN3DHT15readTemperatureEbb+0x10e>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
     b88:	f8 01       	movw	r30, r16
     b8a:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
     b8c:	6d 2f       	mov	r22, r29
     b8e:	6f 77       	andi	r22, 0x7F	; 127
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	76 2f       	mov	r23, r22
     b94:	66 27       	eor	r22, r22
     b96:	83 81       	ldd	r24, Z+3	; 0x03
     b98:	68 2b       	or	r22, r24
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__floatunsisf>
     ba2:	2d ec       	ldi	r18, 0xCD	; 205
     ba4:	3c ec       	ldi	r19, 0xCC	; 204
     ba6:	4c ec       	ldi	r20, 0xCC	; 204
     ba8:	5d e3       	ldi	r21, 0x3D	; 61
     baa:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__mulsf3>
     bae:	46 c0       	rjmp	.+140    	; 0xc3c <_ZN3DHT15readTemperatureEbb+0xec>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
     bb0:	f8 01       	movw	r30, r16
     bb2:	62 81       	ldd	r22, Z+2	; 0x02
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__floatunsisf>
     bbe:	6b 01       	movw	r12, r22
     bc0:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
     bc2:	f8 01       	movw	r30, r16
     bc4:	d3 81       	ldd	r29, Z+3	; 0x03
     bc6:	d7 ff       	sbrs	r29, 7
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <_ZN3DHT15readTemperatureEbb+0x8e>
        f = -1 - f;
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e8       	ldi	r24, 0x80	; 128
     bd4:	9f eb       	ldi	r25, 0xBF	; 191
     bd6:	0e 94 8e 14 	call	0x291c	; 0x291c <__subsf3>
     bda:	6b 01       	movw	r12, r22
     bdc:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
     bde:	6d 2f       	mov	r22, r29
     be0:	6f 70       	andi	r22, 0x0F	; 15
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__floatsisf>
     bec:	2d ec       	ldi	r18, 0xCD	; 205
     bee:	3c ec       	ldi	r19, 0xCC	; 204
     bf0:	4c ec       	ldi	r20, 0xCC	; 204
     bf2:	5d e3       	ldi	r21, 0x3D	; 61
     bf4:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__mulsf3>
     bf8:	a7 01       	movw	r20, r14
     bfa:	96 01       	movw	r18, r12
     bfc:	0e 94 8f 14 	call	0x291e	; 0x291e <__addsf3>
     c00:	1f c0       	rjmp	.+62     	; 0xc40 <_ZN3DHT15readTemperatureEbb+0xf0>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
     c02:	f8 01       	movw	r30, r16
     c04:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
     c06:	63 81       	ldd	r22, Z+3	; 0x03
     c08:	6f 70       	andi	r22, 0x0F	; 15
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__floatsisf>
     c14:	2d ec       	ldi	r18, 0xCD	; 205
     c16:	3c ec       	ldi	r19, 0xCC	; 204
     c18:	4c ec       	ldi	r20, 0xCC	; 204
     c1a:	5d e3       	ldi	r21, 0x3D	; 61
     c1c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__mulsf3>
     c20:	6b 01       	movw	r12, r22
     c22:	7c 01       	movw	r14, r24
     c24:	6d 2f       	mov	r22, r29
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__floatunsisf>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 8f 14 	call	0x291e	; 0x291e <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
     c3c:	d7 fd       	sbrc	r29, 7
        f *= -1;
     c3e:	90 58       	subi	r25, 0x80	; 128
      }
      if (S) {
     c40:	cc 23       	and	r28, r28
     c42:	89 f0       	breq	.+34     	; 0xc66 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
     c44:	26 e6       	ldi	r18, 0x66	; 102
     c46:	36 e6       	ldi	r19, 0x66	; 102
     c48:	46 ee       	ldi	r20, 0xE6	; 230
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__mulsf3>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	52 e4       	ldi	r21, 0x42	; 66
     c58:	0e 94 8f 14 	call	0x291e	; 0x291e <__addsf3>
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 ec       	ldi	r24, 0xC0	; 192
     c64:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	08 95       	ret

00000c78 <_ZN3DHT12readHumidityEb>:
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
     c86:	69 de       	rcall	.-814    	; 0x95a <_ZN3DHT4readEb>
     c88:	88 23       	and	r24, r24
     c8a:	99 f1       	breq	.+102    	; 0xcf2 <_ZN3DHT12readHumidityEb+0x7a>
    switch (_type) {
     c8c:	8e 81       	ldd	r24, Y+6	; 0x06
     c8e:	8b 30       	cpi	r24, 0x0B	; 11
     c90:	80 f1       	brcs	.+96     	; 0xcf2 <_ZN3DHT12readHumidityEb+0x7a>
     c92:	8d 30       	cpi	r24, 0x0D	; 13
     c94:	98 f0       	brcs	.+38     	; 0xcbc <_ZN3DHT12readHumidityEb+0x44>
     c96:	85 51       	subi	r24, 0x15	; 21
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	58 f5       	brcc	.+86     	; 0xcf2 <_ZN3DHT12readHumidityEb+0x7a>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
     c9c:	68 81       	ld	r22, Y
     c9e:	79 81       	ldd	r23, Y+1	; 0x01
     ca0:	76 27       	eor	r23, r22
     ca2:	67 27       	eor	r22, r23
     ca4:	76 27       	eor	r23, r22
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__floatunsisf>
      f *= 0.1;
     cae:	2d ec       	ldi	r18, 0xCD	; 205
     cb0:	3c ec       	ldi	r19, 0xCC	; 204
     cb2:	4c ec       	ldi	r20, 0xCC	; 204
     cb4:	5d e3       	ldi	r21, 0x3D	; 61
     cb6:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__mulsf3>
      break;
     cba:	1f c0       	rjmp	.+62     	; 0xcfa <_ZN3DHT12readHumidityEb+0x82>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
     cbc:	69 81       	ldd	r22, Y+1	; 0x01
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__floatsisf>
     cc8:	2d ec       	ldi	r18, 0xCD	; 205
     cca:	3c ec       	ldi	r19, 0xCC	; 204
     ccc:	4c ec       	ldi	r20, 0xCC	; 204
     cce:	5d e3       	ldi	r21, 0x3D	; 61
     cd0:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__mulsf3>
     cd4:	6b 01       	movw	r12, r22
     cd6:	7c 01       	movw	r14, r24
     cd8:	68 81       	ld	r22, Y
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__floatsisf>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	0e 94 8f 14 	call	0x291e	; 0x291e <__addsf3>
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <_ZN3DHT12readHumidityEb+0x82>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	80 ec       	ldi	r24, 0xC0	; 192
     cf8:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	08 95       	ret

00000d08 <_ZN11DHT_Unified8HumidityD1Ev>:
     d08:	08 95       	ret

00000d0a <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     d0a:	08 95       	ret

00000d0c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	8c 01       	movw	r16, r24
     d16:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     d18:	84 e2       	ldi	r24, 0x24	; 36
     d1a:	fb 01       	movw	r30, r22
     d1c:	11 92       	st	Z+, r1
     d1e:	8a 95       	dec	r24
     d20:	e9 f7       	brne	.-6      	; 0xd1c <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     d22:	84 e2       	ldi	r24, 0x24	; 36
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	88 83       	st	Y, r24
     d2c:	99 83       	std	Y+1, r25	; 0x01
     d2e:	aa 83       	std	Y+2, r26	; 0x02
     d30:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     d32:	f8 01       	movw	r30, r16
     d34:	85 81       	ldd	r24, Z+5	; 0x05
     d36:	96 81       	ldd	r25, Z+6	; 0x06
     d38:	a7 81       	ldd	r26, Z+7	; 0x07
     d3a:	b0 85       	ldd	r27, Z+8	; 0x08
     d3c:	8c 83       	std	Y+4, r24	; 0x04
     d3e:	9d 83       	std	Y+5, r25	; 0x05
     d40:	ae 83       	std	Y+6, r26	; 0x06
     d42:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     d44:	8d e0       	ldi	r24, 0x0D	; 13
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	88 87       	std	Y+8, r24	; 0x08
     d4e:	99 87       	std	Y+9, r25	; 0x09
     d50:	aa 87       	std	Y+10, r26	; 0x0a
     d52:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     d54:	0e 94 41 19 	call	0x3282	; 0x3282 <millis>
     d58:	68 8b       	std	Y+16, r22	; 0x10
     d5a:	79 8b       	std	Y+17, r23	; 0x11
     d5c:	8a 8b       	std	Y+18, r24	; 0x12
     d5e:	9b 8b       	std	Y+19, r25	; 0x13
  event->temperature = _parent->_dht.readTemperature();
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	f8 01       	movw	r30, r16
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	94 81       	ldd	r25, Z+4	; 0x04
     d6a:	f2 de       	rcall	.-540    	; 0xb50 <_ZN3DHT15readTemperatureEbb>
     d6c:	6c 8b       	std	Y+20, r22	; 0x14
     d6e:	7d 8b       	std	Y+21, r23	; 0x15
     d70:	8e 8b       	std	Y+22, r24	; 0x16
     d72:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	8c 01       	movw	r16, r24
     d8a:	eb 01       	movw	r28, r22
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
     d8c:	84 e2       	ldi	r24, 0x24	; 36
     d8e:	fb 01       	movw	r30, r22
     d90:	11 92       	st	Z+, r1
     d92:	8a 95       	dec	r24
     d94:	e9 f7       	brne	.-6      	; 0xd90 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x10>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
     d96:	84 e2       	ldi	r24, 0x24	; 36
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 e0       	ldi	r26, 0x00	; 0
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	88 83       	st	Y, r24
     da0:	99 83       	std	Y+1, r25	; 0x01
     da2:	aa 83       	std	Y+2, r26	; 0x02
     da4:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _id;
     da6:	f8 01       	movw	r30, r16
     da8:	85 81       	ldd	r24, Z+5	; 0x05
     daa:	96 81       	ldd	r25, Z+6	; 0x06
     dac:	a7 81       	ldd	r26, Z+7	; 0x07
     dae:	b0 85       	ldd	r27, Z+8	; 0x08
     db0:	8c 83       	std	Y+4, r24	; 0x04
     db2:	9d 83       	std	Y+5, r25	; 0x05
     db4:	ae 83       	std	Y+6, r26	; 0x06
     db6:	bf 83       	std	Y+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
     db8:	8c e0       	ldi	r24, 0x0C	; 12
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	88 87       	std	Y+8, r24	; 0x08
     dc2:	99 87       	std	Y+9, r25	; 0x09
     dc4:	aa 87       	std	Y+10, r26	; 0x0a
     dc6:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = millis();
     dc8:	0e 94 41 19 	call	0x3282	; 0x3282 <millis>
     dcc:	68 8b       	std	Y+16, r22	; 0x10
     dce:	79 8b       	std	Y+17, r23	; 0x11
     dd0:	8a 8b       	std	Y+18, r24	; 0x12
     dd2:	9b 8b       	std	Y+19, r25	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	f8 01       	movw	r30, r16
     dd8:	83 81       	ldd	r24, Z+3	; 0x03
     dda:	94 81       	ldd	r25, Z+4	; 0x04
     ddc:	4d df       	rcall	.-358    	; 0xc78 <_ZN3DHT12readHumidityEb>
     dde:	6c 8b       	std	Y+20, r22	; 0x14
     de0:	7d 8b       	std	Y+21, r23	; 0x15
     de2:	8e 8b       	std	Y+22, r24	; 0x16
     de4:	9f 8b       	std	Y+23, r25	; 0x17

  return true;
}
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <_ZN11DHT_Unified8HumidityD0Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     df2:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <_ZdlPv>

00000df6 <_ZN11DHT_Unified11TemperatureD0Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     df6:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <_ZdlPv>

00000dfa <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
     dfa:	4f 92       	push	r4
     dfc:	5f 92       	push	r5
     dfe:	6f 92       	push	r6
     e00:	7f 92       	push	r7
     e02:	9f 92       	push	r9
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
     e1a:	94 2e       	mov	r9, r20
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     e1c:	26 dd       	rcall	.-1460   	; 0x86a <_ZN3DHTC1Ehhh>
     e1e:	9b 8a       	std	Y+19, r9	; 0x13
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     e20:	8a e6       	ldi	r24, 0x6A	; 106
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	9d 8b       	std	Y+21, r25	; 0x15
     e26:	8c 8b       	std	Y+20, r24	; 0x14
     e28:	d8 8f       	std	Y+24, r29	; 0x18
     e2a:	cf 8b       	std	Y+23, r28	; 0x17
     e2c:	e9 8e       	std	Y+25, r14	; 0x19
     e2e:	fa 8e       	std	Y+26, r15	; 0x1a
     e30:	0b 8f       	std	Y+27, r16	; 0x1b
     e32:	1c 8f       	std	Y+28, r17	; 0x1c
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    : _parent(parent), _id(id) {}
     e34:	88 e7       	ldi	r24, 0x78	; 120
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	9e 8f       	std	Y+30, r25	; 0x1e
     e3a:	8d 8f       	std	Y+29, r24	; 0x1d
     e3c:	d9 a3       	std	Y+33, r29	; 0x21
     e3e:	c8 a3       	std	Y+32, r28	; 0x20
     e40:	aa a2       	std	Y+34, r10	; 0x22
     e42:	bb a2       	std	Y+35, r11	; 0x23
     e44:	cc a2       	std	Y+36, r12	; 0x24
     e46:	dd a2       	std	Y+37, r13	; 0x25
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	9f 90       	pop	r9
     e5e:	7f 90       	pop	r7
     e60:	6f 90       	pop	r6
     e62:	5f 90       	pop	r5
     e64:	4f 90       	pop	r4
     e66:	08 95       	ret

00000e68 <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
     e68:	67 e3       	ldi	r22, 0x37	; 55
     e6a:	20 cd       	rjmp	.-1472   	; 0x8ac <_ZN3DHT5beginEh>

00000e6c <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	eb 01       	movw	r28, r22
  switch (_type) {
     e72:	fc 01       	movw	r30, r24
     e74:	83 89       	ldd	r24, Z+19	; 0x13
     e76:	8c 30       	cpi	r24, 0x0C	; 12
     e78:	89 f0       	breq	.+34     	; 0xe9c <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>
     e7a:	38 f4       	brcc	.+14     	; 0xe8a <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
     e7c:	8b 30       	cpi	r24, 0x0B	; 11
     e7e:	c1 f4       	brne	.+48     	; 0xeb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
     e80:	4b e0       	ldi	r20, 0x0B	; 11
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	69 e4       	ldi	r22, 0x49	; 73
     e86:	72 e0       	ldi	r23, 0x02	; 2
     e88:	17 c0       	rjmp	.+46     	; 0xeb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
  switch (_type) {
     e8a:	85 31       	cpi	r24, 0x15	; 21
     e8c:	61 f0       	breq	.+24     	; 0xea6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3a>
     e8e:	86 31       	cpi	r24, 0x16	; 22
     e90:	79 f4       	brne	.+30     	; 0xeb0 <_ZN11DHT_Unified7setNameEP8sensor_t+0x44>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    break;
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
     e92:	4b e0       	ldi	r20, 0x0B	; 11
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	6b e5       	ldi	r22, 0x5B	; 91
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	0e c0       	rjmp	.+28     	; 0xeb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
  switch (_type) {
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    break;
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
     e9c:	4b e0       	ldi	r20, 0x0B	; 11
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	6f e4       	ldi	r22, 0x4F	; 79
     ea2:	72 e0       	ldi	r23, 0x02	; 2
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
     ea6:	4b e0       	ldi	r20, 0x0B	; 11
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	65 e5       	ldi	r22, 0x55	; 85
     eac:	72 e0       	ldi	r23, 0x02	; 2
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <_ZN11DHT_Unified7setNameEP8sensor_t+0x4c>
    break;
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
     eb0:	4b e0       	ldi	r20, 0x0B	; 11
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	61 e6       	ldi	r22, 0x61	; 97
     eb6:	72 e0       	ldi	r23, 0x02	; 2
     eb8:	ce 01       	movw	r24, r28
     eba:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <strncpy>
    break;
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
     ebe:	1b 86       	std	Y+11, r1	; 0x0b
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
     ec6:	fb 01       	movw	r30, r22
  switch (_type) {
     ec8:	dc 01       	movw	r26, r24
     eca:	53 96       	adiw	r26, 0x13	; 19
     ecc:	8c 91       	ld	r24, X
     ece:	8c 30       	cpi	r24, 0x0C	; 12
     ed0:	41 f0       	breq	.+16     	; 0xee2 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     ed2:	38 f4       	brcc	.+14     	; 0xee2 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
     ed4:	8b 30       	cpi	r24, 0x0B	; 11
     ed6:	29 f4       	brne	.+10     	; 0xee2 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	92 e4       	ldi	r25, 0x42	; 66
     edc:	af e0       	ldi	r26, 0x0F	; 15
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x24>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    break;
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
     ee2:	80 e8       	ldi	r24, 0x80	; 128
     ee4:	94 e8       	ldi	r25, 0x84	; 132
     ee6:	ae e1       	ldi	r26, 0x1E	; 30
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	84 a3       	std	Z+36, r24	; 0x24
     eec:	95 a3       	std	Z+37, r25	; 0x25
     eee:	a6 a3       	std	Z+38, r26	; 0x26
     ef0:	b7 a3       	std	Z+39, r27	; 0x27
     ef2:	08 95       	ret

00000ef4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	8c 01       	movw	r16, r24
     efe:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
     f00:	88 e2       	ldi	r24, 0x28	; 40
     f02:	db 01       	movw	r26, r22
     f04:	1d 92       	st	X+, r1
     f06:	8a 95       	dec	r24
     f08:	e9 f7       	brne	.-6      	; 0xf04 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
     f0a:	f8 01       	movw	r30, r16
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	94 81       	ldd	r25, Z+4	; 0x04
     f10:	ad df       	rcall	.-166    	; 0xe6c <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	8c 87       	std	Y+12, r24	; 0x0c
     f1c:	9d 87       	std	Y+13, r25	; 0x0d
     f1e:	ae 87       	std	Y+14, r26	; 0x0e
     f20:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
     f22:	f8 01       	movw	r30, r16
     f24:	85 81       	ldd	r24, Z+5	; 0x05
     f26:	96 81       	ldd	r25, Z+6	; 0x06
     f28:	a7 81       	ldd	r26, Z+7	; 0x07
     f2a:	b0 85       	ldd	r27, Z+8	; 0x08
     f2c:	88 8b       	std	Y+16, r24	; 0x10
     f2e:	99 8b       	std	Y+17, r25	; 0x11
     f30:	aa 8b       	std	Y+18, r26	; 0x12
     f32:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
     f34:	8d e0       	ldi	r24, 0x0D	; 13
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	8c 8b       	std	Y+20, r24	; 0x14
     f3e:	9d 8b       	std	Y+21, r25	; 0x15
     f40:	ae 8b       	std	Y+22, r26	; 0x16
     f42:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
     f44:	be 01       	movw	r22, r28
     f46:	83 81       	ldd	r24, Z+3	; 0x03
     f48:	94 81       	ldd	r25, Z+4	; 0x04
     f4a:	bd df       	rcall	.-134    	; 0xec6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
     f4c:	d8 01       	movw	r26, r16
     f4e:	13 96       	adiw	r26, 0x03	; 3
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	14 97       	sbiw	r26, 0x04	; 4
     f56:	83 89       	ldd	r24, Z+19	; 0x13
     f58:	8c 30       	cpi	r24, 0x0C	; 12
     f5a:	f1 f0       	breq	.+60     	; 0xf98 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xa4>
     f5c:	a0 f4       	brcc	.+40     	; 0xf86 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x92>
     f5e:	8b 30       	cpi	r24, 0x0B	; 11
     f60:	09 f0       	breq	.+2      	; 0xf64 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>
     f62:	48 c0       	rjmp	.+144    	; 0xff4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
  case DHT11:
    sensor->max_value = 50.0F;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a8 e4       	ldi	r26, 0x48	; 72
     f6a:	b2 e4       	ldi	r27, 0x42	; 66
     f6c:	88 8f       	std	Y+24, r24	; 0x18
     f6e:	99 8f       	std	Y+25, r25	; 0x19
     f70:	aa 8f       	std	Y+26, r26	; 0x1a
     f72:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
     f74:	1c 8e       	std	Y+28, r1	; 0x1c
     f76:	1d 8e       	std	Y+29, r1	; 0x1d
     f78:	1e 8e       	std	Y+30, r1	; 0x1e
     f7a:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 2.0F;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e4       	ldi	r27, 0x40	; 64
     f84:	32 c0       	rjmp	.+100    	; 0xfea <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
     f86:	85 31       	cpi	r24, 0x15	; 21
     f88:	e1 f0       	breq	.+56     	; 0xfc2 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xce>
     f8a:	86 31       	cpi	r24, 0x16	; 22
     f8c:	99 f5       	brne	.+102    	; 0xff4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x100>
    sensor->max_value = 80.0F;
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	aa ef       	ldi	r26, 0xFA	; 250
     f94:	b2 e4       	ldi	r27, 0x42	; 66
     f96:	19 c0       	rjmp	.+50     	; 0xfca <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 50.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 2.0F;
    break;
  case DHT12:
    sensor->max_value = 60.0F;
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e7       	ldi	r26, 0x70	; 112
     f9e:	b2 e4       	ldi	r27, 0x42	; 66
     fa0:	88 8f       	std	Y+24, r24	; 0x18
     fa2:	99 8f       	std	Y+25, r25	; 0x19
     fa4:	aa 8f       	std	Y+26, r26	; 0x1a
     fa6:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -20.0F;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 ea       	ldi	r26, 0xA0	; 160
     fae:	b1 ec       	ldi	r27, 0xC1	; 193
     fb0:	8c 8f       	std	Y+28, r24	; 0x1c
     fb2:	9d 8f       	std	Y+29, r25	; 0x1d
     fb4:	ae 8f       	std	Y+30, r26	; 0x1e
     fb6:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.5F;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a0 e0       	ldi	r26, 0x00	; 0
     fbe:	bf e3       	ldi	r27, 0x3F	; 63
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0xf6>
    break;
  case DHT21:
    sensor->max_value = 80.0F;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a0 ea       	ldi	r26, 0xA0	; 160
     fc8:	b2 e4       	ldi	r27, 0x42	; 66
    sensor->min_value = -40.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 125.0F;
     fca:	88 8f       	std	Y+24, r24	; 0x18
     fcc:	99 8f       	std	Y+25, r25	; 0x19
     fce:	aa 8f       	std	Y+26, r26	; 0x1a
     fd0:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = -40.0F;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a0 e2       	ldi	r26, 0x20	; 32
     fd8:	b2 ec       	ldi	r27, 0xC2	; 194
     fda:	8c 8f       	std	Y+28, r24	; 0x1c
     fdc:	9d 8f       	std	Y+29, r25	; 0x1d
     fde:	ae 8f       	std	Y+30, r26	; 0x1e
     fe0:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 0.1F;
     fe2:	8d ec       	ldi	r24, 0xCD	; 205
     fe4:	9c ec       	ldi	r25, 0xCC	; 204
     fe6:	ac ec       	ldi	r26, 0xCC	; 204
     fe8:	bd e3       	ldi	r27, 0x3D	; 61
     fea:	88 a3       	std	Y+32, r24	; 0x20
     fec:	99 a3       	std	Y+33, r25	; 0x21
     fee:	aa a3       	std	Y+34, r26	; 0x22
     ff0:	bb a3       	std	Y+35, r27	; 0x23
    break;
     ff2:	0c c0       	rjmp	.+24     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
     ff4:	18 8e       	std	Y+24, r1	; 0x18
     ff6:	19 8e       	std	Y+25, r1	; 0x19
     ff8:	1a 8e       	std	Y+26, r1	; 0x1a
     ffa:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
     ffc:	1c 8e       	std	Y+28, r1	; 0x1c
     ffe:	1d 8e       	std	Y+29, r1	; 0x1d
    1000:	1e 8e       	std	Y+30, r1	; 0x1e
    1002:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    1004:	18 a2       	std	Y+32, r1	; 0x20
    1006:	19 a2       	std	Y+33, r1	; 0x21
    1008:	1a a2       	std	Y+34, r1	; 0x22
    100a:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	8c 01       	movw	r16, r24
    1020:	eb 01       	movw	r28, r22
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1022:	88 e2       	ldi	r24, 0x28	; 40
    1024:	db 01       	movw	r26, r22
    1026:	1d 92       	st	X+, r1
    1028:	8a 95       	dec	r24
    102a:	e9 f7       	brne	.-6      	; 0x1026 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x10>
  // Set sensor name.
  _parent->setName(sensor);
    102c:	f8 01       	movw	r30, r16
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	94 81       	ldd	r25, Z+4	; 0x04
    1032:	1c df       	rcall	.-456    	; 0xe6c <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	8c 87       	std	Y+12, r24	; 0x0c
    103e:	9d 87       	std	Y+13, r25	; 0x0d
    1040:	ae 87       	std	Y+14, r26	; 0x0e
    1042:	bf 87       	std	Y+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1044:	f8 01       	movw	r30, r16
    1046:	85 81       	ldd	r24, Z+5	; 0x05
    1048:	96 81       	ldd	r25, Z+6	; 0x06
    104a:	a7 81       	ldd	r26, Z+7	; 0x07
    104c:	b0 85       	ldd	r27, Z+8	; 0x08
    104e:	88 8b       	std	Y+16, r24	; 0x10
    1050:	99 8b       	std	Y+17, r25	; 0x11
    1052:	aa 8b       	std	Y+18, r26	; 0x12
    1054:	bb 8b       	std	Y+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	8c 8b       	std	Y+20, r24	; 0x14
    1060:	9d 8b       	std	Y+21, r25	; 0x15
    1062:	ae 8b       	std	Y+22, r26	; 0x16
    1064:	bf 8b       	std	Y+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1066:	be 01       	movw	r22, r28
    1068:	83 81       	ldd	r24, Z+3	; 0x03
    106a:	94 81       	ldd	r25, Z+4	; 0x04
    106c:	2c df       	rcall	.-424    	; 0xec6 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    106e:	d8 01       	movw	r26, r16
    1070:	13 96       	adiw	r26, 0x03	; 3
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	14 97       	sbiw	r26, 0x04	; 4
    1078:	83 89       	ldd	r24, Z+19	; 0x13
    107a:	8c 30       	cpi	r24, 0x0C	; 12
    107c:	69 f0       	breq	.+26     	; 0x1098 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x82>
    107e:	38 f4       	brcc	.+14     	; 0x108e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x78>
    1080:	8b 30       	cpi	r24, 0x0B	; 11
    1082:	a1 f5       	brne	.+104    	; 0x10ec <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
  case DHT11:
    sensor->max_value = 80.0F;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 ea       	ldi	r26, 0xA0	; 160
    108a:	b2 e4       	ldi	r27, 0x42	; 66
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x8a>
  sensor->version = DHT_SENSOR_VERSION;
  sensor->sensor_id = _id;
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
  switch (_parent->_type) {
    108e:	85 31       	cpi	r24, 0x15	; 21
    1090:	c1 f0       	breq	.+48     	; 0x10c2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
    1092:	86 31       	cpi	r24, 0x16	; 22
    1094:	b1 f0       	breq	.+44     	; 0x10c2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xac>
    1096:	2a c0       	rjmp	.+84     	; 0x10ec <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xd6>
    sensor->max_value = 80.0F;
    sensor->min_value = 20.0F;
    sensor->resolution = 5.0F;
    break;
  case DHT12:
    sensor->max_value = 95.0F;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	ae eb       	ldi	r26, 0xBE	; 190
    109e:	b2 e4       	ldi	r27, 0x42	; 66
    10a0:	88 8f       	std	Y+24, r24	; 0x18
    10a2:	99 8f       	std	Y+25, r25	; 0x19
    10a4:	aa 8f       	std	Y+26, r26	; 0x1a
    10a6:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 ea       	ldi	r26, 0xA0	; 160
    10ae:	b1 e4       	ldi	r27, 0x41	; 65
    10b0:	8c 8f       	std	Y+28, r24	; 0x1c
    10b2:	9d 8f       	std	Y+29, r25	; 0x1d
    10b4:	ae 8f       	std	Y+30, r26	; 0x1e
    10b6:	bf 8f       	std	Y+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 ea       	ldi	r26, 0xA0	; 160
    10be:	b0 e4       	ldi	r27, 0x40	; 64
    10c0:	10 c0       	rjmp	.+32     	; 0x10e2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xcc>
    sensor->max_value = 100.0F;
    sensor->min_value = 0.0F;
    sensor->resolution = 0.1F;
    break;
  case DHT22:
    sensor->max_value = 100.0F;
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a8 ec       	ldi	r26, 0xC8	; 200
    10c8:	b2 e4       	ldi	r27, 0x42	; 66
    10ca:	88 8f       	std	Y+24, r24	; 0x18
    10cc:	99 8f       	std	Y+25, r25	; 0x19
    10ce:	aa 8f       	std	Y+26, r26	; 0x1a
    10d0:	bb 8f       	std	Y+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    10d2:	1c 8e       	std	Y+28, r1	; 0x1c
    10d4:	1d 8e       	std	Y+29, r1	; 0x1d
    10d6:	1e 8e       	std	Y+30, r1	; 0x1e
    10d8:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    10da:	8d ec       	ldi	r24, 0xCD	; 205
    10dc:	9c ec       	ldi	r25, 0xCC	; 204
    10de:	ac ec       	ldi	r26, 0xCC	; 204
    10e0:	bd e3       	ldi	r27, 0x3D	; 61
    10e2:	88 a3       	std	Y+32, r24	; 0x20
    10e4:	99 a3       	std	Y+33, r25	; 0x21
    10e6:	aa a3       	std	Y+34, r26	; 0x22
    10e8:	bb a3       	std	Y+35, r27	; 0x23
    break;
    10ea:	0c c0       	rjmp	.+24     	; 0x1104 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xee>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    10ec:	18 8e       	std	Y+24, r1	; 0x18
    10ee:	19 8e       	std	Y+25, r1	; 0x19
    10f0:	1a 8e       	std	Y+26, r1	; 0x1a
    10f2:	1b 8e       	std	Y+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    10f4:	1c 8e       	std	Y+28, r1	; 0x1c
    10f6:	1d 8e       	std	Y+29, r1	; 0x1d
    10f8:	1e 8e       	std	Y+30, r1	; 0x1e
    10fa:	1f 8e       	std	Y+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    10fc:	18 a2       	std	Y+32, r1	; 0x20
    10fe:	19 a2       	std	Y+33, r1	; 0x21
    1100:	1a a2       	std	Y+34, r1	; 0x22
    1102:	1b a2       	std	Y+35, r1	; 0x23
    break;
  }
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <_ZN8SPIClass16beginTransactionE11SPISettings>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    110e:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <_ZN8SPIClass13interruptModeE>
    1112:	22 23       	and	r18, r18
    1114:	99 f0       	breq	.+38     	; 0x113c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1116:	4f b7       	in	r20, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <_ZN8SPIClass13interruptModeE>
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	59 f4       	brne	.+22     	; 0x1138 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1122:	2d b3       	in	r18, 0x1d	; 29
    1124:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <_ZN8SPIClass13interruptSaveE>
    1128:	3d b3       	in	r19, 0x1d	; 29
    112a:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZN8SPIClass13interruptMaskE>
    112e:	20 95       	com	r18
    1130:	23 23       	and	r18, r19
    1132:	2d bb       	out	0x1d, r18	; 29
    1134:	4f bf       	out	0x3f, r20	; 63
    1136:	02 c0       	rjmp	.+4      	; 0x113c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1138:	40 93 90 03 	sts	0x0390, r20	; 0x800390 <_ZN8SPIClass13interruptSaveE>
    113c:	8c bd       	out	0x2c, r24	; 44
    113e:	9d bd       	out	0x2d, r25	; 45
    1140:	08 95       	ret

00001142 <_ZN8SPIClass8transferEh>:
    1142:	8e bd       	out	0x2e, r24	; 46
    1144:	00 00       	nop
    1146:	0d b4       	in	r0, 0x2d	; 45
    1148:	07 fe       	sbrs	r0, 7
    114a:	fd cf       	rjmp	.-6      	; 0x1146 <_ZN8SPIClass8transferEh+0x4>
    114c:	8e b5       	in	r24, 0x2e	; 46
    114e:	08 95       	ret

00001150 <_ZN8SPIClass14endTransactionEv>:
    1150:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_ZN8SPIClass13interruptModeE>
    1154:	88 23       	and	r24, r24
    1156:	61 f0       	breq	.+24     	; 0x1170 <_ZN8SPIClass14endTransactionEv+0x20>
    1158:	9f b7       	in	r25, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <_ZN8SPIClass13interruptModeE>
    1160:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN8SPIClass13interruptSaveE>
    1164:	21 30       	cpi	r18, 0x01	; 1
    1166:	19 f4       	brne	.+6      	; 0x116e <_ZN8SPIClass14endTransactionEv+0x1e>
    1168:	8d bb       	out	0x1d, r24	; 29
    116a:	9f bf       	out	0x3f, r25	; 63
    116c:	08 95       	ret
    116e:	8f bf       	out	0x3f, r24	; 63
    1170:	08 95       	ret

00001172 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1>:
    1172:	7f 92       	push	r7
    1174:	8f 92       	push	r8
    1176:	9f 92       	push	r9
    1178:	af 92       	push	r10
    117a:	bf 92       	push	r11
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	5c 01       	movw	r10, r24
    118e:	14 2f       	mov	r17, r20
    1190:	79 01       	movw	r14, r18
    1192:	6e 77       	andi	r22, 0x7E	; 126
    1194:	d6 2f       	mov	r29, r22
    1196:	d0 68       	ori	r29, 0x80	; 128
    1198:	83 e5       	ldi	r24, 0x53	; 83
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	b8 df       	rcall	.-144    	; 0x110e <_ZN8SPIClass16beginTransactionE11SPISettings>
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	f5 01       	movw	r30, r10
    11a2:	84 85       	ldd	r24, Z+12	; 0x0c
    11a4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    11a8:	11 50       	subi	r17, 0x01	; 1
    11aa:	8d 2f       	mov	r24, r29
    11ac:	ca df       	rcall	.-108    	; 0x1142 <_ZN8SPIClass8transferEh>
    11ae:	67 01       	movw	r12, r14
    11b0:	71 2c       	mov	r7, r1
    11b2:	88 24       	eor	r8, r8
    11b4:	83 94       	inc	r8
    11b6:	91 2c       	mov	r9, r1
    11b8:	71 16       	cp	r7, r17
    11ba:	20 f5       	brcc	.+72     	; 0x1204 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x92>
    11bc:	71 10       	cpse	r7, r1
    11be:	19 c0       	rjmp	.+50     	; 0x11f2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x80>
    11c0:	00 23       	and	r16, r16
    11c2:	b9 f0       	breq	.+46     	; 0x11f2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x80>
    11c4:	80 2f       	mov	r24, r16
    11c6:	c0 e0       	ldi	r28, 0x00	; 0
    11c8:	88 30       	cpi	r24, 0x08	; 8
    11ca:	48 f4       	brcc	.+18     	; 0x11de <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x6c>
    11cc:	94 01       	movw	r18, r8
    11ce:	08 2e       	mov	r0, r24
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x62>
    11d2:	22 0f       	add	r18, r18
    11d4:	0a 94       	dec	r0
    11d6:	ea f7       	brpl	.-6      	; 0x11d2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x60>
    11d8:	c2 2b       	or	r28, r18
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	f5 cf       	rjmp	.-22     	; 0x11c8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x56>
    11de:	8d 2f       	mov	r24, r29
    11e0:	b0 df       	rcall	.-160    	; 0x1142 <_ZN8SPIClass8transferEh>
    11e2:	2c 2f       	mov	r18, r28
    11e4:	20 95       	com	r18
    11e6:	f7 01       	movw	r30, r14
    11e8:	90 81       	ld	r25, Z
    11ea:	92 23       	and	r25, r18
    11ec:	8c 23       	and	r24, r28
    11ee:	89 2b       	or	r24, r25
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x86>
    11f2:	8d 2f       	mov	r24, r29
    11f4:	a6 df       	rcall	.-180    	; 0x1142 <_ZN8SPIClass8transferEh>
    11f6:	f6 01       	movw	r30, r12
    11f8:	80 83       	st	Z, r24
    11fa:	73 94       	inc	r7
    11fc:	ff ef       	ldi	r31, 0xFF	; 255
    11fe:	cf 1a       	sub	r12, r31
    1200:	df 0a       	sbc	r13, r31
    1202:	da cf       	rjmp	.-76     	; 0x11b8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1+0x46>
    1204:	e7 01       	movw	r28, r14
    1206:	c1 0f       	add	r28, r17
    1208:	d1 1d       	adc	r29, r1
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	9a df       	rcall	.-204    	; 0x1142 <_ZN8SPIClass8transferEh>
    120e:	88 83       	st	Y, r24
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	f5 01       	movw	r30, r10
    1214:	84 85       	ldd	r24, Z+12	; 0x0c
    1216:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	7f 90       	pop	r7
    1234:	8d cf       	rjmp	.-230    	; 0x1150 <_ZN8SPIClass14endTransactionEv>

00001236 <_ZN7MFRC522C1Ehh>:
    1236:	fc 01       	movw	r30, r24
    1238:	64 87       	std	Z+12, r22	; 0x0c
    123a:	45 87       	std	Z+13, r20	; 0x0d
    123c:	08 95       	ret

0000123e <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	06 2f       	mov	r16, r22
    124a:	14 2f       	mov	r17, r20
    124c:	83 e5       	ldi	r24, 0x53	; 83
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	5e df       	rcall	.-324    	; 0x110e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	8c 85       	ldd	r24, Y+12	; 0x0c
    1256:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    125a:	80 2f       	mov	r24, r16
    125c:	8e 77       	andi	r24, 0x7E	; 126
    125e:	71 df       	rcall	.-286    	; 0x1142 <_ZN8SPIClass8transferEh>
    1260:	81 2f       	mov	r24, r17
    1262:	6f df       	rcall	.-290    	; 0x1142 <_ZN8SPIClass8transferEh>
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	8c 85       	ldd	r24, Y+12	; 0x0c
    1268:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	6d cf       	rjmp	.-294    	; 0x1150 <_ZN8SPIClass14endTransactionEv>

00001276 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	8c 01       	movw	r16, r24
    1286:	c6 2f       	mov	r28, r22
    1288:	f4 2e       	mov	r15, r20
    128a:	d2 2e       	mov	r13, r18
    128c:	e3 2e       	mov	r14, r19
    128e:	83 e5       	ldi	r24, 0x53	; 83
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	3d df       	rcall	.-390    	; 0x110e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	f8 01       	movw	r30, r16
    1298:	84 85       	ldd	r24, Z+12	; 0x0c
    129a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    129e:	8c 2f       	mov	r24, r28
    12a0:	8e 77       	andi	r24, 0x7E	; 126
    12a2:	4f df       	rcall	.-354    	; 0x1142 <_ZN8SPIClass8transferEh>
    12a4:	cd 2d       	mov	r28, r13
    12a6:	de 2d       	mov	r29, r14
    12a8:	ce 01       	movw	r24, r28
    12aa:	8f 0d       	add	r24, r15
    12ac:	91 1d       	adc	r25, r1
    12ae:	7c 01       	movw	r14, r24
    12b0:	ec 16       	cp	r14, r28
    12b2:	fd 06       	cpc	r15, r29
    12b4:	19 f0       	breq	.+6      	; 0x12bc <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x46>
    12b6:	89 91       	ld	r24, Y+
    12b8:	44 df       	rcall	.-376    	; 0x1142 <_ZN8SPIClass8transferEh>
    12ba:	fa cf       	rjmp	.-12     	; 0x12b0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x3a>
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	f8 01       	movw	r30, r16
    12c0:	84 85       	ldd	r24, Z+12	; 0x0c
    12c2:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	3d cf       	rjmp	.-390    	; 0x1150 <_ZN8SPIClass14endTransactionEv>

000012d6 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	8c 01       	movw	r16, r24
    12de:	c6 2f       	mov	r28, r22
    12e0:	83 e5       	ldi	r24, 0x53	; 83
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	14 df       	rcall	.-472    	; 0x110e <_ZN8SPIClass16beginTransactionE11SPISettings>
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	f8 01       	movw	r30, r16
    12ea:	84 85       	ldd	r24, Z+12	; 0x0c
    12ec:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    12f0:	8c 2f       	mov	r24, r28
    12f2:	8e 77       	andi	r24, 0x7E	; 126
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	25 df       	rcall	.-438    	; 0x1142 <_ZN8SPIClass8transferEh>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	23 df       	rcall	.-442    	; 0x1142 <_ZN8SPIClass8transferEh>
    12fc:	c8 2f       	mov	r28, r24
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	f8 01       	movw	r30, r16
    1302:	84 85       	ldd	r24, Z+12	; 0x0c
    1304:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    1308:	23 df       	rcall	.-442    	; 0x1150 <_ZN8SPIClass14endTransactionEv>
    130a:	8c 2f       	mov	r24, r28
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    1314:	0f 93       	push	r16
    1316:	41 11       	cpse	r20, r1
    1318:	2c df       	rcall	.-424    	; 0x1172 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh.part.1>
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	8c 01       	movw	r16, r24
    1328:	d6 2f       	mov	r29, r22
    132a:	c4 2f       	mov	r28, r20
    132c:	d4 df       	rcall	.-88     	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    132e:	48 2f       	mov	r20, r24
    1330:	4c 2b       	or	r20, r28
    1332:	6d 2f       	mov	r22, r29
    1334:	c8 01       	movw	r24, r16
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	7f cf       	rjmp	.-258    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>

00001340 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	8c 01       	movw	r16, r24
    134a:	d6 2f       	mov	r29, r22
    134c:	c4 2f       	mov	r28, r20
    134e:	c3 df       	rcall	.-122    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    1350:	c0 95       	com	r28
    1352:	4c 2f       	mov	r20, r28
    1354:	48 23       	and	r20, r24
    1356:	6d 2f       	mov	r22, r29
    1358:	c8 01       	movw	r24, r16
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	6d cf       	rjmp	.-294    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>

00001364 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
    1376:	6b 01       	movw	r12, r22
    1378:	14 2f       	mov	r17, r20
    137a:	79 01       	movw	r14, r18
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	5e df       	rcall	.-324    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1382:	44 e0       	ldi	r20, 0x04	; 4
    1384:	6a e0       	ldi	r22, 0x0A	; 10
    1386:	ce 01       	movw	r24, r28
    1388:	5a df       	rcall	.-332    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    138a:	40 e8       	ldi	r20, 0x80	; 128
    138c:	64 e1       	ldi	r22, 0x14	; 20
    138e:	ce 01       	movw	r24, r28
    1390:	c6 df       	rcall	.-116    	; 0x131e <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    1392:	96 01       	movw	r18, r12
    1394:	41 2f       	mov	r20, r17
    1396:	62 e1       	ldi	r22, 0x12	; 18
    1398:	ce 01       	movw	r24, r28
    139a:	6d df       	rcall	.-294    	; 0x1276 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    139c:	43 e0       	ldi	r20, 0x03	; 3
    139e:	62 e0       	ldi	r22, 0x02	; 2
    13a0:	ce 01       	movw	r24, r28
    13a2:	4d df       	rcall	.-358    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    13a4:	08 e8       	ldi	r16, 0x88	; 136
    13a6:	13 e1       	ldi	r17, 0x13	; 19
    13a8:	6a e0       	ldi	r22, 0x0A	; 10
    13aa:	ce 01       	movw	r24, r28
    13ac:	94 df       	rcall	.-216    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    13ae:	82 fd       	sbrc	r24, 2
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
    13b2:	01 50       	subi	r16, 0x01	; 1
    13b4:	11 09       	sbc	r17, r1
    13b6:	c1 f7       	brne	.-16     	; 0x13a8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x44>
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x76>
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	ce 01       	movw	r24, r28
    13c2:	3d df       	rcall	.-390    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    13c4:	64 e4       	ldi	r22, 0x44	; 68
    13c6:	ce 01       	movw	r24, r28
    13c8:	86 df       	rcall	.-244    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    13ca:	f7 01       	movw	r30, r14
    13cc:	80 83       	st	Z, r24
    13ce:	62 e4       	ldi	r22, 0x42	; 66
    13d0:	ce 01       	movw	r24, r28
    13d2:	81 df       	rcall	.-254    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    13d4:	f7 01       	movw	r30, r14
    13d6:	81 83       	std	Z+1, r24	; 0x01
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	08 95       	ret

000013ec <_ZN7MFRC5229PCD_ResetEv>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	4f e0       	ldi	r20, 0x0F	; 15
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	23 df       	rcall	.-442    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    13f8:	62 e3       	ldi	r22, 0x32	; 50
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	ce 01       	movw	r24, r28
    1408:	66 df       	rcall	.-308    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    140a:	84 fd       	sbrc	r24, 4
    140c:	fb cf       	rjmp	.-10     	; 0x1404 <_ZN7MFRC5229PCD_ResetEv+0x18>
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret

00001414 <_ZN7MFRC52213PCD_AntennaOnEv>:
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	68 e2       	ldi	r22, 0x28	; 40
    141c:	5c df       	rcall	.-328    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    141e:	98 2f       	mov	r25, r24
    1420:	93 70       	andi	r25, 0x03	; 3
    1422:	93 30       	cpi	r25, 0x03	; 3
    1424:	39 f0       	breq	.+14     	; 0x1434 <_ZN7MFRC52213PCD_AntennaOnEv+0x20>
    1426:	48 2f       	mov	r20, r24
    1428:	43 60       	ori	r20, 0x03	; 3
    142a:	68 e2       	ldi	r22, 0x28	; 40
    142c:	ce 01       	movw	r24, r28
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	05 cf       	rjmp	.-502    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <_ZN7MFRC5228PCD_InitEv>:
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	8c 85       	ldd	r24, Y+12	; 0x0c
    1444:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	8c 85       	ldd	r24, Y+12	; 0x0c
    144c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
    1458:	8d 85       	ldd	r24, Y+13	; 0x0d
    145a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <digitalRead>
    145e:	89 2b       	or	r24, r25
    1460:	59 f4       	brne	.+22     	; 0x1478 <_ZN7MFRC5228PCD_InitEv+0x3e>
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    146a:	62 e3       	ldi	r22, 0x32	; 50
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 72 19 	call	0x32e4	; 0x32e4 <delay>
    1476:	02 c0       	rjmp	.+4      	; 0x147c <_ZN7MFRC5228PCD_InitEv+0x42>
    1478:	ce 01       	movw	r24, r28
    147a:	b8 df       	rcall	.-144    	; 0x13ec <_ZN7MFRC5229PCD_ResetEv>
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	64 e5       	ldi	r22, 0x54	; 84
    1480:	ce 01       	movw	r24, r28
    1482:	dd de       	rcall	.-582    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1484:	49 ea       	ldi	r20, 0xA9	; 169
    1486:	66 e5       	ldi	r22, 0x56	; 86
    1488:	ce 01       	movw	r24, r28
    148a:	d9 de       	rcall	.-590    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    148c:	43 e0       	ldi	r20, 0x03	; 3
    148e:	68 e5       	ldi	r22, 0x58	; 88
    1490:	ce 01       	movw	r24, r28
    1492:	d5 de       	rcall	.-598    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1494:	48 ee       	ldi	r20, 0xE8	; 232
    1496:	6a e5       	ldi	r22, 0x5A	; 90
    1498:	ce 01       	movw	r24, r28
    149a:	d1 de       	rcall	.-606    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    149c:	40 e4       	ldi	r20, 0x40	; 64
    149e:	6a e2       	ldi	r22, 0x2A	; 42
    14a0:	ce 01       	movw	r24, r28
    14a2:	cd de       	rcall	.-614    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    14a4:	4d e3       	ldi	r20, 0x3D	; 61
    14a6:	62 e2       	ldi	r22, 0x22	; 34
    14a8:	ce 01       	movw	r24, r28
    14aa:	c9 de       	rcall	.-622    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    14ac:	ce 01       	movw	r24, r28
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	b0 cf       	rjmp	.-160    	; 0x1414 <_ZN7MFRC52213PCD_AntennaOnEv>

000014b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    14b4:	2f 92       	push	r2
    14b6:	3f 92       	push	r3
    14b8:	4f 92       	push	r4
    14ba:	5f 92       	push	r5
    14bc:	6f 92       	push	r6
    14be:	7f 92       	push	r7
    14c0:	8f 92       	push	r8
    14c2:	9f 92       	push	r9
    14c4:	af 92       	push	r10
    14c6:	bf 92       	push	r11
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	1f 92       	push	r1
    14da:	1f 92       	push	r1
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	3c 01       	movw	r6, r24
    14e2:	96 2e       	mov	r9, r22
    14e4:	34 2e       	mov	r3, r20
    14e6:	29 01       	movw	r4, r18
    14e8:	a1 14       	cp	r10, r1
    14ea:	b1 04       	cpc	r11, r1
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x40>
    14ee:	f5 01       	movw	r30, r10
    14f0:	40 81       	ld	r20, Z
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x42>
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	24 2e       	mov	r2, r20
    14f8:	f0 e1       	ldi	r31, 0x10	; 16
    14fa:	8f 9e       	mul	r8, r31
    14fc:	20 0c       	add	r2, r0
    14fe:	11 24       	eor	r1, r1
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	62 e0       	ldi	r22, 0x02	; 2
    1504:	c3 01       	movw	r24, r6
    1506:	9b de       	rcall	.-714    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	68 e0       	ldi	r22, 0x08	; 8
    150c:	c3 01       	movw	r24, r6
    150e:	97 de       	rcall	.-722    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	64 e1       	ldi	r22, 0x14	; 20
    1514:	c3 01       	movw	r24, r6
    1516:	03 df       	rcall	.-506    	; 0x131e <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    1518:	92 01       	movw	r18, r4
    151a:	40 2f       	mov	r20, r16
    151c:	62 e1       	ldi	r22, 0x12	; 18
    151e:	c3 01       	movw	r24, r6
    1520:	aa de       	rcall	.-684    	; 0x1276 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    1522:	42 2d       	mov	r20, r2
    1524:	6a e1       	ldi	r22, 0x1A	; 26
    1526:	c3 01       	movw	r24, r6
    1528:	8a de       	rcall	.-748    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    152a:	49 2d       	mov	r20, r9
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	c3 01       	movw	r24, r6
    1530:	86 de       	rcall	.-756    	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    1532:	8c e0       	ldi	r24, 0x0C	; 12
    1534:	98 12       	cpse	r9, r24
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x8c>
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	6a e1       	ldi	r22, 0x1A	; 26
    153c:	c3 01       	movw	r24, r6
    153e:	ef de       	rcall	.-546    	; 0x131e <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    1540:	80 ed       	ldi	r24, 0xD0	; 208
    1542:	48 2e       	mov	r4, r24
    1544:	87 e0       	ldi	r24, 0x07	; 7
    1546:	58 2e       	mov	r5, r24
    1548:	68 e0       	ldi	r22, 0x08	; 8
    154a:	c3 01       	movw	r24, r6
    154c:	c4 de       	rcall	.-632    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    154e:	98 2f       	mov	r25, r24
    1550:	93 21       	and	r25, r3
    1552:	39 f4       	brne	.+14     	; 0x1562 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xae>
    1554:	80 fd       	sbrc	r24, 0
    1556:	5b c0       	rjmp	.+182    	; 0x160e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15a>
    1558:	e1 e0       	ldi	r30, 0x01	; 1
    155a:	4e 1a       	sub	r4, r30
    155c:	51 08       	sbc	r5, r1
    155e:	a1 f7       	brne	.-24     	; 0x1548 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x94>
    1560:	56 c0       	rjmp	.+172    	; 0x160e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15a>
    1562:	6c e0       	ldi	r22, 0x0C	; 12
    1564:	c3 01       	movw	r24, r6
    1566:	b7 de       	rcall	.-658    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    1568:	98 2e       	mov	r9, r24
    156a:	83 71       	andi	r24, 0x13	; 19
    156c:	09 f0       	breq	.+2      	; 0x1570 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    156e:	51 c0       	rjmp	.+162    	; 0x1612 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15e>
    1570:	e1 14       	cp	r14, r1
    1572:	f1 04       	cpc	r15, r1
    1574:	e1 f0       	breq	.+56     	; 0x15ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xfa>
    1576:	c1 14       	cp	r12, r1
    1578:	d1 04       	cpc	r13, r1
    157a:	c9 f0       	breq	.+50     	; 0x15ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xfa>
    157c:	64 e1       	ldi	r22, 0x14	; 20
    157e:	c3 01       	movw	r24, r6
    1580:	aa de       	rcall	.-684    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    1582:	f6 01       	movw	r30, r12
    1584:	90 81       	ld	r25, Z
    1586:	98 17       	cp	r25, r24
    1588:	08 f4       	brcc	.+2      	; 0x158c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd8>
    158a:	45 c0       	rjmp	.+138    	; 0x1616 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x162>
    158c:	80 83       	st	Z, r24
    158e:	08 2d       	mov	r16, r8
    1590:	97 01       	movw	r18, r14
    1592:	48 2f       	mov	r20, r24
    1594:	62 e1       	ldi	r22, 0x12	; 18
    1596:	c3 01       	movw	r24, r6
    1598:	bd de       	rcall	.-646    	; 0x1314 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    159a:	68 e1       	ldi	r22, 0x18	; 24
    159c:	c3 01       	movw	r24, r6
    159e:	9b de       	rcall	.-714    	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    15a0:	18 2f       	mov	r17, r24
    15a2:	17 70       	andi	r17, 0x07	; 7
    15a4:	a1 14       	cp	r10, r1
    15a6:	b1 04       	cpc	r11, r1
    15a8:	11 f0       	breq	.+4      	; 0x15ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xfa>
    15aa:	f5 01       	movw	r30, r10
    15ac:	10 83       	st	Z, r17
    15ae:	93 fc       	sbrc	r9, 3
    15b0:	34 c0       	rjmp	.+104    	; 0x161a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    15b2:	e1 14       	cp	r14, r1
    15b4:	f1 04       	cpc	r15, r1
    15b6:	99 f1       	breq	.+102    	; 0x161e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16a>
    15b8:	c1 14       	cp	r12, r1
    15ba:	d1 04       	cpc	r13, r1
    15bc:	81 f1       	breq	.+96     	; 0x161e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16a>
    15be:	88 8d       	ldd	r24, Y+24	; 0x18
    15c0:	88 23       	and	r24, r24
    15c2:	69 f1       	breq	.+90     	; 0x161e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16a>
    15c4:	f6 01       	movw	r30, r12
    15c6:	40 81       	ld	r20, Z
    15c8:	41 30       	cpi	r20, 0x01	; 1
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x120>
    15cc:	14 30       	cpi	r17, 0x04	; 4
    15ce:	49 f5       	brne	.+82     	; 0x1622 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16e>
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	28 c0       	rjmp	.+80     	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    15d4:	42 30       	cpi	r20, 0x02	; 2
    15d6:	28 f1       	brcs	.+74     	; 0x1622 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16e>
    15d8:	11 11       	cpse	r17, r1
    15da:	23 c0       	rjmp	.+70     	; 0x1622 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16e>
    15dc:	42 50       	subi	r20, 0x02	; 2
    15de:	9e 01       	movw	r18, r28
    15e0:	2f 5f       	subi	r18, 0xFF	; 255
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	b7 01       	movw	r22, r14
    15e6:	c3 01       	movw	r24, r6
    15e8:	bd de       	rcall	.-646    	; 0x1364 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    15ea:	81 11       	cpse	r24, r1
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    15ee:	f6 01       	movw	r30, r12
    15f0:	80 81       	ld	r24, Z
    15f2:	e8 0e       	add	r14, r24
    15f4:	f1 1c       	adc	r15, r1
    15f6:	f7 01       	movw	r30, r14
    15f8:	32 97       	sbiw	r30, 0x02	; 2
    15fa:	90 81       	ld	r25, Z
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	98 13       	cpse	r25, r24
    1600:	10 c0       	rjmp	.+32     	; 0x1622 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16e>
    1602:	31 96       	adiw	r30, 0x01	; 1
    1604:	90 81       	ld	r25, Z
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	98 13       	cpse	r25, r24
    160a:	0b c0       	rjmp	.+22     	; 0x1622 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16e>
    160c:	08 c0       	rjmp	.+16     	; 0x161e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16a>
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    1622:	87 e0       	ldi	r24, 0x07	; 7
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	bf 90       	pop	r11
    163a:	af 90       	pop	r10
    163c:	9f 90       	pop	r9
    163e:	8f 90       	pop	r8
    1640:	7f 90       	pop	r7
    1642:	6f 90       	pop	r6
    1644:	5f 90       	pop	r5
    1646:	4f 90       	pop	r4
    1648:	3f 90       	pop	r3
    164a:	2f 90       	pop	r2
    164c:	08 95       	ret

0000164e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    164e:	8f 92       	push	r8
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	af 92       	push	r10
    1662:	8c 2c       	mov	r8, r12
    1664:	57 01       	movw	r10, r14
    1666:	68 01       	movw	r12, r16
    1668:	79 01       	movw	r14, r18
    166a:	04 2f       	mov	r16, r20
    166c:	9b 01       	movw	r18, r22
    166e:	40 e3       	ldi	r20, 0x30	; 48
    1670:	6c e0       	ldi	r22, 0x0C	; 12
    1672:	20 df       	rcall	.-448    	; 0x14b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    1674:	0f 90       	pop	r0
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	8f 90       	pop	r8
    1688:	08 95       	ret

0000168a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	cf 92       	push	r12
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	1f 92       	push	r1
    16a8:	1f 92       	push	r1
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	6a 83       	std	Y+2, r22	; 0x02
    16b0:	41 15       	cp	r20, r1
    16b2:	51 05       	cpc	r21, r1
    16b4:	29 f1       	breq	.+74     	; 0x1700 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    16b6:	f9 01       	movw	r30, r18
    16b8:	60 81       	ld	r22, Z
    16ba:	62 30       	cpi	r22, 0x02	; 2
    16bc:	08 f1       	brcs	.+66     	; 0x1700 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    16be:	49 01       	movw	r8, r18
    16c0:	2a 01       	movw	r4, r20
    16c2:	3c 01       	movw	r6, r24
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	6c e1       	ldi	r22, 0x1C	; 28
    16c8:	3b de       	rcall	.-906    	; 0x1340 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    16ca:	87 e0       	ldi	r24, 0x07	; 7
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	a1 2c       	mov	r10, r1
    16d0:	c1 2c       	mov	r12, r1
    16d2:	ce 01       	movw	r24, r28
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	7c 01       	movw	r14, r24
    16d8:	84 01       	movw	r16, r8
    16da:	92 01       	movw	r18, r4
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	be 01       	movw	r22, r28
    16e0:	6e 5f       	subi	r22, 0xFE	; 254
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	c3 01       	movw	r24, r6
    16e6:	b3 df       	rcall	.-154    	; 0x164e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    16e8:	81 11       	cpse	r24, r1
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    16ec:	f4 01       	movw	r30, r8
    16ee:	80 81       	ld	r24, Z
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	41 f4       	brne	.+16     	; 0x1704 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7a>
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	99 81       	ldd	r25, Y+1	; 0x01
    16f8:	91 11       	cpse	r25, r1
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	cf 90       	pop	r12
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	08 95       	ret

00001728 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    1728:	9a 01       	movw	r18, r20
    172a:	ab 01       	movw	r20, r22
    172c:	66 e2       	ldi	r22, 0x26	; 38
    172e:	ad cf       	rjmp	.-166    	; 0x168a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00001730 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    1730:	2f 92       	push	r2
    1732:	3f 92       	push	r3
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	2c 97       	sbiw	r28, 0x0c	; 12
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	41 35       	cpi	r20, 0x51	; 81
    1766:	08 f0       	brcs	.+2      	; 0x176a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    1768:	01 c1       	rjmp	.+514    	; 0x196c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23c>
    176a:	34 2e       	mov	r3, r20
    176c:	3b 01       	movw	r6, r22
    176e:	4c 01       	movw	r8, r24
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	6c e1       	ldi	r22, 0x1C	; 28
    1774:	e5 dd       	rcall	.-1078   	; 0x1340 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    1776:	22 24       	eor	r2, r2
    1778:	23 94       	inc	r2
    177a:	22 e0       	ldi	r18, 0x02	; 2
    177c:	22 16       	cp	r2, r18
    177e:	91 f0       	breq	.+36     	; 0x17a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x74>
    1780:	33 e0       	ldi	r19, 0x03	; 3
    1782:	23 16       	cp	r2, r19
    1784:	e1 f0       	breq	.+56     	; 0x17be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	28 12       	cpse	r2, r24
    178a:	f4 c0       	rjmp	.+488    	; 0x1974 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x244>
    178c:	83 e9       	ldi	r24, 0x93	; 147
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	33 20       	and	r3, r3
    1792:	d1 f0       	breq	.+52     	; 0x17c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x98>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	f3 01       	movw	r30, r6
    1798:	90 81       	ld	r25, Z
    179a:	95 30       	cpi	r25, 0x05	; 5
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	b1 2c       	mov	r11, r1
    17a2:	17 c0       	rjmp	.+46     	; 0x17d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    17a4:	f5 e9       	ldi	r31, 0x95	; 149
    17a6:	f9 83       	std	Y+1, r31	; 0x01
    17a8:	33 20       	and	r3, r3
    17aa:	81 f0       	breq	.+32     	; 0x17cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9c>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	f3 01       	movw	r30, r6
    17b0:	90 81       	ld	r25, Z
    17b2:	98 30       	cpi	r25, 0x08	; 8
    17b4:	08 f4       	brcc	.+2      	; 0x17b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	43 e0       	ldi	r20, 0x03	; 3
    17ba:	b4 2e       	mov	r11, r20
    17bc:	0a c0       	rjmp	.+20     	; 0x17d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    17be:	87 e9       	ldi	r24, 0x97	; 151
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	36 e0       	ldi	r19, 0x06	; 6
    17c4:	b3 2e       	mov	r11, r19
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    17c8:	b1 2c       	mov	r11, r1
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    17cc:	23 e0       	ldi	r18, 0x03	; 3
    17ce:	b2 2e       	mov	r11, r18
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	d3 2c       	mov	r13, r3
    17d4:	f8 e0       	ldi	r31, 0x08	; 8
    17d6:	bf 9e       	mul	r11, r31
    17d8:	d0 18       	sub	r13, r0
    17da:	11 24       	eor	r1, r1
    17dc:	d7 fc       	sbrc	r13, 7
    17de:	d1 2c       	mov	r13, r1
    17e0:	88 23       	and	r24, r24
    17e2:	21 f0       	breq	.+8      	; 0x17ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbc>
    17e4:	98 e8       	ldi	r25, 0x88	; 136
    17e6:	9b 83       	std	Y+3, r25	; 0x03
    17e8:	33 e0       	ldi	r19, 0x03	; 3
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    17ec:	32 e0       	ldi	r19, 0x02	; 2
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	9d 2d       	mov	r25, r13
    17f2:	97 70       	andi	r25, 0x07	; 7
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc8>
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	9d 2d       	mov	r25, r13
    17fa:	95 95       	asr	r25
    17fc:	95 95       	asr	r25
    17fe:	95 95       	asr	r25
    1800:	29 0f       	add	r18, r25
    1802:	31 f4       	brne	.+12     	; 0x1810 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe0>
    1804:	88 23       	and	r24, r24
    1806:	09 f4       	brne	.+2      	; 0x180a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xda>
    1808:	8e c0       	rjmp	.+284    	; 0x1926 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f6>
    180a:	28 e0       	ldi	r18, 0x08	; 8
    180c:	d2 0e       	add	r13, r18
    180e:	8b c0       	rjmp	.+278    	; 0x1926 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f6>
    1810:	81 11       	cpse	r24, r1
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe8>
    1814:	94 e0       	ldi	r25, 0x04	; 4
    1816:	01 c0       	rjmp	.+2      	; 0x181a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	29 17       	cp	r18, r25
    181c:	08 f4       	brcc	.+2      	; 0x1820 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf0>
    181e:	92 2f       	mov	r25, r18
    1820:	eb 2d       	mov	r30, r11
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	e6 0d       	add	r30, r6
    1828:	f7 1d       	adc	r31, r7
    182a:	23 2f       	mov	r18, r19
    182c:	41 91       	ld	r20, Z+
    182e:	a1 e0       	ldi	r26, 0x01	; 1
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ac 0f       	add	r26, r28
    1834:	bd 1f       	adc	r27, r29
    1836:	a2 0f       	add	r26, r18
    1838:	b1 1d       	adc	r27, r1
    183a:	4c 93       	st	X, r20
    183c:	2f 5f       	subi	r18, 0xFF	; 255
    183e:	42 2f       	mov	r20, r18
    1840:	43 1b       	sub	r20, r19
    1842:	49 17       	cp	r20, r25
    1844:	98 f3       	brcs	.-26     	; 0x182c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfc>
    1846:	de cf       	rjmp	.-68     	; 0x1804 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd4>
    1848:	81 11       	cpse	r24, r1
    184a:	d9 c0       	rjmp	.+434    	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    184c:	3f e1       	ldi	r19, 0x1F	; 31
    184e:	3d 15       	cp	r19, r13
    1850:	0c f4       	brge	.+2      	; 0x1854 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x124>
    1852:	92 c0       	rjmp	.+292    	; 0x1978 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x248>
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	d8 2e       	mov	r13, r24
    1858:	80 e7       	ldi	r24, 0x70	; 112
    185a:	8a 83       	std	Y+2, r24	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	89 27       	eor	r24, r25
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	89 27       	eor	r24, r25
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	89 27       	eor	r24, r25
    186a:	8f 83       	std	Y+7, r24	; 0x07
    186c:	9e 01       	movw	r18, r28
    186e:	28 5f       	subi	r18, 0xF8	; 248
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	47 e0       	ldi	r20, 0x07	; 7
    1874:	be 01       	movw	r22, r28
    1876:	6f 5f       	subi	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	c4 01       	movw	r24, r8
    187c:	73 dd       	rcall	.-1306   	; 0x1364 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    187e:	81 11       	cpse	r24, r1
    1880:	be c0       	rjmp	.+380    	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    1882:	1b 86       	std	Y+11, r1	; 0x0b
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	9a 87       	std	Y+10, r25	; 0x0a
    1888:	fe 01       	movw	r30, r28
    188a:	37 96       	adiw	r30, 0x07	; 7
    188c:	2f 01       	movw	r4, r30
    188e:	f9 e0       	ldi	r31, 0x09	; 9
    1890:	fc 87       	std	Y+12, r31	; 0x0c
    1892:	cb 84       	ldd	r12, Y+11	; 0x0b
    1894:	4c 2d       	mov	r20, r12
    1896:	42 95       	swap	r20
    1898:	40 7f       	andi	r20, 0xF0	; 240
    189a:	4c 0d       	add	r20, r12
    189c:	6a e1       	ldi	r22, 0x1A	; 26
    189e:	c4 01       	movw	r24, r8
    18a0:	ce dc       	rcall	.-1636   	; 0x123e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    18a2:	a1 2c       	mov	r10, r1
    18a4:	fe 01       	movw	r30, r28
    18a6:	3b 96       	adiw	r30, 0x0b	; 11
    18a8:	7f 01       	movw	r14, r30
    18aa:	8e 01       	movw	r16, r28
    18ac:	06 5f       	subi	r16, 0xF6	; 246
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	92 01       	movw	r18, r4
    18b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    18b4:	be 01       	movw	r22, r28
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	c4 01       	movw	r24, r8
    18bc:	c8 de       	rcall	.-624    	; 0x164e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    18c2:	c2 cf       	rjmp	.-124    	; 0x1848 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x118>
    18c4:	6c e1       	ldi	r22, 0x1C	; 28
    18c6:	c4 01       	movw	r24, r8
    18c8:	06 dd       	rcall	.-1524   	; 0x12d6 <_ZN7MFRC52216PCD_ReadRegisterEh>
    18ca:	85 fd       	sbrc	r24, 5
    18cc:	51 c0       	rjmp	.+162    	; 0x1970 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x240>
    18ce:	8f 71       	andi	r24, 0x1F	; 31
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4d 2d       	mov	r20, r13
    18da:	dd 0c       	add	r13, r13
    18dc:	55 0b       	sbc	r21, r21
    18de:	42 17       	cp	r20, r18
    18e0:	53 07       	cpc	r21, r19
    18e2:	0c f0       	brlt	.+2      	; 0x18e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1b6>
    18e4:	47 c0       	rjmp	.+142    	; 0x1974 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x244>
    18e6:	d8 2e       	mov	r13, r24
    18e8:	c9 01       	movw	r24, r18
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	87 70       	andi	r24, 0x07	; 7
    18ee:	99 27       	eor	r25, r25
    18f0:	25 95       	asr	r18
    18f2:	25 95       	asr	r18
    18f4:	25 95       	asr	r18
    18f6:	31 e0       	ldi	r19, 0x01	; 1
    18f8:	32 0f       	add	r19, r18
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	81 11       	cpse	r24, r1
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1d2>
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	23 0f       	add	r18, r19
    1904:	e1 e0       	ldi	r30, 0x01	; 1
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	ec 0f       	add	r30, r28
    190a:	fd 1f       	adc	r31, r29
    190c:	e2 0f       	add	r30, r18
    190e:	f1 1d       	adc	r31, r1
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ea>
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e6>
    191e:	c9 01       	movw	r24, r18
    1920:	90 81       	ld	r25, Z
    1922:	89 2b       	or	r24, r25
    1924:	80 83       	st	Z, r24
    1926:	3f e1       	ldi	r19, 0x1F	; 31
    1928:	3d 15       	cp	r19, r13
    192a:	0c f4       	brge	.+2      	; 0x192e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    192c:	95 cf       	rjmp	.-214    	; 0x1858 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x128>
    192e:	9d 2d       	mov	r25, r13
    1930:	97 70       	andi	r25, 0x07	; 7
    1932:	9b 87       	std	Y+11, r25	; 0x0b
    1934:	8d 2d       	mov	r24, r13
    1936:	85 95       	asr	r24
    1938:	85 95       	asr	r24
    193a:	85 95       	asr	r24
    193c:	8e 5f       	subi	r24, 0xFE	; 254
    193e:	29 2f       	mov	r18, r25
    1940:	30 e1       	ldi	r19, 0x10	; 16
    1942:	83 9f       	mul	r24, r19
    1944:	20 0d       	add	r18, r0
    1946:	11 24       	eor	r1, r1
    1948:	2a 83       	std	Y+2, r18	; 0x02
    194a:	21 e0       	ldi	r18, 0x01	; 1
    194c:	91 11       	cpse	r25, r1
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x222>
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	28 0f       	add	r18, r24
    1954:	2c 87       	std	Y+12, r18	; 0x0c
    1956:	44 24       	eor	r4, r4
    1958:	43 94       	inc	r4
    195a:	51 2c       	mov	r5, r1
    195c:	4c 0e       	add	r4, r28
    195e:	5d 1e       	adc	r5, r29
    1960:	48 0e       	add	r4, r24
    1962:	51 1c       	adc	r5, r1
    1964:	99 e0       	ldi	r25, 0x09	; 9
    1966:	98 1b       	sub	r25, r24
    1968:	9a 87       	std	Y+10, r25	; 0x0a
    196a:	93 cf       	rjmp	.-218    	; 0x1892 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x162>
    196c:	86 e0       	ldi	r24, 0x06	; 6
    196e:	47 c0       	rjmp	.+142    	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	45 c0       	rjmp	.+138    	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    1974:	85 e0       	ldi	r24, 0x05	; 5
    1976:	43 c0       	rjmp	.+134    	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 38       	cpi	r24, 0x88	; 136
    197c:	e9 f1       	breq	.+122    	; 0x19f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c8>
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	94 e0       	ldi	r25, 0x04	; 4
    1982:	eb 2d       	mov	r30, r11
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	31 96       	adiw	r30, 0x01	; 1
    1988:	e6 0d       	add	r30, r6
    198a:	f7 1d       	adc	r31, r7
    198c:	98 0f       	add	r25, r24
    198e:	a1 e0       	ldi	r26, 0x01	; 1
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ac 0f       	add	r26, r28
    1994:	bd 1f       	adc	r27, r29
    1996:	a8 0f       	add	r26, r24
    1998:	b1 1d       	adc	r27, r1
    199a:	2c 91       	ld	r18, X
    199c:	21 93       	st	Z+, r18
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	98 13       	cpse	r25, r24
    19a2:	f5 cf       	rjmp	.-22     	; 0x198e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25e>
    19a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	19 f5       	brne	.+70     	; 0x19f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c0>
    19aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ac:	81 11       	cpse	r24, r1
    19ae:	20 c0       	rjmp	.+64     	; 0x19f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c0>
    19b0:	9e 01       	movw	r18, r28
    19b2:	2d 5f       	subi	r18, 0xFD	; 253
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	b2 01       	movw	r22, r4
    19ba:	c4 01       	movw	r24, r8
    19bc:	d3 dc       	rcall	.-1626   	; 0x1364 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    19be:	81 11       	cpse	r24, r1
    19c0:	1e c0       	rjmp	.+60     	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	f2 01       	movw	r30, r4
    19c6:	81 81       	ldd	r24, Z+1	; 0x01
    19c8:	98 13       	cpse	r25, r24
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c4>
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	98 13       	cpse	r25, r24
    19d2:	10 c0       	rjmp	.+32     	; 0x19f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c4>
    19d4:	80 81       	ld	r24, Z
    19d6:	82 ff       	sbrs	r24, 2
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ae>
    19da:	23 94       	inc	r2
    19dc:	ce ce       	rjmp	.-612    	; 0x177a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4a>
    19de:	f3 01       	movw	r30, r6
    19e0:	83 87       	std	Z+11, r24	; 0x0b
    19e2:	82 2d       	mov	r24, r2
    19e4:	88 0f       	add	r24, r24
    19e6:	82 0d       	add	r24, r2
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	80 83       	st	Z, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    19f4:	87 e0       	ldi	r24, 0x07	; 7
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	c2 cf       	rjmp	.-124    	; 0x1982 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x252>
    19fe:	2c 96       	adiw	r28, 0x0c	; 12
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	7f 90       	pop	r7
    1a24:	6f 90       	pop	r6
    1a26:	5f 90       	pop	r5
    1a28:	4f 90       	pop	r4
    1a2a:	3f 90       	pop	r3
    1a2c:	2f 90       	pop	r2
    1a2e:	08 95       	ret

00001a30 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    1a3a:	22 e0       	ldi	r18, 0x02	; 2
    1a3c:	2b 83       	std	Y+3, r18	; 0x03
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    1a3e:	ae 01       	movw	r20, r28
    1a40:	4d 5f       	subi	r20, 0xFD	; 253
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	be 01       	movw	r22, r28
    1a46:	6f 5f       	subi	r22, 0xFF	; 255
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4a:	6e de       	rcall	.-804    	; 0x1728 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    1a4c:	98 2f       	mov	r25, r24
	return (result == STATUS_OK || result == STATUS_COLLISION);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	99 23       	and	r25, r25
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x2a>
    1a54:	92 30       	cpi	r25, 0x02	; 2
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x2a>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
	MFRC522::StatusCode result = PICC_Select(&uid);
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	bc 01       	movw	r22, r24
    1a6a:	62 de       	rcall	.-828    	; 0x1730 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	81 11       	cpse	r24, r1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
} // End 
    1a72:	89 2f       	mov	r24, r25
    1a74:	08 95       	ret

00001a76 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	7b 01       	movw	r14, r22
    1a88:	6a 01       	movw	r12, r20
    1a8a:	08 2f       	mov	r16, r24
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	e8 01       	movw	r28, r16
    1a90:	c4 50       	subi	r28, 0x04	; 4
    1a92:	dd 4f       	sbci	r29, 0xFD	; 253
    1a94:	88 81       	ld	r24, Y
    1a96:	87 ff       	sbrs	r24, 7
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	11 82       	std	Z+1, r1	; 0x01
    1a9e:	10 82       	st	Z, r1
    1aa0:	24 c0       	rjmp	.+72     	; 0x1aea <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    1aa2:	8c e0       	ldi	r24, 0x0C	; 12
    1aa4:	80 9f       	mul	r24, r16
    1aa6:	90 01       	movw	r18, r0
    1aa8:	81 9f       	mul	r24, r17
    1aaa:	30 0d       	add	r19, r0
    1aac:	11 24       	eor	r1, r1
    1aae:	88 81       	ld	r24, Y
    1ab0:	a9 01       	movw	r20, r18
    1ab2:	48 0f       	add	r20, r24
    1ab4:	51 1d       	adc	r21, r1
    1ab6:	87 fd       	sbrc	r24, 7
    1ab8:	5a 95       	dec	r21
    1aba:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <ServoCount>
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	48 17       	cp	r20, r24
    1ac2:	59 07       	cpc	r21, r25
    1ac4:	94 f4       	brge	.+36     	; 0x1aea <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    1ac6:	88 81       	ld	r24, Y
    1ac8:	a9 01       	movw	r20, r18
    1aca:	48 0f       	add	r20, r24
    1acc:	51 1d       	adc	r21, r1
    1ace:	87 fd       	sbrc	r24, 7
    1ad0:	5a 95       	dec	r21
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	fa 01       	movw	r30, r20
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	8e 0f       	add	r24, r30
    1adc:	9f 1f       	adc	r25, r31
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e0 50       	subi	r30, 0x00	; 0
    1ae2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae4:	80 81       	ld	r24, Z
    1ae6:	86 fd       	sbrc	r24, 6
    1ae8:	19 c0       	rjmp	.+50     	; 0x1b1c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
    1aea:	88 81       	ld	r24, Y
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	88 83       	st	Y, r24
    1af0:	8c e0       	ldi	r24, 0x0C	; 12
    1af2:	80 9f       	mul	r24, r16
    1af4:	90 01       	movw	r18, r0
    1af6:	81 9f       	mul	r24, r17
    1af8:	30 0d       	add	r19, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	88 81       	ld	r24, Y
    1afe:	a9 01       	movw	r20, r18
    1b00:	48 0f       	add	r20, r24
    1b02:	51 1d       	adc	r21, r1
    1b04:	87 fd       	sbrc	r24, 7
    1b06:	5a 95       	dec	r21
    1b08:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <ServoCount>
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	48 17       	cp	r20, r24
    1b10:	59 07       	cpc	r21, r25
    1b12:	bc f4       	brge	.+46     	; 0x1b42 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    1b14:	88 81       	ld	r24, Y
    1b16:	8c 30       	cpi	r24, 0x0C	; 12
    1b18:	44 f1       	brlt	.+80     	; 0x1b6a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf4>
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    1b1c:	88 81       	ld	r24, Y
    1b1e:	28 0f       	add	r18, r24
    1b20:	31 1d       	adc	r19, r1
    1b22:	87 fd       	sbrc	r24, 7
    1b24:	3a 95       	dec	r19
    1b26:	f9 01       	movw	r30, r18
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	2e 0f       	add	r18, r30
    1b2e:	3f 1f       	adc	r19, r31
    1b30:	f9 01       	movw	r30, r18
    1b32:	e0 50       	subi	r30, 0x00	; 0
    1b34:	fd 4f       	sbci	r31, 0xFD	; 253
    1b36:	80 81       	ld	r24, Z
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	8f 73       	andi	r24, 0x3F	; 63
    1b3c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    1b40:	d4 cf       	rjmp	.-88     	; 0x1aea <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    1b42:	f7 01       	movw	r30, r14
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	04 96       	adiw	r24, 0x04	; 4
    1b4a:	80 34       	cpi	r24, 0x40	; 64
    1b4c:	9c 49       	sbci	r25, 0x9C	; 156
    1b4e:	18 f4       	brcc	.+6      	; 0x1b56 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe0>
    1b50:	80 e4       	ldi	r24, 0x40	; 64
    1b52:	9c e9       	ldi	r25, 0x9C	; 156
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe8>
    1b56:	f7 01       	movw	r30, r14
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	04 96       	adiw	r24, 0x04	; 4
    1b5e:	f6 01       	movw	r30, r12
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	88 83       	st	Y, r24
    1b68:	45 c0       	rjmp	.+138    	; 0x1bf4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	40 81       	ld	r20, Z
    1b6e:	51 81       	ldd	r21, Z+1	; 0x01
    1b70:	88 81       	ld	r24, Y
    1b72:	b9 01       	movw	r22, r18
    1b74:	68 0f       	add	r22, r24
    1b76:	71 1d       	adc	r23, r1
    1b78:	87 fd       	sbrc	r24, 7
    1b7a:	7a 95       	dec	r23
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	fb 01       	movw	r30, r22
    1b80:	ee 0f       	add	r30, r30
    1b82:	ff 1f       	adc	r31, r31
    1b84:	8e 0f       	add	r24, r30
    1b86:	9f 1f       	adc	r25, r31
    1b88:	fc 01       	movw	r30, r24
    1b8a:	e0 50       	subi	r30, 0x00	; 0
    1b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8e:	81 81       	ldd	r24, Z+1	; 0x01
    1b90:	92 81       	ldd	r25, Z+2	; 0x02
    1b92:	84 0f       	add	r24, r20
    1b94:	95 1f       	adc	r25, r21
    1b96:	f6 01       	movw	r30, r12
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	88 81       	ld	r24, Y
    1b9e:	a9 01       	movw	r20, r18
    1ba0:	48 0f       	add	r20, r24
    1ba2:	51 1d       	adc	r21, r1
    1ba4:	87 fd       	sbrc	r24, 7
    1ba6:	5a 95       	dec	r21
    1ba8:	ca 01       	movw	r24, r20
    1baa:	fa 01       	movw	r30, r20
    1bac:	ee 0f       	add	r30, r30
    1bae:	ff 1f       	adc	r31, r31
    1bb0:	8e 0f       	add	r24, r30
    1bb2:	9f 1f       	adc	r25, r31
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	e0 50       	subi	r30, 0x00	; 0
    1bb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bba:	80 81       	ld	r24, Z
    1bbc:	86 ff       	sbrs	r24, 6
    1bbe:	1a c0       	rjmp	.+52     	; 0x1bf4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    1bc0:	88 81       	ld	r24, Y
    1bc2:	28 0f       	add	r18, r24
    1bc4:	31 1d       	adc	r19, r1
    1bc6:	87 fd       	sbrc	r24, 7
    1bc8:	3a 95       	dec	r19
    1bca:	f9 01       	movw	r30, r18
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	2e 0f       	add	r18, r30
    1bd2:	3f 1f       	adc	r19, r31
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	e0 50       	subi	r30, 0x00	; 0
    1bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bda:	80 81       	ld	r24, Z
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	8f 73       	andi	r24, 0x3F	; 63
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	ef 90       	pop	r14
    1bec:	df 90       	pop	r13
    1bee:	cf 90       	pop	r12
    1bf0:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <digitalWrite>
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	08 95       	ret

00001c06 <__vector_17>:
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
    1c2c:	48 e8       	ldi	r20, 0x88	; 136
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	64 e8       	ldi	r22, 0x84	; 132
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	1f df       	rcall	.-450    	; 0x1a76 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    1c38:	ff 91       	pop	r31
    1c3a:	ef 91       	pop	r30
    1c3c:	bf 91       	pop	r27
    1c3e:	af 91       	pop	r26
    1c40:	9f 91       	pop	r25
    1c42:	8f 91       	pop	r24
    1c44:	7f 91       	pop	r23
    1c46:	6f 91       	pop	r22
    1c48:	5f 91       	pop	r21
    1c4a:	4f 91       	pop	r20
    1c4c:	3f 91       	pop	r19
    1c4e:	2f 91       	pop	r18
    1c50:	0f 90       	pop	r0
    1c52:	0b be       	out	0x3b, r0	; 59
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_32>:
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	0b b6       	in	r0, 0x3b	; 59
    1c6a:	0f 92       	push	r0
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
    1c84:	48 e9       	ldi	r20, 0x98	; 152
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	64 e9       	ldi	r22, 0x94	; 148
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	f3 de       	rcall	.-538    	; 0x1a76 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0b be       	out	0x3b, r0	; 59
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_42>:
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	0b b6       	in	r0, 0x3b	; 59
    1cc2:	0f 92       	push	r0
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	48 ea       	ldi	r20, 0xA8	; 168
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	64 ea       	ldi	r22, 0xA4	; 164
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	c7 de       	rcall	.-626    	; 0x1a76 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	0b be       	out	0x3b, r0	; 59
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <__vector_47>:
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	0b b6       	in	r0, 0x3b	; 59
    1d1a:	0f 92       	push	r0
    1d1c:	2f 93       	push	r18
    1d1e:	3f 93       	push	r19
    1d20:	4f 93       	push	r20
    1d22:	5f 93       	push	r21
    1d24:	6f 93       	push	r22
    1d26:	7f 93       	push	r23
    1d28:	8f 93       	push	r24
    1d2a:	9f 93       	push	r25
    1d2c:	af 93       	push	r26
    1d2e:	bf 93       	push	r27
    1d30:	ef 93       	push	r30
    1d32:	ff 93       	push	r31
    1d34:	48 e2       	ldi	r20, 0x28	; 40
    1d36:	51 e0       	ldi	r21, 0x01	; 1
    1d38:	64 e2       	ldi	r22, 0x24	; 36
    1d3a:	71 e0       	ldi	r23, 0x01	; 1
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	9b de       	rcall	.-714    	; 0x1a76 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	7f 91       	pop	r23
    1d4e:	6f 91       	pop	r22
    1d50:	5f 91       	pop	r21
    1d52:	4f 91       	pop	r20
    1d54:	3f 91       	pop	r19
    1d56:	2f 91       	pop	r18
    1d58:	0f 90       	pop	r0
    1d5a:	0b be       	out	0x3b, r0	; 59
    1d5c:	0f 90       	pop	r0
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	0f 90       	pop	r0
    1d62:	1f 90       	pop	r1
    1d64:	18 95       	reti

00001d66 <_ZN5ServoC1Ev>:
    1d66:	fc 01       	movw	r30, r24
    1d68:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <ServoCount>
    1d6c:	90 33       	cpi	r25, 0x30	; 48
    1d6e:	a0 f4       	brcc	.+40     	; 0x1d98 <_ZN5ServoC1Ev+0x32>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	89 0f       	add	r24, r25
    1d74:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <ServoCount>
    1d78:	90 83       	st	Z, r25
    1d7a:	89 2f       	mov	r24, r25
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	fc 01       	movw	r30, r24
    1d80:	ee 0f       	add	r30, r30
    1d82:	ff 1f       	adc	r31, r31
    1d84:	8e 0f       	add	r24, r30
    1d86:	9f 1f       	adc	r25, r31
    1d88:	fc 01       	movw	r30, r24
    1d8a:	e0 50       	subi	r30, 0x00	; 0
    1d8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8e:	88 eb       	ldi	r24, 0xB8	; 184
    1d90:	9b e0       	ldi	r25, 0x0B	; 11
    1d92:	92 83       	std	Z+2, r25	; 0x02
    1d94:	81 83       	std	Z+1, r24	; 0x01
    1d96:	08 95       	ret
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	80 83       	st	Z, r24
    1d9c:	08 95       	ret

00001d9e <_ZN5Servo6attachEiii>:
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ec 01       	movw	r28, r24
    1dae:	d6 2e       	mov	r13, r22
    1db0:	7a 01       	movw	r14, r20
    1db2:	89 01       	movw	r16, r18
    1db4:	88 81       	ld	r24, Y
    1db6:	80 33       	cpi	r24, 0x30	; 48
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <_ZN5Servo6attachEiii+0x1e>
    1dba:	68 c0       	rjmp	.+208    	; 0x1e8c <_ZN5Servo6attachEiii+0xee>
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	8d 2d       	mov	r24, r13
    1dc0:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
    1dc4:	88 81       	ld	r24, Y
    1dc6:	e8 2f       	mov	r30, r24
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	9f 01       	movw	r18, r30
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	e0 50       	subi	r30, 0x00	; 0
    1dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd8:	9d 2d       	mov	r25, r13
    1dda:	9f 73       	andi	r25, 0x3F	; 63
    1ddc:	20 81       	ld	r18, Z
    1dde:	20 7c       	andi	r18, 0xC0	; 192
    1de0:	d2 2e       	mov	r13, r18
    1de2:	d9 2a       	or	r13, r25
    1de4:	d0 82       	st	Z, r13
    1de6:	20 e2       	ldi	r18, 0x20	; 32
    1de8:	32 e0       	ldi	r19, 0x02	; 2
    1dea:	2e 19       	sub	r18, r14
    1dec:	3f 09       	sbc	r19, r15
    1dee:	37 ff       	sbrs	r19, 7
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <_ZN5Servo6attachEiii+0x58>
    1df2:	2d 5f       	subi	r18, 0xFD	; 253
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	35 95       	asr	r19
    1df8:	27 95       	ror	r18
    1dfa:	35 95       	asr	r19
    1dfc:	27 95       	ror	r18
    1dfe:	29 83       	std	Y+1, r18	; 0x01
    1e00:	20 e6       	ldi	r18, 0x60	; 96
    1e02:	39 e0       	ldi	r19, 0x09	; 9
    1e04:	20 1b       	sub	r18, r16
    1e06:	31 0b       	sbc	r19, r17
    1e08:	37 ff       	sbrs	r19, 7
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <_ZN5Servo6attachEiii+0x72>
    1e0c:	2d 5f       	subi	r18, 0xFD	; 253
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	35 95       	asr	r19
    1e12:	27 95       	ror	r18
    1e14:	35 95       	asr	r19
    1e16:	27 95       	ror	r18
    1e18:	2a 83       	std	Y+2, r18	; 0x02
    1e1a:	2c e0       	ldi	r18, 0x0C	; 12
    1e1c:	62 2f       	mov	r22, r18
    1e1e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodqi4>
    1e22:	28 9f       	mul	r18, r24
    1e24:	b0 01       	movw	r22, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	24 0f       	add	r18, r20
    1e30:	35 1f       	adc	r19, r21
    1e32:	f9 01       	movw	r30, r18
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	2e 0f       	add	r18, r30
    1e3a:	3f 1f       	adc	r19, r31
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	e0 50       	subi	r30, 0x00	; 0
    1e40:	fd 4f       	sbci	r31, 0xFD	; 253
    1e42:	90 81       	ld	r25, Z
    1e44:	96 fd       	sbrc	r25, 6
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <_ZN5Servo6attachEiii+0xd6>
    1e48:	4f 5f       	subi	r20, 0xFF	; 255
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	4c 30       	cpi	r20, 0x0C	; 12
    1e4e:	51 05       	cpc	r21, r1
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <_ZN5Servo6attachEiii+0x8e>
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	21 f5       	brne	.+72     	; 0x1e9e <_ZN5Servo6attachEiii+0x100>
    1e56:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    1e60:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    1e64:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    1e68:	b1 9a       	sbi	0x16, 1	; 22
    1e6a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    1e6e:	82 60       	ori	r24, 0x02	; 2
    1e70:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    1e74:	e8 81       	ld	r30, Y
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	cf 01       	movw	r24, r30
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	e8 0f       	add	r30, r24
    1e80:	f9 1f       	adc	r31, r25
    1e82:	e0 50       	subi	r30, 0x00	; 0
    1e84:	fd 4f       	sbci	r31, 0xFD	; 253
    1e86:	80 81       	ld	r24, Z
    1e88:	80 64       	ori	r24, 0x40	; 64
    1e8a:	80 83       	st	Z, r24
    1e8c:	88 81       	ld	r24, Y
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	08 95       	ret
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	61 f4       	brne	.+24     	; 0x1eba <_ZN5Servo6attachEiii+0x11c>
    1ea2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1ea6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    1eaa:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    1eae:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    1eb2:	88 bb       	out	0x18, r24	; 24
    1eb4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    1eb8:	dd cf       	rjmp	.-70     	; 0x1e74 <_ZN5Servo6attachEiii+0xd6>
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	69 f4       	brne	.+26     	; 0x1ed8 <_ZN5Servo6attachEiii+0x13a>
    1ebe:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
    1ec8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
    1ecc:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
    1ed0:	89 bb       	out	0x19, r24	; 25
    1ed2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    1ed6:	ce cf       	rjmp	.-100    	; 0x1e74 <_ZN5Servo6attachEiii+0xd6>
    1ed8:	81 11       	cpse	r24, r1
    1eda:	cc cf       	rjmp	.-104    	; 0x1e74 <_ZN5Servo6attachEiii+0xd6>
    1edc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    1ee6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
    1eea:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
    1eee:	8a bb       	out	0x1a, r24	; 26
    1ef0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>
    1ef4:	bf cf       	rjmp	.-130    	; 0x1e74 <_ZN5Servo6attachEiii+0xd6>

00001ef6 <_ZN5Servo6attachEi>:
    1ef6:	20 e6       	ldi	r18, 0x60	; 96
    1ef8:	39 e0       	ldi	r19, 0x09	; 9
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	52 e0       	ldi	r21, 0x02	; 2
    1efe:	4f cf       	rjmp	.-354    	; 0x1d9e <_ZN5Servo6attachEiii>

00001f00 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    1f00:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    1f02:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    1f04:	90 33       	cpi	r25, 0x30	; 48
    1f06:	88 f5       	brcc	.+98     	; 0x1f6a <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    1f08:	81 81       	ldd	r24, Z+1	; 0x01
    1f0a:	28 e8       	ldi	r18, 0x88	; 136
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	28 1b       	sub	r18, r24
    1f10:	31 09       	sbc	r19, r1
    1f12:	87 fd       	sbrc	r24, 7
    1f14:	33 95       	inc	r19
    1f16:	22 0f       	add	r18, r18
    1f18:	33 1f       	adc	r19, r19
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	62 17       	cp	r22, r18
    1f20:	73 07       	cpc	r23, r19
    1f22:	84 f0       	brlt	.+32     	; 0x1f44 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	48 e5       	ldi	r20, 0x58	; 88
    1f28:	52 e0       	ldi	r21, 0x02	; 2
    1f2a:	48 1b       	sub	r20, r24
    1f2c:	51 09       	sbc	r21, r1
    1f2e:	87 fd       	sbrc	r24, 7
    1f30:	53 95       	inc	r21
    1f32:	44 0f       	add	r20, r20
    1f34:	55 1f       	adc	r21, r21
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	46 17       	cp	r20, r22
    1f3e:	57 07       	cpc	r21, r23
    1f40:	0c f4       	brge	.+2      	; 0x1f44 <_ZN5Servo17writeMicrosecondsEi+0x44>
    1f42:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    1f44:	22 50       	subi	r18, 0x02	; 2
    1f46:	31 09       	sbc	r19, r1
    1f48:	22 0f       	add	r18, r18
    1f4a:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
    1f4c:	4f b7       	in	r20, 0x3f	; 63
    cli();
    1f4e:	f8 94       	cli
    servos[channel].ticks = value;
    1f50:	89 2f       	mov	r24, r25
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	fc 01       	movw	r30, r24
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	8e 0f       	add	r24, r30
    1f5c:	9f 1f       	adc	r25, r31
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e0 50       	subi	r30, 0x00	; 0
    1f62:	fd 4f       	sbci	r31, 0xFD	; 253
    1f64:	32 83       	std	Z+2, r19	; 0x02
    1f66:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
    1f68:	4f bf       	out	0x3f, r20	; 63
    1f6a:	08 95       	ret

00001f6c <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    1f82:	60 32       	cpi	r22, 0x20	; 32
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	78 07       	cpc	r23, r24
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <_ZN5Servo5writeEi+0x20>
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <__DATA_REGION_LENGTH__+0xa>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    1f8c:	77 fd       	sbrc	r23, 7
    1f8e:	06 c0       	rjmp	.+12     	; 0x1f9c <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
    1f90:	65 3b       	cpi	r22, 0xB5	; 181
    1f92:	71 05       	cpc	r23, r1
    1f94:	2c f0       	brlt	.+10     	; 0x1fa0 <_ZN5Servo5writeEi+0x34>
    1f96:	64 eb       	ldi	r22, 0xB4	; 180
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	28 e8       	ldi	r18, 0x88	; 136
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	59 01       	movw	r10, r18
    1fa8:	a8 1a       	sub	r10, r24
    1faa:	b1 08       	sbc	r11, r1
    1fac:	87 fd       	sbrc	r24, 7
    1fae:	b3 94       	inc	r11
    1fb0:	aa 0c       	add	r10, r10
    1fb2:	bb 1c       	adc	r11, r11
    1fb4:	aa 0c       	add	r10, r10
    1fb6:	bb 1c       	adc	r11, r11
    1fb8:	0b 2c       	mov	r0, r11
    1fba:	00 0c       	add	r0, r0
    1fbc:	cc 08       	sbc	r12, r12
    1fbe:	dd 08       	sbc	r13, r13
    1fc0:	07 2e       	mov	r0, r23
    1fc2:	00 0c       	add	r0, r0
    1fc4:	88 0b       	sbc	r24, r24
    1fc6:	99 0b       	sbc	r25, r25
    1fc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1fca:	08 e5       	ldi	r16, 0x58	; 88
    1fcc:	12 e0       	ldi	r17, 0x02	; 2
    1fce:	02 1b       	sub	r16, r18
    1fd0:	11 09       	sbc	r17, r1
    1fd2:	27 fd       	sbrc	r18, 7
    1fd4:	13 95       	inc	r17
    1fd6:	00 0f       	add	r16, r16
    1fd8:	11 1f       	adc	r17, r17
    1fda:	00 0f       	add	r16, r16
    1fdc:	11 1f       	adc	r17, r17
    1fde:	01 2e       	mov	r0, r17
    1fe0:	00 0c       	add	r0, r0
    1fe2:	22 0b       	sbc	r18, r18
    1fe4:	33 0b       	sbc	r19, r19
    1fe6:	3f 93       	push	r19
    1fe8:	2f 93       	push	r18
    1fea:	1f 93       	push	r17
    1fec:	0f 93       	push	r16
    1fee:	14 eb       	ldi	r17, 0xB4	; 180
    1ff0:	e1 2e       	mov	r14, r17
    1ff2:	f1 2c       	mov	r15, r1
    1ff4:	00 e0       	ldi	r16, 0x00	; 0
    1ff6:	10 e0       	ldi	r17, 0x00	; 0
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	a9 01       	movw	r20, r18
    1ffe:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_Z3maplllll>
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    200a:	ce 01       	movw	r24, r28
}
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	bf 90       	pop	r11
    201e:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
    2020:	6f cf       	rjmp	.-290    	; 0x1f00 <_ZN5Servo17writeMicrosecondsEi>

00002022 <_ZN5Servo16readMicrosecondsEv>:
}

int Servo::readMicroseconds()
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    2022:	fc 01       	movw	r30, r24
    2024:	80 81       	ld	r24, Z
    2026:	8f 3f       	cpi	r24, 0xFF	; 255
    2028:	b9 f0       	breq	.+46     	; 0x2058 <_ZN5Servo16readMicrosecondsEv+0x36>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	fc 01       	movw	r30, r24
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	8e 0f       	add	r24, r30
    2034:	9f 1f       	adc	r25, r31
    2036:	fc 01       	movw	r30, r24
    2038:	e0 50       	subi	r30, 0x00	; 0
    203a:	fd 4f       	sbci	r31, 0xFD	; 253
    203c:	81 81       	ldd	r24, Z+1	; 0x01
    203e:	92 81       	ldd	r25, Z+2	; 0x02
    2040:	33 e0       	ldi	r19, 0x03	; 3
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	3a 95       	dec	r19
    2048:	e1 f7       	brne	.-8      	; 0x2042 <_ZN5Servo16readMicrosecondsEv+0x20>
    204a:	44 e0       	ldi	r20, 0x04	; 4
    204c:	96 95       	lsr	r25
    204e:	87 95       	ror	r24
    2050:	4a 95       	dec	r20
    2052:	e1 f7       	brne	.-8      	; 0x204c <_ZN5Servo16readMicrosecondsEv+0x2a>
    2054:	02 96       	adiw	r24, 0x02	; 2
    2056:	08 95       	ret
  else
    pulsewidth  = 0;
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0

  return pulsewidth;
}
    205c:	08 95       	ret

0000205e <_ZN5Servo4readEv>:
    SREG = oldSREG;
  }
}

int Servo::read() // return the value as degrees
{
    205e:	4f 92       	push	r4
    2060:	5f 92       	push	r5
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	af 92       	push	r10
    2068:	bf 92       	push	r11
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	00 d0       	rcall	.+0      	; 0x207c <_ZN5Servo4readEv+0x1e>
    207c:	1f 92       	push	r1
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    2082:	fc 01       	movw	r30, r24
    2084:	42 81       	ldd	r20, Z+2	; 0x02
    2086:	28 e5       	ldi	r18, 0x58	; 88
    2088:	32 e0       	ldi	r19, 0x02	; 2
    208a:	24 1b       	sub	r18, r20
    208c:	31 09       	sbc	r19, r1
    208e:	47 fd       	sbrc	r20, 7
    2090:	33 95       	inc	r19
    2092:	22 0f       	add	r18, r18
    2094:	33 1f       	adc	r19, r19
    2096:	22 0f       	add	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	a9 01       	movw	r20, r18
    209c:	33 0f       	add	r19, r19
    209e:	66 0b       	sbc	r22, r22
    20a0:	77 0b       	sbc	r23, r23
    20a2:	49 83       	std	Y+1, r20	; 0x01
    20a4:	5a 83       	std	Y+2, r21	; 0x02
    20a6:	6b 83       	std	Y+3, r22	; 0x03
    20a8:	7c 83       	std	Y+4, r23	; 0x04
    20aa:	21 81       	ldd	r18, Z+1	; 0x01
    20ac:	48 e8       	ldi	r20, 0x88	; 136
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	2a 01       	movw	r4, r20
    20b2:	42 1a       	sub	r4, r18
    20b4:	51 08       	sbc	r5, r1
    20b6:	27 fd       	sbrc	r18, 7
    20b8:	53 94       	inc	r5
    20ba:	44 0c       	add	r4, r4
    20bc:	55 1c       	adc	r5, r5
    20be:	44 0c       	add	r4, r4
    20c0:	55 1c       	adc	r5, r5
    20c2:	05 2c       	mov	r0, r5
    20c4:	00 0c       	add	r0, r0
    20c6:	66 08       	sbc	r6, r6
    20c8:	77 08       	sbc	r7, r7
    20ca:	ab df       	rcall	.-170    	; 0x2022 <_ZN5Servo16readMicrosecondsEv>
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	bc 01       	movw	r22, r24
    20d0:	99 0f       	add	r25, r25
    20d2:	88 0b       	sbc	r24, r24
    20d4:	99 0b       	sbc	r25, r25
    20d6:	1f 92       	push	r1
    20d8:	1f 92       	push	r1
    20da:	1f 92       	push	r1
    20dc:	24 eb       	ldi	r18, 0xB4	; 180
    20de:	2f 93       	push	r18
    20e0:	a1 2c       	mov	r10, r1
    20e2:	b1 2c       	mov	r11, r1
    20e4:	65 01       	movw	r12, r10
    20e6:	e9 80       	ldd	r14, Y+1	; 0x01
    20e8:	fa 80       	ldd	r15, Y+2	; 0x02
    20ea:	0b 81       	ldd	r16, Y+3	; 0x03
    20ec:	1c 81       	ldd	r17, Y+4	; 0x04
    20ee:	a3 01       	movw	r20, r6
    20f0:	92 01       	movw	r18, r4
    20f2:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_Z3maplllll>
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
}
    20fe:	cb 01       	movw	r24, r22
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	df 90       	pop	r13
    2116:	cf 90       	pop	r12
    2118:	bf 90       	pop	r11
    211a:	af 90       	pop	r10
    211c:	7f 90       	pop	r7
    211e:	6f 90       	pop	r6
    2120:	5f 90       	pop	r5
    2122:	4f 90       	pop	r4
    2124:	08 95       	ret

00002126 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2126:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2128:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    212a:	f8 94       	cli
  if (!initialized) {
    212c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <_ZN8SPIClass11initializedE>
    2130:	81 11       	cpse	r24, r1
    2132:	27 c0       	rjmp	.+78     	; 0x2182 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2134:	e9 ec       	ldi	r30, 0xC9	; 201
    2136:	f1 e0       	ldi	r31, 0x01	; 1
    2138:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    213a:	e3 e8       	ldi	r30, 0x83	; 131
    213c:	f1 e0       	ldi	r31, 0x01	; 1
    213e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2140:	e8 2f       	mov	r30, r24
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	e2 5f       	subi	r30, 0xF2	; 242
    214a:	fd 4f       	sbci	r31, 0xFD	; 253
    214c:	a5 91       	lpm	r26, Z+
    214e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2150:	ec 91       	ld	r30, X
    2152:	e9 23       	and	r30, r25
    2154:	21 f4       	brne	.+8      	; 0x215e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	85 e3       	ldi	r24, 0x35	; 53
    215a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	85 e3       	ldi	r24, 0x35	; 53
    2162:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2166:	8c b5       	in	r24, 0x2c	; 44
    2168:	80 61       	ori	r24, 0x10	; 16
    216a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    216c:	8c b5       	in	r24, 0x2c	; 44
    216e:	80 64       	ori	r24, 0x40	; 64
    2170:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	84 e3       	ldi	r24, 0x34	; 52
    2176:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
    pinMode(MOSI, OUTPUT);
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	83 e3       	ldi	r24, 0x33	; 51
    217e:	0e 94 6d 1a 	call	0x34da	; 0x34da <pinMode>
  }
  initialized++; // reference count
    2182:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <_ZN8SPIClass11initializedE>
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    218c:	cf bf       	out	0x3f, r28	; 63
}
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    2192:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_state>
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <twi_sendStop>
    219c:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_inRepStart>
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	84 e1       	ldi	r24, 0x14	; 20
    21a4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	85 e1       	ldi	r24, 0x15	; 21
    21ac:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    21b0:	e9 eb       	ldi	r30, 0xB9	; 185
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8e 7f       	andi	r24, 0xFE	; 254
    21b8:	80 83       	st	Z, r24
    21ba:	80 81       	ld	r24, Z
    21bc:	8d 7f       	andi	r24, 0xFD	; 253
    21be:	80 83       	st	Z, r24
    21c0:	88 e4       	ldi	r24, 0x48	; 72
    21c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    21c6:	85 e4       	ldi	r24, 0x45	; 69
    21c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    21cc:	08 95       	ret

000021ce <twi_disable>:
    21ce:	ec eb       	ldi	r30, 0xBC	; 188
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	8a 7b       	andi	r24, 0xBA	; 186
    21d6:	80 83       	st	Z, r24
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	84 e1       	ldi	r24, 0x14	; 20
    21dc:	0e 94 a9 1a 	call	0x3552	; 0x3552 <digitalWrite>
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	85 e1       	ldi	r24, 0x15	; 21
    21e4:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <digitalWrite>

000021e8 <twi_transmit>:
    21e8:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <twi_txBufferLength>
    21ec:	26 2f       	mov	r18, r22
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	24 0f       	add	r18, r20
    21f2:	31 1d       	adc	r19, r1
    21f4:	21 32       	cpi	r18, 0x21	; 33
    21f6:	31 05       	cpc	r19, r1
    21f8:	dc f4       	brge	.+54     	; 0x2230 <__stack+0x31>
    21fa:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <twi_state>
    21fe:	24 30       	cpi	r18, 0x04	; 4
    2200:	c9 f4       	brne	.+50     	; 0x2234 <__stack+0x35>
    2202:	fc 01       	movw	r30, r24
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	86 17       	cp	r24, r22
    220a:	58 f4       	brcc	.+22     	; 0x2222 <__stack+0x23>
    220c:	30 91 b6 03 	lds	r19, 0x03B6	; 0x8003b6 <twi_txBufferLength>
    2210:	21 91       	ld	r18, Z+
    2212:	dc 01       	movw	r26, r24
    2214:	a8 54       	subi	r26, 0x48	; 72
    2216:	bc 4f       	sbci	r27, 0xFC	; 252
    2218:	a3 0f       	add	r26, r19
    221a:	b1 1d       	adc	r27, r1
    221c:	2c 93       	st	X, r18
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	f3 cf       	rjmp	.-26     	; 0x2208 <__stack+0x9>
    2222:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_txBufferLength>
    2226:	68 0f       	add	r22, r24
    2228:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <twi_txBufferLength>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	08 95       	ret
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	08 95       	ret
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	08 95       	ret

00002238 <twi_attachSlaveRxEvent>:
    2238:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <twi_onSlaveReceive+0x1>
    223c:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <twi_onSlaveReceive>
    2240:	08 95       	ret

00002242 <twi_attachSlaveTxEvent>:
    2242:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <twi_onSlaveTransmit+0x1>
    2246:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <twi_onSlaveTransmit>
    224a:	08 95       	ret

0000224c <twi_releaseBus>:
    224c:	85 ec       	ldi	r24, 0xC5	; 197
    224e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2252:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_state>
    2256:	08 95       	ret

00002258 <twi_handleTimeout>:
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <twi_timed_out_flag>
    2262:	88 23       	and	r24, r24
    2264:	51 f0       	breq	.+20     	; 0x227a <twi_handleTimeout+0x22>
    2266:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    226a:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    226e:	af df       	rcall	.-162    	; 0x21ce <twi_disable>
    2270:	90 df       	rcall	.-224    	; 0x2192 <twi_init>
    2272:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    2276:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	08 95       	ret

00002280 <twi_writeTo>:
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	41 32       	cpi	r20, 0x21	; 33
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <twi_writeTo+0x26>
    22a4:	bf c0       	rjmp	.+382    	; 0x2424 <twi_writeTo+0x1a4>
    22a6:	12 2f       	mov	r17, r18
    22a8:	f4 2e       	mov	r15, r20
    22aa:	d7 2e       	mov	r13, r23
    22ac:	e6 2e       	mov	r14, r22
    22ae:	d8 2f       	mov	r29, r24
    22b0:	f4 d7       	rcall	.+4072   	; 0x329a <micros>
    22b2:	4b 01       	movw	r8, r22
    22b4:	5c 01       	movw	r10, r24
    22b6:	c0 91 07 04 	lds	r28, 0x0407	; 0x800407 <twi_state>
    22ba:	cc 23       	and	r28, r28
    22bc:	09 f1       	breq	.+66     	; 0x2300 <twi_writeTo+0x80>
    22be:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_timeout_us>
    22c2:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    22c6:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    22ca:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    22ce:	89 2b       	or	r24, r25
    22d0:	8a 2b       	or	r24, r26
    22d2:	8b 2b       	or	r24, r27
    22d4:	81 f3       	breq	.-32     	; 0x22b6 <twi_writeTo+0x36>
    22d6:	e1 d7       	rcall	.+4034   	; 0x329a <micros>
    22d8:	40 90 00 04 	lds	r4, 0x0400	; 0x800400 <twi_timeout_us>
    22dc:	50 90 01 04 	lds	r5, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    22e0:	60 90 02 04 	lds	r6, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    22e4:	70 90 03 04 	lds	r7, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	88 19       	sub	r24, r8
    22ee:	99 09       	sbc	r25, r9
    22f0:	aa 09       	sbc	r26, r10
    22f2:	bb 09       	sbc	r27, r11
    22f4:	48 16       	cp	r4, r24
    22f6:	59 06       	cpc	r5, r25
    22f8:	6a 06       	cpc	r6, r26
    22fa:	7b 06       	cpc	r7, r27
    22fc:	e0 f6       	brcc	.-72     	; 0x22b6 <twi_writeTo+0x36>
    22fe:	7f c0       	rjmp	.+254    	; 0x23fe <twi_writeTo+0x17e>
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_state>
    2306:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <twi_sendStop>
    230a:	8f ef       	ldi	r24, 0xFF	; 255
    230c:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_error>
    2310:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <twi_masterBufferIndex>
    2314:	f0 92 d8 03 	sts	0x03D8, r15	; 0x8003d8 <twi_masterBufferLength>
    2318:	9e 2d       	mov	r25, r14
    231a:	aa ed       	ldi	r26, 0xDA	; 218
    231c:	b3 e0       	ldi	r27, 0x03	; 3
    231e:	ee 2d       	mov	r30, r14
    2320:	fd 2d       	mov	r31, r13
    2322:	8e 2f       	mov	r24, r30
    2324:	89 1b       	sub	r24, r25
    2326:	8f 15       	cp	r24, r15
    2328:	18 f4       	brcc	.+6      	; 0x2330 <twi_writeTo+0xb0>
    232a:	81 91       	ld	r24, Z+
    232c:	8d 93       	st	X+, r24
    232e:	f9 cf       	rjmp	.-14     	; 0x2322 <twi_writeTo+0xa2>
    2330:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <twi_slarw>
    2334:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <twi_slarw>
    2338:	dd 0f       	add	r29, r29
    233a:	d9 2b       	or	r29, r25
    233c:	d0 93 06 04 	sts	0x0406, r29	; 0x800406 <twi_slarw>
    2340:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <twi_inRepStart>
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	79 f5       	brne	.+94     	; 0x23a6 <twi_writeTo+0x126>
    2348:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_inRepStart>
    234c:	a6 d7       	rcall	.+3916   	; 0x329a <micros>
    234e:	6b 01       	movw	r12, r22
    2350:	7c 01       	movw	r14, r24
    2352:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_slarw>
    2356:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    235a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_timeout_us>
    235e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    2362:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    2366:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    236a:	89 2b       	or	r24, r25
    236c:	8a 2b       	or	r24, r26
    236e:	8b 2b       	or	r24, r27
    2370:	a1 f0       	breq	.+40     	; 0x239a <twi_writeTo+0x11a>
    2372:	93 d7       	rcall	.+3878   	; 0x329a <micros>
    2374:	80 90 00 04 	lds	r8, 0x0400	; 0x800400 <twi_timeout_us>
    2378:	90 90 01 04 	lds	r9, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    237c:	a0 90 02 04 	lds	r10, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    2380:	b0 90 03 04 	lds	r11, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	8c 19       	sub	r24, r12
    238a:	9d 09       	sbc	r25, r13
    238c:	ae 09       	sbc	r26, r14
    238e:	bf 09       	sbc	r27, r15
    2390:	88 16       	cp	r8, r24
    2392:	99 06       	cpc	r9, r25
    2394:	aa 06       	cpc	r10, r26
    2396:	bb 06       	cpc	r11, r27
    2398:	90 f1       	brcs	.+100    	; 0x23fe <twi_writeTo+0x17e>
    239a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    239e:	83 fd       	sbrc	r24, 3
    23a0:	d8 cf       	rjmp	.-80     	; 0x2352 <twi_writeTo+0xd2>
    23a2:	85 ec       	ldi	r24, 0xC5	; 197
    23a4:	01 c0       	rjmp	.+2      	; 0x23a8 <twi_writeTo+0x128>
    23a6:	85 ee       	ldi	r24, 0xE5	; 229
    23a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    23ac:	76 d7       	rcall	.+3820   	; 0x329a <micros>
    23ae:	6b 01       	movw	r12, r22
    23b0:	7c 01       	movw	r14, r24
    23b2:	11 23       	and	r17, r17
    23b4:	49 f1       	breq	.+82     	; 0x2408 <twi_writeTo+0x188>
    23b6:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_state>
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	29 f5       	brne	.+74     	; 0x2408 <twi_writeTo+0x188>
    23be:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_timeout_us>
    23c2:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    23c6:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    23ca:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    23ce:	89 2b       	or	r24, r25
    23d0:	8a 2b       	or	r24, r26
    23d2:	8b 2b       	or	r24, r27
    23d4:	71 f3       	breq	.-36     	; 0x23b2 <twi_writeTo+0x132>
    23d6:	61 d7       	rcall	.+3778   	; 0x329a <micros>
    23d8:	80 90 00 04 	lds	r8, 0x0400	; 0x800400 <twi_timeout_us>
    23dc:	90 90 01 04 	lds	r9, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    23e0:	a0 90 02 04 	lds	r10, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    23e4:	b0 90 03 04 	lds	r11, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8c 19       	sub	r24, r12
    23ee:	9d 09       	sbc	r25, r13
    23f0:	ae 09       	sbc	r26, r14
    23f2:	bf 09       	sbc	r27, r15
    23f4:	88 16       	cp	r8, r24
    23f6:	99 06       	cpc	r9, r25
    23f8:	aa 06       	cpc	r10, r26
    23fa:	bb 06       	cpc	r11, r27
    23fc:	d0 f6       	brcc	.-76     	; 0x23b2 <twi_writeTo+0x132>
    23fe:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <twi_do_reset_on_timeout>
    2402:	2a df       	rcall	.-428    	; 0x2258 <twi_handleTimeout>
    2404:	c5 e0       	ldi	r28, 0x05	; 5
    2406:	13 c0       	rjmp	.+38     	; 0x242e <twi_writeTo+0x1ae>
    2408:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_error>
    240c:	8f 3f       	cpi	r24, 0xFF	; 255
    240e:	79 f0       	breq	.+30     	; 0x242e <twi_writeTo+0x1ae>
    2410:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_error>
    2414:	80 32       	cpi	r24, 0x20	; 32
    2416:	41 f0       	breq	.+16     	; 0x2428 <twi_writeTo+0x1a8>
    2418:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_error>
    241c:	80 33       	cpi	r24, 0x30	; 48
    241e:	31 f0       	breq	.+12     	; 0x242c <twi_writeTo+0x1ac>
    2420:	c4 e0       	ldi	r28, 0x04	; 4
    2422:	05 c0       	rjmp	.+10     	; 0x242e <twi_writeTo+0x1ae>
    2424:	c1 e0       	ldi	r28, 0x01	; 1
    2426:	03 c0       	rjmp	.+6      	; 0x242e <twi_writeTo+0x1ae>
    2428:	c2 e0       	ldi	r28, 0x02	; 2
    242a:	01 c0       	rjmp	.+2      	; 0x242e <twi_writeTo+0x1ae>
    242c:	c3 e0       	ldi	r28, 0x03	; 3
    242e:	8c 2f       	mov	r24, r28
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	df 90       	pop	r13
    243e:	cf 90       	pop	r12
    2440:	bf 90       	pop	r11
    2442:	af 90       	pop	r10
    2444:	9f 90       	pop	r9
    2446:	8f 90       	pop	r8
    2448:	7f 90       	pop	r7
    244a:	6f 90       	pop	r6
    244c:	5f 90       	pop	r5
    244e:	4f 90       	pop	r4
    2450:	08 95       	ret

00002452 <twi_stop>:
    2452:	85 ed       	ldi	r24, 0xD5	; 213
    2454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2458:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_timeout_us>
    245c:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    2460:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    2464:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    2468:	07 96       	adiw	r24, 0x07	; 7
    246a:	a1 1d       	adc	r26, r1
    246c:	b1 1d       	adc	r27, r1
    246e:	23 e0       	ldi	r18, 0x03	; 3
    2470:	b6 95       	lsr	r27
    2472:	a7 95       	ror	r26
    2474:	97 95       	ror	r25
    2476:	87 95       	ror	r24
    2478:	2a 95       	dec	r18
    247a:	d1 f7       	brne	.-12     	; 0x2470 <twi_stop+0x1e>
    247c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2480:	24 ff       	sbrs	r18, 4
    2482:	1b c0       	rjmp	.+54     	; 0x24ba <twi_stop+0x68>
    2484:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <twi_timeout_us>
    2488:	50 91 01 04 	lds	r21, 0x0401	; 0x800401 <twi_timeout_us+0x1>
    248c:	60 91 02 04 	lds	r22, 0x0402	; 0x800402 <twi_timeout_us+0x2>
    2490:	70 91 03 04 	lds	r23, 0x0403	; 0x800403 <twi_timeout_us+0x3>
    2494:	45 2b       	or	r20, r21
    2496:	46 2b       	or	r20, r22
    2498:	47 2b       	or	r20, r23
    249a:	81 f3       	breq	.-32     	; 0x247c <twi_stop+0x2a>
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	a1 05       	cpc	r26, r1
    24a0:	b1 05       	cpc	r27, r1
    24a2:	41 f0       	breq	.+16     	; 0x24b4 <twi_stop+0x62>
    24a4:	25 e3       	ldi	r18, 0x35	; 53
    24a6:	2a 95       	dec	r18
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <twi_stop+0x54>
    24aa:	00 00       	nop
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	a1 09       	sbc	r26, r1
    24b0:	b1 09       	sbc	r27, r1
    24b2:	e4 cf       	rjmp	.-56     	; 0x247c <twi_stop+0x2a>
    24b4:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <twi_do_reset_on_timeout>
    24b8:	cf ce       	rjmp	.-610    	; 0x2258 <twi_handleTimeout>
    24ba:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_state>
    24be:	08 95       	ret

000024c0 <__vector_39>:

ISR(TWI_vect)
{
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	0b b6       	in	r0, 0x3b	; 59
    24cc:	0f 92       	push	r0
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	4f 93       	push	r20
    24d4:	5f 93       	push	r21
    24d6:	6f 93       	push	r22
    24d8:	7f 93       	push	r23
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	af 93       	push	r26
    24e0:	bf 93       	push	r27
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
  switch(TW_STATUS){
    24e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    24ea:	88 7f       	andi	r24, 0xF8	; 248
    24ec:	80 36       	cpi	r24, 0x60	; 96
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <__vector_39+0x32>
    24f0:	9d c0       	rjmp	.+314    	; 0x262c <__vector_39+0x16c>
    24f2:	70 f5       	brcc	.+92     	; 0x2550 <__vector_39+0x90>
    24f4:	88 32       	cpi	r24, 0x28	; 40
    24f6:	09 f4       	brne	.+2      	; 0x24fa <__vector_39+0x3a>
    24f8:	5c c0       	rjmp	.+184    	; 0x25b2 <__vector_39+0xf2>
    24fa:	90 f4       	brcc	.+36     	; 0x2520 <__vector_39+0x60>
    24fc:	80 31       	cpi	r24, 0x10	; 16
    24fe:	09 f4       	brne	.+2      	; 0x2502 <__vector_39+0x42>
    2500:	55 c0       	rjmp	.+170    	; 0x25ac <__vector_39+0xec>
    2502:	38 f4       	brcc	.+14     	; 0x2512 <__vector_39+0x52>
    2504:	88 23       	and	r24, r24
    2506:	09 f4       	brne	.+2      	; 0x250a <__vector_39+0x4a>
    2508:	f3 c0       	rjmp	.+486    	; 0x26f0 <__vector_39+0x230>
    250a:	88 30       	cpi	r24, 0x08	; 8
    250c:	09 f4       	brne	.+2      	; 0x2510 <__vector_39+0x50>
    250e:	4e c0       	rjmp	.+156    	; 0x25ac <__vector_39+0xec>
    2510:	f2 c0       	rjmp	.+484    	; 0x26f6 <__vector_39+0x236>
    2512:	88 31       	cpi	r24, 0x18	; 24
    2514:	09 f4       	brne	.+2      	; 0x2518 <__vector_39+0x58>
    2516:	4d c0       	rjmp	.+154    	; 0x25b2 <__vector_39+0xf2>
    2518:	80 32       	cpi	r24, 0x20	; 32
    251a:	09 f4       	brne	.+2      	; 0x251e <__vector_39+0x5e>
    251c:	5e c0       	rjmp	.+188    	; 0x25da <__vector_39+0x11a>
    251e:	eb c0       	rjmp	.+470    	; 0x26f6 <__vector_39+0x236>
    2520:	80 34       	cpi	r24, 0x40	; 64
    2522:	09 f4       	brne	.+2      	; 0x2526 <__vector_39+0x66>
    2524:	69 c0       	rjmp	.+210    	; 0x25f8 <__vector_39+0x138>
    2526:	50 f4       	brcc	.+20     	; 0x253c <__vector_39+0x7c>
    2528:	80 33       	cpi	r24, 0x30	; 48
    252a:	09 f4       	brne	.+2      	; 0x252e <__vector_39+0x6e>
    252c:	56 c0       	rjmp	.+172    	; 0x25da <__vector_39+0x11a>
    252e:	88 33       	cpi	r24, 0x38	; 56
    2530:	09 f0       	breq	.+2      	; 0x2534 <__vector_39+0x74>
    2532:	e1 c0       	rjmp	.+450    	; 0x26f6 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2534:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_error>
      twi_releaseBus();
    2538:	89 de       	rcall	.-750    	; 0x224c <twi_releaseBus>
      break;
    253a:	dd c0       	rjmp	.+442    	; 0x26f6 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    253c:	80 35       	cpi	r24, 0x50	; 80
    253e:	09 f4       	brne	.+2      	; 0x2542 <__vector_39+0x82>
    2540:	4f c0       	rjmp	.+158    	; 0x25e0 <__vector_39+0x120>
    2542:	88 35       	cpi	r24, 0x58	; 88
    2544:	09 f4       	brne	.+2      	; 0x2548 <__vector_39+0x88>
    2546:	5d c0       	rjmp	.+186    	; 0x2602 <__vector_39+0x142>
    2548:	88 34       	cpi	r24, 0x48	; 72
    254a:	09 f0       	breq	.+2      	; 0x254e <__vector_39+0x8e>
    254c:	d4 c0       	rjmp	.+424    	; 0x26f6 <__vector_39+0x236>
    254e:	d2 c0       	rjmp	.+420    	; 0x26f4 <__vector_39+0x234>
    2550:	88 39       	cpi	r24, 0x98	; 152
    2552:	09 f4       	brne	.+2      	; 0x2556 <__vector_39+0x96>
    2554:	c3 c0       	rjmp	.+390    	; 0x26dc <__vector_39+0x21c>
    2556:	a8 f4       	brcc	.+42     	; 0x2582 <__vector_39+0xc2>
    2558:	88 37       	cpi	r24, 0x78	; 120
    255a:	09 f4       	brne	.+2      	; 0x255e <__vector_39+0x9e>
    255c:	67 c0       	rjmp	.+206    	; 0x262c <__vector_39+0x16c>
    255e:	38 f4       	brcc	.+14     	; 0x256e <__vector_39+0xae>
    2560:	88 36       	cpi	r24, 0x68	; 104
    2562:	09 f4       	brne	.+2      	; 0x2566 <__vector_39+0xa6>
    2564:	63 c0       	rjmp	.+198    	; 0x262c <__vector_39+0x16c>
    2566:	80 37       	cpi	r24, 0x70	; 112
    2568:	09 f4       	brne	.+2      	; 0x256c <__vector_39+0xac>
    256a:	60 c0       	rjmp	.+192    	; 0x262c <__vector_39+0x16c>
    256c:	c4 c0       	rjmp	.+392    	; 0x26f6 <__vector_39+0x236>
    256e:	88 38       	cpi	r24, 0x88	; 136
    2570:	09 f4       	brne	.+2      	; 0x2574 <__vector_39+0xb4>
    2572:	b4 c0       	rjmp	.+360    	; 0x26dc <__vector_39+0x21c>
    2574:	80 39       	cpi	r24, 0x90	; 144
    2576:	09 f4       	brne	.+2      	; 0x257a <__vector_39+0xba>
    2578:	5f c0       	rjmp	.+190    	; 0x2638 <__vector_39+0x178>
    257a:	80 38       	cpi	r24, 0x80	; 128
    257c:	09 f0       	breq	.+2      	; 0x2580 <__vector_39+0xc0>
    257e:	bb c0       	rjmp	.+374    	; 0x26f6 <__vector_39+0x236>
    2580:	5b c0       	rjmp	.+182    	; 0x2638 <__vector_39+0x178>
    2582:	80 3b       	cpi	r24, 0xB0	; 176
    2584:	09 f4       	brne	.+2      	; 0x2588 <__vector_39+0xc8>
    2586:	82 c0       	rjmp	.+260    	; 0x268c <__vector_39+0x1cc>
    2588:	38 f4       	brcc	.+14     	; 0x2598 <__vector_39+0xd8>
    258a:	80 3a       	cpi	r24, 0xA0	; 160
    258c:	09 f4       	brne	.+2      	; 0x2590 <__vector_39+0xd0>
    258e:	66 c0       	rjmp	.+204    	; 0x265c <__vector_39+0x19c>
    2590:	88 3a       	cpi	r24, 0xA8	; 168
    2592:	09 f4       	brne	.+2      	; 0x2596 <__vector_39+0xd6>
    2594:	7b c0       	rjmp	.+246    	; 0x268c <__vector_39+0x1cc>
    2596:	af c0       	rjmp	.+350    	; 0x26f6 <__vector_39+0x236>
    2598:	80 3c       	cpi	r24, 0xC0	; 192
    259a:	09 f4       	brne	.+2      	; 0x259e <__vector_39+0xde>
    259c:	a3 c0       	rjmp	.+326    	; 0x26e4 <__vector_39+0x224>
    259e:	88 3c       	cpi	r24, 0xC8	; 200
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <__vector_39+0xe4>
    25a2:	a0 c0       	rjmp	.+320    	; 0x26e4 <__vector_39+0x224>
    25a4:	88 3b       	cpi	r24, 0xB8	; 184
    25a6:	09 f4       	brne	.+2      	; 0x25aa <__vector_39+0xea>
    25a8:	86 c0       	rjmp	.+268    	; 0x26b6 <__vector_39+0x1f6>
    25aa:	a5 c0       	rjmp	.+330    	; 0x26f6 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    25ac:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_slarw>
    25b0:	10 c0       	rjmp	.+32     	; 0x25d2 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    25b2:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <twi_masterBufferIndex>
    25b6:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <twi_masterBufferLength>
    25ba:	98 17       	cp	r25, r24
    25bc:	70 f5       	brcc	.+92     	; 0x261a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    25be:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <twi_masterBufferIndex>
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	8e 0f       	add	r24, r30
    25c6:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <twi_masterBufferIndex>
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	e6 52       	subi	r30, 0x26	; 38
    25ce:	fc 4f       	sbci	r31, 0xFC	; 252
    25d0:	80 81       	ld	r24, Z
    25d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25d6:	85 ec       	ldi	r24, 0xC5	; 197
    25d8:	82 c0       	rjmp	.+260    	; 0x26de <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    25da:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_error>
    25de:	8a c0       	rjmp	.+276    	; 0x26f4 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    25e0:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <twi_masterBufferIndex>
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	8e 0f       	add	r24, r30
    25e8:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <twi_masterBufferIndex>
    25ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	e6 52       	subi	r30, 0x26	; 38
    25f4:	fc 4f       	sbci	r31, 0xFC	; 252
    25f6:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    25f8:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <twi_masterBufferIndex>
    25fc:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <twi_masterBufferLength>
    2600:	6a c0       	rjmp	.+212    	; 0x26d6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2602:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <twi_masterBufferIndex>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	8e 0f       	add	r24, r30
    260a:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <twi_masterBufferIndex>
    260e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	e6 52       	subi	r30, 0x26	; 38
    2616:	fc 4f       	sbci	r31, 0xFC	; 252
    2618:	80 83       	st	Z, r24
      if (twi_sendStop){
    261a:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <twi_sendStop>
    261e:	81 11       	cpse	r24, r1
    2620:	69 c0       	rjmp	.+210    	; 0x26f4 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2628:	84 ea       	ldi	r24, 0xA4	; 164
    262a:	5d c0       	rjmp	.+186    	; 0x26e6 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2632:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <twi_rxBufferIndex>
    2636:	cf cf       	rjmp	.-98     	; 0x25d6 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2638:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <twi_rxBufferIndex>
    263c:	80 32       	cpi	r24, 0x20	; 32
    263e:	08 f0       	brcs	.+2      	; 0x2642 <__vector_39+0x182>
    2640:	4d c0       	rjmp	.+154    	; 0x26dc <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2642:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <twi_rxBufferIndex>
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	8e 0f       	add	r24, r30
    264a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <twi_rxBufferIndex>
    264e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	ea 56       	subi	r30, 0x6A	; 106
    2656:	fc 4f       	sbci	r31, 0xFC	; 252
    2658:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    265a:	bd cf       	rjmp	.-134    	; 0x25d6 <__vector_39+0x116>
    265c:	f7 dd       	rcall	.-1042   	; 0x224c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    265e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <twi_rxBufferIndex>
    2662:	80 32       	cpi	r24, 0x20	; 32
    2664:	30 f4       	brcc	.+12     	; 0x2672 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2666:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <twi_rxBufferIndex>
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	ea 56       	subi	r30, 0x6A	; 106
    266e:	fc 4f       	sbci	r31, 0xFC	; 252
    2670:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2672:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <twi_rxBufferIndex>
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <twi_onSlaveReceive>
    267c:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <twi_onSlaveReceive+0x1>
    2680:	86 e9       	ldi	r24, 0x96	; 150
    2682:	93 e0       	ldi	r25, 0x03	; 3
    2684:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2686:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <twi_rxBufferIndex>
      break;
    268a:	35 c0       	rjmp	.+106    	; 0x26f6 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    268c:	84 e0       	ldi	r24, 0x04	; 4
    268e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2692:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2696:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    269a:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <twi_onSlaveTransmit>
    269e:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <twi_onSlaveTransmit+0x1>
    26a2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    26a4:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_txBufferLength>
    26a8:	81 11       	cpse	r24, r1
    26aa:	05 c0       	rjmp	.+10     	; 0x26b6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    26b2:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    26b6:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <twi_txBufferIndex>
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	8e 0f       	add	r24, r30
    26be:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <twi_txBufferIndex>
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	e8 54       	subi	r30, 0x48	; 72
    26c6:	fc 4f       	sbci	r31, 0xFC	; 252
    26c8:	80 81       	ld	r24, Z
    26ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    26ce:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <twi_txBufferIndex>
    26d2:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_txBufferLength>
    26d6:	98 17       	cp	r25, r24
    26d8:	08 f4       	brcc	.+2      	; 0x26dc <__vector_39+0x21c>
    26da:	7d cf       	rjmp	.-262    	; 0x25d6 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    26dc:	85 e8       	ldi	r24, 0x85	; 133
    26de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    26e2:	09 c0       	rjmp	.+18     	; 0x26f6 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26e4:	85 ec       	ldi	r24, 0xC5	; 197
    26e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    26ea:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_state>
      break;
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    26f0:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <twi_error>
      twi_stop();
    26f4:	ae de       	rcall	.-676    	; 0x2452 <twi_stop>
      break;
  }
}
    26f6:	ff 91       	pop	r31
    26f8:	ef 91       	pop	r30
    26fa:	bf 91       	pop	r27
    26fc:	af 91       	pop	r26
    26fe:	9f 91       	pop	r25
    2700:	8f 91       	pop	r24
    2702:	7f 91       	pop	r23
    2704:	6f 91       	pop	r22
    2706:	5f 91       	pop	r21
    2708:	4f 91       	pop	r20
    270a:	3f 91       	pop	r19
    270c:	2f 91       	pop	r18
    270e:	0f 90       	pop	r0
    2710:	0b be       	out	0x3b, r0	; 59
    2712:	0f 90       	pop	r0
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	0f 90       	pop	r0
    2718:	1f 90       	pop	r1
    271a:	18 95       	reti

0000271c <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	08 95       	ret

00002722 <_ZN7TwoWire9availableEv>:
    2722:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN7TwoWire14rxBufferLengthE>
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    272c:	82 1b       	sub	r24, r18
    272e:	91 09       	sbc	r25, r1
    2730:	08 95       	ret

00002732 <_ZN7TwoWire4readEv>:
    2732:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    2736:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN7TwoWire14rxBufferLengthE>
    273a:	98 17       	cp	r25, r24
    273c:	50 f4       	brcc	.+20     	; 0x2752 <_ZN7TwoWire4readEv+0x20>
    273e:	e9 2f       	mov	r30, r25
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	e2 5c       	subi	r30, 0xC2	; 194
    2744:	fb 4f       	sbci	r31, 0xFB	; 251
    2746:	20 81       	ld	r18, Z
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	9f 5f       	subi	r25, 0xFF	; 255
    274c:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <_ZN7TwoWire4readEv+0x24>
    2752:	2f ef       	ldi	r18, 0xFF	; 255
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	c9 01       	movw	r24, r18
    2758:	08 95       	ret

0000275a <_ZN7TwoWire4peekEv>:
    275a:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    275e:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN7TwoWire14rxBufferLengthE>
    2762:	e8 17       	cp	r30, r24
    2764:	30 f4       	brcc	.+12     	; 0x2772 <_ZN7TwoWire4peekEv+0x18>
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	e2 5c       	subi	r30, 0xC2	; 194
    276a:	fb 4f       	sbci	r31, 0xFB	; 251
    276c:	80 81       	ld	r24, Z
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	08 95       	ret
    2772:	8f ef       	ldi	r24, 0xFF	; 255
    2774:	9f ef       	ldi	r25, 0xFF	; 255
    2776:	08 95       	ret

00002778 <_ZN7TwoWire5flushEv>:
    2778:	08 95       	ret

0000277a <_ZN7TwoWire16onReceiveServiceEPhi>:
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	ec 01       	movw	r28, r24
    2780:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <_ZN7TwoWire14user_onReceiveE>
    2784:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <_ZN7TwoWire14user_onReceiveE+0x1>
    2788:	30 97       	sbiw	r30, 0x00	; 0
    278a:	f1 f0       	breq	.+60     	; 0x27c8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    278c:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    2790:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN7TwoWire14rxBufferLengthE>
    2794:	98 17       	cp	r25, r24
    2796:	c0 f0       	brcs	.+48     	; 0x27c8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	29 2f       	mov	r18, r25
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	26 17       	cp	r18, r22
    27a0:	37 07       	cpc	r19, r23
    27a2:	54 f4       	brge	.+20     	; 0x27b8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    27a4:	de 01       	movw	r26, r28
    27a6:	a2 0f       	add	r26, r18
    27a8:	b3 1f       	adc	r27, r19
    27aa:	4c 91       	ld	r20, X
    27ac:	d9 01       	movw	r26, r18
    27ae:	a2 5c       	subi	r26, 0xC2	; 194
    27b0:	bb 4f       	sbci	r27, 0xFB	; 251
    27b2:	4c 93       	st	X, r20
    27b4:	9f 5f       	subi	r25, 0xFF	; 255
    27b6:	f1 cf       	rjmp	.-30     	; 0x279a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    27b8:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    27bc:	60 93 3c 04 	sts	0x043C, r22	; 0x80043c <_ZN7TwoWire14rxBufferLengthE>
    27c0:	cb 01       	movw	r24, r22
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	19 94       	eijmp
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <_ZN7TwoWire16onRequestServiceEv>:
    27ce:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <_ZN7TwoWire14user_onRequestE>
    27d2:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <_ZN7TwoWire14user_onRequestE+0x1>
    27d6:	30 97       	sbiw	r30, 0x00	; 0
    27d8:	29 f0       	breq	.+10     	; 0x27e4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    27da:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire13txBufferIndexE>
    27de:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    27e2:	19 94       	eijmp
    27e4:	08 95       	ret

000027e6 <_ZN7TwoWire5writeEPKhj>:
    27e6:	cf 92       	push	r12
    27e8:	df 92       	push	r13
    27ea:	ef 92       	push	r14
    27ec:	ff 92       	push	r15
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	7c 01       	movw	r14, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8a 01       	movw	r16, r20
    27fc:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <_ZN7TwoWire12transmittingE>
    2800:	22 23       	and	r18, r18
    2802:	89 f0       	breq	.+34     	; 0x2826 <_ZN7TwoWire5writeEPKhj+0x40>
    2804:	eb 01       	movw	r28, r22
    2806:	6b 01       	movw	r12, r22
    2808:	c4 0e       	add	r12, r20
    280a:	d5 1e       	adc	r13, r21
    280c:	cc 15       	cp	r28, r12
    280e:	dd 05       	cpc	r29, r13
    2810:	61 f0       	breq	.+24     	; 0x282a <_ZN7TwoWire5writeEPKhj+0x44>
    2812:	69 91       	ld	r22, Y+
    2814:	d7 01       	movw	r26, r14
    2816:	ed 91       	ld	r30, X+
    2818:	fc 91       	ld	r31, X
    281a:	01 90       	ld	r0, Z+
    281c:	f0 81       	ld	r31, Z
    281e:	e0 2d       	mov	r30, r0
    2820:	c7 01       	movw	r24, r14
    2822:	19 95       	eicall
    2824:	f3 cf       	rjmp	.-26     	; 0x280c <_ZN7TwoWire5writeEPKhj+0x26>
    2826:	64 2f       	mov	r22, r20
    2828:	df dc       	rcall	.-1602   	; 0x21e8 <twi_transmit>
    282a:	c8 01       	movw	r24, r16
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
    283c:	08 95       	ret

0000283e <_ZN7TwoWire5writeEh>:
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	1f 92       	push	r1
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	69 83       	std	Y+1, r22	; 0x01
    284a:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <_ZN7TwoWire12transmittingE>
    284e:	22 23       	and	r18, r18
    2850:	d1 f0       	breq	.+52     	; 0x2886 <_ZN7TwoWire5writeEh+0x48>
    2852:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    2856:	20 32       	cpi	r18, 0x20	; 32
    2858:	40 f0       	brcs	.+16     	; 0x286a <_ZN7TwoWire5writeEh+0x2c>
    285a:	21 e0       	ldi	r18, 0x01	; 1
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	fc 01       	movw	r30, r24
    2860:	33 83       	std	Z+3, r19	; 0x03
    2862:	22 83       	std	Z+2, r18	; 0x02
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	14 c0       	rjmp	.+40     	; 0x2892 <_ZN7TwoWire5writeEh+0x54>
    286a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <_ZN7TwoWire13txBufferIndexE>
    286e:	e8 2f       	mov	r30, r24
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	e5 5e       	subi	r30, 0xE5	; 229
    2874:	fb 4f       	sbci	r31, 0xFB	; 251
    2876:	99 81       	ldd	r25, Y+1	; 0x01
    2878:	90 83       	st	Z, r25
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <_ZN7TwoWire13txBufferIndexE>
    2880:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    2884:	04 c0       	rjmp	.+8      	; 0x288e <_ZN7TwoWire5writeEh+0x50>
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	ce 01       	movw	r24, r28
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	ad dc       	rcall	.-1702   	; 0x21e8 <twi_transmit>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	08 95       	ret

0000289a <_ZN7TwoWireC1Ev>:
    289a:	fc 01       	movw	r30, r24
    289c:	13 82       	std	Z+3, r1	; 0x03
    289e:	12 82       	std	Z+2, r1	; 0x02
    28a0:	88 ee       	ldi	r24, 0xE8	; 232
    28a2:	93 e0       	ldi	r25, 0x03	; 3
    28a4:	a0 e0       	ldi	r26, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	84 83       	std	Z+4, r24	; 0x04
    28aa:	95 83       	std	Z+5, r25	; 0x05
    28ac:	a6 83       	std	Z+6, r26	; 0x06
    28ae:	b7 83       	std	Z+7, r27	; 0x07
    28b0:	86 e8       	ldi	r24, 0x86	; 134
    28b2:	92 e0       	ldi	r25, 0x02	; 2
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	08 95       	ret

000028ba <_ZN7TwoWire5beginEv>:
    28ba:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire13rxBufferIndexE>
    28be:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_ZN7TwoWire14rxBufferLengthE>
    28c2:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire13txBufferIndexE>
    28c6:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    28ca:	63 dc       	rcall	.-1850   	; 0x2192 <twi_init>
    28cc:	87 ee       	ldi	r24, 0xE7	; 231
    28ce:	93 e1       	ldi	r25, 0x13	; 19
    28d0:	b8 dc       	rcall	.-1680   	; 0x2242 <twi_attachSlaveTxEvent>
    28d2:	8d eb       	ldi	r24, 0xBD	; 189
    28d4:	93 e1       	ldi	r25, 0x13	; 19
    28d6:	b0 cc       	rjmp	.-1696   	; 0x2238 <twi_attachSlaveRxEvent>

000028d8 <_ZN7TwoWire17beginTransmissionEh>:
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_ZN7TwoWire12transmittingE>
    28de:	60 93 3b 04 	sts	0x043B, r22	; 0x80043b <_ZN7TwoWire9txAddressE>
    28e2:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire13txBufferIndexE>
    28e6:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    28ea:	08 95       	ret

000028ec <_ZN7TwoWire17beginTransmissionEi>:
    28ec:	f5 cf       	rjmp	.-22     	; 0x28d8 <_ZN7TwoWire17beginTransmissionEh>

000028ee <_ZN7TwoWire15endTransmissionEh>:
    28ee:	0f 93       	push	r16
    28f0:	06 2f       	mov	r16, r22
    28f2:	21 e0       	ldi	r18, 0x01	; 1
    28f4:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    28f8:	6b e1       	ldi	r22, 0x1B	; 27
    28fa:	74 e0       	ldi	r23, 0x04	; 4
    28fc:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN7TwoWire9txAddressE>
    2900:	bf dc       	rcall	.-1666   	; 0x2280 <twi_writeTo>
    2902:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire13txBufferIndexE>
    2906:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire14txBufferLengthE>
    290a:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <_ZN7TwoWire12transmittingE>
    290e:	0f 91       	pop	r16
    2910:	08 95       	ret

00002912 <_ZN7TwoWire15endTransmissionEv>:
    2912:	61 e0       	ldi	r22, 0x01	; 1
    2914:	ec cf       	rjmp	.-40     	; 0x28ee <_ZN7TwoWire15endTransmissionEh>

00002916 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2916:	88 e0       	ldi	r24, 0x08	; 8
    2918:	94 e0       	ldi	r25, 0x04	; 4
    291a:	bf cf       	rjmp	.-130    	; 0x289a <_ZN7TwoWireC1Ev>

0000291c <__subsf3>:
    291c:	50 58       	subi	r21, 0x80	; 128

0000291e <__addsf3>:
    291e:	bb 27       	eor	r27, r27
    2920:	aa 27       	eor	r26, r26
    2922:	0e d0       	rcall	.+28     	; 0x2940 <__addsf3x>
    2924:	09 c1       	rjmp	.+530    	; 0x2b38 <__fp_round>
    2926:	fa d0       	rcall	.+500    	; 0x2b1c <__fp_pscA>
    2928:	30 f0       	brcs	.+12     	; 0x2936 <__addsf3+0x18>
    292a:	ff d0       	rcall	.+510    	; 0x2b2a <__fp_pscB>
    292c:	20 f0       	brcs	.+8      	; 0x2936 <__addsf3+0x18>
    292e:	31 f4       	brne	.+12     	; 0x293c <__addsf3+0x1e>
    2930:	9f 3f       	cpi	r25, 0xFF	; 255
    2932:	11 f4       	brne	.+4      	; 0x2938 <__addsf3+0x1a>
    2934:	1e f4       	brtc	.+6      	; 0x293c <__addsf3+0x1e>
    2936:	ef c0       	rjmp	.+478    	; 0x2b16 <__fp_nan>
    2938:	0e f4       	brtc	.+2      	; 0x293c <__addsf3+0x1e>
    293a:	e0 95       	com	r30
    293c:	e7 fb       	bst	r30, 7
    293e:	e5 c0       	rjmp	.+458    	; 0x2b0a <__fp_inf>

00002940 <__addsf3x>:
    2940:	e9 2f       	mov	r30, r25
    2942:	0b d1       	rcall	.+534    	; 0x2b5a <__fp_split3>
    2944:	80 f3       	brcs	.-32     	; 0x2926 <__addsf3+0x8>
    2946:	ba 17       	cp	r27, r26
    2948:	62 07       	cpc	r22, r18
    294a:	73 07       	cpc	r23, r19
    294c:	84 07       	cpc	r24, r20
    294e:	95 07       	cpc	r25, r21
    2950:	18 f0       	brcs	.+6      	; 0x2958 <__addsf3x+0x18>
    2952:	71 f4       	brne	.+28     	; 0x2970 <__addsf3x+0x30>
    2954:	9e f5       	brtc	.+102    	; 0x29bc <__addsf3x+0x7c>
    2956:	23 c1       	rjmp	.+582    	; 0x2b9e <__fp_zero>
    2958:	0e f4       	brtc	.+2      	; 0x295c <__addsf3x+0x1c>
    295a:	e0 95       	com	r30
    295c:	0b 2e       	mov	r0, r27
    295e:	ba 2f       	mov	r27, r26
    2960:	a0 2d       	mov	r26, r0
    2962:	0b 01       	movw	r0, r22
    2964:	b9 01       	movw	r22, r18
    2966:	90 01       	movw	r18, r0
    2968:	0c 01       	movw	r0, r24
    296a:	ca 01       	movw	r24, r20
    296c:	a0 01       	movw	r20, r0
    296e:	11 24       	eor	r1, r1
    2970:	ff 27       	eor	r31, r31
    2972:	59 1b       	sub	r21, r25
    2974:	99 f0       	breq	.+38     	; 0x299c <__addsf3x+0x5c>
    2976:	59 3f       	cpi	r21, 0xF9	; 249
    2978:	50 f4       	brcc	.+20     	; 0x298e <__addsf3x+0x4e>
    297a:	50 3e       	cpi	r21, 0xE0	; 224
    297c:	68 f1       	brcs	.+90     	; 0x29d8 <__addsf3x+0x98>
    297e:	1a 16       	cp	r1, r26
    2980:	f0 40       	sbci	r31, 0x00	; 0
    2982:	a2 2f       	mov	r26, r18
    2984:	23 2f       	mov	r18, r19
    2986:	34 2f       	mov	r19, r20
    2988:	44 27       	eor	r20, r20
    298a:	58 5f       	subi	r21, 0xF8	; 248
    298c:	f3 cf       	rjmp	.-26     	; 0x2974 <__addsf3x+0x34>
    298e:	46 95       	lsr	r20
    2990:	37 95       	ror	r19
    2992:	27 95       	ror	r18
    2994:	a7 95       	ror	r26
    2996:	f0 40       	sbci	r31, 0x00	; 0
    2998:	53 95       	inc	r21
    299a:	c9 f7       	brne	.-14     	; 0x298e <__addsf3x+0x4e>
    299c:	7e f4       	brtc	.+30     	; 0x29bc <__addsf3x+0x7c>
    299e:	1f 16       	cp	r1, r31
    29a0:	ba 0b       	sbc	r27, r26
    29a2:	62 0b       	sbc	r22, r18
    29a4:	73 0b       	sbc	r23, r19
    29a6:	84 0b       	sbc	r24, r20
    29a8:	ba f0       	brmi	.+46     	; 0x29d8 <__addsf3x+0x98>
    29aa:	91 50       	subi	r25, 0x01	; 1
    29ac:	a1 f0       	breq	.+40     	; 0x29d6 <__addsf3x+0x96>
    29ae:	ff 0f       	add	r31, r31
    29b0:	bb 1f       	adc	r27, r27
    29b2:	66 1f       	adc	r22, r22
    29b4:	77 1f       	adc	r23, r23
    29b6:	88 1f       	adc	r24, r24
    29b8:	c2 f7       	brpl	.-16     	; 0x29aa <__addsf3x+0x6a>
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <__addsf3x+0x98>
    29bc:	ba 0f       	add	r27, r26
    29be:	62 1f       	adc	r22, r18
    29c0:	73 1f       	adc	r23, r19
    29c2:	84 1f       	adc	r24, r20
    29c4:	48 f4       	brcc	.+18     	; 0x29d8 <__addsf3x+0x98>
    29c6:	87 95       	ror	r24
    29c8:	77 95       	ror	r23
    29ca:	67 95       	ror	r22
    29cc:	b7 95       	ror	r27
    29ce:	f7 95       	ror	r31
    29d0:	9e 3f       	cpi	r25, 0xFE	; 254
    29d2:	08 f0       	brcs	.+2      	; 0x29d6 <__addsf3x+0x96>
    29d4:	b3 cf       	rjmp	.-154    	; 0x293c <__addsf3+0x1e>
    29d6:	93 95       	inc	r25
    29d8:	88 0f       	add	r24, r24
    29da:	08 f0       	brcs	.+2      	; 0x29de <__addsf3x+0x9e>
    29dc:	99 27       	eor	r25, r25
    29de:	ee 0f       	add	r30, r30
    29e0:	97 95       	ror	r25
    29e2:	87 95       	ror	r24
    29e4:	08 95       	ret

000029e6 <__fixsfsi>:
    29e6:	04 d0       	rcall	.+8      	; 0x29f0 <__fixunssfsi>
    29e8:	68 94       	set
    29ea:	b1 11       	cpse	r27, r1
    29ec:	d9 c0       	rjmp	.+434    	; 0x2ba0 <__fp_szero>
    29ee:	08 95       	ret

000029f0 <__fixunssfsi>:
    29f0:	bc d0       	rcall	.+376    	; 0x2b6a <__fp_splitA>
    29f2:	88 f0       	brcs	.+34     	; 0x2a16 <__fixunssfsi+0x26>
    29f4:	9f 57       	subi	r25, 0x7F	; 127
    29f6:	90 f0       	brcs	.+36     	; 0x2a1c <__fixunssfsi+0x2c>
    29f8:	b9 2f       	mov	r27, r25
    29fa:	99 27       	eor	r25, r25
    29fc:	b7 51       	subi	r27, 0x17	; 23
    29fe:	a0 f0       	brcs	.+40     	; 0x2a28 <__fixunssfsi+0x38>
    2a00:	d1 f0       	breq	.+52     	; 0x2a36 <__fixunssfsi+0x46>
    2a02:	66 0f       	add	r22, r22
    2a04:	77 1f       	adc	r23, r23
    2a06:	88 1f       	adc	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	1a f0       	brmi	.+6      	; 0x2a12 <__fixunssfsi+0x22>
    2a0c:	ba 95       	dec	r27
    2a0e:	c9 f7       	brne	.-14     	; 0x2a02 <__fixunssfsi+0x12>
    2a10:	12 c0       	rjmp	.+36     	; 0x2a36 <__fixunssfsi+0x46>
    2a12:	b1 30       	cpi	r27, 0x01	; 1
    2a14:	81 f0       	breq	.+32     	; 0x2a36 <__fixunssfsi+0x46>
    2a16:	c3 d0       	rcall	.+390    	; 0x2b9e <__fp_zero>
    2a18:	b1 e0       	ldi	r27, 0x01	; 1
    2a1a:	08 95       	ret
    2a1c:	c0 c0       	rjmp	.+384    	; 0x2b9e <__fp_zero>
    2a1e:	67 2f       	mov	r22, r23
    2a20:	78 2f       	mov	r23, r24
    2a22:	88 27       	eor	r24, r24
    2a24:	b8 5f       	subi	r27, 0xF8	; 248
    2a26:	39 f0       	breq	.+14     	; 0x2a36 <__fixunssfsi+0x46>
    2a28:	b9 3f       	cpi	r27, 0xF9	; 249
    2a2a:	cc f3       	brlt	.-14     	; 0x2a1e <__fixunssfsi+0x2e>
    2a2c:	86 95       	lsr	r24
    2a2e:	77 95       	ror	r23
    2a30:	67 95       	ror	r22
    2a32:	b3 95       	inc	r27
    2a34:	d9 f7       	brne	.-10     	; 0x2a2c <__fixunssfsi+0x3c>
    2a36:	3e f4       	brtc	.+14     	; 0x2a46 <__fixunssfsi+0x56>
    2a38:	90 95       	com	r25
    2a3a:	80 95       	com	r24
    2a3c:	70 95       	com	r23
    2a3e:	61 95       	neg	r22
    2a40:	7f 4f       	sbci	r23, 0xFF	; 255
    2a42:	8f 4f       	sbci	r24, 0xFF	; 255
    2a44:	9f 4f       	sbci	r25, 0xFF	; 255
    2a46:	08 95       	ret

00002a48 <__floatunsisf>:
    2a48:	e8 94       	clt
    2a4a:	09 c0       	rjmp	.+18     	; 0x2a5e <__floatsisf+0x12>

00002a4c <__floatsisf>:
    2a4c:	97 fb       	bst	r25, 7
    2a4e:	3e f4       	brtc	.+14     	; 0x2a5e <__floatsisf+0x12>
    2a50:	90 95       	com	r25
    2a52:	80 95       	com	r24
    2a54:	70 95       	com	r23
    2a56:	61 95       	neg	r22
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	99 23       	and	r25, r25
    2a60:	a9 f0       	breq	.+42     	; 0x2a8c <__floatsisf+0x40>
    2a62:	f9 2f       	mov	r31, r25
    2a64:	96 e9       	ldi	r25, 0x96	; 150
    2a66:	bb 27       	eor	r27, r27
    2a68:	93 95       	inc	r25
    2a6a:	f6 95       	lsr	r31
    2a6c:	87 95       	ror	r24
    2a6e:	77 95       	ror	r23
    2a70:	67 95       	ror	r22
    2a72:	b7 95       	ror	r27
    2a74:	f1 11       	cpse	r31, r1
    2a76:	f8 cf       	rjmp	.-16     	; 0x2a68 <__floatsisf+0x1c>
    2a78:	fa f4       	brpl	.+62     	; 0x2ab8 <__floatsisf+0x6c>
    2a7a:	bb 0f       	add	r27, r27
    2a7c:	11 f4       	brne	.+4      	; 0x2a82 <__floatsisf+0x36>
    2a7e:	60 ff       	sbrs	r22, 0
    2a80:	1b c0       	rjmp	.+54     	; 0x2ab8 <__floatsisf+0x6c>
    2a82:	6f 5f       	subi	r22, 0xFF	; 255
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	8f 4f       	sbci	r24, 0xFF	; 255
    2a88:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8a:	16 c0       	rjmp	.+44     	; 0x2ab8 <__floatsisf+0x6c>
    2a8c:	88 23       	and	r24, r24
    2a8e:	11 f0       	breq	.+4      	; 0x2a94 <__floatsisf+0x48>
    2a90:	96 e9       	ldi	r25, 0x96	; 150
    2a92:	11 c0       	rjmp	.+34     	; 0x2ab6 <__floatsisf+0x6a>
    2a94:	77 23       	and	r23, r23
    2a96:	21 f0       	breq	.+8      	; 0x2aa0 <__floatsisf+0x54>
    2a98:	9e e8       	ldi	r25, 0x8E	; 142
    2a9a:	87 2f       	mov	r24, r23
    2a9c:	76 2f       	mov	r23, r22
    2a9e:	05 c0       	rjmp	.+10     	; 0x2aaa <__floatsisf+0x5e>
    2aa0:	66 23       	and	r22, r22
    2aa2:	71 f0       	breq	.+28     	; 0x2ac0 <__floatsisf+0x74>
    2aa4:	96 e8       	ldi	r25, 0x86	; 134
    2aa6:	86 2f       	mov	r24, r22
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	2a f0       	brmi	.+10     	; 0x2ab8 <__floatsisf+0x6c>
    2aae:	9a 95       	dec	r25
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	da f7       	brpl	.-10     	; 0x2aae <__floatsisf+0x62>
    2ab8:	88 0f       	add	r24, r24
    2aba:	96 95       	lsr	r25
    2abc:	87 95       	ror	r24
    2abe:	97 f9       	bld	r25, 7
    2ac0:	08 95       	ret

00002ac2 <__fp_cmp>:
    2ac2:	99 0f       	add	r25, r25
    2ac4:	00 08       	sbc	r0, r0
    2ac6:	55 0f       	add	r21, r21
    2ac8:	aa 0b       	sbc	r26, r26
    2aca:	e0 e8       	ldi	r30, 0x80	; 128
    2acc:	fe ef       	ldi	r31, 0xFE	; 254
    2ace:	16 16       	cp	r1, r22
    2ad0:	17 06       	cpc	r1, r23
    2ad2:	e8 07       	cpc	r30, r24
    2ad4:	f9 07       	cpc	r31, r25
    2ad6:	c0 f0       	brcs	.+48     	; 0x2b08 <__fp_cmp+0x46>
    2ad8:	12 16       	cp	r1, r18
    2ada:	13 06       	cpc	r1, r19
    2adc:	e4 07       	cpc	r30, r20
    2ade:	f5 07       	cpc	r31, r21
    2ae0:	98 f0       	brcs	.+38     	; 0x2b08 <__fp_cmp+0x46>
    2ae2:	62 1b       	sub	r22, r18
    2ae4:	73 0b       	sbc	r23, r19
    2ae6:	84 0b       	sbc	r24, r20
    2ae8:	95 0b       	sbc	r25, r21
    2aea:	39 f4       	brne	.+14     	; 0x2afa <__fp_cmp+0x38>
    2aec:	0a 26       	eor	r0, r26
    2aee:	61 f0       	breq	.+24     	; 0x2b08 <__fp_cmp+0x46>
    2af0:	23 2b       	or	r18, r19
    2af2:	24 2b       	or	r18, r20
    2af4:	25 2b       	or	r18, r21
    2af6:	21 f4       	brne	.+8      	; 0x2b00 <__fp_cmp+0x3e>
    2af8:	08 95       	ret
    2afa:	0a 26       	eor	r0, r26
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <__fp_cmp+0x3e>
    2afe:	a1 40       	sbci	r26, 0x01	; 1
    2b00:	a6 95       	lsr	r26
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	81 1d       	adc	r24, r1
    2b06:	81 1d       	adc	r24, r1
    2b08:	08 95       	ret

00002b0a <__fp_inf>:
    2b0a:	97 f9       	bld	r25, 7
    2b0c:	9f 67       	ori	r25, 0x7F	; 127
    2b0e:	80 e8       	ldi	r24, 0x80	; 128
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	08 95       	ret

00002b16 <__fp_nan>:
    2b16:	9f ef       	ldi	r25, 0xFF	; 255
    2b18:	80 ec       	ldi	r24, 0xC0	; 192
    2b1a:	08 95       	ret

00002b1c <__fp_pscA>:
    2b1c:	00 24       	eor	r0, r0
    2b1e:	0a 94       	dec	r0
    2b20:	16 16       	cp	r1, r22
    2b22:	17 06       	cpc	r1, r23
    2b24:	18 06       	cpc	r1, r24
    2b26:	09 06       	cpc	r0, r25
    2b28:	08 95       	ret

00002b2a <__fp_pscB>:
    2b2a:	00 24       	eor	r0, r0
    2b2c:	0a 94       	dec	r0
    2b2e:	12 16       	cp	r1, r18
    2b30:	13 06       	cpc	r1, r19
    2b32:	14 06       	cpc	r1, r20
    2b34:	05 06       	cpc	r0, r21
    2b36:	08 95       	ret

00002b38 <__fp_round>:
    2b38:	09 2e       	mov	r0, r25
    2b3a:	03 94       	inc	r0
    2b3c:	00 0c       	add	r0, r0
    2b3e:	11 f4       	brne	.+4      	; 0x2b44 <__fp_round+0xc>
    2b40:	88 23       	and	r24, r24
    2b42:	52 f0       	brmi	.+20     	; 0x2b58 <__fp_round+0x20>
    2b44:	bb 0f       	add	r27, r27
    2b46:	40 f4       	brcc	.+16     	; 0x2b58 <__fp_round+0x20>
    2b48:	bf 2b       	or	r27, r31
    2b4a:	11 f4       	brne	.+4      	; 0x2b50 <__fp_round+0x18>
    2b4c:	60 ff       	sbrs	r22, 0
    2b4e:	04 c0       	rjmp	.+8      	; 0x2b58 <__fp_round+0x20>
    2b50:	6f 5f       	subi	r22, 0xFF	; 255
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	8f 4f       	sbci	r24, 0xFF	; 255
    2b56:	9f 4f       	sbci	r25, 0xFF	; 255
    2b58:	08 95       	ret

00002b5a <__fp_split3>:
    2b5a:	57 fd       	sbrc	r21, 7
    2b5c:	90 58       	subi	r25, 0x80	; 128
    2b5e:	44 0f       	add	r20, r20
    2b60:	55 1f       	adc	r21, r21
    2b62:	59 f0       	breq	.+22     	; 0x2b7a <__fp_splitA+0x10>
    2b64:	5f 3f       	cpi	r21, 0xFF	; 255
    2b66:	71 f0       	breq	.+28     	; 0x2b84 <__fp_splitA+0x1a>
    2b68:	47 95       	ror	r20

00002b6a <__fp_splitA>:
    2b6a:	88 0f       	add	r24, r24
    2b6c:	97 fb       	bst	r25, 7
    2b6e:	99 1f       	adc	r25, r25
    2b70:	61 f0       	breq	.+24     	; 0x2b8a <__fp_splitA+0x20>
    2b72:	9f 3f       	cpi	r25, 0xFF	; 255
    2b74:	79 f0       	breq	.+30     	; 0x2b94 <__fp_splitA+0x2a>
    2b76:	87 95       	ror	r24
    2b78:	08 95       	ret
    2b7a:	12 16       	cp	r1, r18
    2b7c:	13 06       	cpc	r1, r19
    2b7e:	14 06       	cpc	r1, r20
    2b80:	55 1f       	adc	r21, r21
    2b82:	f2 cf       	rjmp	.-28     	; 0x2b68 <__fp_split3+0xe>
    2b84:	46 95       	lsr	r20
    2b86:	f1 df       	rcall	.-30     	; 0x2b6a <__fp_splitA>
    2b88:	08 c0       	rjmp	.+16     	; 0x2b9a <__fp_splitA+0x30>
    2b8a:	16 16       	cp	r1, r22
    2b8c:	17 06       	cpc	r1, r23
    2b8e:	18 06       	cpc	r1, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	f1 cf       	rjmp	.-30     	; 0x2b76 <__fp_splitA+0xc>
    2b94:	86 95       	lsr	r24
    2b96:	71 05       	cpc	r23, r1
    2b98:	61 05       	cpc	r22, r1
    2b9a:	08 94       	sec
    2b9c:	08 95       	ret

00002b9e <__fp_zero>:
    2b9e:	e8 94       	clt

00002ba0 <__fp_szero>:
    2ba0:	bb 27       	eor	r27, r27
    2ba2:	66 27       	eor	r22, r22
    2ba4:	77 27       	eor	r23, r23
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	97 f9       	bld	r25, 7
    2baa:	08 95       	ret

00002bac <__mulsf3>:
    2bac:	0b d0       	rcall	.+22     	; 0x2bc4 <__mulsf3x>
    2bae:	c4 cf       	rjmp	.-120    	; 0x2b38 <__fp_round>
    2bb0:	b5 df       	rcall	.-150    	; 0x2b1c <__fp_pscA>
    2bb2:	28 f0       	brcs	.+10     	; 0x2bbe <__mulsf3+0x12>
    2bb4:	ba df       	rcall	.-140    	; 0x2b2a <__fp_pscB>
    2bb6:	18 f0       	brcs	.+6      	; 0x2bbe <__mulsf3+0x12>
    2bb8:	95 23       	and	r25, r21
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <__mulsf3+0x12>
    2bbc:	a6 cf       	rjmp	.-180    	; 0x2b0a <__fp_inf>
    2bbe:	ab cf       	rjmp	.-170    	; 0x2b16 <__fp_nan>
    2bc0:	11 24       	eor	r1, r1
    2bc2:	ee cf       	rjmp	.-36     	; 0x2ba0 <__fp_szero>

00002bc4 <__mulsf3x>:
    2bc4:	ca df       	rcall	.-108    	; 0x2b5a <__fp_split3>
    2bc6:	a0 f3       	brcs	.-24     	; 0x2bb0 <__mulsf3+0x4>

00002bc8 <__mulsf3_pse>:
    2bc8:	95 9f       	mul	r25, r21
    2bca:	d1 f3       	breq	.-12     	; 0x2bc0 <__mulsf3+0x14>
    2bcc:	95 0f       	add	r25, r21
    2bce:	50 e0       	ldi	r21, 0x00	; 0
    2bd0:	55 1f       	adc	r21, r21
    2bd2:	62 9f       	mul	r22, r18
    2bd4:	f0 01       	movw	r30, r0
    2bd6:	72 9f       	mul	r23, r18
    2bd8:	bb 27       	eor	r27, r27
    2bda:	f0 0d       	add	r31, r0
    2bdc:	b1 1d       	adc	r27, r1
    2bde:	63 9f       	mul	r22, r19
    2be0:	aa 27       	eor	r26, r26
    2be2:	f0 0d       	add	r31, r0
    2be4:	b1 1d       	adc	r27, r1
    2be6:	aa 1f       	adc	r26, r26
    2be8:	64 9f       	mul	r22, r20
    2bea:	66 27       	eor	r22, r22
    2bec:	b0 0d       	add	r27, r0
    2bee:	a1 1d       	adc	r26, r1
    2bf0:	66 1f       	adc	r22, r22
    2bf2:	82 9f       	mul	r24, r18
    2bf4:	22 27       	eor	r18, r18
    2bf6:	b0 0d       	add	r27, r0
    2bf8:	a1 1d       	adc	r26, r1
    2bfa:	62 1f       	adc	r22, r18
    2bfc:	73 9f       	mul	r23, r19
    2bfe:	b0 0d       	add	r27, r0
    2c00:	a1 1d       	adc	r26, r1
    2c02:	62 1f       	adc	r22, r18
    2c04:	83 9f       	mul	r24, r19
    2c06:	a0 0d       	add	r26, r0
    2c08:	61 1d       	adc	r22, r1
    2c0a:	22 1f       	adc	r18, r18
    2c0c:	74 9f       	mul	r23, r20
    2c0e:	33 27       	eor	r19, r19
    2c10:	a0 0d       	add	r26, r0
    2c12:	61 1d       	adc	r22, r1
    2c14:	23 1f       	adc	r18, r19
    2c16:	84 9f       	mul	r24, r20
    2c18:	60 0d       	add	r22, r0
    2c1a:	21 1d       	adc	r18, r1
    2c1c:	82 2f       	mov	r24, r18
    2c1e:	76 2f       	mov	r23, r22
    2c20:	6a 2f       	mov	r22, r26
    2c22:	11 24       	eor	r1, r1
    2c24:	9f 57       	subi	r25, 0x7F	; 127
    2c26:	50 40       	sbci	r21, 0x00	; 0
    2c28:	8a f0       	brmi	.+34     	; 0x2c4c <__mulsf3_pse+0x84>
    2c2a:	e1 f0       	breq	.+56     	; 0x2c64 <__mulsf3_pse+0x9c>
    2c2c:	88 23       	and	r24, r24
    2c2e:	4a f0       	brmi	.+18     	; 0x2c42 <__mulsf3_pse+0x7a>
    2c30:	ee 0f       	add	r30, r30
    2c32:	ff 1f       	adc	r31, r31
    2c34:	bb 1f       	adc	r27, r27
    2c36:	66 1f       	adc	r22, r22
    2c38:	77 1f       	adc	r23, r23
    2c3a:	88 1f       	adc	r24, r24
    2c3c:	91 50       	subi	r25, 0x01	; 1
    2c3e:	50 40       	sbci	r21, 0x00	; 0
    2c40:	a9 f7       	brne	.-22     	; 0x2c2c <__mulsf3_pse+0x64>
    2c42:	9e 3f       	cpi	r25, 0xFE	; 254
    2c44:	51 05       	cpc	r21, r1
    2c46:	70 f0       	brcs	.+28     	; 0x2c64 <__mulsf3_pse+0x9c>
    2c48:	60 cf       	rjmp	.-320    	; 0x2b0a <__fp_inf>
    2c4a:	aa cf       	rjmp	.-172    	; 0x2ba0 <__fp_szero>
    2c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c4e:	ec f3       	brlt	.-6      	; 0x2c4a <__mulsf3_pse+0x82>
    2c50:	98 3e       	cpi	r25, 0xE8	; 232
    2c52:	dc f3       	brlt	.-10     	; 0x2c4a <__mulsf3_pse+0x82>
    2c54:	86 95       	lsr	r24
    2c56:	77 95       	ror	r23
    2c58:	67 95       	ror	r22
    2c5a:	b7 95       	ror	r27
    2c5c:	f7 95       	ror	r31
    2c5e:	e7 95       	ror	r30
    2c60:	9f 5f       	subi	r25, 0xFF	; 255
    2c62:	c1 f7       	brne	.-16     	; 0x2c54 <__mulsf3_pse+0x8c>
    2c64:	fe 2b       	or	r31, r30
    2c66:	88 0f       	add	r24, r24
    2c68:	91 1d       	adc	r25, r1
    2c6a:	96 95       	lsr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	97 f9       	bld	r25, 7
    2c70:	08 95       	ret

00002c72 <__unordsf2>:
    2c72:	27 df       	rcall	.-434    	; 0x2ac2 <__fp_cmp>
    2c74:	88 0b       	sbc	r24, r24
    2c76:	99 0b       	sbc	r25, r25
    2c78:	08 95       	ret

00002c7a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2c7a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2c7c:	91 8d       	ldd	r25, Z+25	; 0x19
    2c7e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c80:	89 2f       	mov	r24, r25
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	80 5c       	subi	r24, 0xC0	; 192
    2c86:	9f 4f       	sbci	r25, 0xFF	; 255
    2c88:	82 1b       	sub	r24, r18
    2c8a:	91 09       	sbc	r25, r1
}
    2c8c:	8f 73       	andi	r24, 0x3F	; 63
    2c8e:	99 27       	eor	r25, r25
    2c90:	08 95       	ret

00002c92 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2c92:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2c94:	91 8d       	ldd	r25, Z+25	; 0x19
    2c96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c98:	98 17       	cp	r25, r24
    2c9a:	31 f0       	breq	.+12     	; 0x2ca8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2c9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c9e:	e8 0f       	add	r30, r24
    2ca0:	f1 1d       	adc	r31, r1
    2ca2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2ca8:	8f ef       	ldi	r24, 0xFF	; 255
    2caa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2cac:	08 95       	ret

00002cae <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2cae:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2cb0:	91 8d       	ldd	r25, Z+25	; 0x19
    2cb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cb4:	98 17       	cp	r25, r24
    2cb6:	61 f0       	breq	.+24     	; 0x2cd0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2cb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cba:	df 01       	movw	r26, r30
    2cbc:	a8 0f       	add	r26, r24
    2cbe:	b1 1d       	adc	r27, r1
    2cc0:	5d 96       	adiw	r26, 0x1d	; 29
    2cc2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2cc4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cc6:	9f 5f       	subi	r25, 0xFF	; 255
    2cc8:	9f 73       	andi	r25, 0x3F	; 63
    2cca:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2cd4:	08 95       	ret

00002cd6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2cda:	44 8d       	ldd	r20, Z+28	; 0x1c
    2cdc:	25 2f       	mov	r18, r21
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	84 2f       	mov	r24, r20
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2ce4:	82 1b       	sub	r24, r18
    2ce6:	93 0b       	sbc	r25, r19
    2ce8:	54 17       	cp	r21, r20
    2cea:	10 f0       	brcs	.+4      	; 0x2cf0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2cec:	cf 96       	adiw	r24, 0x3f	; 63
    2cee:	08 95       	ret
  return tail - head - 1;
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
}
    2cf2:	08 95       	ret

00002cf4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2cf4:	87 e0       	ldi	r24, 0x07	; 7
    2cf6:	98 e1       	ldi	r25, 0x18	; 24
    2cf8:	89 2b       	or	r24, r25
    2cfa:	39 f0       	breq	.+14     	; 0x2d0a <_Z14serialEventRunv+0x16>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	89 2b       	or	r24, r25
    2d02:	19 f0       	breq	.+6      	; 0x2d0a <_Z14serialEventRunv+0x16>
    2d04:	84 d1       	rcall	.+776    	; 0x300e <_Z17Serial0_availablev>
    2d06:	81 11       	cpse	r24, r1
    2d08:	25 c0       	rjmp	.+74     	; 0x2d54 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	89 2b       	or	r24, r25
    2d10:	41 f0       	breq	.+16     	; 0x2d22 <_Z14serialEventRunv+0x2e>
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	89 2b       	or	r24, r25
    2d18:	21 f0       	breq	.+8      	; 0x2d22 <_Z14serialEventRunv+0x2e>
    2d1a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d1e:	81 11       	cpse	r24, r1
    2d20:	1c c0       	rjmp	.+56     	; 0x2d5a <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	89 2b       	or	r24, r25
    2d28:	41 f0       	breq	.+16     	; 0x2d3a <_Z14serialEventRunv+0x46>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	89 2b       	or	r24, r25
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <_Z14serialEventRunv+0x46>
    2d32:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d36:	81 11       	cpse	r24, r1
    2d38:	13 c0       	rjmp	.+38     	; 0x2d60 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	89 2b       	or	r24, r25
    2d40:	a1 f0       	breq	.+40     	; 0x2d6a <_Z14serialEventRunv+0x76>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	89 2b       	or	r24, r25
    2d48:	81 f0       	breq	.+32     	; 0x2d6a <_Z14serialEventRunv+0x76>
    2d4a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d4e:	81 11       	cpse	r24, r1
    2d50:	0a c0       	rjmp	.+20     	; 0x2d66 <_Z14serialEventRunv+0x72>
    2d52:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2d54:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d58:	d8 cf       	rjmp	.-80     	; 0x2d0a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2d5a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d5e:	e1 cf       	rjmp	.-62     	; 0x2d22 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2d60:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d64:	ea cf       	rjmp	.-44     	; 0x2d3a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2d66:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2d6a:	08 95       	ret

00002d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2d6c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2d6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d70:	df 01       	movw	r26, r30
    2d72:	a8 0f       	add	r26, r24
    2d74:	b1 1d       	adc	r27, r1
    2d76:	a3 5a       	subi	r26, 0xA3	; 163
    2d78:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2d7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	01 96       	adiw	r24, 0x01	; 1
    2d82:	8f 73       	andi	r24, 0x3F	; 63
    2d84:	99 27       	eor	r25, r25
    2d86:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2d88:	a6 89       	ldd	r26, Z+22	; 0x16
    2d8a:	b7 89       	ldd	r27, Z+23	; 0x17
    2d8c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2d8e:	a0 89       	ldd	r26, Z+16	; 0x10
    2d90:	b1 89       	ldd	r27, Z+17	; 0x11
    2d92:	8c 91       	ld	r24, X
    2d94:	83 70       	andi	r24, 0x03	; 3
    2d96:	80 64       	ori	r24, 0x40	; 64
    2d98:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2d9a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d9e:	98 13       	cpse	r25, r24
    2da0:	06 c0       	rjmp	.+12     	; 0x2dae <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2da2:	02 88       	ldd	r0, Z+18	; 0x12
    2da4:	f3 89       	ldd	r31, Z+19	; 0x13
    2da6:	e0 2d       	mov	r30, r0
    2da8:	80 81       	ld	r24, Z
    2daa:	8f 7d       	andi	r24, 0xDF	; 223
    2dac:	80 83       	st	Z, r24
    2dae:	08 95       	ret

00002db0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2db0:	ef 92       	push	r14
    2db2:	ff 92       	push	r15
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	ec 01       	movw	r28, r24
  _written = true;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2dc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dc6:	98 13       	cpse	r25, r24
    2dc8:	05 c0       	rjmp	.+10     	; 0x2dd4 <_ZN14HardwareSerial5writeEh+0x24>
    2dca:	e8 89       	ldd	r30, Y+16	; 0x10
    2dcc:	f9 89       	ldd	r31, Y+17	; 0x11
    2dce:	80 81       	ld	r24, Z
    2dd0:	85 fd       	sbrc	r24, 5
    2dd2:	25 c0       	rjmp	.+74     	; 0x2e1e <_ZN14HardwareSerial5writeEh+0x6e>
    2dd4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2dd6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2dd8:	10 e0       	ldi	r17, 0x00	; 0
    2dda:	0f 5f       	subi	r16, 0xFF	; 255
    2ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dde:	0f 73       	andi	r16, 0x3F	; 63
    2de0:	11 27       	eor	r17, r17
    2de2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2de4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2de6:	e8 12       	cpse	r14, r24
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	07 fc       	sbrc	r0, 7
    2dee:	fa cf       	rjmp	.-12     	; 0x2de4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2df0:	e8 89       	ldd	r30, Y+16	; 0x10
    2df2:	f9 89       	ldd	r31, Y+17	; 0x11
    2df4:	80 81       	ld	r24, Z
    2df6:	85 ff       	sbrs	r24, 5
    2df8:	f5 cf       	rjmp	.-22     	; 0x2de4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	b7 df       	rcall	.-146    	; 0x2d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2dfe:	f2 cf       	rjmp	.-28     	; 0x2de4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e02:	fe 01       	movw	r30, r28
    2e04:	e8 0f       	add	r30, r24
    2e06:	f1 1d       	adc	r31, r1
    2e08:	e3 5a       	subi	r30, 0xA3	; 163
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2e0e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e10:	f8 94       	cli
    _tx_buffer_head = i;
    2e12:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2e14:	ea 89       	ldd	r30, Y+18	; 0x12
    2e16:	fb 89       	ldd	r31, Y+19	; 0x13
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 62       	ori	r24, 0x20	; 32
    2e1c:	0a c0       	rjmp	.+20     	; 0x2e32 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2e1e:	9f b7       	in	r25, 0x3f	; 63
    2e20:	f8 94       	cli
      *_udr = c;
    2e22:	ee 89       	ldd	r30, Y+22	; 0x16
    2e24:	ff 89       	ldd	r31, Y+23	; 0x17
    2e26:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2e28:	e8 89       	ldd	r30, Y+16	; 0x10
    2e2a:	f9 89       	ldd	r31, Y+17	; 0x11
    2e2c:	80 81       	ld	r24, Z
    2e2e:	83 70       	andi	r24, 0x03	; 3
    2e30:	80 64       	ori	r24, 0x40	; 64
    2e32:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e34:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	ff 90       	pop	r15
    2e44:	ef 90       	pop	r14
    2e46:	08 95       	ret

00002e48 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2e4e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e50:	88 23       	and	r24, r24
    2e52:	c1 f0       	breq	.+48     	; 0x2e84 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2e54:	ea 89       	ldd	r30, Y+18	; 0x12
    2e56:	fb 89       	ldd	r31, Y+19	; 0x13
    2e58:	80 81       	ld	r24, Z
    2e5a:	85 fd       	sbrc	r24, 5
    2e5c:	05 c0       	rjmp	.+10     	; 0x2e68 <_ZN14HardwareSerial5flushEv+0x20>
    2e5e:	a8 89       	ldd	r26, Y+16	; 0x10
    2e60:	b9 89       	ldd	r27, Y+17	; 0x11
    2e62:	8c 91       	ld	r24, X
    2e64:	86 fd       	sbrc	r24, 6
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	07 fc       	sbrc	r0, 7
    2e6c:	f5 cf       	rjmp	.-22     	; 0x2e58 <_ZN14HardwareSerial5flushEv+0x10>
    2e6e:	80 81       	ld	r24, Z
    2e70:	85 ff       	sbrs	r24, 5
    2e72:	f2 cf       	rjmp	.-28     	; 0x2e58 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2e74:	a8 89       	ldd	r26, Y+16	; 0x10
    2e76:	b9 89       	ldd	r27, Y+17	; 0x11
    2e78:	8c 91       	ld	r24, X
    2e7a:	85 ff       	sbrs	r24, 5
    2e7c:	ed cf       	rjmp	.-38     	; 0x2e58 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2e7e:	ce 01       	movw	r24, r28
    2e80:	75 df       	rcall	.-278    	; 0x2d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e82:	e8 cf       	rjmp	.-48     	; 0x2e54 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2e8a:	cf 92       	push	r12
    2e8c:	df 92       	push	r13
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	ec 01       	movw	r28, r24
    2e9a:	6a 01       	movw	r12, r20
    2e9c:	7b 01       	movw	r14, r22
    2e9e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2ea0:	e8 89       	ldd	r30, Y+16	; 0x10
    2ea2:	f9 89       	ldd	r31, Y+17	; 0x11
    2ea4:	82 e0       	ldi	r24, 0x02	; 2
    2ea6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2ea8:	41 15       	cp	r20, r1
    2eaa:	51 4e       	sbci	r21, 0xE1	; 225
    2eac:	61 05       	cpc	r22, r1
    2eae:	71 05       	cpc	r23, r1
    2eb0:	a9 f0       	breq	.+42     	; 0x2edc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	79 e0       	ldi	r23, 0x09	; 9
    2eb6:	8d e3       	ldi	r24, 0x3D	; 61
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a7 01       	movw	r20, r14
    2ebc:	96 01       	movw	r18, r12
    2ebe:	5c d5       	rcall	.+2744   	; 0x3978 <__udivmodsi4>
    2ec0:	da 01       	movw	r26, r20
    2ec2:	c9 01       	movw	r24, r18
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	a1 09       	sbc	r26, r1
    2ec8:	b1 09       	sbc	r27, r1
    2eca:	b6 95       	lsr	r27
    2ecc:	a7 95       	ror	r26
    2ece:	97 95       	ror	r25
    2ed0:	87 95       	ror	r24
    2ed2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2ed4:	21 15       	cp	r18, r1
    2ed6:	80 e1       	ldi	r24, 0x10	; 16
    2ed8:	38 07       	cpc	r19, r24
    2eda:	a0 f0       	brcs	.+40     	; 0x2f04 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    2edc:	e8 89       	ldd	r30, Y+16	; 0x10
    2ede:	f9 89       	ldd	r31, Y+17	; 0x11
    2ee0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2ee2:	60 e8       	ldi	r22, 0x80	; 128
    2ee4:	74 e8       	ldi	r23, 0x84	; 132
    2ee6:	8e e1       	ldi	r24, 0x1E	; 30
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a7 01       	movw	r20, r14
    2eec:	96 01       	movw	r18, r12
    2eee:	44 d5       	rcall	.+2696   	; 0x3978 <__udivmodsi4>
    2ef0:	da 01       	movw	r26, r20
    2ef2:	c9 01       	movw	r24, r18
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	a1 09       	sbc	r26, r1
    2ef8:	b1 09       	sbc	r27, r1
    2efa:	b6 95       	lsr	r27
    2efc:	a7 95       	ror	r26
    2efe:	97 95       	ror	r25
    2f00:	87 95       	ror	r24
    2f02:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2f04:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f06:	fd 85       	ldd	r31, Y+13	; 0x0d
    2f08:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2f0a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f0c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f0e:	20 83       	st	Z, r18

  _written = false;
    2f10:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2f12:	ec 89       	ldd	r30, Y+20	; 0x14
    2f14:	fd 89       	ldd	r31, Y+21	; 0x15
    2f16:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2f18:	ea 89       	ldd	r30, Y+18	; 0x12
    2f1a:	fb 89       	ldd	r31, Y+19	; 0x13
    2f1c:	80 81       	ld	r24, Z
    2f1e:	80 61       	ori	r24, 0x10	; 16
    2f20:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2f22:	ea 89       	ldd	r30, Y+18	; 0x12
    2f24:	fb 89       	ldd	r31, Y+19	; 0x13
    2f26:	80 81       	ld	r24, Z
    2f28:	88 60       	ori	r24, 0x08	; 8
    2f2a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2f2c:	ea 89       	ldd	r30, Y+18	; 0x12
    2f2e:	fb 89       	ldd	r31, Y+19	; 0x13
    2f30:	80 81       	ld	r24, Z
    2f32:	80 68       	ori	r24, 0x80	; 128
    2f34:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2f36:	ea 89       	ldd	r30, Y+18	; 0x12
    2f38:	fb 89       	ldd	r31, Y+19	; 0x13
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 7d       	andi	r24, 0xDF	; 223
    2f3e:	80 83       	st	Z, r24
}
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	cf 90       	pop	r12
    2f4e:	08 95       	ret

00002f50 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2f50:	1f 92       	push	r1
    2f52:	0f 92       	push	r0
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	0f 92       	push	r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	0b b6       	in	r0, 0x3b	; 59
    2f5c:	0f 92       	push	r0
    2f5e:	2f 93       	push	r18
    2f60:	8f 93       	push	r24
    2f62:	9f 93       	push	r25
    2f64:	ef 93       	push	r30
    2f66:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2f68:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <Serial+0x10>
    2f6c:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <Serial+0x11>
    2f70:	80 81       	ld	r24, Z
    2f72:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <Serial+0x16>
    2f76:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <Serial+0x17>
    2f7a:	82 fd       	sbrc	r24, 2
    2f7c:	12 c0       	rjmp	.+36     	; 0x2fa2 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2f7e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2f80:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <Serial+0x19>
    2f84:	8f 5f       	subi	r24, 0xFF	; 255
    2f86:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2f88:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <Serial+0x1a>
    2f8c:	82 17       	cp	r24, r18
    2f8e:	51 f0       	breq	.+20     	; 0x2fa4 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2f90:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <Serial+0x19>
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	e2 5a       	subi	r30, 0xA2	; 162
    2f98:	fb 4f       	sbci	r31, 0xFB	; 251
    2f9a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2f9c:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <Serial+0x19>
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2fa2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2fa4:	ff 91       	pop	r31
    2fa6:	ef 91       	pop	r30
    2fa8:	9f 91       	pop	r25
    2faa:	8f 91       	pop	r24
    2fac:	2f 91       	pop	r18
    2fae:	0f 90       	pop	r0
    2fb0:	0b be       	out	0x3b, r0	; 59
    2fb2:	0f 90       	pop	r0
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	0f 90       	pop	r0
    2fb8:	1f 90       	pop	r1
    2fba:	18 95       	reti

00002fbc <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2fbc:	1f 92       	push	r1
    2fbe:	0f 92       	push	r0
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	0f 92       	push	r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	0b b6       	in	r0, 0x3b	; 59
    2fc8:	0f 92       	push	r0
    2fca:	2f 93       	push	r18
    2fcc:	3f 93       	push	r19
    2fce:	4f 93       	push	r20
    2fd0:	5f 93       	push	r21
    2fd2:	6f 93       	push	r22
    2fd4:	7f 93       	push	r23
    2fd6:	8f 93       	push	r24
    2fd8:	9f 93       	push	r25
    2fda:	af 93       	push	r26
    2fdc:	bf 93       	push	r27
    2fde:	ef 93       	push	r30
    2fe0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2fe2:	8e e5       	ldi	r24, 0x5E	; 94
    2fe4:	94 e0       	ldi	r25, 0x04	; 4
    2fe6:	c2 de       	rcall	.-636    	; 0x2d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2fe8:	ff 91       	pop	r31
    2fea:	ef 91       	pop	r30
    2fec:	bf 91       	pop	r27
    2fee:	af 91       	pop	r26
    2ff0:	9f 91       	pop	r25
    2ff2:	8f 91       	pop	r24
    2ff4:	7f 91       	pop	r23
    2ff6:	6f 91       	pop	r22
    2ff8:	5f 91       	pop	r21
    2ffa:	4f 91       	pop	r20
    2ffc:	3f 91       	pop	r19
    2ffe:	2f 91       	pop	r18
    3000:	0f 90       	pop	r0
    3002:	0b be       	out	0x3b, r0	; 59
    3004:	0f 90       	pop	r0
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	0f 90       	pop	r0
    300a:	1f 90       	pop	r1
    300c:	18 95       	reti

0000300e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    300e:	8e e5       	ldi	r24, 0x5E	; 94
    3010:	94 e0       	ldi	r25, 0x04	; 4
    3012:	33 de       	rcall	.-922    	; 0x2c7a <_ZN14HardwareSerial9availableEv>
    3014:	21 e0       	ldi	r18, 0x01	; 1
    3016:	89 2b       	or	r24, r25
    3018:	09 f4       	brne	.+2      	; 0x301c <_Z17Serial0_availablev+0xe>
    301a:	20 e0       	ldi	r18, 0x00	; 0
}
    301c:	82 2f       	mov	r24, r18
    301e:	08 95       	ret

00003020 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3020:	ee e5       	ldi	r30, 0x5E	; 94
    3022:	f4 e0       	ldi	r31, 0x04	; 4
    3024:	13 82       	std	Z+3, r1	; 0x03
    3026:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3028:	88 ee       	ldi	r24, 0xE8	; 232
    302a:	93 e0       	ldi	r25, 0x03	; 3
    302c:	a0 e0       	ldi	r26, 0x00	; 0
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	84 83       	std	Z+4, r24	; 0x04
    3032:	95 83       	std	Z+5, r25	; 0x05
    3034:	a6 83       	std	Z+6, r26	; 0x06
    3036:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3038:	88 e9       	ldi	r24, 0x98	; 152
    303a:	92 e0       	ldi	r25, 0x02	; 2
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
    3040:	85 ec       	ldi	r24, 0xC5	; 197
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	95 87       	std	Z+13, r25	; 0x0d
    3046:	84 87       	std	Z+12, r24	; 0x0c
    3048:	84 ec       	ldi	r24, 0xC4	; 196
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	97 87       	std	Z+15, r25	; 0x0f
    304e:	86 87       	std	Z+14, r24	; 0x0e
    3050:	80 ec       	ldi	r24, 0xC0	; 192
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	91 8b       	std	Z+17, r25	; 0x11
    3056:	80 8b       	std	Z+16, r24	; 0x10
    3058:	81 ec       	ldi	r24, 0xC1	; 193
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	93 8b       	std	Z+19, r25	; 0x13
    305e:	82 8b       	std	Z+18, r24	; 0x12
    3060:	82 ec       	ldi	r24, 0xC2	; 194
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	95 8b       	std	Z+21, r25	; 0x15
    3066:	84 8b       	std	Z+20, r24	; 0x14
    3068:	86 ec       	ldi	r24, 0xC6	; 198
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	97 8b       	std	Z+23, r25	; 0x17
    306e:	86 8b       	std	Z+22, r24	; 0x16
    3070:	11 8e       	std	Z+25, r1	; 0x19
    3072:	12 8e       	std	Z+26, r1	; 0x1a
    3074:	13 8e       	std	Z+27, r1	; 0x1b
    3076:	14 8e       	std	Z+28, r1	; 0x1c
    3078:	08 95       	ret

0000307a <initVariant>:
    307a:	08 95       	ret

0000307c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    307c:	77 d1       	rcall	.+750    	; 0x336c <init>

	initVariant();
    307e:	fd df       	rcall	.-6      	; 0x307a <initVariant>
    3080:	0e 94 4a 01 	call	0x294	; 0x294 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3084:	ca e7       	ldi	r28, 0x7A	; 122
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3086:	d6 e1       	ldi	r29, 0x16	; 22
    3088:	0e 94 56 03 	call	0x6ac	; 0x6ac <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    308c:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    308e:	e1 f3       	breq	.-8      	; 0x3088 <main+0xc>
    3090:	31 de       	rcall	.-926    	; 0x2cf4 <_Z14serialEventRunv>
    3092:	fa cf       	rjmp	.-12     	; 0x3088 <main+0xc>

00003094 <_ZdlPv>:
    3094:	68 c5       	rjmp	.+2768   	; 0x3b66 <free>

00003096 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	6c 01       	movw	r12, r24
    30a8:	7a 01       	movw	r14, r20
    30aa:	8b 01       	movw	r16, r22
    30ac:	c0 e0       	ldi	r28, 0x00	; 0
    30ae:	d0 e0       	ldi	r29, 0x00	; 0
    30b0:	ce 15       	cp	r28, r14
    30b2:	df 05       	cpc	r29, r15
    30b4:	81 f0       	breq	.+32     	; 0x30d6 <_ZN5Print5writeEPKhj+0x40>
    30b6:	d8 01       	movw	r26, r16
    30b8:	6d 91       	ld	r22, X+
    30ba:	8d 01       	movw	r16, r26
    30bc:	d6 01       	movw	r26, r12
    30be:	ed 91       	ld	r30, X+
    30c0:	fc 91       	ld	r31, X
    30c2:	01 90       	ld	r0, Z+
    30c4:	f0 81       	ld	r31, Z
    30c6:	e0 2d       	mov	r30, r0
    30c8:	c6 01       	movw	r24, r12
    30ca:	19 95       	eicall
    30cc:	89 2b       	or	r24, r25
    30ce:	11 f0       	breq	.+4      	; 0x30d4 <_ZN5Print5writeEPKhj+0x3e>
    30d0:	21 96       	adiw	r28, 0x01	; 1
    30d2:	ee cf       	rjmp	.-36     	; 0x30b0 <_ZN5Print5writeEPKhj+0x1a>
    30d4:	7e 01       	movw	r14, r28
    30d6:	c7 01       	movw	r24, r14
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	ff 90       	pop	r15
    30e2:	ef 90       	pop	r14
    30e4:	df 90       	pop	r13
    30e6:	cf 90       	pop	r12
    30e8:	08 95       	ret

000030ea <_ZN5Print5writeEPKc>:
    30ea:	61 15       	cp	r22, r1
    30ec:	71 05       	cpc	r23, r1
    30ee:	79 f0       	breq	.+30     	; 0x310e <_ZN5Print5writeEPKc+0x24>
    30f0:	fb 01       	movw	r30, r22
    30f2:	01 90       	ld	r0, Z+
    30f4:	00 20       	and	r0, r0
    30f6:	e9 f7       	brne	.-6      	; 0x30f2 <_ZN5Print5writeEPKc+0x8>
    30f8:	31 97       	sbiw	r30, 0x01	; 1
    30fa:	af 01       	movw	r20, r30
    30fc:	46 1b       	sub	r20, r22
    30fe:	57 0b       	sbc	r21, r23
    3100:	dc 01       	movw	r26, r24
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	02 80       	ldd	r0, Z+2	; 0x02
    3108:	f3 81       	ldd	r31, Z+3	; 0x03
    310a:	e0 2d       	mov	r30, r0
    310c:	19 94       	eijmp
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	08 95       	ret

00003114 <_ZN5Print5printEPKc>:
    3114:	ea cf       	rjmp	.-44     	; 0x30ea <_ZN5Print5writeEPKc>

00003116 <_ZN5Print7printlnEv>:
    3116:	66 ea       	ldi	r22, 0xA6	; 166
    3118:	72 e0       	ldi	r23, 0x02	; 2
    311a:	e7 cf       	rjmp	.-50     	; 0x30ea <_ZN5Print5writeEPKc>

0000311c <_ZN5Print7printlnEPKc>:
    311c:	0f 93       	push	r16
    311e:	1f 93       	push	r17
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	ec 01       	movw	r28, r24
    3126:	e1 df       	rcall	.-62     	; 0x30ea <_ZN5Print5writeEPKc>
    3128:	8c 01       	movw	r16, r24
    312a:	ce 01       	movw	r24, r28
    312c:	f4 df       	rcall	.-24     	; 0x3116 <_ZN5Print7printlnEv>
    312e:	80 0f       	add	r24, r16
    3130:	91 1f       	adc	r25, r17
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	1f 91       	pop	r17
    3138:	0f 91       	pop	r16
    313a:	08 95       	ret

0000313c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    313c:	8f 92       	push	r8
    313e:	9f 92       	push	r9
    3140:	af 92       	push	r10
    3142:	bf 92       	push	r11
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	a1 97       	sbiw	r28, 0x21	; 33
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	7c 01       	movw	r14, r24
    3162:	fa 01       	movw	r30, r20
    3164:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3166:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3168:	22 30       	cpi	r18, 0x02	; 2
    316a:	08 f4       	brcc	.+2      	; 0x316e <_ZN5Print11printNumberEmh+0x32>
    316c:	2a e0       	ldi	r18, 0x0A	; 10
    316e:	8e 01       	movw	r16, r28
    3170:	0f 5d       	subi	r16, 0xDF	; 223
    3172:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    3174:	82 2e       	mov	r8, r18
    3176:	91 2c       	mov	r9, r1
    3178:	a1 2c       	mov	r10, r1
    317a:	b1 2c       	mov	r11, r1
    317c:	bf 01       	movw	r22, r30
    317e:	a5 01       	movw	r20, r10
    3180:	94 01       	movw	r18, r8
    3182:	fa d3       	rcall	.+2036   	; 0x3978 <__udivmodsi4>
    n /= base;
    3184:	f9 01       	movw	r30, r18
    3186:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3188:	01 50       	subi	r16, 0x01	; 1
    318a:	11 09       	sbc	r17, r1
    318c:	6a 30       	cpi	r22, 0x0A	; 10
    318e:	10 f4       	brcc	.+4      	; 0x3194 <_ZN5Print11printNumberEmh+0x58>
    3190:	60 5d       	subi	r22, 0xD0	; 208
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <_ZN5Print11printNumberEmh+0x5a>
    3194:	69 5c       	subi	r22, 0xC9	; 201
    3196:	d8 01       	movw	r26, r16
    3198:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    319a:	23 2b       	or	r18, r19
    319c:	24 2b       	or	r18, r20
    319e:	25 2b       	or	r18, r21
    31a0:	69 f7       	brne	.-38     	; 0x317c <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    31a2:	b8 01       	movw	r22, r16
    31a4:	c7 01       	movw	r24, r14
    31a6:	a1 df       	rcall	.-190    	; 0x30ea <_ZN5Print5writeEPKc>
}
    31a8:	a1 96       	adiw	r28, 0x21	; 33
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	bf 90       	pop	r11
    31c2:	af 90       	pop	r10
    31c4:	9f 90       	pop	r9
    31c6:	8f 90       	pop	r8
    31c8:	08 95       	ret

000031ca <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    31ca:	21 15       	cp	r18, r1
    31cc:	31 05       	cpc	r19, r1
    31ce:	41 f4       	brne	.+16     	; 0x31e0 <_ZN5Print5printEmi+0x16>
    31d0:	dc 01       	movw	r26, r24
    31d2:	ed 91       	ld	r30, X+
    31d4:	fc 91       	ld	r31, X
    31d6:	01 90       	ld	r0, Z+
    31d8:	f0 81       	ld	r31, Z
    31da:	e0 2d       	mov	r30, r0
    31dc:	64 2f       	mov	r22, r20
    31de:	19 94       	eijmp
  else return printNumber(n, base);
    31e0:	ad cf       	rjmp	.-166    	; 0x313c <_ZN5Print11printNumberEmh>

000031e2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    31e2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    31e4:	46 2f       	mov	r20, r22
    31e6:	50 e0       	ldi	r21, 0x00	; 0
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	ee cf       	rjmp	.-36     	; 0x31ca <_ZN5Print5printEmi>

000031ee <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	2f 93       	push	r18
    31fa:	3f 93       	push	r19
    31fc:	8f 93       	push	r24
    31fe:	9f 93       	push	r25
    3200:	af 93       	push	r26
    3202:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3204:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <timer0_millis>
    3208:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <timer0_millis+0x1>
    320c:	a0 91 fe 04 	lds	r26, 0x04FE	; 0x8004fe <timer0_millis+0x2>
    3210:	b0 91 ff 04 	lds	r27, 0x04FF	; 0x8004ff <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3214:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3218:	23 e0       	ldi	r18, 0x03	; 3
    321a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    321c:	2d 37       	cpi	r18, 0x7D	; 125
    321e:	20 f4       	brcc	.+8      	; 0x3228 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	a1 1d       	adc	r26, r1
    3224:	b1 1d       	adc	r27, r1
    3226:	05 c0       	rjmp	.+10     	; 0x3232 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3228:	26 e8       	ldi	r18, 0x86	; 134
    322a:	23 0f       	add	r18, r19
		m += 1;
    322c:	02 96       	adiw	r24, 0x02	; 2
    322e:	a1 1d       	adc	r26, r1
    3230:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3232:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <timer0_fract>
	timer0_millis = m;
    3236:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <timer0_millis>
    323a:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <timer0_millis+0x1>
    323e:	a0 93 fe 04 	sts	0x04FE, r26	; 0x8004fe <timer0_millis+0x2>
    3242:	b0 93 ff 04 	sts	0x04FF, r27	; 0x8004ff <timer0_millis+0x3>
	timer0_overflow_count++;
    3246:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <timer0_overflow_count>
    324a:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <timer0_overflow_count+0x1>
    324e:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <timer0_overflow_count+0x2>
    3252:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <timer0_overflow_count+0x3>
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	a1 1d       	adc	r26, r1
    325a:	b1 1d       	adc	r27, r1
    325c:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <timer0_overflow_count>
    3260:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <timer0_overflow_count+0x1>
    3264:	a0 93 02 05 	sts	0x0502, r26	; 0x800502 <timer0_overflow_count+0x2>
    3268:	b0 93 03 05 	sts	0x0503, r27	; 0x800503 <timer0_overflow_count+0x3>
}
    326c:	bf 91       	pop	r27
    326e:	af 91       	pop	r26
    3270:	9f 91       	pop	r25
    3272:	8f 91       	pop	r24
    3274:	3f 91       	pop	r19
    3276:	2f 91       	pop	r18
    3278:	0f 90       	pop	r0
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	0f 90       	pop	r0
    327e:	1f 90       	pop	r1
    3280:	18 95       	reti

00003282 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3282:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3284:	f8 94       	cli
	m = timer0_millis;
    3286:	60 91 fc 04 	lds	r22, 0x04FC	; 0x8004fc <timer0_millis>
    328a:	70 91 fd 04 	lds	r23, 0x04FD	; 0x8004fd <timer0_millis+0x1>
    328e:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <timer0_millis+0x2>
    3292:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <timer0_millis+0x3>
	SREG = oldSREG;
    3296:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3298:	08 95       	ret

0000329a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    329a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    329c:	f8 94       	cli
	m = timer0_overflow_count;
    329e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <timer0_overflow_count>
    32a2:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <timer0_overflow_count+0x1>
    32a6:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <timer0_overflow_count+0x2>
    32aa:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    32ae:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    32b0:	a8 9b       	sbis	0x15, 0	; 21
    32b2:	05 c0       	rjmp	.+10     	; 0x32be <micros+0x24>
    32b4:	2f 3f       	cpi	r18, 0xFF	; 255
    32b6:	19 f0       	breq	.+6      	; 0x32be <micros+0x24>
		m++;
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	a1 1d       	adc	r26, r1
    32bc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    32be:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    32c0:	ba 2f       	mov	r27, r26
    32c2:	a9 2f       	mov	r26, r25
    32c4:	98 2f       	mov	r25, r24
    32c6:	88 27       	eor	r24, r24
    32c8:	82 0f       	add	r24, r18
    32ca:	91 1d       	adc	r25, r1
    32cc:	a1 1d       	adc	r26, r1
    32ce:	b1 1d       	adc	r27, r1
    32d0:	bc 01       	movw	r22, r24
    32d2:	cd 01       	movw	r24, r26
    32d4:	42 e0       	ldi	r20, 0x02	; 2
    32d6:	66 0f       	add	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	88 1f       	adc	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	4a 95       	dec	r20
    32e0:	d1 f7       	brne	.-12     	; 0x32d6 <micros+0x3c>
}
    32e2:	08 95       	ret

000032e4 <delay>:

void delay(unsigned long ms)
{
    32e4:	8f 92       	push	r8
    32e6:	9f 92       	push	r9
    32e8:	af 92       	push	r10
    32ea:	bf 92       	push	r11
    32ec:	cf 92       	push	r12
    32ee:	df 92       	push	r13
    32f0:	ef 92       	push	r14
    32f2:	ff 92       	push	r15
    32f4:	6b 01       	movw	r12, r22
    32f6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    32f8:	d0 df       	rcall	.-96     	; 0x329a <micros>
    32fa:	4b 01       	movw	r8, r22
    32fc:	5c 01       	movw	r10, r24

	while (ms > 0) {
    32fe:	c1 14       	cp	r12, r1
    3300:	d1 04       	cpc	r13, r1
    3302:	e1 04       	cpc	r14, r1
    3304:	f1 04       	cpc	r15, r1
		yield();
    3306:	f1 f0       	breq	.+60     	; 0x3344 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3308:	1b d3       	rcall	.+1590   	; 0x3940 <yield>
    330a:	c7 df       	rcall	.-114    	; 0x329a <micros>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	88 19       	sub	r24, r8
    3312:	99 09       	sbc	r25, r9
    3314:	aa 09       	sbc	r26, r10
    3316:	bb 09       	sbc	r27, r11
    3318:	88 3e       	cpi	r24, 0xE8	; 232
    331a:	93 40       	sbci	r25, 0x03	; 3
    331c:	a1 05       	cpc	r26, r1
    331e:	b1 05       	cpc	r27, r1
    3320:	70 f3       	brcs	.-36     	; 0x32fe <delay+0x1a>
			ms--;
    3322:	21 e0       	ldi	r18, 0x01	; 1
    3324:	c2 1a       	sub	r12, r18
    3326:	d1 08       	sbc	r13, r1
    3328:	e1 08       	sbc	r14, r1
    332a:	f1 08       	sbc	r15, r1
			start += 1000;
    332c:	88 ee       	ldi	r24, 0xE8	; 232
    332e:	88 0e       	add	r8, r24
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	98 1e       	adc	r9, r24
    3334:	a1 1c       	adc	r10, r1
    3336:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3338:	c1 14       	cp	r12, r1
    333a:	d1 04       	cpc	r13, r1
    333c:	e1 04       	cpc	r14, r1
    333e:	f1 04       	cpc	r15, r1
    3340:	21 f7       	brne	.-56     	; 0x330a <delay+0x26>
    3342:	dd cf       	rjmp	.-70     	; 0x32fe <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	df 90       	pop	r13
    334a:	cf 90       	pop	r12
    334c:	bf 90       	pop	r11
    334e:	af 90       	pop	r10
    3350:	9f 90       	pop	r9
    3352:	8f 90       	pop	r8
    3354:	08 95       	ret

00003356 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3356:	82 30       	cpi	r24, 0x02	; 2
    3358:	91 05       	cpc	r25, r1
    335a:	38 f0       	brcs	.+14     	; 0x336a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3364:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <delayMicroseconds+0x10>
    336a:	08 95       	ret

0000336c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    336c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    336e:	84 b5       	in	r24, 0x24	; 36
    3370:	82 60       	ori	r24, 0x02	; 2
    3372:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3374:	84 b5       	in	r24, 0x24	; 36
    3376:	81 60       	ori	r24, 0x01	; 1
    3378:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    337a:	85 b5       	in	r24, 0x25	; 37
    337c:	82 60       	ori	r24, 0x02	; 2
    337e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3380:	85 b5       	in	r24, 0x25	; 37
    3382:	81 60       	ori	r24, 0x01	; 1
    3384:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3386:	ee e6       	ldi	r30, 0x6E	; 110
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	81 60       	ori	r24, 0x01	; 1
    338e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3390:	e1 e8       	ldi	r30, 0x81	; 129
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3396:	80 81       	ld	r24, Z
    3398:	82 60       	ori	r24, 0x02	; 2
    339a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    339c:	80 81       	ld	r24, Z
    339e:	81 60       	ori	r24, 0x01	; 1
    33a0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    33a2:	e0 e8       	ldi	r30, 0x80	; 128
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	81 60       	ori	r24, 0x01	; 1
    33aa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    33ac:	e1 eb       	ldi	r30, 0xB1	; 177
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	84 60       	ori	r24, 0x04	; 4
    33b4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    33b6:	e0 eb       	ldi	r30, 0xB0	; 176
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	81 60       	ori	r24, 0x01	; 1
    33be:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    33c0:	e1 e9       	ldi	r30, 0x91	; 145
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	82 60       	ori	r24, 0x02	; 2
    33c8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    33ca:	80 81       	ld	r24, Z
    33cc:	81 60       	ori	r24, 0x01	; 1
    33ce:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    33d0:	e0 e9       	ldi	r30, 0x90	; 144
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
    33d6:	81 60       	ori	r24, 0x01	; 1
    33d8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    33da:	e1 ea       	ldi	r30, 0xA1	; 161
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	82 60       	ori	r24, 0x02	; 2
    33e2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    33e4:	80 81       	ld	r24, Z
    33e6:	81 60       	ori	r24, 0x01	; 1
    33e8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    33ea:	e0 ea       	ldi	r30, 0xA0	; 160
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	81 60       	ori	r24, 0x01	; 1
    33f2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    33f4:	e1 e2       	ldi	r30, 0x21	; 33
    33f6:	f1 e0       	ldi	r31, 0x01	; 1
    33f8:	80 81       	ld	r24, Z
    33fa:	82 60       	ori	r24, 0x02	; 2
    33fc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    33fe:	80 81       	ld	r24, Z
    3400:	81 60       	ori	r24, 0x01	; 1
    3402:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    3404:	e0 e2       	ldi	r30, 0x20	; 32
    3406:	f1 e0       	ldi	r31, 0x01	; 1
    3408:	80 81       	ld	r24, Z
    340a:	81 60       	ori	r24, 0x01	; 1
    340c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    340e:	ea e7       	ldi	r30, 0x7A	; 122
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	84 60       	ori	r24, 0x04	; 4
    3416:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3418:	80 81       	ld	r24, Z
    341a:	82 60       	ori	r24, 0x02	; 2
    341c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    341e:	80 81       	ld	r24, Z
    3420:	81 60       	ori	r24, 0x01	; 1
    3422:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3424:	80 81       	ld	r24, Z
    3426:	80 68       	ori	r24, 0x80	; 128
    3428:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    342a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    342e:	08 95       	ret

00003430 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	fc 01       	movw	r30, r24
    3434:	31 97       	sbiw	r30, 0x01	; 1
    3436:	e2 31       	cpi	r30, 0x12	; 18
    3438:	f1 05       	cpc	r31, r1
    343a:	08 f0       	brcs	.+2      	; 0x343e <turnOffPWM+0xe>
    343c:	4d c0       	rjmp	.+154    	; 0x34d8 <turnOffPWM+0xa8>
    343e:	88 27       	eor	r24, r24
    3440:	ee 58       	subi	r30, 0x8E	; 142
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	8f 4f       	sbci	r24, 0xFF	; 255
    3446:	d6 c2       	rjmp	.+1452   	; 0x39f4 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3448:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    344c:	8f 77       	andi	r24, 0x7F	; 127
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3450:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3454:	8f 7d       	andi	r24, 0xDF	; 223
    3456:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    345a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    345c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3460:	87 7f       	andi	r24, 0xF7	; 247
    3462:	f9 cf       	rjmp	.-14     	; 0x3456 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3464:	84 b5       	in	r24, 0x24	; 36
    3466:	8f 77       	andi	r24, 0x7F	; 127
    3468:	02 c0       	rjmp	.+4      	; 0x346e <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    346a:	84 b5       	in	r24, 0x24	; 36
    346c:	8f 7d       	andi	r24, 0xDF	; 223
    346e:	84 bd       	out	0x24, r24	; 36
    3470:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3472:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3476:	8f 77       	andi	r24, 0x7F	; 127
    3478:	03 c0       	rjmp	.+6      	; 0x3480 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    347a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    347e:	8f 7d       	andi	r24, 0xDF	; 223
    3480:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3484:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3486:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    348a:	8f 77       	andi	r24, 0x7F	; 127
    348c:	07 c0       	rjmp	.+14     	; 0x349c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    348e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3492:	8f 7d       	andi	r24, 0xDF	; 223
    3494:	03 c0       	rjmp	.+6      	; 0x349c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3496:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    349a:	87 7f       	andi	r24, 0xF7	; 247
    349c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    34a0:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    34a2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34a6:	8f 77       	andi	r24, 0x7F	; 127
    34a8:	07 c0       	rjmp	.+14     	; 0x34b8 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    34aa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34ae:	8f 7d       	andi	r24, 0xDF	; 223
    34b0:	03 c0       	rjmp	.+6      	; 0x34b8 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    34b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34b6:	87 7f       	andi	r24, 0xF7	; 247
    34b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34bc:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    34be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    34c2:	8f 77       	andi	r24, 0x7F	; 127
    34c4:	07 c0       	rjmp	.+14     	; 0x34d4 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    34c6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    34ca:	8f 7d       	andi	r24, 0xDF	; 223
    34cc:	03 c0       	rjmp	.+6      	; 0x34d4 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    34ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    34d2:	87 7f       	andi	r24, 0xF7	; 247
    34d4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    34d8:	08 95       	ret

000034da <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	fc 01       	movw	r30, r24
    34e2:	e2 5b       	subi	r30, 0xB2	; 178
    34e4:	fe 4f       	sbci	r31, 0xFE	; 254
    34e6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    34e8:	fc 01       	movw	r30, r24
    34ea:	ec 56       	subi	r30, 0x6C	; 108
    34ec:	fe 4f       	sbci	r31, 0xFE	; 254
    34ee:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    34f0:	88 23       	and	r24, r24
    34f2:	61 f1       	breq	.+88     	; 0x354c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	fc 01       	movw	r30, r24
    34fc:	e2 5f       	subi	r30, 0xF2	; 242
    34fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3500:	c5 91       	lpm	r28, Z+
    3502:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3504:	fc 01       	movw	r30, r24
    3506:	ec 50       	subi	r30, 0x0C	; 12
    3508:	fe 4f       	sbci	r31, 0xFE	; 254
    350a:	a5 91       	lpm	r26, Z+
    350c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    350e:	61 11       	cpse	r22, r1
    3510:	09 c0       	rjmp	.+18     	; 0x3524 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3512:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3514:	f8 94       	cli
		*reg &= ~bit;
    3516:	88 81       	ld	r24, Y
    3518:	20 95       	com	r18
    351a:	82 23       	and	r24, r18
    351c:	88 83       	st	Y, r24
		*out &= ~bit;
    351e:	ec 91       	ld	r30, X
    3520:	2e 23       	and	r18, r30
    3522:	0b c0       	rjmp	.+22     	; 0x353a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3524:	62 30       	cpi	r22, 0x02	; 2
    3526:	61 f4       	brne	.+24     	; 0x3540 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3528:	9f b7       	in	r25, 0x3f	; 63
                cli();
    352a:	f8 94       	cli
		*reg &= ~bit;
    352c:	88 81       	ld	r24, Y
    352e:	32 2f       	mov	r19, r18
    3530:	30 95       	com	r19
    3532:	83 23       	and	r24, r19
    3534:	88 83       	st	Y, r24
		*out |= bit;
    3536:	ec 91       	ld	r30, X
    3538:	2e 2b       	or	r18, r30
    353a:	2c 93       	st	X, r18
		SREG = oldSREG;
    353c:	9f bf       	out	0x3f, r25	; 63
    353e:	06 c0       	rjmp	.+12     	; 0x354c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3540:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3542:	f8 94       	cli
		*reg |= bit;
    3544:	e8 81       	ld	r30, Y
    3546:	2e 2b       	or	r18, r30
    3548:	28 83       	st	Y, r18
		SREG = oldSREG;
    354a:	8f bf       	out	0x3f, r24	; 63
	}
}
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	08 95       	ret

00003552 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3552:	1f 93       	push	r17
    3554:	cf 93       	push	r28
    3556:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3558:	28 2f       	mov	r18, r24
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	f9 01       	movw	r30, r18
    355e:	e8 5f       	subi	r30, 0xF8	; 248
    3560:	fe 4f       	sbci	r31, 0xFE	; 254
    3562:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3564:	f9 01       	movw	r30, r18
    3566:	e2 5b       	subi	r30, 0xB2	; 178
    3568:	fe 4f       	sbci	r31, 0xFE	; 254
    356a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    356c:	f9 01       	movw	r30, r18
    356e:	ec 56       	subi	r30, 0x6C	; 108
    3570:	fe 4f       	sbci	r31, 0xFE	; 254
    3572:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3574:	cc 23       	and	r28, r28
    3576:	b9 f0       	breq	.+46     	; 0x35a6 <digitalWrite+0x54>
    3578:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    357a:	81 11       	cpse	r24, r1
    357c:	59 df       	rcall	.-334    	; 0x3430 <turnOffPWM>

	out = portOutputRegister(port);
    357e:	ec 2f       	mov	r30, r28
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	ee 0f       	add	r30, r30
    3584:	ff 1f       	adc	r31, r31
    3586:	ec 50       	subi	r30, 0x0C	; 12
    3588:	fe 4f       	sbci	r31, 0xFE	; 254
    358a:	a5 91       	lpm	r26, Z+
    358c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    358e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3590:	f8 94       	cli

	if (val == LOW) {
    3592:	11 11       	cpse	r17, r1
    3594:	04 c0       	rjmp	.+8      	; 0x359e <digitalWrite+0x4c>
		*out &= ~bit;
    3596:	8c 91       	ld	r24, X
    3598:	d0 95       	com	r29
    359a:	d8 23       	and	r29, r24
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    359e:	ec 91       	ld	r30, X
    35a0:	de 2b       	or	r29, r30
    35a2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    35a4:	9f bf       	out	0x3f, r25	; 63
}
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	08 95       	ret

000035ae <digitalRead>:

int digitalRead(uint8_t pin)
{
    35ae:	cf 93       	push	r28
    35b0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	f9 01       	movw	r30, r18
    35b8:	e8 5f       	subi	r30, 0xF8	; 248
    35ba:	fe 4f       	sbci	r31, 0xFE	; 254
    35bc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    35be:	f9 01       	movw	r30, r18
    35c0:	e2 5b       	subi	r30, 0xB2	; 178
    35c2:	fe 4f       	sbci	r31, 0xFE	; 254
    35c4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    35c6:	f9 01       	movw	r30, r18
    35c8:	ec 56       	subi	r30, 0x6C	; 108
    35ca:	fe 4f       	sbci	r31, 0xFE	; 254
    35cc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    35ce:	cc 23       	and	r28, r28
    35d0:	89 f0       	breq	.+34     	; 0x35f4 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    35d2:	81 11       	cpse	r24, r1
    35d4:	2d df       	rcall	.-422    	; 0x3430 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    35d6:	ec 2f       	mov	r30, r28
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	ee 0f       	add	r30, r30
    35dc:	ff 1f       	adc	r31, r31
    35de:	e6 52       	subi	r30, 0x26	; 38
    35e0:	fe 4f       	sbci	r31, 0xFE	; 254
    35e2:	a5 91       	lpm	r26, Z+
    35e4:	b4 91       	lpm	r27, Z
    35e6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    35e8:	ed 23       	and	r30, r29
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	21 f4       	brne	.+8      	; 0x35f8 <digitalRead+0x4a>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	02 c0       	rjmp	.+4      	; 0x35f8 <digitalRead+0x4a>
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	08 95       	ret

000035fe <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    35fe:	4f 92       	push	r4
    3600:	5f 92       	push	r5
    3602:	6f 92       	push	r6
    3604:	7f 92       	push	r7
    3606:	af 92       	push	r10
    3608:	bf 92       	push	r11
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	29 01       	movw	r4, r18
    3620:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3622:	9b 01       	movw	r18, r22
    3624:	ac 01       	movw	r20, r24
    3626:	24 19       	sub	r18, r4
    3628:	35 09       	sbc	r19, r5
    362a:	46 09       	sbc	r20, r6
    362c:	57 09       	sbc	r21, r7
    362e:	8a 89       	ldd	r24, Y+18	; 0x12
    3630:	9b 89       	ldd	r25, Y+19	; 0x13
    3632:	ac 89       	ldd	r26, Y+20	; 0x14
    3634:	bd 89       	ldd	r27, Y+21	; 0x15
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	6a 19       	sub	r22, r10
    363c:	7b 09       	sbc	r23, r11
    363e:	8c 09       	sbc	r24, r12
    3640:	9d 09       	sbc	r25, r13
    3642:	7f d1       	rcall	.+766    	; 0x3942 <__mulsi3>
    3644:	a8 01       	movw	r20, r16
    3646:	97 01       	movw	r18, r14
    3648:	24 19       	sub	r18, r4
    364a:	35 09       	sbc	r19, r5
    364c:	46 09       	sbc	r20, r6
    364e:	57 09       	sbc	r21, r7
    3650:	b5 d1       	rcall	.+874    	; 0x39bc <__divmodsi4>
    3652:	ca 01       	movw	r24, r20
    3654:	b9 01       	movw	r22, r18
    3656:	6a 0d       	add	r22, r10
    3658:	7b 1d       	adc	r23, r11
    365a:	8c 1d       	adc	r24, r12
    365c:	9d 1d       	adc	r25, r13
}
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	ff 90       	pop	r15
    3668:	ef 90       	pop	r14
    366a:	df 90       	pop	r13
    366c:	cf 90       	pop	r12
    366e:	bf 90       	pop	r11
    3670:	af 90       	pop	r10
    3672:	7f 90       	pop	r7
    3674:	6f 90       	pop	r6
    3676:	5f 90       	pop	r5
    3678:	4f 90       	pop	r4
    367a:	08 95       	ret

0000367c <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    367c:	fc 01       	movw	r30, r24
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	00 97       	sbiw	r24, 0x00	; 0
    3684:	09 f0       	breq	.+2      	; 0x3688 <_ZN6StringD1Ev+0xc>
    3686:	6f c2       	rjmp	.+1246   	; 0x3b66 <free>
    3688:	08 95       	ret

0000368a <_ZN6String10invalidateEv>:
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	ec 01       	movw	r28, r24
    3690:	88 81       	ld	r24, Y
    3692:	99 81       	ldd	r25, Y+1	; 0x01
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	09 f0       	breq	.+2      	; 0x369a <_ZN6String10invalidateEv+0x10>
    3698:	66 d2       	rcall	.+1228   	; 0x3b66 <free>
    369a:	19 82       	std	Y+1, r1	; 0x01
    369c:	18 82       	st	Y, r1
    369e:	1d 82       	std	Y+5, r1	; 0x05
    36a0:	1c 82       	std	Y+4, r1	; 0x04
    36a2:	1b 82       	std	Y+3, r1	; 0x03
    36a4:	1a 82       	std	Y+2, r1	; 0x02
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <_ZN6String12changeBufferEj>:
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	ec 01       	movw	r28, r24
    36b6:	8b 01       	movw	r16, r22
    36b8:	6f 5f       	subi	r22, 0xFF	; 255
    36ba:	7f 4f       	sbci	r23, 0xFF	; 255
    36bc:	88 81       	ld	r24, Y
    36be:	99 81       	ldd	r25, Y+1	; 0x01
    36c0:	db d2       	rcall	.+1462   	; 0x3c78 <realloc>
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	31 f0       	breq	.+12     	; 0x36d2 <_ZN6String12changeBufferEj+0x26>
    36c6:	99 83       	std	Y+1, r25	; 0x01
    36c8:	88 83       	st	Y, r24
    36ca:	1b 83       	std	Y+3, r17	; 0x03
    36cc:	0a 83       	std	Y+2, r16	; 0x02
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	01 c0       	rjmp	.+2      	; 0x36d4 <_ZN6String12changeBufferEj+0x28>
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	08 95       	ret

000036de <_ZN6String7reserveEj>:
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	ec 01       	movw	r28, r24
    36e4:	88 81       	ld	r24, Y
    36e6:	99 81       	ldd	r25, Y+1	; 0x01
    36e8:	89 2b       	or	r24, r25
    36ea:	29 f0       	breq	.+10     	; 0x36f6 <_ZN6String7reserveEj+0x18>
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	9b 81       	ldd	r25, Y+3	; 0x03
    36f0:	86 17       	cp	r24, r22
    36f2:	97 07       	cpc	r25, r23
    36f4:	58 f4       	brcc	.+22     	; 0x370c <_ZN6String7reserveEj+0x2e>
    36f6:	ce 01       	movw	r24, r28
    36f8:	d9 df       	rcall	.-78     	; 0x36ac <_ZN6String12changeBufferEj>
    36fa:	88 23       	and	r24, r24
    36fc:	41 f0       	breq	.+16     	; 0x370e <_ZN6String7reserveEj+0x30>
    36fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3700:	9d 81       	ldd	r25, Y+5	; 0x05
    3702:	89 2b       	or	r24, r25
    3704:	19 f4       	brne	.+6      	; 0x370c <_ZN6String7reserveEj+0x2e>
    3706:	e8 81       	ld	r30, Y
    3708:	f9 81       	ldd	r31, Y+1	; 0x01
    370a:	10 82       	st	Z, r1
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	08 95       	ret

00003714 <_ZN6String4copyEPKcj>:
    3714:	ef 92       	push	r14
    3716:	ff 92       	push	r15
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	ec 01       	movw	r28, r24
    3722:	7b 01       	movw	r14, r22
    3724:	8a 01       	movw	r16, r20
    3726:	ba 01       	movw	r22, r20
    3728:	da df       	rcall	.-76     	; 0x36de <_ZN6String7reserveEj>
    372a:	81 11       	cpse	r24, r1
    372c:	03 c0       	rjmp	.+6      	; 0x3734 <_ZN6String4copyEPKcj+0x20>
    372e:	ce 01       	movw	r24, r28
    3730:	ac df       	rcall	.-168    	; 0x368a <_ZN6String10invalidateEv>
    3732:	06 c0       	rjmp	.+12     	; 0x3740 <_ZN6String4copyEPKcj+0x2c>
    3734:	1d 83       	std	Y+5, r17	; 0x05
    3736:	0c 83       	std	Y+4, r16	; 0x04
    3738:	b7 01       	movw	r22, r14
    373a:	88 81       	ld	r24, Y
    373c:	99 81       	ldd	r25, Y+1	; 0x01
    373e:	96 d3       	rcall	.+1836   	; 0x3e6c <strcpy>
    3740:	ce 01       	movw	r24, r28
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	1f 91       	pop	r17
    3748:	0f 91       	pop	r16
    374a:	ff 90       	pop	r15
    374c:	ef 90       	pop	r14
    374e:	08 95       	ret

00003750 <_ZN6StringC1EPKc>:
    3750:	fc 01       	movw	r30, r24
    3752:	11 82       	std	Z+1, r1	; 0x01
    3754:	10 82       	st	Z, r1
    3756:	13 82       	std	Z+3, r1	; 0x03
    3758:	12 82       	std	Z+2, r1	; 0x02
    375a:	15 82       	std	Z+5, r1	; 0x05
    375c:	14 82       	std	Z+4, r1	; 0x04
    375e:	61 15       	cp	r22, r1
    3760:	71 05       	cpc	r23, r1
    3762:	49 f0       	breq	.+18     	; 0x3776 <_ZN6StringC1EPKc+0x26>
    3764:	fb 01       	movw	r30, r22
    3766:	01 90       	ld	r0, Z+
    3768:	00 20       	and	r0, r0
    376a:	e9 f7       	brne	.-6      	; 0x3766 <_ZN6StringC1EPKc+0x16>
    376c:	31 97       	sbiw	r30, 0x01	; 1
    376e:	af 01       	movw	r20, r30
    3770:	46 1b       	sub	r20, r22
    3772:	57 0b       	sbc	r21, r23
    3774:	cf cf       	rjmp	.-98     	; 0x3714 <_ZN6String4copyEPKcj>
    3776:	08 95       	ret

00003778 <_ZN6StringaSEPKc>:
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	ec 01       	movw	r28, r24
    377e:	61 15       	cp	r22, r1
    3780:	71 05       	cpc	r23, r1
    3782:	51 f0       	breq	.+20     	; 0x3798 <_ZN6StringaSEPKc+0x20>
    3784:	fb 01       	movw	r30, r22
    3786:	01 90       	ld	r0, Z+
    3788:	00 20       	and	r0, r0
    378a:	e9 f7       	brne	.-6      	; 0x3786 <_ZN6StringaSEPKc+0xe>
    378c:	31 97       	sbiw	r30, 0x01	; 1
    378e:	af 01       	movw	r20, r30
    3790:	46 1b       	sub	r20, r22
    3792:	57 0b       	sbc	r21, r23
    3794:	bf df       	rcall	.-130    	; 0x3714 <_ZN6String4copyEPKcj>
    3796:	01 c0       	rjmp	.+2      	; 0x379a <_ZN6StringaSEPKc+0x22>
    3798:	78 df       	rcall	.-272    	; 0x368a <_ZN6String10invalidateEv>
    379a:	ce 01       	movw	r24, r28
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	08 95       	ret

000037a2 <_ZN6StringC1Ehh>:
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	29 97       	sbiw	r28, 0x09	; 9
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	8c 01       	movw	r16, r24
    37bc:	86 2f       	mov	r24, r22
    37be:	f8 01       	movw	r30, r16
    37c0:	11 82       	std	Z+1, r1	; 0x01
    37c2:	10 82       	st	Z, r1
    37c4:	13 82       	std	Z+3, r1	; 0x03
    37c6:	12 82       	std	Z+2, r1	; 0x02
    37c8:	15 82       	std	Z+5, r1	; 0x05
    37ca:	14 82       	std	Z+4, r1	; 0x04
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	be 01       	movw	r22, r28
    37d0:	6f 5f       	subi	r22, 0xFF	; 255
    37d2:	7f 4f       	sbci	r23, 0xFF	; 255
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	60 d3       	rcall	.+1728   	; 0x3e98 <utoa>
    37d8:	be 01       	movw	r22, r28
    37da:	6f 5f       	subi	r22, 0xFF	; 255
    37dc:	7f 4f       	sbci	r23, 0xFF	; 255
    37de:	c8 01       	movw	r24, r16
    37e0:	cb df       	rcall	.-106    	; 0x3778 <_ZN6StringaSEPKc>
    37e2:	29 96       	adiw	r28, 0x09	; 9
    37e4:	0f b6       	in	r0, 0x3f	; 63
    37e6:	f8 94       	cli
    37e8:	de bf       	out	0x3e, r29	; 62
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	08 95       	ret

000037f8 <_ZN6String6concatEPKcj>:
    37f8:	ef 92       	push	r14
    37fa:	ff 92       	push	r15
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	61 15       	cp	r22, r1
    3806:	71 05       	cpc	r23, r1
    3808:	11 f4       	brne	.+4      	; 0x380e <_ZN6String6concatEPKcj+0x16>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	1a c0       	rjmp	.+52     	; 0x3842 <_ZN6String6concatEPKcj+0x4a>
    380e:	41 15       	cp	r20, r1
    3810:	51 05       	cpc	r21, r1
    3812:	b1 f0       	breq	.+44     	; 0x3840 <_ZN6String6concatEPKcj+0x48>
    3814:	7b 01       	movw	r14, r22
    3816:	ec 01       	movw	r28, r24
    3818:	8c 81       	ldd	r24, Y+4	; 0x04
    381a:	9d 81       	ldd	r25, Y+5	; 0x05
    381c:	8a 01       	movw	r16, r20
    381e:	08 0f       	add	r16, r24
    3820:	19 1f       	adc	r17, r25
    3822:	b8 01       	movw	r22, r16
    3824:	ce 01       	movw	r24, r28
    3826:	5b df       	rcall	.-330    	; 0x36de <_ZN6String7reserveEj>
    3828:	88 23       	and	r24, r24
    382a:	79 f3       	breq	.-34     	; 0x380a <_ZN6String6concatEPKcj+0x12>
    382c:	28 81       	ld	r18, Y
    382e:	39 81       	ldd	r19, Y+1	; 0x01
    3830:	8c 81       	ldd	r24, Y+4	; 0x04
    3832:	9d 81       	ldd	r25, Y+5	; 0x05
    3834:	b7 01       	movw	r22, r14
    3836:	82 0f       	add	r24, r18
    3838:	93 1f       	adc	r25, r19
    383a:	18 d3       	rcall	.+1584   	; 0x3e6c <strcpy>
    383c:	1d 83       	std	Y+5, r17	; 0x05
    383e:	0c 83       	std	Y+4, r16	; 0x04
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <_ZN6String6concatERKS_>:
    3850:	fb 01       	movw	r30, r22
    3852:	44 81       	ldd	r20, Z+4	; 0x04
    3854:	55 81       	ldd	r21, Z+5	; 0x05
    3856:	60 81       	ld	r22, Z
    3858:	71 81       	ldd	r23, Z+1	; 0x01
    385a:	ce cf       	rjmp	.-100    	; 0x37f8 <_ZN6String6concatEPKcj>

0000385c <_ZNK6String6equalsEPKc>:
    385c:	fc 01       	movw	r30, r24
    385e:	24 81       	ldd	r18, Z+4	; 0x04
    3860:	35 81       	ldd	r19, Z+5	; 0x05
    3862:	23 2b       	or	r18, r19
    3864:	31 f4       	brne	.+12     	; 0x3872 <_ZNK6String6equalsEPKc+0x16>
    3866:	21 e0       	ldi	r18, 0x01	; 1
    3868:	61 15       	cp	r22, r1
    386a:	71 05       	cpc	r23, r1
    386c:	99 f0       	breq	.+38     	; 0x3894 <_ZNK6String6equalsEPKc+0x38>
    386e:	fb 01       	movw	r30, r22
    3870:	08 c0       	rjmp	.+16     	; 0x3882 <_ZNK6String6equalsEPKc+0x26>
    3872:	fc 01       	movw	r30, r24
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	61 15       	cp	r22, r1
    387a:	71 05       	cpc	r23, r1
    387c:	31 f4       	brne	.+12     	; 0x388a <_ZNK6String6equalsEPKc+0x2e>
    387e:	21 e0       	ldi	r18, 0x01	; 1
    3880:	fc 01       	movw	r30, r24
    3882:	80 81       	ld	r24, Z
    3884:	88 23       	and	r24, r24
    3886:	31 f0       	breq	.+12     	; 0x3894 <_ZNK6String6equalsEPKc+0x38>
    3888:	04 c0       	rjmp	.+8      	; 0x3892 <_ZNK6String6equalsEPKc+0x36>
    388a:	e7 d2       	rcall	.+1486   	; 0x3e5a <strcmp>
    388c:	21 e0       	ldi	r18, 0x01	; 1
    388e:	89 2b       	or	r24, r25
    3890:	09 f0       	breq	.+2      	; 0x3894 <_ZNK6String6equalsEPKc+0x38>
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	82 2f       	mov	r24, r18
    3896:	08 95       	ret

00003898 <_ZNK6String9substringEjj>:
    3898:	bf 92       	push	r11
    389a:	cf 92       	push	r12
    389c:	df 92       	push	r13
    389e:	ef 92       	push	r14
    38a0:	ff 92       	push	r15
    38a2:	0f 93       	push	r16
    38a4:	1f 93       	push	r17
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	7c 01       	movw	r14, r24
    38ac:	6b 01       	movw	r12, r22
    38ae:	8a 01       	movw	r16, r20
    38b0:	e9 01       	movw	r28, r18
    38b2:	24 17       	cp	r18, r20
    38b4:	35 07       	cpc	r19, r21
    38b6:	20 f4       	brcc	.+8      	; 0x38c0 <_ZNK6String9substringEjj+0x28>
    38b8:	81 2f       	mov	r24, r17
    38ba:	89 01       	movw	r16, r18
    38bc:	c4 2f       	mov	r28, r20
    38be:	d8 2f       	mov	r29, r24
    38c0:	68 ea       	ldi	r22, 0xA8	; 168
    38c2:	72 e0       	ldi	r23, 0x02	; 2
    38c4:	c7 01       	movw	r24, r14
    38c6:	44 df       	rcall	.-376    	; 0x3750 <_ZN6StringC1EPKc>
    38c8:	d6 01       	movw	r26, r12
    38ca:	14 96       	adiw	r26, 0x04	; 4
    38cc:	8d 91       	ld	r24, X+
    38ce:	9c 91       	ld	r25, X
    38d0:	15 97       	sbiw	r26, 0x05	; 5
    38d2:	08 17       	cp	r16, r24
    38d4:	19 07       	cpc	r17, r25
    38d6:	c0 f4       	brcc	.+48     	; 0x3908 <_ZNK6String9substringEjj+0x70>
    38d8:	8c 17       	cp	r24, r28
    38da:	9d 07       	cpc	r25, r29
    38dc:	08 f4       	brcc	.+2      	; 0x38e0 <_ZNK6String9substringEjj+0x48>
    38de:	ec 01       	movw	r28, r24
    38e0:	d6 01       	movw	r26, r12
    38e2:	ed 91       	ld	r30, X+
    38e4:	fc 91       	ld	r31, X
    38e6:	11 97       	sbiw	r26, 0x01	; 1
    38e8:	ec 0f       	add	r30, r28
    38ea:	fd 1f       	adc	r31, r29
    38ec:	b0 80       	ld	r11, Z
    38ee:	10 82       	st	Z, r1
    38f0:	6d 91       	ld	r22, X+
    38f2:	7c 91       	ld	r23, X
    38f4:	60 0f       	add	r22, r16
    38f6:	71 1f       	adc	r23, r17
    38f8:	c7 01       	movw	r24, r14
    38fa:	3e df       	rcall	.-388    	; 0x3778 <_ZN6StringaSEPKc>
    38fc:	d6 01       	movw	r26, r12
    38fe:	ed 91       	ld	r30, X+
    3900:	fc 91       	ld	r31, X
    3902:	ec 0f       	add	r30, r28
    3904:	fd 1f       	adc	r31, r29
    3906:	b0 82       	st	Z, r11
    3908:	c7 01       	movw	r24, r14
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	ff 90       	pop	r15
    3914:	ef 90       	pop	r14
    3916:	df 90       	pop	r13
    3918:	cf 90       	pop	r12
    391a:	bf 90       	pop	r11
    391c:	08 95       	ret

0000391e <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
	if (!buffer) return;
    3922:	fc 01       	movw	r30, r24
    3924:	c0 81       	ld	r28, Z
    3926:	d1 81       	ldd	r29, Z+1	; 0x01
    3928:	20 97       	sbiw	r28, 0x00	; 0
    392a:	39 f0       	breq	.+14     	; 0x393a <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    392c:	88 81       	ld	r24, Y
    392e:	88 23       	and	r24, r24
    3930:	21 f0       	breq	.+8      	; 0x393a <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	81 d2       	rcall	.+1282   	; 0x3e38 <toupper>
    3936:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3938:	f9 cf       	rjmp	.-14     	; 0x392c <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	08 95       	ret

00003940 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3940:	08 95       	ret

00003942 <__mulsi3>:
    3942:	db 01       	movw	r26, r22
    3944:	8f 93       	push	r24
    3946:	9f 93       	push	r25
    3948:	5d d0       	rcall	.+186    	; 0x3a04 <__muluhisi3>
    394a:	bf 91       	pop	r27
    394c:	af 91       	pop	r26
    394e:	a2 9f       	mul	r26, r18
    3950:	80 0d       	add	r24, r0
    3952:	91 1d       	adc	r25, r1
    3954:	a3 9f       	mul	r26, r19
    3956:	90 0d       	add	r25, r0
    3958:	b2 9f       	mul	r27, r18
    395a:	90 0d       	add	r25, r0
    395c:	11 24       	eor	r1, r1
    395e:	08 95       	ret

00003960 <__udivmodqi4>:
    3960:	99 1b       	sub	r25, r25
    3962:	79 e0       	ldi	r23, 0x09	; 9
    3964:	04 c0       	rjmp	.+8      	; 0x396e <__udivmodqi4_ep>

00003966 <__udivmodqi4_loop>:
    3966:	99 1f       	adc	r25, r25
    3968:	96 17       	cp	r25, r22
    396a:	08 f0       	brcs	.+2      	; 0x396e <__udivmodqi4_ep>
    396c:	96 1b       	sub	r25, r22

0000396e <__udivmodqi4_ep>:
    396e:	88 1f       	adc	r24, r24
    3970:	7a 95       	dec	r23
    3972:	c9 f7       	brne	.-14     	; 0x3966 <__udivmodqi4_loop>
    3974:	80 95       	com	r24
    3976:	08 95       	ret

00003978 <__udivmodsi4>:
    3978:	a1 e2       	ldi	r26, 0x21	; 33
    397a:	1a 2e       	mov	r1, r26
    397c:	aa 1b       	sub	r26, r26
    397e:	bb 1b       	sub	r27, r27
    3980:	fd 01       	movw	r30, r26
    3982:	0d c0       	rjmp	.+26     	; 0x399e <__udivmodsi4_ep>

00003984 <__udivmodsi4_loop>:
    3984:	aa 1f       	adc	r26, r26
    3986:	bb 1f       	adc	r27, r27
    3988:	ee 1f       	adc	r30, r30
    398a:	ff 1f       	adc	r31, r31
    398c:	a2 17       	cp	r26, r18
    398e:	b3 07       	cpc	r27, r19
    3990:	e4 07       	cpc	r30, r20
    3992:	f5 07       	cpc	r31, r21
    3994:	20 f0       	brcs	.+8      	; 0x399e <__udivmodsi4_ep>
    3996:	a2 1b       	sub	r26, r18
    3998:	b3 0b       	sbc	r27, r19
    399a:	e4 0b       	sbc	r30, r20
    399c:	f5 0b       	sbc	r31, r21

0000399e <__udivmodsi4_ep>:
    399e:	66 1f       	adc	r22, r22
    39a0:	77 1f       	adc	r23, r23
    39a2:	88 1f       	adc	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	1a 94       	dec	r1
    39a8:	69 f7       	brne	.-38     	; 0x3984 <__udivmodsi4_loop>
    39aa:	60 95       	com	r22
    39ac:	70 95       	com	r23
    39ae:	80 95       	com	r24
    39b0:	90 95       	com	r25
    39b2:	9b 01       	movw	r18, r22
    39b4:	ac 01       	movw	r20, r24
    39b6:	bd 01       	movw	r22, r26
    39b8:	cf 01       	movw	r24, r30
    39ba:	08 95       	ret

000039bc <__divmodsi4>:
    39bc:	05 2e       	mov	r0, r21
    39be:	97 fb       	bst	r25, 7
    39c0:	16 f4       	brtc	.+4      	; 0x39c6 <__divmodsi4+0xa>
    39c2:	00 94       	com	r0
    39c4:	0f d0       	rcall	.+30     	; 0x39e4 <__negsi2>
    39c6:	57 fd       	sbrc	r21, 7
    39c8:	05 d0       	rcall	.+10     	; 0x39d4 <__divmodsi4_neg2>
    39ca:	d6 df       	rcall	.-84     	; 0x3978 <__udivmodsi4>
    39cc:	07 fc       	sbrc	r0, 7
    39ce:	02 d0       	rcall	.+4      	; 0x39d4 <__divmodsi4_neg2>
    39d0:	46 f4       	brtc	.+16     	; 0x39e2 <__divmodsi4_exit>
    39d2:	08 c0       	rjmp	.+16     	; 0x39e4 <__negsi2>

000039d4 <__divmodsi4_neg2>:
    39d4:	50 95       	com	r21
    39d6:	40 95       	com	r20
    39d8:	30 95       	com	r19
    39da:	21 95       	neg	r18
    39dc:	3f 4f       	sbci	r19, 0xFF	; 255
    39de:	4f 4f       	sbci	r20, 0xFF	; 255
    39e0:	5f 4f       	sbci	r21, 0xFF	; 255

000039e2 <__divmodsi4_exit>:
    39e2:	08 95       	ret

000039e4 <__negsi2>:
    39e4:	90 95       	com	r25
    39e6:	80 95       	com	r24
    39e8:	70 95       	com	r23
    39ea:	61 95       	neg	r22
    39ec:	7f 4f       	sbci	r23, 0xFF	; 255
    39ee:	8f 4f       	sbci	r24, 0xFF	; 255
    39f0:	9f 4f       	sbci	r25, 0xFF	; 255
    39f2:	08 95       	ret

000039f4 <__tablejump2__>:
    39f4:	ee 0f       	add	r30, r30
    39f6:	ff 1f       	adc	r31, r31
    39f8:	88 1f       	adc	r24, r24
    39fa:	8b bf       	out	0x3b, r24	; 59
    39fc:	07 90       	elpm	r0, Z+
    39fe:	f6 91       	elpm	r31, Z
    3a00:	e0 2d       	mov	r30, r0
    3a02:	19 94       	eijmp

00003a04 <__muluhisi3>:
    3a04:	09 d0       	rcall	.+18     	; 0x3a18 <__umulhisi3>
    3a06:	a5 9f       	mul	r26, r21
    3a08:	90 0d       	add	r25, r0
    3a0a:	b4 9f       	mul	r27, r20
    3a0c:	90 0d       	add	r25, r0
    3a0e:	a4 9f       	mul	r26, r20
    3a10:	80 0d       	add	r24, r0
    3a12:	91 1d       	adc	r25, r1
    3a14:	11 24       	eor	r1, r1
    3a16:	08 95       	ret

00003a18 <__umulhisi3>:
    3a18:	a2 9f       	mul	r26, r18
    3a1a:	b0 01       	movw	r22, r0
    3a1c:	b3 9f       	mul	r27, r19
    3a1e:	c0 01       	movw	r24, r0
    3a20:	a3 9f       	mul	r26, r19
    3a22:	70 0d       	add	r23, r0
    3a24:	81 1d       	adc	r24, r1
    3a26:	11 24       	eor	r1, r1
    3a28:	91 1d       	adc	r25, r1
    3a2a:	b2 9f       	mul	r27, r18
    3a2c:	70 0d       	add	r23, r0
    3a2e:	81 1d       	adc	r24, r1
    3a30:	11 24       	eor	r1, r1
    3a32:	91 1d       	adc	r25, r1
    3a34:	08 95       	ret

00003a36 <malloc>:
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	82 30       	cpi	r24, 0x02	; 2
    3a40:	91 05       	cpc	r25, r1
    3a42:	10 f4       	brcc	.+4      	; 0x3a48 <malloc+0x12>
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <__flp>
    3a4c:	f0 91 07 05 	lds	r31, 0x0507	; 0x800507 <__flp+0x1>
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	a0 e0       	ldi	r26, 0x00	; 0
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	30 97       	sbiw	r30, 0x00	; 0
    3a5a:	19 f1       	breq	.+70     	; 0x3aa2 <malloc+0x6c>
    3a5c:	40 81       	ld	r20, Z
    3a5e:	51 81       	ldd	r21, Z+1	; 0x01
    3a60:	02 81       	ldd	r16, Z+2	; 0x02
    3a62:	13 81       	ldd	r17, Z+3	; 0x03
    3a64:	48 17       	cp	r20, r24
    3a66:	59 07       	cpc	r21, r25
    3a68:	c8 f0       	brcs	.+50     	; 0x3a9c <malloc+0x66>
    3a6a:	84 17       	cp	r24, r20
    3a6c:	95 07       	cpc	r25, r21
    3a6e:	69 f4       	brne	.+26     	; 0x3a8a <malloc+0x54>
    3a70:	10 97       	sbiw	r26, 0x00	; 0
    3a72:	31 f0       	breq	.+12     	; 0x3a80 <malloc+0x4a>
    3a74:	12 96       	adiw	r26, 0x02	; 2
    3a76:	0c 93       	st	X, r16
    3a78:	12 97       	sbiw	r26, 0x02	; 2
    3a7a:	13 96       	adiw	r26, 0x03	; 3
    3a7c:	1c 93       	st	X, r17
    3a7e:	27 c0       	rjmp	.+78     	; 0x3ace <malloc+0x98>
    3a80:	00 93 06 05 	sts	0x0506, r16	; 0x800506 <__flp>
    3a84:	10 93 07 05 	sts	0x0507, r17	; 0x800507 <__flp+0x1>
    3a88:	22 c0       	rjmp	.+68     	; 0x3ace <malloc+0x98>
    3a8a:	21 15       	cp	r18, r1
    3a8c:	31 05       	cpc	r19, r1
    3a8e:	19 f0       	breq	.+6      	; 0x3a96 <malloc+0x60>
    3a90:	42 17       	cp	r20, r18
    3a92:	53 07       	cpc	r21, r19
    3a94:	18 f4       	brcc	.+6      	; 0x3a9c <malloc+0x66>
    3a96:	9a 01       	movw	r18, r20
    3a98:	bd 01       	movw	r22, r26
    3a9a:	ef 01       	movw	r28, r30
    3a9c:	df 01       	movw	r26, r30
    3a9e:	f8 01       	movw	r30, r16
    3aa0:	db cf       	rjmp	.-74     	; 0x3a58 <malloc+0x22>
    3aa2:	21 15       	cp	r18, r1
    3aa4:	31 05       	cpc	r19, r1
    3aa6:	f9 f0       	breq	.+62     	; 0x3ae6 <malloc+0xb0>
    3aa8:	28 1b       	sub	r18, r24
    3aaa:	39 0b       	sbc	r19, r25
    3aac:	24 30       	cpi	r18, 0x04	; 4
    3aae:	31 05       	cpc	r19, r1
    3ab0:	80 f4       	brcc	.+32     	; 0x3ad2 <malloc+0x9c>
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab6:	61 15       	cp	r22, r1
    3ab8:	71 05       	cpc	r23, r1
    3aba:	21 f0       	breq	.+8      	; 0x3ac4 <malloc+0x8e>
    3abc:	fb 01       	movw	r30, r22
    3abe:	93 83       	std	Z+3, r25	; 0x03
    3ac0:	82 83       	std	Z+2, r24	; 0x02
    3ac2:	04 c0       	rjmp	.+8      	; 0x3acc <malloc+0x96>
    3ac4:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <__flp+0x1>
    3ac8:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <__flp>
    3acc:	fe 01       	movw	r30, r28
    3ace:	32 96       	adiw	r30, 0x02	; 2
    3ad0:	44 c0       	rjmp	.+136    	; 0x3b5a <malloc+0x124>
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e2 0f       	add	r30, r18
    3ad6:	f3 1f       	adc	r31, r19
    3ad8:	81 93       	st	Z+, r24
    3ada:	91 93       	st	Z+, r25
    3adc:	22 50       	subi	r18, 0x02	; 2
    3ade:	31 09       	sbc	r19, r1
    3ae0:	39 83       	std	Y+1, r19	; 0x01
    3ae2:	28 83       	st	Y, r18
    3ae4:	3a c0       	rjmp	.+116    	; 0x3b5a <malloc+0x124>
    3ae6:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <__brkval>
    3aea:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <__brkval+0x1>
    3aee:	23 2b       	or	r18, r19
    3af0:	41 f4       	brne	.+16     	; 0x3b02 <malloc+0xcc>
    3af2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3af6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3afa:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <__brkval+0x1>
    3afe:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <__brkval>
    3b02:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3b06:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3b0a:	21 15       	cp	r18, r1
    3b0c:	31 05       	cpc	r19, r1
    3b0e:	41 f4       	brne	.+16     	; 0x3b20 <malloc+0xea>
    3b10:	2d b7       	in	r18, 0x3d	; 61
    3b12:	3e b7       	in	r19, 0x3e	; 62
    3b14:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3b18:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3b1c:	24 1b       	sub	r18, r20
    3b1e:	35 0b       	sbc	r19, r21
    3b20:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <__brkval>
    3b24:	f0 91 05 05 	lds	r31, 0x0505	; 0x800505 <__brkval+0x1>
    3b28:	e2 17       	cp	r30, r18
    3b2a:	f3 07       	cpc	r31, r19
    3b2c:	a0 f4       	brcc	.+40     	; 0x3b56 <malloc+0x120>
    3b2e:	2e 1b       	sub	r18, r30
    3b30:	3f 0b       	sbc	r19, r31
    3b32:	28 17       	cp	r18, r24
    3b34:	39 07       	cpc	r19, r25
    3b36:	78 f0       	brcs	.+30     	; 0x3b56 <malloc+0x120>
    3b38:	ac 01       	movw	r20, r24
    3b3a:	4e 5f       	subi	r20, 0xFE	; 254
    3b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3e:	24 17       	cp	r18, r20
    3b40:	35 07       	cpc	r19, r21
    3b42:	48 f0       	brcs	.+18     	; 0x3b56 <malloc+0x120>
    3b44:	4e 0f       	add	r20, r30
    3b46:	5f 1f       	adc	r21, r31
    3b48:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <__brkval+0x1>
    3b4c:	40 93 04 05 	sts	0x0504, r20	; 0x800504 <__brkval>
    3b50:	81 93       	st	Z+, r24
    3b52:	91 93       	st	Z+, r25
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <malloc+0x124>
    3b56:	e0 e0       	ldi	r30, 0x00	; 0
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	cf 01       	movw	r24, r30
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	1f 91       	pop	r17
    3b62:	0f 91       	pop	r16
    3b64:	08 95       	ret

00003b66 <free>:
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <free+0xa>
    3b6e:	81 c0       	rjmp	.+258    	; 0x3c72 <free+0x10c>
    3b70:	fc 01       	movw	r30, r24
    3b72:	32 97       	sbiw	r30, 0x02	; 2
    3b74:	13 82       	std	Z+3, r1	; 0x03
    3b76:	12 82       	std	Z+2, r1	; 0x02
    3b78:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <__flp>
    3b7c:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <__flp+0x1>
    3b80:	10 97       	sbiw	r26, 0x00	; 0
    3b82:	81 f4       	brne	.+32     	; 0x3ba4 <free+0x3e>
    3b84:	20 81       	ld	r18, Z
    3b86:	31 81       	ldd	r19, Z+1	; 0x01
    3b88:	82 0f       	add	r24, r18
    3b8a:	93 1f       	adc	r25, r19
    3b8c:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <__brkval>
    3b90:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <__brkval+0x1>
    3b94:	28 17       	cp	r18, r24
    3b96:	39 07       	cpc	r19, r25
    3b98:	51 f5       	brne	.+84     	; 0x3bee <free+0x88>
    3b9a:	f0 93 05 05 	sts	0x0505, r31	; 0x800505 <__brkval+0x1>
    3b9e:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <__brkval>
    3ba2:	67 c0       	rjmp	.+206    	; 0x3c72 <free+0x10c>
    3ba4:	ed 01       	movw	r28, r26
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	ce 17       	cp	r28, r30
    3bac:	df 07       	cpc	r29, r31
    3bae:	40 f4       	brcc	.+16     	; 0x3bc0 <free+0x5a>
    3bb0:	4a 81       	ldd	r20, Y+2	; 0x02
    3bb2:	5b 81       	ldd	r21, Y+3	; 0x03
    3bb4:	9e 01       	movw	r18, r28
    3bb6:	41 15       	cp	r20, r1
    3bb8:	51 05       	cpc	r21, r1
    3bba:	f1 f0       	breq	.+60     	; 0x3bf8 <free+0x92>
    3bbc:	ea 01       	movw	r28, r20
    3bbe:	f5 cf       	rjmp	.-22     	; 0x3baa <free+0x44>
    3bc0:	d3 83       	std	Z+3, r29	; 0x03
    3bc2:	c2 83       	std	Z+2, r28	; 0x02
    3bc4:	40 81       	ld	r20, Z
    3bc6:	51 81       	ldd	r21, Z+1	; 0x01
    3bc8:	84 0f       	add	r24, r20
    3bca:	95 1f       	adc	r25, r21
    3bcc:	c8 17       	cp	r28, r24
    3bce:	d9 07       	cpc	r29, r25
    3bd0:	59 f4       	brne	.+22     	; 0x3be8 <free+0x82>
    3bd2:	88 81       	ld	r24, Y
    3bd4:	99 81       	ldd	r25, Y+1	; 0x01
    3bd6:	84 0f       	add	r24, r20
    3bd8:	95 1f       	adc	r25, r21
    3bda:	02 96       	adiw	r24, 0x02	; 2
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	80 83       	st	Z, r24
    3be0:	8a 81       	ldd	r24, Y+2	; 0x02
    3be2:	9b 81       	ldd	r25, Y+3	; 0x03
    3be4:	93 83       	std	Z+3, r25	; 0x03
    3be6:	82 83       	std	Z+2, r24	; 0x02
    3be8:	21 15       	cp	r18, r1
    3bea:	31 05       	cpc	r19, r1
    3bec:	29 f4       	brne	.+10     	; 0x3bf8 <free+0x92>
    3bee:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <__flp+0x1>
    3bf2:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <__flp>
    3bf6:	3d c0       	rjmp	.+122    	; 0x3c72 <free+0x10c>
    3bf8:	e9 01       	movw	r28, r18
    3bfa:	fb 83       	std	Y+3, r31	; 0x03
    3bfc:	ea 83       	std	Y+2, r30	; 0x02
    3bfe:	49 91       	ld	r20, Y+
    3c00:	59 91       	ld	r21, Y+
    3c02:	c4 0f       	add	r28, r20
    3c04:	d5 1f       	adc	r29, r21
    3c06:	ec 17       	cp	r30, r28
    3c08:	fd 07       	cpc	r31, r29
    3c0a:	61 f4       	brne	.+24     	; 0x3c24 <free+0xbe>
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	84 0f       	add	r24, r20
    3c12:	95 1f       	adc	r25, r21
    3c14:	02 96       	adiw	r24, 0x02	; 2
    3c16:	e9 01       	movw	r28, r18
    3c18:	99 83       	std	Y+1, r25	; 0x01
    3c1a:	88 83       	st	Y, r24
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	9b 83       	std	Y+3, r25	; 0x03
    3c22:	8a 83       	std	Y+2, r24	; 0x02
    3c24:	e0 e0       	ldi	r30, 0x00	; 0
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	12 96       	adiw	r26, 0x02	; 2
    3c2a:	8d 91       	ld	r24, X+
    3c2c:	9c 91       	ld	r25, X
    3c2e:	13 97       	sbiw	r26, 0x03	; 3
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	19 f0       	breq	.+6      	; 0x3c3a <free+0xd4>
    3c34:	fd 01       	movw	r30, r26
    3c36:	dc 01       	movw	r26, r24
    3c38:	f7 cf       	rjmp	.-18     	; 0x3c28 <free+0xc2>
    3c3a:	8d 91       	ld	r24, X+
    3c3c:	9c 91       	ld	r25, X
    3c3e:	11 97       	sbiw	r26, 0x01	; 1
    3c40:	9d 01       	movw	r18, r26
    3c42:	2e 5f       	subi	r18, 0xFE	; 254
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	82 0f       	add	r24, r18
    3c48:	93 1f       	adc	r25, r19
    3c4a:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <__brkval>
    3c4e:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <__brkval+0x1>
    3c52:	28 17       	cp	r18, r24
    3c54:	39 07       	cpc	r19, r25
    3c56:	69 f4       	brne	.+26     	; 0x3c72 <free+0x10c>
    3c58:	30 97       	sbiw	r30, 0x00	; 0
    3c5a:	29 f4       	brne	.+10     	; 0x3c66 <free+0x100>
    3c5c:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <__flp+0x1>
    3c60:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <__flp>
    3c64:	02 c0       	rjmp	.+4      	; 0x3c6a <free+0x104>
    3c66:	13 82       	std	Z+3, r1	; 0x03
    3c68:	12 82       	std	Z+2, r1	; 0x02
    3c6a:	b0 93 05 05 	sts	0x0505, r27	; 0x800505 <__brkval+0x1>
    3c6e:	a0 93 04 05 	sts	0x0504, r26	; 0x800504 <__brkval>
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	08 95       	ret

00003c78 <realloc>:
    3c78:	6f 92       	push	r6
    3c7a:	7f 92       	push	r7
    3c7c:	8f 92       	push	r8
    3c7e:	9f 92       	push	r9
    3c80:	af 92       	push	r10
    3c82:	bf 92       	push	r11
    3c84:	cf 92       	push	r12
    3c86:	df 92       	push	r13
    3c88:	ef 92       	push	r14
    3c8a:	ff 92       	push	r15
    3c8c:	0f 93       	push	r16
    3c8e:	1f 93       	push	r17
    3c90:	cf 93       	push	r28
    3c92:	df 93       	push	r29
    3c94:	00 97       	sbiw	r24, 0x00	; 0
    3c96:	81 f4       	brne	.+32     	; 0x3cb8 <realloc+0x40>
    3c98:	cb 01       	movw	r24, r22
    3c9a:	df 91       	pop	r29
    3c9c:	cf 91       	pop	r28
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	ff 90       	pop	r15
    3ca4:	ef 90       	pop	r14
    3ca6:	df 90       	pop	r13
    3ca8:	cf 90       	pop	r12
    3caa:	bf 90       	pop	r11
    3cac:	af 90       	pop	r10
    3cae:	9f 90       	pop	r9
    3cb0:	8f 90       	pop	r8
    3cb2:	7f 90       	pop	r7
    3cb4:	6f 90       	pop	r6
    3cb6:	bf ce       	rjmp	.-642    	; 0x3a36 <malloc>
    3cb8:	fc 01       	movw	r30, r24
    3cba:	e6 0f       	add	r30, r22
    3cbc:	f7 1f       	adc	r31, r23
    3cbe:	9c 01       	movw	r18, r24
    3cc0:	22 50       	subi	r18, 0x02	; 2
    3cc2:	31 09       	sbc	r19, r1
    3cc4:	e2 17       	cp	r30, r18
    3cc6:	f3 07       	cpc	r31, r19
    3cc8:	08 f4       	brcc	.+2      	; 0x3ccc <realloc+0x54>
    3cca:	a5 c0       	rjmp	.+330    	; 0x3e16 <realloc+0x19e>
    3ccc:	ec 01       	movw	r28, r24
    3cce:	d9 01       	movw	r26, r18
    3cd0:	0d 91       	ld	r16, X+
    3cd2:	1c 91       	ld	r17, X
    3cd4:	11 97       	sbiw	r26, 0x01	; 1
    3cd6:	06 17       	cp	r16, r22
    3cd8:	17 07       	cpc	r17, r23
    3cda:	a8 f0       	brcs	.+42     	; 0x3d06 <realloc+0x8e>
    3cdc:	05 30       	cpi	r16, 0x05	; 5
    3cde:	11 05       	cpc	r17, r1
    3ce0:	08 f4       	brcc	.+2      	; 0x3ce4 <realloc+0x6c>
    3ce2:	97 c0       	rjmp	.+302    	; 0x3e12 <realloc+0x19a>
    3ce4:	c8 01       	movw	r24, r16
    3ce6:	04 97       	sbiw	r24, 0x04	; 4
    3ce8:	86 17       	cp	r24, r22
    3cea:	97 07       	cpc	r25, r23
    3cec:	08 f4       	brcc	.+2      	; 0x3cf0 <realloc+0x78>
    3cee:	91 c0       	rjmp	.+290    	; 0x3e12 <realloc+0x19a>
    3cf0:	02 50       	subi	r16, 0x02	; 2
    3cf2:	11 09       	sbc	r17, r1
    3cf4:	06 1b       	sub	r16, r22
    3cf6:	17 0b       	sbc	r17, r23
    3cf8:	01 93       	st	Z+, r16
    3cfa:	11 93       	st	Z+, r17
    3cfc:	6d 93       	st	X+, r22
    3cfe:	7c 93       	st	X, r23
    3d00:	cf 01       	movw	r24, r30
    3d02:	31 df       	rcall	.-414    	; 0x3b66 <free>
    3d04:	86 c0       	rjmp	.+268    	; 0x3e12 <realloc+0x19a>
    3d06:	5b 01       	movw	r10, r22
    3d08:	a0 1a       	sub	r10, r16
    3d0a:	b1 0a       	sbc	r11, r17
    3d0c:	4c 01       	movw	r8, r24
    3d0e:	80 0e       	add	r8, r16
    3d10:	91 1e       	adc	r9, r17
    3d12:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <__flp>
    3d16:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <__flp+0x1>
    3d1a:	61 2c       	mov	r6, r1
    3d1c:	71 2c       	mov	r7, r1
    3d1e:	e1 2c       	mov	r14, r1
    3d20:	f1 2c       	mov	r15, r1
    3d22:	10 97       	sbiw	r26, 0x00	; 0
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <realloc+0xb0>
    3d26:	46 c0       	rjmp	.+140    	; 0x3db4 <realloc+0x13c>
    3d28:	8d 91       	ld	r24, X+
    3d2a:	9c 91       	ld	r25, X
    3d2c:	11 97       	sbiw	r26, 0x01	; 1
    3d2e:	a8 15       	cp	r26, r8
    3d30:	b9 05       	cpc	r27, r9
    3d32:	b1 f5       	brne	.+108    	; 0x3da0 <realloc+0x128>
    3d34:	6c 01       	movw	r12, r24
    3d36:	42 e0       	ldi	r20, 0x02	; 2
    3d38:	c4 0e       	add	r12, r20
    3d3a:	d1 1c       	adc	r13, r1
    3d3c:	ca 14       	cp	r12, r10
    3d3e:	db 04       	cpc	r13, r11
    3d40:	78 f1       	brcs	.+94     	; 0x3da0 <realloc+0x128>
    3d42:	4c 01       	movw	r8, r24
    3d44:	8a 18       	sub	r8, r10
    3d46:	9b 08       	sbc	r9, r11
    3d48:	64 01       	movw	r12, r8
    3d4a:	42 e0       	ldi	r20, 0x02	; 2
    3d4c:	c4 0e       	add	r12, r20
    3d4e:	d1 1c       	adc	r13, r1
    3d50:	12 96       	adiw	r26, 0x02	; 2
    3d52:	bc 90       	ld	r11, X
    3d54:	12 97       	sbiw	r26, 0x02	; 2
    3d56:	13 96       	adiw	r26, 0x03	; 3
    3d58:	ac 91       	ld	r26, X
    3d5a:	b5 e0       	ldi	r27, 0x05	; 5
    3d5c:	cb 16       	cp	r12, r27
    3d5e:	d1 04       	cpc	r13, r1
    3d60:	40 f0       	brcs	.+16     	; 0x3d72 <realloc+0xfa>
    3d62:	b2 82       	std	Z+2, r11	; 0x02
    3d64:	a3 83       	std	Z+3, r26	; 0x03
    3d66:	91 82       	std	Z+1, r9	; 0x01
    3d68:	80 82       	st	Z, r8
    3d6a:	d9 01       	movw	r26, r18
    3d6c:	6d 93       	st	X+, r22
    3d6e:	7c 93       	st	X, r23
    3d70:	09 c0       	rjmp	.+18     	; 0x3d84 <realloc+0x10c>
    3d72:	0e 5f       	subi	r16, 0xFE	; 254
    3d74:	1f 4f       	sbci	r17, 0xFF	; 255
    3d76:	80 0f       	add	r24, r16
    3d78:	91 1f       	adc	r25, r17
    3d7a:	f9 01       	movw	r30, r18
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
    3d80:	eb 2d       	mov	r30, r11
    3d82:	fa 2f       	mov	r31, r26
    3d84:	e1 14       	cp	r14, r1
    3d86:	f1 04       	cpc	r15, r1
    3d88:	31 f0       	breq	.+12     	; 0x3d96 <realloc+0x11e>
    3d8a:	d7 01       	movw	r26, r14
    3d8c:	13 96       	adiw	r26, 0x03	; 3
    3d8e:	fc 93       	st	X, r31
    3d90:	ee 93       	st	-X, r30
    3d92:	12 97       	sbiw	r26, 0x02	; 2
    3d94:	3e c0       	rjmp	.+124    	; 0x3e12 <realloc+0x19a>
    3d96:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <__flp+0x1>
    3d9a:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <__flp>
    3d9e:	39 c0       	rjmp	.+114    	; 0x3e12 <realloc+0x19a>
    3da0:	68 16       	cp	r6, r24
    3da2:	79 06       	cpc	r7, r25
    3da4:	08 f4       	brcc	.+2      	; 0x3da8 <realloc+0x130>
    3da6:	3c 01       	movw	r6, r24
    3da8:	7d 01       	movw	r14, r26
    3daa:	12 96       	adiw	r26, 0x02	; 2
    3dac:	0d 90       	ld	r0, X+
    3dae:	bc 91       	ld	r27, X
    3db0:	a0 2d       	mov	r26, r0
    3db2:	b7 cf       	rjmp	.-146    	; 0x3d22 <realloc+0xaa>
    3db4:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <__brkval>
    3db8:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <__brkval+0x1>
    3dbc:	88 16       	cp	r8, r24
    3dbe:	99 06       	cpc	r9, r25
    3dc0:	e1 f4       	brne	.+56     	; 0x3dfa <realloc+0x182>
    3dc2:	66 16       	cp	r6, r22
    3dc4:	77 06       	cpc	r7, r23
    3dc6:	c8 f4       	brcc	.+50     	; 0x3dfa <realloc+0x182>
    3dc8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3dcc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	41 f4       	brne	.+16     	; 0x3de4 <realloc+0x16c>
    3dd4:	8d b7       	in	r24, 0x3d	; 61
    3dd6:	9e b7       	in	r25, 0x3e	; 62
    3dd8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3ddc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3de0:	84 1b       	sub	r24, r20
    3de2:	95 0b       	sbc	r25, r21
    3de4:	e8 17       	cp	r30, r24
    3de6:	f9 07       	cpc	r31, r25
    3de8:	b0 f4       	brcc	.+44     	; 0x3e16 <realloc+0x19e>
    3dea:	f0 93 05 05 	sts	0x0505, r31	; 0x800505 <__brkval+0x1>
    3dee:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <__brkval>
    3df2:	f9 01       	movw	r30, r18
    3df4:	71 83       	std	Z+1, r23	; 0x01
    3df6:	60 83       	st	Z, r22
    3df8:	0c c0       	rjmp	.+24     	; 0x3e12 <realloc+0x19a>
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	1c de       	rcall	.-968    	; 0x3a36 <malloc>
    3dfe:	7c 01       	movw	r14, r24
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	49 f0       	breq	.+18     	; 0x3e16 <realloc+0x19e>
    3e04:	a8 01       	movw	r20, r16
    3e06:	be 01       	movw	r22, r28
    3e08:	1f d0       	rcall	.+62     	; 0x3e48 <memcpy>
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	ac de       	rcall	.-680    	; 0x3b66 <free>
    3e0e:	c7 01       	movw	r24, r14
    3e10:	04 c0       	rjmp	.+8      	; 0x3e1a <realloc+0x1a2>
    3e12:	ce 01       	movw	r24, r28
    3e14:	02 c0       	rjmp	.+4      	; 0x3e1a <realloc+0x1a2>
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    3e26:	df 90       	pop	r13
    3e28:	cf 90       	pop	r12
    3e2a:	bf 90       	pop	r11
    3e2c:	af 90       	pop	r10
    3e2e:	9f 90       	pop	r9
    3e30:	8f 90       	pop	r8
    3e32:	7f 90       	pop	r7
    3e34:	6f 90       	pop	r6
    3e36:	08 95       	ret

00003e38 <toupper>:
    3e38:	91 11       	cpse	r25, r1
    3e3a:	08 95       	ret
    3e3c:	81 56       	subi	r24, 0x61	; 97
    3e3e:	8a 51       	subi	r24, 0x1A	; 26
    3e40:	08 f4       	brcc	.+2      	; 0x3e44 <toupper+0xc>
    3e42:	80 52       	subi	r24, 0x20	; 32
    3e44:	85 58       	subi	r24, 0x85	; 133
    3e46:	08 95       	ret

00003e48 <memcpy>:
    3e48:	fb 01       	movw	r30, r22
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <memcpy+0xa>
    3e4e:	01 90       	ld	r0, Z+
    3e50:	0d 92       	st	X+, r0
    3e52:	41 50       	subi	r20, 0x01	; 1
    3e54:	50 40       	sbci	r21, 0x00	; 0
    3e56:	d8 f7       	brcc	.-10     	; 0x3e4e <memcpy+0x6>
    3e58:	08 95       	ret

00003e5a <strcmp>:
    3e5a:	fb 01       	movw	r30, r22
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	8d 91       	ld	r24, X+
    3e60:	01 90       	ld	r0, Z+
    3e62:	80 19       	sub	r24, r0
    3e64:	01 10       	cpse	r0, r1
    3e66:	d9 f3       	breq	.-10     	; 0x3e5e <strcmp+0x4>
    3e68:	99 0b       	sbc	r25, r25
    3e6a:	08 95       	ret

00003e6c <strcpy>:
    3e6c:	fb 01       	movw	r30, r22
    3e6e:	dc 01       	movw	r26, r24
    3e70:	01 90       	ld	r0, Z+
    3e72:	0d 92       	st	X+, r0
    3e74:	00 20       	and	r0, r0
    3e76:	e1 f7       	brne	.-8      	; 0x3e70 <strcpy+0x4>
    3e78:	08 95       	ret

00003e7a <strncpy>:
    3e7a:	fb 01       	movw	r30, r22
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	41 50       	subi	r20, 0x01	; 1
    3e80:	50 40       	sbci	r21, 0x00	; 0
    3e82:	48 f0       	brcs	.+18     	; 0x3e96 <strncpy+0x1c>
    3e84:	01 90       	ld	r0, Z+
    3e86:	0d 92       	st	X+, r0
    3e88:	00 20       	and	r0, r0
    3e8a:	c9 f7       	brne	.-14     	; 0x3e7e <strncpy+0x4>
    3e8c:	01 c0       	rjmp	.+2      	; 0x3e90 <strncpy+0x16>
    3e8e:	1d 92       	st	X+, r1
    3e90:	41 50       	subi	r20, 0x01	; 1
    3e92:	50 40       	sbci	r21, 0x00	; 0
    3e94:	e0 f7       	brcc	.-8      	; 0x3e8e <strncpy+0x14>
    3e96:	08 95       	ret

00003e98 <utoa>:
    3e98:	45 32       	cpi	r20, 0x25	; 37
    3e9a:	51 05       	cpc	r21, r1
    3e9c:	18 f4       	brcc	.+6      	; 0x3ea4 <utoa+0xc>
    3e9e:	42 30       	cpi	r20, 0x02	; 2
    3ea0:	08 f0       	brcs	.+2      	; 0x3ea4 <utoa+0xc>
    3ea2:	04 c0       	rjmp	.+8      	; 0x3eac <__utoa_ncheck>
    3ea4:	fb 01       	movw	r30, r22
    3ea6:	10 82       	st	Z, r1
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	08 95       	ret

00003eac <__utoa_ncheck>:
    3eac:	bb 27       	eor	r27, r27

00003eae <__utoa_common>:
    3eae:	fb 01       	movw	r30, r22
    3eb0:	55 27       	eor	r21, r21
    3eb2:	aa 27       	eor	r26, r26
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	aa 1f       	adc	r26, r26
    3eba:	a4 17       	cp	r26, r20
    3ebc:	10 f0       	brcs	.+4      	; 0x3ec2 <__utoa_common+0x14>
    3ebe:	a4 1b       	sub	r26, r20
    3ec0:	83 95       	inc	r24
    3ec2:	50 51       	subi	r21, 0x10	; 16
    3ec4:	b9 f7       	brne	.-18     	; 0x3eb4 <__utoa_common+0x6>
    3ec6:	a0 5d       	subi	r26, 0xD0	; 208
    3ec8:	aa 33       	cpi	r26, 0x3A	; 58
    3eca:	08 f0       	brcs	.+2      	; 0x3ece <__utoa_common+0x20>
    3ecc:	a9 5d       	subi	r26, 0xD9	; 217
    3ece:	a1 93       	st	Z+, r26
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	79 f7       	brne	.-34     	; 0x3eb2 <__utoa_common+0x4>
    3ed4:	b1 11       	cpse	r27, r1
    3ed6:	b1 93       	st	Z+, r27
    3ed8:	11 92       	st	Z+, r1
    3eda:	cb 01       	movw	r24, r22
    3edc:	00 c0       	rjmp	.+0      	; 0x3ede <strrev>

00003ede <strrev>:
    3ede:	dc 01       	movw	r26, r24
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	67 2f       	mov	r22, r23
    3ee4:	71 91       	ld	r23, Z+
    3ee6:	77 23       	and	r23, r23
    3ee8:	e1 f7       	brne	.-8      	; 0x3ee2 <strrev+0x4>
    3eea:	32 97       	sbiw	r30, 0x02	; 2
    3eec:	04 c0       	rjmp	.+8      	; 0x3ef6 <strrev+0x18>
    3eee:	7c 91       	ld	r23, X
    3ef0:	6d 93       	st	X+, r22
    3ef2:	70 83       	st	Z, r23
    3ef4:	62 91       	ld	r22, -Z
    3ef6:	ae 17       	cp	r26, r30
    3ef8:	bf 07       	cpc	r27, r31
    3efa:	c8 f3       	brcs	.-14     	; 0x3eee <strrev+0x10>
    3efc:	08 95       	ret

00003efe <_exit>:
    3efe:	f8 94       	cli

00003f00 <__stop_program>:
    3f00:	ff cf       	rjmp	.-2      	; 0x3f00 <__stop_program>
