
AtmelMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800200  000067aa  0000683e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  008002ee  008002ee  0000692c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000692c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000695c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c88  00000000  00000000  0000699c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018a0a  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004114  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077b1  00000000  00000000  00024142  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003094  00000000  00000000  0002b8f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058ed  00000000  00000000  0002e988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b6bb  00000000  00000000  00034275  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c08  00000000  00000000  0003f930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__vector_17>
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__vector_23>
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__vector_25>
      68:	0c 94 93 2b 	jmp	0x5726	; 0x5726 <__vector_26>
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__vector_32>
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__vector_39>
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__vector_42>
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__vector_47>
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 2d       	mov	r29, r6
      e6:	d9 2d       	mov	r29, r9
      e8:	c8 2d       	mov	r28, r8
      ea:	cc 2d       	mov	r28, r12
      ec:	d2 2d       	mov	r29, r2
      ee:	10 2e       	mov	r1, r16
      f0:	dd 2d       	mov	r29, r13
      f2:	e1 2d       	mov	r30, r1
      f4:	e7 2d       	mov	r30, r7
      f6:	eb 2d       	mov	r30, r11
      f8:	ef 2d       	mov	r30, r15
      fa:	f5 2d       	mov	r31, r5
      fc:	f9 2d       	mov	r31, r9
      fe:	fd 2d       	mov	r31, r13
     100:	10 2e       	mov	r1, r16
     102:	03 2e       	mov	r0, r19
     104:	07 2e       	mov	r0, r23
     106:	0b 2e       	mov	r0, r27

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	c0 07       	cpc	r28, r16
     22a:	35 28       	or	r3, r5
     22c:	c5 2b       	or	r28, r21

0000022e <__ctors_end>:
     22e:	cc 07       	cpc	r28, r28

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	12 e0       	ldi	r17, 0x02	; 2
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	ea ea       	ldi	r30, 0xAA	; 170
     248:	f7 e6       	ldi	r31, 0x67	; 103
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ae 3e       	cpi	r26, 0xEE	; 238
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	ae ee       	ldi	r26, 0xEE	; 238
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a8 34       	cpi	r26, 0x48	; 72
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 2b 31 	call	0x6256	; 0x6256 <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <main>
     28e:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	1f 92       	push	r1
     29a:	1f 92       	push	r1
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	fc 01       	movw	r30, r24
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <_ZN6StringpLEc+0x6>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	6b 81       	ldd	r22, Y+3	; 0x03
     2ce:	0e 94 19 30 	call	0x6032	; 0x6032 <_ZN6String6concatEc>
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZNK6StringeqERKS_+0x6>
     2e8:	1f 92       	push	r1
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	7c 83       	std	Y+4, r23	; 0x04
     2f4:	6b 83       	std	Y+3, r22	; 0x03
     2f6:	2b 81       	ldd	r18, Y+3	; 0x03
     2f8:	3c 81       	ldd	r19, Y+4	; 0x04
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	b9 01       	movw	r22, r18
     300:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <_ZNK6String6equalsERKS_>
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <_ZNK6StringeqEPKc>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <_ZNK6StringeqEPKc+0x6>
     318:	1f 92       	push	r1
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	7c 83       	std	Y+4, r23	; 0x04
     324:	6b 83       	std	Y+3, r22	; 0x03
     326:	2b 81       	ldd	r18, Y+3	; 0x03
     328:	3c 81       	ldd	r19, Y+4	; 0x04
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	b9 01       	movw	r22, r18
     330:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <_ZNK6String6equalsEPKc>
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_ZNK6String9substringEj>:
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	00 d0       	rcall	.+0      	; 0x348 <_ZNK6String9substringEj+0x6>
     348:	00 d0       	rcall	.+0      	; 0x34a <_ZNK6String9substringEj+0x8>
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	7c 83       	std	Y+4, r23	; 0x04
     354:	6b 83       	std	Y+3, r22	; 0x03
     356:	5e 83       	std	Y+6, r21	; 0x06
     358:	4d 83       	std	Y+5, r20	; 0x05
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	fc 01       	movw	r30, r24
     360:	24 81       	ldd	r18, Z+4	; 0x04
     362:	35 81       	ldd	r19, Z+5	; 0x05
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	4d 81       	ldd	r20, Y+5	; 0x05
     36a:	5e 81       	ldd	r21, Y+6	; 0x06
     36c:	6b 81       	ldd	r22, Y+3	; 0x03
     36e:	7c 81       	ldd	r23, Y+4	; 0x04
     370:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZNK6String9substringEjj>
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	26 96       	adiw	r28, 0x06	; 6
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <_ZN5Print5writeEPKc+0xa>
     394:	1f 92       	push	r1
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	7c 83       	std	Y+4, r23	; 0x04
     3a0:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	9c 81       	ldd	r25, Y+4	; 0x04
     3a6:	89 2b       	or	r24, r25
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <_ZN5Print5writeEPKc+0x26>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	15 c0       	rjmp	.+42     	; 0x3da <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	02 96       	adiw	r24, 0x02	; 2
     3bc:	fc 01       	movw	r30, r24
     3be:	00 81       	ld	r16, Z
     3c0:	11 81       	ldd	r17, Z+1	; 0x01
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <strlen>
     3ca:	ac 01       	movw	r20, r24
     3cc:	2b 81       	ldd	r18, Y+3	; 0x03
     3ce:	3c 81       	ldd	r19, Y+4	; 0x04
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	b9 01       	movw	r22, r18
     3d6:	f8 01       	movw	r30, r16
     3d8:	19 95       	eicall
    }
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <_ZN14HardwareSerial5beginEm+0x6>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <_ZN14HardwareSerial5beginEm+0x8>
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	4b 83       	std	Y+3, r20	; 0x03
     3fe:	5c 83       	std	Y+4, r21	; 0x04
     400:	6d 83       	std	Y+5, r22	; 0x05
     402:	7e 83       	std	Y+6, r23	; 0x06
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	9c 81       	ldd	r25, Y+4	; 0x04
     408:	ad 81       	ldd	r26, Y+5	; 0x05
     40a:	be 81       	ldd	r27, Y+6	; 0x06
     40c:	e9 81       	ldd	r30, Y+1	; 0x01
     40e:	fa 81       	ldd	r31, Y+2	; 0x02
     410:	26 e0       	ldi	r18, 0x06	; 6
     412:	ac 01       	movw	r20, r24
     414:	bd 01       	movw	r22, r26
     416:	cf 01       	movw	r24, r30
     418:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN14HardwareSerial5beginEmh>
     41c:	00 00       	nop
     41e:	26 96       	adiw	r28, 0x06	; 6
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	1f 92       	push	r1
     436:	1f 92       	push	r1
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <_ZN15Adafruit_SensorD1Ev>:
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	1f 92       	push	r1
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	26 e7       	ldi	r18, 0x76	; 118
     45e:	32 e0       	ldi	r19, 0x02	; 2
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	fc 01       	movw	r30, r24
     466:	31 83       	std	Z+1, r19	; 0x01
     468:	20 83       	st	Z, r18
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	89 2b       	or	r24, r25
     470:	21 f0       	breq	.+8      	; 0x47a <_ZN15Adafruit_SensorD1Ev+0x2e>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZdlPv>
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <_ZN15Adafruit_SensorD0Ev>:
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	1f 92       	push	r1
     48a:	1f 92       	push	r1
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	d9 df       	rcall	.-78     	; 0x44c <_ZN15Adafruit_SensorD1Ev>
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZdlPv>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <_ZN15Adafruit_Sensor15enableAutoRangeEb+0x6>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	9a 83       	std	Y+2, r25	; 0x02
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	6b 83       	std	Y+3, r22	; 0x03
    (void)enabled; /* suppress unused warning */
  };
     4bc:	00 00       	nop
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <_ZN15Adafruit_SensorC1ERKS_>:

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <_ZN15Adafruit_SensorC1ERKS_+0x6>
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	9a 83       	std	Y+2, r25	; 0x02
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	7c 83       	std	Y+4, r23	; 0x04
     4dc:	6b 83       	std	Y+3, r22	; 0x03
     4de:	26 e7       	ldi	r18, 0x76	; 118
     4e0:	32 e0       	ldi	r19, 0x02	; 2
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	fc 01       	movw	r30, r24
     4e8:	31 83       	std	Z+1, r19	; 0x01
     4ea:	20 83       	st	Z, r18
     4ec:	8b 81       	ldd	r24, Y+3	; 0x03
     4ee:	9c 81       	ldd	r25, Y+4	; 0x04
     4f0:	fc 01       	movw	r30, r24
     4f2:	22 81       	ldd	r18, Z+2	; 0x02
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	9a 81       	ldd	r25, Y+2	; 0x02
     4f8:	fc 01       	movw	r30, r24
     4fa:	22 83       	std	Z+2, r18	; 0x02
     4fc:	00 00       	nop
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <_ZN11DHT_Unified11TemperatureC1ERKS0_>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	00 d0       	rcall	.+0      	; 0x512 <_ZN11DHT_Unified11TemperatureC1ERKS0_+0x6>
     512:	1f 92       	push	r1
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	7c 83       	std	Y+4, r23	; 0x04
     51e:	6b 83       	std	Y+3, r22	; 0x03
     520:	2b 81       	ldd	r18, Y+3	; 0x03
     522:	3c 81       	ldd	r19, Y+4	; 0x04
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	b9 01       	movw	r22, r18
     52a:	cf df       	rcall	.-98     	; 0x4ca <_ZN15Adafruit_SensorC1ERKS_>
     52c:	22 e9       	ldi	r18, 0x92	; 146
     52e:	32 e0       	ldi	r19, 0x02	; 2
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	31 83       	std	Z+1, r19	; 0x01
     538:	20 83       	st	Z, r18
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	fc 01       	movw	r30, r24
     540:	23 81       	ldd	r18, Z+3	; 0x03
     542:	34 81       	ldd	r19, Z+4	; 0x04
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	fc 01       	movw	r30, r24
     54a:	34 83       	std	Z+4, r19	; 0x04
     54c:	23 83       	std	Z+3, r18	; 0x03
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	9c 81       	ldd	r25, Y+4	; 0x04
     552:	fc 01       	movw	r30, r24
     554:	85 81       	ldd	r24, Z+5	; 0x05
     556:	96 81       	ldd	r25, Z+6	; 0x06
     558:	a7 81       	ldd	r26, Z+7	; 0x07
     55a:	b0 85       	ldd	r27, Z+8	; 0x08
     55c:	29 81       	ldd	r18, Y+1	; 0x01
     55e:	3a 81       	ldd	r19, Y+2	; 0x02
     560:	f9 01       	movw	r30, r18
     562:	85 83       	std	Z+5, r24	; 0x05
     564:	96 83       	std	Z+6, r25	; 0x06
     566:	a7 83       	std	Z+7, r26	; 0x07
     568:	b0 87       	std	Z+8, r27	; 0x08
     56a:	00 00       	nop
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <_ZN11DHT_Unified11temperatureEv>:

  /*!
   *  @brief  Returns temperature stored in _temp
   *  @return Temperature value
   */
  Temperature temperature() { return _temp; }
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	00 d0       	rcall	.+0      	; 0x580 <_ZN11DHT_Unified11temperatureEv+0x6>
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	7c 83       	std	Y+4, r23	; 0x04
     58c:	6b 83       	std	Y+3, r22	; 0x03
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	9c 81       	ldd	r25, Y+4	; 0x04
     592:	9c 01       	movw	r18, r24
     594:	2c 5e       	subi	r18, 0xEC	; 236
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	b9 01       	movw	r22, r18
     59e:	b6 df       	rcall	.-148    	; 0x50c <_ZN11DHT_Unified11TemperatureC1ERKS0_>
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <_ZN11DHT_Unified8HumidityC1ERKS0_>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <_ZN11DHT_Unified8HumidityC1ERKS0_+0x6>
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	7c 83       	std	Y+4, r23	; 0x04
     5c4:	6b 83       	std	Y+3, r22	; 0x03
     5c6:	2b 81       	ldd	r18, Y+3	; 0x03
     5c8:	3c 81       	ldd	r19, Y+4	; 0x04
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	b9 01       	movw	r22, r18
     5d0:	7c df       	rcall	.-264    	; 0x4ca <_ZN15Adafruit_SensorC1ERKS_>
     5d2:	24 e8       	ldi	r18, 0x84	; 132
     5d4:	32 e0       	ldi	r19, 0x02	; 2
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	31 83       	std	Z+1, r19	; 0x01
     5de:	20 83       	st	Z, r18
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	fc 01       	movw	r30, r24
     5e6:	23 81       	ldd	r18, Z+3	; 0x03
     5e8:	34 81       	ldd	r19, Z+4	; 0x04
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	fc 01       	movw	r30, r24
     5f0:	34 83       	std	Z+4, r19	; 0x04
     5f2:	23 83       	std	Z+3, r18	; 0x03
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	fc 01       	movw	r30, r24
     5fa:	85 81       	ldd	r24, Z+5	; 0x05
     5fc:	96 81       	ldd	r25, Z+6	; 0x06
     5fe:	a7 81       	ldd	r26, Z+7	; 0x07
     600:	b0 85       	ldd	r27, Z+8	; 0x08
     602:	29 81       	ldd	r18, Y+1	; 0x01
     604:	3a 81       	ldd	r19, Y+2	; 0x02
     606:	f9 01       	movw	r30, r18
     608:	85 83       	std	Z+5, r24	; 0x05
     60a:	96 83       	std	Z+6, r25	; 0x06
     60c:	a7 83       	std	Z+7, r26	; 0x07
     60e:	b0 87       	std	Z+8, r27	; 0x08
     610:	00 00       	nop
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <_ZN11DHT_Unified8humidityEv>:

  /*!
   *  @brief  Returns humidity stored in _humidity
   *  @return Humidity value
   */
  Humidity humidity() { return _humidity; }
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	00 d0       	rcall	.+0      	; 0x626 <_ZN11DHT_Unified8humidityEv+0x6>
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	7c 83       	std	Y+4, r23	; 0x04
     632:	6b 83       	std	Y+3, r22	; 0x03
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	9c 81       	ldd	r25, Y+4	; 0x04
     638:	9c 01       	movw	r18, r24
     63a:	23 5e       	subi	r18, 0xE3	; 227
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	b9 01       	movw	r22, r18
     644:	b6 df       	rcall	.-148    	; 0x5b2 <_ZN11DHT_Unified8HumidityC1ERKS0_>
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	9a 81       	ldd	r25, Y+2	; 0x02
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <_ZN7TwoWire5writeEi+0x6>
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	7c 83       	std	Y+4, r23	; 0x04
     66a:	6b 83       	std	Y+3, r22	; 0x03
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	fc 01       	movw	r30, r24
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	fc 01       	movw	r30, r24
     678:	20 81       	ld	r18, Z
     67a:	31 81       	ldd	r19, Z+1	; 0x01
     67c:	4b 81       	ldd	r20, Y+3	; 0x03
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	64 2f       	mov	r22, r20
     684:	f9 01       	movw	r30, r18
     686:	19 95       	eicall
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <setup>:
int RFID_RED_LED  = 9;		// Red led pin;

#pragma endregion LEDs

void setup()
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	eb 97       	sbiw	r28, 0x3b	; 59
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	55 e2       	ldi	r21, 0x25	; 37
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	8e e9       	ldi	r24, 0x9E	; 158
     6b4:	94 e0       	ldi	r25, 0x04	; 4
     6b6:	9a de       	rcall	.-716    	; 0x3ec <_ZN14HardwareSerial5beginEm>
	Wire.begin(); // join i2c bus (address optional for master)
     6b8:	82 e9       	ldi	r24, 0x92	; 146
     6ba:	94 e0       	ldi	r25, 0x04	; 4
     6bc:	0e 94 80 25 	call	0x4b00	; 0x4b00 <_ZN7TwoWire5beginEv>
	
	pinMode(BIP_PIN, OUTPUT);	// alarm biber
     6c0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6c4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
	digitalWrite(BIP_PIN, LOW);  // silence the alarm biber
     6ce:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     6d2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
	
#pragma region LEDs

	// Front door led status indicator for door lock
	pinMode(RFID_GREEN_LED, OUTPUT);	// Green led
     6dc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     6e0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
	pinMode(RFID_RED_LED, OUTPUT);		// Red led
     6ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     6ee:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>

	// set door led state to closed 
	SetRfidLeds(true);
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	86 d2       	rcall	.+1292   	; 0xc08 <_Z11SetRfidLedsb>
#pragma endregion LEDs

#pragma region DHT

	// Initialize device.
	dht.begin();
     6fc:	8e ee       	ldi	r24, 0xEE	; 238
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN11DHT_Unified5beginEv>
	sensor_t sensor;
	dht.temperature().getSensor(&sensor);
     704:	ce 01       	movw	r24, r28
     706:	0b 96       	adiw	r24, 0x0b	; 11
     708:	6e ee       	ldi	r22, 0xEE	; 238
     70a:	72 e0       	ldi	r23, 0x02	; 2
     70c:	36 df       	rcall	.-404    	; 0x57a <_ZN11DHT_Unified11temperatureEv>
     70e:	9e 01       	movw	r18, r28
     710:	2c 5e       	subi	r18, 0xEC	; 236
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	ce 01       	movw	r24, r28
     716:	0b 96       	adiw	r24, 0x0b	; 11
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
     71e:	ce 01       	movw	r24, r28
     720:	0b 96       	adiw	r24, 0x0b	; 11
     722:	c8 d3       	rcall	.+1936   	; 0xeb4 <_ZN11DHT_Unified11TemperatureD1Ev>
	dht.humidity().getSensor(&sensor);
     724:	ce 01       	movw	r24, r28
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	6e ee       	ldi	r22, 0xEE	; 238
     72a:	72 e0       	ldi	r23, 0x02	; 2
     72c:	79 df       	rcall	.-270    	; 0x620 <_ZN11DHT_Unified8humidityEv>
     72e:	9e 01       	movw	r18, r28
     730:	2c 5e       	subi	r18, 0xEC	; 236
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	ce 01       	movw	r24, r28
     736:	02 96       	adiw	r24, 0x02	; 2
     738:	b9 01       	movw	r22, r18
     73a:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>
     73e:	ce 01       	movw	r24, r28
     740:	02 96       	adiw	r24, 0x02	; 2
     742:	eb d3       	rcall	.+2006   	; 0xf1a <_ZN11DHT_Unified8HumidityD1Ev>
	delayMS = sensor.min_delay / 1000;		// Set delay between sensor readings based on sensor details.
     744:	88 ad       	ldd	r24, Y+56	; 0x38
     746:	99 ad       	ldd	r25, Y+57	; 0x39
     748:	aa ad       	ldd	r26, Y+58	; 0x3a
     74a:	bb ad       	ldd	r27, Y+59	; 0x3b
     74c:	28 ee       	ldi	r18, 0xE8	; 232
     74e:	33 e0       	ldi	r19, 0x03	; 3
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	bc 01       	movw	r22, r24
     756:	cd 01       	movw	r24, r26
     758:	0e 94 0f 31 	call	0x621e	; 0x621e <__divmodsi4>
     75c:	da 01       	movw	r26, r20
     75e:	c9 01       	movw	r24, r18
     760:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <delayMS>
     764:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <delayMS+0x1>
     768:	a0 93 16 03 	sts	0x0316, r26	; 0x800316 <delayMS+0x2>
     76c:	b0 93 17 03 	sts	0x0317, r27	; 0x800317 <delayMS+0x3>
	
#pragma endregion DHT

#pragma region RFID Scanner

  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
     770:	8e e9       	ldi	r24, 0x9E	; 158
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	5d de       	rcall	.-838    	; 0x430 <_ZN14HardwareSerialcvbEv>
     776:	98 2f       	mov	r25, r24
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	89 27       	eor	r24, r25
     77c:	88 23       	and	r24, r24
     77e:	09 f0       	breq	.+2      	; 0x782 <setup+0xec>
     780:	f7 cf       	rjmp	.-18     	; 0x770 <setup+0xda>
  SPI.begin();         // Init SPI bus
     782:	0e 94 bf 20 	call	0x417e	; 0x417e <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();  // Init MFRC522 card
     786:	8e e1       	ldi	r24, 0x1E	; 30
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN7MFRC5228PCD_InitEv>
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     78e:	19 82       	std	Y+1, r1	; 0x01
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	86 30       	cpi	r24, 0x06	; 6
     794:	60 f4       	brcc	.+24     	; 0x7ae <setup+0x118>
  {
	  key.keyByte[i] = 0xFF;
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	84 5d       	subi	r24, 0xD4	; 212
     79e:	9c 4f       	sbci	r25, 0xFC	; 252
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
  while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  
// Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++)
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	f1 cf       	rjmp	.-30     	; 0x790 <setup+0xfa>
  
#pragma endregion RFID Scanner

#pragma region Servo Motor

	servo.attach(Servo_pin);	// servo
     7ae:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     7b2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     7b6:	bc 01       	movw	r22, r24
     7b8:	88 e3       	ldi	r24, 0x38	; 56
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZN5Servo6attachEi>
	servo.write(0);				// set servo position to 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	88 e3       	ldi	r24, 0x38	; 56
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_ZN5Servo5writeEi>

#pragma endregion Servo Motor
 
}
     7cc:	00 00       	nop
     7ce:	eb 96       	adiw	r28, 0x3b	; 59
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <loop>:

void loop()
{
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	c3 54       	subi	r28, 0x43	; 67
     7ec:	d1 09       	sbc	r29, r1
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
	// Delay between measurements.
	delay(delayMS);
     7f8:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <delayMS>
     7fc:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <delayMS+0x1>
     800:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <delayMS+0x2>
     804:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <delayMS+0x3>
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
	sensors_event_t event;
	
#pragma region DHT Temperature

	// Get temperature from event
	dht.temperature().getEvent(&event);
     810:	ce 01       	movw	r24, r28
     812:	41 96       	adiw	r24, 0x11	; 17
     814:	6e ee       	ldi	r22, 0xEE	; 238
     816:	72 e0       	ldi	r23, 0x02	; 2
     818:	b0 de       	rcall	.-672    	; 0x57a <_ZN11DHT_Unified11temperatureEv>
     81a:	9e 01       	movw	r18, r28
     81c:	26 5e       	subi	r18, 0xE6	; 230
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	41 96       	adiw	r24, 0x11	; 17
     824:	b9 01       	movw	r22, r18
     826:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>
     82a:	ce 01       	movw	r24, r28
     82c:	41 96       	adiw	r24, 0x11	; 17
     82e:	42 d3       	rcall	.+1668   	; 0xeb4 <_ZN11DHT_Unified11TemperatureD1Ev>
	
	// set Temperature value
	if (isnan(event.temperature))
     830:	8e a5       	ldd	r24, Y+46	; 0x2e
     832:	9f a5       	ldd	r25, Y+47	; 0x2f
     834:	a8 a9       	ldd	r26, Y+48	; 0x30
     836:	b9 a9       	ldd	r27, Y+49	; 0x31
     838:	11 e0       	ldi	r17, 0x01	; 1
     83a:	9c 01       	movw	r18, r24
     83c:	ad 01       	movw	r20, r26
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__unordsf2>
     846:	88 23       	and	r24, r24
     848:	09 f4       	brne	.+2      	; 0x84c <loop+0x6c>
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	11 23       	and	r17, r17
     84e:	39 f0       	breq	.+14     	; 0x85e <loop+0x7e>
	{
		DhtSencorTemp = 420;
     850:	84 ea       	ldi	r24, 0xA4	; 164
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <DhtSencorTemp+0x1>
     858:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <DhtSencorTemp>
     85c:	0e c0       	rjmp	.+28     	; 0x87a <loop+0x9a>
	}
	else
	{
		DhtSencorTemp = (long)event.temperature;
     85e:	8e a5       	ldd	r24, Y+46	; 0x2e
     860:	9f a5       	ldd	r25, Y+47	; 0x2f
     862:	a8 a9       	ldd	r26, Y+48	; 0x30
     864:	b9 a9       	ldd	r27, Y+49	; 0x31
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	0e 94 a6 28 	call	0x514c	; 0x514c <__fixsfsi>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <DhtSencorTemp+0x1>
     876:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <DhtSencorTemp>
#pragma endregion DHT Temperature

#pragma region DHT Humidity

	// Get temperature from event
	dht.humidity().getEvent(&event);
     87a:	ce 01       	movw	r24, r28
     87c:	08 96       	adiw	r24, 0x08	; 8
     87e:	6e ee       	ldi	r22, 0xEE	; 238
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	ce de       	rcall	.-612    	; 0x620 <_ZN11DHT_Unified8humidityEv>
     884:	9e 01       	movw	r18, r28
     886:	26 5e       	subi	r18, 0xE6	; 230
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	ce 01       	movw	r24, r28
     88c:	08 96       	adiw	r24, 0x08	; 8
     88e:	b9 01       	movw	r22, r18
     890:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>
     894:	ce 01       	movw	r24, r28
     896:	08 96       	adiw	r24, 0x08	; 8
     898:	40 d3       	rcall	.+1664   	; 0xf1a <_ZN11DHT_Unified8HumidityD1Ev>
	
	// set Humidity value
	if (isnan(event.relative_humidity))
     89a:	8e a5       	ldd	r24, Y+46	; 0x2e
     89c:	9f a5       	ldd	r25, Y+47	; 0x2f
     89e:	a8 a9       	ldd	r26, Y+48	; 0x30
     8a0:	b9 a9       	ldd	r27, Y+49	; 0x31
     8a2:	11 e0       	ldi	r17, 0x01	; 1
     8a4:	9c 01       	movw	r18, r24
     8a6:	ad 01       	movw	r20, r26
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__unordsf2>
     8b0:	88 23       	and	r24, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <loop+0xd6>
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	11 23       	and	r17, r17
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <loop+0xe8>
	{
		DhtSencorHum = 360;
     8ba:	88 e6       	ldi	r24, 0x68	; 104
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <DhtSencorHum+0x1>
     8c2:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <DhtSencorHum>
     8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <loop+0x104>
	}
	else
	{
		DhtSencorHum = (long)event.relative_humidity;
     8c8:	8e a5       	ldd	r24, Y+46	; 0x2e
     8ca:	9f a5       	ldd	r25, Y+47	; 0x2f
     8cc:	a8 a9       	ldd	r26, Y+48	; 0x30
     8ce:	b9 a9       	ldd	r27, Y+49	; 0x31
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	0e 94 a6 28 	call	0x514c	; 0x514c <__fixsfsi>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <DhtSencorHum+0x1>
     8e0:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <DhtSencorHum>
	//Serial.print("Temp: ");
	//Serial.println(DhtSencorTemp);
	//Serial.print("Hum: ");
	//Serial.println(DhtSencorHum);
  
  Wire.beginTransmission(4);		// transmit to device #4
     8e4:	64 e0       	ldi	r22, 0x04	; 4
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	82 e9       	ldi	r24, 0x92	; 146
     8ea:	94 e0       	ldi	r25, 0x04	; 4
     8ec:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Temp: ");				// sends some bytes
     8f0:	6e e0       	ldi	r22, 0x0E	; 14
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	82 e9       	ldi	r24, 0x92	; 146
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	48 dd       	rcall	.-1392   	; 0x38a <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorTemp);		// sends some bytes
     8fa:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <DhtSencorTemp>
     8fe:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <DhtSencorTemp+0x1>
     902:	bc 01       	movw	r22, r24
     904:	82 e9       	ldi	r24, 0x92	; 146
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	a7 de       	rcall	.-690    	; 0x658 <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     90a:	82 e9       	ldi	r24, 0x92	; 146
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.beginTransmission(4);		// transmit to device #4
     912:	64 e0       	ldi	r22, 0x04	; 4
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	82 e9       	ldi	r24, 0x92	; 146
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN7TwoWire17beginTransmissionEi>
  
  Wire.write("Hum: ");				// sends some bytes
     91e:	65 e1       	ldi	r22, 0x15	; 21
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	82 e9       	ldi	r24, 0x92	; 146
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	31 dd       	rcall	.-1438   	; 0x38a <_ZN5Print5writeEPKc>
  Wire.write(DhtSencorHum);		    // sends some bytes
     928:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <DhtSencorHum>
     92c:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <DhtSencorHum+0x1>
     930:	bc 01       	movw	r22, r24
     932:	82 e9       	ldi	r24, 0x92	; 146
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	90 de       	rcall	.-736    	; 0x658 <_ZN7TwoWire5writeEi>
  
  Wire.endTransmission();			// stop transmitting
     938:	82 e9       	ldi	r24, 0x92	; 146
     93a:	94 e0       	ldi	r25, 0x04	; 4
     93c:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_ZN7TwoWire15endTransmissionEv>
#pragma endregion Master Writer/Slave Receiver

	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4
     940:	47 e0       	ldi	r20, 0x07	; 7
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	82 e9       	ldi	r24, 0x92	; 146
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	0e 94 38 26 	call	0x4c70	; 0x4c70 <_ZN7TwoWire11requestFromEii>

	String keyword =  "";
     950:	ce 01       	movw	r24, r28
     952:	ce 96       	adiw	r24, 0x3e	; 62
     954:	6b e1       	ldi	r22, 0x1B	; 27
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN6StringC1EPKc>
	// slave may send less than requested
	while (Wire.available()) 
     95c:	82 e9       	ldi	r24, 0x92	; 146
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	0e 94 38 27 	call	0x4e70	; 0x4e70 <_ZN7TwoWire9availableEv>
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	89 2b       	or	r24, r25
     968:	09 f4       	brne	.+2      	; 0x96c <loop+0x18c>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	22 23       	and	r18, r18
     96e:	51 f0       	breq	.+20     	; 0x984 <loop+0x1a4>
	{ 
		char request_c = Wire.read();		// receive a byte as character
     970:	82 e9       	ldi	r24, 0x92	; 146
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <_ZN7TwoWire4readEv>
		keyword += request_c;
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	ce 01       	movw	r24, r28
     97c:	ce 96       	adiw	r24, 0x3e	; 62
     97e:	69 81       	ldd	r22, Y+1	; 0x01
     980:	9b dc       	rcall	.-1738   	; 0x2b8 <_ZN6StringpLEc>
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
	// slave may send less than requested
	while (Wire.available()) 
     982:	ec cf       	rjmp	.-40     	; 0x95c <loop+0x17c>
		char request_c = Wire.read();		// receive a byte as character
		keyword += request_c;
	}
	
	// Removes the last char in the received string
	 keyword = keyword.substring(0, keyword.length() - 1);
     984:	ce 01       	movw	r24, r28
     986:	ce 96       	adiw	r24, 0x3e	; 62
     988:	85 dc       	rcall	.-1782   	; 0x294 <_ZNK6String6lengthEv>
     98a:	9c 01       	movw	r18, r24
     98c:	21 50       	subi	r18, 0x01	; 1
     98e:	31 09       	sbc	r19, r1
     990:	ce 01       	movw	r24, r28
     992:	02 96       	adiw	r24, 0x02	; 2
     994:	be 01       	movw	r22, r28
     996:	62 5c       	subi	r22, 0xC2	; 194
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZNK6String9substringEjj>
     9a2:	9e 01       	movw	r18, r28
     9a4:	2e 5f       	subi	r18, 0xFE	; 254
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	ce 01       	movw	r24, r28
     9aa:	ce 96       	adiw	r24, 0x3e	; 62
     9ac:	b9 01       	movw	r22, r18
     9ae:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6StringaSEOS_>
     9b2:	ce 01       	movw	r24, r28
     9b4:	02 96       	adiw	r24, 0x02	; 2
     9b6:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
	 
	// Verify incoming data
	if (keyword == "TOGGLE")
     9ba:	ce 01       	movw	r24, r28
     9bc:	ce 96       	adiw	r24, 0x3e	; 62
     9be:	6c e1       	ldi	r22, 0x1C	; 28
     9c0:	72 e0       	ldi	r23, 0x02	; 2
     9c2:	a7 dc       	rcall	.-1714   	; 0x312 <_ZNK6StringeqEPKc>
     9c4:	98 2f       	mov	r25, r24
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	99 23       	and	r25, r25
     9ca:	09 f4       	brne	.+2      	; 0x9ce <loop+0x1ee>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	88 23       	and	r24, r24
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <loop+0x1f4>
	{
		// toggle servo position
		moveServo();
     9d2:	4f d1       	rcall	.+670    	; 0xc72 <_Z9moveServov>
     9d4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <isCardValid+0x1>
#pragma endregion Master Receiver/Slave Writer


#pragma region RFID lås (Hoveddør)

	isCardValid = 0;	   // set - reset state
     9d8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <isCardValid>
     9dc:	8e e1       	ldi	r24, 0x1E	; 30

	// Look for new cards, and select one if present
	if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() )
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	0e 94 99 1a 	call	0x3532	; 0x3532 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     9e4:	98 2f       	mov	r25, r24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	89 27       	eor	r24, r25
     9ea:	88 23       	and	r24, r24
     9ec:	49 f4       	brne	.+18     	; 0xa00 <loop+0x220>
     9ee:	8e e1       	ldi	r24, 0x1E	; 30
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     9f6:	98 2f       	mov	r25, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	89 27       	eor	r24, r25
     9fc:	88 23       	and	r24, r24
     9fe:	11 f0       	breq	.+4      	; 0xa04 <loop+0x224>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <loop+0x226>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	88 23       	and	r24, r24
     a08:	59 f0       	breq	.+22     	; 0xa20 <loop+0x240>
	{
		delay(50);
     a0a:	62 e3       	ldi	r22, 0x32	; 50
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
		isCardValid = 0;
     a16:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <isCardValid+0x1>
     a1a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <isCardValid>
     a1e:	19 c0       	rjmp	.+50     	; 0xa52 <loop+0x272>
	}
	else 
	{
		isCardValid = RfidValidater();
     a20:	2e d0       	rcall	.+92     	; 0xa7e <_Z13RfidValidaterv>
     a22:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <isCardValid+0x1>
     a26:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <isCardValid>

		// if card/chip is valid
		if (isCardValid == 1)
     a2a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <isCardValid>
     a2e:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <isCardValid+0x1>
     a32:	01 97       	sbiw	r24, 0x01	; 1
		{			
			// makes 1 small bib sound
			makeBipSound(1);
     a34:	29 f4       	brne	.+10     	; 0xa40 <loop+0x260>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
				
			// Move servo
			moveServo();
     a3a:	6b d1       	rcall	.+726    	; 0xd12 <_Z12makeBipSoundi>
     a3c:	1a d1       	rcall	.+564    	; 0xc72 <_Z9moveServov>
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <loop+0x272>
		}
		// if card/chip is not valid
		else if (isCardValid == 2)
     a40:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <isCardValid>
     a44:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <isCardValid+0x1>
     a48:	02 97       	sbiw	r24, 0x02	; 2
     a4a:	19 f4       	brne	.+6      	; 0xa52 <loop+0x272>
		{	
			// makes 3 small bib sounds
			makeBipSound(2);
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	60 d1       	rcall	.+704    	; 0xd12 <_Z12makeBipSoundi>
     a52:	68 ee       	ldi	r22, 0xE8	; 232
		}
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
     a54:	73 e0       	ldi	r23, 0x03	; 3
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
     a5e:	ce 01       	movw	r24, r28
	// Ask slave (MKR WIFI 110 board) for data
#pragma region Master Receiver/Slave Writer
	
	Wire.requestFrom(4, 7);		// request 6 bytes from slave device #4

	String keyword =  "";
     a60:	ce 96       	adiw	r24, 0x3e	; 62
     a62:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
     a66:	00 00       	nop
	}
	
#pragma endregion RFID lås (Hoveddør)

  delay(1000);		// run loop every 1 sec
}
     a68:	cd 5b       	subi	r28, 0xBD	; 189
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	08 95       	ret

00000a7e <_Z13RfidValidaterv>:
     a7e:	0f 93       	push	r16

// This function adds RFID functionality to the program.
// - It can see if a card is present or not. 
// - it can return 3 states: 0 = null, 1 = true, -1 = false.
int RfidValidater() 
{
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	69 97       	sbiw	r28, 0x19	; 25
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61

#pragma region reading card and format output

	// reading card
	String content= "";
     a96:	ce 01       	movw	r24, r28
     a98:	44 96       	adiw	r24, 0x14	; 20
     a9a:	6b e1       	ldi	r22, 0x1B	; 27
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN6StringC1EPKc>
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     aa2:	19 82       	std	Y+1, r1	; 0x01
     aa4:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <mfrc522>
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	89 17       	cp	r24, r25
     aac:	08 f0       	brcs	.+2      	; 0xab0 <_Z13RfidValidaterv+0x32>
     aae:	5f c0       	rjmp	.+190    	; 0xb6e <_Z13RfidValidaterv+0xf0>
	{
		Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	81 5e       	subi	r24, 0xE1	; 225
     ab8:	9c 4f       	sbci	r25, 0xFC	; 252
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	80 31       	cpi	r24, 0x10	; 16
     ac0:	18 f4       	brcc	.+6      	; 0xac8 <_Z13RfidValidaterv+0x4a>
     ac2:	83 e2       	ldi	r24, 0x23	; 35
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <_Z13RfidValidaterv+0x4e>
     ac8:	86 e2       	ldi	r24, 0x26	; 38
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	bc 01       	movw	r22, r24
     ace:	8e e9       	ldi	r24, 0x9E	; 158
     ad0:	94 e0       	ldi	r25, 0x04	; 4
     ad2:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZN5Print5printEPKc>
		Serial.print(mfrc522.uid.uidByte[i], HEX);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	81 5e       	subi	r24, 0xE1	; 225
     ade:	9c 4f       	sbci	r25, 0xFC	; 252
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	40 e1       	ldi	r20, 0x10	; 16
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	68 2f       	mov	r22, r24
     aea:	8e e9       	ldi	r24, 0x9E	; 158
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN5Print5printEhi>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	81 5e       	subi	r24, 0xE1	; 225
     afa:	9c 4f       	sbci	r25, 0xFC	; 252
     afc:	fc 01       	movw	r30, r24
     afe:	80 81       	ld	r24, Z
     b00:	80 31       	cpi	r24, 0x10	; 16
     b02:	18 f4       	brcc	.+6      	; 0xb0a <_Z13RfidValidaterv+0x8c>
     b04:	83 e2       	ldi	r24, 0x23	; 35
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <_Z13RfidValidaterv+0x90>
     b0a:	86 e2       	ldi	r24, 0x26	; 38
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	9e 01       	movw	r18, r28
     b10:	22 5f       	subi	r18, 0xF2	; 242
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	bc 01       	movw	r22, r24
     b16:	c9 01       	movw	r24, r18
     b18:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN6StringC1EPKc>
     b1c:	9e 01       	movw	r18, r28
     b1e:	22 5f       	subi	r18, 0xF2	; 242
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	ce 01       	movw	r24, r28
     b24:	44 96       	adiw	r24, 0x14	; 20
     b26:	b9 01       	movw	r22, r18
     b28:	0e 94 13 30 	call	0x6026	; 0x6026 <_ZN6String6concatERKS_>
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 96       	adiw	r24, 0x0e	; 14
     b30:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	88 2f       	mov	r24, r24
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	81 5e       	subi	r24, 0xE1	; 225
     b3c:	9c 4f       	sbci	r25, 0xFC	; 252
     b3e:	fc 01       	movw	r30, r24
     b40:	20 81       	ld	r18, Z
     b42:	ce 01       	movw	r24, r28
     b44:	08 96       	adiw	r24, 0x08	; 8
     b46:	40 e1       	ldi	r20, 0x10	; 16
     b48:	62 2f       	mov	r22, r18
     b4a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <_ZN6StringC1Ehh>
     b4e:	9e 01       	movw	r18, r28
     b50:	28 5f       	subi	r18, 0xF8	; 248
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	ce 01       	movw	r24, r28
     b56:	44 96       	adiw	r24, 0x14	; 20
     b58:	b9 01       	movw	r22, r18
     b5a:	0e 94 13 30 	call	0x6026	; 0x6026 <_ZN6String6concatERKS_>
     b5e:	ce 01       	movw	r24, r28
     b60:	08 96       	adiw	r24, 0x08	; 8
     b62:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
#pragma region reading card and format output

	// reading card
	String content= "";
	byte letter;
	for (byte i = 0; i < mfrc522.uid.size; i++)
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	9b cf       	rjmp	.-202    	; 0xaa4 <_Z13RfidValidaterv+0x26>
		content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
		content.concat(String(mfrc522.uid.uidByte[i], HEX));
	}
	
	// formating output
	content.toUpperCase();
     b6e:	ce 01       	movw	r24, r28
     b70:	44 96       	adiw	r24, 0x14	; 20
     b72:	0e 94 cc 30 	call	0x6198	; 0x6198 <_ZN6String11toUpperCaseEv>
	
#pragma region Validate card reading 

	// validation
	//if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
	if (content.substring(1) == Valid_RFID_Code) //change here the UID of the card/cards that you want to give access
     b76:	ce 01       	movw	r24, r28
     b78:	02 96       	adiw	r24, 0x02	; 2
     b7a:	9e 01       	movw	r18, r28
     b7c:	2c 5e       	subi	r18, 0xEC	; 236
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	b9 01       	movw	r22, r18
     b86:	dd db       	rcall	.-2118   	; 0x342 <_ZNK6String9substringEj>
     b88:	ce 01       	movw	r24, r28
     b8a:	02 96       	adiw	r24, 0x02	; 2
     b8c:	62 e3       	ldi	r22, 0x32	; 50
     b8e:	73 e0       	ldi	r23, 0x03	; 3
     b90:	a8 db       	rcall	.-2224   	; 0x2e2 <_ZNK6StringeqERKS_>
     b92:	11 e0       	ldi	r17, 0x01	; 1
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <_Z13RfidValidaterv+0x11c>
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	ce 01       	movw	r24, r28
     b9c:	02 96       	adiw	r24, 0x02	; 2
     b9e:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
     ba2:	11 23       	and	r17, r17
     ba4:	89 f0       	breq	.+34     	; 0xbc8 <_Z13RfidValidaterv+0x14a>
	{
		Serial.println();
     ba6:	8e e9       	ldi	r24, 0x9E	; 158
     ba8:	94 e0       	ldi	r25, 0x04	; 4
     baa:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN5Print7printlnEv>
		Serial.println("Authorized access");
     bae:	68 e2       	ldi	r22, 0x28	; 40
     bb0:	72 e0       	ldi	r23, 0x02	; 2
     bb2:	8e e9       	ldi	r24, 0x9E	; 158
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	0e 94 30 2c 	call	0x5860	; 0x5860 <_ZN5Print7printlnEPKc>
		Serial.println();
     bba:	8e e9       	ldi	r24, 0x9E	; 158
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN5Print7printlnEv>
		return 1;
     bc2:	01 e0       	ldi	r16, 0x01	; 1
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <_Z13RfidValidaterv+0x16a>
	}
	else
	{
		Serial.println();
     bc8:	8e e9       	ldi	r24, 0x9E	; 158
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN5Print7printlnEv>
		Serial.println(" Access denied");
     bd0:	6a e3       	ldi	r22, 0x3A	; 58
     bd2:	72 e0       	ldi	r23, 0x02	; 2
     bd4:	8e e9       	ldi	r24, 0x9E	; 158
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	0e 94 30 2c 	call	0x5860	; 0x5860 <_ZN5Print7printlnEPKc>
		Serial.println();
     bdc:	8e e9       	ldi	r24, 0x9E	; 158
     bde:	94 e0       	ldi	r25, 0x04	; 4
     be0:	0e 94 2c 2c 	call	0x5858	; 0x5858 <_ZN5Print7printlnEv>
		return 2;
     be4:	02 e0       	ldi	r16, 0x02	; 2
     be6:	10 e0       	ldi	r17, 0x00	; 0
{

#pragma region reading card and format output

	// reading card
	String content= "";
     be8:	ce 01       	movw	r24, r28
     bea:	44 96       	adiw	r24, 0x14	; 20
     bec:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
     bf0:	c8 01       	movw	r24, r16
		return 2;
	}
	
#pragma endregion Validate card reading 

}
     bf2:	69 96       	adiw	r28, 0x19	; 25
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <_Z11SetRfidLedsb>:

// This function switches between high and low values each time it is called.
void SetRfidLeds(bool status)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
	// sets the Front door status led's state
	if (status == false)
     c14:	99 81       	ldd	r25, Y+1	; 0x01
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	89 27       	eor	r24, r25
     c1a:	88 23       	and	r24, r24
     c1c:	71 f0       	breq	.+28     	; 0xc3a <_Z11SetRfidLedsb+0x32>
	{
		digitalWrite(RFID_GREEN_LED, LOW);	// Turn OFF GREEN LED
     c1e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     c22:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
		digitalWrite(RFID_RED_LED, HIGH);	// Light up RED LED
     c2c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     c30:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
	}
	if (status == true)
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	88 23       	and	r24, r24
     c3e:	71 f0       	breq	.+28     	; 0xc5c <_Z11SetRfidLedsb+0x54>
	{
		digitalWrite(RFID_GREEN_LED, HIGH);	// Light up GREEN LED
     c40:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RFID_GREEN_LED>
     c44:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RFID_GREEN_LED+0x1>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
		digitalWrite(RFID_RED_LED, LOW);	// Turn OFF RED LED
     c4e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <RFID_RED_LED>
     c52:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <RFID_RED_LED+0x1>
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
	}
	delay(100);
     c5c:	64 e6       	ldi	r22, 0x64	; 100
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
}
     c68:	00 00       	nop
     c6a:	0f 90       	pop	r0
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <_Z9moveServov>:

// This function will simulate a lock opening or closing.
void moveServo()
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	// oppen dør
	if ( servo.read() == 180 )
     c7a:	88 e3       	ldi	r24, 0x38	; 56
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN5Servo4readEv>
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	84 3b       	cpi	r24, 0xB4	; 180
     c86:	91 05       	cpc	r25, r1
     c88:	09 f0       	breq	.+2      	; 0xc8c <_Z9moveServov+0x1a>
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	22 23       	and	r18, r18
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <_Z9moveServov+0x3e>
	{
		digitalWrite(Servo_pin, HIGH);
     c90:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     c94:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
		servo.write(0);
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	88 e3       	ldi	r24, 0x38	; 56
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_ZN5Servo5writeEi>
		
		SetRfidLeds(true);		// red light off | green light onn
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	ad df       	rcall	.-166    	; 0xc08 <_Z11SetRfidLedsb>
     cae:	27 c0       	rjmp	.+78     	; 0xcfe <_Z9moveServov+0x8c>
	}
	// Lås døren
	else if ( servo.read() == 0 )
     cb0:	88 e3       	ldi	r24, 0x38	; 56
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 11 20 	call	0x4022	; 0x4022 <_ZN5Servo4readEv>
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	89 2b       	or	r24, r25
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <_Z9moveServov+0x4e>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	22 23       	and	r18, r18
     cc2:	81 f0       	breq	.+32     	; 0xce4 <_Z9moveServov+0x72>
	{
		digitalWrite(Servo_pin, LOW);
     cc4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     cc8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
		servo.write(180);
     cd2:	64 eb       	ldi	r22, 0xB4	; 180
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	88 e3       	ldi	r24, 0x38	; 56
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_ZN5Servo5writeEi>
		
		SetRfidLeds(false);		// red light on | green light off
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	93 df       	rcall	.-218    	; 0xc08 <_Z11SetRfidLedsb>
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <_Z9moveServov+0x8c>
	}
	// Correct servo error. (Set state to closed)
	else 
	{
		digitalWrite(Servo_pin, LOW);
     ce4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Servo_pin>
     ce8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Servo_pin+0x1>
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
		servo.write(180);
     cf2:	64 eb       	ldi	r22, 0xB4	; 180
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	88 e3       	ldi	r24, 0x38	; 56
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_ZN5Servo5writeEi>
	}
	delay(100);
     cfe:	64 e6       	ldi	r22, 0x64	; 100
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
}
     d0a:	00 00       	nop
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <_Z12makeBipSoundi>:

// This function is used for making sound feedback to the user
// - it takes an int between 1-3.
// - 1 = 1 short bib, 2 = 3 short bibs, 3 = NON STOP ALARM
void makeBipSound(int soundMode) 
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	00 d0       	rcall	.+0      	; 0xd18 <_Z12makeBipSoundi+0x6>
     d18:	1f 92       	push	r1
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
	// 1 Short bib sound
	if (soundMode == 1)
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	a9 f4       	brne	.+42     	; 0xd54 <_Z12makeBipSoundi+0x42>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     d2a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d2e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
		delay(100);
     d38:	64 e6       	ldi	r22, 0x64	; 100
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
		digitalWrite(BIP_PIN, LOW); // silence the alarm 
     d44:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d48:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
     d52:	35 c0       	rjmp	.+106    	; 0xdbe <_Z12makeBipSoundi+0xac>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	02 97       	sbiw	r24, 0x02	; 2
     d5a:	31 f5       	brne	.+76     	; 0xda8 <_Z12makeBipSoundi+0x96>
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	03 97       	sbiw	r24, 0x03	; 3
     d66:	5c f5       	brge	.+86     	; 0xdbe <_Z12makeBipSoundi+0xac>
		{
			digitalWrite(BIP_PIN, HIGH);	// start alarm
     d68:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d6c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
			delay(100);						// tone length
     d76:	64 e6       	ldi	r22, 0x64	; 100
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
     d82:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     d86:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
			delay(50);						// Interval between tones
     d90:	62 e3       	ldi	r22, 0x32	; 50
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
	}
	// 3 short bib sound 
	else if (soundMode == 2)
	{
		// bibs 3 times
		for (int i = 0; i < 3;  i++)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	dc cf       	rjmp	.-72     	; 0xd60 <_Z12makeBipSoundi+0x4e>
			digitalWrite(BIP_PIN, LOW);		// silence the alarm
			delay(50);						// Interval between tones
		}
	}
	// No stop bib sound (ALARM mode)
	else if (soundMode == 3)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	03 97       	sbiw	r24, 0x03	; 3
     dae:	39 f4       	brne	.+14     	; 0xdbe <_Z12makeBipSoundi+0xac>
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
     db0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <BIP_PIN>
     db4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <BIP_PIN+0x1>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
	}
	delay(100);
     dbe:	64 e6       	ldi	r22, 0x64	; 100
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
     dca:	00 00       	nop
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <_ZN11DHT_UnifiedD1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 * DHT_Unified.
 */
class DHT_Unified {
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	1f 92       	push	r1
     de0:	1f 92       	push	r1
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	4d 96       	adiw	r24, 0x1d	; 29
     df0:	94 d0       	rcall	.+296    	; 0xf1a <_ZN11DHT_Unified8HumidityD1Ev>
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	44 96       	adiw	r24, 0x14	; 20
     df8:	5d d0       	rcall	.+186    	; 0xeb4 <_ZN11DHT_Unified11TemperatureD1Ev>
     dfa:	00 00       	nop
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <_Z41__static_initialization_and_destruction_0ii>:
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <_Z41__static_initialization_and_destruction_0ii+0x16>
     e1c:	1f 92       	push	r1
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	7c 83       	std	Y+4, r23	; 0x04
     e28:	6b 83       	std	Y+3, r22	; 0x03
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	11 f5       	brne	.+68     	; 0xe76 <_Z41__static_initialization_and_destruction_0ii+0x70>
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	f1 f4       	brne	.+60     	; 0xe76 <_Z41__static_initialization_and_destruction_0ii+0x70>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     e3a:	aa 24       	eor	r10, r10
     e3c:	aa 94       	dec	r10
     e3e:	ba 2c       	mov	r11, r10
     e40:	65 01       	movw	r12, r10
     e42:	ee 24       	eor	r14, r14
     e44:	ea 94       	dec	r14
     e46:	fe 2c       	mov	r15, r14
     e48:	87 01       	movw	r16, r14
     e4a:	26 e0       	ldi	r18, 0x06	; 6
     e4c:	4b e0       	ldi	r20, 0x0B	; 11
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	8e ee       	ldi	r24, 0xEE	; 238
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	c3 d6       	rcall	.+3462   	; 0x1bdc <_ZN11DHT_UnifiedC1Ehhhll>
#define SS_PIN    53						// Configurable, see typical pin layout above
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}	// Set your new UID here!

int isCardValid = 0;	// set - reset state

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance
     e56:	45 e0       	ldi	r20, 0x05	; 5
     e58:	65 e3       	ldi	r22, 0x35	; 53
     e5a:	8e e1       	ldi	r24, 0x1E	; 30
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN7MFRC522C1Ehh>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e62:	69 e4       	ldi	r22, 0x49	; 73
     e64:	72 e0       	ldi	r23, 0x02	; 2
     e66:	82 e3       	ldi	r24, 0x32	; 50
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN6StringC1EPKc>

#pragma endregion RFID

#pragma region Servo Motor

Servo servo;			// defines a servo motor
     e6e:	88 e3       	ldi	r24, 0x38	; 56
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <_ZN5ServoC1Ev>
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	89 2b       	or	r24, r25
     e7c:	59 f4       	brne	.+22     	; 0xe94 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	39 f4       	brne	.+14     	; 0xe94 <_Z41__static_initialization_and_destruction_0ii+0x8e>


MFRC522::MIFARE_Key key;

// Normally this would be in a separate .h file.
String Valid_RFID_Code = "30 45 66 A7";		// card =  30 45 66 A7 | chip = F7 DD 5A D3
     e86:	82 e3       	ldi	r24, 0x32	; 50
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <_ZN6StringD1Ev>
#pragma region DHT

#define DHTPIN 2			// Digital pin connected to the DHT sensor
#define DHTTYPE DHT11		// DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE);
     e8e:	8e ee       	ldi	r24, 0xEE	; 238
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	a3 df       	rcall	.-186    	; 0xdda <_ZN11DHT_UnifiedD1Ev>
	else if (soundMode == 3)
	{
		digitalWrite(BIP_PIN, HIGH); // start alarm
	}
	delay(100);
     e94:	00 00       	nop
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	af 90       	pop	r10
     eb2:	08 95       	ret

00000eb4 <_ZN11DHT_Unified11TemperatureD1Ev>:
  void begin();

  /*!
   *  @brief  Class that stores state and functions about Temperature
   */
  class Temperature : public Adafruit_Sensor {
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	1f 92       	push	r1
     eba:	1f 92       	push	r1
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	22 e9       	ldi	r18, 0x92	; 146
     ec6:	32 e0       	ldi	r19, 0x02	; 2
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	fc 01       	movw	r30, r24
     ece:	31 83       	std	Z+1, r19	; 0x01
     ed0:	20 83       	st	Z, r18
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	ba da       	rcall	.-2700   	; 0x44c <_ZN15Adafruit_SensorD1Ev>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	89 2b       	or	r24, r25
     ede:	21 f0       	breq	.+8      	; 0xee8 <_ZN11DHT_Unified11TemperatureD1Ev+0x34>
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZdlPv>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <_ZN11DHT_Unified11TemperatureD0Ev>:
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	1f 92       	push	r1
     ef8:	1f 92       	push	r1
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	d6 df       	rcall	.-84     	; 0xeb4 <_ZN11DHT_Unified11TemperatureD1Ev>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZdlPv>
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <_ZN11DHT_Unified8HumidityD1Ev>:
  };

  /*!
   *  @brief  Class that stores state and functions about Humidity
   */
  class Humidity : public Adafruit_Sensor {
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	1f 92       	push	r1
     f20:	1f 92       	push	r1
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	24 e8       	ldi	r18, 0x84	; 132
     f2c:	32 e0       	ldi	r19, 0x02	; 2
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	fc 01       	movw	r30, r24
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	87 da       	rcall	.-2802   	; 0x44c <_ZN15Adafruit_SensorD1Ev>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	89 2b       	or	r24, r25
     f44:	21 f0       	breq	.+8      	; 0xf4e <_ZN11DHT_Unified8HumidityD1Ev+0x34>
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZdlPv>
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <_ZN11DHT_Unified8HumidityD0Ev>:
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	1f 92       	push	r1
     f5e:	1f 92       	push	r1
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	d6 df       	rcall	.-84     	; 0xf1a <_ZN11DHT_Unified8HumidityD1Ev>
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZdlPv>
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <_GLOBAL__sub_I_x>:
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	6f ef       	ldi	r22, 0xFF	; 255
     f8a:	7f ef       	ldi	r23, 0xFF	; 255
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	3a df       	rcall	.-396    	; 0xe06 <_Z41__static_initialization_and_destruction_0ii>
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <_GLOBAL__sub_D_x>:
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	6f ef       	ldi	r22, 0xFF	; 255
     fa2:	7f ef       	ldi	r23, 0xFF	; 255
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	2e df       	rcall	.-420    	; 0xe06 <_Z41__static_initialization_and_destruction_0ii>
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	1f 92       	push	r1
     fb6:	1f 92       	push	r1
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	f8 94       	cli
     fc2:	00 00       	nop
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <_ZN13InterruptLockD1Ev>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	1f 92       	push	r1
     fd4:	1f 92       	push	r1
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	78 94       	sei
     fe0:	00 00       	nop
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <_ZN3DHTC1Ehhh>:
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	2b 97       	sbiw	r28, 0x0b	; 11
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	69 87       	std	Y+9, r22	; 0x09
    1006:	4a 87       	std	Y+10, r20	; 0x0a
    1008:	2b 87       	std	Y+11, r18	; 0x0b
    100a:	8f 81       	ldd	r24, Y+7	; 0x07
    100c:	98 85       	ldd	r25, Y+8	; 0x08
    100e:	29 85       	ldd	r18, Y+9	; 0x09
    1010:	fc 01       	movw	r30, r24
    1012:	25 83       	std	Z+5, r18	; 0x05
    1014:	8f 81       	ldd	r24, Y+7	; 0x07
    1016:	98 85       	ldd	r25, Y+8	; 0x08
    1018:	2a 85       	ldd	r18, Y+10	; 0x0a
    101a:	fc 01       	movw	r30, r24
    101c:	26 83       	std	Z+6, r18	; 0x06
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	82 5b       	subi	r24, 0xB2	; 178
    1026:	9e 4f       	sbci	r25, 0xFE	; 254
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	fc 01       	movw	r30, r24
    1032:	84 91       	lpm	r24, Z
    1034:	8b 83       	std	Y+3, r24	; 0x03
    1036:	8f 81       	ldd	r24, Y+7	; 0x07
    1038:	98 85       	ldd	r25, Y+8	; 0x08
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	fc 01       	movw	r30, r24
    103e:	27 83       	std	Z+7, r18	; 0x07
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	8c 56       	subi	r24, 0x6C	; 108
    1048:	9e 4f       	sbci	r25, 0xFE	; 254
    104a:	9d 83       	std	Y+5, r25	; 0x05
    104c:	8c 83       	std	Y+4, r24	; 0x04
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	fc 01       	movw	r30, r24
    1054:	84 91       	lpm	r24, Z
    1056:	8e 83       	std	Y+6, r24	; 0x06
    1058:	8f 81       	ldd	r24, Y+7	; 0x07
    105a:	98 85       	ldd	r25, Y+8	; 0x08
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	fc 01       	movw	r30, r24
    1060:	20 87       	std	Z+8, r18	; 0x08
    1062:	2f 81       	ldd	r18, Y+7	; 0x07
    1064:	38 85       	ldd	r19, Y+8	; 0x08
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	9e e3       	ldi	r25, 0x3E	; 62
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	85 87       	std	Z+13, r24	; 0x0d
    1072:	96 87       	std	Z+14, r25	; 0x0e
    1074:	a7 87       	std	Z+15, r26	; 0x0f
    1076:	b0 8b       	std	Z+16, r27	; 0x10
    1078:	00 00       	nop
    107a:	2b 96       	adiw	r28, 0x0b	; 11
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_ZN3DHT5beginEh>:
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	00 d0       	rcall	.+0      	; 0x1092 <_ZN3DHT5beginEh+0x6>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	6b 83       	std	Y+3, r22	; 0x03
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	85 81       	ldd	r24, Z+5	; 0x05
    10a4:	62 e0       	ldi	r22, 0x02	; 2
    10a6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
    10aa:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <millis>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	80 5d       	subi	r24, 0xD0	; 208
    10b4:	97 40       	sbci	r25, 0x07	; 7
    10b6:	a1 09       	sbc	r26, r1
    10b8:	b1 09       	sbc	r27, r1
    10ba:	29 81       	ldd	r18, Y+1	; 0x01
    10bc:	3a 81       	ldd	r19, Y+2	; 0x02
    10be:	f9 01       	movw	r30, r18
    10c0:	81 87       	std	Z+9, r24	; 0x09
    10c2:	92 87       	std	Z+10, r25	; 0x0a
    10c4:	a3 87       	std	Z+11, r26	; 0x0b
    10c6:	b4 87       	std	Z+12, r27	; 0x0c
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	fc 01       	movw	r30, r24
    10d0:	22 8b       	std	Z+18, r18	; 0x12
    10d2:	00 00       	nop
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <_ZN3DHT15readTemperatureEbb>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	28 97       	sbiw	r28, 0x08	; 8
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	6f 83       	std	Y+7, r22	; 0x07
    10fa:	48 87       	std	Y+8, r20	; 0x08
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a0 ec       	ldi	r26, 0xC0	; 192
    1102:	bf e7       	ldi	r27, 0x7F	; 127
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	ab 83       	std	Y+3, r26	; 0x03
    110a:	bc 83       	std	Y+4, r27	; 0x04
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	68 85       	ldd	r22, Y+8	; 0x08
    1112:	1d d2       	rcall	.+1082   	; 0x154e <_ZN3DHT4readEb>
    1114:	88 23       	and	r24, r24
    1116:	09 f4       	brne	.+2      	; 0x111a <_ZN3DHT15readTemperatureEbb+0x3a>
    1118:	34 c1       	rjmp	.+616    	; 0x1382 <_ZN3DHT15readTemperatureEbb+0x2a2>
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	fc 01       	movw	r30, r24
    1120:	86 81       	ldd	r24, Z+6	; 0x06
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	8c 30       	cpi	r24, 0x0C	; 12
    1128:	91 05       	cpc	r25, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <_ZN3DHT15readTemperatureEbb+0x4e>
    112c:	72 c0       	rjmp	.+228    	; 0x1212 <_ZN3DHT15readTemperatureEbb+0x132>
    112e:	8d 30       	cpi	r24, 0x0D	; 13
    1130:	91 05       	cpc	r25, r1
    1132:	1c f4       	brge	.+6      	; 0x113a <_ZN3DHT15readTemperatureEbb+0x5a>
    1134:	0b 97       	sbiw	r24, 0x0b	; 11
    1136:	31 f0       	breq	.+12     	; 0x1144 <_ZN3DHT15readTemperatureEbb+0x64>
    1138:	24 c1       	rjmp	.+584    	; 0x1382 <_ZN3DHT15readTemperatureEbb+0x2a2>
    113a:	45 97       	sbiw	r24, 0x15	; 21
    113c:	02 97       	sbiw	r24, 0x02	; 2
    113e:	08 f0       	brcs	.+2      	; 0x1142 <_ZN3DHT15readTemperatureEbb+0x62>
    1140:	20 c1       	rjmp	.+576    	; 0x1382 <_ZN3DHT15readTemperatureEbb+0x2a2>
    1142:	c7 c0       	rjmp	.+398    	; 0x12d2 <_ZN3DHT15readTemperatureEbb+0x1f2>
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	fc 01       	movw	r30, r24
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__floatunsisf>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	ab 83       	std	Y+3, r26	; 0x03
    1166:	bc 83       	std	Y+4, r27	; 0x04
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	fc 01       	movw	r30, r24
    116e:	83 81       	ldd	r24, Z+3	; 0x03
    1170:	88 23       	and	r24, r24
    1172:	84 f4       	brge	.+32     	; 0x1194 <_ZN3DHT15readTemperatureEbb+0xb4>
    1174:	29 81       	ldd	r18, Y+1	; 0x01
    1176:	3a 81       	ldd	r19, Y+2	; 0x02
    1178:	4b 81       	ldd	r20, Y+3	; 0x03
    117a:	5c 81       	ldd	r21, Y+4	; 0x04
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e8       	ldi	r24, 0x80	; 128
    1182:	9f eb       	ldi	r25, 0xBF	; 191
    1184:	0e 94 41 28 	call	0x5082	; 0x5082 <__subsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	ab 83       	std	Y+3, r26	; 0x03
    1192:	bc 83       	std	Y+4, r27	; 0x04
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	fc 01       	movw	r30, r24
    119a:	83 81       	ldd	r24, Z+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	8f 70       	andi	r24, 0x0F	; 15
    11a2:	99 27       	eor	r25, r25
    11a4:	09 2e       	mov	r0, r25
    11a6:	00 0c       	add	r0, r0
    11a8:	aa 0b       	sbc	r26, r26
    11aa:	bb 0b       	sbc	r27, r27
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	2d ec       	ldi	r18, 0xCD	; 205
    11ba:	3c ec       	ldi	r19, 0xCC	; 204
    11bc:	4c ec       	ldi	r20, 0xCC	; 204
    11be:	5d e3       	ldi	r21, 0x3D	; 61
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 89 29 	call	0x5312	; 0x5312 <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9c 01       	movw	r18, r24
    11ce:	ad 01       	movw	r20, r26
    11d0:	69 81       	ldd	r22, Y+1	; 0x01
    11d2:	7a 81       	ldd	r23, Y+2	; 0x02
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	0e 94 42 28 	call	0x5084	; 0x5084 <__addsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	ab 83       	std	Y+3, r26	; 0x03
    11e6:	bc 83       	std	Y+4, r27	; 0x04
    11e8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ea:	88 23       	and	r24, r24
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <_ZN3DHT15readTemperatureEbb+0x110>
    11ee:	c4 c0       	rjmp	.+392    	; 0x1378 <_ZN3DHT15readTemperatureEbb+0x298>
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	ab 81       	ldd	r26, Y+3	; 0x03
    11f6:	bc 81       	ldd	r27, Y+4	; 0x04
    11f8:	2d 81       	ldd	r18, Y+5	; 0x05
    11fa:	3e 81       	ldd	r19, Y+6	; 0x06
    11fc:	ac 01       	movw	r20, r24
    11fe:	bd 01       	movw	r22, r26
    1200:	c9 01       	movw	r24, r18
    1202:	ce d0       	rcall	.+412    	; 0x13a0 <_ZN3DHT11convertCtoFEf>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	ab 83       	std	Y+3, r26	; 0x03
    120e:	bc 83       	std	Y+4, r27	; 0x04
    1210:	b3 c0       	rjmp	.+358    	; 0x1378 <_ZN3DHT15readTemperatureEbb+0x298>
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	fc 01       	movw	r30, r24
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__floatunsisf>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	ab 83       	std	Y+3, r26	; 0x03
    1234:	bc 83       	std	Y+4, r27	; 0x04
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	fc 01       	movw	r30, r24
    123c:	83 81       	ldd	r24, Z+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	8f 70       	andi	r24, 0x0F	; 15
    1244:	99 27       	eor	r25, r25
    1246:	09 2e       	mov	r0, r25
    1248:	00 0c       	add	r0, r0
    124a:	aa 0b       	sbc	r26, r26
    124c:	bb 0b       	sbc	r27, r27
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	2d ec       	ldi	r18, 0xCD	; 205
    125c:	3c ec       	ldi	r19, 0xCC	; 204
    125e:	4c ec       	ldi	r20, 0xCC	; 204
    1260:	5d e3       	ldi	r21, 0x3D	; 61
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 89 29 	call	0x5312	; 0x5312 <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9c 01       	movw	r18, r24
    1270:	ad 01       	movw	r20, r26
    1272:	69 81       	ldd	r22, Y+1	; 0x01
    1274:	7a 81       	ldd	r23, Y+2	; 0x02
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	0e 94 42 28 	call	0x5084	; 0x5084 <__addsf3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	ab 83       	std	Y+3, r26	; 0x03
    1288:	bc 83       	std	Y+4, r27	; 0x04
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	fc 01       	movw	r30, r24
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	88 23       	and	r24, r24
    1294:	4c f4       	brge	.+18     	; 0x12a8 <_ZN3DHT15readTemperatureEbb+0x1c8>
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	ab 81       	ldd	r26, Y+3	; 0x03
    129c:	bc 81       	ldd	r27, Y+4	; 0x04
    129e:	b0 58       	subi	r27, 0x80	; 128
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	ab 83       	std	Y+3, r26	; 0x03
    12a6:	bc 83       	std	Y+4, r27	; 0x04
    12a8:	8f 81       	ldd	r24, Y+7	; 0x07
    12aa:	88 23       	and	r24, r24
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_ZN3DHT15readTemperatureEbb+0x1d0>
    12ae:	66 c0       	rjmp	.+204    	; 0x137c <_ZN3DHT15readTemperatureEbb+0x29c>
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	ab 81       	ldd	r26, Y+3	; 0x03
    12b6:	bc 81       	ldd	r27, Y+4	; 0x04
    12b8:	2d 81       	ldd	r18, Y+5	; 0x05
    12ba:	3e 81       	ldd	r19, Y+6	; 0x06
    12bc:	ac 01       	movw	r20, r24
    12be:	bd 01       	movw	r22, r26
    12c0:	c9 01       	movw	r24, r18
    12c2:	6e d0       	rcall	.+220    	; 0x13a0 <_ZN3DHT11convertCtoFEf>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	ab 83       	std	Y+3, r26	; 0x03
    12ce:	bc 83       	std	Y+4, r27	; 0x04
    12d0:	55 c0       	rjmp	.+170    	; 0x137c <_ZN3DHT15readTemperatureEbb+0x29c>
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	fc 01       	movw	r30, r24
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	8f 77       	andi	r24, 0x7F	; 127
    12e0:	99 27       	eor	r25, r25
    12e2:	38 2f       	mov	r19, r24
    12e4:	22 27       	eor	r18, r18
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	fc 01       	movw	r30, r24
    12ec:	83 81       	ldd	r24, Z+3	; 0x03
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	82 2b       	or	r24, r18
    12f4:	93 2b       	or	r25, r19
    12f6:	cc 01       	movw	r24, r24
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__floatunsisf>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	ab 83       	std	Y+3, r26	; 0x03
    130e:	bc 83       	std	Y+4, r27	; 0x04
    1310:	2d ec       	ldi	r18, 0xCD	; 205
    1312:	3c ec       	ldi	r19, 0xCC	; 204
    1314:	4c ec       	ldi	r20, 0xCC	; 204
    1316:	5d e3       	ldi	r21, 0x3D	; 61
    1318:	69 81       	ldd	r22, Y+1	; 0x01
    131a:	7a 81       	ldd	r23, Y+2	; 0x02
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	0e 94 89 29 	call	0x5312	; 0x5312 <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	ab 83       	std	Y+3, r26	; 0x03
    132e:	bc 83       	std	Y+4, r27	; 0x04
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	fc 01       	movw	r30, r24
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	88 23       	and	r24, r24
    133a:	4c f4       	brge	.+18     	; 0x134e <_ZN3DHT15readTemperatureEbb+0x26e>
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	ab 81       	ldd	r26, Y+3	; 0x03
    1342:	bc 81       	ldd	r27, Y+4	; 0x04
    1344:	b0 58       	subi	r27, 0x80	; 128
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	ab 83       	std	Y+3, r26	; 0x03
    134c:	bc 83       	std	Y+4, r27	; 0x04
    134e:	8f 81       	ldd	r24, Y+7	; 0x07
    1350:	88 23       	and	r24, r24
    1352:	b1 f0       	breq	.+44     	; 0x1380 <_ZN3DHT15readTemperatureEbb+0x2a0>
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	ab 81       	ldd	r26, Y+3	; 0x03
    135a:	bc 81       	ldd	r27, Y+4	; 0x04
    135c:	2d 81       	ldd	r18, Y+5	; 0x05
    135e:	3e 81       	ldd	r19, Y+6	; 0x06
    1360:	ac 01       	movw	r20, r24
    1362:	bd 01       	movw	r22, r26
    1364:	c9 01       	movw	r24, r18
    1366:	1c d0       	rcall	.+56     	; 0x13a0 <_ZN3DHT11convertCtoFEf>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	ab 83       	std	Y+3, r26	; 0x03
    1372:	bc 83       	std	Y+4, r27	; 0x04
    1374:	00 00       	nop
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <_ZN3DHT15readTemperatureEbb+0x2a0>
    1378:	00 00       	nop
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <_ZN3DHT15readTemperatureEbb+0x2a2>
    137c:	00 00       	nop
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <_ZN3DHT15readTemperatureEbb+0x2a2>
    1380:	00 00       	nop
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	ab 81       	ldd	r26, Y+3	; 0x03
    1388:	bc 81       	ldd	r27, Y+4	; 0x04
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	28 96       	adiw	r28, 0x08	; 8
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <_ZN3DHT11convertCtoFEf>:
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <_ZN3DHT11convertCtoFEf+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <_ZN3DHT11convertCtoFEf+0x8>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	4b 83       	std	Y+3, r20	; 0x03
    13b2:	5c 83       	std	Y+4, r21	; 0x04
    13b4:	6d 83       	std	Y+5, r22	; 0x05
    13b6:	7e 83       	std	Y+6, r23	; 0x06
    13b8:	26 e6       	ldi	r18, 0x66	; 102
    13ba:	36 e6       	ldi	r19, 0x66	; 102
    13bc:	46 ee       	ldi	r20, 0xE6	; 230
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	6b 81       	ldd	r22, Y+3	; 0x03
    13c2:	7c 81       	ldd	r23, Y+4	; 0x04
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	0e 94 89 29 	call	0x5312	; 0x5312 <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	52 e4       	ldi	r21, 0x42	; 66
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 42 28 	call	0x5084	; 0x5084 <__addsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	26 96       	adiw	r28, 0x06	; 6
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <_ZN3DHT12readHumidityEb>:
    13fa:	cf 92       	push	r12
    13fc:	df 92       	push	r13
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	27 97       	sbiw	r28, 0x07	; 7
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	6f 83       	std	Y+7, r22	; 0x07
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 ec       	ldi	r26, 0xC0	; 192
    1422:	bf e7       	ldi	r27, 0x7F	; 127
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	ab 83       	std	Y+3, r26	; 0x03
    142a:	bc 83       	std	Y+4, r27	; 0x04
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	8d d0       	rcall	.+282    	; 0x154e <_ZN3DHT4readEb>
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <_ZN3DHT12readHumidityEb+0x40>
    1438:	77 c0       	rjmp	.+238    	; 0x1528 <_ZN3DHT12readHumidityEb+0x12e>
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	fc 01       	movw	r30, r24
    1440:	86 81       	ldd	r24, Z+6	; 0x06
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	8b 30       	cpi	r24, 0x0B	; 11
    1448:	91 05       	cpc	r25, r1
    144a:	0c f4       	brge	.+2      	; 0x144e <_ZN3DHT12readHumidityEb+0x54>
    144c:	6d c0       	rjmp	.+218    	; 0x1528 <_ZN3DHT12readHumidityEb+0x12e>
    144e:	8d 30       	cpi	r24, 0x0D	; 13
    1450:	91 05       	cpc	r25, r1
    1452:	2c f0       	brlt	.+10     	; 0x145e <_ZN3DHT12readHumidityEb+0x64>
    1454:	45 97       	sbiw	r24, 0x15	; 21
    1456:	02 97       	sbiw	r24, 0x02	; 2
    1458:	08 f0       	brcs	.+2      	; 0x145c <_ZN3DHT12readHumidityEb+0x62>
    145a:	66 c0       	rjmp	.+204    	; 0x1528 <_ZN3DHT12readHumidityEb+0x12e>
    145c:	37 c0       	rjmp	.+110    	; 0x14cc <_ZN3DHT12readHumidityEb+0xd2>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	09 2e       	mov	r0, r25
    146c:	00 0c       	add	r0, r0
    146e:	aa 0b       	sbc	r26, r26
    1470:	bb 0b       	sbc	r27, r27
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    147a:	6b 01       	movw	r12, r22
    147c:	7c 01       	movw	r14, r24
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	fc 01       	movw	r30, r24
    1484:	81 81       	ldd	r24, Z+1	; 0x01
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	09 2e       	mov	r0, r25
    148c:	00 0c       	add	r0, r0
    148e:	aa 0b       	sbc	r26, r26
    1490:	bb 0b       	sbc	r27, r27
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	2d ec       	ldi	r18, 0xCD	; 205
    14a0:	3c ec       	ldi	r19, 0xCC	; 204
    14a2:	4c ec       	ldi	r20, 0xCC	; 204
    14a4:	5d e3       	ldi	r21, 0x3D	; 61
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 89 29 	call	0x5312	; 0x5312 <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9c 01       	movw	r18, r24
    14b4:	ad 01       	movw	r20, r26
    14b6:	c7 01       	movw	r24, r14
    14b8:	b6 01       	movw	r22, r12
    14ba:	0e 94 42 28 	call	0x5084	; 0x5084 <__addsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	ab 83       	std	Y+3, r26	; 0x03
    14c8:	bc 83       	std	Y+4, r27	; 0x04
    14ca:	2e c0       	rjmp	.+92     	; 0x1528 <_ZN3DHT12readHumidityEb+0x12e>
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	fc 01       	movw	r30, r24
    14d2:	80 81       	ld	r24, Z
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	38 2f       	mov	r19, r24
    14da:	22 27       	eor	r18, r18
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	fc 01       	movw	r30, r24
    14e2:	81 81       	ldd	r24, Z+1	; 0x01
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	82 2b       	or	r24, r18
    14ea:	93 2b       	or	r25, r19
    14ec:	cc 01       	movw	r24, r24
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__floatunsisf>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	ab 83       	std	Y+3, r26	; 0x03
    1504:	bc 83       	std	Y+4, r27	; 0x04
    1506:	2d ec       	ldi	r18, 0xCD	; 205
    1508:	3c ec       	ldi	r19, 0xCC	; 204
    150a:	4c ec       	ldi	r20, 0xCC	; 204
    150c:	5d e3       	ldi	r21, 0x3D	; 61
    150e:	69 81       	ldd	r22, Y+1	; 0x01
    1510:	7a 81       	ldd	r23, Y+2	; 0x02
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	0e 94 89 29 	call	0x5312	; 0x5312 <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	ab 83       	std	Y+3, r26	; 0x03
    1524:	bc 83       	std	Y+4, r27	; 0x04
    1526:	00 00       	nop
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	ab 81       	ldd	r26, Y+3	; 0x03
    152e:	bc 81       	ldd	r27, Y+4	; 0x04
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	27 96       	adiw	r28, 0x07	; 7
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	08 95       	ret

0000154e <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	c4 55       	subi	r28, 0x54	; 84
    1566:	d1 40       	sbci	r29, 0x01	; 1
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	9e 01       	movw	r18, r28
    1574:	2e 5a       	subi	r18, 0xAE	; 174
    1576:	3e 4f       	sbci	r19, 0xFE	; 254
    1578:	f9 01       	movw	r30, r18
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
    157e:	ce 01       	movw	r24, r28
    1580:	8c 5a       	subi	r24, 0xAC	; 172
    1582:	9e 4f       	sbci	r25, 0xFE	; 254
    1584:	fc 01       	movw	r30, r24
    1586:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1588:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <millis>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	af 83       	std	Y+7, r26	; 0x07
    1596:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1598:	ce 01       	movw	r24, r28
    159a:	8c 5a       	subi	r24, 0xAC	; 172
    159c:	9e 4f       	sbci	r25, 0xFE	; 254
    159e:	fc 01       	movw	r30, r24
    15a0:	90 81       	ld	r25, Z
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	89 27       	eor	r24, r25
    15a6:	88 23       	and	r24, r24
    15a8:	29 f1       	breq	.+74     	; 0x15f4 <_ZN3DHT4readEb+0xa6>
    15aa:	ce 01       	movw	r24, r28
    15ac:	8e 5a       	subi	r24, 0xAE	; 174
    15ae:	9e 4f       	sbci	r25, 0xFE	; 254
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	fc 01       	movw	r30, r24
    15b8:	81 85       	ldd	r24, Z+9	; 0x09
    15ba:	92 85       	ldd	r25, Z+10	; 0x0a
    15bc:	a3 85       	ldd	r26, Z+11	; 0x0b
    15be:	b4 85       	ldd	r27, Z+12	; 0x0c
    15c0:	2d 81       	ldd	r18, Y+5	; 0x05
    15c2:	3e 81       	ldd	r19, Y+6	; 0x06
    15c4:	4f 81       	ldd	r20, Y+7	; 0x07
    15c6:	58 85       	ldd	r21, Y+8	; 0x08
    15c8:	59 01       	movw	r10, r18
    15ca:	6a 01       	movw	r12, r20
    15cc:	a8 1a       	sub	r10, r24
    15ce:	b9 0a       	sbc	r11, r25
    15d0:	ca 0a       	sbc	r12, r26
    15d2:	db 0a       	sbc	r13, r27
    15d4:	d6 01       	movw	r26, r12
    15d6:	c5 01       	movw	r24, r10
    15d8:	80 3d       	cpi	r24, 0xD0	; 208
    15da:	97 40       	sbci	r25, 0x07	; 7
    15dc:	a1 05       	cpc	r26, r1
    15de:	b1 05       	cpc	r27, r1
    15e0:	48 f4       	brcc	.+18     	; 0x15f4 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    15e2:	ce 01       	movw	r24, r28
    15e4:	8e 5a       	subi	r24, 0xAE	; 174
    15e6:	9e 4f       	sbci	r25, 0xFE	; 254
    15e8:	fc 01       	movw	r30, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	fc 01       	movw	r30, r24
    15f0:	f1 88       	ldd	r15, Z+17	; 0x11
    15f2:	5f c2       	rjmp	.+1214   	; 0x1ab2 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    15f4:	ce 01       	movw	r24, r28
    15f6:	8e 5a       	subi	r24, 0xAE	; 174
    15f8:	9e 4f       	sbci	r25, 0xFE	; 254
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	af 81       	ldd	r26, Y+7	; 0x07
    1606:	b8 85       	ldd	r27, Y+8	; 0x08
    1608:	f9 01       	movw	r30, r18
    160a:	81 87       	std	Z+9, r24	; 0x09
    160c:	92 87       	std	Z+10, r25	; 0x0a
    160e:	a3 87       	std	Z+11, r26	; 0x0b
    1610:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    1612:	ce 01       	movw	r24, r28
    1614:	8e 5a       	subi	r24, 0xAE	; 174
    1616:	9e 4f       	sbci	r25, 0xFE	; 254
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	fc 01       	movw	r30, r24
    1620:	14 82       	std	Z+4, r1	; 0x04
    1622:	ce 01       	movw	r24, r28
    1624:	8e 5a       	subi	r24, 0xAE	; 174
    1626:	9e 4f       	sbci	r25, 0xFE	; 254
    1628:	fc 01       	movw	r30, r24
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	fc 01       	movw	r30, r24
    1630:	24 81       	ldd	r18, Z+4	; 0x04
    1632:	ce 01       	movw	r24, r28
    1634:	8e 5a       	subi	r24, 0xAE	; 174
    1636:	9e 4f       	sbci	r25, 0xFE	; 254
    1638:	fc 01       	movw	r30, r24
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	fc 01       	movw	r30, r24
    1640:	23 83       	std	Z+3, r18	; 0x03
    1642:	ce 01       	movw	r24, r28
    1644:	8e 5a       	subi	r24, 0xAE	; 174
    1646:	9e 4f       	sbci	r25, 0xFE	; 254
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	fc 01       	movw	r30, r24
    1650:	23 81       	ldd	r18, Z+3	; 0x03
    1652:	ce 01       	movw	r24, r28
    1654:	8e 5a       	subi	r24, 0xAE	; 174
    1656:	9e 4f       	sbci	r25, 0xFE	; 254
    1658:	fc 01       	movw	r30, r24
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	fc 01       	movw	r30, r24
    1660:	22 83       	std	Z+2, r18	; 0x02
    1662:	ce 01       	movw	r24, r28
    1664:	8e 5a       	subi	r24, 0xAE	; 174
    1666:	9e 4f       	sbci	r25, 0xFE	; 254
    1668:	fc 01       	movw	r30, r24
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	fc 01       	movw	r30, r24
    1670:	22 81       	ldd	r18, Z+2	; 0x02
    1672:	ce 01       	movw	r24, r28
    1674:	8e 5a       	subi	r24, 0xAE	; 174
    1676:	9e 4f       	sbci	r25, 0xFE	; 254
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	fc 01       	movw	r30, r24
    1680:	21 83       	std	Z+1, r18	; 0x01
    1682:	ce 01       	movw	r24, r28
    1684:	8e 5a       	subi	r24, 0xAE	; 174
    1686:	9e 4f       	sbci	r25, 0xFE	; 254
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	fc 01       	movw	r30, r24
    1690:	21 81       	ldd	r18, Z+1	; 0x01
    1692:	ce 01       	movw	r24, r28
    1694:	8e 5a       	subi	r24, 0xAE	; 174
    1696:	9e 4f       	sbci	r25, 0xFE	; 254
    1698:	fc 01       	movw	r30, r24
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	fc 01       	movw	r30, r24
    16a0:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    16a2:	ce 01       	movw	r24, r28
    16a4:	8e 5a       	subi	r24, 0xAE	; 174
    16a6:	9e 4f       	sbci	r25, 0xFE	; 254
    16a8:	fc 01       	movw	r30, r24
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	fc 01       	movw	r30, r24
    16b0:	85 81       	ldd	r24, Z+5	; 0x05
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
  delay(1);
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    16c4:	ce 01       	movw	r24, r28
    16c6:	8e 5a       	subi	r24, 0xAE	; 174
    16c8:	9e 4f       	sbci	r25, 0xFE	; 254
    16ca:	fc 01       	movw	r30, r24
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	fc 01       	movw	r30, r24
    16d2:	85 81       	ldd	r24, Z+5	; 0x05
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
  digitalWrite(_pin, LOW);
    16da:	ce 01       	movw	r24, r28
    16dc:	8e 5a       	subi	r24, 0xAE	; 174
    16de:	9e 4f       	sbci	r25, 0xFE	; 254
    16e0:	fc 01       	movw	r30, r24
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	fc 01       	movw	r30, r24
    16e8:	85 81       	ldd	r24, Z+5	; 0x05
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
  switch (_type) {
    16f0:	ce 01       	movw	r24, r28
    16f2:	8e 5a       	subi	r24, 0xAE	; 174
    16f4:	9e 4f       	sbci	r25, 0xFE	; 254
    16f6:	fc 01       	movw	r30, r24
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	fc 01       	movw	r30, r24
    16fe:	86 81       	ldd	r24, Z+6	; 0x06
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	45 97       	sbiw	r24, 0x15	; 21
    1706:	02 97       	sbiw	r24, 0x02	; 2
    1708:	28 f4       	brcc	.+10     	; 0x1714 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    170a:	8c e4       	ldi	r24, 0x4C	; 76
    170c:	94 e0       	ldi	r25, 0x04	; 4
    170e:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <delayMicroseconds>
    break;
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    1714:	64 e1       	ldi	r22, 0x14	; 20
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
    break;
    1720:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    1722:	ce 01       	movw	r24, r28
    1724:	8e 5a       	subi	r24, 0xAE	; 174
    1726:	9e 4f       	sbci	r25, 0xFE	; 254
    1728:	fc 01       	movw	r30, r24
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	fc 01       	movw	r30, r24
    1730:	85 81       	ldd	r24, Z+5	; 0x05
    1732:	62 e0       	ldi	r22, 0x02	; 2
    1734:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    1738:	ce 01       	movw	r24, r28
    173a:	8e 5a       	subi	r24, 0xAE	; 174
    173c:	9e 4f       	sbci	r25, 0xFE	; 254
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	fc 01       	movw	r30, r24
    1746:	82 89       	ldd	r24, Z+18	; 0x12
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1750:	ce 01       	movw	r24, r28
    1752:	8f 5a       	subi	r24, 0xAF	; 175
    1754:	9e 4f       	sbci	r25, 0xFE	; 254
    1756:	2c dc       	rcall	.-1960   	; 0xfb0 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1758:	ce 01       	movw	r24, r28
    175a:	8e 5a       	subi	r24, 0xAE	; 174
    175c:	9e 4f       	sbci	r25, 0xFE	; 254
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	b7 d1       	rcall	.+878    	; 0x1ad6 <_ZN3DHT11expectPulseEb>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	8f 3f       	cpi	r24, 0xFF	; 255
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	af 4f       	sbci	r26, 0xFF	; 255
    1774:	bf 4f       	sbci	r27, 0xFF	; 255
    1776:	09 f0       	breq	.+2      	; 0x177a <_ZN3DHT4readEb+0x22c>
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	22 23       	and	r18, r18
    177c:	99 f0       	breq	.+38     	; 0x17a4 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    177e:	ce 01       	movw	r24, r28
    1780:	8e 5a       	subi	r24, 0xAE	; 174
    1782:	9e 4f       	sbci	r25, 0xFE	; 254
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	fc 01       	movw	r30, r24
    178c:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    178e:	ce 01       	movw	r24, r28
    1790:	8e 5a       	subi	r24, 0xAE	; 174
    1792:	9e 4f       	sbci	r25, 0xFE	; 254
    1794:	fc 01       	movw	r30, r24
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	fc 01       	movw	r30, r24
    179c:	f1 88       	ldd	r15, Z+17	; 0x11
    179e:	00 e0       	ldi	r16, 0x00	; 0
    17a0:	10 e0       	ldi	r17, 0x00	; 0
    17a2:	72 c0       	rjmp	.+228    	; 0x1888 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    17a4:	ce 01       	movw	r24, r28
    17a6:	8e 5a       	subi	r24, 0xAE	; 174
    17a8:	9e 4f       	sbci	r25, 0xFE	; 254
    17aa:	fc 01       	movw	r30, r24
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	91 d1       	rcall	.+802    	; 0x1ad6 <_ZN3DHT11expectPulseEb>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	8f 3f       	cpi	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	af 4f       	sbci	r26, 0xFF	; 255
    17c0:	bf 4f       	sbci	r27, 0xFF	; 255
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <_ZN3DHT4readEb+0x278>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	22 23       	and	r18, r18
    17c8:	99 f0       	breq	.+38     	; 0x17f0 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    17ca:	ce 01       	movw	r24, r28
    17cc:	8e 5a       	subi	r24, 0xAE	; 174
    17ce:	9e 4f       	sbci	r25, 0xFE	; 254
    17d0:	fc 01       	movw	r30, r24
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	fc 01       	movw	r30, r24
    17d8:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    17da:	ce 01       	movw	r24, r28
    17dc:	8e 5a       	subi	r24, 0xAE	; 174
    17de:	9e 4f       	sbci	r25, 0xFE	; 254
    17e0:	fc 01       	movw	r30, r24
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	fc 01       	movw	r30, r24
    17e8:	f1 88       	ldd	r15, Z+17	; 0x11
    17ea:	00 e0       	ldi	r16, 0x00	; 0
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	4c c0       	rjmp	.+152    	; 0x1888 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    17f0:	1a 82       	std	Y+2, r1	; 0x02
    17f2:	19 82       	std	Y+1, r1	; 0x01
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	80 35       	cpi	r24, 0x50	; 80
    17fa:	91 05       	cpc	r25, r1
    17fc:	0c f0       	brlt	.+2      	; 0x1800 <_ZN3DHT4readEb+0x2b2>
    17fe:	42 c0       	rjmp	.+132    	; 0x1884 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    1800:	ce 01       	movw	r24, r28
    1802:	8e 5a       	subi	r24, 0xAE	; 174
    1804:	9e 4f       	sbci	r25, 0xFE	; 254
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	63 d1       	rcall	.+710    	; 0x1ad6 <_ZN3DHT11expectPulseEb>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	29 81       	ldd	r18, Y+1	; 0x01
    1816:	3a 81       	ldd	r19, Y+2	; 0x02
    1818:	22 0f       	add	r18, r18
    181a:	33 1f       	adc	r19, r19
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	ae 01       	movw	r20, r28
    1822:	4f 5f       	subi	r20, 0xFF	; 255
    1824:	5f 4f       	sbci	r21, 0xFF	; 255
    1826:	24 0f       	add	r18, r20
    1828:	35 1f       	adc	r19, r21
    182a:	20 5f       	subi	r18, 0xF0	; 240
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	f9 01       	movw	r30, r18
    1830:	80 83       	st	Z, r24
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	a2 83       	std	Z+2, r26	; 0x02
    1836:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	8c 01       	movw	r16, r24
    183e:	0f 5f       	subi	r16, 0xFF	; 255
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	ce 01       	movw	r24, r28
    1844:	8e 5a       	subi	r24, 0xAE	; 174
    1846:	9e 4f       	sbci	r25, 0xFE	; 254
    1848:	fc 01       	movw	r30, r24
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	42 d1       	rcall	.+644    	; 0x1ad6 <_ZN3DHT11expectPulseEb>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	98 01       	movw	r18, r16
    1858:	22 0f       	add	r18, r18
    185a:	33 1f       	adc	r19, r19
    185c:	22 0f       	add	r18, r18
    185e:	33 1f       	adc	r19, r19
    1860:	ae 01       	movw	r20, r28
    1862:	4f 5f       	subi	r20, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	24 0f       	add	r18, r20
    1868:	35 1f       	adc	r19, r21
    186a:	20 5f       	subi	r18, 0xF0	; 240
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	f9 01       	movw	r30, r18
    1870:	80 83       	st	Z, r24
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	a2 83       	std	Z+2, r26	; 0x02
    1876:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	02 96       	adiw	r24, 0x02	; 2
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	b8 cf       	rjmp	.-144    	; 0x17f4 <_ZN3DHT4readEb+0x2a6>
    1884:	01 e0       	ldi	r16, 0x01	; 1
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	ce 01       	movw	r24, r28
    188a:	8f 5a       	subi	r24, 0xAF	; 175
    188c:	9e 4f       	sbci	r25, 0xFE	; 254
    188e:	9f db       	rcall	.-2242   	; 0xfce <_ZN13InterruptLockD1Ev>
    1890:	01 30       	cpi	r16, 0x01	; 1
    1892:	11 05       	cpc	r17, r1
    1894:	09 f0       	breq	.+2      	; 0x1898 <_ZN3DHT4readEb+0x34a>
    1896:	0d c1       	rjmp	.+538    	; 0x1ab2 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    1898:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    189a:	1c 82       	std	Y+4, r1	; 0x04
    189c:	1b 82       	std	Y+3, r1	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	88 97       	sbiw	r24, 0x28	; 40
    18a4:	0c f0       	brlt	.+2      	; 0x18a8 <_ZN3DHT4readEb+0x35a>
    18a6:	a7 c0       	rjmp	.+334    	; 0x19f6 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	9e 01       	movw	r18, r28
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	82 0f       	add	r24, r18
    18c0:	93 1f       	adc	r25, r19
    18c2:	40 96       	adiw	r24, 0x10	; 16
    18c4:	fc 01       	movw	r30, r24
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	a2 81       	ldd	r26, Z+2	; 0x02
    18cc:	b3 81       	ldd	r27, Z+3	; 0x03
    18ce:	89 87       	std	Y+9, r24	; 0x09
    18d0:	9a 87       	std	Y+10, r25	; 0x0a
    18d2:	ab 87       	std	Y+11, r26	; 0x0b
    18d4:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	9e 01       	movw	r18, r28
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	40 96       	adiw	r24, 0x10	; 16
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	a2 81       	ldd	r26, Z+2	; 0x02
    18fc:	b3 81       	ldd	r27, Z+3	; 0x03
    18fe:	8d 87       	std	Y+13, r24	; 0x0d
    1900:	9e 87       	std	Y+14, r25	; 0x0e
    1902:	af 87       	std	Y+15, r26	; 0x0f
    1904:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    1906:	89 85       	ldd	r24, Y+9	; 0x09
    1908:	9a 85       	ldd	r25, Y+10	; 0x0a
    190a:	ab 85       	ldd	r26, Y+11	; 0x0b
    190c:	bc 85       	ldd	r27, Y+12	; 0x0c
    190e:	8f 3f       	cpi	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	af 4f       	sbci	r26, 0xFF	; 255
    1914:	bf 4f       	sbci	r27, 0xFF	; 255
    1916:	49 f0       	breq	.+18     	; 0x192a <_ZN3DHT4readEb+0x3dc>
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	af 85       	ldd	r26, Y+15	; 0x0f
    191e:	b8 89       	ldd	r27, Y+16	; 0x10
    1920:	8f 3f       	cpi	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	af 4f       	sbci	r26, 0xFF	; 255
    1926:	bf 4f       	sbci	r27, 0xFF	; 255
    1928:	89 f4       	brne	.+34     	; 0x194c <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    192a:	ce 01       	movw	r24, r28
    192c:	8e 5a       	subi	r24, 0xAE	; 174
    192e:	9e 4f       	sbci	r25, 0xFE	; 254
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	fc 01       	movw	r30, r24
    1938:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    193a:	ce 01       	movw	r24, r28
    193c:	8e 5a       	subi	r24, 0xAE	; 174
    193e:	9e 4f       	sbci	r25, 0xFE	; 254
    1940:	fc 01       	movw	r30, r24
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	fc 01       	movw	r30, r24
    1948:	f1 88       	ldd	r15, Z+17	; 0x11
    194a:	b3 c0       	rjmp	.+358    	; 0x1ab2 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	99 23       	and	r25, r25
    1952:	0c f4       	brge	.+2      	; 0x1956 <_ZN3DHT4readEb+0x408>
    1954:	07 96       	adiw	r24, 0x07	; 7
    1956:	95 95       	asr	r25
    1958:	87 95       	ror	r24
    195a:	95 95       	asr	r25
    195c:	87 95       	ror	r24
    195e:	95 95       	asr	r25
    1960:	87 95       	ror	r24
    1962:	9e 01       	movw	r18, r28
    1964:	2e 5a       	subi	r18, 0xAE	; 174
    1966:	3e 4f       	sbci	r19, 0xFE	; 254
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	31 81       	ldd	r19, Z+1	; 0x01
    196e:	28 0f       	add	r18, r24
    1970:	39 1f       	adc	r19, r25
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	42 2f       	mov	r20, r18
    1978:	44 0f       	add	r20, r20
    197a:	9e 01       	movw	r18, r28
    197c:	2e 5a       	subi	r18, 0xAE	; 174
    197e:	3e 4f       	sbci	r19, 0xFE	; 254
    1980:	f9 01       	movw	r30, r18
    1982:	20 81       	ld	r18, Z
    1984:	31 81       	ldd	r19, Z+1	; 0x01
    1986:	82 0f       	add	r24, r18
    1988:	93 1f       	adc	r25, r19
    198a:	fc 01       	movw	r30, r24
    198c:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    198e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1990:	3e 85       	ldd	r19, Y+14	; 0x0e
    1992:	4f 85       	ldd	r20, Y+15	; 0x0f
    1994:	58 89       	ldd	r21, Y+16	; 0x10
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	ab 85       	ldd	r26, Y+11	; 0x0b
    199c:	bc 85       	ldd	r27, Y+12	; 0x0c
    199e:	82 17       	cp	r24, r18
    19a0:	93 07       	cpc	r25, r19
    19a2:	a4 07       	cpc	r26, r20
    19a4:	b5 07       	cpc	r27, r21
    19a6:	08 f5       	brcc	.+66     	; 0x19ea <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	99 23       	and	r25, r25
    19ae:	0c f4       	brge	.+2      	; 0x19b2 <_ZN3DHT4readEb+0x464>
    19b0:	07 96       	adiw	r24, 0x07	; 7
    19b2:	95 95       	asr	r25
    19b4:	87 95       	ror	r24
    19b6:	95 95       	asr	r25
    19b8:	87 95       	ror	r24
    19ba:	95 95       	asr	r25
    19bc:	87 95       	ror	r24
    19be:	9e 01       	movw	r18, r28
    19c0:	2e 5a       	subi	r18, 0xAE	; 174
    19c2:	3e 4f       	sbci	r19, 0xFE	; 254
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	31 81       	ldd	r19, Z+1	; 0x01
    19ca:	28 0f       	add	r18, r24
    19cc:	39 1f       	adc	r19, r25
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	42 2f       	mov	r20, r18
    19d4:	41 60       	ori	r20, 0x01	; 1
    19d6:	9e 01       	movw	r18, r28
    19d8:	2e 5a       	subi	r18, 0xAE	; 174
    19da:	3e 4f       	sbci	r19, 0xFE	; 254
    19dc:	f9 01       	movw	r30, r18
    19de:	20 81       	ld	r18, Z
    19e0:	31 81       	ldd	r19, Z+1	; 0x01
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	fc 01       	movw	r30, r24
    19e8:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	54 cf       	rjmp	.-344    	; 0x189e <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    19f6:	ce 01       	movw	r24, r28
    19f8:	8e 5a       	subi	r24, 0xAE	; 174
    19fa:	9e 4f       	sbci	r25, 0xFE	; 254
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	fc 01       	movw	r30, r24
    1a04:	84 81       	ldd	r24, Z+4	; 0x04
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	8e 5a       	subi	r24, 0xAE	; 174
    1a0e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	fc 01       	movw	r30, r24
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	8e 5a       	subi	r24, 0xAE	; 174
    1a22:	9e 4f       	sbci	r25, 0xFE	; 254
    1a24:	fc 01       	movw	r30, r24
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	81 81       	ldd	r24, Z+1	; 0x01
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	48 0f       	add	r20, r24
    1a34:	59 1f       	adc	r21, r25
    1a36:	ce 01       	movw	r24, r28
    1a38:	8e 5a       	subi	r24, 0xAE	; 174
    1a3a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	fc 01       	movw	r30, r24
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	48 0f       	add	r20, r24
    1a4c:	59 1f       	adc	r21, r25
    1a4e:	ce 01       	movw	r24, r28
    1a50:	8e 5a       	subi	r24, 0xAE	; 174
    1a52:	9e 4f       	sbci	r25, 0xFE	; 254
    1a54:	fc 01       	movw	r30, r24
    1a56:	80 81       	ld	r24, Z
    1a58:	91 81       	ldd	r25, Z+1	; 0x01
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	83 81       	ldd	r24, Z+3	; 0x03
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	84 0f       	add	r24, r20
    1a64:	95 1f       	adc	r25, r21
    1a66:	99 27       	eor	r25, r25
    1a68:	28 17       	cp	r18, r24
    1a6a:	39 07       	cpc	r19, r25
    1a6c:	91 f4       	brne	.+36     	; 0x1a92 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    1a6e:	ce 01       	movw	r24, r28
    1a70:	8e 5a       	subi	r24, 0xAE	; 174
    1a72:	9e 4f       	sbci	r25, 0xFE	; 254
    1a74:	fc 01       	movw	r30, r24
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	21 e0       	ldi	r18, 0x01	; 1
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    1a80:	ce 01       	movw	r24, r28
    1a82:	8e 5a       	subi	r24, 0xAE	; 174
    1a84:	9e 4f       	sbci	r25, 0xFE	; 254
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	f1 88       	ldd	r15, Z+17	; 0x11
    1a90:	10 c0       	rjmp	.+32     	; 0x1ab2 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    1a92:	ce 01       	movw	r24, r28
    1a94:	8e 5a       	subi	r24, 0xAE	; 174
    1a96:	9e 4f       	sbci	r25, 0xFE	; 254
    1a98:	fc 01       	movw	r30, r24
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	8e 5a       	subi	r24, 0xAE	; 174
    1aa6:	9e 4f       	sbci	r25, 0xFE	; 254
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	fc 01       	movw	r30, r24
    1ab0:	f1 88       	ldd	r15, Z+17	; 0x11
    1ab2:	8f 2d       	mov	r24, r15
  }
}
    1ab4:	cc 5a       	subi	r28, 0xAC	; 172
    1ab6:	de 4f       	sbci	r29, 0xFE	; 254
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	08 95       	ret

00001ad6 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	2a 97       	sbiw	r28, 0x0a	; 10
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	99 87       	std	Y+9, r25	; 0x09
    1aec:	88 87       	std	Y+8, r24	; 0x08
    1aee:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af6:	88 23       	and	r24, r24
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <_ZN3DHT11expectPulseEb+0x2e>
    1afa:	88 85       	ldd	r24, Y+8	; 0x08
    1afc:	99 85       	ldd	r25, Y+9	; 0x09
    1afe:	fc 01       	movw	r30, r24
    1b00:	87 81       	ldd	r24, Z+7	; 0x07
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <_ZN3DHT11expectPulseEb+0x30>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    1b08:	88 85       	ldd	r24, Y+8	; 0x08
    1b0a:	99 85       	ldd	r25, Y+9	; 0x09
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 85       	ldd	r24, Z+8	; 0x08
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	86 52       	subi	r24, 0x26	; 38
    1b1a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b1c:	9d 83       	std	Y+5, r25	; 0x05
    1b1e:	8c 83       	std	Y+4, r24	; 0x04
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	fc 01       	movw	r30, r24
    1b26:	25 91       	lpm	r18, Z+
    1b28:	34 91       	lpm	r19, Z
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	3f 83       	std	Y+7, r19	; 0x07
    1b2e:	2e 83       	std	Y+6, r18	; 0x06
    1b30:	9d 83       	std	Y+5, r25	; 0x05
    1b32:	8c 83       	std	Y+4, r24	; 0x04
    1b34:	8e 81       	ldd	r24, Y+6	; 0x06
    1b36:	9f 81       	ldd	r25, Y+7	; 0x07
    1b38:	fc 01       	movw	r30, r24
    1b3a:	20 81       	ld	r18, Z
    1b3c:	88 85       	ldd	r24, Y+8	; 0x08
    1b3e:	99 85       	ldd	r25, Y+9	; 0x09
    1b40:	fc 01       	movw	r30, r24
    1b42:	87 81       	ldd	r24, Z+7	; 0x07
    1b44:	28 23       	and	r18, r24
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	29 17       	cp	r18, r25
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <_ZN3DHT11expectPulseEb+0x7a>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	88 23       	and	r24, r24
    1b52:	f9 f0       	breq	.+62     	; 0x1b92 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	9c 01       	movw	r18, r24
    1b5a:	2f 5f       	subi	r18, 0xFF	; 255
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	3a 83       	std	Y+2, r19	; 0x02
    1b60:	29 83       	std	Y+1, r18	; 0x01
    1b62:	9c 01       	movw	r18, r24
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	88 85       	ldd	r24, Y+8	; 0x08
    1b6a:	99 85       	ldd	r25, Y+9	; 0x09
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	85 85       	ldd	r24, Z+13	; 0x0d
    1b70:	96 85       	ldd	r25, Z+14	; 0x0e
    1b72:	a7 85       	ldd	r26, Z+15	; 0x0f
    1b74:	b0 89       	ldd	r27, Z+16	; 0x10
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	28 17       	cp	r18, r24
    1b7a:	39 07       	cpc	r19, r25
    1b7c:	4a 07       	cpc	r20, r26
    1b7e:	5b 07       	cpc	r21, r27
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <_ZN3DHT11expectPulseEb+0xae>
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	66 23       	and	r22, r22
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <_ZN3DHT11expectPulseEb+0xb4>
    1b88:	bf cf       	rjmp	.-130    	; 0x1b08 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	dc 01       	movw	r26, r24
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	cc 01       	movw	r24, r24
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
}
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	2a 96       	adiw	r28, 0x0a	; 10
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <_ZN15Adafruit_SensorC1Ev>:
public:
  // Constructor(s)
  Adafruit_Sensor() {}
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	1f 92       	push	r1
    1bb8:	1f 92       	push	r1
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	26 e7       	ldi	r18, 0x76	; 118
    1bc4:	32 e0       	ldi	r19, 0x02	; 2
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	fc 01       	movw	r30, r24
    1bcc:	31 83       	std	Z+1, r19	; 0x01
    1bce:	20 83       	st	Z, r18
    1bd0:	00 00       	nop
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <_ZN11DHT_UnifiedC1Ehhhll>:
 *  @param  tempSensorId
 *          temperature sensor id
 *  @param  humiditySensorId
 *          humidity sensor id
 */
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count,
    1bdc:	af 92       	push	r10
    1bde:	bf 92       	push	r11
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	2d 97       	sbiw	r28, 0x0d	; 13
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	6b 83       	std	Y+3, r22	; 0x03
    1c06:	4c 83       	std	Y+4, r20	; 0x04
    1c08:	2d 83       	std	Y+5, r18	; 0x05
    1c0a:	ee 82       	std	Y+6, r14	; 0x06
    1c0c:	ff 82       	std	Y+7, r15	; 0x07
    1c0e:	08 87       	std	Y+8, r16	; 0x08
    1c10:	19 87       	std	Y+9, r17	; 0x09
    1c12:	aa 86       	std	Y+10, r10	; 0x0a
    1c14:	bb 86       	std	Y+11, r11	; 0x0b
    1c16:	cc 86       	std	Y+12, r12	; 0x0c
    1c18:	dd 86       	std	Y+13, r13	; 0x0d
                         int32_t tempSensorId, int32_t humiditySensorId)
    : _dht(pin, type, count), _type(type), _temp(this, tempSensorId),
      _humidity(this, humiditySensorId) {}
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c20:	4c 81       	ldd	r20, Y+4	; 0x04
    1c22:	6b 81       	ldd	r22, Y+3	; 0x03
    1c24:	e3 d9       	rcall	.-3130   	; 0xfec <_ZN3DHTC1Ehhh>
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	23 8b       	std	Z+19, r18	; 0x13
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	fc 01       	movw	r30, r24
    1c36:	74 96       	adiw	r30, 0x14	; 20
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3c:	a8 85       	ldd	r26, Y+8	; 0x08
    1c3e:	b9 85       	ldd	r27, Y+9	; 0x09
    1c40:	69 81       	ldd	r22, Y+1	; 0x01
    1c42:	7a 81       	ldd	r23, Y+2	; 0x02
    1c44:	9c 01       	movw	r18, r24
    1c46:	ad 01       	movw	r20, r26
    1c48:	cf 01       	movw	r24, r30
    1c4a:	f6 d0       	rcall	.+492    	; 0x1e38 <_ZN11DHT_Unified11TemperatureC1EPS_l>
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	fc 01       	movw	r30, r24
    1c52:	7d 96       	adiw	r30, 0x1d	; 29
    1c54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c58:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c5a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c5c:	69 81       	ldd	r22, Y+1	; 0x01
    1c5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c60:	9c 01       	movw	r18, r24
    1c62:	ad 01       	movw	r20, r26
    1c64:	cf 01       	movw	r24, r30
    1c66:	7e d2       	rcall	.+1276   	; 0x2164 <_ZN11DHT_Unified8HumidityC1EPS_l>
    1c68:	00 00       	nop
    1c6a:	2d 96       	adiw	r28, 0x0d	; 13
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	bf 90       	pop	r11
    1c88:	af 90       	pop	r10
    1c8a:	08 95       	ret

00001c8c <_ZN11DHT_Unified5beginEv>:

/*!
 *  @brief  Setup sensor (calls begin on It)
 */
void DHT_Unified::begin() { _dht.begin(); }
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	1f 92       	push	r1
    1c92:	1f 92       	push	r1
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	67 e3       	ldi	r22, 0x37	; 55
    1ca2:	f4 d9       	rcall	.-3096   	; 0x108c <_ZN3DHT5beginEh>
    1ca4:	00 00       	nop
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <_ZN11DHT_Unified7setNameEP8sensor_t>:
/*!
 *  @brief  Sets sensor name
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setName(sensor_t *sensor) {
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <_ZN11DHT_Unified7setNameEP8sensor_t+0x6>
    1cb6:	1f 92       	push	r1
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	7c 83       	std	Y+4, r23	; 0x04
    1cc2:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	fc 01       	movw	r30, r24
    1cca:	83 89       	ldd	r24, Z+19	; 0x13
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	8c 30       	cpi	r24, 0x0C	; 12
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	b1 f0       	breq	.+44     	; 0x1d02 <_ZN11DHT_Unified7setNameEP8sensor_t+0x52>
    1cd6:	8d 30       	cpi	r24, 0x0D	; 13
    1cd8:	91 05       	cpc	r25, r1
    1cda:	1c f4       	brge	.+6      	; 0x1ce2 <_ZN11DHT_Unified7setNameEP8sensor_t+0x32>
    1cdc:	0b 97       	sbiw	r24, 0x0b	; 11
    1cde:	39 f0       	breq	.+14     	; 0x1cee <_ZN11DHT_Unified7setNameEP8sensor_t+0x3e>
    1ce0:	2e c0       	rjmp	.+92     	; 0x1d3e <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
    1ce2:	85 31       	cpi	r24, 0x15	; 21
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	b9 f0       	breq	.+46     	; 0x1d16 <_ZN11DHT_Unified7setNameEP8sensor_t+0x66>
    1ce8:	46 97       	sbiw	r24, 0x16	; 22
    1cea:	f9 f0       	breq	.+62     	; 0x1d2a <_ZN11DHT_Unified7setNameEP8sensor_t+0x7a>
    1cec:	28 c0       	rjmp	.+80     	; 0x1d3e <_ZN11DHT_Unified7setNameEP8sensor_t+0x8e>
  case DHT11:
    strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    1cee:	2b e0       	ldi	r18, 0x0B	; 11
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	65 e5       	ldi	r22, 0x55	; 85
    1cfa:	72 e0       	ldi	r23, 0x02	; 2
    1cfc:	0e 94 82 33 	call	0x6704	; 0x6704 <strncpy>
    break;
    1d00:	28 c0       	rjmp	.+80     	; 0x1d52 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT12:
    strncpy(sensor->name, "DHT12", sizeof(sensor->name) - 1);
    1d02:	2b e0       	ldi	r18, 0x0B	; 11
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	a9 01       	movw	r20, r18
    1d0c:	6b e5       	ldi	r22, 0x5B	; 91
    1d0e:	72 e0       	ldi	r23, 0x02	; 2
    1d10:	0e 94 82 33 	call	0x6704	; 0x6704 <strncpy>
    break;
    1d14:	1e c0       	rjmp	.+60     	; 0x1d52 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT21:
    strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    1d16:	2b e0       	ldi	r18, 0x0B	; 11
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	a9 01       	movw	r20, r18
    1d20:	61 e6       	ldi	r22, 0x61	; 97
    1d22:	72 e0       	ldi	r23, 0x02	; 2
    1d24:	0e 94 82 33 	call	0x6704	; 0x6704 <strncpy>
    break;
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  case DHT22:
    strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    1d2a:	2b e0       	ldi	r18, 0x0B	; 11
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	a9 01       	movw	r20, r18
    1d34:	67 e6       	ldi	r22, 0x67	; 103
    1d36:	72 e0       	ldi	r23, 0x02	; 2
    1d38:	0e 94 82 33 	call	0x6704	; 0x6704 <strncpy>
    break;
    1d3c:	0a c0       	rjmp	.+20     	; 0x1d52 <_ZN11DHT_Unified7setNameEP8sensor_t+0xa2>
  default:
    // TODO: Perhaps this should be an error?  However main DHT library doesn't
    // enforce restrictions on the sensor type value.  Pick a generic name for
    // now.
    strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    1d3e:	2b e0       	ldi	r18, 0x0B	; 11
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	a9 01       	movw	r20, r18
    1d48:	6d e6       	ldi	r22, 0x6D	; 109
    1d4a:	72 e0       	ldi	r23, 0x02	; 2
    1d4c:	0e 94 82 33 	call	0x6704	; 0x6704 <strncpy>
    break;
    1d50:	00 00       	nop
  }
  sensor->name[sizeof(sensor->name) - 1] = 0;
    1d52:	8b e0       	ldi	r24, 0x0B	; 11
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	82 0f       	add	r24, r18
    1d5c:	93 1f       	adc	r25, r19
    1d5e:	fc 01       	movw	r30, r24
    1d60:	10 82       	st	Z, r1
}
    1d62:	00 00       	nop
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	08 95       	ret

00001d72 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
/*!
 *  @brief  Sets Minimum Delay Value
 *  @param  sensor
 *          Sensor that will be set
 */
void DHT_Unified::setMinDelay(sensor_t *sensor) {
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6>
    1d78:	1f 92       	push	r1
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	7c 83       	std	Y+4, r23	; 0x04
    1d84:	6b 83       	std	Y+3, r22	; 0x03
  switch (_type) {
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	83 89       	ldd	r24, Z+19	; 0x13
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	8c 30       	cpi	r24, 0x0C	; 12
    1d94:	91 05       	cpc	r25, r1
    1d96:	c1 f0       	breq	.+48     	; 0x1dc8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x56>
    1d98:	8d 30       	cpi	r24, 0x0D	; 13
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	1c f4       	brge	.+6      	; 0x1da4 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x32>
    1d9e:	0b 97       	sbiw	r24, 0x0b	; 11
    1da0:	39 f0       	breq	.+14     	; 0x1db0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x3e>
    1da2:	36 c0       	rjmp	.+108    	; 0x1e10 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
    1da4:	85 31       	cpi	r24, 0x15	; 21
    1da6:	91 05       	cpc	r25, r1
    1da8:	d9 f0       	breq	.+54     	; 0x1de0 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x6e>
    1daa:	46 97       	sbiw	r24, 0x16	; 22
    1dac:	29 f1       	breq	.+74     	; 0x1df8 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x86>
    1dae:	30 c0       	rjmp	.+96     	; 0x1e10 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x9e>
  case DHT11:
    sensor->min_delay = 1000000L; // 1 second (in microseconds)
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	80 e4       	ldi	r24, 0x40	; 64
    1db6:	92 e4       	ldi	r25, 0x42	; 66
    1db8:	af e0       	ldi	r26, 0x0F	; 15
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	84 a3       	std	Z+36, r24	; 0x24
    1dc0:	95 a3       	std	Z+37, r25	; 0x25
    1dc2:	a6 a3       	std	Z+38, r26	; 0x26
    1dc4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1dc6:	30 c0       	rjmp	.+96     	; 0x1e28 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT12:
    sensor->min_delay = 2000000L; // 2 second (in microseconds)
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	80 e8       	ldi	r24, 0x80	; 128
    1dce:	94 e8       	ldi	r25, 0x84	; 132
    1dd0:	ae e1       	ldi	r26, 0x1E	; 30
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	84 a3       	std	Z+36, r24	; 0x24
    1dd8:	95 a3       	std	Z+37, r25	; 0x25
    1dda:	a6 a3       	std	Z+38, r26	; 0x26
    1ddc:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1dde:	24 c0       	rjmp	.+72     	; 0x1e28 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT21:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	80 e8       	ldi	r24, 0x80	; 128
    1de6:	94 e8       	ldi	r25, 0x84	; 132
    1de8:	ae e1       	ldi	r26, 0x1E	; 30
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	f9 01       	movw	r30, r18
    1dee:	84 a3       	std	Z+36, r24	; 0x24
    1df0:	95 a3       	std	Z+37, r25	; 0x25
    1df2:	a6 a3       	std	Z+38, r26	; 0x26
    1df4:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1df6:	18 c0       	rjmp	.+48     	; 0x1e28 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  case DHT22:
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1df8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfc:	80 e8       	ldi	r24, 0x80	; 128
    1dfe:	94 e8       	ldi	r25, 0x84	; 132
    1e00:	ae e1       	ldi	r26, 0x1E	; 30
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	f9 01       	movw	r30, r18
    1e06:	84 a3       	std	Z+36, r24	; 0x24
    1e08:	95 a3       	std	Z+37, r25	; 0x25
    1e0a:	a6 a3       	std	Z+38, r26	; 0x26
    1e0c:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e0e:	0c c0       	rjmp	.+24     	; 0x1e28 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0xb6>
  default:
    // Default to slowest sample rate in case of unknown type.
    sensor->min_delay = 2000000L; // 2 seconds (in microseconds)
    1e10:	2b 81       	ldd	r18, Y+3	; 0x03
    1e12:	3c 81       	ldd	r19, Y+4	; 0x04
    1e14:	80 e8       	ldi	r24, 0x80	; 128
    1e16:	94 e8       	ldi	r25, 0x84	; 132
    1e18:	ae e1       	ldi	r26, 0x1E	; 30
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	84 a3       	std	Z+36, r24	; 0x24
    1e20:	95 a3       	std	Z+37, r25	; 0x25
    1e22:	a6 a3       	std	Z+38, r26	; 0x26
    1e24:	b7 a3       	std	Z+39, r27	; 0x27
    break;
    1e26:	00 00       	nop
  }
}
    1e28:	00 00       	nop
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <_ZN11DHT_Unified11TemperatureC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Temperature::Temperature(DHT_Unified *parent, int32_t id)
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	28 97       	sbiw	r28, 0x08	; 8
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	7c 83       	std	Y+4, r23	; 0x04
    1e52:	6b 83       	std	Y+3, r22	; 0x03
    1e54:	2d 83       	std	Y+5, r18	; 0x05
    1e56:	3e 83       	std	Y+6, r19	; 0x06
    1e58:	4f 83       	std	Y+7, r20	; 0x07
    1e5a:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	a8 de       	rcall	.-688    	; 0x1bb2 <_ZN15Adafruit_SensorC1Ev>
    1e62:	22 e9       	ldi	r18, 0x92	; 146
    1e64:	32 e0       	ldi	r19, 0x02	; 2
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	31 83       	std	Z+1, r19	; 0x01
    1e6e:	20 83       	st	Z, r18
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	2b 81       	ldd	r18, Y+3	; 0x03
    1e76:	3c 81       	ldd	r19, Y+4	; 0x04
    1e78:	fc 01       	movw	r30, r24
    1e7a:	34 83       	std	Z+4, r19	; 0x04
    1e7c:	23 83       	std	Z+3, r18	; 0x03
    1e7e:	29 81       	ldd	r18, Y+1	; 0x01
    1e80:	3a 81       	ldd	r19, Y+2	; 0x02
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	af 81       	ldd	r26, Y+7	; 0x07
    1e88:	b8 85       	ldd	r27, Y+8	; 0x08
    1e8a:	f9 01       	movw	r30, r18
    1e8c:	85 83       	std	Z+5, r24	; 0x05
    1e8e:	96 83       	std	Z+6, r25	; 0x06
    1e90:	a7 83       	std	Z+7, r26	; 0x07
    1e92:	b0 87       	std	Z+8, r27	; 0x08
    1e94:	00 00       	nop
    1e96:	28 96       	adiw	r28, 0x08	; 8
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Temperature::getEvent(sensors_event_t *event) {
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t+0x6>
    1eae:	1f 92       	push	r1
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	7c 83       	std	Y+4, r23	; 0x04
    1eba:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	44 e2       	ldi	r20, 0x24	; 36
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	0e 94 62 33 	call	0x66c4	; 0x66c4 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    1ecc:	84 e2       	ldi	r24, 0x24	; 36
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	f9 01       	movw	r30, r18
    1eda:	80 83       	st	Z, r24
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	a2 83       	std	Z+2, r26	; 0x02
    1ee0:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	85 81       	ldd	r24, Z+5	; 0x05
    1eea:	96 81       	ldd	r25, Z+6	; 0x06
    1eec:	a7 81       	ldd	r26, Z+7	; 0x07
    1eee:	b0 85       	ldd	r27, Z+8	; 0x08
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	84 83       	std	Z+4, r24	; 0x04
    1ef8:	95 83       	std	Z+5, r25	; 0x05
    1efa:	a6 83       	std	Z+6, r26	; 0x06
    1efc:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1efe:	2b 81       	ldd	r18, Y+3	; 0x03
    1f00:	3c 81       	ldd	r19, Y+4	; 0x04
    1f02:	8d e0       	ldi	r24, 0x0D	; 13
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	80 87       	std	Z+8, r24	; 0x08
    1f0e:	91 87       	std	Z+9, r25	; 0x09
    1f10:	a2 87       	std	Z+10, r26	; 0x0a
    1f12:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1f14:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <millis>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f20:	f9 01       	movw	r30, r18
    1f22:	80 8b       	std	Z+16, r24	; 0x10
    1f24:	91 8b       	std	Z+17, r25	; 0x11
    1f26:	a2 8b       	std	Z+18, r26	; 0x12
    1f28:	b3 8b       	std	Z+19, r27	; 0x13
  event->temperature = _parent->_dht.readTemperature();
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	fc 01       	movw	r30, r24
    1f30:	83 81       	ldd	r24, Z+3	; 0x03
    1f32:	94 81       	ldd	r25, Z+4	; 0x04
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	d3 d8       	rcall	.-3674   	; 0x10e0 <_ZN3DHT15readTemperatureEbb>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f40:	3c 81       	ldd	r19, Y+4	; 0x04
    1f42:	f9 01       	movw	r30, r18
    1f44:	84 8b       	std	Z+20, r24	; 0x14
    1f46:	95 8b       	std	Z+21, r25	; 0x15
    1f48:	a6 8b       	std	Z+22, r26	; 0x16
    1f4a:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Temperature::getSensor(sensor_t *sensor) {
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6>
    1f62:	1f 92       	push	r1
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	7c 83       	std	Y+4, r23	; 0x04
    1f6e:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	48 e2       	ldi	r20, 0x28	; 40
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	0e 94 62 33 	call	0x66c4	; 0x66c4 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	fc 01       	movw	r30, r24
    1f86:	83 81       	ldd	r24, Z+3	; 0x03
    1f88:	94 81       	ldd	r25, Z+4	; 0x04
    1f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8e:	b9 01       	movw	r22, r18
    1f90:	8f de       	rcall	.-738    	; 0x1cb0 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	f9 01       	movw	r30, r18
    1fa0:	84 87       	std	Z+12, r24	; 0x0c
    1fa2:	95 87       	std	Z+13, r25	; 0x0d
    1fa4:	a6 87       	std	Z+14, r26	; 0x0e
    1fa6:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	fc 01       	movw	r30, r24
    1fae:	85 81       	ldd	r24, Z+5	; 0x05
    1fb0:	96 81       	ldd	r25, Z+6	; 0x06
    1fb2:	a7 81       	ldd	r26, Z+7	; 0x07
    1fb4:	b0 85       	ldd	r27, Z+8	; 0x08
    1fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fba:	f9 01       	movw	r30, r18
    1fbc:	80 8b       	std	Z+16, r24	; 0x10
    1fbe:	91 8b       	std	Z+17, r25	; 0x11
    1fc0:	a2 8b       	std	Z+18, r26	; 0x12
    1fc2:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	8d e0       	ldi	r24, 0x0D	; 13
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	84 8b       	std	Z+20, r24	; 0x14
    1fd4:	95 8b       	std	Z+21, r25	; 0x15
    1fd6:	a6 8b       	std	Z+22, r26	; 0x16
    1fd8:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	fc 01       	movw	r30, r24
    1fe0:	83 81       	ldd	r24, Z+3	; 0x03
    1fe2:	94 81       	ldd	r25, Z+4	; 0x04
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	b9 01       	movw	r22, r18
    1fea:	c3 de       	rcall	.-634    	; 0x1d72 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	83 81       	ldd	r24, Z+3	; 0x03
    1ff4:	94 81       	ldd	r25, Z+4	; 0x04
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	83 89       	ldd	r24, Z+19	; 0x13
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	8c 30       	cpi	r24, 0x0C	; 12
    2000:	91 05       	cpc	r25, r1
    2002:	61 f1       	breq	.+88     	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    2004:	8d 30       	cpi	r24, 0x0D	; 13
    2006:	91 05       	cpc	r25, r1
    2008:	1c f4       	brge	.+6      	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    200a:	0b 97       	sbiw	r24, 0x0b	; 11
    200c:	49 f0       	breq	.+18     	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    200e:	8c c0       	rjmp	.+280    	; 0x2128 <__DATA_REGION_LENGTH__+0x128>
    2010:	85 31       	cpi	r24, 0x15	; 21
    2012:	91 05       	cpc	r25, r1
    2014:	09 f4       	brne	.+2      	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    2016:	44 c0       	rjmp	.+136    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
    2018:	46 97       	sbiw	r24, 0x16	; 22
    201a:	09 f4       	brne	.+2      	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    201c:	63 c0       	rjmp	.+198    	; 0x20e4 <__DATA_REGION_LENGTH__+0xe4>
    201e:	84 c0       	rjmp	.+264    	; 0x2128 <__DATA_REGION_LENGTH__+0x128>
  case DHT11:
    sensor->max_value = 50.0F;
    2020:	2b 81       	ldd	r18, Y+3	; 0x03
    2022:	3c 81       	ldd	r19, Y+4	; 0x04
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a8 e4       	ldi	r26, 0x48	; 72
    202a:	b2 e4       	ldi	r27, 0x42	; 66
    202c:	f9 01       	movw	r30, r18
    202e:	80 8f       	std	Z+24, r24	; 0x18
    2030:	91 8f       	std	Z+25, r25	; 0x19
    2032:	a2 8f       	std	Z+26, r26	; 0x1a
    2034:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	fc 01       	movw	r30, r24
    203c:	14 8e       	std	Z+28, r1	; 0x1c
    203e:	15 8e       	std	Z+29, r1	; 0x1d
    2040:	16 8e       	std	Z+30, r1	; 0x1e
    2042:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 2.0F;
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e4       	ldi	r27, 0x40	; 64
    2050:	f9 01       	movw	r30, r18
    2052:	80 a3       	std	Z+32, r24	; 0x20
    2054:	91 a3       	std	Z+33, r25	; 0x21
    2056:	a2 a3       	std	Z+34, r26	; 0x22
    2058:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    205a:	7c c0       	rjmp	.+248    	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
  case DHT12:
    sensor->max_value = 60.0F;
    205c:	2b 81       	ldd	r18, Y+3	; 0x03
    205e:	3c 81       	ldd	r19, Y+4	; 0x04
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e7       	ldi	r26, 0x70	; 112
    2066:	b2 e4       	ldi	r27, 0x42	; 66
    2068:	f9 01       	movw	r30, r18
    206a:	80 8f       	std	Z+24, r24	; 0x18
    206c:	91 8f       	std	Z+25, r25	; 0x19
    206e:	a2 8f       	std	Z+26, r26	; 0x1a
    2070:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -20.0F;
    2072:	2b 81       	ldd	r18, Y+3	; 0x03
    2074:	3c 81       	ldd	r19, Y+4	; 0x04
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 ea       	ldi	r26, 0xA0	; 160
    207c:	b1 ec       	ldi	r27, 0xC1	; 193
    207e:	f9 01       	movw	r30, r18
    2080:	84 8f       	std	Z+28, r24	; 0x1c
    2082:	95 8f       	std	Z+29, r25	; 0x1d
    2084:	a6 8f       	std	Z+30, r26	; 0x1e
    2086:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.5F;
    2088:	2b 81       	ldd	r18, Y+3	; 0x03
    208a:	3c 81       	ldd	r19, Y+4	; 0x04
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e0       	ldi	r26, 0x00	; 0
    2092:	bf e3       	ldi	r27, 0x3F	; 63
    2094:	f9 01       	movw	r30, r18
    2096:	80 a3       	std	Z+32, r24	; 0x20
    2098:	91 a3       	std	Z+33, r25	; 0x21
    209a:	a2 a3       	std	Z+34, r26	; 0x22
    209c:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    209e:	5a c0       	rjmp	.+180    	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
  case DHT21:
    sensor->max_value = 80.0F;
    20a0:	2b 81       	ldd	r18, Y+3	; 0x03
    20a2:	3c 81       	ldd	r19, Y+4	; 0x04
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 ea       	ldi	r26, 0xA0	; 160
    20aa:	b2 e4       	ldi	r27, 0x42	; 66
    20ac:	f9 01       	movw	r30, r18
    20ae:	80 8f       	std	Z+24, r24	; 0x18
    20b0:	91 8f       	std	Z+25, r25	; 0x19
    20b2:	a2 8f       	std	Z+26, r26	; 0x1a
    20b4:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    20b6:	2b 81       	ldd	r18, Y+3	; 0x03
    20b8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e2       	ldi	r26, 0x20	; 32
    20c0:	b2 ec       	ldi	r27, 0xC2	; 194
    20c2:	f9 01       	movw	r30, r18
    20c4:	84 8f       	std	Z+28, r24	; 0x1c
    20c6:	95 8f       	std	Z+29, r25	; 0x1d
    20c8:	a6 8f       	std	Z+30, r26	; 0x1e
    20ca:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    20cc:	2b 81       	ldd	r18, Y+3	; 0x03
    20ce:	3c 81       	ldd	r19, Y+4	; 0x04
    20d0:	8d ec       	ldi	r24, 0xCD	; 205
    20d2:	9c ec       	ldi	r25, 0xCC	; 204
    20d4:	ac ec       	ldi	r26, 0xCC	; 204
    20d6:	bd e3       	ldi	r27, 0x3D	; 61
    20d8:	f9 01       	movw	r30, r18
    20da:	80 a3       	std	Z+32, r24	; 0x20
    20dc:	91 a3       	std	Z+33, r25	; 0x21
    20de:	a2 a3       	std	Z+34, r26	; 0x22
    20e0:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    20e2:	38 c0       	rjmp	.+112    	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
  case DHT22:
    sensor->max_value = 125.0F;
    20e4:	2b 81       	ldd	r18, Y+3	; 0x03
    20e6:	3c 81       	ldd	r19, Y+4	; 0x04
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	aa ef       	ldi	r26, 0xFA	; 250
    20ee:	b2 e4       	ldi	r27, 0x42	; 66
    20f0:	f9 01       	movw	r30, r18
    20f2:	80 8f       	std	Z+24, r24	; 0x18
    20f4:	91 8f       	std	Z+25, r25	; 0x19
    20f6:	a2 8f       	std	Z+26, r26	; 0x1a
    20f8:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = -40.0F;
    20fa:	2b 81       	ldd	r18, Y+3	; 0x03
    20fc:	3c 81       	ldd	r19, Y+4	; 0x04
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e2       	ldi	r26, 0x20	; 32
    2104:	b2 ec       	ldi	r27, 0xC2	; 194
    2106:	f9 01       	movw	r30, r18
    2108:	84 8f       	std	Z+28, r24	; 0x1c
    210a:	95 8f       	std	Z+29, r25	; 0x1d
    210c:	a6 8f       	std	Z+30, r26	; 0x1e
    210e:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 0.1F;
    2110:	2b 81       	ldd	r18, Y+3	; 0x03
    2112:	3c 81       	ldd	r19, Y+4	; 0x04
    2114:	8d ec       	ldi	r24, 0xCD	; 205
    2116:	9c ec       	ldi	r25, 0xCC	; 204
    2118:	ac ec       	ldi	r26, 0xCC	; 204
    211a:	bd e3       	ldi	r27, 0x3D	; 61
    211c:	f9 01       	movw	r30, r18
    211e:	80 a3       	std	Z+32, r24	; 0x20
    2120:	91 a3       	std	Z+33, r25	; 0x21
    2122:	a2 a3       	std	Z+34, r26	; 0x22
    2124:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2126:	16 c0       	rjmp	.+44     	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	fc 01       	movw	r30, r24
    212e:	10 8e       	std	Z+24, r1	; 0x18
    2130:	11 8e       	std	Z+25, r1	; 0x19
    2132:	12 8e       	std	Z+26, r1	; 0x1a
    2134:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	fc 01       	movw	r30, r24
    213c:	14 8e       	std	Z+28, r1	; 0x1c
    213e:	15 8e       	std	Z+29, r1	; 0x1d
    2140:	16 8e       	std	Z+30, r1	; 0x1e
    2142:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	fc 01       	movw	r30, r24
    214a:	10 a2       	std	Z+32, r1	; 0x20
    214c:	11 a2       	std	Z+33, r1	; 0x21
    214e:	12 a2       	std	Z+34, r1	; 0x22
    2150:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2152:	00 00       	nop
  }
}
    2154:	00 00       	nop
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	08 95       	ret

00002164 <_ZN11DHT_Unified8HumidityC1EPS_l>:
 *  @param  parent
 *          Parent Sensor
 *  @param  id
 *          Sensor id
 */
DHT_Unified::Humidity::Humidity(DHT_Unified *parent, int32_t id)
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	28 97       	sbiw	r28, 0x08	; 8
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	7c 83       	std	Y+4, r23	; 0x04
    217e:	6b 83       	std	Y+3, r22	; 0x03
    2180:	2d 83       	std	Y+5, r18	; 0x05
    2182:	3e 83       	std	Y+6, r19	; 0x06
    2184:	4f 83       	std	Y+7, r20	; 0x07
    2186:	58 87       	std	Y+8, r21	; 0x08
    : _parent(parent), _id(id) {}
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	12 dd       	rcall	.-1500   	; 0x1bb2 <_ZN15Adafruit_SensorC1Ev>
    218e:	24 e8       	ldi	r18, 0x84	; 132
    2190:	32 e0       	ldi	r19, 0x02	; 2
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	fc 01       	movw	r30, r24
    2198:	31 83       	std	Z+1, r19	; 0x01
    219a:	20 83       	st	Z, r18
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	2b 81       	ldd	r18, Y+3	; 0x03
    21a2:	3c 81       	ldd	r19, Y+4	; 0x04
    21a4:	fc 01       	movw	r30, r24
    21a6:	34 83       	std	Z+4, r19	; 0x04
    21a8:	23 83       	std	Z+3, r18	; 0x03
    21aa:	29 81       	ldd	r18, Y+1	; 0x01
    21ac:	3a 81       	ldd	r19, Y+2	; 0x02
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	af 81       	ldd	r26, Y+7	; 0x07
    21b4:	b8 85       	ldd	r27, Y+8	; 0x08
    21b6:	f9 01       	movw	r30, r18
    21b8:	85 83       	std	Z+5, r24	; 0x05
    21ba:	96 83       	std	Z+6, r25	; 0x06
    21bc:	a7 83       	std	Z+7, r26	; 0x07
    21be:	b0 87       	std	Z+8, r27	; 0x08
    21c0:	00 00       	nop
    21c2:	28 96       	adiw	r28, 0x08	; 8
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool DHT_Unified::Humidity::getEvent(sensors_event_t *event) {
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	00 d0       	rcall	.+0      	; 0x21da <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t+0x6>
    21da:	1f 92       	push	r1
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9a 83       	std	Y+2, r25	; 0x02
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	7c 83       	std	Y+4, r23	; 0x04
    21e6:	6b 83       	std	Y+3, r22	; 0x03
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	44 e2       	ldi	r20, 0x24	; 36
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	0e 94 62 33 	call	0x66c4	; 0x66c4 <memset>
  // Populate sensor reading values.
  event->version = sizeof(sensors_event_t);
    21f8:	84 e2       	ldi	r24, 0x24	; 36
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 e0       	ldi	r26, 0x00	; 0
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	f9 01       	movw	r30, r18
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _id;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	fc 01       	movw	r30, r24
    2214:	85 81       	ldd	r24, Z+5	; 0x05
    2216:	96 81       	ldd	r25, Z+6	; 0x06
    2218:	a7 81       	ldd	r26, Z+7	; 0x07
    221a:	b0 85       	ldd	r27, Z+8	; 0x08
    221c:	2b 81       	ldd	r18, Y+3	; 0x03
    221e:	3c 81       	ldd	r19, Y+4	; 0x04
    2220:	f9 01       	movw	r30, r18
    2222:	84 83       	std	Z+4, r24	; 0x04
    2224:	95 83       	std	Z+5, r25	; 0x05
    2226:	a6 83       	std	Z+6, r26	; 0x06
    2228:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    222a:	2b 81       	ldd	r18, Y+3	; 0x03
    222c:	3c 81       	ldd	r19, Y+4	; 0x04
    222e:	8c e0       	ldi	r24, 0x0C	; 12
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e0       	ldi	r26, 0x00	; 0
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	f9 01       	movw	r30, r18
    2238:	80 87       	std	Z+8, r24	; 0x08
    223a:	91 87       	std	Z+9, r25	; 0x09
    223c:	a2 87       	std	Z+10, r26	; 0x0a
    223e:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    2240:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <millis>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	2b 81       	ldd	r18, Y+3	; 0x03
    224a:	3c 81       	ldd	r19, Y+4	; 0x04
    224c:	f9 01       	movw	r30, r18
    224e:	80 8b       	std	Z+16, r24	; 0x10
    2250:	91 8b       	std	Z+17, r25	; 0x11
    2252:	a2 8b       	std	Z+18, r26	; 0x12
    2254:	b3 8b       	std	Z+19, r27	; 0x13
  event->relative_humidity = _parent->_dht.readHumidity();
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	fc 01       	movw	r30, r24
    225c:	83 81       	ldd	r24, Z+3	; 0x03
    225e:	94 81       	ldd	r25, Z+4	; 0x04
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	cb d8       	rcall	.-3690   	; 0x13fa <_ZN3DHT12readHumidityEb>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	2b 81       	ldd	r18, Y+3	; 0x03
    226a:	3c 81       	ldd	r19, Y+4	; 0x04
    226c:	f9 01       	movw	r30, r18
    226e:	84 8b       	std	Z+20, r24	; 0x14
    2270:	95 8b       	std	Z+21, r25	; 0x15
    2272:	a6 8b       	std	Z+22, r26	; 0x16
    2274:	b7 8b       	std	Z+23, r27	; 0x17

  return true;
    2276:	81 e0       	ldi	r24, 0x01	; 1
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void DHT_Unified::Humidity::getSensor(sensor_t *sensor) {
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	00 d0       	rcall	.+0      	; 0x228c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6>
    228c:	1f 92       	push	r1
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	7c 83       	std	Y+4, r23	; 0x04
    2298:	6b 83       	std	Y+3, r22	; 0x03
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	48 e2       	ldi	r20, 0x28	; 40
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	0e 94 62 33 	call	0x66c4	; 0x66c4 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	fc 01       	movw	r30, r24
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	94 81       	ldd	r25, Z+4	; 0x04
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	b9 01       	movw	r22, r18
    22ba:	fa dc       	rcall	.-1548   	; 0x1cb0 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version = DHT_SENSOR_VERSION;
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	f9 01       	movw	r30, r18
    22ca:	84 87       	std	Z+12, r24	; 0x0c
    22cc:	95 87       	std	Z+13, r25	; 0x0d
    22ce:	a6 87       	std	Z+14, r26	; 0x0e
    22d0:	b7 87       	std	Z+15, r27	; 0x0f
  sensor->sensor_id = _id;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	fc 01       	movw	r30, r24
    22d8:	85 81       	ldd	r24, Z+5	; 0x05
    22da:	96 81       	ldd	r25, Z+6	; 0x06
    22dc:	a7 81       	ldd	r26, Z+7	; 0x07
    22de:	b0 85       	ldd	r27, Z+8	; 0x08
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	f9 01       	movw	r30, r18
    22e6:	80 8b       	std	Z+16, r24	; 0x10
    22e8:	91 8b       	std	Z+17, r25	; 0x11
    22ea:	a2 8b       	std	Z+18, r26	; 0x12
    22ec:	b3 8b       	std	Z+19, r27	; 0x13
  // Set type and characteristics.
  sensor->type = SENSOR_TYPE_RELATIVE_HUMIDITY;
    22ee:	2b 81       	ldd	r18, Y+3	; 0x03
    22f0:	3c 81       	ldd	r19, Y+4	; 0x04
    22f2:	8c e0       	ldi	r24, 0x0C	; 12
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	f9 01       	movw	r30, r18
    22fc:	84 8b       	std	Z+20, r24	; 0x14
    22fe:	95 8b       	std	Z+21, r25	; 0x15
    2300:	a6 8b       	std	Z+22, r26	; 0x16
    2302:	b7 8b       	std	Z+23, r27	; 0x17
  _parent->setMinDelay(sensor);
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	fc 01       	movw	r30, r24
    230a:	83 81       	ldd	r24, Z+3	; 0x03
    230c:	94 81       	ldd	r25, Z+4	; 0x04
    230e:	2b 81       	ldd	r18, Y+3	; 0x03
    2310:	3c 81       	ldd	r19, Y+4	; 0x04
    2312:	b9 01       	movw	r22, r18
    2314:	2e dd       	rcall	.-1444   	; 0x1d72 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	fc 01       	movw	r30, r24
    231c:	83 81       	ldd	r24, Z+3	; 0x03
    231e:	94 81       	ldd	r25, Z+4	; 0x04
    2320:	fc 01       	movw	r30, r24
    2322:	83 89       	ldd	r24, Z+19	; 0x13
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	8c 30       	cpi	r24, 0x0C	; 12
    232a:	91 05       	cpc	r25, r1
    232c:	81 f1       	breq	.+96     	; 0x238e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x108>
    232e:	8d 30       	cpi	r24, 0x0D	; 13
    2330:	91 05       	cpc	r25, r1
    2332:	1c f4       	brge	.+6      	; 0x233a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xb4>
    2334:	0b 97       	sbiw	r24, 0x0b	; 11
    2336:	49 f0       	breq	.+18     	; 0x234a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc4>
    2338:	88 c0       	rjmp	.+272    	; 0x244a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
    233a:	85 31       	cpi	r24, 0x15	; 21
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xbc>
    2340:	48 c0       	rjmp	.+144    	; 0x23d2 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x14c>
    2342:	46 97       	sbiw	r24, 0x16	; 22
    2344:	09 f4       	brne	.+2      	; 0x2348 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0xc2>
    2346:	63 c0       	rjmp	.+198    	; 0x240e <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x188>
    2348:	80 c0       	rjmp	.+256    	; 0x244a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1c4>
  case DHT11:
    sensor->max_value = 80.0F;
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 ea       	ldi	r26, 0xA0	; 160
    2354:	b2 e4       	ldi	r27, 0x42	; 66
    2356:	f9 01       	movw	r30, r18
    2358:	80 8f       	std	Z+24, r24	; 0x18
    235a:	91 8f       	std	Z+25, r25	; 0x19
    235c:	a2 8f       	std	Z+26, r26	; 0x1a
    235e:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    2360:	2b 81       	ldd	r18, Y+3	; 0x03
    2362:	3c 81       	ldd	r19, Y+4	; 0x04
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 ea       	ldi	r26, 0xA0	; 160
    236a:	b1 e4       	ldi	r27, 0x41	; 65
    236c:	f9 01       	movw	r30, r18
    236e:	84 8f       	std	Z+28, r24	; 0x1c
    2370:	95 8f       	std	Z+29, r25	; 0x1d
    2372:	a6 8f       	std	Z+30, r26	; 0x1e
    2374:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    2376:	2b 81       	ldd	r18, Y+3	; 0x03
    2378:	3c 81       	ldd	r19, Y+4	; 0x04
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 ea       	ldi	r26, 0xA0	; 160
    2380:	b0 e4       	ldi	r27, 0x40	; 64
    2382:	f9 01       	movw	r30, r18
    2384:	80 a3       	std	Z+32, r24	; 0x20
    2386:	91 a3       	std	Z+33, r25	; 0x21
    2388:	a2 a3       	std	Z+34, r26	; 0x22
    238a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    238c:	74 c0       	rjmp	.+232    	; 0x2476 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT12:
    sensor->max_value = 95.0F;
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	ae eb       	ldi	r26, 0xBE	; 190
    2398:	b2 e4       	ldi	r27, 0x42	; 66
    239a:	f9 01       	movw	r30, r18
    239c:	80 8f       	std	Z+24, r24	; 0x18
    239e:	91 8f       	std	Z+25, r25	; 0x19
    23a0:	a2 8f       	std	Z+26, r26	; 0x1a
    23a2:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 20.0F;
    23a4:	2b 81       	ldd	r18, Y+3	; 0x03
    23a6:	3c 81       	ldd	r19, Y+4	; 0x04
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 ea       	ldi	r26, 0xA0	; 160
    23ae:	b1 e4       	ldi	r27, 0x41	; 65
    23b0:	f9 01       	movw	r30, r18
    23b2:	84 8f       	std	Z+28, r24	; 0x1c
    23b4:	95 8f       	std	Z+29, r25	; 0x1d
    23b6:	a6 8f       	std	Z+30, r26	; 0x1e
    23b8:	b7 8f       	std	Z+31, r27	; 0x1f
    sensor->resolution = 5.0F;
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 ea       	ldi	r26, 0xA0	; 160
    23c4:	b0 e4       	ldi	r27, 0x40	; 64
    23c6:	f9 01       	movw	r30, r18
    23c8:	80 a3       	std	Z+32, r24	; 0x20
    23ca:	91 a3       	std	Z+33, r25	; 0x21
    23cc:	a2 a3       	std	Z+34, r26	; 0x22
    23ce:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    23d0:	52 c0       	rjmp	.+164    	; 0x2476 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT21:
    sensor->max_value = 100.0F;
    23d2:	2b 81       	ldd	r18, Y+3	; 0x03
    23d4:	3c 81       	ldd	r19, Y+4	; 0x04
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a8 ec       	ldi	r26, 0xC8	; 200
    23dc:	b2 e4       	ldi	r27, 0x42	; 66
    23de:	f9 01       	movw	r30, r18
    23e0:	80 8f       	std	Z+24, r24	; 0x18
    23e2:	91 8f       	std	Z+25, r25	; 0x19
    23e4:	a2 8f       	std	Z+26, r26	; 0x1a
    23e6:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	fc 01       	movw	r30, r24
    23ee:	14 8e       	std	Z+28, r1	; 0x1c
    23f0:	15 8e       	std	Z+29, r1	; 0x1d
    23f2:	16 8e       	std	Z+30, r1	; 0x1e
    23f4:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    23f6:	2b 81       	ldd	r18, Y+3	; 0x03
    23f8:	3c 81       	ldd	r19, Y+4	; 0x04
    23fa:	8d ec       	ldi	r24, 0xCD	; 205
    23fc:	9c ec       	ldi	r25, 0xCC	; 204
    23fe:	ac ec       	ldi	r26, 0xCC	; 204
    2400:	bd e3       	ldi	r27, 0x3D	; 61
    2402:	f9 01       	movw	r30, r18
    2404:	80 a3       	std	Z+32, r24	; 0x20
    2406:	91 a3       	std	Z+33, r25	; 0x21
    2408:	a2 a3       	std	Z+34, r26	; 0x22
    240a:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    240c:	34 c0       	rjmp	.+104    	; 0x2476 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  case DHT22:
    sensor->max_value = 100.0F;
    240e:	2b 81       	ldd	r18, Y+3	; 0x03
    2410:	3c 81       	ldd	r19, Y+4	; 0x04
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a8 ec       	ldi	r26, 0xC8	; 200
    2418:	b2 e4       	ldi	r27, 0x42	; 66
    241a:	f9 01       	movw	r30, r18
    241c:	80 8f       	std	Z+24, r24	; 0x18
    241e:	91 8f       	std	Z+25, r25	; 0x19
    2420:	a2 8f       	std	Z+26, r26	; 0x1a
    2422:	b3 8f       	std	Z+27, r27	; 0x1b
    sensor->min_value = 0.0F;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	fc 01       	movw	r30, r24
    242a:	14 8e       	std	Z+28, r1	; 0x1c
    242c:	15 8e       	std	Z+29, r1	; 0x1d
    242e:	16 8e       	std	Z+30, r1	; 0x1e
    2430:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.1F;
    2432:	2b 81       	ldd	r18, Y+3	; 0x03
    2434:	3c 81       	ldd	r19, Y+4	; 0x04
    2436:	8d ec       	ldi	r24, 0xCD	; 205
    2438:	9c ec       	ldi	r25, 0xCC	; 204
    243a:	ac ec       	ldi	r26, 0xCC	; 204
    243c:	bd e3       	ldi	r27, 0x3D	; 61
    243e:	f9 01       	movw	r30, r18
    2440:	80 a3       	std	Z+32, r24	; 0x20
    2442:	91 a3       	std	Z+33, r25	; 0x21
    2444:	a2 a3       	std	Z+34, r26	; 0x22
    2446:	b3 a3       	std	Z+35, r27	; 0x23
    break;
    2448:	16 c0       	rjmp	.+44     	; 0x2476 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x1f0>
  default:
    // Unknown type, default to 0.
    sensor->max_value = 0.0F;
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	fc 01       	movw	r30, r24
    2450:	10 8e       	std	Z+24, r1	; 0x18
    2452:	11 8e       	std	Z+25, r1	; 0x19
    2454:	12 8e       	std	Z+26, r1	; 0x1a
    2456:	13 8e       	std	Z+27, r1	; 0x1b
    sensor->min_value = 0.0F;
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	fc 01       	movw	r30, r24
    245e:	14 8e       	std	Z+28, r1	; 0x1c
    2460:	15 8e       	std	Z+29, r1	; 0x1d
    2462:	16 8e       	std	Z+30, r1	; 0x1e
    2464:	17 8e       	std	Z+31, r1	; 0x1f
    sensor->resolution = 0.0F;
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	fc 01       	movw	r30, r24
    246c:	10 a2       	std	Z+32, r1	; 0x20
    246e:	11 a2       	std	Z+33, r1	; 0x21
    2470:	12 a2       	std	Z+34, r1	; 0x22
    2472:	13 a2       	std	Z+35, r1	; 0x23
    break;
    2474:	00 00       	nop
  }
}
    2476:	00 00       	nop
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	08 95       	ret

00002486 <_ZN11SPISettingsC1Emhh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    2486:	0f 93       	push	r16
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	28 97       	sbiw	r28, 0x08	; 8
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	4b 83       	std	Y+3, r20	; 0x03
    24a2:	5c 83       	std	Y+4, r21	; 0x04
    24a4:	6d 83       	std	Y+5, r22	; 0x05
    24a6:	7e 83       	std	Y+6, r23	; 0x06
    24a8:	2f 83       	std	Y+7, r18	; 0x07
    24aa:	08 87       	std	Y+8, r16	; 0x08
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	ad 81       	ldd	r26, Y+5	; 0x05
    24b2:	be 81       	ldd	r27, Y+6	; 0x06
    24b4:	e9 81       	ldd	r30, Y+1	; 0x01
    24b6:	fa 81       	ldd	r31, Y+2	; 0x02
    24b8:	08 85       	ldd	r16, Y+8	; 0x08
    24ba:	2f 81       	ldd	r18, Y+7	; 0x07
    24bc:	ac 01       	movw	r20, r24
    24be:	bd 01       	movw	r22, r26
    24c0:	cf 01       	movw	r24, r30
    24c2:	0b d0       	rcall	.+22     	; 0x24da <_ZN11SPISettings16init_MightInlineEmhh>
    24c4:	00 00       	nop
    24c6:	28 96       	adiw	r28, 0x08	; 8
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	cd bf       	out	0x3d, r28	; 61
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	0f 91       	pop	r16
    24d8:	08 95       	ret

000024da <_ZN11SPISettings16init_MightInlineEmhh>:
    24da:	0f 93       	push	r16
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	65 97       	sbiw	r28, 0x15	; 21
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	9f 87       	std	Y+15, r25	; 0x0f
    24f2:	8e 87       	std	Y+14, r24	; 0x0e
    24f4:	48 8b       	std	Y+16, r20	; 0x10
    24f6:	59 8b       	std	Y+17, r21	; 0x11
    24f8:	6a 8b       	std	Y+18, r22	; 0x12
    24fa:	7b 8b       	std	Y+19, r23	; 0x13
    24fc:	2c 8b       	std	Y+20, r18	; 0x14
    24fe:	0d 8b       	std	Y+21, r16	; 0x15
    2500:	8e 85       	ldd	r24, Y+14	; 0x0e
    2502:	9f 85       	ldd	r25, Y+15	; 0x0f
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	88 89       	ldd	r24, Y+16	; 0x10
    250a:	99 89       	ldd	r25, Y+17	; 0x11
    250c:	aa 89       	ldd	r26, Y+18	; 0x12
    250e:	bb 89       	ldd	r27, Y+19	; 0x13
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	ad 83       	std	Y+5, r26	; 0x05
    2516:	be 83       	std	Y+6, r27	; 0x06
    2518:	8c 89       	ldd	r24, Y+20	; 0x14
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	8d 89       	ldd	r24, Y+21	; 0x15
    251e:	88 87       	std	Y+8, r24	; 0x08
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	92 e1       	ldi	r25, 0x12	; 18
    2524:	aa e7       	ldi	r26, 0x7A	; 122
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	89 87       	std	Y+9, r24	; 0x09
    252a:	9a 87       	std	Y+10, r25	; 0x0a
    252c:	ab 87       	std	Y+11, r26	; 0x0b
    252e:	bc 87       	std	Y+12, r27	; 0x0c
    2530:	1d 86       	std	Y+13, r1	; 0x0d
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	86 30       	cpi	r24, 0x06	; 6
    2536:	e8 f4       	brcc	.+58     	; 0x2572 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2538:	2b 81       	ldd	r18, Y+3	; 0x03
    253a:	3c 81       	ldd	r19, Y+4	; 0x04
    253c:	4d 81       	ldd	r20, Y+5	; 0x05
    253e:	5e 81       	ldd	r21, Y+6	; 0x06
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	ab 85       	ldd	r26, Y+11	; 0x0b
    2546:	bc 85       	ldd	r27, Y+12	; 0x0c
    2548:	28 17       	cp	r18, r24
    254a:	39 07       	cpc	r19, r25
    254c:	4a 07       	cpc	r20, r26
    254e:	5b 07       	cpc	r21, r27
    2550:	80 f4       	brcc	.+32     	; 0x2572 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	ab 85       	ldd	r26, Y+11	; 0x0b
    2558:	bc 85       	ldd	r27, Y+12	; 0x0c
    255a:	b6 95       	lsr	r27
    255c:	a7 95       	ror	r26
    255e:	97 95       	ror	r25
    2560:	87 95       	ror	r24
    2562:	89 87       	std	Y+9, r24	; 0x09
    2564:	9a 87       	std	Y+10, r25	; 0x0a
    2566:	ab 87       	std	Y+11, r26	; 0x0b
    2568:	bc 87       	std	Y+12, r27	; 0x0c
    256a:	8d 85       	ldd	r24, Y+13	; 0x0d
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	8d 87       	std	Y+13, r24	; 0x0d
    2570:	e0 cf       	rjmp	.-64     	; 0x2532 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	86 30       	cpi	r24, 0x06	; 6
    2576:	11 f4       	brne	.+4      	; 0x257c <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    2578:	87 e0       	ldi	r24, 0x07	; 7
    257a:	8d 87       	std	Y+13, r24	; 0x0d
    257c:	9d 85       	ldd	r25, Y+13	; 0x0d
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	89 27       	eor	r24, r25
    2582:	8d 87       	std	Y+13, r24	; 0x0d
    2584:	8f 81       	ldd	r24, Y+7	; 0x07
    2586:	88 23       	and	r24, r24
    2588:	11 f4       	brne	.+4      	; 0x258e <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    258a:	80 e7       	ldi	r24, 0x70	; 112
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    258e:	80 e5       	ldi	r24, 0x50	; 80
    2590:	98 85       	ldd	r25, Y+8	; 0x08
    2592:	9c 70       	andi	r25, 0x0C	; 12
    2594:	29 2f       	mov	r18, r25
    2596:	28 2b       	or	r18, r24
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	95 95       	asr	r25
    25a0:	87 95       	ror	r24
    25a2:	83 70       	andi	r24, 0x03	; 3
    25a4:	82 2b       	or	r24, r18
    25a6:	28 2f       	mov	r18, r24
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	fc 01       	movw	r30, r24
    25ae:	20 83       	st	Z, r18
    25b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b2:	28 2f       	mov	r18, r24
    25b4:	21 70       	andi	r18, 0x01	; 1
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	fc 01       	movw	r30, r24
    25bc:	21 83       	std	Z+1, r18	; 0x01
    25be:	00 00       	nop
    25c0:	65 96       	adiw	r28, 0x15	; 21
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	0f 91       	pop	r16
    25d2:	08 95       	ret

000025d4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	00 d0       	rcall	.+0      	; 0x25da <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    25e6:	88 23       	and	r24, r24
    25e8:	31 f1       	breq	.+76     	; 0x2636 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    25ea:	8f e5       	ldi	r24, 0x5F	; 95
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	f8 94       	cli
    25f6:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	c9 f4       	brne	.+50     	; 0x2630 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
    25fe:	8d e3       	ldi	r24, 0x3D	; 61
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	fc 01       	movw	r30, r24
    2604:	80 81       	ld	r24, Z
    2606:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    260a:	8d e3       	ldi	r24, 0x3D	; 61
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	2d e3       	ldi	r18, 0x3D	; 61
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	f9 01       	movw	r30, r18
    2614:	20 81       	ld	r18, Z
    2616:	32 2f       	mov	r19, r18
    2618:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <_ZN8SPIClass13interruptMaskE>
    261c:	20 95       	com	r18
    261e:	23 23       	and	r18, r19
    2620:	fc 01       	movw	r30, r24
    2622:	20 83       	st	Z, r18
    2624:	8f e5       	ldi	r24, 0x5F	; 95
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	29 81       	ldd	r18, Y+1	; 0x01
    262a:	fc 01       	movw	r30, r24
    262c:	20 83       	st	Z, r18
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    2636:	8c e4       	ldi	r24, 0x4C	; 76
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	2a 81       	ldd	r18, Y+2	; 0x02
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
    2640:	8d e4       	ldi	r24, 0x4D	; 77
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	2b 81       	ldd	r18, Y+3	; 0x03
    2646:	fc 01       	movw	r30, r24
    2648:	20 83       	st	Z, r18
    264a:	00 00       	nop
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <_ZN8SPIClass8transferEh>:
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	1f 92       	push	r1
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	8e e4       	ldi	r24, 0x4E	; 78
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	29 81       	ldd	r18, Y+1	; 0x01
    266a:	fc 01       	movw	r30, r24
    266c:	20 83       	st	Z, r18
    266e:	00 00       	nop
    2670:	8d e4       	ldi	r24, 0x4D	; 77
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	fc 01       	movw	r30, r24
    2676:	80 81       	ld	r24, Z
    2678:	80 95       	com	r24
    267a:	88 1f       	adc	r24, r24
    267c:	88 27       	eor	r24, r24
    267e:	88 1f       	adc	r24, r24
    2680:	88 23       	and	r24, r24
    2682:	09 f0       	breq	.+2      	; 0x2686 <_ZN8SPIClass8transferEh+0x2e>
    2684:	f5 cf       	rjmp	.-22     	; 0x2670 <_ZN8SPIClass8transferEh+0x18>
    2686:	8e e4       	ldi	r24, 0x4E	; 78
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	fc 01       	movw	r30, r24
    268c:	80 81       	ld	r24, Z
    268e:	0f 90       	pop	r0
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	08 95       	ret

00002696 <_ZN8SPIClass14endTransactionEv>:
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	1f 92       	push	r1
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    26a4:	88 23       	and	r24, r24
    26a6:	e1 f0       	breq	.+56     	; 0x26e0 <_ZN8SPIClass14endTransactionEv+0x4a>
    26a8:	8f e5       	ldi	r24, 0x5F	; 95
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	fc 01       	movw	r30, r24
    26ae:	80 81       	ld	r24, Z
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	f8 94       	cli
    26b4:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass13interruptModeE>
    26b8:	81 30       	cpi	r24, 0x01	; 1
    26ba:	61 f4       	brne	.+24     	; 0x26d4 <_ZN8SPIClass14endTransactionEv+0x3e>
    26bc:	8d e3       	ldi	r24, 0x3D	; 61
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    26c4:	fc 01       	movw	r30, r24
    26c6:	20 83       	st	Z, r18
    26c8:	8f e5       	ldi	r24, 0x5F	; 95
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	29 81       	ldd	r18, Y+1	; 0x01
    26ce:	fc 01       	movw	r30, r24
    26d0:	20 83       	st	Z, r18
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <_ZN8SPIClass14endTransactionEv+0x4a>
    26d4:	8f e5       	ldi	r24, 0x5F	; 95
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <_ZN8SPIClass13interruptSaveE>
    26dc:	fc 01       	movw	r30, r24
    26de:	20 83       	st	Z, r18
    26e0:	00 00       	nop
    26e2:	0f 90       	pop	r0
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <_ZN7MFRC522C1Ehh>:
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <_ZN7MFRC522C1Ehh+0x6>
    26f0:	1f 92       	push	r1
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	6b 83       	std	Y+3, r22	; 0x03
    26fc:	4c 83       	std	Y+4, r20	; 0x04
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	2b 81       	ldd	r18, Y+3	; 0x03
    2704:	fc 01       	movw	r30, r24
    2706:	24 87       	std	Z+12, r18	; 0x0c
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	2c 81       	ldd	r18, Y+4	; 0x04
    270e:	fc 01       	movw	r30, r24
    2710:	25 87       	std	Z+13, r18	; 0x0d
    2712:	00 00       	nop
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

00002722 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
    2722:	0f 93       	push	r16
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	00 d0       	rcall	.+0      	; 0x272a <_ZN7MFRC52217PCD_WriteRegisterEhh+0x8>
    272a:	00 d0       	rcall	.+0      	; 0x272c <_ZN7MFRC52217PCD_WriteRegisterEhh+0xa>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	9c 83       	std	Y+4, r25	; 0x04
    2732:	8b 83       	std	Y+3, r24	; 0x03
    2734:	6d 83       	std	Y+5, r22	; 0x05
    2736:	4e 83       	std	Y+6, r20	; 0x06
    2738:	00 e0       	ldi	r16, 0x00	; 0
    273a:	21 e0       	ldi	r18, 0x01	; 1
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	ba 01       	movw	r22, r20
    2742:	ce 01       	movw	r24, r28
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	9f de       	rcall	.-706    	; 0x2486 <_ZN11SPISettingsC1Emhh>
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	43 df       	rcall	.-378    	; 0x25d4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	fc 01       	movw	r30, r24
    2754:	84 85       	ldd	r24, Z+12	; 0x0c
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	8e 77       	andi	r24, 0x7E	; 126
    2760:	7b df       	rcall	.-266    	; 0x2658 <_ZN8SPIClass8transferEh>
    2762:	8e 81       	ldd	r24, Y+6	; 0x06
    2764:	79 df       	rcall	.-270    	; 0x2658 <_ZN8SPIClass8transferEh>
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	fc 01       	movw	r30, r24
    276c:	84 85       	ldd	r24, Z+12	; 0x0c
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    2774:	90 df       	rcall	.-224    	; 0x2696 <_ZN8SPIClass14endTransactionEv>
    2776:	00 00       	nop
    2778:	26 96       	adiw	r28, 0x06	; 6
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
    278c:	0f 93       	push	r16
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	29 97       	sbiw	r28, 0x09	; 9
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	9d 83       	std	Y+5, r25	; 0x05
    27a4:	8c 83       	std	Y+4, r24	; 0x04
    27a6:	6e 83       	std	Y+6, r22	; 0x06
    27a8:	4f 83       	std	Y+7, r20	; 0x07
    27aa:	39 87       	std	Y+9, r19	; 0x09
    27ac:	28 87       	std	Y+8, r18	; 0x08
    27ae:	ce 01       	movw	r24, r28
    27b0:	02 96       	adiw	r24, 0x02	; 2
    27b2:	00 e0       	ldi	r16, 0x00	; 0
    27b4:	21 e0       	ldi	r18, 0x01	; 1
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	ba 01       	movw	r22, r20
    27bc:	64 de       	rcall	.-824    	; 0x2486 <_ZN11SPISettingsC1Emhh>
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	08 df       	rcall	.-496    	; 0x25d4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	9d 81       	ldd	r25, Y+5	; 0x05
    27c8:	fc 01       	movw	r30, r24
    27ca:	84 85       	ldd	r24, Z+12	; 0x0c
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    27d2:	8e 81       	ldd	r24, Y+6	; 0x06
    27d4:	8e 77       	andi	r24, 0x7E	; 126
    27d6:	40 df       	rcall	.-384    	; 0x2658 <_ZN8SPIClass8transferEh>
    27d8:	19 82       	std	Y+1, r1	; 0x01
    27da:	99 81       	ldd	r25, Y+1	; 0x01
    27dc:	8f 81       	ldd	r24, Y+7	; 0x07
    27de:	98 17       	cp	r25, r24
    27e0:	70 f4       	brcc	.+28     	; 0x27fe <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x72>
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	28 85       	ldd	r18, Y+8	; 0x08
    27ea:	39 85       	ldd	r19, Y+9	; 0x09
    27ec:	82 0f       	add	r24, r18
    27ee:	93 1f       	adc	r25, r19
    27f0:	fc 01       	movw	r30, r24
    27f2:	80 81       	ld	r24, Z
    27f4:	31 df       	rcall	.-414    	; 0x2658 <_ZN8SPIClass8transferEh>
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	ee cf       	rjmp	.-36     	; 0x27da <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x4e>
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	9d 81       	ldd	r25, Y+5	; 0x05
    2802:	fc 01       	movw	r30, r24
    2804:	84 85       	ldd	r24, Z+12	; 0x0c
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    280c:	44 df       	rcall	.-376    	; 0x2696 <_ZN8SPIClass14endTransactionEv>
    280e:	00 00       	nop
    2810:	29 96       	adiw	r28, 0x09	; 9
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	0f 91       	pop	r16
    2822:	08 95       	ret

00002824 <_ZN7MFRC52216PCD_ReadRegisterEh>:
    2824:	0f 93       	push	r16
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	00 d0       	rcall	.+0      	; 0x282c <_ZN7MFRC52216PCD_ReadRegisterEh+0x8>
    282c:	00 d0       	rcall	.+0      	; 0x282e <_ZN7MFRC52216PCD_ReadRegisterEh+0xa>
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	9d 83       	std	Y+5, r25	; 0x05
    2834:	8c 83       	std	Y+4, r24	; 0x04
    2836:	6e 83       	std	Y+6, r22	; 0x06
    2838:	ce 01       	movw	r24, r28
    283a:	02 96       	adiw	r24, 0x02	; 2
    283c:	00 e0       	ldi	r16, 0x00	; 0
    283e:	21 e0       	ldi	r18, 0x01	; 1
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	ba 01       	movw	r22, r20
    2846:	1f de       	rcall	.-962    	; 0x2486 <_ZN11SPISettingsC1Emhh>
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	9b 81       	ldd	r25, Y+3	; 0x03
    284c:	c3 de       	rcall	.-634    	; 0x25d4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	fc 01       	movw	r30, r24
    2854:	84 85       	ldd	r24, Z+12	; 0x0c
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
    285e:	8e 77       	andi	r24, 0x7E	; 126
    2860:	80 68       	ori	r24, 0x80	; 128
    2862:	fa de       	rcall	.-524    	; 0x2658 <_ZN8SPIClass8transferEh>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	f8 de       	rcall	.-528    	; 0x2658 <_ZN8SPIClass8transferEh>
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	9d 81       	ldd	r25, Y+5	; 0x05
    286e:	fc 01       	movw	r30, r24
    2870:	84 85       	ldd	r24, Z+12	; 0x0c
    2872:	61 e0       	ldi	r22, 0x01	; 1
    2874:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    2878:	0e df       	rcall	.-484    	; 0x2696 <_ZN8SPIClass14endTransactionEv>
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	26 96       	adiw	r28, 0x06	; 6
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	0f 91       	pop	r16
    288e:	08 95       	ret

00002890 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	2e 97       	sbiw	r28, 0x0e	; 14
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	99 87       	std	Y+9, r25	; 0x09
    28aa:	88 87       	std	Y+8, r24	; 0x08
    28ac:	6a 87       	std	Y+10, r22	; 0x0a
    28ae:	4b 87       	std	Y+11, r20	; 0x0b
    28b0:	3d 87       	std	Y+13, r19	; 0x0d
    28b2:	2c 87       	std	Y+12, r18	; 0x0c
    28b4:	0e 87       	std	Y+14, r16	; 0x0e
    28b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28b8:	88 23       	and	r24, r24
    28ba:	09 f4       	brne	.+2      	; 0x28be <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x2e>
    28bc:	7e c0       	rjmp	.+252    	; 0x29ba <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12a>
    28be:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c0:	8e 77       	andi	r24, 0x7E	; 126
    28c2:	80 68       	ori	r24, 0x80	; 128
    28c4:	8c 83       	std	Y+4, r24	; 0x04
    28c6:	19 82       	std	Y+1, r1	; 0x01
    28c8:	ce 01       	movw	r24, r28
    28ca:	06 96       	adiw	r24, 0x06	; 6
    28cc:	00 e0       	ldi	r16, 0x00	; 0
    28ce:	21 e0       	ldi	r18, 0x01	; 1
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	ba 01       	movw	r22, r20
    28d6:	d7 dd       	rcall	.-1106   	; 0x2486 <_ZN11SPISettingsC1Emhh>
    28d8:	8e 81       	ldd	r24, Y+6	; 0x06
    28da:	9f 81       	ldd	r25, Y+7	; 0x07
    28dc:	7b de       	rcall	.-778    	; 0x25d4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    28de:	88 85       	ldd	r24, Y+8	; 0x08
    28e0:	99 85       	ldd	r25, Y+9	; 0x09
    28e2:	fc 01       	movw	r30, r24
    28e4:	84 85       	ldd	r24, Z+12	; 0x0c
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    28ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ee:	81 50       	subi	r24, 0x01	; 1
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	b1 de       	rcall	.-670    	; 0x2658 <_ZN8SPIClass8transferEh>
    28f6:	99 81       	ldd	r25, Y+1	; 0x01
    28f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28fa:	98 17       	cp	r25, r24
    28fc:	08 f0       	brcs	.+2      	; 0x2900 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
    28fe:	48 c0       	rjmp	.+144    	; 0x2990 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x100>
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	88 23       	and	r24, r24
    2904:	a9 f5       	brne	.+106    	; 0x2970 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    2906:	8e 85       	ldd	r24, Y+14	; 0x0e
    2908:	88 23       	and	r24, r24
    290a:	91 f1       	breq	.+100    	; 0x2970 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xe0>
    290c:	1a 82       	std	Y+2, r1	; 0x02
    290e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	88 30       	cpi	r24, 0x08	; 8
    2916:	90 f4       	brcc	.+36     	; 0x293c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xac>
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	2a 95       	dec	r18
    292a:	e2 f7       	brpl	.-8      	; 0x2924 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x94>
    292c:	98 2f       	mov	r25, r24
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	89 2b       	or	r24, r25
    2932:	8a 83       	std	Y+2, r24	; 0x02
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	8b 83       	std	Y+3, r24	; 0x03
    293a:	eb cf       	rjmp	.-42     	; 0x2912 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
    293c:	8c 81       	ldd	r24, Y+4	; 0x04
    293e:	8c de       	rcall	.-744    	; 0x2658 <_ZN8SPIClass8transferEh>
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	2c 85       	ldd	r18, Y+12	; 0x0c
    294a:	3d 85       	ldd	r19, Y+13	; 0x0d
    294c:	82 0f       	add	r24, r18
    294e:	93 1f       	adc	r25, r19
    2950:	fc 01       	movw	r30, r24
    2952:	80 81       	ld	r24, Z
    2954:	98 2f       	mov	r25, r24
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	80 95       	com	r24
    295a:	89 23       	and	r24, r25
    295c:	2d 81       	ldd	r18, Y+5	; 0x05
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	92 23       	and	r25, r18
    2962:	89 2b       	or	r24, r25
    2964:	28 2f       	mov	r18, r24
    2966:	8c 85       	ldd	r24, Y+12	; 0x0c
    2968:	9d 85       	ldd	r25, Y+13	; 0x0d
    296a:	fc 01       	movw	r30, r24
    296c:	20 83       	st	Z, r18
    296e:	0c c0       	rjmp	.+24     	; 0x2988 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xf8>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	2c 85       	ldd	r18, Y+12	; 0x0c
    2978:	3d 85       	ldd	r19, Y+13	; 0x0d
    297a:	89 01       	movw	r16, r18
    297c:	08 0f       	add	r16, r24
    297e:	19 1f       	adc	r17, r25
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	6a de       	rcall	.-812    	; 0x2658 <_ZN8SPIClass8transferEh>
    2984:	f8 01       	movw	r30, r16
    2986:	80 83       	st	Z, r24
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	b3 cf       	rjmp	.-154    	; 0x28f6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x66>
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	2c 85       	ldd	r18, Y+12	; 0x0c
    2998:	3d 85       	ldd	r19, Y+13	; 0x0d
    299a:	89 01       	movw	r16, r18
    299c:	08 0f       	add	r16, r24
    299e:	19 1f       	adc	r17, r25
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	5a de       	rcall	.-844    	; 0x2658 <_ZN8SPIClass8transferEh>
    29a4:	f8 01       	movw	r30, r16
    29a6:	80 83       	st	Z, r24
    29a8:	88 85       	ldd	r24, Y+8	; 0x08
    29aa:	99 85       	ldd	r25, Y+9	; 0x09
    29ac:	fc 01       	movw	r30, r24
    29ae:	84 85       	ldd	r24, Z+12	; 0x0c
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    29b6:	6f de       	rcall	.-802    	; 0x2696 <_ZN8SPIClass14endTransactionEv>
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x12c>
    29ba:	00 00       	nop
    29bc:	2e 96       	adiw	r28, 0x0e	; 14
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	08 95       	ret

000029d2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh+0x6>
    29d8:	1f 92       	push	r1
    29da:	1f 92       	push	r1
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	9b 83       	std	Y+3, r25	; 0x03
    29e2:	8a 83       	std	Y+2, r24	; 0x02
    29e4:	6c 83       	std	Y+4, r22	; 0x04
    29e6:	4d 83       	std	Y+5, r20	; 0x05
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	6c 81       	ldd	r22, Y+4	; 0x04
    29ee:	1a df       	rcall	.-460    	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	99 81       	ldd	r25, Y+1	; 0x01
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	29 2f       	mov	r18, r25
    29f8:	28 2b       	or	r18, r24
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	9b 81       	ldd	r25, Y+3	; 0x03
    29fe:	42 2f       	mov	r20, r18
    2a00:	6c 81       	ldd	r22, Y+4	; 0x04
    2a02:	8f de       	rcall	.-738    	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a04:	00 00       	nop
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	08 95       	ret

00002a16 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh+0x6>
    2a1c:	1f 92       	push	r1
    2a1e:	1f 92       	push	r1
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	9b 83       	std	Y+3, r25	; 0x03
    2a26:	8a 83       	std	Y+2, r24	; 0x02
    2a28:	6c 83       	std	Y+4, r22	; 0x04
    2a2a:	4d 83       	std	Y+5, r20	; 0x05
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a30:	6c 81       	ldd	r22, Y+4	; 0x04
    2a32:	f8 de       	rcall	.-528    	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2a34:	89 83       	std	Y+1, r24	; 0x01
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	98 2f       	mov	r25, r24
    2a3a:	90 95       	com	r25
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	89 23       	and	r24, r25
    2a40:	28 2f       	mov	r18, r24
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	42 2f       	mov	r20, r18
    2a48:	6c 81       	ldd	r22, Y+4	; 0x04
    2a4a:	6b de       	rcall	.-810    	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a4c:	00 00       	nop
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	08 95       	ret

00002a5e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	2a 97       	sbiw	r28, 0x0a	; 10
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	9d 83       	std	Y+5, r25	; 0x05
    2a78:	8c 83       	std	Y+4, r24	; 0x04
    2a7a:	7f 83       	std	Y+7, r23	; 0x07
    2a7c:	6e 83       	std	Y+6, r22	; 0x06
    2a7e:	48 87       	std	Y+8, r20	; 0x08
    2a80:	3a 87       	std	Y+10, r19	; 0x0a
    2a82:	29 87       	std	Y+9, r18	; 0x09
    2a84:	8c 81       	ldd	r24, Y+4	; 0x04
    2a86:	9d 81       	ldd	r25, Y+5	; 0x05
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	62 e0       	ldi	r22, 0x02	; 2
    2a8c:	4a de       	rcall	.-876    	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9d 81       	ldd	r25, Y+5	; 0x05
    2a92:	44 e0       	ldi	r20, 0x04	; 4
    2a94:	6a e0       	ldi	r22, 0x0A	; 10
    2a96:	45 de       	rcall	.-886    	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9c:	40 e8       	ldi	r20, 0x80	; 128
    2a9e:	64 e1       	ldi	r22, 0x14	; 20
    2aa0:	98 df       	rcall	.-208    	; 0x29d2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aaa:	48 85       	ldd	r20, Y+8	; 0x08
    2aac:	62 e1       	ldi	r22, 0x12	; 18
    2aae:	6e de       	rcall	.-804    	; 0x278c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab4:	43 e0       	ldi	r20, 0x03	; 3
    2ab6:	62 e0       	ldi	r22, 0x02	; 2
    2ab8:	34 de       	rcall	.-920    	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2aba:	88 e8       	ldi	r24, 0x88	; 136
    2abc:	93 e1       	ldi	r25, 0x13	; 19
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	6a e0       	ldi	r22, 0x0A	; 10
    2ac8:	ad de       	rcall	.-678    	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	88 2f       	mov	r24, r24
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	84 70       	andi	r24, 0x04	; 4
    2ad4:	99 27       	eor	r25, r25
    2ad6:	89 2b       	or	r24, r25
    2ad8:	79 f4       	brne	.+30     	; 0x2af8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x9a>
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	21 e0       	ldi	r18, 0x01	; 1
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	89 2b       	or	r24, r25
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	22 23       	and	r18, r18
    2af2:	39 f3       	breq	.-50     	; 0x2ac2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	1b c0       	rjmp	.+54     	; 0x2b2e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xd0>
    2af8:	00 00       	nop
    2afa:	8c 81       	ldd	r24, Y+4	; 0x04
    2afc:	9d 81       	ldd	r25, Y+5	; 0x05
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	0f de       	rcall	.-994    	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2b04:	8c 81       	ldd	r24, Y+4	; 0x04
    2b06:	9d 81       	ldd	r25, Y+5	; 0x05
    2b08:	64 e4       	ldi	r22, 0x44	; 68
    2b0a:	8c de       	rcall	.-744    	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	89 85       	ldd	r24, Y+9	; 0x09
    2b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b12:	fc 01       	movw	r30, r24
    2b14:	20 83       	st	Z, r18
    2b16:	89 85       	ldd	r24, Y+9	; 0x09
    2b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1a:	8c 01       	movw	r16, r24
    2b1c:	0f 5f       	subi	r16, 0xFF	; 255
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	8c 81       	ldd	r24, Y+4	; 0x04
    2b22:	9d 81       	ldd	r25, Y+5	; 0x05
    2b24:	62 e4       	ldi	r22, 0x42	; 66
    2b26:	7e de       	rcall	.-772    	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2b28:	f8 01       	movw	r30, r16
    2b2a:	80 83       	st	Z, r24
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	2a 96       	adiw	r28, 0x0a	; 10
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	08 95       	ret

00002b44 <_ZN7MFRC5228PCD_InitEv>:
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	1f 92       	push	r1
    2b4a:	1f 92       	push	r1
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	fc 01       	movw	r30, r24
    2b5a:	84 85       	ldd	r24, Z+12	; 0x0c
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	fc 01       	movw	r30, r24
    2b68:	84 85       	ldd	r24, Z+12	; 0x0c
    2b6a:	61 e0       	ldi	r22, 0x01	; 1
    2b6c:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	fc 01       	movw	r30, r24
    2b76:	85 85       	ldd	r24, Z+13	; 0x0d
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	fc 01       	movw	r30, r24
    2b84:	85 85       	ldd	r24, Z+13	; 0x0d
    2b86:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <digitalRead>
    2b8a:	21 e0       	ldi	r18, 0x01	; 1
    2b8c:	89 2b       	or	r24, r25
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <_ZN7MFRC5228PCD_InitEv+0x4e>
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	22 23       	and	r18, r18
    2b94:	71 f0       	breq	.+28     	; 0x2bb2 <_ZN7MFRC5228PCD_InitEv+0x6e>
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	85 85       	ldd	r24, Z+13	; 0x0d
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    2ba4:	62 e3       	ldi	r22, 0x32	; 50
    2ba6:	70 e0       	ldi	r23, 0x00	; 0
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <_ZN7MFRC5228PCD_InitEv+0x74>
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	27 d0       	rcall	.+78     	; 0x2c06 <_ZN7MFRC5229PCD_ResetEv>
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	64 e5       	ldi	r22, 0x54	; 84
    2bc0:	b0 dd       	rcall	.-1184   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	49 ea       	ldi	r20, 0xA9	; 169
    2bc8:	66 e5       	ldi	r22, 0x56	; 86
    2bca:	ab dd       	rcall	.-1194   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd0:	43 e0       	ldi	r20, 0x03	; 3
    2bd2:	68 e5       	ldi	r22, 0x58	; 88
    2bd4:	a6 dd       	rcall	.-1204   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	48 ee       	ldi	r20, 0xE8	; 232
    2bdc:	6a e5       	ldi	r22, 0x5A	; 90
    2bde:	a1 dd       	rcall	.-1214   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	40 e4       	ldi	r20, 0x40	; 64
    2be6:	6a e2       	ldi	r22, 0x2A	; 42
    2be8:	9c dd       	rcall	.-1224   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	4d e3       	ldi	r20, 0x3D	; 61
    2bf0:	62 e2       	ldi	r22, 0x22	; 34
    2bf2:	97 dd       	rcall	.-1234   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	2e d0       	rcall	.+92     	; 0x2c56 <_ZN7MFRC52213PCD_AntennaOnEv>
    2bfa:	00 00       	nop
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <_ZN7MFRC5229PCD_ResetEv>:
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	1f 92       	push	r1
    2c0c:	1f 92       	push	r1
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	4f e0       	ldi	r20, 0x0F	; 15
    2c1c:	62 e0       	ldi	r22, 0x02	; 2
    2c1e:	81 dd       	rcall	.-1278   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c20:	62 e3       	ldi	r22, 0x32	; 50
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <delay>
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	62 e0       	ldi	r22, 0x02	; 2
    2c32:	f8 dd       	rcall	.-1040   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 71       	andi	r24, 0x10	; 16
    2c3a:	99 27       	eor	r25, r25
    2c3c:	21 e0       	ldi	r18, 0x01	; 1
    2c3e:	89 2b       	or	r24, r25
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <_ZN7MFRC5229PCD_ResetEv+0x3e>
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	22 23       	and	r18, r18
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <_ZN7MFRC5229PCD_ResetEv+0x44>
    2c48:	f1 cf       	rjmp	.-30     	; 0x2c2c <_ZN7MFRC5229PCD_ResetEv+0x26>
    2c4a:	00 00       	nop
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	08 95       	ret

00002c56 <_ZN7MFRC52213PCD_AntennaOnEv>:
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	9b 83       	std	Y+3, r25	; 0x03
    2c62:	8a 83       	std	Y+2, r24	; 0x02
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	68 e2       	ldi	r22, 0x28	; 40
    2c6a:	dc dd       	rcall	.-1096   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	83 70       	andi	r24, 0x03	; 3
    2c76:	99 27       	eor	r25, r25
    2c78:	03 97       	sbiw	r24, 0x03	; 3
    2c7a:	41 f0       	breq	.+16     	; 0x2c8c <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	23 60       	ori	r18, 0x03	; 3
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	42 2f       	mov	r20, r18
    2c88:	68 e2       	ldi	r22, 0x28	; 40
    2c8a:	4b dd       	rcall	.-1386   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2c8c:	00 00       	nop
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2c9a:	8f 92       	push	r8
    2c9c:	af 92       	push	r10
    2c9e:	bf 92       	push	r11
    2ca0:	cf 92       	push	r12
    2ca2:	df 92       	push	r13
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	9b 83       	std	Y+3, r25	; 0x03
    2cc2:	8a 83       	std	Y+2, r24	; 0x02
    2cc4:	7d 83       	std	Y+5, r23	; 0x05
    2cc6:	6c 83       	std	Y+4, r22	; 0x04
    2cc8:	4e 83       	std	Y+6, r20	; 0x06
    2cca:	38 87       	std	Y+8, r19	; 0x08
    2ccc:	2f 83       	std	Y+7, r18	; 0x07
    2cce:	1a 87       	std	Y+10, r17	; 0x0a
    2cd0:	09 87       	std	Y+9, r16	; 0x09
    2cd2:	fc 86       	std	Y+12, r15	; 0x0c
    2cd4:	eb 86       	std	Y+11, r14	; 0x0b
    2cd6:	cd 86       	std	Y+13, r12	; 0x0d
    2cd8:	ae 86       	std	Y+14, r10	; 0x0e
    2cda:	80 e3       	ldi	r24, 0x30	; 48
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	eb 85       	ldd	r30, Y+11	; 0x0b
    2ce0:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ce2:	69 85       	ldd	r22, Y+9	; 0x09
    2ce4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ce6:	4f 81       	ldd	r20, Y+7	; 0x07
    2ce8:	58 85       	ldd	r21, Y+8	; 0x08
    2cea:	2c 81       	ldd	r18, Y+4	; 0x04
    2cec:	3d 81       	ldd	r19, Y+5	; 0x05
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2cf4:	af 93       	push	r26
    2cf6:	8d 84       	ldd	r8, Y+13	; 0x0d
    2cf8:	5f 01       	movw	r10, r30
    2cfa:	6b 01       	movw	r12, r22
    2cfc:	7a 01       	movw	r14, r20
    2cfe:	0e 81       	ldd	r16, Y+6	; 0x06
    2d00:	49 81       	ldd	r20, Y+1	; 0x01
    2d02:	6c e0       	ldi	r22, 0x0C	; 12
    2d04:	13 d0       	rcall	.+38     	; 0x2d2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2d06:	0f 90       	pop	r0
    2d08:	2e 96       	adiw	r28, 0x0e	; 14
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	df 90       	pop	r13
    2d22:	cf 90       	pop	r12
    2d24:	bf 90       	pop	r11
    2d26:	af 90       	pop	r10
    2d28:	8f 90       	pop	r8
    2d2a:	08 95       	ret

00002d2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2d2c:	8f 92       	push	r8
    2d2e:	af 92       	push	r10
    2d30:	bf 92       	push	r11
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	ff 92       	push	r15
    2d3a:	0f 93       	push	r16
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	68 97       	sbiw	r28, 0x18	; 24
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	9c 87       	std	Y+12, r25	; 0x0c
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	6d 87       	std	Y+13, r22	; 0x0d
    2d56:	4e 87       	std	Y+14, r20	; 0x0e
    2d58:	38 8b       	std	Y+16, r19	; 0x10
    2d5a:	2f 87       	std	Y+15, r18	; 0x0f
    2d5c:	09 8b       	std	Y+17, r16	; 0x11
    2d5e:	fb 8a       	std	Y+19, r15	; 0x13
    2d60:	ea 8a       	std	Y+18, r14	; 0x12
    2d62:	dd 8a       	std	Y+21, r13	; 0x15
    2d64:	cc 8a       	std	Y+20, r12	; 0x14
    2d66:	bf 8a       	std	Y+23, r11	; 0x17
    2d68:	ae 8a       	std	Y+22, r10	; 0x16
    2d6a:	88 8e       	std	Y+24, r8	; 0x18
    2d6c:	8e 89       	ldd	r24, Y+22	; 0x16
    2d6e:	9f 89       	ldd	r25, Y+23	; 0x17
    2d70:	89 2b       	or	r24, r25
    2d72:	29 f0       	breq	.+10     	; 0x2d7e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    2d74:	8e 89       	ldd	r24, Y+22	; 0x16
    2d76:	9f 89       	ldd	r25, Y+23	; 0x17
    2d78:	fc 01       	movw	r30, r24
    2d7a:	80 81       	ld	r24, Z
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	8c 83       	std	Y+4, r24	; 0x04
    2d82:	88 8d       	ldd	r24, Y+24	; 0x18
    2d84:	98 2f       	mov	r25, r24
    2d86:	92 95       	swap	r25
    2d88:	90 7f       	andi	r25, 0xF0	; 240
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	89 0f       	add	r24, r25
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d92:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	62 e0       	ldi	r22, 0x02	; 2
    2d98:	c4 dc       	rcall	.-1656   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d9e:	4f e7       	ldi	r20, 0x7F	; 127
    2da0:	68 e0       	ldi	r22, 0x08	; 8
    2da2:	bf dc       	rcall	.-1666   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2da4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	64 e1       	ldi	r22, 0x14	; 20
    2dac:	12 de       	rcall	.-988    	; 0x29d2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2dae:	2f 85       	ldd	r18, Y+15	; 0x0f
    2db0:	38 89       	ldd	r19, Y+16	; 0x10
    2db2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2db6:	49 89       	ldd	r20, Y+17	; 0x11
    2db8:	62 e1       	ldi	r22, 0x12	; 18
    2dba:	e8 dc       	rcall	.-1584   	; 0x278c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
    2dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dc0:	4d 81       	ldd	r20, Y+5	; 0x05
    2dc2:	6a e1       	ldi	r22, 0x1A	; 26
    2dc4:	ae dc       	rcall	.-1700   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2dc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dca:	4d 85       	ldd	r20, Y+13	; 0x0d
    2dcc:	62 e0       	ldi	r22, 0x02	; 2
    2dce:	a9 dc       	rcall	.-1710   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    2dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd2:	8c 30       	cpi	r24, 0x0C	; 12
    2dd4:	29 f4       	brne	.+10     	; 0x2de0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	6a e1       	ldi	r22, 0x1A	; 26
    2dde:	f9 dd       	rcall	.-1038   	; 0x29d2 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
    2de0:	80 ed       	ldi	r24, 0xD0	; 208
    2de2:	97 e0       	ldi	r25, 0x07	; 7
    2de4:	9b 83       	std	Y+3, r25	; 0x03
    2de6:	8a 83       	std	Y+2, r24	; 0x02
    2de8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dea:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dec:	68 e0       	ldi	r22, 0x08	; 8
    2dee:	1a dd       	rcall	.-1484   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2df0:	8e 83       	std	Y+6, r24	; 0x06
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df6:	89 23       	and	r24, r25
    2df8:	88 23       	and	r24, r24
    2dfa:	c1 f4       	brne	.+48     	; 0x2e2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
    2dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dfe:	88 2f       	mov	r24, r24
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	81 70       	andi	r24, 0x01	; 1
    2e04:	99 27       	eor	r25, r25
    2e06:	89 2b       	or	r24, r25
    2e08:	11 f0       	breq	.+4      	; 0x2e0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	b4 c0       	rjmp	.+360    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9b 83       	std	Y+3, r25	; 0x03
    2e16:	8a 83       	std	Y+2, r24	; 0x02
    2e18:	21 e0       	ldi	r18, 0x01	; 1
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1e:	89 2b       	or	r24, r25
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	22 23       	and	r18, r18
    2e26:	01 f3       	breq	.-64     	; 0x2de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	a5 c0       	rjmp	.+330    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e2c:	00 00       	nop
    2e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e30:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e32:	6c e0       	ldi	r22, 0x0C	; 12
    2e34:	f7 dc       	rcall	.-1554   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e36:	8f 83       	std	Y+7, r24	; 0x07
    2e38:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	83 71       	andi	r24, 0x13	; 19
    2e40:	99 27       	eor	r25, r25
    2e42:	89 2b       	or	r24, r25
    2e44:	11 f0       	breq	.+4      	; 0x2e4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11e>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	96 c0       	rjmp	.+300    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e4a:	8a 89       	ldd	r24, Y+18	; 0x12
    2e4c:	9b 89       	ldd	r25, Y+19	; 0x13
    2e4e:	89 2b       	or	r24, r25
    2e50:	71 f1       	breq	.+92     	; 0x2eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e52:	8c 89       	ldd	r24, Y+20	; 0x14
    2e54:	9d 89       	ldd	r25, Y+21	; 0x15
    2e56:	89 2b       	or	r24, r25
    2e58:	51 f1       	breq	.+84     	; 0x2eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e5e:	64 e1       	ldi	r22, 0x14	; 20
    2e60:	e1 dc       	rcall	.-1598   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e62:	8e 83       	std	Y+6, r24	; 0x06
    2e64:	8c 89       	ldd	r24, Y+20	; 0x14
    2e66:	9d 89       	ldd	r25, Y+21	; 0x15
    2e68:	fc 01       	movw	r30, r24
    2e6a:	90 81       	ld	r25, Z
    2e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6e:	98 17       	cp	r25, r24
    2e70:	10 f4       	brcc	.+4      	; 0x2e76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
    2e72:	84 e0       	ldi	r24, 0x04	; 4
    2e74:	80 c0       	rjmp	.+256    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2e76:	8c 89       	ldd	r24, Y+20	; 0x14
    2e78:	9d 89       	ldd	r25, Y+21	; 0x15
    2e7a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	20 83       	st	Z, r18
    2e80:	2a 89       	ldd	r18, Y+18	; 0x12
    2e82:	3b 89       	ldd	r19, Y+19	; 0x13
    2e84:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e88:	08 8d       	ldd	r16, Y+24	; 0x18
    2e8a:	4e 81       	ldd	r20, Y+6	; 0x06
    2e8c:	62 e1       	ldi	r22, 0x12	; 18
    2e8e:	00 dd       	rcall	.-1536   	; 0x2890 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
    2e90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e92:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e94:	68 e1       	ldi	r22, 0x18	; 24
    2e96:	c6 dc       	rcall	.-1652   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    2e98:	87 70       	andi	r24, 0x07	; 7
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e9e:	9f 89       	ldd	r25, Y+23	; 0x17
    2ea0:	89 2b       	or	r24, r25
    2ea2:	29 f0       	breq	.+10     	; 0x2eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x182>
    2ea4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ea6:	9f 89       	ldd	r25, Y+23	; 0x17
    2ea8:	29 81       	ldd	r18, Y+1	; 0x01
    2eaa:	fc 01       	movw	r30, r24
    2eac:	20 83       	st	Z, r18
    2eae:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	88 70       	andi	r24, 0x08	; 8
    2eb6:	99 27       	eor	r25, r25
    2eb8:	89 2b       	or	r24, r25
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x194>
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	5b c0       	rjmp	.+182    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ec0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ec2:	9b 89       	ldd	r25, Y+19	; 0x13
    2ec4:	89 2b       	or	r24, r25
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x19e>
    2ec8:	55 c0       	rjmp	.+170    	; 0x2f74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2eca:	8c 89       	ldd	r24, Y+20	; 0x14
    2ecc:	9d 89       	ldd	r25, Y+21	; 0x15
    2ece:	89 2b       	or	r24, r25
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
    2ed2:	50 c0       	rjmp	.+160    	; 0x2f74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2ed4:	8e a1       	ldd	r24, Y+38	; 0x26
    2ed6:	88 23       	and	r24, r24
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b0>
    2eda:	4c c0       	rjmp	.+152    	; 0x2f74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2edc:	8c 89       	ldd	r24, Y+20	; 0x14
    2ede:	9d 89       	ldd	r25, Y+21	; 0x15
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	80 81       	ld	r24, Z
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	29 f4       	brne	.+10     	; 0x2ef2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	11 f4       	brne	.+4      	; 0x2ef2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
    2eee:	8f ef       	ldi	r24, 0xFF	; 255
    2ef0:	42 c0       	rjmp	.+132    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2ef2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ef4:	9d 89       	ldd	r25, Y+21	; 0x15
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	80 81       	ld	r24, Z
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	18 f0       	brcs	.+6      	; 0x2f04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d8>
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	88 23       	and	r24, r24
    2f02:	11 f0       	breq	.+4      	; 0x2f08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    2f04:	87 e0       	ldi	r24, 0x07	; 7
    2f06:	37 c0       	rjmp	.+110    	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f08:	8c 89       	ldd	r24, Y+20	; 0x14
    2f0a:	9d 89       	ldd	r25, Y+21	; 0x15
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	80 81       	ld	r24, Z
    2f10:	4e ef       	ldi	r20, 0xFE	; 254
    2f12:	48 0f       	add	r20, r24
    2f14:	9e 01       	movw	r18, r28
    2f16:	27 5f       	subi	r18, 0xF7	; 247
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	6a 89       	ldd	r22, Y+18	; 0x12
    2f1c:	7b 89       	ldd	r23, Y+19	; 0x13
    2f1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f20:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f22:	9d dd       	rcall	.-1222   	; 0x2a5e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2f24:	88 87       	std	Y+8, r24	; 0x08
    2f26:	88 85       	ldd	r24, Y+8	; 0x08
    2f28:	88 23       	and	r24, r24
    2f2a:	11 f0       	breq	.+4      	; 0x2f30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x204>
    2f2c:	88 85       	ldd	r24, Y+8	; 0x08
    2f2e:	23 c0       	rjmp	.+70     	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f30:	8c 89       	ldd	r24, Y+20	; 0x14
    2f32:	9d 89       	ldd	r25, Y+21	; 0x15
    2f34:	fc 01       	movw	r30, r24
    2f36:	80 81       	ld	r24, Z
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	02 97       	sbiw	r24, 0x02	; 2
    2f3e:	2a 89       	ldd	r18, Y+18	; 0x12
    2f40:	3b 89       	ldd	r19, Y+19	; 0x13
    2f42:	82 0f       	add	r24, r18
    2f44:	93 1f       	adc	r25, r19
    2f46:	fc 01       	movw	r30, r24
    2f48:	90 81       	ld	r25, Z
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	98 17       	cp	r25, r24
    2f4e:	81 f4       	brne	.+32     	; 0x2f70 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
    2f50:	8c 89       	ldd	r24, Y+20	; 0x14
    2f52:	9d 89       	ldd	r25, Y+21	; 0x15
    2f54:	fc 01       	movw	r30, r24
    2f56:	80 81       	ld	r24, Z
    2f58:	88 2f       	mov	r24, r24
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	2a 89       	ldd	r18, Y+18	; 0x12
    2f60:	3b 89       	ldd	r19, Y+19	; 0x13
    2f62:	82 0f       	add	r24, r18
    2f64:	93 1f       	adc	r25, r19
    2f66:	fc 01       	movw	r30, r24
    2f68:	90 81       	ld	r25, Z
    2f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f6c:	98 17       	cp	r25, r24
    2f6e:	11 f0       	breq	.+4      	; 0x2f74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    2f70:	87 e0       	ldi	r24, 0x07	; 7
    2f72:	01 c0       	rjmp	.+2      	; 0x2f76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24a>
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	68 96       	adiw	r28, 0x18	; 24
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	0f 91       	pop	r16
    2f88:	ff 90       	pop	r15
    2f8a:	ef 90       	pop	r14
    2f8c:	df 90       	pop	r13
    2f8e:	cf 90       	pop	r12
    2f90:	bf 90       	pop	r11
    2f92:	af 90       	pop	r10
    2f94:	8f 90       	pop	r8
    2f96:	08 95       	ret

00002f98 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	7c 83       	std	Y+4, r23	; 0x04
    2faa:	6b 83       	std	Y+3, r22	; 0x03
    2fac:	5e 83       	std	Y+6, r21	; 0x06
    2fae:	4d 83       	std	Y+5, r20	; 0x05
    2fb0:	2d 81       	ldd	r18, Y+5	; 0x05
    2fb2:	3e 81       	ldd	r19, Y+6	; 0x06
    2fb4:	4b 81       	ldd	r20, Y+3	; 0x03
    2fb6:	5c 81       	ldd	r21, Y+4	; 0x04
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	66 e2       	ldi	r22, 0x26	; 38
    2fbe:	09 d0       	rcall	.+18     	; 0x2fd2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    2fc0:	26 96       	adiw	r28, 0x06	; 6
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	08 95       	ret

00002fd2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2fd2:	af 92       	push	r10
    2fd4:	cf 92       	push	r12
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	29 97       	sbiw	r28, 0x09	; 9
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	9c 83       	std	Y+4, r25	; 0x04
    2ff4:	8b 83       	std	Y+3, r24	; 0x03
    2ff6:	6d 83       	std	Y+5, r22	; 0x05
    2ff8:	5f 83       	std	Y+7, r21	; 0x07
    2ffa:	4e 83       	std	Y+6, r20	; 0x06
    2ffc:	39 87       	std	Y+9, r19	; 0x09
    2ffe:	28 87       	std	Y+8, r18	; 0x08
    3000:	8e 81       	ldd	r24, Y+6	; 0x06
    3002:	9f 81       	ldd	r25, Y+7	; 0x07
    3004:	89 2b       	or	r24, r25
    3006:	31 f0       	breq	.+12     	; 0x3014 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    3008:	88 85       	ldd	r24, Y+8	; 0x08
    300a:	99 85       	ldd	r25, Y+9	; 0x09
    300c:	fc 01       	movw	r30, r24
    300e:	80 81       	ld	r24, Z
    3010:	82 30       	cpi	r24, 0x02	; 2
    3012:	10 f4       	brcc	.+4      	; 0x3018 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    3014:	84 e0       	ldi	r24, 0x04	; 4
    3016:	2a c0       	rjmp	.+84     	; 0x306c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	9c 81       	ldd	r25, Y+4	; 0x04
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	6c e1       	ldi	r22, 0x1C	; 28
    3020:	fa dc       	rcall	.-1548   	; 0x2a16 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    3022:	87 e0       	ldi	r24, 0x07	; 7
    3024:	8a 83       	std	Y+2, r24	; 0x02
    3026:	fe 01       	movw	r30, r28
    3028:	32 96       	adiw	r30, 0x02	; 2
    302a:	48 85       	ldd	r20, Y+8	; 0x08
    302c:	59 85       	ldd	r21, Y+9	; 0x09
    302e:	2e 81       	ldd	r18, Y+6	; 0x06
    3030:	3f 81       	ldd	r19, Y+7	; 0x07
    3032:	be 01       	movw	r22, r28
    3034:	6b 5f       	subi	r22, 0xFB	; 251
    3036:	7f 4f       	sbci	r23, 0xFF	; 255
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	a1 2c       	mov	r10, r1
    303e:	c1 2c       	mov	r12, r1
    3040:	7f 01       	movw	r14, r30
    3042:	8a 01       	movw	r16, r20
    3044:	41 e0       	ldi	r20, 0x01	; 1
    3046:	29 de       	rcall	.-942    	; 0x2c9a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	88 23       	and	r24, r24
    304e:	11 f0       	breq	.+4      	; 0x3054 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	0c c0       	rjmp	.+24     	; 0x306c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    3054:	88 85       	ldd	r24, Y+8	; 0x08
    3056:	99 85       	ldd	r25, Y+9	; 0x09
    3058:	fc 01       	movw	r30, r24
    305a:	80 81       	ld	r24, Z
    305c:	82 30       	cpi	r24, 0x02	; 2
    305e:	19 f4       	brne	.+6      	; 0x3066 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	88 23       	and	r24, r24
    3064:	11 f0       	breq	.+4      	; 0x306a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	01 c0       	rjmp	.+2      	; 0x306c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	29 96       	adiw	r28, 0x09	; 9
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	cf 90       	pop	r12
    3086:	af 90       	pop	r10
    3088:	08 95       	ret

0000308a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    308a:	af 92       	push	r10
    308c:	cf 92       	push	r12
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	a1 97       	sbiw	r28, 0x21	; 33
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	9e 8f       	std	Y+30, r25	; 0x1e
    30ac:	8d 8f       	std	Y+29, r24	; 0x1d
    30ae:	78 a3       	std	Y+32, r23	; 0x20
    30b0:	6f 8f       	std	Y+31, r22	; 0x1f
    30b2:	49 a3       	std	Y+33, r20	; 0x21
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	8c 83       	std	Y+4, r24	; 0x04
    30b8:	89 a1       	ldd	r24, Y+33	; 0x21
    30ba:	81 35       	cpi	r24, 0x51	; 81
    30bc:	10 f0       	brcs	.+4      	; 0x30c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    30be:	86 e0       	ldi	r24, 0x06	; 6
    30c0:	29 c2       	rjmp	.+1106   	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    30c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c6:	40 e8       	ldi	r20, 0x80	; 128
    30c8:	6c e1       	ldi	r22, 0x1C	; 28
    30ca:	a5 dc       	rcall	.-1718   	; 0x2a16 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
    30cc:	19 82       	std	Y+1, r1	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	88 23       	and	r24, r24
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    30d4:	14 c2       	rjmp	.+1064   	; 0x34fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x474>
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	91 05       	cpc	r25, r1
    30e0:	b1 f0       	breq	.+44     	; 0x310e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    30e2:	83 30       	cpi	r24, 0x03	; 3
    30e4:	91 05       	cpc	r25, r1
    30e6:	29 f1       	breq	.+74     	; 0x3132 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	49 f5       	brne	.+82     	; 0x313e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    30ec:	83 e9       	ldi	r24, 0x93	; 147
    30ee:	8a 8b       	std	Y+18, r24	; 0x12
    30f0:	1f 82       	std	Y+7, r1	; 0x07
    30f2:	89 a1       	ldd	r24, Y+33	; 0x21
    30f4:	88 23       	and	r24, r24
    30f6:	41 f0       	breq	.+16     	; 0x3108 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    30f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30fa:	98 a1       	ldd	r25, Y+32	; 0x20
    30fc:	fc 01       	movw	r30, r24
    30fe:	80 81       	ld	r24, Z
    3100:	85 30       	cpi	r24, 0x05	; 5
    3102:	10 f0       	brcs	.+4      	; 0x3108 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	01 c0       	rjmp	.+2      	; 0x310a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	8b 83       	std	Y+3, r24	; 0x03
    310c:	1a c0       	rjmp	.+52     	; 0x3142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    310e:	85 e9       	ldi	r24, 0x95	; 149
    3110:	8a 8b       	std	Y+18, r24	; 0x12
    3112:	83 e0       	ldi	r24, 0x03	; 3
    3114:	8f 83       	std	Y+7, r24	; 0x07
    3116:	89 a1       	ldd	r24, Y+33	; 0x21
    3118:	88 23       	and	r24, r24
    311a:	41 f0       	breq	.+16     	; 0x312c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    311c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    311e:	98 a1       	ldd	r25, Y+32	; 0x20
    3120:	fc 01       	movw	r30, r24
    3122:	80 81       	ld	r24, Z
    3124:	88 30       	cpi	r24, 0x08	; 8
    3126:	10 f0       	brcs	.+4      	; 0x312c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	01 c0       	rjmp	.+2      	; 0x312e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	8b 83       	std	Y+3, r24	; 0x03
    3130:	08 c0       	rjmp	.+16     	; 0x3142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    3132:	87 e9       	ldi	r24, 0x97	; 151
    3134:	8a 8b       	std	Y+18, r24	; 0x12
    3136:	86 e0       	ldi	r24, 0x06	; 6
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	1b 82       	std	Y+3, r1	; 0x03
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    313e:	85 e0       	ldi	r24, 0x05	; 5
    3140:	e9 c1       	rjmp	.+978    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3142:	8f 81       	ldd	r24, Y+7	; 0x07
    3144:	88 0f       	add	r24, r24
    3146:	88 0f       	add	r24, r24
    3148:	88 0f       	add	r24, r24
    314a:	99 a1       	ldd	r25, Y+33	; 0x21
    314c:	f9 2f       	mov	r31, r25
    314e:	f8 1b       	sub	r31, r24
    3150:	8f 2f       	mov	r24, r31
    3152:	88 87       	std	Y+8, r24	; 0x08
    3154:	88 85       	ldd	r24, Y+8	; 0x08
    3156:	88 23       	and	r24, r24
    3158:	0c f4       	brge	.+2      	; 0x315c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    315a:	18 86       	std	Y+8, r1	; 0x08
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	8e 83       	std	Y+6, r24	; 0x06
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	88 23       	and	r24, r24
    3164:	71 f0       	breq	.+28     	; 0x3182 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    3166:	8e 81       	ldd	r24, Y+6	; 0x06
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	98 0f       	add	r25, r24
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9e 01       	movw	r18, r28
    3174:	2e 5e       	subi	r18, 0xEE	; 238
    3176:	3f 4f       	sbci	r19, 0xFF	; 255
    3178:	82 0f       	add	r24, r18
    317a:	93 1f       	adc	r25, r19
    317c:	28 e8       	ldi	r18, 0x88	; 136
    317e:	fc 01       	movw	r30, r24
    3180:	20 83       	st	Z, r18
    3182:	88 85       	ldd	r24, Y+8	; 0x08
    3184:	88 23       	and	r24, r24
    3186:	0c f4       	brge	.+2      	; 0x318a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    3188:	89 5f       	subi	r24, 0xF9	; 249
    318a:	85 95       	asr	r24
    318c:	85 95       	asr	r24
    318e:	85 95       	asr	r24
    3190:	98 2f       	mov	r25, r24
    3192:	88 85       	ldd	r24, Y+8	; 0x08
    3194:	87 70       	andi	r24, 0x07	; 7
    3196:	88 23       	and	r24, r24
    3198:	11 f0       	breq	.+4      	; 0x319e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	89 0f       	add	r24, r25
    31a2:	8c 87       	std	Y+12, r24	; 0x0c
    31a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    31a6:	88 23       	and	r24, r24
    31a8:	99 f1       	breq	.+102    	; 0x3210 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	88 23       	and	r24, r24
    31ae:	11 f0       	breq	.+4      	; 0x31b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    31b0:	83 e0       	ldi	r24, 0x03	; 3
    31b2:	01 c0       	rjmp	.+2      	; 0x31b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    31b4:	84 e0       	ldi	r24, 0x04	; 4
    31b6:	8e 87       	std	Y+14, r24	; 0x0e
    31b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    31ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    31bc:	89 17       	cp	r24, r25
    31be:	10 f4       	brcc	.+4      	; 0x31c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    31c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c2:	8c 87       	std	Y+12, r24	; 0x0c
    31c4:	1d 82       	std	Y+5, r1	; 0x05
    31c6:	9d 81       	ldd	r25, Y+5	; 0x05
    31c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ca:	98 17       	cp	r25, r24
    31cc:	08 f5       	brcc	.+66     	; 0x3210 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    31ce:	8e 81       	ldd	r24, Y+6	; 0x06
    31d0:	91 e0       	ldi	r25, 0x01	; 1
    31d2:	98 0f       	add	r25, r24
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	2f 81       	ldd	r18, Y+7	; 0x07
    31dc:	42 2f       	mov	r20, r18
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	2d 81       	ldd	r18, Y+5	; 0x05
    31e2:	22 2f       	mov	r18, r18
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	24 0f       	add	r18, r20
    31e8:	35 1f       	adc	r19, r21
    31ea:	4f 8d       	ldd	r20, Y+31	; 0x1f
    31ec:	58 a1       	ldd	r21, Y+32	; 0x20
    31ee:	24 0f       	add	r18, r20
    31f0:	35 1f       	adc	r19, r21
    31f2:	2f 5f       	subi	r18, 0xFF	; 255
    31f4:	3f 4f       	sbci	r19, 0xFF	; 255
    31f6:	f9 01       	movw	r30, r18
    31f8:	40 81       	ld	r20, Z
    31fa:	9e 01       	movw	r18, r28
    31fc:	2e 5e       	subi	r18, 0xEE	; 238
    31fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3200:	82 0f       	add	r24, r18
    3202:	93 1f       	adc	r25, r19
    3204:	fc 01       	movw	r30, r24
    3206:	40 83       	st	Z, r20
    3208:	8d 81       	ldd	r24, Y+5	; 0x05
    320a:	8f 5f       	subi	r24, 0xFF	; 255
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	db cf       	rjmp	.-74     	; 0x31c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	88 23       	and	r24, r24
    3214:	19 f0       	breq	.+6      	; 0x321c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    3216:	88 85       	ldd	r24, Y+8	; 0x08
    3218:	88 5f       	subi	r24, 0xF8	; 248
    321a:	88 87       	std	Y+8, r24	; 0x08
    321c:	1a 82       	std	Y+2, r1	; 0x02
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	88 23       	and	r24, r24
    3222:	09 f0       	breq	.+2      	; 0x3226 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    3224:	f5 c0       	rjmp	.+490    	; 0x3410 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x386>
    3226:	88 85       	ldd	r24, Y+8	; 0x08
    3228:	80 32       	cpi	r24, 0x20	; 32
    322a:	3c f1       	brlt	.+78     	; 0x327a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    322c:	80 e7       	ldi	r24, 0x70	; 112
    322e:	8b 8b       	std	Y+19, r24	; 0x13
    3230:	9c 89       	ldd	r25, Y+20	; 0x14
    3232:	8d 89       	ldd	r24, Y+21	; 0x15
    3234:	98 27       	eor	r25, r24
    3236:	8e 89       	ldd	r24, Y+22	; 0x16
    3238:	98 27       	eor	r25, r24
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	89 27       	eor	r24, r25
    323e:	88 8f       	std	Y+24, r24	; 0x18
    3240:	ce 01       	movw	r24, r28
    3242:	42 96       	adiw	r24, 0x12	; 18
    3244:	9c 01       	movw	r18, r24
    3246:	29 5f       	subi	r18, 0xF9	; 249
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	be 01       	movw	r22, r28
    324c:	6e 5e       	subi	r22, 0xEE	; 238
    324e:	7f 4f       	sbci	r23, 0xFF	; 255
    3250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3252:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3254:	47 e0       	ldi	r20, 0x07	; 7
    3256:	03 dc       	rcall	.-2042   	; 0x2a5e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3258:	8f 87       	std	Y+15, r24	; 0x0f
    325a:	8f 85       	ldd	r24, Y+15	; 0x0f
    325c:	88 23       	and	r24, r24
    325e:	11 f0       	breq	.+4      	; 0x3264 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    3260:	8f 85       	ldd	r24, Y+15	; 0x0f
    3262:	58 c1       	rjmp	.+688    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3264:	1b 8e       	std	Y+27, r1	; 0x1b
    3266:	89 e0       	ldi	r24, 0x09	; 9
    3268:	89 87       	std	Y+9, r24	; 0x09
    326a:	ce 01       	movw	r24, r28
    326c:	42 96       	adiw	r24, 0x12	; 18
    326e:	06 96       	adiw	r24, 0x06	; 6
    3270:	9b 87       	std	Y+11, r25	; 0x0b
    3272:	8a 87       	std	Y+10, r24	; 0x0a
    3274:	83 e0       	ldi	r24, 0x03	; 3
    3276:	8c 8f       	std	Y+28, r24	; 0x1c
    3278:	33 c0       	rjmp	.+102    	; 0x32e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    327a:	88 85       	ldd	r24, Y+8	; 0x08
    327c:	87 78       	andi	r24, 0x87	; 135
    327e:	88 23       	and	r24, r24
    3280:	1c f4       	brge	.+6      	; 0x3288 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3282:	81 50       	subi	r24, 0x01	; 1
    3284:	88 6f       	ori	r24, 0xF8	; 248
    3286:	8f 5f       	subi	r24, 0xFF	; 255
    3288:	8b 8f       	std	Y+27, r24	; 0x1b
    328a:	88 85       	ldd	r24, Y+8	; 0x08
    328c:	88 23       	and	r24, r24
    328e:	0c f4       	brge	.+2      	; 0x3292 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    3290:	89 5f       	subi	r24, 0xF9	; 249
    3292:	85 95       	asr	r24
    3294:	85 95       	asr	r24
    3296:	85 95       	asr	r24
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	8e 5f       	subi	r24, 0xFE	; 254
    329e:	8e 83       	std	Y+6, r24	; 0x06
    32a0:	8e 81       	ldd	r24, Y+6	; 0x06
    32a2:	98 2f       	mov	r25, r24
    32a4:	92 95       	swap	r25
    32a6:	90 7f       	andi	r25, 0xF0	; 240
    32a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32aa:	89 0f       	add	r24, r25
    32ac:	8b 8b       	std	Y+19, r24	; 0x13
    32ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b0:	88 23       	and	r24, r24
    32b2:	11 f0       	breq	.+4      	; 0x32b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	9e 81       	ldd	r25, Y+6	; 0x06
    32bc:	89 0f       	add	r24, r25
    32be:	89 87       	std	Y+9, r24	; 0x09
    32c0:	8e 81       	ldd	r24, Y+6	; 0x06
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	9e 01       	movw	r18, r28
    32c8:	2e 5e       	subi	r18, 0xEE	; 238
    32ca:	3f 4f       	sbci	r19, 0xFF	; 255
    32cc:	82 0f       	add	r24, r18
    32ce:	93 1f       	adc	r25, r19
    32d0:	9b 87       	std	Y+11, r25	; 0x0b
    32d2:	8a 87       	std	Y+10, r24	; 0x0a
    32d4:	99 e0       	ldi	r25, 0x09	; 9
    32d6:	8e 81       	ldd	r24, Y+6	; 0x06
    32d8:	f9 2f       	mov	r31, r25
    32da:	f8 1b       	sub	r31, r24
    32dc:	8f 2f       	mov	r24, r31
    32de:	8c 8f       	std	Y+28, r24	; 0x1c
    32e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e2:	88 8b       	std	Y+16, r24	; 0x10
    32e4:	88 89       	ldd	r24, Y+16	; 0x10
    32e6:	98 2f       	mov	r25, r24
    32e8:	92 95       	swap	r25
    32ea:	90 7f       	andi	r25, 0xF0	; 240
    32ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ee:	29 2f       	mov	r18, r25
    32f0:	28 0f       	add	r18, r24
    32f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32f6:	42 2f       	mov	r20, r18
    32f8:	6a e1       	ldi	r22, 0x1A	; 26
    32fa:	13 da       	rcall	.-3034   	; 0x2722 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    32fc:	fe 01       	movw	r30, r28
    32fe:	7b 96       	adiw	r30, 0x1b	; 27
    3300:	ae 01       	movw	r20, r28
    3302:	44 5e       	subi	r20, 0xE4	; 228
    3304:	5f 4f       	sbci	r21, 0xFF	; 255
    3306:	2a 85       	ldd	r18, Y+10	; 0x0a
    3308:	3b 85       	ldd	r19, Y+11	; 0x0b
    330a:	be 01       	movw	r22, r28
    330c:	6e 5e       	subi	r22, 0xEE	; 238
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3312:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3314:	a1 2c       	mov	r10, r1
    3316:	c8 88       	ldd	r12, Y+16	; 0x10
    3318:	7f 01       	movw	r14, r30
    331a:	8a 01       	movw	r16, r20
    331c:	49 85       	ldd	r20, Y+9	; 0x09
    331e:	bd dc       	rcall	.-1670   	; 0x2c9a <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3320:	8f 87       	std	Y+15, r24	; 0x0f
    3322:	8f 85       	ldd	r24, Y+15	; 0x0f
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	09 f0       	breq	.+2      	; 0x332a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    3328:	65 c0       	rjmp	.+202    	; 0x33f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x36a>
    332a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    332c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    332e:	6c e1       	ldi	r22, 0x1C	; 28
    3330:	79 da       	rcall	.-2830   	; 0x2824 <_ZN7MFRC52216PCD_ReadRegisterEh>
    3332:	89 8b       	std	Y+17, r24	; 0x11
    3334:	89 89       	ldd	r24, Y+17	; 0x11
    3336:	88 2f       	mov	r24, r24
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	80 72       	andi	r24, 0x20	; 32
    333c:	99 27       	eor	r25, r25
    333e:	89 2b       	or	r24, r25
    3340:	11 f0       	breq	.+4      	; 0x3346 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	e7 c0       	rjmp	.+462    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3346:	89 89       	ldd	r24, Y+17	; 0x11
    3348:	8f 71       	andi	r24, 0x1F	; 31
    334a:	8d 87       	std	Y+13, r24	; 0x0d
    334c:	8d 85       	ldd	r24, Y+13	; 0x0d
    334e:	88 23       	and	r24, r24
    3350:	11 f4       	brne	.+4      	; 0x3356 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    3352:	80 e2       	ldi	r24, 0x20	; 32
    3354:	8d 87       	std	Y+13, r24	; 0x0d
    3356:	8d 85       	ldd	r24, Y+13	; 0x0d
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	88 85       	ldd	r24, Y+8	; 0x08
    335e:	08 2e       	mov	r0, r24
    3360:	00 0c       	add	r0, r0
    3362:	99 0b       	sbc	r25, r25
    3364:	82 17       	cp	r24, r18
    3366:	93 07       	cpc	r25, r19
    3368:	14 f0       	brlt	.+4      	; 0x336e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    336a:	85 e0       	ldi	r24, 0x05	; 5
    336c:	d3 c0       	rjmp	.+422    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    336e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3370:	88 87       	std	Y+8, r24	; 0x08
    3372:	88 85       	ldd	r24, Y+8	; 0x08
    3374:	08 2e       	mov	r0, r24
    3376:	00 0c       	add	r0, r0
    3378:	99 0b       	sbc	r25, r25
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	87 70       	andi	r24, 0x07	; 7
    337e:	90 78       	andi	r25, 0x80	; 128
    3380:	99 23       	and	r25, r25
    3382:	24 f4       	brge	.+8      	; 0x338c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x302>
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	88 6f       	ori	r24, 0xF8	; 248
    3388:	9f 6f       	ori	r25, 0xFF	; 255
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	8d 83       	std	Y+5, r24	; 0x05
    338e:	88 85       	ldd	r24, Y+8	; 0x08
    3390:	88 23       	and	r24, r24
    3392:	0c f4       	brge	.+2      	; 0x3396 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
    3394:	89 5f       	subi	r24, 0xF9	; 249
    3396:	85 95       	asr	r24
    3398:	85 95       	asr	r24
    339a:	85 95       	asr	r24
    339c:	98 2f       	mov	r25, r24
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	88 23       	and	r24, r24
    33a2:	11 f0       	breq	.+4      	; 0x33a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31e>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x320>
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	89 0f       	add	r24, r25
    33ac:	8f 5f       	subi	r24, 0xFF	; 255
    33ae:	8e 83       	std	Y+6, r24	; 0x06
    33b0:	8e 81       	ldd	r24, Y+6	; 0x06
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	2e 81       	ldd	r18, Y+6	; 0x06
    33b8:	22 2f       	mov	r18, r18
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	ae 01       	movw	r20, r28
    33be:	4e 5e       	subi	r20, 0xEE	; 238
    33c0:	5f 4f       	sbci	r21, 0xFF	; 255
    33c2:	24 0f       	add	r18, r20
    33c4:	35 1f       	adc	r19, r21
    33c6:	f9 01       	movw	r30, r18
    33c8:	20 81       	ld	r18, Z
    33ca:	62 2f       	mov	r22, r18
    33cc:	2d 81       	ldd	r18, Y+5	; 0x05
    33ce:	42 2f       	mov	r20, r18
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	21 e0       	ldi	r18, 0x01	; 1
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x352>
    33d8:	22 0f       	add	r18, r18
    33da:	33 1f       	adc	r19, r19
    33dc:	4a 95       	dec	r20
    33de:	e2 f7       	brpl	.-8      	; 0x33d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x34e>
    33e0:	26 2b       	or	r18, r22
    33e2:	42 2f       	mov	r20, r18
    33e4:	9e 01       	movw	r18, r28
    33e6:	2e 5e       	subi	r18, 0xEE	; 238
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	82 0f       	add	r24, r18
    33ec:	93 1f       	adc	r25, r19
    33ee:	fc 01       	movw	r30, r24
    33f0:	40 83       	st	Z, r20
    33f2:	15 cf       	rjmp	.-470    	; 0x321e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    33f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f6:	88 23       	and	r24, r24
    33f8:	11 f0       	breq	.+4      	; 0x33fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x374>
    33fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fc:	8b c0       	rjmp	.+278    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    33fe:	88 85       	ldd	r24, Y+8	; 0x08
    3400:	80 32       	cpi	r24, 0x20	; 32
    3402:	1c f0       	brlt	.+6      	; 0x340a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x380>
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	8a 83       	std	Y+2, r24	; 0x02
    3408:	0a cf       	rjmp	.-492    	; 0x321e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    340a:	80 e2       	ldi	r24, 0x20	; 32
    340c:	88 87       	std	Y+8, r24	; 0x08
    340e:	07 cf       	rjmp	.-498    	; 0x321e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    3410:	8c 89       	ldd	r24, Y+20	; 0x14
    3412:	88 38       	cpi	r24, 0x88	; 136
    3414:	11 f4       	brne	.+4      	; 0x341a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    3416:	83 e0       	ldi	r24, 0x03	; 3
    3418:	01 c0       	rjmp	.+2      	; 0x341c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x392>
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	8e 83       	std	Y+6, r24	; 0x06
    341e:	8c 89       	ldd	r24, Y+20	; 0x14
    3420:	88 38       	cpi	r24, 0x88	; 136
    3422:	11 f4       	brne	.+4      	; 0x3428 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x39e>
    3424:	83 e0       	ldi	r24, 0x03	; 3
    3426:	01 c0       	rjmp	.+2      	; 0x342a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    3428:	84 e0       	ldi	r24, 0x04	; 4
    342a:	8c 87       	std	Y+12, r24	; 0x0c
    342c:	1d 82       	std	Y+5, r1	; 0x05
    342e:	9d 81       	ldd	r25, Y+5	; 0x05
    3430:	8c 85       	ldd	r24, Y+12	; 0x0c
    3432:	98 17       	cp	r25, r24
    3434:	00 f5       	brcc	.+64     	; 0x3476 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ec>
    3436:	8f 81       	ldd	r24, Y+7	; 0x07
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	82 0f       	add	r24, r18
    3444:	93 1f       	adc	r25, r19
    3446:	2e 81       	ldd	r18, Y+6	; 0x06
    3448:	31 e0       	ldi	r19, 0x01	; 1
    344a:	32 0f       	add	r19, r18
    344c:	3e 83       	std	Y+6, r19	; 0x06
    344e:	22 2f       	mov	r18, r18
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	ae 01       	movw	r20, r28
    3454:	4e 5e       	subi	r20, 0xEE	; 238
    3456:	5f 4f       	sbci	r21, 0xFF	; 255
    3458:	24 0f       	add	r18, r20
    345a:	35 1f       	adc	r19, r21
    345c:	f9 01       	movw	r30, r18
    345e:	40 81       	ld	r20, Z
    3460:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3462:	38 a1       	ldd	r19, Y+32	; 0x20
    3464:	82 0f       	add	r24, r18
    3466:	93 1f       	adc	r25, r19
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	fc 01       	movw	r30, r24
    346c:	40 83       	st	Z, r20
    346e:	8d 81       	ldd	r24, Y+5	; 0x05
    3470:	8f 5f       	subi	r24, 0xFF	; 255
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	dc cf       	rjmp	.-72     	; 0x342e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a4>
    3476:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3478:	83 30       	cpi	r24, 0x03	; 3
    347a:	19 f4       	brne	.+6      	; 0x3482 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f8>
    347c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347e:	88 23       	and	r24, r24
    3480:	11 f0       	breq	.+4      	; 0x3486 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	47 c0       	rjmp	.+142    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    3486:	ce 01       	movw	r24, r28
    3488:	42 96       	adiw	r24, 0x12	; 18
    348a:	9c 01       	movw	r18, r24
    348c:	2e 5f       	subi	r18, 0xFE	; 254
    348e:	3f 4f       	sbci	r19, 0xFF	; 255
    3490:	6a 85       	ldd	r22, Y+10	; 0x0a
    3492:	7b 85       	ldd	r23, Y+11	; 0x0b
    3494:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3496:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3498:	41 e0       	ldi	r20, 0x01	; 1
    349a:	e1 da       	rcall	.-2622   	; 0x2a5e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    349c:	8f 87       	std	Y+15, r24	; 0x0f
    349e:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a0:	88 23       	and	r24, r24
    34a2:	11 f0       	breq	.+4      	; 0x34a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x41e>
    34a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a6:	36 c0       	rjmp	.+108    	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    34a8:	2c 89       	ldd	r18, Y+20	; 0x14
    34aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	fc 01       	movw	r30, r24
    34b2:	80 81       	ld	r24, Z
    34b4:	28 17       	cp	r18, r24
    34b6:	41 f4       	brne	.+16     	; 0x34c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43e>
    34b8:	2d 89       	ldd	r18, Y+21	; 0x15
    34ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    34bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    34be:	02 96       	adiw	r24, 0x02	; 2
    34c0:	fc 01       	movw	r30, r24
    34c2:	80 81       	ld	r24, Z
    34c4:	28 17       	cp	r18, r24
    34c6:	11 f0       	breq	.+4      	; 0x34cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x442>
    34c8:	87 e0       	ldi	r24, 0x07	; 7
    34ca:	24 c0       	rjmp	.+72     	; 0x3514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
    34cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    34d0:	fc 01       	movw	r30, r24
    34d2:	80 81       	ld	r24, Z
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	84 70       	andi	r24, 0x04	; 4
    34da:	99 27       	eor	r25, r25
    34dc:	89 2b       	or	r24, r25
    34de:	21 f0       	breq	.+8      	; 0x34e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x45e>
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	8f 5f       	subi	r24, 0xFF	; 255
    34e4:	8c 83       	std	Y+4, r24	; 0x04
    34e6:	f3 cd       	rjmp	.-1050   	; 0x30ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f0:	fc 01       	movw	r30, r24
    34f2:	20 81       	ld	r18, Z
    34f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f6:	98 a1       	ldd	r25, Y+32	; 0x20
    34f8:	fc 01       	movw	r30, r24
    34fa:	23 87       	std	Z+11, r18	; 0x0b
    34fc:	e8 cd       	rjmp	.-1072   	; 0x30ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	89 2f       	mov	r24, r25
    3502:	88 0f       	add	r24, r24
    3504:	89 0f       	add	r24, r25
    3506:	21 e0       	ldi	r18, 0x01	; 1
    3508:	28 0f       	add	r18, r24
    350a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    350c:	98 a1       	ldd	r25, Y+32	; 0x20
    350e:	fc 01       	movw	r30, r24
    3510:	20 83       	st	Z, r18
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	a1 96       	adiw	r28, 0x21	; 33
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	ff 90       	pop	r15
    352a:	ef 90       	pop	r14
    352c:	cf 90       	pop	r12
    352e:	af 90       	pop	r10
    3530:	08 95       	ret

00003532 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	00 d0       	rcall	.+0      	; 0x3538 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    3538:	00 d0       	rcall	.+0      	; 0x353a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    3542:	82 e0       	ldi	r24, 0x02	; 2
    3544:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    3546:	ae 01       	movw	r20, r28
    3548:	4c 5f       	subi	r20, 0xFC	; 252
    354a:	5f 4f       	sbci	r21, 0xFF	; 255
    354c:	9e 01       	movw	r18, r28
    354e:	2e 5f       	subi	r18, 0xFE	; 254
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	b9 01       	movw	r22, r18
    3558:	1f dd       	rcall	.-1474   	; 0x2f98 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    355a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	88 23       	and	r24, r24
    3560:	19 f0       	breq	.+6      	; 0x3568 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x36>
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	82 30       	cpi	r24, 0x02	; 2
    3566:	11 f4       	brne	.+4      	; 0x356c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3a>
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	01 c0       	rjmp	.+2      	; 0x356e <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x3c>
    356c:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    356e:	26 96       	adiw	r28, 0x06	; 6
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	df 91       	pop	r29
    357c:	cf 91       	pop	r28
    357e:	08 95       	ret

00003580 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	00 d0       	rcall	.+0      	; 0x3586 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	9b 83       	std	Y+3, r25	; 0x03
    358c:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    358e:	2a 81       	ldd	r18, Y+2	; 0x02
    3590:	3b 81       	ldd	r19, Y+3	; 0x03
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	9b 81       	ldd	r25, Y+3	; 0x03
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	b9 01       	movw	r22, r18
    359a:	77 dd       	rcall	.-1298   	; 0x308a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
    359c:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	99 81       	ldd	r25, Y+1	; 0x01
    35a2:	99 23       	and	r25, r25
    35a4:	09 f0       	breq	.+2      	; 0x35a8 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x28>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	08 95       	ret

000035b4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    35ba:	1f 92       	push	r1
    35bc:	1f 92       	push	r1
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	7b 83       	std	Y+3, r23	; 0x03
    35c6:	6a 83       	std	Y+2, r22	; 0x02
    35c8:	5d 83       	std	Y+5, r21	; 0x05
    35ca:	4c 83       	std	Y+4, r20	; 0x04
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	85 53       	subi	r24, 0x35	; 53
    35d4:	9c 4f       	sbci	r25, 0xFC	; 252
    35d6:	fc 01       	movw	r30, r24
    35d8:	80 81       	ld	r24, Z
    35da:	88 1f       	adc	r24, r24
    35dc:	88 27       	eor	r24, r24
    35de:	88 1f       	adc	r24, r24
    35e0:	88 23       	and	r24, r24
    35e2:	31 f0       	breq	.+12     	; 0x35f0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	9b 81       	ldd	r25, Y+3	; 0x03
    35e8:	fc 01       	movw	r30, r24
    35ea:	11 82       	std	Z+1, r1	; 0x01
    35ec:	10 82       	st	Z, r1
    35ee:	72 c0       	rjmp	.+228    	; 0x36d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	28 2f       	mov	r18, r24
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	c9 01       	movw	r24, r18
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	82 0f       	add	r24, r18
    35fe:	93 1f       	adc	r25, r19
    3600:	88 0f       	add	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	9c 01       	movw	r18, r24
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	85 53       	subi	r24, 0x35	; 53
    3612:	9c 4f       	sbci	r25, 0xFC	; 252
    3614:	fc 01       	movw	r30, r24
    3616:	80 81       	ld	r24, Z
    3618:	08 2e       	mov	r0, r24
    361a:	00 0c       	add	r0, r0
    361c:	99 0b       	sbc	r25, r25
    361e:	28 0f       	add	r18, r24
    3620:	39 1f       	adc	r19, r25
    3622:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <ServoCount>
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	28 17       	cp	r18, r24
    362c:	39 07       	cpc	r19, r25
    362e:	4c f5       	brge	.+82     	; 0x3682 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	c9 01       	movw	r24, r18
    3638:	88 0f       	add	r24, r24
    363a:	99 1f       	adc	r25, r25
    363c:	82 0f       	add	r24, r18
    363e:	93 1f       	adc	r25, r19
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	9c 01       	movw	r18, r24
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	88 2f       	mov	r24, r24
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	85 53       	subi	r24, 0x35	; 53
    3652:	9c 4f       	sbci	r25, 0xFC	; 252
    3654:	fc 01       	movw	r30, r24
    3656:	80 81       	ld	r24, Z
    3658:	08 2e       	mov	r0, r24
    365a:	00 0c       	add	r0, r0
    365c:	99 0b       	sbc	r25, r25
    365e:	28 0f       	add	r18, r24
    3660:	39 1f       	adc	r19, r25
    3662:	c9 01       	movw	r24, r18
    3664:	88 0f       	add	r24, r24
    3666:	99 1f       	adc	r25, r25
    3668:	82 0f       	add	r24, r18
    366a:	93 1f       	adc	r25, r19
    366c:	85 5c       	subi	r24, 0xC5	; 197
    366e:	9c 4f       	sbci	r25, 0xFC	; 252
    3670:	fc 01       	movw	r30, r24
    3672:	80 81       	ld	r24, Z
    3674:	86 fb       	bst	r24, 6
    3676:	88 27       	eor	r24, r24
    3678:	80 f9       	bld	r24, 0
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	11 f4       	brne	.+4      	; 0x3682 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	01 c0       	rjmp	.+2      	; 0x3684 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	88 23       	and	r24, r24
    3686:	31 f1       	breq	.+76     	; 0x36d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	c9 01       	movw	r24, r18
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	82 0f       	add	r24, r18
    3696:	93 1f       	adc	r25, r19
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	9c 01       	movw	r18, r24
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	88 2f       	mov	r24, r24
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	85 53       	subi	r24, 0x35	; 53
    36aa:	9c 4f       	sbci	r25, 0xFC	; 252
    36ac:	fc 01       	movw	r30, r24
    36ae:	80 81       	ld	r24, Z
    36b0:	08 2e       	mov	r0, r24
    36b2:	00 0c       	add	r0, r0
    36b4:	99 0b       	sbc	r25, r25
    36b6:	28 0f       	add	r18, r24
    36b8:	39 1f       	adc	r19, r25
    36ba:	c9 01       	movw	r24, r18
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	82 0f       	add	r24, r18
    36c2:	93 1f       	adc	r25, r19
    36c4:	85 5c       	subi	r24, 0xC5	; 197
    36c6:	9c 4f       	sbci	r25, 0xFC	; 252
    36c8:	fc 01       	movw	r30, r24
    36ca:	80 81       	ld	r24, Z
    36cc:	8f 73       	andi	r24, 0x3F	; 63
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	88 2f       	mov	r24, r24
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9c 01       	movw	r18, r24
    36dc:	25 53       	subi	r18, 0x35	; 53
    36de:	3c 4f       	sbci	r19, 0xFC	; 252
    36e0:	f9 01       	movw	r30, r18
    36e2:	20 81       	ld	r18, Z
    36e4:	2f 5f       	subi	r18, 0xFF	; 255
    36e6:	85 53       	subi	r24, 0x35	; 53
    36e8:	9c 4f       	sbci	r25, 0xFC	; 252
    36ea:	fc 01       	movw	r30, r24
    36ec:	20 83       	st	Z, r18
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	28 2f       	mov	r18, r24
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	c9 01       	movw	r24, r18
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	82 0f       	add	r24, r18
    36fc:	93 1f       	adc	r25, r19
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	9c 01       	movw	r18, r24
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	85 53       	subi	r24, 0x35	; 53
    3710:	9c 4f       	sbci	r25, 0xFC	; 252
    3712:	fc 01       	movw	r30, r24
    3714:	80 81       	ld	r24, Z
    3716:	08 2e       	mov	r0, r24
    3718:	00 0c       	add	r0, r0
    371a:	99 0b       	sbc	r25, r25
    371c:	28 0f       	add	r18, r24
    371e:	39 1f       	adc	r19, r25
    3720:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <ServoCount>
    3724:	88 2f       	mov	r24, r24
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	28 17       	cp	r18, r24
    372a:	39 07       	cpc	r19, r25
    372c:	5c f4       	brge	.+22     	; 0x3744 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	85 53       	subi	r24, 0x35	; 53
    3736:	9c 4f       	sbci	r25, 0xFC	; 252
    3738:	fc 01       	movw	r30, r24
    373a:	80 81       	ld	r24, Z
    373c:	8c 30       	cpi	r24, 0x0C	; 12
    373e:	14 f4       	brge	.+4      	; 0x3744 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	01 c0       	rjmp	.+2      	; 0x3746 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	88 23       	and	r24, r24
    3748:	09 f4       	brne	.+2      	; 0x374c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    374a:	7f c0       	rjmp	.+254    	; 0x384a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	9b 81       	ldd	r25, Y+3	; 0x03
    3750:	fc 01       	movw	r30, r24
    3752:	40 81       	ld	r20, Z
    3754:	51 81       	ldd	r21, Z+1	; 0x01
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	28 2f       	mov	r18, r24
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	c9 01       	movw	r24, r18
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	82 0f       	add	r24, r18
    3764:	93 1f       	adc	r25, r19
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	88 0f       	add	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	9c 01       	movw	r18, r24
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	88 2f       	mov	r24, r24
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	85 53       	subi	r24, 0x35	; 53
    3778:	9c 4f       	sbci	r25, 0xFC	; 252
    377a:	fc 01       	movw	r30, r24
    377c:	80 81       	ld	r24, Z
    377e:	08 2e       	mov	r0, r24
    3780:	00 0c       	add	r0, r0
    3782:	99 0b       	sbc	r25, r25
    3784:	28 0f       	add	r18, r24
    3786:	39 1f       	adc	r19, r25
    3788:	c9 01       	movw	r24, r18
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	84 5c       	subi	r24, 0xC4	; 196
    3794:	9c 4f       	sbci	r25, 0xFC	; 252
    3796:	fc 01       	movw	r30, r24
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	9a 01       	movw	r18, r20
    379e:	28 0f       	add	r18, r24
    37a0:	39 1f       	adc	r19, r25
    37a2:	8c 81       	ldd	r24, Y+4	; 0x04
    37a4:	9d 81       	ldd	r25, Y+5	; 0x05
    37a6:	fc 01       	movw	r30, r24
    37a8:	31 83       	std	Z+1, r19	; 0x01
    37aa:	20 83       	st	Z, r18
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	28 2f       	mov	r18, r24
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	c9 01       	movw	r24, r18
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	82 0f       	add	r24, r18
    37ba:	93 1f       	adc	r25, r19
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	9c 01       	movw	r18, r24
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	88 2f       	mov	r24, r24
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	85 53       	subi	r24, 0x35	; 53
    37ce:	9c 4f       	sbci	r25, 0xFC	; 252
    37d0:	fc 01       	movw	r30, r24
    37d2:	80 81       	ld	r24, Z
    37d4:	08 2e       	mov	r0, r24
    37d6:	00 0c       	add	r0, r0
    37d8:	99 0b       	sbc	r25, r25
    37da:	28 0f       	add	r18, r24
    37dc:	39 1f       	adc	r19, r25
    37de:	c9 01       	movw	r24, r18
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	82 0f       	add	r24, r18
    37e6:	93 1f       	adc	r25, r19
    37e8:	85 5c       	subi	r24, 0xC5	; 197
    37ea:	9c 4f       	sbci	r25, 0xFC	; 252
    37ec:	fc 01       	movw	r30, r24
    37ee:	80 81       	ld	r24, Z
    37f0:	86 fb       	bst	r24, 6
    37f2:	88 27       	eor	r24, r24
    37f4:	80 f9       	bld	r24, 0
    37f6:	88 23       	and	r24, r24
    37f8:	09 f4       	brne	.+2      	; 0x37fc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    37fa:	51 c0       	rjmp	.+162    	; 0x389e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	28 2f       	mov	r18, r24
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	c9 01       	movw	r24, r18
    3804:	88 0f       	add	r24, r24
    3806:	99 1f       	adc	r25, r25
    3808:	82 0f       	add	r24, r18
    380a:	93 1f       	adc	r25, r19
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	9c 01       	movw	r18, r24
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	88 2f       	mov	r24, r24
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	85 53       	subi	r24, 0x35	; 53
    381e:	9c 4f       	sbci	r25, 0xFC	; 252
    3820:	fc 01       	movw	r30, r24
    3822:	80 81       	ld	r24, Z
    3824:	08 2e       	mov	r0, r24
    3826:	00 0c       	add	r0, r0
    3828:	99 0b       	sbc	r25, r25
    382a:	28 0f       	add	r18, r24
    382c:	39 1f       	adc	r19, r25
    382e:	c9 01       	movw	r24, r18
    3830:	88 0f       	add	r24, r24
    3832:	99 1f       	adc	r25, r25
    3834:	82 0f       	add	r24, r18
    3836:	93 1f       	adc	r25, r19
    3838:	85 5c       	subi	r24, 0xC5	; 197
    383a:	9c 4f       	sbci	r25, 0xFC	; 252
    383c:	fc 01       	movw	r30, r24
    383e:	80 81       	ld	r24, Z
    3840:	8f 73       	andi	r24, 0x3F	; 63
    3842:	61 e0       	ldi	r22, 0x01	; 1
    3844:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    3848:	2a c0       	rjmp	.+84     	; 0x389e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	9b 81       	ldd	r25, Y+3	; 0x03
    384e:	fc 01       	movw	r30, r24
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	04 96       	adiw	r24, 0x04	; 4
    3856:	21 e0       	ldi	r18, 0x01	; 1
    3858:	80 34       	cpi	r24, 0x40	; 64
    385a:	9c 49       	sbci	r25, 0x9C	; 156
    385c:	08 f0       	brcs	.+2      	; 0x3860 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	22 23       	and	r18, r18
    3862:	41 f0       	breq	.+16     	; 0x3874 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    3864:	8c 81       	ldd	r24, Y+4	; 0x04
    3866:	9d 81       	ldd	r25, Y+5	; 0x05
    3868:	20 e4       	ldi	r18, 0x40	; 64
    386a:	3c e9       	ldi	r19, 0x9C	; 156
    386c:	fc 01       	movw	r30, r24
    386e:	31 83       	std	Z+1, r19	; 0x01
    3870:	20 83       	st	Z, r18
    3872:	0d c0       	rjmp	.+26     	; 0x388e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    3874:	8a 81       	ldd	r24, Y+2	; 0x02
    3876:	9b 81       	ldd	r25, Y+3	; 0x03
    3878:	fc 01       	movw	r30, r24
    387a:	80 81       	ld	r24, Z
    387c:	91 81       	ldd	r25, Z+1	; 0x01
    387e:	9c 01       	movw	r18, r24
    3880:	2c 5f       	subi	r18, 0xFC	; 252
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	8c 81       	ldd	r24, Y+4	; 0x04
    3886:	9d 81       	ldd	r25, Y+5	; 0x05
    3888:	fc 01       	movw	r30, r24
    388a:	31 83       	std	Z+1, r19	; 0x01
    388c:	20 83       	st	Z, r18
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	88 2f       	mov	r24, r24
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	85 53       	subi	r24, 0x35	; 53
    3896:	9c 4f       	sbci	r25, 0xFC	; 252
    3898:	2f ef       	ldi	r18, 0xFF	; 255
    389a:	fc 01       	movw	r30, r24
    389c:	20 83       	st	Z, r18
    389e:	00 00       	nop
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	08 95       	ret

000038b0 <__vector_17>:
    38b0:	1f 92       	push	r1
    38b2:	0f 92       	push	r0
    38b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    38b8:	0f 92       	push	r0
    38ba:	11 24       	eor	r1, r1
    38bc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    38c0:	0f 92       	push	r0
    38c2:	2f 93       	push	r18
    38c4:	3f 93       	push	r19
    38c6:	4f 93       	push	r20
    38c8:	5f 93       	push	r21
    38ca:	6f 93       	push	r22
    38cc:	7f 93       	push	r23
    38ce:	8f 93       	push	r24
    38d0:	9f 93       	push	r25
    38d2:	af 93       	push	r26
    38d4:	bf 93       	push	r27
    38d6:	ef 93       	push	r30
    38d8:	ff 93       	push	r31
    38da:	cf 93       	push	r28
    38dc:	df 93       	push	r29
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	48 e8       	ldi	r20, 0x88	; 136
    38e4:	50 e0       	ldi	r21, 0x00	; 0
    38e6:	64 e8       	ldi	r22, 0x84	; 132
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	63 de       	rcall	.-826    	; 0x35b4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    38ee:	00 00       	nop
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	ff 91       	pop	r31
    38f6:	ef 91       	pop	r30
    38f8:	bf 91       	pop	r27
    38fa:	af 91       	pop	r26
    38fc:	9f 91       	pop	r25
    38fe:	8f 91       	pop	r24
    3900:	7f 91       	pop	r23
    3902:	6f 91       	pop	r22
    3904:	5f 91       	pop	r21
    3906:	4f 91       	pop	r20
    3908:	3f 91       	pop	r19
    390a:	2f 91       	pop	r18
    390c:	0f 90       	pop	r0
    390e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3912:	0f 90       	pop	r0
    3914:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3918:	0f 90       	pop	r0
    391a:	1f 90       	pop	r1
    391c:	18 95       	reti

0000391e <__vector_32>:
    391e:	1f 92       	push	r1
    3920:	0f 92       	push	r0
    3922:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3926:	0f 92       	push	r0
    3928:	11 24       	eor	r1, r1
    392a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    392e:	0f 92       	push	r0
    3930:	2f 93       	push	r18
    3932:	3f 93       	push	r19
    3934:	4f 93       	push	r20
    3936:	5f 93       	push	r21
    3938:	6f 93       	push	r22
    393a:	7f 93       	push	r23
    393c:	8f 93       	push	r24
    393e:	9f 93       	push	r25
    3940:	af 93       	push	r26
    3942:	bf 93       	push	r27
    3944:	ef 93       	push	r30
    3946:	ff 93       	push	r31
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	48 e9       	ldi	r20, 0x98	; 152
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	64 e9       	ldi	r22, 0x94	; 148
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	82 e0       	ldi	r24, 0x02	; 2
    395a:	2c de       	rcall	.-936    	; 0x35b4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    395c:	00 00       	nop
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	ff 91       	pop	r31
    3964:	ef 91       	pop	r30
    3966:	bf 91       	pop	r27
    3968:	af 91       	pop	r26
    396a:	9f 91       	pop	r25
    396c:	8f 91       	pop	r24
    396e:	7f 91       	pop	r23
    3970:	6f 91       	pop	r22
    3972:	5f 91       	pop	r21
    3974:	4f 91       	pop	r20
    3976:	3f 91       	pop	r19
    3978:	2f 91       	pop	r18
    397a:	0f 90       	pop	r0
    397c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3980:	0f 90       	pop	r0
    3982:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3986:	0f 90       	pop	r0
    3988:	1f 90       	pop	r1
    398a:	18 95       	reti

0000398c <__vector_42>:
    398c:	1f 92       	push	r1
    398e:	0f 92       	push	r0
    3990:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3994:	0f 92       	push	r0
    3996:	11 24       	eor	r1, r1
    3998:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    399c:	0f 92       	push	r0
    399e:	2f 93       	push	r18
    39a0:	3f 93       	push	r19
    39a2:	4f 93       	push	r20
    39a4:	5f 93       	push	r21
    39a6:	6f 93       	push	r22
    39a8:	7f 93       	push	r23
    39aa:	8f 93       	push	r24
    39ac:	9f 93       	push	r25
    39ae:	af 93       	push	r26
    39b0:	bf 93       	push	r27
    39b2:	ef 93       	push	r30
    39b4:	ff 93       	push	r31
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	48 ea       	ldi	r20, 0xA8	; 168
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	64 ea       	ldi	r22, 0xA4	; 164
    39c4:	70 e0       	ldi	r23, 0x00	; 0
    39c6:	83 e0       	ldi	r24, 0x03	; 3
    39c8:	f5 dd       	rcall	.-1046   	; 0x35b4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    39ca:	00 00       	nop
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	ff 91       	pop	r31
    39d2:	ef 91       	pop	r30
    39d4:	bf 91       	pop	r27
    39d6:	af 91       	pop	r26
    39d8:	9f 91       	pop	r25
    39da:	8f 91       	pop	r24
    39dc:	7f 91       	pop	r23
    39de:	6f 91       	pop	r22
    39e0:	5f 91       	pop	r21
    39e2:	4f 91       	pop	r20
    39e4:	3f 91       	pop	r19
    39e6:	2f 91       	pop	r18
    39e8:	0f 90       	pop	r0
    39ea:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    39ee:	0f 90       	pop	r0
    39f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    39f4:	0f 90       	pop	r0
    39f6:	1f 90       	pop	r1
    39f8:	18 95       	reti

000039fa <__vector_47>:
    39fa:	1f 92       	push	r1
    39fc:	0f 92       	push	r0
    39fe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a02:	0f 92       	push	r0
    3a04:	11 24       	eor	r1, r1
    3a06:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a0a:	0f 92       	push	r0
    3a0c:	2f 93       	push	r18
    3a0e:	3f 93       	push	r19
    3a10:	4f 93       	push	r20
    3a12:	5f 93       	push	r21
    3a14:	6f 93       	push	r22
    3a16:	7f 93       	push	r23
    3a18:	8f 93       	push	r24
    3a1a:	9f 93       	push	r25
    3a1c:	af 93       	push	r26
    3a1e:	bf 93       	push	r27
    3a20:	ef 93       	push	r30
    3a22:	ff 93       	push	r31
    3a24:	cf 93       	push	r28
    3a26:	df 93       	push	r29
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	48 e2       	ldi	r20, 0x28	; 40
    3a2e:	51 e0       	ldi	r21, 0x01	; 1
    3a30:	64 e2       	ldi	r22, 0x24	; 36
    3a32:	71 e0       	ldi	r23, 0x01	; 1
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	be dd       	rcall	.-1156   	; 0x35b4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    3a38:	00 00       	nop
    3a3a:	df 91       	pop	r29
    3a3c:	cf 91       	pop	r28
    3a3e:	ff 91       	pop	r31
    3a40:	ef 91       	pop	r30
    3a42:	bf 91       	pop	r27
    3a44:	af 91       	pop	r26
    3a46:	9f 91       	pop	r25
    3a48:	8f 91       	pop	r24
    3a4a:	7f 91       	pop	r23
    3a4c:	6f 91       	pop	r22
    3a4e:	5f 91       	pop	r21
    3a50:	4f 91       	pop	r20
    3a52:	3f 91       	pop	r19
    3a54:	2f 91       	pop	r18
    3a56:	0f 90       	pop	r0
    3a58:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    3a5c:	0f 90       	pop	r0
    3a5e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    3a62:	0f 90       	pop	r0
    3a64:	1f 90       	pop	r1
    3a66:	18 95       	reti

00003a68 <_ZL7initISR18timer16_Sequence_t>:
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	1f 92       	push	r1
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	81 30       	cpi	r24, 0x01	; 1
    3a78:	01 f5       	brne	.+64     	; 0x3aba <_ZL7initISR18timer16_Sequence_t+0x52>
    3a7a:	80 e8       	ldi	r24, 0x80	; 128
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	fc 01       	movw	r30, r24
    3a80:	10 82       	st	Z, r1
    3a82:	81 e8       	ldi	r24, 0x81	; 129
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	22 e0       	ldi	r18, 0x02	; 2
    3a88:	fc 01       	movw	r30, r24
    3a8a:	20 83       	st	Z, r18
    3a8c:	84 e8       	ldi	r24, 0x84	; 132
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	fc 01       	movw	r30, r24
    3a92:	11 82       	std	Z+1, r1	; 0x01
    3a94:	10 82       	st	Z, r1
    3a96:	86 e3       	ldi	r24, 0x36	; 54
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	26 e3       	ldi	r18, 0x36	; 54
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	f9 01       	movw	r30, r18
    3aa0:	20 81       	ld	r18, Z
    3aa2:	22 60       	ori	r18, 0x02	; 2
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	20 83       	st	Z, r18
    3aa8:	8f e6       	ldi	r24, 0x6F	; 111
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	2f e6       	ldi	r18, 0x6F	; 111
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	f9 01       	movw	r30, r18
    3ab2:	20 81       	ld	r18, Z
    3ab4:	22 60       	ori	r18, 0x02	; 2
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	20 83       	st	Z, r18
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	82 30       	cpi	r24, 0x02	; 2
    3abe:	c1 f4       	brne	.+48     	; 0x3af0 <_ZL7initISR18timer16_Sequence_t+0x88>
    3ac0:	80 e9       	ldi	r24, 0x90	; 144
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	10 82       	st	Z, r1
    3ac8:	81 e9       	ldi	r24, 0x91	; 145
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	22 e0       	ldi	r18, 0x02	; 2
    3ace:	fc 01       	movw	r30, r24
    3ad0:	20 83       	st	Z, r18
    3ad2:	84 e9       	ldi	r24, 0x94	; 148
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	11 82       	std	Z+1, r1	; 0x01
    3ada:	10 82       	st	Z, r1
    3adc:	88 e3       	ldi	r24, 0x38	; 56
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	22 e0       	ldi	r18, 0x02	; 2
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	20 83       	st	Z, r18
    3ae6:	81 e7       	ldi	r24, 0x71	; 113
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	22 e0       	ldi	r18, 0x02	; 2
    3aec:	fc 01       	movw	r30, r24
    3aee:	20 83       	st	Z, r18
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	83 30       	cpi	r24, 0x03	; 3
    3af4:	c1 f4       	brne	.+48     	; 0x3b26 <_ZL7initISR18timer16_Sequence_t+0xbe>
    3af6:	80 ea       	ldi	r24, 0xA0	; 160
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	fc 01       	movw	r30, r24
    3afc:	10 82       	st	Z, r1
    3afe:	81 ea       	ldi	r24, 0xA1	; 161
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	22 e0       	ldi	r18, 0x02	; 2
    3b04:	fc 01       	movw	r30, r24
    3b06:	20 83       	st	Z, r18
    3b08:	84 ea       	ldi	r24, 0xA4	; 164
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	11 82       	std	Z+1, r1	; 0x01
    3b10:	10 82       	st	Z, r1
    3b12:	89 e3       	ldi	r24, 0x39	; 57
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	22 e0       	ldi	r18, 0x02	; 2
    3b18:	fc 01       	movw	r30, r24
    3b1a:	20 83       	st	Z, r18
    3b1c:	82 e7       	ldi	r24, 0x72	; 114
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	22 e0       	ldi	r18, 0x02	; 2
    3b22:	fc 01       	movw	r30, r24
    3b24:	20 83       	st	Z, r18
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	88 23       	and	r24, r24
    3b2a:	c1 f4       	brne	.+48     	; 0x3b5c <_ZL7initISR18timer16_Sequence_t+0xf4>
    3b2c:	80 e2       	ldi	r24, 0x20	; 32
    3b2e:	91 e0       	ldi	r25, 0x01	; 1
    3b30:	fc 01       	movw	r30, r24
    3b32:	10 82       	st	Z, r1
    3b34:	81 e2       	ldi	r24, 0x21	; 33
    3b36:	91 e0       	ldi	r25, 0x01	; 1
    3b38:	22 e0       	ldi	r18, 0x02	; 2
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	20 83       	st	Z, r18
    3b3e:	84 e2       	ldi	r24, 0x24	; 36
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	fc 01       	movw	r30, r24
    3b44:	11 82       	std	Z+1, r1	; 0x01
    3b46:	10 82       	st	Z, r1
    3b48:	8a e3       	ldi	r24, 0x3A	; 58
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	22 e0       	ldi	r18, 0x02	; 2
    3b4e:	fc 01       	movw	r30, r24
    3b50:	20 83       	st	Z, r18
    3b52:	83 e7       	ldi	r24, 0x73	; 115
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	22 e0       	ldi	r18, 0x02	; 2
    3b58:	fc 01       	movw	r30, r24
    3b5a:	20 83       	st	Z, r18
    3b5c:	00 00       	nop
    3b5e:	0f 90       	pop	r0
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <_ZL13isTimerActive18timer16_Sequence_t>:
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	1f 92       	push	r1
    3b6c:	1f 92       	push	r1
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	8a 83       	std	Y+2, r24	; 0x02
    3b74:	19 82       	std	Y+1, r1	; 0x01
    3b76:	89 81       	ldd	r24, Y+1	; 0x01
    3b78:	8c 30       	cpi	r24, 0x0C	; 12
    3b7a:	30 f5       	brcc	.+76     	; 0x3bc8 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    3b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7e:	28 2f       	mov	r18, r24
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	c9 01       	movw	r24, r18
    3b84:	88 0f       	add	r24, r24
    3b86:	99 1f       	adc	r25, r25
    3b88:	82 0f       	add	r24, r18
    3b8a:	93 1f       	adc	r25, r19
    3b8c:	88 0f       	add	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	88 0f       	add	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	9c 01       	movw	r18, r24
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	28 0f       	add	r18, r24
    3b9e:	39 1f       	adc	r19, r25
    3ba0:	c9 01       	movw	r24, r18
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	82 0f       	add	r24, r18
    3ba8:	93 1f       	adc	r25, r19
    3baa:	85 5c       	subi	r24, 0xC5	; 197
    3bac:	9c 4f       	sbci	r25, 0xFC	; 252
    3bae:	fc 01       	movw	r30, r24
    3bb0:	80 81       	ld	r24, Z
    3bb2:	86 fb       	bst	r24, 6
    3bb4:	88 27       	eor	r24, r24
    3bb6:	80 f9       	bld	r24, 0
    3bb8:	81 30       	cpi	r24, 0x01	; 1
    3bba:	11 f4       	brne	.+4      	; 0x3bc0 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	05 c0       	rjmp	.+10     	; 0x3bca <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	8f 5f       	subi	r24, 0xFF	; 255
    3bc4:	89 83       	std	Y+1, r24	; 0x01
    3bc6:	d7 cf       	rjmp	.-82     	; 0x3b76 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	08 95       	ret

00003bd4 <_ZN5ServoC1Ev>:
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	1f 92       	push	r1
    3bda:	1f 92       	push	r1
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	9a 83       	std	Y+2, r25	; 0x02
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <ServoCount>
    3be8:	80 33       	cpi	r24, 0x30	; 48
    3bea:	e8 f4       	brcc	.+58     	; 0x3c26 <_ZN5ServoC1Ev+0x52>
    3bec:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <ServoCount>
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	82 0f       	add	r24, r18
    3bf4:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <ServoCount>
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	20 83       	st	Z, r18
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	9a 81       	ldd	r25, Y+2	; 0x02
    3c04:	fc 01       	movw	r30, r24
    3c06:	80 81       	ld	r24, Z
    3c08:	28 2f       	mov	r18, r24
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	c9 01       	movw	r24, r18
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	82 0f       	add	r24, r18
    3c14:	93 1f       	adc	r25, r19
    3c16:	84 5c       	subi	r24, 0xC4	; 196
    3c18:	9c 4f       	sbci	r25, 0xFC	; 252
    3c1a:	28 eb       	ldi	r18, 0xB8	; 184
    3c1c:	3b e0       	ldi	r19, 0x0B	; 11
    3c1e:	fc 01       	movw	r30, r24
    3c20:	31 83       	std	Z+1, r19	; 0x01
    3c22:	20 83       	st	Z, r18
    3c24:	05 c0       	rjmp	.+10     	; 0x3c30 <_ZN5ServoC1Ev+0x5c>
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	2f ef       	ldi	r18, 0xFF	; 255
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	20 83       	st	Z, r18
    3c30:	00 00       	nop
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <_ZN5Servo6attachEi>:
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <_ZN5Servo6attachEi+0x6>
    3c42:	1f 92       	push	r1
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	9a 83       	std	Y+2, r25	; 0x02
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	7c 83       	std	Y+4, r23	; 0x04
    3c4e:	6b 83       	std	Y+3, r22	; 0x03
    3c50:	6b 81       	ldd	r22, Y+3	; 0x03
    3c52:	7c 81       	ldd	r23, Y+4	; 0x04
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	20 e6       	ldi	r18, 0x60	; 96
    3c5a:	39 e0       	ldi	r19, 0x09	; 9
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	52 e0       	ldi	r21, 0x02	; 2
    3c60:	07 d0       	rcall	.+14     	; 0x3c70 <_ZN5Servo6attachEiii>
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	08 95       	ret

00003c70 <_ZN5Servo6attachEiii>:
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	29 97       	sbiw	r28, 0x09	; 9
    3c7a:	0f b6       	in	r0, 0x3f	; 63
    3c7c:	f8 94       	cli
    3c7e:	de bf       	out	0x3e, r29	; 62
    3c80:	0f be       	out	0x3f, r0	; 63
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	9b 83       	std	Y+3, r25	; 0x03
    3c86:	8a 83       	std	Y+2, r24	; 0x02
    3c88:	7d 83       	std	Y+5, r23	; 0x05
    3c8a:	6c 83       	std	Y+4, r22	; 0x04
    3c8c:	5f 83       	std	Y+7, r21	; 0x07
    3c8e:	4e 83       	std	Y+6, r20	; 0x06
    3c90:	39 87       	std	Y+9, r19	; 0x09
    3c92:	28 87       	std	Y+8, r18	; 0x08
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	fc 01       	movw	r30, r24
    3c9a:	80 81       	ld	r24, Z
    3c9c:	80 33       	cpi	r24, 0x30	; 48
    3c9e:	08 f0       	brcs	.+2      	; 0x3ca2 <_ZN5Servo6attachEiii+0x32>
    3ca0:	6b c0       	rjmp	.+214    	; 0x3d78 <_ZN5Servo6attachEiii+0x108>
    3ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca4:	61 e0       	ldi	r22, 0x01	; 1
    3ca6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	9b 81       	ldd	r25, Y+3	; 0x03
    3cae:	fc 01       	movw	r30, r24
    3cb0:	80 81       	ld	r24, Z
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	48 2f       	mov	r20, r24
    3cba:	4f 73       	andi	r20, 0x3F	; 63
    3cbc:	c9 01       	movw	r24, r18
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	82 0f       	add	r24, r18
    3cc4:	93 1f       	adc	r25, r19
    3cc6:	85 5c       	subi	r24, 0xC5	; 197
    3cc8:	9c 4f       	sbci	r25, 0xFC	; 252
    3cca:	24 2f       	mov	r18, r20
    3ccc:	2f 73       	andi	r18, 0x3F	; 63
    3cce:	fc 01       	movw	r30, r24
    3cd0:	30 81       	ld	r19, Z
    3cd2:	30 7c       	andi	r19, 0xC0	; 192
    3cd4:	23 2b       	or	r18, r19
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	20 83       	st	Z, r18
    3cda:	20 e2       	ldi	r18, 0x20	; 32
    3cdc:	32 e0       	ldi	r19, 0x02	; 2
    3cde:	8e 81       	ldd	r24, Y+6	; 0x06
    3ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ce2:	a9 01       	movw	r20, r18
    3ce4:	48 1b       	sub	r20, r24
    3ce6:	59 0b       	sbc	r21, r25
    3ce8:	ca 01       	movw	r24, r20
    3cea:	99 23       	and	r25, r25
    3cec:	0c f4       	brge	.+2      	; 0x3cf0 <_ZN5Servo6attachEiii+0x80>
    3cee:	03 96       	adiw	r24, 0x03	; 3
    3cf0:	95 95       	asr	r25
    3cf2:	87 95       	ror	r24
    3cf4:	95 95       	asr	r25
    3cf6:	87 95       	ror	r24
    3cf8:	28 2f       	mov	r18, r24
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cfe:	fc 01       	movw	r30, r24
    3d00:	21 83       	std	Z+1, r18	; 0x01
    3d02:	20 e6       	ldi	r18, 0x60	; 96
    3d04:	39 e0       	ldi	r19, 0x09	; 9
    3d06:	88 85       	ldd	r24, Y+8	; 0x08
    3d08:	99 85       	ldd	r25, Y+9	; 0x09
    3d0a:	a9 01       	movw	r20, r18
    3d0c:	48 1b       	sub	r20, r24
    3d0e:	59 0b       	sbc	r21, r25
    3d10:	ca 01       	movw	r24, r20
    3d12:	99 23       	and	r25, r25
    3d14:	0c f4       	brge	.+2      	; 0x3d18 <_ZN5Servo6attachEiii+0xa8>
    3d16:	03 96       	adiw	r24, 0x03	; 3
    3d18:	95 95       	asr	r25
    3d1a:	87 95       	ror	r24
    3d1c:	95 95       	asr	r25
    3d1e:	87 95       	ror	r24
    3d20:	28 2f       	mov	r18, r24
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	9b 81       	ldd	r25, Y+3	; 0x03
    3d26:	fc 01       	movw	r30, r24
    3d28:	22 83       	std	Z+2, r18	; 0x02
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2e:	fc 01       	movw	r30, r24
    3d30:	90 81       	ld	r25, Z
    3d32:	8b ea       	ldi	r24, 0xAB	; 171
    3d34:	98 9f       	mul	r25, r24
    3d36:	81 2d       	mov	r24, r1
    3d38:	11 24       	eor	r1, r1
    3d3a:	86 95       	lsr	r24
    3d3c:	86 95       	lsr	r24
    3d3e:	86 95       	lsr	r24
    3d40:	89 83       	std	Y+1, r24	; 0x01
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	10 df       	rcall	.-480    	; 0x3b66 <_ZL13isTimerActive18timer16_Sequence_t>
    3d46:	98 2f       	mov	r25, r24
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	89 27       	eor	r24, r25
    3d4c:	88 23       	and	r24, r24
    3d4e:	11 f0       	breq	.+4      	; 0x3d54 <_ZN5Servo6attachEiii+0xe4>
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	8a de       	rcall	.-748    	; 0x3a68 <_ZL7initISR18timer16_Sequence_t>
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	9b 81       	ldd	r25, Y+3	; 0x03
    3d58:	fc 01       	movw	r30, r24
    3d5a:	80 81       	ld	r24, Z
    3d5c:	28 2f       	mov	r18, r24
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	c9 01       	movw	r24, r18
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	82 0f       	add	r24, r18
    3d68:	93 1f       	adc	r25, r19
    3d6a:	85 5c       	subi	r24, 0xC5	; 197
    3d6c:	9c 4f       	sbci	r25, 0xFC	; 252
    3d6e:	fc 01       	movw	r30, r24
    3d70:	20 81       	ld	r18, Z
    3d72:	20 64       	ori	r18, 0x40	; 64
    3d74:	fc 01       	movw	r30, r24
    3d76:	20 83       	st	Z, r18
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	80 81       	ld	r24, Z
    3d80:	29 96       	adiw	r28, 0x09	; 9
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	08 95       	ret

00003d92 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    3d92:	6f 92       	push	r6
    3d94:	7f 92       	push	r7
    3d96:	8f 92       	push	r8
    3d98:	9f 92       	push	r9
    3d9a:	af 92       	push	r10
    3d9c:	bf 92       	push	r11
    3d9e:	cf 92       	push	r12
    3da0:	df 92       	push	r13
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <_ZN5Servo5writeEi+0x1e>
    3db0:	1f 92       	push	r1
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	9a 83       	std	Y+2, r25	; 0x02
    3db8:	89 83       	std	Y+1, r24	; 0x01
    3dba:	7c 83       	std	Y+4, r23	; 0x04
    3dbc:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    3dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc2:	80 32       	cpi	r24, 0x20	; 32
    3dc4:	92 40       	sbci	r25, 0x02	; 2
    3dc6:	0c f0       	brlt	.+2      	; 0x3dca <_ZN5Servo5writeEi+0x38>
    3dc8:	5c c0       	rjmp	.+184    	; 0x3e82 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    3dca:	8b 81       	ldd	r24, Y+3	; 0x03
    3dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dce:	99 23       	and	r25, r25
    3dd0:	14 f4       	brge	.+4      	; 0x3dd6 <_ZN5Servo5writeEi+0x44>
    3dd2:	1c 82       	std	Y+4, r1	; 0x04
    3dd4:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    3dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dda:	85 3b       	cpi	r24, 0xB5	; 181
    3ddc:	91 05       	cpc	r25, r1
    3dde:	24 f0       	brlt	.+8      	; 0x3de8 <_ZN5Servo5writeEi+0x56>
    3de0:	84 eb       	ldi	r24, 0xB4	; 180
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	9c 83       	std	Y+4, r25	; 0x04
    3de6:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	9a 81       	ldd	r25, Y+2	; 0x02
    3dec:	fc 01       	movw	r30, r24
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	08 2e       	mov	r0, r24
    3df2:	00 0c       	add	r0, r0
    3df4:	99 0b       	sbc	r25, r25
    3df6:	28 e5       	ldi	r18, 0x58	; 88
    3df8:	32 e0       	ldi	r19, 0x02	; 2
    3dfa:	a9 01       	movw	r20, r18
    3dfc:	48 1b       	sub	r20, r24
    3dfe:	59 0b       	sbc	r21, r25
    3e00:	ca 01       	movw	r24, r20
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	09 2e       	mov	r0, r25
    3e0c:	00 0c       	add	r0, r0
    3e0e:	aa 0b       	sbc	r26, r26
    3e10:	bb 0b       	sbc	r27, r27
    3e12:	29 81       	ldd	r18, Y+1	; 0x01
    3e14:	3a 81       	ldd	r19, Y+2	; 0x02
    3e16:	f9 01       	movw	r30, r18
    3e18:	21 81       	ldd	r18, Z+1	; 0x01
    3e1a:	02 2e       	mov	r0, r18
    3e1c:	00 0c       	add	r0, r0
    3e1e:	33 0b       	sbc	r19, r19
    3e20:	48 e8       	ldi	r20, 0x88	; 136
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	ba 01       	movw	r22, r20
    3e26:	62 1b       	sub	r22, r18
    3e28:	73 0b       	sbc	r23, r19
    3e2a:	9b 01       	movw	r18, r22
    3e2c:	22 0f       	add	r18, r18
    3e2e:	33 1f       	adc	r19, r19
    3e30:	22 0f       	add	r18, r18
    3e32:	33 1f       	adc	r19, r19
    3e34:	03 2e       	mov	r0, r19
    3e36:	00 0c       	add	r0, r0
    3e38:	44 0b       	sbc	r20, r20
    3e3a:	55 0b       	sbc	r21, r21
    3e3c:	6b 81       	ldd	r22, Y+3	; 0x03
    3e3e:	7c 81       	ldd	r23, Y+4	; 0x04
    3e40:	3b 01       	movw	r6, r22
    3e42:	77 0f       	add	r23, r23
    3e44:	88 08       	sbc	r8, r8
    3e46:	99 08       	sbc	r9, r9
    3e48:	6b 2f       	mov	r22, r27
    3e4a:	6f 93       	push	r22
    3e4c:	6a 2f       	mov	r22, r26
    3e4e:	6f 93       	push	r22
    3e50:	69 2f       	mov	r22, r25
    3e52:	6f 93       	push	r22
    3e54:	8f 93       	push	r24
    3e56:	59 01       	movw	r10, r18
    3e58:	6a 01       	movw	r12, r20
    3e5a:	14 eb       	ldi	r17, 0xB4	; 180
    3e5c:	e1 2e       	mov	r14, r17
    3e5e:	f1 2c       	mov	r15, r1
    3e60:	00 e0       	ldi	r16, 0x00	; 0
    3e62:	10 e0       	ldi	r17, 0x00	; 0
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	a9 01       	movw	r20, r18
    3e6a:	c4 01       	movw	r24, r8
    3e6c:	b3 01       	movw	r22, r6
    3e6e:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <_Z3maplllll>
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9c 83       	std	Y+4, r25	; 0x04
    3e80:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    3e82:	2b 81       	ldd	r18, Y+3	; 0x03
    3e84:	3c 81       	ldd	r19, Y+4	; 0x04
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8a:	b9 01       	movw	r22, r18
    3e8c:	14 d0       	rcall	.+40     	; 0x3eb6 <_ZN5Servo17writeMicrosecondsEi>
}
    3e8e:	00 00       	nop
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	ff 90       	pop	r15
    3ea2:	ef 90       	pop	r14
    3ea4:	df 90       	pop	r13
    3ea6:	cf 90       	pop	r12
    3ea8:	bf 90       	pop	r11
    3eaa:	af 90       	pop	r10
    3eac:	9f 90       	pop	r9
    3eae:	8f 90       	pop	r8
    3eb0:	7f 90       	pop	r7
    3eb2:	6f 90       	pop	r6
    3eb4:	08 95       	ret

00003eb6 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	00 d0       	rcall	.+0      	; 0x3ebc <_ZN5Servo17writeMicrosecondsEi+0x6>
    3ebc:	00 d0       	rcall	.+0      	; 0x3ebe <_ZN5Servo17writeMicrosecondsEi+0x8>
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	9c 83       	std	Y+4, r25	; 0x04
    3ec4:	8b 83       	std	Y+3, r24	; 0x03
    3ec6:	7e 83       	std	Y+6, r23	; 0x06
    3ec8:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3eca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ece:	fc 01       	movw	r30, r24
    3ed0:	80 81       	ld	r24, Z
    3ed2:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	80 33       	cpi	r24, 0x30	; 48
    3ed8:	08 f0       	brcs	.+2      	; 0x3edc <_ZN5Servo17writeMicrosecondsEi+0x26>
    3eda:	99 c0       	rjmp	.+306    	; 0x400e <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3edc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ede:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	81 81       	ldd	r24, Z+1	; 0x01
    3ee4:	08 2e       	mov	r0, r24
    3ee6:	00 0c       	add	r0, r0
    3ee8:	99 0b       	sbc	r25, r25
    3eea:	28 e8       	ldi	r18, 0x88	; 136
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	a9 01       	movw	r20, r18
    3ef0:	48 1b       	sub	r20, r24
    3ef2:	59 0b       	sbc	r21, r25
    3ef4:	ca 01       	movw	r24, r20
    3ef6:	9c 01       	movw	r18, r24
    3ef8:	22 0f       	add	r18, r18
    3efa:	33 1f       	adc	r19, r19
    3efc:	22 0f       	add	r18, r18
    3efe:	33 1f       	adc	r19, r19
    3f00:	8d 81       	ldd	r24, Y+5	; 0x05
    3f02:	9e 81       	ldd	r25, Y+6	; 0x06
    3f04:	82 17       	cp	r24, r18
    3f06:	93 07       	cpc	r25, r19
    3f08:	a4 f4       	brge	.+40     	; 0x3f32 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0e:	fc 01       	movw	r30, r24
    3f10:	81 81       	ldd	r24, Z+1	; 0x01
    3f12:	08 2e       	mov	r0, r24
    3f14:	00 0c       	add	r0, r0
    3f16:	99 0b       	sbc	r25, r25
    3f18:	28 e8       	ldi	r18, 0x88	; 136
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	a9 01       	movw	r20, r18
    3f1e:	48 1b       	sub	r20, r24
    3f20:	59 0b       	sbc	r21, r25
    3f22:	ca 01       	movw	r24, r20
    3f24:	88 0f       	add	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	88 0f       	add	r24, r24
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	9e 83       	std	Y+6, r25	; 0x06
    3f2e:	8d 83       	std	Y+5, r24	; 0x05
    3f30:	2a c0       	rjmp	.+84     	; 0x3f86 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    3f32:	8b 81       	ldd	r24, Y+3	; 0x03
    3f34:	9c 81       	ldd	r25, Y+4	; 0x04
    3f36:	fc 01       	movw	r30, r24
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	08 2e       	mov	r0, r24
    3f3c:	00 0c       	add	r0, r0
    3f3e:	99 0b       	sbc	r25, r25
    3f40:	28 e5       	ldi	r18, 0x58	; 88
    3f42:	32 e0       	ldi	r19, 0x02	; 2
    3f44:	a9 01       	movw	r20, r18
    3f46:	48 1b       	sub	r20, r24
    3f48:	59 0b       	sbc	r21, r25
    3f4a:	ca 01       	movw	r24, r20
    3f4c:	9c 01       	movw	r18, r24
    3f4e:	22 0f       	add	r18, r18
    3f50:	33 1f       	adc	r19, r19
    3f52:	22 0f       	add	r18, r18
    3f54:	33 1f       	adc	r19, r19
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	28 17       	cp	r18, r24
    3f5c:	39 07       	cpc	r19, r25
    3f5e:	9c f4       	brge	.+38     	; 0x3f86 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    3f60:	8b 81       	ldd	r24, Y+3	; 0x03
    3f62:	9c 81       	ldd	r25, Y+4	; 0x04
    3f64:	fc 01       	movw	r30, r24
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	08 2e       	mov	r0, r24
    3f6a:	00 0c       	add	r0, r0
    3f6c:	99 0b       	sbc	r25, r25
    3f6e:	28 e5       	ldi	r18, 0x58	; 88
    3f70:	32 e0       	ldi	r19, 0x02	; 2
    3f72:	a9 01       	movw	r20, r18
    3f74:	48 1b       	sub	r20, r24
    3f76:	59 0b       	sbc	r21, r25
    3f78:	ca 01       	movw	r24, r20
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	88 0f       	add	r24, r24
    3f80:	99 1f       	adc	r25, r25
    3f82:	9e 83       	std	Y+6, r25	; 0x06
    3f84:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    3f86:	8d 81       	ldd	r24, Y+5	; 0x05
    3f88:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8a:	02 97       	sbiw	r24, 0x02	; 2
    3f8c:	9e 83       	std	Y+6, r25	; 0x06
    3f8e:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3f90:	8d 81       	ldd	r24, Y+5	; 0x05
    3f92:	9e 81       	ldd	r25, Y+6	; 0x06
    3f94:	09 2e       	mov	r0, r25
    3f96:	00 0c       	add	r0, r0
    3f98:	aa 0b       	sbc	r26, r26
    3f9a:	bb 0b       	sbc	r27, r27
    3f9c:	88 0f       	add	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	aa 1f       	adc	r26, r26
    3fa2:	bb 1f       	adc	r27, r27
    3fa4:	88 0f       	add	r24, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	aa 1f       	adc	r26, r26
    3faa:	bb 1f       	adc	r27, r27
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	aa 1f       	adc	r26, r26
    3fb2:	bb 1f       	adc	r27, r27
    3fb4:	88 0f       	add	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	aa 1f       	adc	r26, r26
    3fba:	bb 1f       	adc	r27, r27
    3fbc:	bb 23       	and	r27, r27
    3fbe:	1c f4       	brge	.+6      	; 0x3fc6 <_ZN5Servo17writeMicrosecondsEi+0x110>
    3fc0:	07 96       	adiw	r24, 0x07	; 7
    3fc2:	a1 1d       	adc	r26, r1
    3fc4:	b1 1d       	adc	r27, r1
    3fc6:	68 94       	set
    3fc8:	12 f8       	bld	r1, 2
    3fca:	b5 95       	asr	r27
    3fcc:	a7 95       	ror	r26
    3fce:	97 95       	ror	r25
    3fd0:	87 95       	ror	r24
    3fd2:	16 94       	lsr	r1
    3fd4:	d1 f7       	brne	.-12     	; 0x3fca <_ZN5Servo17writeMicrosecondsEi+0x114>
    3fd6:	9e 83       	std	Y+6, r25	; 0x06
    3fd8:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    3fda:	8f e5       	ldi	r24, 0x5F	; 95
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	fc 01       	movw	r30, r24
    3fe0:	80 81       	ld	r24, Z
    3fe2:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    3fe4:	f8 94       	cli
    servos[channel].ticks = value;
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	4d 81       	ldd	r20, Y+5	; 0x05
    3fee:	5e 81       	ldd	r21, Y+6	; 0x06
    3ff0:	c9 01       	movw	r24, r18
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	82 0f       	add	r24, r18
    3ff8:	93 1f       	adc	r25, r19
    3ffa:	84 5c       	subi	r24, 0xC4	; 196
    3ffc:	9c 4f       	sbci	r25, 0xFC	; 252
    3ffe:	fc 01       	movw	r30, r24
    4000:	51 83       	std	Z+1, r21	; 0x01
    4002:	40 83       	st	Z, r20
    SREG = oldSREG;
    4004:	8f e5       	ldi	r24, 0x5F	; 95
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	2a 81       	ldd	r18, Y+2	; 0x02
    400a:	fc 01       	movw	r30, r24
    400c:	20 83       	st	Z, r18
  }
}
    400e:	00 00       	nop
    4010:	26 96       	adiw	r28, 0x06	; 6
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	f8 94       	cli
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	08 95       	ret

00004022 <_ZN5Servo4readEv>:

int Servo::read() // return the value as degrees
{
    4022:	2f 92       	push	r2
    4024:	3f 92       	push	r3
    4026:	4f 92       	push	r4
    4028:	5f 92       	push	r5
    402a:	6f 92       	push	r6
    402c:	7f 92       	push	r7
    402e:	8f 92       	push	r8
    4030:	9f 92       	push	r9
    4032:	af 92       	push	r10
    4034:	bf 92       	push	r11
    4036:	cf 92       	push	r12
    4038:	df 92       	push	r13
    403a:	ef 92       	push	r14
    403c:	ff 92       	push	r15
    403e:	0f 93       	push	r16
    4040:	1f 93       	push	r17
    4042:	cf 93       	push	r28
    4044:	df 93       	push	r29
    4046:	1f 92       	push	r1
    4048:	1f 92       	push	r1
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	9a 83       	std	Y+2, r25	; 0x02
    4050:	89 83       	std	Y+1, r24	; 0x01
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	9a 81       	ldd	r25, Y+2	; 0x02
    4056:	fc 01       	movw	r30, r24
    4058:	82 81       	ldd	r24, Z+2	; 0x02
    405a:	08 2e       	mov	r0, r24
    405c:	00 0c       	add	r0, r0
    405e:	99 0b       	sbc	r25, r25
    4060:	28 e5       	ldi	r18, 0x58	; 88
    4062:	32 e0       	ldi	r19, 0x02	; 2
    4064:	a9 01       	movw	r20, r18
    4066:	48 1b       	sub	r20, r24
    4068:	59 0b       	sbc	r21, r25
    406a:	ca 01       	movw	r24, r20
    406c:	88 0f       	add	r24, r24
    406e:	99 1f       	adc	r25, r25
    4070:	88 0f       	add	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	1c 01       	movw	r2, r24
    4076:	99 0f       	add	r25, r25
    4078:	44 08       	sbc	r4, r4
    407a:	55 08       	sbc	r5, r5
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	9a 81       	ldd	r25, Y+2	; 0x02
    4080:	fc 01       	movw	r30, r24
    4082:	81 81       	ldd	r24, Z+1	; 0x01
    4084:	08 2e       	mov	r0, r24
    4086:	00 0c       	add	r0, r0
    4088:	99 0b       	sbc	r25, r25
    408a:	28 e8       	ldi	r18, 0x88	; 136
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	a9 01       	movw	r20, r18
    4090:	48 1b       	sub	r20, r24
    4092:	59 0b       	sbc	r21, r25
    4094:	ca 01       	movw	r24, r20
    4096:	88 0f       	add	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	3c 01       	movw	r6, r24
    40a0:	99 0f       	add	r25, r25
    40a2:	88 08       	sbc	r8, r8
    40a4:	99 08       	sbc	r9, r9
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	9a 81       	ldd	r25, Y+2	; 0x02
    40aa:	30 d0       	rcall	.+96     	; 0x410c <_ZN5Servo16readMicrosecondsEv>
    40ac:	01 96       	adiw	r24, 0x01	; 1
    40ae:	09 2e       	mov	r0, r25
    40b0:	00 0c       	add	r0, r0
    40b2:	aa 0b       	sbc	r26, r26
    40b4:	bb 0b       	sbc	r27, r27
    40b6:	1f 92       	push	r1
    40b8:	1f 92       	push	r1
    40ba:	1f 92       	push	r1
    40bc:	24 eb       	ldi	r18, 0xB4	; 180
    40be:	2f 93       	push	r18
    40c0:	a1 2c       	mov	r10, r1
    40c2:	b1 2c       	mov	r11, r1
    40c4:	65 01       	movw	r12, r10
    40c6:	82 01       	movw	r16, r4
    40c8:	71 01       	movw	r14, r2
    40ca:	a4 01       	movw	r20, r8
    40cc:	93 01       	movw	r18, r6
    40ce:	bc 01       	movw	r22, r24
    40d0:	cd 01       	movw	r24, r26
    40d2:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <_Z3maplllll>
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
}
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	ef 90       	pop	r14
    40f2:	df 90       	pop	r13
    40f4:	cf 90       	pop	r12
    40f6:	bf 90       	pop	r11
    40f8:	af 90       	pop	r10
    40fa:	9f 90       	pop	r9
    40fc:	8f 90       	pop	r8
    40fe:	7f 90       	pop	r7
    4100:	6f 90       	pop	r6
    4102:	5f 90       	pop	r5
    4104:	4f 90       	pop	r4
    4106:	3f 90       	pop	r3
    4108:	2f 90       	pop	r2
    410a:	08 95       	ret

0000410c <_ZN5Servo16readMicrosecondsEv>:

int Servo::readMicroseconds()
{
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	00 d0       	rcall	.+0      	; 0x4112 <_ZN5Servo16readMicrosecondsEv+0x6>
    4112:	1f 92       	push	r1
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	9c 83       	std	Y+4, r25	; 0x04
    411a:	8b 83       	std	Y+3, r24	; 0x03
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    411c:	8b 81       	ldd	r24, Y+3	; 0x03
    411e:	9c 81       	ldd	r25, Y+4	; 0x04
    4120:	fc 01       	movw	r30, r24
    4122:	80 81       	ld	r24, Z
    4124:	8f 3f       	cpi	r24, 0xFF	; 255
    4126:	01 f1       	breq	.+64     	; 0x4168 <_ZN5Servo16readMicrosecondsEv+0x5c>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    4128:	8b 81       	ldd	r24, Y+3	; 0x03
    412a:	9c 81       	ldd	r25, Y+4	; 0x04
    412c:	fc 01       	movw	r30, r24
    412e:	80 81       	ld	r24, Z
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	c9 01       	movw	r24, r18
    4136:	88 0f       	add	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	82 0f       	add	r24, r18
    413c:	93 1f       	adc	r25, r19
    413e:	84 5c       	subi	r24, 0xC4	; 196
    4140:	9c 4f       	sbci	r25, 0xFC	; 252
    4142:	fc 01       	movw	r30, r24
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	88 0f       	add	r24, r24
    414a:	99 1f       	adc	r25, r25
    414c:	88 0f       	add	r24, r24
    414e:	99 1f       	adc	r25, r25
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	92 95       	swap	r25
    4156:	82 95       	swap	r24
    4158:	8f 70       	andi	r24, 0x0F	; 15
    415a:	89 27       	eor	r24, r25
    415c:	9f 70       	andi	r25, 0x0F	; 15
    415e:	89 27       	eor	r24, r25
    4160:	02 96       	adiw	r24, 0x02	; 2
    4162:	9a 83       	std	Y+2, r25	; 0x02
    4164:	89 83       	std	Y+1, r24	; 0x01
    4166:	02 c0       	rjmp	.+4      	; 0x416c <_ZN5Servo16readMicrosecondsEv+0x60>
  else
    pulsewidth  = 0;
    4168:	1a 82       	std	Y+2, r1	; 0x02
    416a:	19 82       	std	Y+1, r1	; 0x01

  return pulsewidth;
    416c:	89 81       	ldd	r24, Y+1	; 0x01
    416e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	0f 90       	pop	r0
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	08 95       	ret

0000417e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	2f 97       	sbiw	r28, 0x0f	; 15
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    4192:	8f e5       	ldi	r24, 0x5F	; 95
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	fc 01       	movw	r30, r24
    4198:	80 81       	ld	r24, Z
    419a:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    419c:	f8 94       	cli
  if (!initialized) {
    419e:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN8SPIClass11initializedE>
    41a2:	88 23       	and	r24, r24
    41a4:	09 f0       	breq	.+2      	; 0x41a8 <_ZN8SPIClass5beginEv+0x2a>
    41a6:	5b c0       	rjmp	.+182    	; 0x425e <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    41a8:	89 ec       	ldi	r24, 0xC9	; 201
    41aa:	91 e0       	ldi	r25, 0x01	; 1
    41ac:	9b 83       	std	Y+3, r25	; 0x03
    41ae:	8a 83       	std	Y+2, r24	; 0x02
    41b0:	8a 81       	ldd	r24, Y+2	; 0x02
    41b2:	9b 81       	ldd	r25, Y+3	; 0x03
    41b4:	fc 01       	movw	r30, r24
    41b6:	84 91       	lpm	r24, Z
    41b8:	8c 83       	std	Y+4, r24	; 0x04
    41ba:	8c 81       	ldd	r24, Y+4	; 0x04
    41bc:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    41be:	83 e8       	ldi	r24, 0x83	; 131
    41c0:	91 e0       	ldi	r25, 0x01	; 1
    41c2:	9f 83       	std	Y+7, r25	; 0x07
    41c4:	8e 83       	std	Y+6, r24	; 0x06
    41c6:	8e 81       	ldd	r24, Y+6	; 0x06
    41c8:	9f 81       	ldd	r25, Y+7	; 0x07
    41ca:	fc 01       	movw	r30, r24
    41cc:	84 91       	lpm	r24, Z
    41ce:	88 87       	std	Y+8, r24	; 0x08
    41d0:	88 85       	ldd	r24, Y+8	; 0x08
    41d2:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    41d4:	8d 81       	ldd	r24, Y+5	; 0x05
    41d6:	88 2f       	mov	r24, r24
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	88 0f       	add	r24, r24
    41dc:	99 1f       	adc	r25, r25
    41de:	82 5f       	subi	r24, 0xF2	; 242
    41e0:	9d 4f       	sbci	r25, 0xFD	; 253
    41e2:	9b 87       	std	Y+11, r25	; 0x0b
    41e4:	8a 87       	std	Y+10, r24	; 0x0a
    41e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    41e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    41ea:	fc 01       	movw	r30, r24
    41ec:	25 91       	lpm	r18, Z+
    41ee:	34 91       	lpm	r19, Z
    41f0:	cf 01       	movw	r24, r30
    41f2:	3d 87       	std	Y+13, r19	; 0x0d
    41f4:	2c 87       	std	Y+12, r18	; 0x0c
    41f6:	9b 87       	std	Y+11, r25	; 0x0b
    41f8:	8a 87       	std	Y+10, r24	; 0x0a
    41fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    41fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    41fe:	9f 87       	std	Y+15, r25	; 0x0f
    4200:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4202:	8e 85       	ldd	r24, Y+14	; 0x0e
    4204:	9f 85       	ldd	r25, Y+15	; 0x0f
    4206:	fc 01       	movw	r30, r24
    4208:	90 81       	ld	r25, Z
    420a:	89 85       	ldd	r24, Y+9	; 0x09
    420c:	98 23       	and	r25, r24
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	99 23       	and	r25, r25
    4212:	09 f0       	breq	.+2      	; 0x4216 <_ZN8SPIClass5beginEv+0x98>
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	88 23       	and	r24, r24
    4218:	21 f0       	breq	.+8      	; 0x4222 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    421a:	61 e0       	ldi	r22, 0x01	; 1
    421c:	85 e3       	ldi	r24, 0x35	; 53
    421e:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4222:	61 e0       	ldi	r22, 0x01	; 1
    4224:	85 e3       	ldi	r24, 0x35	; 53
    4226:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    422a:	8c e4       	ldi	r24, 0x4C	; 76
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	2c e4       	ldi	r18, 0x4C	; 76
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	f9 01       	movw	r30, r18
    4234:	20 81       	ld	r18, Z
    4236:	20 61       	ori	r18, 0x10	; 16
    4238:	fc 01       	movw	r30, r24
    423a:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    423c:	8c e4       	ldi	r24, 0x4C	; 76
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	2c e4       	ldi	r18, 0x4C	; 76
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	f9 01       	movw	r30, r18
    4246:	20 81       	ld	r18, Z
    4248:	20 64       	ori	r18, 0x40	; 64
    424a:	fc 01       	movw	r30, r24
    424c:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    424e:	61 e0       	ldi	r22, 0x01	; 1
    4250:	84 e3       	ldi	r24, 0x34	; 52
    4252:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
    pinMode(MOSI, OUTPUT);
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	83 e3       	ldi	r24, 0x33	; 51
    425a:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <pinMode>
  }
  initialized++; // reference count
    425e:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN8SPIClass11initializedE>
    4262:	8f 5f       	subi	r24, 0xFF	; 255
    4264:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4268:	8f e5       	ldi	r24, 0x5F	; 95
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	29 81       	ldd	r18, Y+1	; 0x01
    426e:	fc 01       	movw	r30, r24
    4270:	20 83       	st	Z, r18
}
    4272:	00 00       	nop
    4274:	2f 96       	adiw	r28, 0x0f	; 15
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	cd bf       	out	0x3d, r28	; 61
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	08 95       	ret

00004286 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4286:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_sendStop>
    4290:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_inRepStart>
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	84 e1       	ldi	r24, 0x14	; 20
    4298:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    429c:	61 e0       	ldi	r22, 0x01	; 1
    429e:	85 e1       	ldi	r24, 0x15	; 21
    42a0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    42a4:	e9 eb       	ldi	r30, 0xB9	; 185
    42a6:	f0 e0       	ldi	r31, 0x00	; 0
    42a8:	80 81       	ld	r24, Z
    42aa:	8e 7f       	andi	r24, 0xFE	; 254
    42ac:	80 83       	st	Z, r24
    42ae:	80 81       	ld	r24, Z
    42b0:	8d 7f       	andi	r24, 0xFD	; 253
    42b2:	80 83       	st	Z, r24
    42b4:	88 e4       	ldi	r24, 0x48	; 72
    42b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    42ba:	85 e4       	ldi	r24, 0x45	; 69
    42bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    42c0:	08 95       	ret

000042c2 <twi_disable>:
    42c2:	ec eb       	ldi	r30, 0xBC	; 188
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	80 81       	ld	r24, Z
    42c8:	8a 7b       	andi	r24, 0xBA	; 186
    42ca:	80 83       	st	Z, r24
    42cc:	60 e0       	ldi	r22, 0x00	; 0
    42ce:	84 e1       	ldi	r24, 0x14	; 20
    42d0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <digitalWrite>
    42d4:	60 e0       	ldi	r22, 0x00	; 0
    42d6:	85 e1       	ldi	r24, 0x15	; 21
    42d8:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <digitalWrite>

000042dc <twi_transmit>:
    42dc:	40 91 f6 03 	lds	r20, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    42e0:	26 2f       	mov	r18, r22
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	24 0f       	add	r18, r20
    42e6:	31 1d       	adc	r19, r1
    42e8:	21 32       	cpi	r18, 0x21	; 33
    42ea:	31 05       	cpc	r19, r1
    42ec:	dc f4       	brge	.+54     	; 0x4324 <twi_transmit+0x48>
    42ee:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <twi_state>
    42f2:	24 30       	cpi	r18, 0x04	; 4
    42f4:	c9 f4       	brne	.+50     	; 0x4328 <twi_transmit+0x4c>
    42f6:	fc 01       	movw	r30, r24
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	86 17       	cp	r24, r22
    42fe:	58 f4       	brcc	.+22     	; 0x4316 <twi_transmit+0x3a>
    4300:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    4304:	21 91       	ld	r18, Z+
    4306:	dc 01       	movw	r26, r24
    4308:	a8 50       	subi	r26, 0x08	; 8
    430a:	bc 4f       	sbci	r27, 0xFC	; 252
    430c:	a3 0f       	add	r26, r19
    430e:	b1 1d       	adc	r27, r1
    4310:	2c 93       	st	X, r18
    4312:	01 96       	adiw	r24, 0x01	; 1
    4314:	f3 cf       	rjmp	.-26     	; 0x42fc <twi_transmit+0x20>
    4316:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    431a:	68 0f       	add	r22, r24
    431c:	60 93 f6 03 	sts	0x03F6, r22	; 0x8003f6 <twi_txBufferLength>
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	08 95       	ret
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	08 95       	ret
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	08 95       	ret

0000432c <twi_attachSlaveRxEvent>:
    432c:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <twi_onSlaveReceive+0x1>
    4330:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <twi_onSlaveReceive>
    4334:	08 95       	ret

00004336 <twi_attachSlaveTxEvent>:
    4336:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <twi_onSlaveTransmit+0x1>
    433a:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_onSlaveTransmit>
    433e:	08 95       	ret

00004340 <twi_releaseBus>:
    4340:	85 ec       	ldi	r24, 0xC5	; 197
    4342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4346:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
    434a:	08 95       	ret

0000434c <twi_handleTimeout>:
    434c:	cf 93       	push	r28
    434e:	df 93       	push	r29
    4350:	91 e0       	ldi	r25, 0x01	; 1
    4352:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <twi_timed_out_flag>
    4356:	88 23       	and	r24, r24
    4358:	51 f0       	breq	.+20     	; 0x436e <twi_handleTimeout+0x22>
    435a:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    435e:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4362:	af df       	rcall	.-162    	; 0x42c2 <twi_disable>
    4364:	90 df       	rcall	.-224    	; 0x4286 <twi_init>
    4366:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    436a:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	08 95       	ret

00004374 <twi_readFrom>:
    4374:	4f 92       	push	r4
    4376:	5f 92       	push	r5
    4378:	6f 92       	push	r6
    437a:	7f 92       	push	r7
    437c:	8f 92       	push	r8
    437e:	9f 92       	push	r9
    4380:	af 92       	push	r10
    4382:	bf 92       	push	r11
    4384:	cf 92       	push	r12
    4386:	df 92       	push	r13
    4388:	ef 92       	push	r14
    438a:	ff 92       	push	r15
    438c:	0f 93       	push	r16
    438e:	1f 93       	push	r17
    4390:	cf 93       	push	r28
    4392:	df 93       	push	r29
    4394:	f8 2e       	mov	r15, r24
    4396:	16 2f       	mov	r17, r22
    4398:	07 2f       	mov	r16, r23
    439a:	c4 2f       	mov	r28, r20
    439c:	e2 2e       	mov	r14, r18
    439e:	41 32       	cpi	r20, 0x21	; 33
    43a0:	08 f0       	brcs	.+2      	; 0x43a4 <twi_readFrom+0x30>
    43a2:	bc c0       	rjmp	.+376    	; 0x451c <twi_readFrom+0x1a8>
    43a4:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    43a8:	4b 01       	movw	r8, r22
    43aa:	5c 01       	movw	r10, r24
    43ac:	d0 91 47 04 	lds	r29, 0x0447	; 0x800447 <twi_state>
    43b0:	dd 23       	and	r29, r29
    43b2:	29 f1       	breq	.+74     	; 0x43fe <twi_readFrom+0x8a>
    43b4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    43b8:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    43bc:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    43c0:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    43c4:	89 2b       	or	r24, r25
    43c6:	8a 2b       	or	r24, r26
    43c8:	8b 2b       	or	r24, r27
    43ca:	81 f3       	breq	.-32     	; 0x43ac <twi_readFrom+0x38>
    43cc:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    43d0:	40 90 40 04 	lds	r4, 0x0440	; 0x800440 <twi_timeout_us>
    43d4:	50 90 41 04 	lds	r5, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    43d8:	60 90 42 04 	lds	r6, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    43dc:	70 90 43 04 	lds	r7, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	88 19       	sub	r24, r8
    43e6:	99 09       	sbc	r25, r9
    43e8:	aa 09       	sbc	r26, r10
    43ea:	bb 09       	sbc	r27, r11
    43ec:	48 16       	cp	r4, r24
    43ee:	59 06       	cpc	r5, r25
    43f0:	6a 06       	cpc	r6, r26
    43f2:	7b 06       	cpc	r7, r27
    43f4:	d8 f6       	brcc	.-74     	; 0x43ac <twi_readFrom+0x38>
    43f6:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    43fa:	a8 df       	rcall	.-176    	; 0x434c <twi_handleTimeout>
    43fc:	8f c0       	rjmp	.+286    	; 0x451c <twi_readFrom+0x1a8>
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
    4404:	e0 92 45 04 	sts	0x0445, r14	; 0x800445 <twi_sendStop>
    4408:	9f ef       	ldi	r25, 0xFF	; 255
    440a:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <twi_error>
    440e:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_masterBufferIndex>
    4412:	9c 0f       	add	r25, r28
    4414:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <twi_masterBufferLength>
    4418:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_slarw>
    441c:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <twi_slarw>
    4420:	8f 2d       	mov	r24, r15
    4422:	88 0f       	add	r24, r24
    4424:	89 2b       	or	r24, r25
    4426:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_slarw>
    442a:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_inRepStart>
    442e:	81 30       	cpi	r24, 0x01	; 1
    4430:	89 f5       	brne	.+98     	; 0x4494 <twi_readFrom+0x120>
    4432:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_inRepStart>
    4436:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    443a:	6b 01       	movw	r12, r22
    443c:	7c 01       	movw	r14, r24
    443e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_slarw>
    4442:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4446:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    444a:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    444e:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4452:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4456:	89 2b       	or	r24, r25
    4458:	8a 2b       	or	r24, r26
    445a:	8b 2b       	or	r24, r27
    445c:	a9 f0       	breq	.+42     	; 0x4488 <twi_readFrom+0x114>
    445e:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    4462:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    4466:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    446a:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    446e:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	8c 19       	sub	r24, r12
    4478:	9d 09       	sbc	r25, r13
    447a:	ae 09       	sbc	r26, r14
    447c:	bf 09       	sbc	r27, r15
    447e:	88 16       	cp	r8, r24
    4480:	99 06       	cpc	r9, r25
    4482:	aa 06       	cpc	r10, r26
    4484:	bb 06       	cpc	r11, r27
    4486:	90 f1       	brcs	.+100    	; 0x44ec <twi_readFrom+0x178>
    4488:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    448c:	83 fd       	sbrc	r24, 3
    448e:	d7 cf       	rjmp	.-82     	; 0x443e <twi_readFrom+0xca>
    4490:	85 ec       	ldi	r24, 0xC5	; 197
    4492:	01 c0       	rjmp	.+2      	; 0x4496 <twi_readFrom+0x122>
    4494:	85 ee       	ldi	r24, 0xE5	; 229
    4496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    449a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    449e:	6b 01       	movw	r12, r22
    44a0:	7c 01       	movw	r14, r24
    44a2:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_state>
    44a6:	81 30       	cpi	r24, 0x01	; 1
    44a8:	29 f5       	brne	.+74     	; 0x44f4 <twi_readFrom+0x180>
    44aa:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    44ae:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    44b2:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    44b6:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    44ba:	89 2b       	or	r24, r25
    44bc:	8a 2b       	or	r24, r26
    44be:	8b 2b       	or	r24, r27
    44c0:	81 f3       	breq	.-32     	; 0x44a2 <twi_readFrom+0x12e>
    44c2:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    44c6:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    44ca:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    44ce:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    44d2:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	8c 19       	sub	r24, r12
    44dc:	9d 09       	sbc	r25, r13
    44de:	ae 09       	sbc	r26, r14
    44e0:	bf 09       	sbc	r27, r15
    44e2:	88 16       	cp	r8, r24
    44e4:	99 06       	cpc	r9, r25
    44e6:	aa 06       	cpc	r10, r26
    44e8:	bb 06       	cpc	r11, r27
    44ea:	d8 f6       	brcc	.-74     	; 0x44a2 <twi_readFrom+0x12e>
    44ec:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    44f0:	2d df       	rcall	.-422    	; 0x434c <twi_handleTimeout>
    44f2:	15 c0       	rjmp	.+42     	; 0x451e <twi_readFrom+0x1aa>
    44f4:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <twi_masterBufferIndex>
    44f8:	8c 17       	cp	r24, r28
    44fa:	10 f4       	brcc	.+4      	; 0x4500 <twi_readFrom+0x18c>
    44fc:	c0 91 19 04 	lds	r28, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4500:	aa e1       	ldi	r26, 0x1A	; 26
    4502:	b4 e0       	ldi	r27, 0x04	; 4
    4504:	91 2f       	mov	r25, r17
    4506:	e1 2f       	mov	r30, r17
    4508:	f0 2f       	mov	r31, r16
    450a:	8e 2f       	mov	r24, r30
    450c:	89 1b       	sub	r24, r25
    450e:	8c 17       	cp	r24, r28
    4510:	18 f4       	brcc	.+6      	; 0x4518 <twi_readFrom+0x1a4>
    4512:	8d 91       	ld	r24, X+
    4514:	81 93       	st	Z+, r24
    4516:	f9 cf       	rjmp	.-14     	; 0x450a <twi_readFrom+0x196>
    4518:	dc 2f       	mov	r29, r28
    451a:	01 c0       	rjmp	.+2      	; 0x451e <twi_readFrom+0x1aa>
    451c:	d0 e0       	ldi	r29, 0x00	; 0
    451e:	8d 2f       	mov	r24, r29
    4520:	df 91       	pop	r29
    4522:	cf 91       	pop	r28
    4524:	1f 91       	pop	r17
    4526:	0f 91       	pop	r16
    4528:	ff 90       	pop	r15
    452a:	ef 90       	pop	r14
    452c:	df 90       	pop	r13
    452e:	cf 90       	pop	r12
    4530:	bf 90       	pop	r11
    4532:	af 90       	pop	r10
    4534:	9f 90       	pop	r9
    4536:	8f 90       	pop	r8
    4538:	7f 90       	pop	r7
    453a:	6f 90       	pop	r6
    453c:	5f 90       	pop	r5
    453e:	4f 90       	pop	r4
    4540:	08 95       	ret

00004542 <twi_writeTo>:
    4542:	4f 92       	push	r4
    4544:	5f 92       	push	r5
    4546:	6f 92       	push	r6
    4548:	7f 92       	push	r7
    454a:	8f 92       	push	r8
    454c:	9f 92       	push	r9
    454e:	af 92       	push	r10
    4550:	bf 92       	push	r11
    4552:	cf 92       	push	r12
    4554:	df 92       	push	r13
    4556:	ef 92       	push	r14
    4558:	ff 92       	push	r15
    455a:	0f 93       	push	r16
    455c:	1f 93       	push	r17
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	41 32       	cpi	r20, 0x21	; 33
    4564:	08 f0       	brcs	.+2      	; 0x4568 <twi_writeTo+0x26>
    4566:	c5 c0       	rjmp	.+394    	; 0x46f2 <twi_writeTo+0x1b0>
    4568:	12 2f       	mov	r17, r18
    456a:	f4 2e       	mov	r15, r20
    456c:	d7 2e       	mov	r13, r23
    456e:	e6 2e       	mov	r14, r22
    4570:	d8 2f       	mov	r29, r24
    4572:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    4576:	4b 01       	movw	r8, r22
    4578:	5c 01       	movw	r10, r24
    457a:	c0 91 47 04 	lds	r28, 0x0447	; 0x800447 <twi_state>
    457e:	cc 23       	and	r28, r28
    4580:	11 f1       	breq	.+68     	; 0x45c6 <twi_writeTo+0x84>
    4582:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    4586:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    458a:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    458e:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4592:	89 2b       	or	r24, r25
    4594:	8a 2b       	or	r24, r26
    4596:	8b 2b       	or	r24, r27
    4598:	81 f3       	breq	.-32     	; 0x457a <twi_writeTo+0x38>
    459a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    459e:	40 90 40 04 	lds	r4, 0x0440	; 0x800440 <twi_timeout_us>
    45a2:	50 90 41 04 	lds	r5, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    45a6:	60 90 42 04 	lds	r6, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    45aa:	70 90 43 04 	lds	r7, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	88 19       	sub	r24, r8
    45b4:	99 09       	sbc	r25, r9
    45b6:	aa 09       	sbc	r26, r10
    45b8:	bb 09       	sbc	r27, r11
    45ba:	48 16       	cp	r4, r24
    45bc:	59 06       	cpc	r5, r25
    45be:	6a 06       	cpc	r6, r26
    45c0:	7b 06       	cpc	r7, r27
    45c2:	d8 f6       	brcc	.-74     	; 0x457a <twi_writeTo+0x38>
    45c4:	83 c0       	rjmp	.+262    	; 0x46cc <twi_writeTo+0x18a>
    45c6:	82 e0       	ldi	r24, 0x02	; 2
    45c8:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
    45cc:	00 93 45 04 	sts	0x0445, r16	; 0x800445 <twi_sendStop>
    45d0:	8f ef       	ldi	r24, 0xFF	; 255
    45d2:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_error>
    45d6:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_masterBufferIndex>
    45da:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <twi_masterBufferLength>
    45de:	9e 2d       	mov	r25, r14
    45e0:	aa e1       	ldi	r26, 0x1A	; 26
    45e2:	b4 e0       	ldi	r27, 0x04	; 4
    45e4:	ee 2d       	mov	r30, r14
    45e6:	fd 2d       	mov	r31, r13
    45e8:	8e 2f       	mov	r24, r30
    45ea:	89 1b       	sub	r24, r25
    45ec:	8f 15       	cp	r24, r15
    45ee:	18 f4       	brcc	.+6      	; 0x45f6 <twi_writeTo+0xb4>
    45f0:	81 91       	ld	r24, Z+
    45f2:	8d 93       	st	X+, r24
    45f4:	f9 cf       	rjmp	.-14     	; 0x45e8 <twi_writeTo+0xa6>
    45f6:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_slarw>
    45fa:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <twi_slarw>
    45fe:	dd 0f       	add	r29, r29
    4600:	d9 2b       	or	r29, r25
    4602:	d0 93 46 04 	sts	0x0446, r29	; 0x800446 <twi_slarw>
    4606:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_inRepStart>
    460a:	81 30       	cpi	r24, 0x01	; 1
    460c:	89 f5       	brne	.+98     	; 0x4670 <twi_writeTo+0x12e>
    460e:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_inRepStart>
    4612:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    4616:	6b 01       	movw	r12, r22
    4618:	7c 01       	movw	r14, r24
    461a:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_slarw>
    461e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4622:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    4626:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    462a:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    462e:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4632:	89 2b       	or	r24, r25
    4634:	8a 2b       	or	r24, r26
    4636:	8b 2b       	or	r24, r27
    4638:	a9 f0       	breq	.+42     	; 0x4664 <twi_writeTo+0x122>
    463a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    463e:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    4642:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4646:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    464a:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	8c 19       	sub	r24, r12
    4654:	9d 09       	sbc	r25, r13
    4656:	ae 09       	sbc	r26, r14
    4658:	bf 09       	sbc	r27, r15
    465a:	88 16       	cp	r8, r24
    465c:	99 06       	cpc	r9, r25
    465e:	aa 06       	cpc	r10, r26
    4660:	bb 06       	cpc	r11, r27
    4662:	a0 f1       	brcs	.+104    	; 0x46cc <twi_writeTo+0x18a>
    4664:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4668:	83 fd       	sbrc	r24, 3
    466a:	d7 cf       	rjmp	.-82     	; 0x461a <twi_writeTo+0xd8>
    466c:	85 ec       	ldi	r24, 0xC5	; 197
    466e:	01 c0       	rjmp	.+2      	; 0x4672 <twi_writeTo+0x130>
    4670:	85 ee       	ldi	r24, 0xE5	; 229
    4672:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4676:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    467a:	6b 01       	movw	r12, r22
    467c:	7c 01       	movw	r14, r24
    467e:	11 23       	and	r17, r17
    4680:	51 f1       	breq	.+84     	; 0x46d6 <twi_writeTo+0x194>
    4682:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_state>
    4686:	82 30       	cpi	r24, 0x02	; 2
    4688:	31 f5       	brne	.+76     	; 0x46d6 <twi_writeTo+0x194>
    468a:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    468e:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    4692:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4696:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    469a:	89 2b       	or	r24, r25
    469c:	8a 2b       	or	r24, r26
    469e:	8b 2b       	or	r24, r27
    46a0:	71 f3       	breq	.-36     	; 0x467e <twi_writeTo+0x13c>
    46a2:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <micros>
    46a6:	80 90 40 04 	lds	r8, 0x0440	; 0x800440 <twi_timeout_us>
    46aa:	90 90 41 04 	lds	r9, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    46ae:	a0 90 42 04 	lds	r10, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    46b2:	b0 90 43 04 	lds	r11, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	8c 19       	sub	r24, r12
    46bc:	9d 09       	sbc	r25, r13
    46be:	ae 09       	sbc	r26, r14
    46c0:	bf 09       	sbc	r27, r15
    46c2:	88 16       	cp	r8, r24
    46c4:	99 06       	cpc	r9, r25
    46c6:	aa 06       	cpc	r10, r26
    46c8:	bb 06       	cpc	r11, r27
    46ca:	c8 f6       	brcc	.-78     	; 0x467e <twi_writeTo+0x13c>
    46cc:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    46d0:	3d de       	rcall	.-902    	; 0x434c <twi_handleTimeout>
    46d2:	c5 e0       	ldi	r28, 0x05	; 5
    46d4:	13 c0       	rjmp	.+38     	; 0x46fc <twi_writeTo+0x1ba>
    46d6:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_error>
    46da:	8f 3f       	cpi	r24, 0xFF	; 255
    46dc:	79 f0       	breq	.+30     	; 0x46fc <twi_writeTo+0x1ba>
    46de:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_error>
    46e2:	80 32       	cpi	r24, 0x20	; 32
    46e4:	41 f0       	breq	.+16     	; 0x46f6 <twi_writeTo+0x1b4>
    46e6:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_error>
    46ea:	80 33       	cpi	r24, 0x30	; 48
    46ec:	31 f0       	breq	.+12     	; 0x46fa <twi_writeTo+0x1b8>
    46ee:	c4 e0       	ldi	r28, 0x04	; 4
    46f0:	05 c0       	rjmp	.+10     	; 0x46fc <twi_writeTo+0x1ba>
    46f2:	c1 e0       	ldi	r28, 0x01	; 1
    46f4:	03 c0       	rjmp	.+6      	; 0x46fc <twi_writeTo+0x1ba>
    46f6:	c2 e0       	ldi	r28, 0x02	; 2
    46f8:	01 c0       	rjmp	.+2      	; 0x46fc <twi_writeTo+0x1ba>
    46fa:	c3 e0       	ldi	r28, 0x03	; 3
    46fc:	8c 2f       	mov	r24, r28
    46fe:	df 91       	pop	r29
    4700:	cf 91       	pop	r28
    4702:	1f 91       	pop	r17
    4704:	0f 91       	pop	r16
    4706:	ff 90       	pop	r15
    4708:	ef 90       	pop	r14
    470a:	df 90       	pop	r13
    470c:	cf 90       	pop	r12
    470e:	bf 90       	pop	r11
    4710:	af 90       	pop	r10
    4712:	9f 90       	pop	r9
    4714:	8f 90       	pop	r8
    4716:	7f 90       	pop	r7
    4718:	6f 90       	pop	r6
    471a:	5f 90       	pop	r5
    471c:	4f 90       	pop	r4
    471e:	08 95       	ret

00004720 <twi_stop>:
    4720:	85 ed       	ldi	r24, 0xD5	; 213
    4722:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4726:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_timeout_us>
    472a:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    472e:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    4732:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4736:	07 96       	adiw	r24, 0x07	; 7
    4738:	a1 1d       	adc	r26, r1
    473a:	b1 1d       	adc	r27, r1
    473c:	23 e0       	ldi	r18, 0x03	; 3
    473e:	b6 95       	lsr	r27
    4740:	a7 95       	ror	r26
    4742:	97 95       	ror	r25
    4744:	87 95       	ror	r24
    4746:	2a 95       	dec	r18
    4748:	d1 f7       	brne	.-12     	; 0x473e <twi_stop+0x1e>
    474a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    474e:	24 ff       	sbrs	r18, 4
    4750:	1b c0       	rjmp	.+54     	; 0x4788 <twi_stop+0x68>
    4752:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <twi_timeout_us>
    4756:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <twi_timeout_us+0x1>
    475a:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <twi_timeout_us+0x2>
    475e:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <twi_timeout_us+0x3>
    4762:	45 2b       	or	r20, r21
    4764:	46 2b       	or	r20, r22
    4766:	47 2b       	or	r20, r23
    4768:	81 f3       	breq	.-32     	; 0x474a <twi_stop+0x2a>
    476a:	00 97       	sbiw	r24, 0x00	; 0
    476c:	a1 05       	cpc	r26, r1
    476e:	b1 05       	cpc	r27, r1
    4770:	41 f0       	breq	.+16     	; 0x4782 <twi_stop+0x62>
    4772:	25 e3       	ldi	r18, 0x35	; 53
    4774:	2a 95       	dec	r18
    4776:	f1 f7       	brne	.-4      	; 0x4774 <twi_stop+0x54>
    4778:	00 00       	nop
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	a1 09       	sbc	r26, r1
    477e:	b1 09       	sbc	r27, r1
    4780:	e4 cf       	rjmp	.-56     	; 0x474a <twi_stop+0x2a>
    4782:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <twi_do_reset_on_timeout>
    4786:	e2 cd       	rjmp	.-1084   	; 0x434c <twi_handleTimeout>
    4788:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
    478c:	08 95       	ret

0000478e <__vector_39>:

ISR(TWI_vect)
{
    478e:	1f 92       	push	r1
    4790:	0f 92       	push	r0
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	0f 92       	push	r0
    4796:	11 24       	eor	r1, r1
    4798:	0b b6       	in	r0, 0x3b	; 59
    479a:	0f 92       	push	r0
    479c:	2f 93       	push	r18
    479e:	3f 93       	push	r19
    47a0:	4f 93       	push	r20
    47a2:	5f 93       	push	r21
    47a4:	6f 93       	push	r22
    47a6:	7f 93       	push	r23
    47a8:	8f 93       	push	r24
    47aa:	9f 93       	push	r25
    47ac:	af 93       	push	r26
    47ae:	bf 93       	push	r27
    47b0:	ef 93       	push	r30
    47b2:	ff 93       	push	r31
  switch(TW_STATUS){
    47b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    47b8:	88 7f       	andi	r24, 0xF8	; 248
    47ba:	80 36       	cpi	r24, 0x60	; 96
    47bc:	09 f4       	brne	.+2      	; 0x47c0 <__vector_39+0x32>
    47be:	9d c0       	rjmp	.+314    	; 0x48fa <__vector_39+0x16c>
    47c0:	70 f5       	brcc	.+92     	; 0x481e <__vector_39+0x90>
    47c2:	88 32       	cpi	r24, 0x28	; 40
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <__vector_39+0x3a>
    47c6:	5c c0       	rjmp	.+184    	; 0x4880 <__vector_39+0xf2>
    47c8:	90 f4       	brcc	.+36     	; 0x47ee <__vector_39+0x60>
    47ca:	80 31       	cpi	r24, 0x10	; 16
    47cc:	09 f4       	brne	.+2      	; 0x47d0 <__vector_39+0x42>
    47ce:	55 c0       	rjmp	.+170    	; 0x487a <__vector_39+0xec>
    47d0:	38 f4       	brcc	.+14     	; 0x47e0 <__vector_39+0x52>
    47d2:	88 23       	and	r24, r24
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <__vector_39+0x4a>
    47d6:	f3 c0       	rjmp	.+486    	; 0x49be <__vector_39+0x230>
    47d8:	88 30       	cpi	r24, 0x08	; 8
    47da:	09 f4       	brne	.+2      	; 0x47de <__vector_39+0x50>
    47dc:	4e c0       	rjmp	.+156    	; 0x487a <__vector_39+0xec>
    47de:	f2 c0       	rjmp	.+484    	; 0x49c4 <__vector_39+0x236>
    47e0:	88 31       	cpi	r24, 0x18	; 24
    47e2:	09 f4       	brne	.+2      	; 0x47e6 <__vector_39+0x58>
    47e4:	4d c0       	rjmp	.+154    	; 0x4880 <__vector_39+0xf2>
    47e6:	80 32       	cpi	r24, 0x20	; 32
    47e8:	09 f4       	brne	.+2      	; 0x47ec <__vector_39+0x5e>
    47ea:	5e c0       	rjmp	.+188    	; 0x48a8 <__vector_39+0x11a>
    47ec:	eb c0       	rjmp	.+470    	; 0x49c4 <__vector_39+0x236>
    47ee:	80 34       	cpi	r24, 0x40	; 64
    47f0:	09 f4       	brne	.+2      	; 0x47f4 <__vector_39+0x66>
    47f2:	69 c0       	rjmp	.+210    	; 0x48c6 <__vector_39+0x138>
    47f4:	50 f4       	brcc	.+20     	; 0x480a <__vector_39+0x7c>
    47f6:	80 33       	cpi	r24, 0x30	; 48
    47f8:	09 f4       	brne	.+2      	; 0x47fc <__vector_39+0x6e>
    47fa:	56 c0       	rjmp	.+172    	; 0x48a8 <__vector_39+0x11a>
    47fc:	88 33       	cpi	r24, 0x38	; 56
    47fe:	09 f0       	breq	.+2      	; 0x4802 <__vector_39+0x74>
    4800:	e1 c0       	rjmp	.+450    	; 0x49c4 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4802:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_error>
      twi_releaseBus();
    4806:	9c dd       	rcall	.-1224   	; 0x4340 <twi_releaseBus>
      break;
    4808:	dd c0       	rjmp	.+442    	; 0x49c4 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    480a:	80 35       	cpi	r24, 0x50	; 80
    480c:	09 f4       	brne	.+2      	; 0x4810 <__vector_39+0x82>
    480e:	4f c0       	rjmp	.+158    	; 0x48ae <__vector_39+0x120>
    4810:	88 35       	cpi	r24, 0x58	; 88
    4812:	09 f4       	brne	.+2      	; 0x4816 <__vector_39+0x88>
    4814:	5d c0       	rjmp	.+186    	; 0x48d0 <__vector_39+0x142>
    4816:	88 34       	cpi	r24, 0x48	; 72
    4818:	09 f0       	breq	.+2      	; 0x481c <__vector_39+0x8e>
    481a:	d4 c0       	rjmp	.+424    	; 0x49c4 <__vector_39+0x236>
    481c:	d2 c0       	rjmp	.+420    	; 0x49c2 <__vector_39+0x234>
    481e:	88 39       	cpi	r24, 0x98	; 152
    4820:	09 f4       	brne	.+2      	; 0x4824 <__vector_39+0x96>
    4822:	c3 c0       	rjmp	.+390    	; 0x49aa <__vector_39+0x21c>
    4824:	a8 f4       	brcc	.+42     	; 0x4850 <__vector_39+0xc2>
    4826:	88 37       	cpi	r24, 0x78	; 120
    4828:	09 f4       	brne	.+2      	; 0x482c <__vector_39+0x9e>
    482a:	67 c0       	rjmp	.+206    	; 0x48fa <__vector_39+0x16c>
    482c:	38 f4       	brcc	.+14     	; 0x483c <__vector_39+0xae>
    482e:	88 36       	cpi	r24, 0x68	; 104
    4830:	09 f4       	brne	.+2      	; 0x4834 <__vector_39+0xa6>
    4832:	63 c0       	rjmp	.+198    	; 0x48fa <__vector_39+0x16c>
    4834:	80 37       	cpi	r24, 0x70	; 112
    4836:	09 f4       	brne	.+2      	; 0x483a <__vector_39+0xac>
    4838:	60 c0       	rjmp	.+192    	; 0x48fa <__vector_39+0x16c>
    483a:	c4 c0       	rjmp	.+392    	; 0x49c4 <__vector_39+0x236>
    483c:	88 38       	cpi	r24, 0x88	; 136
    483e:	09 f4       	brne	.+2      	; 0x4842 <__vector_39+0xb4>
    4840:	b4 c0       	rjmp	.+360    	; 0x49aa <__vector_39+0x21c>
    4842:	80 39       	cpi	r24, 0x90	; 144
    4844:	09 f4       	brne	.+2      	; 0x4848 <__vector_39+0xba>
    4846:	5f c0       	rjmp	.+190    	; 0x4906 <__vector_39+0x178>
    4848:	80 38       	cpi	r24, 0x80	; 128
    484a:	09 f0       	breq	.+2      	; 0x484e <__vector_39+0xc0>
    484c:	bb c0       	rjmp	.+374    	; 0x49c4 <__vector_39+0x236>
    484e:	5b c0       	rjmp	.+182    	; 0x4906 <__vector_39+0x178>
    4850:	80 3b       	cpi	r24, 0xB0	; 176
    4852:	09 f4       	brne	.+2      	; 0x4856 <__vector_39+0xc8>
    4854:	82 c0       	rjmp	.+260    	; 0x495a <__vector_39+0x1cc>
    4856:	38 f4       	brcc	.+14     	; 0x4866 <__vector_39+0xd8>
    4858:	80 3a       	cpi	r24, 0xA0	; 160
    485a:	09 f4       	brne	.+2      	; 0x485e <__vector_39+0xd0>
    485c:	66 c0       	rjmp	.+204    	; 0x492a <__vector_39+0x19c>
    485e:	88 3a       	cpi	r24, 0xA8	; 168
    4860:	09 f4       	brne	.+2      	; 0x4864 <__vector_39+0xd6>
    4862:	7b c0       	rjmp	.+246    	; 0x495a <__vector_39+0x1cc>
    4864:	af c0       	rjmp	.+350    	; 0x49c4 <__vector_39+0x236>
    4866:	80 3c       	cpi	r24, 0xC0	; 192
    4868:	09 f4       	brne	.+2      	; 0x486c <__vector_39+0xde>
    486a:	a3 c0       	rjmp	.+326    	; 0x49b2 <__vector_39+0x224>
    486c:	88 3c       	cpi	r24, 0xC8	; 200
    486e:	09 f4       	brne	.+2      	; 0x4872 <__vector_39+0xe4>
    4870:	a0 c0       	rjmp	.+320    	; 0x49b2 <__vector_39+0x224>
    4872:	88 3b       	cpi	r24, 0xB8	; 184
    4874:	09 f4       	brne	.+2      	; 0x4878 <__vector_39+0xea>
    4876:	86 c0       	rjmp	.+268    	; 0x4984 <__vector_39+0x1f6>
    4878:	a5 c0       	rjmp	.+330    	; 0x49c4 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    487a:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_slarw>
    487e:	10 c0       	rjmp	.+32     	; 0x48a0 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4880:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4884:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_masterBufferLength>
    4888:	98 17       	cp	r25, r24
    488a:	70 f5       	brcc	.+92     	; 0x48e8 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    488c:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <twi_masterBufferIndex>
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	8e 0f       	add	r24, r30
    4894:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_masterBufferIndex>
    4898:	f0 e0       	ldi	r31, 0x00	; 0
    489a:	e6 5e       	subi	r30, 0xE6	; 230
    489c:	fb 4f       	sbci	r31, 0xFB	; 251
    489e:	80 81       	ld	r24, Z
    48a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    48a4:	85 ec       	ldi	r24, 0xC5	; 197
    48a6:	82 c0       	rjmp	.+260    	; 0x49ac <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    48a8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_error>
    48ac:	8a c0       	rjmp	.+276    	; 0x49c2 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    48ae:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <twi_masterBufferIndex>
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	8e 0f       	add	r24, r30
    48b6:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_masterBufferIndex>
    48ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	e6 5e       	subi	r30, 0xE6	; 230
    48c2:	fb 4f       	sbci	r31, 0xFB	; 251
    48c4:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    48c6:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <twi_masterBufferIndex>
    48ca:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_masterBufferLength>
    48ce:	6a c0       	rjmp	.+212    	; 0x49a4 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    48d0:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <twi_masterBufferIndex>
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	8e 0f       	add	r24, r30
    48d8:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_masterBufferIndex>
    48dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	e6 5e       	subi	r30, 0xE6	; 230
    48e4:	fb 4f       	sbci	r31, 0xFB	; 251
    48e6:	80 83       	st	Z, r24
      if (twi_sendStop){
    48e8:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_sendStop>
    48ec:	81 11       	cpse	r24, r1
    48ee:	69 c0       	rjmp	.+210    	; 0x49c2 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    48f6:	84 ea       	ldi	r24, 0xA4	; 164
    48f8:	5d c0       	rjmp	.+186    	; 0x49b4 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    48fa:	83 e0       	ldi	r24, 0x03	; 3
    48fc:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4900:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_rxBufferIndex>
    4904:	cf cf       	rjmp	.-98     	; 0x48a4 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4906:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    490a:	80 32       	cpi	r24, 0x20	; 32
    490c:	08 f0       	brcs	.+2      	; 0x4910 <__vector_39+0x182>
    490e:	4d c0       	rjmp	.+154    	; 0x49aa <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4910:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	8e 0f       	add	r24, r30
    4918:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_rxBufferIndex>
    491c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	ea 52       	subi	r30, 0x2A	; 42
    4924:	fc 4f       	sbci	r31, 0xFC	; 252
    4926:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4928:	bd cf       	rjmp	.-134    	; 0x48a4 <__vector_39+0x116>
    492a:	0a dd       	rcall	.-1516   	; 0x4340 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    492c:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    4930:	80 32       	cpi	r24, 0x20	; 32
    4932:	30 f4       	brcc	.+12     	; 0x4940 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4934:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	ea 52       	subi	r30, 0x2A	; 42
    493c:	fc 4f       	sbci	r31, 0xFC	; 252
    493e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4940:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <twi_rxBufferIndex>
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <twi_onSlaveReceive>
    494a:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <twi_onSlaveReceive+0x1>
    494e:	86 ed       	ldi	r24, 0xD6	; 214
    4950:	93 e0       	ldi	r25, 0x03	; 3
    4952:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4954:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_rxBufferIndex>
      break;
    4958:	35 c0       	rjmp	.+106    	; 0x49c4 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    495a:	84 e0       	ldi	r24, 0x04	; 4
    495c:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4960:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4964:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4968:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <twi_onSlaveTransmit>
    496c:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <twi_onSlaveTransmit+0x1>
    4970:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4972:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    4976:	81 11       	cpse	r24, r1
    4978:	05 c0       	rjmp	.+10     	; 0x4984 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4980:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4984:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_txBufferIndex>
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	8e 0f       	add	r24, r30
    498c:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_txBufferIndex>
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	e8 50       	subi	r30, 0x08	; 8
    4994:	fc 4f       	sbci	r31, 0xFC	; 252
    4996:	80 81       	ld	r24, Z
    4998:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    499c:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <twi_txBufferIndex>
    49a0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_txBufferLength>
    49a4:	98 17       	cp	r25, r24
    49a6:	08 f4       	brcc	.+2      	; 0x49aa <__vector_39+0x21c>
    49a8:	7d cf       	rjmp	.-262    	; 0x48a4 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    49aa:	85 e8       	ldi	r24, 0x85	; 133
    49ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    49b0:	09 c0       	rjmp	.+18     	; 0x49c4 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    49b2:	85 ec       	ldi	r24, 0xC5	; 197
    49b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    49b8:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_state>
      break;
    49bc:	03 c0       	rjmp	.+6      	; 0x49c4 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    49be:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <twi_error>
      twi_stop();
    49c2:	ae de       	rcall	.-676    	; 0x4720 <twi_stop>
      break;
  }
}
    49c4:	ff 91       	pop	r31
    49c6:	ef 91       	pop	r30
    49c8:	bf 91       	pop	r27
    49ca:	af 91       	pop	r26
    49cc:	9f 91       	pop	r25
    49ce:	8f 91       	pop	r24
    49d0:	7f 91       	pop	r23
    49d2:	6f 91       	pop	r22
    49d4:	5f 91       	pop	r21
    49d6:	4f 91       	pop	r20
    49d8:	3f 91       	pop	r19
    49da:	2f 91       	pop	r18
    49dc:	0f 90       	pop	r0
    49de:	0b be       	out	0x3b, r0	; 59
    49e0:	0f 90       	pop	r0
    49e2:	0f be       	out	0x3f, r0	; 63
    49e4:	0f 90       	pop	r0
    49e6:	1f 90       	pop	r1
    49e8:	18 95       	reti

000049ea <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <_ZN5Print13setWriteErrorEi+0x6>
    49f0:	1f 92       	push	r1
    49f2:	cd b7       	in	r28, 0x3d	; 61
    49f4:	de b7       	in	r29, 0x3e	; 62
    49f6:	9a 83       	std	Y+2, r25	; 0x02
    49f8:	89 83       	std	Y+1, r24	; 0x01
    49fa:	7c 83       	std	Y+4, r23	; 0x04
    49fc:	6b 83       	std	Y+3, r22	; 0x03
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	9a 81       	ldd	r25, Y+2	; 0x02
    4a02:	2b 81       	ldd	r18, Y+3	; 0x03
    4a04:	3c 81       	ldd	r19, Y+4	; 0x04
    4a06:	fc 01       	movw	r30, r24
    4a08:	33 83       	std	Z+3, r19	; 0x03
    4a0a:	22 83       	std	Z+2, r18	; 0x02
    4a0c:	00 00       	nop
    4a0e:	0f 90       	pop	r0
    4a10:	0f 90       	pop	r0
    4a12:	0f 90       	pop	r0
    4a14:	0f 90       	pop	r0
    4a16:	df 91       	pop	r29
    4a18:	cf 91       	pop	r28
    4a1a:	08 95       	ret

00004a1c <_ZN5PrintC1Ev>:
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	1f 92       	push	r1
    4a22:	1f 92       	push	r1
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	9a 83       	std	Y+2, r25	; 0x02
    4a2a:	89 83       	std	Y+1, r24	; 0x01
    4a2c:	25 ee       	ldi	r18, 0xE5	; 229
    4a2e:	32 e0       	ldi	r19, 0x02	; 2
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	9a 81       	ldd	r25, Y+2	; 0x02
    4a34:	fc 01       	movw	r30, r24
    4a36:	31 83       	std	Z+1, r19	; 0x01
    4a38:	20 83       	st	Z, r18
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3e:	fc 01       	movw	r30, r24
    4a40:	13 82       	std	Z+3, r1	; 0x03
    4a42:	12 82       	std	Z+2, r1	; 0x02
    4a44:	00 00       	nop
    4a46:	0f 90       	pop	r0
    4a48:	0f 90       	pop	r0
    4a4a:	df 91       	pop	r29
    4a4c:	cf 91       	pop	r28
    4a4e:	08 95       	ret

00004a50 <_ZN5Print17availableForWriteEv>:
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	1f 92       	push	r1
    4a56:	1f 92       	push	r1
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
    4a5c:	9a 83       	std	Y+2, r25	; 0x02
    4a5e:	89 83       	std	Y+1, r24	; 0x01
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	08 95       	ret

00004a6e <_ZN5Print5flushEv>:
    4a6e:	cf 93       	push	r28
    4a70:	df 93       	push	r29
    4a72:	1f 92       	push	r1
    4a74:	1f 92       	push	r1
    4a76:	cd b7       	in	r28, 0x3d	; 61
    4a78:	de b7       	in	r29, 0x3e	; 62
    4a7a:	9a 83       	std	Y+2, r25	; 0x02
    4a7c:	89 83       	std	Y+1, r24	; 0x01
    4a7e:	00 00       	nop
    4a80:	0f 90       	pop	r0
    4a82:	0f 90       	pop	r0
    4a84:	df 91       	pop	r29
    4a86:	cf 91       	pop	r28
    4a88:	08 95       	ret

00004a8a <_ZN6StreamC1Ev>:
    4a8a:	cf 93       	push	r28
    4a8c:	df 93       	push	r29
    4a8e:	1f 92       	push	r1
    4a90:	1f 92       	push	r1
    4a92:	cd b7       	in	r28, 0x3d	; 61
    4a94:	de b7       	in	r29, 0x3e	; 62
    4a96:	9a 83       	std	Y+2, r25	; 0x02
    4a98:	89 83       	std	Y+1, r24	; 0x01
    4a9a:	89 81       	ldd	r24, Y+1	; 0x01
    4a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9e:	be df       	rcall	.-132    	; 0x4a1c <_ZN5PrintC1Ev>
    4aa0:	22 eb       	ldi	r18, 0xB2	; 178
    4aa2:	32 e0       	ldi	r19, 0x02	; 2
    4aa4:	89 81       	ldd	r24, Y+1	; 0x01
    4aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	31 83       	std	Z+1, r19	; 0x01
    4aac:	20 83       	st	Z, r18
    4aae:	29 81       	ldd	r18, Y+1	; 0x01
    4ab0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ab2:	88 ee       	ldi	r24, 0xE8	; 232
    4ab4:	93 e0       	ldi	r25, 0x03	; 3
    4ab6:	a0 e0       	ldi	r26, 0x00	; 0
    4ab8:	b0 e0       	ldi	r27, 0x00	; 0
    4aba:	f9 01       	movw	r30, r18
    4abc:	84 83       	std	Z+4, r24	; 0x04
    4abe:	95 83       	std	Z+5, r25	; 0x05
    4ac0:	a6 83       	std	Z+6, r26	; 0x06
    4ac2:	b7 83       	std	Z+7, r27	; 0x07
    4ac4:	00 00       	nop
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	df 91       	pop	r29
    4acc:	cf 91       	pop	r28
    4ace:	08 95       	ret

00004ad0 <_ZN7TwoWireC1Ev>:
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    4ad4:	1f 92       	push	r1
    4ad6:	1f 92       	push	r1
    4ad8:	cd b7       	in	r28, 0x3d	; 61
    4ada:	de b7       	in	r29, 0x3e	; 62
    4adc:	9a 83       	std	Y+2, r25	; 0x02
    4ade:	89 83       	std	Y+1, r24	; 0x01
    4ae0:	89 81       	ldd	r24, Y+1	; 0x01
    4ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae4:	d2 df       	rcall	.-92     	; 0x4a8a <_ZN6StreamC1Ev>
    4ae6:	20 ea       	ldi	r18, 0xA0	; 160
    4ae8:	32 e0       	ldi	r19, 0x02	; 2
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	9a 81       	ldd	r25, Y+2	; 0x02
    4aee:	fc 01       	movw	r30, r24
    4af0:	31 83       	std	Z+1, r19	; 0x01
    4af2:	20 83       	st	Z, r18
    4af4:	00 00       	nop
    4af6:	0f 90       	pop	r0
    4af8:	0f 90       	pop	r0
    4afa:	df 91       	pop	r29
    4afc:	cf 91       	pop	r28
    4afe:	08 95       	ret

00004b00 <_ZN7TwoWire5beginEv>:
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	1f 92       	push	r1
    4b06:	1f 92       	push	r1
    4b08:	cd b7       	in	r28, 0x3d	; 61
    4b0a:	de b7       	in	r29, 0x3e	; 62
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4b14:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4b18:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4b1c:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4b20:	b2 db       	rcall	.-2204   	; 0x4286 <twi_init>
    4b22:	8f ef       	ldi	r24, 0xFF	; 255
    4b24:	97 e2       	ldi	r25, 0x27	; 39
    4b26:	07 dc       	rcall	.-2034   	; 0x4336 <twi_attachSlaveTxEvent>
    4b28:	82 eb       	ldi	r24, 0xB2	; 178
    4b2a:	97 e2       	ldi	r25, 0x27	; 39
    4b2c:	ff db       	rcall	.-2050   	; 0x432c <twi_attachSlaveRxEvent>
    4b2e:	00 00       	nop
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	08 95       	ret

00004b3a <_ZN7TwoWire11requestFromEhhmhh>:
    4b3a:	cf 92       	push	r12
    4b3c:	ef 92       	push	r14
    4b3e:	0f 93       	push	r16
    4b40:	1f 93       	push	r17
    4b42:	cf 93       	push	r28
    4b44:	df 93       	push	r29
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
    4b4a:	2b 97       	sbiw	r28, 0x0b	; 11
    4b4c:	0f b6       	in	r0, 0x3f	; 63
    4b4e:	f8 94       	cli
    4b50:	de bf       	out	0x3e, r29	; 62
    4b52:	0f be       	out	0x3f, r0	; 63
    4b54:	cd bf       	out	0x3d, r28	; 61
    4b56:	9b 83       	std	Y+3, r25	; 0x03
    4b58:	8a 83       	std	Y+2, r24	; 0x02
    4b5a:	6c 83       	std	Y+4, r22	; 0x04
    4b5c:	4d 83       	std	Y+5, r20	; 0x05
    4b5e:	0e 83       	std	Y+6, r16	; 0x06
    4b60:	1f 83       	std	Y+7, r17	; 0x07
    4b62:	28 87       	std	Y+8, r18	; 0x08
    4b64:	39 87       	std	Y+9, r19	; 0x09
    4b66:	ea 86       	std	Y+10, r14	; 0x0a
    4b68:	cb 86       	std	Y+11, r12	; 0x0b
    4b6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b6c:	88 23       	and	r24, r24
    4b6e:	d9 f1       	breq	.+118    	; 0x4be6 <_ZN7TwoWire11requestFromEhhmhh+0xac>
    4b70:	8a 81       	ldd	r24, Y+2	; 0x02
    4b72:	9b 81       	ldd	r25, Y+3	; 0x03
    4b74:	6c 81       	ldd	r22, Y+4	; 0x04
    4b76:	98 d0       	rcall	.+304    	; 0x4ca8 <_ZN7TwoWire17beginTransmissionEh>
    4b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b7a:	84 30       	cpi	r24, 0x04	; 4
    4b7c:	10 f0       	brcs	.+4      	; 0x4b82 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4b7e:	83 e0       	ldi	r24, 0x03	; 3
    4b80:	8a 87       	std	Y+10, r24	; 0x0a
    4b82:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b84:	9f ef       	ldi	r25, 0xFF	; 255
    4b86:	98 0f       	add	r25, r24
    4b88:	9a 87       	std	Y+10, r25	; 0x0a
    4b8a:	91 e0       	ldi	r25, 0x01	; 1
    4b8c:	88 23       	and	r24, r24
    4b8e:	09 f4       	brne	.+2      	; 0x4b92 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	99 23       	and	r25, r25
    4b94:	21 f1       	breq	.+72     	; 0x4bde <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    4b96:	8a 81       	ldd	r24, Y+2	; 0x02
    4b98:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	80 81       	ld	r24, Z
    4b9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	20 81       	ld	r18, Z
    4ba4:	31 81       	ldd	r19, Z+1	; 0x01
    4ba6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ba8:	88 2f       	mov	r24, r24
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	ac 01       	movw	r20, r24
    4bae:	44 0f       	add	r20, r20
    4bb0:	55 1f       	adc	r21, r21
    4bb2:	44 0f       	add	r20, r20
    4bb4:	55 1f       	adc	r21, r21
    4bb6:	44 0f       	add	r20, r20
    4bb8:	55 1f       	adc	r21, r21
    4bba:	8e 81       	ldd	r24, Y+6	; 0x06
    4bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    4bbe:	a8 85       	ldd	r26, Y+8	; 0x08
    4bc0:	b9 85       	ldd	r27, Y+9	; 0x09
    4bc2:	04 c0       	rjmp	.+8      	; 0x4bcc <_ZN7TwoWire11requestFromEhhmhh+0x92>
    4bc4:	b6 95       	lsr	r27
    4bc6:	a7 95       	ror	r26
    4bc8:	97 95       	ror	r25
    4bca:	87 95       	ror	r24
    4bcc:	4a 95       	dec	r20
    4bce:	d2 f7       	brpl	.-12     	; 0x4bc4 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    4bd0:	48 2f       	mov	r20, r24
    4bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd6:	64 2f       	mov	r22, r20
    4bd8:	f9 01       	movw	r30, r18
    4bda:	19 95       	eicall
    4bdc:	d2 cf       	rjmp	.-92     	; 0x4b82 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    4bde:	8a 81       	ldd	r24, Y+2	; 0x02
    4be0:	9b 81       	ldd	r25, Y+3	; 0x03
    4be2:	60 e0       	ldi	r22, 0x00	; 0
    4be4:	91 d0       	rcall	.+290    	; 0x4d08 <_ZN7TwoWire15endTransmissionEh>
    4be6:	8d 81       	ldd	r24, Y+5	; 0x05
    4be8:	81 32       	cpi	r24, 0x21	; 33
    4bea:	10 f0       	brcs	.+4      	; 0x4bf0 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    4bec:	80 e2       	ldi	r24, 0x20	; 32
    4bee:	8d 83       	std	Y+5, r24	; 0x05
    4bf0:	2b 85       	ldd	r18, Y+11	; 0x0b
    4bf2:	4d 81       	ldd	r20, Y+5	; 0x05
    4bf4:	68 e4       	ldi	r22, 0x48	; 72
    4bf6:	74 e0       	ldi	r23, 0x04	; 4
    4bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    4bfa:	bc db       	rcall	.-2184   	; 0x4374 <twi_readFrom>
    4bfc:	89 83       	std	Y+1, r24	; 0x01
    4bfe:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	2b 96       	adiw	r28, 0x0b	; 11
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	f8 94       	cli
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	cd bf       	out	0x3d, r28	; 61
    4c16:	df 91       	pop	r29
    4c18:	cf 91       	pop	r28
    4c1a:	1f 91       	pop	r17
    4c1c:	0f 91       	pop	r16
    4c1e:	ef 90       	pop	r14
    4c20:	cf 90       	pop	r12
    4c22:	08 95       	ret

00004c24 <_ZN7TwoWire11requestFromEhhh>:
    4c24:	cf 92       	push	r12
    4c26:	ef 92       	push	r14
    4c28:	0f 93       	push	r16
    4c2a:	1f 93       	push	r17
    4c2c:	cf 93       	push	r28
    4c2e:	df 93       	push	r29
    4c30:	00 d0       	rcall	.+0      	; 0x4c32 <_ZN7TwoWire11requestFromEhhh+0xe>
    4c32:	1f 92       	push	r1
    4c34:	1f 92       	push	r1
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    4c3a:	9a 83       	std	Y+2, r25	; 0x02
    4c3c:	89 83       	std	Y+1, r24	; 0x01
    4c3e:	6b 83       	std	Y+3, r22	; 0x03
    4c40:	4c 83       	std	Y+4, r20	; 0x04
    4c42:	2d 83       	std	Y+5, r18	; 0x05
    4c44:	89 81       	ldd	r24, Y+1	; 0x01
    4c46:	9a 81       	ldd	r25, Y+2	; 0x02
    4c48:	cd 80       	ldd	r12, Y+5	; 0x05
    4c4a:	e1 2c       	mov	r14, r1
    4c4c:	00 e0       	ldi	r16, 0x00	; 0
    4c4e:	10 e0       	ldi	r17, 0x00	; 0
    4c50:	98 01       	movw	r18, r16
    4c52:	4c 81       	ldd	r20, Y+4	; 0x04
    4c54:	6b 81       	ldd	r22, Y+3	; 0x03
    4c56:	71 df       	rcall	.-286    	; 0x4b3a <_ZN7TwoWire11requestFromEhhmhh>
    4c58:	0f 90       	pop	r0
    4c5a:	0f 90       	pop	r0
    4c5c:	0f 90       	pop	r0
    4c5e:	0f 90       	pop	r0
    4c60:	0f 90       	pop	r0
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	1f 91       	pop	r17
    4c68:	0f 91       	pop	r16
    4c6a:	ef 90       	pop	r14
    4c6c:	cf 90       	pop	r12
    4c6e:	08 95       	ret

00004c70 <_ZN7TwoWire11requestFromEii>:
    4c70:	cf 93       	push	r28
    4c72:	df 93       	push	r29
    4c74:	00 d0       	rcall	.+0      	; 0x4c76 <_ZN7TwoWire11requestFromEii+0x6>
    4c76:	00 d0       	rcall	.+0      	; 0x4c78 <_ZN7TwoWire11requestFromEii+0x8>
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	9a 83       	std	Y+2, r25	; 0x02
    4c7e:	89 83       	std	Y+1, r24	; 0x01
    4c80:	7c 83       	std	Y+4, r23	; 0x04
    4c82:	6b 83       	std	Y+3, r22	; 0x03
    4c84:	5e 83       	std	Y+6, r21	; 0x06
    4c86:	4d 83       	std	Y+5, r20	; 0x05
    4c88:	4d 81       	ldd	r20, Y+5	; 0x05
    4c8a:	3b 81       	ldd	r19, Y+3	; 0x03
    4c8c:	89 81       	ldd	r24, Y+1	; 0x01
    4c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c90:	21 e0       	ldi	r18, 0x01	; 1
    4c92:	63 2f       	mov	r22, r19
    4c94:	c7 df       	rcall	.-114    	; 0x4c24 <_ZN7TwoWire11requestFromEhhh>
    4c96:	26 96       	adiw	r28, 0x06	; 6
    4c98:	0f b6       	in	r0, 0x3f	; 63
    4c9a:	f8 94       	cli
    4c9c:	de bf       	out	0x3e, r29	; 62
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	cd bf       	out	0x3d, r28	; 61
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	08 95       	ret

00004ca8 <_ZN7TwoWire17beginTransmissionEh>:
    4ca8:	cf 93       	push	r28
    4caa:	df 93       	push	r29
    4cac:	00 d0       	rcall	.+0      	; 0x4cae <_ZN7TwoWire17beginTransmissionEh+0x6>
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
    4cb2:	9a 83       	std	Y+2, r25	; 0x02
    4cb4:	89 83       	std	Y+1, r24	; 0x01
    4cb6:	6b 83       	std	Y+3, r22	; 0x03
    4cb8:	81 e0       	ldi	r24, 0x01	; 1
    4cba:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZN7TwoWire12transmittingE>
    4cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc0:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZN7TwoWire9txAddressE>
    4cc4:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4cc8:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4ccc:	00 00       	nop
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	0f 90       	pop	r0
    4cd4:	df 91       	pop	r29
    4cd6:	cf 91       	pop	r28
    4cd8:	08 95       	ret

00004cda <_ZN7TwoWire17beginTransmissionEi>:
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	00 d0       	rcall	.+0      	; 0x4ce0 <_ZN7TwoWire17beginTransmissionEi+0x6>
    4ce0:	1f 92       	push	r1
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
    4ce6:	9a 83       	std	Y+2, r25	; 0x02
    4ce8:	89 83       	std	Y+1, r24	; 0x01
    4cea:	7c 83       	std	Y+4, r23	; 0x04
    4cec:	6b 83       	std	Y+3, r22	; 0x03
    4cee:	2b 81       	ldd	r18, Y+3	; 0x03
    4cf0:	89 81       	ldd	r24, Y+1	; 0x01
    4cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf4:	62 2f       	mov	r22, r18
    4cf6:	d8 df       	rcall	.-80     	; 0x4ca8 <_ZN7TwoWire17beginTransmissionEh>
    4cf8:	00 00       	nop
    4cfa:	0f 90       	pop	r0
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	df 91       	pop	r29
    4d04:	cf 91       	pop	r28
    4d06:	08 95       	ret

00004d08 <_ZN7TwoWire15endTransmissionEh>:
    4d08:	0f 93       	push	r16
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	00 d0       	rcall	.+0      	; 0x4d10 <_ZN7TwoWire15endTransmissionEh+0x8>
    4d10:	1f 92       	push	r1
    4d12:	cd b7       	in	r28, 0x3d	; 61
    4d14:	de b7       	in	r29, 0x3e	; 62
    4d16:	9b 83       	std	Y+3, r25	; 0x03
    4d18:	8a 83       	std	Y+2, r24	; 0x02
    4d1a:	6c 83       	std	Y+4, r22	; 0x04
    4d1c:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4d20:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN7TwoWire9txAddressE>
    4d24:	0c 81       	ldd	r16, Y+4	; 0x04
    4d26:	21 e0       	ldi	r18, 0x01	; 1
    4d28:	49 2f       	mov	r20, r25
    4d2a:	6b e6       	ldi	r22, 0x6B	; 107
    4d2c:	74 e0       	ldi	r23, 0x04	; 4
    4d2e:	09 dc       	rcall	.-2030   	; 0x4542 <twi_writeTo>
    4d30:	89 83       	std	Y+1, r24	; 0x01
    4d32:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4d36:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4d3a:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZN7TwoWire12transmittingE>
    4d3e:	89 81       	ldd	r24, Y+1	; 0x01
    4d40:	0f 90       	pop	r0
    4d42:	0f 90       	pop	r0
    4d44:	0f 90       	pop	r0
    4d46:	0f 90       	pop	r0
    4d48:	df 91       	pop	r29
    4d4a:	cf 91       	pop	r28
    4d4c:	0f 91       	pop	r16
    4d4e:	08 95       	ret

00004d50 <_ZN7TwoWire15endTransmissionEv>:
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	1f 92       	push	r1
    4d56:	1f 92       	push	r1
    4d58:	cd b7       	in	r28, 0x3d	; 61
    4d5a:	de b7       	in	r29, 0x3e	; 62
    4d5c:	9a 83       	std	Y+2, r25	; 0x02
    4d5e:	89 83       	std	Y+1, r24	; 0x01
    4d60:	89 81       	ldd	r24, Y+1	; 0x01
    4d62:	9a 81       	ldd	r25, Y+2	; 0x02
    4d64:	61 e0       	ldi	r22, 0x01	; 1
    4d66:	d0 df       	rcall	.-96     	; 0x4d08 <_ZN7TwoWire15endTransmissionEh>
    4d68:	0f 90       	pop	r0
    4d6a:	0f 90       	pop	r0
    4d6c:	df 91       	pop	r29
    4d6e:	cf 91       	pop	r28
    4d70:	08 95       	ret

00004d72 <_ZN7TwoWire5writeEh>:
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	00 d0       	rcall	.+0      	; 0x4d78 <_ZN7TwoWire5writeEh+0x6>
    4d78:	cd b7       	in	r28, 0x3d	; 61
    4d7a:	de b7       	in	r29, 0x3e	; 62
    4d7c:	9a 83       	std	Y+2, r25	; 0x02
    4d7e:	89 83       	std	Y+1, r24	; 0x01
    4d80:	6b 83       	std	Y+3, r22	; 0x03
    4d82:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZN7TwoWire12transmittingE>
    4d86:	88 23       	and	r24, r24
    4d88:	f9 f0       	breq	.+62     	; 0x4dc8 <_ZN7TwoWire5writeEh+0x56>
    4d8a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4d8e:	80 32       	cpi	r24, 0x20	; 32
    4d90:	40 f0       	brcs	.+16     	; 0x4da2 <_ZN7TwoWire5writeEh+0x30>
    4d92:	89 81       	ldd	r24, Y+1	; 0x01
    4d94:	9a 81       	ldd	r25, Y+2	; 0x02
    4d96:	61 e0       	ldi	r22, 0x01	; 1
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	27 de       	rcall	.-946    	; 0x49ea <_ZN5Print13setWriteErrorEi>
    4d9c:	80 e0       	ldi	r24, 0x00	; 0
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	19 c0       	rjmp	.+50     	; 0x4dd4 <_ZN7TwoWire5writeEh+0x62>
    4da2:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4da6:	88 2f       	mov	r24, r24
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	2b 81       	ldd	r18, Y+3	; 0x03
    4dac:	85 59       	subi	r24, 0x95	; 149
    4dae:	9b 4f       	sbci	r25, 0xFB	; 251
    4db0:	fc 01       	movw	r30, r24
    4db2:	20 83       	st	Z, r18
    4db4:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4db8:	8f 5f       	subi	r24, 0xFF	; 255
    4dba:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4dbe:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    4dc2:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    4dc6:	04 c0       	rjmp	.+8      	; 0x4dd0 <_ZN7TwoWire5writeEh+0x5e>
    4dc8:	ce 01       	movw	r24, r28
    4dca:	03 96       	adiw	r24, 0x03	; 3
    4dcc:	61 e0       	ldi	r22, 0x01	; 1
    4dce:	86 da       	rcall	.-2804   	; 0x42dc <twi_transmit>
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	0f 90       	pop	r0
    4dda:	df 91       	pop	r29
    4ddc:	cf 91       	pop	r28
    4dde:	08 95       	ret

00004de0 <_ZN7TwoWire5writeEPKhj>:
    4de0:	cf 93       	push	r28
    4de2:	df 93       	push	r29
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	28 97       	sbiw	r28, 0x08	; 8
    4dea:	0f b6       	in	r0, 0x3f	; 63
    4dec:	f8 94       	cli
    4dee:	de bf       	out	0x3e, r29	; 62
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	cd bf       	out	0x3d, r28	; 61
    4df4:	9c 83       	std	Y+4, r25	; 0x04
    4df6:	8b 83       	std	Y+3, r24	; 0x03
    4df8:	7e 83       	std	Y+6, r23	; 0x06
    4dfa:	6d 83       	std	Y+5, r22	; 0x05
    4dfc:	58 87       	std	Y+8, r21	; 0x08
    4dfe:	4f 83       	std	Y+7, r20	; 0x07
    4e00:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZN7TwoWire12transmittingE>
    4e04:	88 23       	and	r24, r24
    4e06:	21 f1       	breq	.+72     	; 0x4e50 <_ZN7TwoWire5writeEPKhj+0x70>
    4e08:	1a 82       	std	Y+2, r1	; 0x02
    4e0a:	19 82       	std	Y+1, r1	; 0x01
    4e0c:	29 81       	ldd	r18, Y+1	; 0x01
    4e0e:	3a 81       	ldd	r19, Y+2	; 0x02
    4e10:	8f 81       	ldd	r24, Y+7	; 0x07
    4e12:	98 85       	ldd	r25, Y+8	; 0x08
    4e14:	28 17       	cp	r18, r24
    4e16:	39 07       	cpc	r19, r25
    4e18:	00 f5       	brcc	.+64     	; 0x4e5a <_ZN7TwoWire5writeEPKhj+0x7a>
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e1e:	fc 01       	movw	r30, r24
    4e20:	80 81       	ld	r24, Z
    4e22:	91 81       	ldd	r25, Z+1	; 0x01
    4e24:	fc 01       	movw	r30, r24
    4e26:	20 81       	ld	r18, Z
    4e28:	31 81       	ldd	r19, Z+1	; 0x01
    4e2a:	4d 81       	ldd	r20, Y+5	; 0x05
    4e2c:	5e 81       	ldd	r21, Y+6	; 0x06
    4e2e:	89 81       	ldd	r24, Y+1	; 0x01
    4e30:	9a 81       	ldd	r25, Y+2	; 0x02
    4e32:	84 0f       	add	r24, r20
    4e34:	95 1f       	adc	r25, r21
    4e36:	fc 01       	movw	r30, r24
    4e38:	40 81       	ld	r20, Z
    4e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e3e:	64 2f       	mov	r22, r20
    4e40:	f9 01       	movw	r30, r18
    4e42:	19 95       	eicall
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	9a 81       	ldd	r25, Y+2	; 0x02
    4e48:	01 96       	adiw	r24, 0x01	; 1
    4e4a:	9a 83       	std	Y+2, r25	; 0x02
    4e4c:	89 83       	std	Y+1, r24	; 0x01
    4e4e:	de cf       	rjmp	.-68     	; 0x4e0c <_ZN7TwoWire5writeEPKhj+0x2c>
    4e50:	2f 81       	ldd	r18, Y+7	; 0x07
    4e52:	8d 81       	ldd	r24, Y+5	; 0x05
    4e54:	9e 81       	ldd	r25, Y+6	; 0x06
    4e56:	62 2f       	mov	r22, r18
    4e58:	41 da       	rcall	.-2942   	; 0x42dc <twi_transmit>
    4e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e5c:	98 85       	ldd	r25, Y+8	; 0x08
    4e5e:	28 96       	adiw	r28, 0x08	; 8
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	f8 94       	cli
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	cd bf       	out	0x3d, r28	; 61
    4e6a:	df 91       	pop	r29
    4e6c:	cf 91       	pop	r28
    4e6e:	08 95       	ret

00004e70 <_ZN7TwoWire9availableEv>:
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	1f 92       	push	r1
    4e76:	1f 92       	push	r1
    4e78:	cd b7       	in	r28, 0x3d	; 61
    4e7a:	de b7       	in	r29, 0x3e	; 62
    4e7c:	9a 83       	std	Y+2, r25	; 0x02
    4e7e:	89 83       	std	Y+1, r24	; 0x01
    4e80:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4e84:	28 2f       	mov	r18, r24
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4e8c:	88 2f       	mov	r24, r24
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	a9 01       	movw	r20, r18
    4e92:	48 1b       	sub	r20, r24
    4e94:	59 0b       	sbc	r21, r25
    4e96:	ca 01       	movw	r24, r20
    4e98:	0f 90       	pop	r0
    4e9a:	0f 90       	pop	r0
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	08 95       	ret

00004ea2 <_ZN7TwoWire4readEv>:
    4ea2:	cf 93       	push	r28
    4ea4:	df 93       	push	r29
    4ea6:	00 d0       	rcall	.+0      	; 0x4ea8 <_ZN7TwoWire4readEv+0x6>
    4ea8:	1f 92       	push	r1
    4eaa:	cd b7       	in	r28, 0x3d	; 61
    4eac:	de b7       	in	r29, 0x3e	; 62
    4eae:	9c 83       	std	Y+4, r25	; 0x04
    4eb0:	8b 83       	std	Y+3, r24	; 0x03
    4eb2:	8f ef       	ldi	r24, 0xFF	; 255
    4eb4:	9f ef       	ldi	r25, 0xFF	; 255
    4eb6:	9a 83       	std	Y+2, r25	; 0x02
    4eb8:	89 83       	std	Y+1, r24	; 0x01
    4eba:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4ebe:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4ec2:	98 17       	cp	r25, r24
    4ec4:	88 f4       	brcc	.+34     	; 0x4ee8 <_ZN7TwoWire4readEv+0x46>
    4ec6:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4eca:	88 2f       	mov	r24, r24
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	88 5b       	subi	r24, 0xB8	; 184
    4ed0:	9b 4f       	sbci	r25, 0xFB	; 251
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	80 81       	ld	r24, Z
    4ed6:	88 2f       	mov	r24, r24
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	9a 83       	std	Y+2, r25	; 0x02
    4edc:	89 83       	std	Y+1, r24	; 0x01
    4ede:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4ee2:	8f 5f       	subi	r24, 0xFF	; 255
    4ee4:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4ee8:	89 81       	ldd	r24, Y+1	; 0x01
    4eea:	9a 81       	ldd	r25, Y+2	; 0x02
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	df 91       	pop	r29
    4ef6:	cf 91       	pop	r28
    4ef8:	08 95       	ret

00004efa <_ZN7TwoWire4peekEv>:
    4efa:	cf 93       	push	r28
    4efc:	df 93       	push	r29
    4efe:	00 d0       	rcall	.+0      	; 0x4f00 <_ZN7TwoWire4peekEv+0x6>
    4f00:	1f 92       	push	r1
    4f02:	cd b7       	in	r28, 0x3d	; 61
    4f04:	de b7       	in	r29, 0x3e	; 62
    4f06:	9c 83       	std	Y+4, r25	; 0x04
    4f08:	8b 83       	std	Y+3, r24	; 0x03
    4f0a:	8f ef       	ldi	r24, 0xFF	; 255
    4f0c:	9f ef       	ldi	r25, 0xFF	; 255
    4f0e:	9a 83       	std	Y+2, r25	; 0x02
    4f10:	89 83       	std	Y+1, r24	; 0x01
    4f12:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4f16:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4f1a:	98 17       	cp	r25, r24
    4f1c:	60 f4       	brcc	.+24     	; 0x4f36 <_ZN7TwoWire4peekEv+0x3c>
    4f1e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4f22:	88 2f       	mov	r24, r24
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	88 5b       	subi	r24, 0xB8	; 184
    4f28:	9b 4f       	sbci	r25, 0xFB	; 251
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	80 81       	ld	r24, Z
    4f2e:	88 2f       	mov	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	9a 83       	std	Y+2, r25	; 0x02
    4f34:	89 83       	std	Y+1, r24	; 0x01
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	08 95       	ret

00004f48 <_ZN7TwoWire5flushEv>:
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	1f 92       	push	r1
    4f4e:	1f 92       	push	r1
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	9a 83       	std	Y+2, r25	; 0x02
    4f56:	89 83       	std	Y+1, r24	; 0x01
    4f58:	00 00       	nop
    4f5a:	0f 90       	pop	r0
    4f5c:	0f 90       	pop	r0
    4f5e:	df 91       	pop	r29
    4f60:	cf 91       	pop	r28
    4f62:	08 95       	ret

00004f64 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	00 d0       	rcall	.+0      	; 0x4f6a <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    4f6a:	1f 92       	push	r1
    4f6c:	1f 92       	push	r1
    4f6e:	cd b7       	in	r28, 0x3d	; 61
    4f70:	de b7       	in	r29, 0x3e	; 62
    4f72:	9b 83       	std	Y+3, r25	; 0x03
    4f74:	8a 83       	std	Y+2, r24	; 0x02
    4f76:	7d 83       	std	Y+5, r23	; 0x05
    4f78:	6c 83       	std	Y+4, r22	; 0x04
    4f7a:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN7TwoWire14user_onReceiveE>
    4f7e:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <_ZN7TwoWire14user_onReceiveE+0x1>
    4f82:	89 2b       	or	r24, r25
    4f84:	89 f1       	breq	.+98     	; 0x4fe8 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    4f86:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4f8a:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4f8e:	98 17       	cp	r25, r24
    4f90:	68 f1       	brcs	.+90     	; 0x4fec <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    4f92:	19 82       	std	Y+1, r1	; 0x01
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	28 2f       	mov	r18, r24
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    4f9e:	28 17       	cp	r18, r24
    4fa0:	39 07       	cpc	r19, r25
    4fa2:	a4 f4       	brge	.+40     	; 0x4fcc <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	88 2f       	mov	r24, r24
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	29 81       	ldd	r18, Y+1	; 0x01
    4fac:	22 2f       	mov	r18, r18
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	4a 81       	ldd	r20, Y+2	; 0x02
    4fb2:	5b 81       	ldd	r21, Y+3	; 0x03
    4fb4:	24 0f       	add	r18, r20
    4fb6:	35 1f       	adc	r19, r21
    4fb8:	f9 01       	movw	r30, r18
    4fba:	20 81       	ld	r18, Z
    4fbc:	88 5b       	subi	r24, 0xB8	; 184
    4fbe:	9b 4f       	sbci	r25, 0xFB	; 251
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	20 83       	st	Z, r18
    4fc4:	89 81       	ldd	r24, Y+1	; 0x01
    4fc6:	8f 5f       	subi	r24, 0xFF	; 255
    4fc8:	89 83       	std	Y+1, r24	; 0x01
    4fca:	e4 cf       	rjmp	.-56     	; 0x4f94 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    4fcc:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN7TwoWire13rxBufferIndexE>
    4fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    4fd2:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_ZN7TwoWire14rxBufferLengthE>
    4fd6:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <_ZN7TwoWire14user_onReceiveE>
    4fda:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <_ZN7TwoWire14user_onReceiveE+0x1>
    4fde:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    4fe2:	f9 01       	movw	r30, r18
    4fe4:	19 95       	eicall
    4fe6:	03 c0       	rjmp	.+6      	; 0x4fee <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4fe8:	00 00       	nop
    4fea:	01 c0       	rjmp	.+2      	; 0x4fee <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    4fec:	00 00       	nop
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	0f 90       	pop	r0
    4ff4:	0f 90       	pop	r0
    4ff6:	0f 90       	pop	r0
    4ff8:	df 91       	pop	r29
    4ffa:	cf 91       	pop	r28
    4ffc:	08 95       	ret

00004ffe <_ZN7TwoWire16onRequestServiceEv>:
    4ffe:	cf 93       	push	r28
    5000:	df 93       	push	r29
    5002:	cd b7       	in	r28, 0x3d	; 61
    5004:	de b7       	in	r29, 0x3e	; 62
    5006:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZN7TwoWire14user_onRequestE>
    500a:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZN7TwoWire14user_onRequestE+0x1>
    500e:	89 2b       	or	r24, r25
    5010:	59 f0       	breq	.+22     	; 0x5028 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    5012:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZN7TwoWire13txBufferIndexE>
    5016:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZN7TwoWire14txBufferLengthE>
    501a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <_ZN7TwoWire14user_onRequestE>
    501e:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <_ZN7TwoWire14user_onRequestE+0x1>
    5022:	fc 01       	movw	r30, r24
    5024:	19 95       	eicall
    5026:	01 c0       	rjmp	.+2      	; 0x502a <_ZN7TwoWire16onRequestServiceEv+0x2c>
    5028:	00 00       	nop
    502a:	df 91       	pop	r29
    502c:	cf 91       	pop	r28
    502e:	08 95       	ret

00005030 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5030:	cf 93       	push	r28
    5032:	df 93       	push	r29
    5034:	00 d0       	rcall	.+0      	; 0x5036 <_Z41__static_initialization_and_destruction_0ii+0x6>
    5036:	1f 92       	push	r1
    5038:	cd b7       	in	r28, 0x3d	; 61
    503a:	de b7       	in	r29, 0x3e	; 62
    503c:	9a 83       	std	Y+2, r25	; 0x02
    503e:	89 83       	std	Y+1, r24	; 0x01
    5040:	7c 83       	std	Y+4, r23	; 0x04
    5042:	6b 83       	std	Y+3, r22	; 0x03
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	9a 81       	ldd	r25, Y+2	; 0x02
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	39 f4       	brne	.+14     	; 0x505a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    504c:	8b 81       	ldd	r24, Y+3	; 0x03
    504e:	9c 81       	ldd	r25, Y+4	; 0x04
    5050:	01 96       	adiw	r24, 0x01	; 1
    5052:	19 f4       	brne	.+6      	; 0x505a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    5054:	82 e9       	ldi	r24, 0x92	; 146
    5056:	94 e0       	ldi	r25, 0x04	; 4
    5058:	3b dd       	rcall	.-1418   	; 0x4ad0 <_ZN7TwoWireC1Ev>
    505a:	00 00       	nop
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	0f 90       	pop	r0
    5062:	0f 90       	pop	r0
    5064:	df 91       	pop	r29
    5066:	cf 91       	pop	r28
    5068:	08 95       	ret

0000506a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    506a:	cf 93       	push	r28
    506c:	df 93       	push	r29
    506e:	cd b7       	in	r28, 0x3d	; 61
    5070:	de b7       	in	r29, 0x3e	; 62
    5072:	6f ef       	ldi	r22, 0xFF	; 255
    5074:	7f ef       	ldi	r23, 0xFF	; 255
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	da df       	rcall	.-76     	; 0x5030 <_Z41__static_initialization_and_destruction_0ii>
    507c:	df 91       	pop	r29
    507e:	cf 91       	pop	r28
    5080:	08 95       	ret

00005082 <__subsf3>:
    5082:	50 58       	subi	r21, 0x80	; 128

00005084 <__addsf3>:
    5084:	bb 27       	eor	r27, r27
    5086:	aa 27       	eor	r26, r26
    5088:	0e d0       	rcall	.+28     	; 0x50a6 <__addsf3x>
    508a:	09 c1       	rjmp	.+530    	; 0x529e <__fp_round>
    508c:	fa d0       	rcall	.+500    	; 0x5282 <__fp_pscA>
    508e:	30 f0       	brcs	.+12     	; 0x509c <__addsf3+0x18>
    5090:	ff d0       	rcall	.+510    	; 0x5290 <__fp_pscB>
    5092:	20 f0       	brcs	.+8      	; 0x509c <__addsf3+0x18>
    5094:	31 f4       	brne	.+12     	; 0x50a2 <__addsf3+0x1e>
    5096:	9f 3f       	cpi	r25, 0xFF	; 255
    5098:	11 f4       	brne	.+4      	; 0x509e <__addsf3+0x1a>
    509a:	1e f4       	brtc	.+6      	; 0x50a2 <__addsf3+0x1e>
    509c:	ef c0       	rjmp	.+478    	; 0x527c <__fp_nan>
    509e:	0e f4       	brtc	.+2      	; 0x50a2 <__addsf3+0x1e>
    50a0:	e0 95       	com	r30
    50a2:	e7 fb       	bst	r30, 7
    50a4:	e5 c0       	rjmp	.+458    	; 0x5270 <__fp_inf>

000050a6 <__addsf3x>:
    50a6:	e9 2f       	mov	r30, r25
    50a8:	0b d1       	rcall	.+534    	; 0x52c0 <__fp_split3>
    50aa:	80 f3       	brcs	.-32     	; 0x508c <__addsf3+0x8>
    50ac:	ba 17       	cp	r27, r26
    50ae:	62 07       	cpc	r22, r18
    50b0:	73 07       	cpc	r23, r19
    50b2:	84 07       	cpc	r24, r20
    50b4:	95 07       	cpc	r25, r21
    50b6:	18 f0       	brcs	.+6      	; 0x50be <__addsf3x+0x18>
    50b8:	71 f4       	brne	.+28     	; 0x50d6 <__addsf3x+0x30>
    50ba:	9e f5       	brtc	.+102    	; 0x5122 <__addsf3x+0x7c>
    50bc:	23 c1       	rjmp	.+582    	; 0x5304 <__fp_zero>
    50be:	0e f4       	brtc	.+2      	; 0x50c2 <__addsf3x+0x1c>
    50c0:	e0 95       	com	r30
    50c2:	0b 2e       	mov	r0, r27
    50c4:	ba 2f       	mov	r27, r26
    50c6:	a0 2d       	mov	r26, r0
    50c8:	0b 01       	movw	r0, r22
    50ca:	b9 01       	movw	r22, r18
    50cc:	90 01       	movw	r18, r0
    50ce:	0c 01       	movw	r0, r24
    50d0:	ca 01       	movw	r24, r20
    50d2:	a0 01       	movw	r20, r0
    50d4:	11 24       	eor	r1, r1
    50d6:	ff 27       	eor	r31, r31
    50d8:	59 1b       	sub	r21, r25
    50da:	99 f0       	breq	.+38     	; 0x5102 <__addsf3x+0x5c>
    50dc:	59 3f       	cpi	r21, 0xF9	; 249
    50de:	50 f4       	brcc	.+20     	; 0x50f4 <__addsf3x+0x4e>
    50e0:	50 3e       	cpi	r21, 0xE0	; 224
    50e2:	68 f1       	brcs	.+90     	; 0x513e <__addsf3x+0x98>
    50e4:	1a 16       	cp	r1, r26
    50e6:	f0 40       	sbci	r31, 0x00	; 0
    50e8:	a2 2f       	mov	r26, r18
    50ea:	23 2f       	mov	r18, r19
    50ec:	34 2f       	mov	r19, r20
    50ee:	44 27       	eor	r20, r20
    50f0:	58 5f       	subi	r21, 0xF8	; 248
    50f2:	f3 cf       	rjmp	.-26     	; 0x50da <__addsf3x+0x34>
    50f4:	46 95       	lsr	r20
    50f6:	37 95       	ror	r19
    50f8:	27 95       	ror	r18
    50fa:	a7 95       	ror	r26
    50fc:	f0 40       	sbci	r31, 0x00	; 0
    50fe:	53 95       	inc	r21
    5100:	c9 f7       	brne	.-14     	; 0x50f4 <__addsf3x+0x4e>
    5102:	7e f4       	brtc	.+30     	; 0x5122 <__addsf3x+0x7c>
    5104:	1f 16       	cp	r1, r31
    5106:	ba 0b       	sbc	r27, r26
    5108:	62 0b       	sbc	r22, r18
    510a:	73 0b       	sbc	r23, r19
    510c:	84 0b       	sbc	r24, r20
    510e:	ba f0       	brmi	.+46     	; 0x513e <__addsf3x+0x98>
    5110:	91 50       	subi	r25, 0x01	; 1
    5112:	a1 f0       	breq	.+40     	; 0x513c <__addsf3x+0x96>
    5114:	ff 0f       	add	r31, r31
    5116:	bb 1f       	adc	r27, r27
    5118:	66 1f       	adc	r22, r22
    511a:	77 1f       	adc	r23, r23
    511c:	88 1f       	adc	r24, r24
    511e:	c2 f7       	brpl	.-16     	; 0x5110 <__addsf3x+0x6a>
    5120:	0e c0       	rjmp	.+28     	; 0x513e <__addsf3x+0x98>
    5122:	ba 0f       	add	r27, r26
    5124:	62 1f       	adc	r22, r18
    5126:	73 1f       	adc	r23, r19
    5128:	84 1f       	adc	r24, r20
    512a:	48 f4       	brcc	.+18     	; 0x513e <__addsf3x+0x98>
    512c:	87 95       	ror	r24
    512e:	77 95       	ror	r23
    5130:	67 95       	ror	r22
    5132:	b7 95       	ror	r27
    5134:	f7 95       	ror	r31
    5136:	9e 3f       	cpi	r25, 0xFE	; 254
    5138:	08 f0       	brcs	.+2      	; 0x513c <__addsf3x+0x96>
    513a:	b3 cf       	rjmp	.-154    	; 0x50a2 <__addsf3+0x1e>
    513c:	93 95       	inc	r25
    513e:	88 0f       	add	r24, r24
    5140:	08 f0       	brcs	.+2      	; 0x5144 <__addsf3x+0x9e>
    5142:	99 27       	eor	r25, r25
    5144:	ee 0f       	add	r30, r30
    5146:	97 95       	ror	r25
    5148:	87 95       	ror	r24
    514a:	08 95       	ret

0000514c <__fixsfsi>:
    514c:	04 d0       	rcall	.+8      	; 0x5156 <__fixunssfsi>
    514e:	68 94       	set
    5150:	b1 11       	cpse	r27, r1
    5152:	d9 c0       	rjmp	.+434    	; 0x5306 <__fp_szero>
    5154:	08 95       	ret

00005156 <__fixunssfsi>:
    5156:	bc d0       	rcall	.+376    	; 0x52d0 <__fp_splitA>
    5158:	88 f0       	brcs	.+34     	; 0x517c <__fixunssfsi+0x26>
    515a:	9f 57       	subi	r25, 0x7F	; 127
    515c:	90 f0       	brcs	.+36     	; 0x5182 <__fixunssfsi+0x2c>
    515e:	b9 2f       	mov	r27, r25
    5160:	99 27       	eor	r25, r25
    5162:	b7 51       	subi	r27, 0x17	; 23
    5164:	a0 f0       	brcs	.+40     	; 0x518e <__fixunssfsi+0x38>
    5166:	d1 f0       	breq	.+52     	; 0x519c <__fixunssfsi+0x46>
    5168:	66 0f       	add	r22, r22
    516a:	77 1f       	adc	r23, r23
    516c:	88 1f       	adc	r24, r24
    516e:	99 1f       	adc	r25, r25
    5170:	1a f0       	brmi	.+6      	; 0x5178 <__fixunssfsi+0x22>
    5172:	ba 95       	dec	r27
    5174:	c9 f7       	brne	.-14     	; 0x5168 <__fixunssfsi+0x12>
    5176:	12 c0       	rjmp	.+36     	; 0x519c <__fixunssfsi+0x46>
    5178:	b1 30       	cpi	r27, 0x01	; 1
    517a:	81 f0       	breq	.+32     	; 0x519c <__fixunssfsi+0x46>
    517c:	c3 d0       	rcall	.+390    	; 0x5304 <__fp_zero>
    517e:	b1 e0       	ldi	r27, 0x01	; 1
    5180:	08 95       	ret
    5182:	c0 c0       	rjmp	.+384    	; 0x5304 <__fp_zero>
    5184:	67 2f       	mov	r22, r23
    5186:	78 2f       	mov	r23, r24
    5188:	88 27       	eor	r24, r24
    518a:	b8 5f       	subi	r27, 0xF8	; 248
    518c:	39 f0       	breq	.+14     	; 0x519c <__fixunssfsi+0x46>
    518e:	b9 3f       	cpi	r27, 0xF9	; 249
    5190:	cc f3       	brlt	.-14     	; 0x5184 <__fixunssfsi+0x2e>
    5192:	86 95       	lsr	r24
    5194:	77 95       	ror	r23
    5196:	67 95       	ror	r22
    5198:	b3 95       	inc	r27
    519a:	d9 f7       	brne	.-10     	; 0x5192 <__fixunssfsi+0x3c>
    519c:	3e f4       	brtc	.+14     	; 0x51ac <__fixunssfsi+0x56>
    519e:	90 95       	com	r25
    51a0:	80 95       	com	r24
    51a2:	70 95       	com	r23
    51a4:	61 95       	neg	r22
    51a6:	7f 4f       	sbci	r23, 0xFF	; 255
    51a8:	8f 4f       	sbci	r24, 0xFF	; 255
    51aa:	9f 4f       	sbci	r25, 0xFF	; 255
    51ac:	08 95       	ret

000051ae <__floatunsisf>:
    51ae:	e8 94       	clt
    51b0:	09 c0       	rjmp	.+18     	; 0x51c4 <__floatsisf+0x12>

000051b2 <__floatsisf>:
    51b2:	97 fb       	bst	r25, 7
    51b4:	3e f4       	brtc	.+14     	; 0x51c4 <__floatsisf+0x12>
    51b6:	90 95       	com	r25
    51b8:	80 95       	com	r24
    51ba:	70 95       	com	r23
    51bc:	61 95       	neg	r22
    51be:	7f 4f       	sbci	r23, 0xFF	; 255
    51c0:	8f 4f       	sbci	r24, 0xFF	; 255
    51c2:	9f 4f       	sbci	r25, 0xFF	; 255
    51c4:	99 23       	and	r25, r25
    51c6:	a9 f0       	breq	.+42     	; 0x51f2 <__floatsisf+0x40>
    51c8:	f9 2f       	mov	r31, r25
    51ca:	96 e9       	ldi	r25, 0x96	; 150
    51cc:	bb 27       	eor	r27, r27
    51ce:	93 95       	inc	r25
    51d0:	f6 95       	lsr	r31
    51d2:	87 95       	ror	r24
    51d4:	77 95       	ror	r23
    51d6:	67 95       	ror	r22
    51d8:	b7 95       	ror	r27
    51da:	f1 11       	cpse	r31, r1
    51dc:	f8 cf       	rjmp	.-16     	; 0x51ce <__floatsisf+0x1c>
    51de:	fa f4       	brpl	.+62     	; 0x521e <__floatsisf+0x6c>
    51e0:	bb 0f       	add	r27, r27
    51e2:	11 f4       	brne	.+4      	; 0x51e8 <__floatsisf+0x36>
    51e4:	60 ff       	sbrs	r22, 0
    51e6:	1b c0       	rjmp	.+54     	; 0x521e <__floatsisf+0x6c>
    51e8:	6f 5f       	subi	r22, 0xFF	; 255
    51ea:	7f 4f       	sbci	r23, 0xFF	; 255
    51ec:	8f 4f       	sbci	r24, 0xFF	; 255
    51ee:	9f 4f       	sbci	r25, 0xFF	; 255
    51f0:	16 c0       	rjmp	.+44     	; 0x521e <__floatsisf+0x6c>
    51f2:	88 23       	and	r24, r24
    51f4:	11 f0       	breq	.+4      	; 0x51fa <__floatsisf+0x48>
    51f6:	96 e9       	ldi	r25, 0x96	; 150
    51f8:	11 c0       	rjmp	.+34     	; 0x521c <__floatsisf+0x6a>
    51fa:	77 23       	and	r23, r23
    51fc:	21 f0       	breq	.+8      	; 0x5206 <__floatsisf+0x54>
    51fe:	9e e8       	ldi	r25, 0x8E	; 142
    5200:	87 2f       	mov	r24, r23
    5202:	76 2f       	mov	r23, r22
    5204:	05 c0       	rjmp	.+10     	; 0x5210 <__floatsisf+0x5e>
    5206:	66 23       	and	r22, r22
    5208:	71 f0       	breq	.+28     	; 0x5226 <__floatsisf+0x74>
    520a:	96 e8       	ldi	r25, 0x86	; 134
    520c:	86 2f       	mov	r24, r22
    520e:	70 e0       	ldi	r23, 0x00	; 0
    5210:	60 e0       	ldi	r22, 0x00	; 0
    5212:	2a f0       	brmi	.+10     	; 0x521e <__floatsisf+0x6c>
    5214:	9a 95       	dec	r25
    5216:	66 0f       	add	r22, r22
    5218:	77 1f       	adc	r23, r23
    521a:	88 1f       	adc	r24, r24
    521c:	da f7       	brpl	.-10     	; 0x5214 <__floatsisf+0x62>
    521e:	88 0f       	add	r24, r24
    5220:	96 95       	lsr	r25
    5222:	87 95       	ror	r24
    5224:	97 f9       	bld	r25, 7
    5226:	08 95       	ret

00005228 <__fp_cmp>:
    5228:	99 0f       	add	r25, r25
    522a:	00 08       	sbc	r0, r0
    522c:	55 0f       	add	r21, r21
    522e:	aa 0b       	sbc	r26, r26
    5230:	e0 e8       	ldi	r30, 0x80	; 128
    5232:	fe ef       	ldi	r31, 0xFE	; 254
    5234:	16 16       	cp	r1, r22
    5236:	17 06       	cpc	r1, r23
    5238:	e8 07       	cpc	r30, r24
    523a:	f9 07       	cpc	r31, r25
    523c:	c0 f0       	brcs	.+48     	; 0x526e <__fp_cmp+0x46>
    523e:	12 16       	cp	r1, r18
    5240:	13 06       	cpc	r1, r19
    5242:	e4 07       	cpc	r30, r20
    5244:	f5 07       	cpc	r31, r21
    5246:	98 f0       	brcs	.+38     	; 0x526e <__fp_cmp+0x46>
    5248:	62 1b       	sub	r22, r18
    524a:	73 0b       	sbc	r23, r19
    524c:	84 0b       	sbc	r24, r20
    524e:	95 0b       	sbc	r25, r21
    5250:	39 f4       	brne	.+14     	; 0x5260 <__fp_cmp+0x38>
    5252:	0a 26       	eor	r0, r26
    5254:	61 f0       	breq	.+24     	; 0x526e <__fp_cmp+0x46>
    5256:	23 2b       	or	r18, r19
    5258:	24 2b       	or	r18, r20
    525a:	25 2b       	or	r18, r21
    525c:	21 f4       	brne	.+8      	; 0x5266 <__fp_cmp+0x3e>
    525e:	08 95       	ret
    5260:	0a 26       	eor	r0, r26
    5262:	09 f4       	brne	.+2      	; 0x5266 <__fp_cmp+0x3e>
    5264:	a1 40       	sbci	r26, 0x01	; 1
    5266:	a6 95       	lsr	r26
    5268:	8f ef       	ldi	r24, 0xFF	; 255
    526a:	81 1d       	adc	r24, r1
    526c:	81 1d       	adc	r24, r1
    526e:	08 95       	ret

00005270 <__fp_inf>:
    5270:	97 f9       	bld	r25, 7
    5272:	9f 67       	ori	r25, 0x7F	; 127
    5274:	80 e8       	ldi	r24, 0x80	; 128
    5276:	70 e0       	ldi	r23, 0x00	; 0
    5278:	60 e0       	ldi	r22, 0x00	; 0
    527a:	08 95       	ret

0000527c <__fp_nan>:
    527c:	9f ef       	ldi	r25, 0xFF	; 255
    527e:	80 ec       	ldi	r24, 0xC0	; 192
    5280:	08 95       	ret

00005282 <__fp_pscA>:
    5282:	00 24       	eor	r0, r0
    5284:	0a 94       	dec	r0
    5286:	16 16       	cp	r1, r22
    5288:	17 06       	cpc	r1, r23
    528a:	18 06       	cpc	r1, r24
    528c:	09 06       	cpc	r0, r25
    528e:	08 95       	ret

00005290 <__fp_pscB>:
    5290:	00 24       	eor	r0, r0
    5292:	0a 94       	dec	r0
    5294:	12 16       	cp	r1, r18
    5296:	13 06       	cpc	r1, r19
    5298:	14 06       	cpc	r1, r20
    529a:	05 06       	cpc	r0, r21
    529c:	08 95       	ret

0000529e <__fp_round>:
    529e:	09 2e       	mov	r0, r25
    52a0:	03 94       	inc	r0
    52a2:	00 0c       	add	r0, r0
    52a4:	11 f4       	brne	.+4      	; 0x52aa <__fp_round+0xc>
    52a6:	88 23       	and	r24, r24
    52a8:	52 f0       	brmi	.+20     	; 0x52be <__fp_round+0x20>
    52aa:	bb 0f       	add	r27, r27
    52ac:	40 f4       	brcc	.+16     	; 0x52be <__fp_round+0x20>
    52ae:	bf 2b       	or	r27, r31
    52b0:	11 f4       	brne	.+4      	; 0x52b6 <__fp_round+0x18>
    52b2:	60 ff       	sbrs	r22, 0
    52b4:	04 c0       	rjmp	.+8      	; 0x52be <__fp_round+0x20>
    52b6:	6f 5f       	subi	r22, 0xFF	; 255
    52b8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ba:	8f 4f       	sbci	r24, 0xFF	; 255
    52bc:	9f 4f       	sbci	r25, 0xFF	; 255
    52be:	08 95       	ret

000052c0 <__fp_split3>:
    52c0:	57 fd       	sbrc	r21, 7
    52c2:	90 58       	subi	r25, 0x80	; 128
    52c4:	44 0f       	add	r20, r20
    52c6:	55 1f       	adc	r21, r21
    52c8:	59 f0       	breq	.+22     	; 0x52e0 <__fp_splitA+0x10>
    52ca:	5f 3f       	cpi	r21, 0xFF	; 255
    52cc:	71 f0       	breq	.+28     	; 0x52ea <__fp_splitA+0x1a>
    52ce:	47 95       	ror	r20

000052d0 <__fp_splitA>:
    52d0:	88 0f       	add	r24, r24
    52d2:	97 fb       	bst	r25, 7
    52d4:	99 1f       	adc	r25, r25
    52d6:	61 f0       	breq	.+24     	; 0x52f0 <__fp_splitA+0x20>
    52d8:	9f 3f       	cpi	r25, 0xFF	; 255
    52da:	79 f0       	breq	.+30     	; 0x52fa <__fp_splitA+0x2a>
    52dc:	87 95       	ror	r24
    52de:	08 95       	ret
    52e0:	12 16       	cp	r1, r18
    52e2:	13 06       	cpc	r1, r19
    52e4:	14 06       	cpc	r1, r20
    52e6:	55 1f       	adc	r21, r21
    52e8:	f2 cf       	rjmp	.-28     	; 0x52ce <__fp_split3+0xe>
    52ea:	46 95       	lsr	r20
    52ec:	f1 df       	rcall	.-30     	; 0x52d0 <__fp_splitA>
    52ee:	08 c0       	rjmp	.+16     	; 0x5300 <__fp_splitA+0x30>
    52f0:	16 16       	cp	r1, r22
    52f2:	17 06       	cpc	r1, r23
    52f4:	18 06       	cpc	r1, r24
    52f6:	99 1f       	adc	r25, r25
    52f8:	f1 cf       	rjmp	.-30     	; 0x52dc <__fp_splitA+0xc>
    52fa:	86 95       	lsr	r24
    52fc:	71 05       	cpc	r23, r1
    52fe:	61 05       	cpc	r22, r1
    5300:	08 94       	sec
    5302:	08 95       	ret

00005304 <__fp_zero>:
    5304:	e8 94       	clt

00005306 <__fp_szero>:
    5306:	bb 27       	eor	r27, r27
    5308:	66 27       	eor	r22, r22
    530a:	77 27       	eor	r23, r23
    530c:	cb 01       	movw	r24, r22
    530e:	97 f9       	bld	r25, 7
    5310:	08 95       	ret

00005312 <__mulsf3>:
    5312:	0b d0       	rcall	.+22     	; 0x532a <__mulsf3x>
    5314:	c4 cf       	rjmp	.-120    	; 0x529e <__fp_round>
    5316:	b5 df       	rcall	.-150    	; 0x5282 <__fp_pscA>
    5318:	28 f0       	brcs	.+10     	; 0x5324 <__mulsf3+0x12>
    531a:	ba df       	rcall	.-140    	; 0x5290 <__fp_pscB>
    531c:	18 f0       	brcs	.+6      	; 0x5324 <__mulsf3+0x12>
    531e:	95 23       	and	r25, r21
    5320:	09 f0       	breq	.+2      	; 0x5324 <__mulsf3+0x12>
    5322:	a6 cf       	rjmp	.-180    	; 0x5270 <__fp_inf>
    5324:	ab cf       	rjmp	.-170    	; 0x527c <__fp_nan>
    5326:	11 24       	eor	r1, r1
    5328:	ee cf       	rjmp	.-36     	; 0x5306 <__fp_szero>

0000532a <__mulsf3x>:
    532a:	ca df       	rcall	.-108    	; 0x52c0 <__fp_split3>
    532c:	a0 f3       	brcs	.-24     	; 0x5316 <__mulsf3+0x4>

0000532e <__mulsf3_pse>:
    532e:	95 9f       	mul	r25, r21
    5330:	d1 f3       	breq	.-12     	; 0x5326 <__mulsf3+0x14>
    5332:	95 0f       	add	r25, r21
    5334:	50 e0       	ldi	r21, 0x00	; 0
    5336:	55 1f       	adc	r21, r21
    5338:	62 9f       	mul	r22, r18
    533a:	f0 01       	movw	r30, r0
    533c:	72 9f       	mul	r23, r18
    533e:	bb 27       	eor	r27, r27
    5340:	f0 0d       	add	r31, r0
    5342:	b1 1d       	adc	r27, r1
    5344:	63 9f       	mul	r22, r19
    5346:	aa 27       	eor	r26, r26
    5348:	f0 0d       	add	r31, r0
    534a:	b1 1d       	adc	r27, r1
    534c:	aa 1f       	adc	r26, r26
    534e:	64 9f       	mul	r22, r20
    5350:	66 27       	eor	r22, r22
    5352:	b0 0d       	add	r27, r0
    5354:	a1 1d       	adc	r26, r1
    5356:	66 1f       	adc	r22, r22
    5358:	82 9f       	mul	r24, r18
    535a:	22 27       	eor	r18, r18
    535c:	b0 0d       	add	r27, r0
    535e:	a1 1d       	adc	r26, r1
    5360:	62 1f       	adc	r22, r18
    5362:	73 9f       	mul	r23, r19
    5364:	b0 0d       	add	r27, r0
    5366:	a1 1d       	adc	r26, r1
    5368:	62 1f       	adc	r22, r18
    536a:	83 9f       	mul	r24, r19
    536c:	a0 0d       	add	r26, r0
    536e:	61 1d       	adc	r22, r1
    5370:	22 1f       	adc	r18, r18
    5372:	74 9f       	mul	r23, r20
    5374:	33 27       	eor	r19, r19
    5376:	a0 0d       	add	r26, r0
    5378:	61 1d       	adc	r22, r1
    537a:	23 1f       	adc	r18, r19
    537c:	84 9f       	mul	r24, r20
    537e:	60 0d       	add	r22, r0
    5380:	21 1d       	adc	r18, r1
    5382:	82 2f       	mov	r24, r18
    5384:	76 2f       	mov	r23, r22
    5386:	6a 2f       	mov	r22, r26
    5388:	11 24       	eor	r1, r1
    538a:	9f 57       	subi	r25, 0x7F	; 127
    538c:	50 40       	sbci	r21, 0x00	; 0
    538e:	8a f0       	brmi	.+34     	; 0x53b2 <__mulsf3_pse+0x84>
    5390:	e1 f0       	breq	.+56     	; 0x53ca <__mulsf3_pse+0x9c>
    5392:	88 23       	and	r24, r24
    5394:	4a f0       	brmi	.+18     	; 0x53a8 <__mulsf3_pse+0x7a>
    5396:	ee 0f       	add	r30, r30
    5398:	ff 1f       	adc	r31, r31
    539a:	bb 1f       	adc	r27, r27
    539c:	66 1f       	adc	r22, r22
    539e:	77 1f       	adc	r23, r23
    53a0:	88 1f       	adc	r24, r24
    53a2:	91 50       	subi	r25, 0x01	; 1
    53a4:	50 40       	sbci	r21, 0x00	; 0
    53a6:	a9 f7       	brne	.-22     	; 0x5392 <__mulsf3_pse+0x64>
    53a8:	9e 3f       	cpi	r25, 0xFE	; 254
    53aa:	51 05       	cpc	r21, r1
    53ac:	70 f0       	brcs	.+28     	; 0x53ca <__mulsf3_pse+0x9c>
    53ae:	60 cf       	rjmp	.-320    	; 0x5270 <__fp_inf>
    53b0:	aa cf       	rjmp	.-172    	; 0x5306 <__fp_szero>
    53b2:	5f 3f       	cpi	r21, 0xFF	; 255
    53b4:	ec f3       	brlt	.-6      	; 0x53b0 <__mulsf3_pse+0x82>
    53b6:	98 3e       	cpi	r25, 0xE8	; 232
    53b8:	dc f3       	brlt	.-10     	; 0x53b0 <__mulsf3_pse+0x82>
    53ba:	86 95       	lsr	r24
    53bc:	77 95       	ror	r23
    53be:	67 95       	ror	r22
    53c0:	b7 95       	ror	r27
    53c2:	f7 95       	ror	r31
    53c4:	e7 95       	ror	r30
    53c6:	9f 5f       	subi	r25, 0xFF	; 255
    53c8:	c1 f7       	brne	.-16     	; 0x53ba <__mulsf3_pse+0x8c>
    53ca:	fe 2b       	or	r31, r30
    53cc:	88 0f       	add	r24, r24
    53ce:	91 1d       	adc	r25, r1
    53d0:	96 95       	lsr	r25
    53d2:	87 95       	ror	r24
    53d4:	97 f9       	bld	r25, 7
    53d6:	08 95       	ret

000053d8 <__unordsf2>:
    53d8:	27 df       	rcall	.-434    	; 0x5228 <__fp_cmp>
    53da:	88 0b       	sbc	r24, r24
    53dc:	99 0b       	sbc	r25, r25
    53de:	08 95       	ret

000053e0 <__cxa_pure_virtual>:
    53e0:	0e 94 4d 33 	call	0x669a	; 0x669a <abort>

000053e4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    53e4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    53e6:	91 8d       	ldd	r25, Z+25	; 0x19
    53e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    53ea:	89 2f       	mov	r24, r25
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	80 5c       	subi	r24, 0xC0	; 192
    53f0:	9f 4f       	sbci	r25, 0xFF	; 255
    53f2:	82 1b       	sub	r24, r18
    53f4:	91 09       	sbc	r25, r1
}
    53f6:	8f 73       	andi	r24, 0x3F	; 63
    53f8:	99 27       	eor	r25, r25
    53fa:	08 95       	ret

000053fc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    53fc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    53fe:	91 8d       	ldd	r25, Z+25	; 0x19
    5400:	82 8d       	ldd	r24, Z+26	; 0x1a
    5402:	98 17       	cp	r25, r24
    5404:	31 f0       	breq	.+12     	; 0x5412 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5406:	82 8d       	ldd	r24, Z+26	; 0x1a
    5408:	e8 0f       	add	r30, r24
    540a:	f1 1d       	adc	r31, r1
    540c:	85 8d       	ldd	r24, Z+29	; 0x1d
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5412:	8f ef       	ldi	r24, 0xFF	; 255
    5414:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5416:	08 95       	ret

00005418 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5418:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    541a:	91 8d       	ldd	r25, Z+25	; 0x19
    541c:	82 8d       	ldd	r24, Z+26	; 0x1a
    541e:	98 17       	cp	r25, r24
    5420:	61 f0       	breq	.+24     	; 0x543a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5422:	82 8d       	ldd	r24, Z+26	; 0x1a
    5424:	df 01       	movw	r26, r30
    5426:	a8 0f       	add	r26, r24
    5428:	b1 1d       	adc	r27, r1
    542a:	5d 96       	adiw	r26, 0x1d	; 29
    542c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    542e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5430:	9f 5f       	subi	r25, 0xFF	; 255
    5432:	9f 73       	andi	r25, 0x3F	; 63
    5434:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    543a:	8f ef       	ldi	r24, 0xFF	; 255
    543c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    543e:	08 95       	ret

00005440 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    5440:	fc 01       	movw	r30, r24
    5442:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5444:	44 8d       	ldd	r20, Z+28	; 0x1c
    5446:	25 2f       	mov	r18, r21
    5448:	30 e0       	ldi	r19, 0x00	; 0
    544a:	84 2f       	mov	r24, r20
    544c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    544e:	82 1b       	sub	r24, r18
    5450:	93 0b       	sbc	r25, r19
    5452:	54 17       	cp	r21, r20
    5454:	10 f0       	brcs	.+4      	; 0x545a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5456:	cf 96       	adiw	r24, 0x3f	; 63
    5458:	08 95       	ret
  return tail - head - 1;
    545a:	01 97       	sbiw	r24, 0x01	; 1
}
    545c:	08 95       	ret

0000545e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    545e:	8c eb       	ldi	r24, 0xBC	; 188
    5460:	9b e2       	ldi	r25, 0x2B	; 43
    5462:	89 2b       	or	r24, r25
    5464:	39 f0       	breq	.+14     	; 0x5474 <_Z14serialEventRunv+0x16>
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	89 2b       	or	r24, r25
    546c:	19 f0       	breq	.+6      	; 0x5474 <_Z14serialEventRunv+0x16>
    546e:	84 d1       	rcall	.+776    	; 0x5778 <_Z17Serial0_availablev>
    5470:	81 11       	cpse	r24, r1
    5472:	25 c0       	rjmp	.+74     	; 0x54be <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	89 2b       	or	r24, r25
    547a:	41 f0       	breq	.+16     	; 0x548c <_Z14serialEventRunv+0x2e>
    547c:	80 e0       	ldi	r24, 0x00	; 0
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	89 2b       	or	r24, r25
    5482:	21 f0       	breq	.+8      	; 0x548c <_Z14serialEventRunv+0x2e>
    5484:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5488:	81 11       	cpse	r24, r1
    548a:	1c c0       	rjmp	.+56     	; 0x54c4 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	89 2b       	or	r24, r25
    5492:	41 f0       	breq	.+16     	; 0x54a4 <_Z14serialEventRunv+0x46>
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	89 2b       	or	r24, r25
    549a:	21 f0       	breq	.+8      	; 0x54a4 <_Z14serialEventRunv+0x46>
    549c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    54a0:	81 11       	cpse	r24, r1
    54a2:	13 c0       	rjmp	.+38     	; 0x54ca <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    54a4:	80 e0       	ldi	r24, 0x00	; 0
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	89 2b       	or	r24, r25
    54aa:	a1 f0       	breq	.+40     	; 0x54d4 <_Z14serialEventRunv+0x76>
    54ac:	80 e0       	ldi	r24, 0x00	; 0
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	89 2b       	or	r24, r25
    54b2:	81 f0       	breq	.+32     	; 0x54d4 <_Z14serialEventRunv+0x76>
    54b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    54b8:	81 11       	cpse	r24, r1
    54ba:	0a c0       	rjmp	.+20     	; 0x54d0 <_Z14serialEventRunv+0x72>
    54bc:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    54be:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    54c2:	d8 cf       	rjmp	.-80     	; 0x5474 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    54c4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    54c8:	e1 cf       	rjmp	.-62     	; 0x548c <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    54ca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    54ce:	ea cf       	rjmp	.-44     	; 0x54a4 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    54d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    54d4:	08 95       	ret

000054d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    54d6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    54d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    54da:	df 01       	movw	r26, r30
    54dc:	a8 0f       	add	r26, r24
    54de:	b1 1d       	adc	r27, r1
    54e0:	a3 5a       	subi	r26, 0xA3	; 163
    54e2:	bf 4f       	sbci	r27, 0xFF	; 255
    54e4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    54e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	01 96       	adiw	r24, 0x01	; 1
    54ec:	8f 73       	andi	r24, 0x3F	; 63
    54ee:	99 27       	eor	r25, r25
    54f0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    54f2:	a6 89       	ldd	r26, Z+22	; 0x16
    54f4:	b7 89       	ldd	r27, Z+23	; 0x17
    54f6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    54f8:	a0 89       	ldd	r26, Z+16	; 0x10
    54fa:	b1 89       	ldd	r27, Z+17	; 0x11
    54fc:	8c 91       	ld	r24, X
    54fe:	83 70       	andi	r24, 0x03	; 3
    5500:	80 64       	ori	r24, 0x40	; 64
    5502:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5504:	93 8d       	ldd	r25, Z+27	; 0x1b
    5506:	84 8d       	ldd	r24, Z+28	; 0x1c
    5508:	98 13       	cpse	r25, r24
    550a:	06 c0       	rjmp	.+12     	; 0x5518 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    550c:	02 88       	ldd	r0, Z+18	; 0x12
    550e:	f3 89       	ldd	r31, Z+19	; 0x13
    5510:	e0 2d       	mov	r30, r0
    5512:	80 81       	ld	r24, Z
    5514:	8f 7d       	andi	r24, 0xDF	; 223
    5516:	80 83       	st	Z, r24
    5518:	08 95       	ret

0000551a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    551a:	ef 92       	push	r14
    551c:	ff 92       	push	r15
    551e:	0f 93       	push	r16
    5520:	1f 93       	push	r17
    5522:	cf 93       	push	r28
    5524:	df 93       	push	r29
    5526:	ec 01       	movw	r28, r24
  _written = true;
    5528:	81 e0       	ldi	r24, 0x01	; 1
    552a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    552c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    552e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5530:	98 13       	cpse	r25, r24
    5532:	05 c0       	rjmp	.+10     	; 0x553e <_ZN14HardwareSerial5writeEh+0x24>
    5534:	e8 89       	ldd	r30, Y+16	; 0x10
    5536:	f9 89       	ldd	r31, Y+17	; 0x11
    5538:	80 81       	ld	r24, Z
    553a:	85 fd       	sbrc	r24, 5
    553c:	25 c0       	rjmp	.+74     	; 0x5588 <_ZN14HardwareSerial5writeEh+0x6e>
    553e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5540:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5542:	10 e0       	ldi	r17, 0x00	; 0
    5544:	0f 5f       	subi	r16, 0xFF	; 255
    5546:	1f 4f       	sbci	r17, 0xFF	; 255
    5548:	0f 73       	andi	r16, 0x3F	; 63
    554a:	11 27       	eor	r17, r17
    554c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    554e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5550:	e8 12       	cpse	r14, r24
    5552:	0b c0       	rjmp	.+22     	; 0x556a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5554:	0f b6       	in	r0, 0x3f	; 63
    5556:	07 fc       	sbrc	r0, 7
    5558:	fa cf       	rjmp	.-12     	; 0x554e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    555a:	e8 89       	ldd	r30, Y+16	; 0x10
    555c:	f9 89       	ldd	r31, Y+17	; 0x11
    555e:	80 81       	ld	r24, Z
    5560:	85 ff       	sbrs	r24, 5
    5562:	f5 cf       	rjmp	.-22     	; 0x554e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5564:	ce 01       	movw	r24, r28
    5566:	b7 df       	rcall	.-146    	; 0x54d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5568:	f2 cf       	rjmp	.-28     	; 0x554e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    556a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    556c:	fe 01       	movw	r30, r28
    556e:	e8 0f       	add	r30, r24
    5570:	f1 1d       	adc	r31, r1
    5572:	e3 5a       	subi	r30, 0xA3	; 163
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5578:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    557a:	f8 94       	cli
    _tx_buffer_head = i;
    557c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    557e:	ea 89       	ldd	r30, Y+18	; 0x12
    5580:	fb 89       	ldd	r31, Y+19	; 0x13
    5582:	80 81       	ld	r24, Z
    5584:	80 62       	ori	r24, 0x20	; 32
    5586:	0a c0       	rjmp	.+20     	; 0x559c <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5588:	9f b7       	in	r25, 0x3f	; 63
    558a:	f8 94       	cli
      *_udr = c;
    558c:	ee 89       	ldd	r30, Y+22	; 0x16
    558e:	ff 89       	ldd	r31, Y+23	; 0x17
    5590:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5592:	e8 89       	ldd	r30, Y+16	; 0x10
    5594:	f9 89       	ldd	r31, Y+17	; 0x11
    5596:	80 81       	ld	r24, Z
    5598:	83 70       	andi	r24, 0x03	; 3
    559a:	80 64       	ori	r24, 0x40	; 64
    559c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    559e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	ff 90       	pop	r15
    55ae:	ef 90       	pop	r14
    55b0:	08 95       	ret

000055b2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    55b2:	cf 93       	push	r28
    55b4:	df 93       	push	r29
    55b6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    55b8:	88 8d       	ldd	r24, Y+24	; 0x18
    55ba:	88 23       	and	r24, r24
    55bc:	c1 f0       	breq	.+48     	; 0x55ee <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    55be:	ea 89       	ldd	r30, Y+18	; 0x12
    55c0:	fb 89       	ldd	r31, Y+19	; 0x13
    55c2:	80 81       	ld	r24, Z
    55c4:	85 fd       	sbrc	r24, 5
    55c6:	05 c0       	rjmp	.+10     	; 0x55d2 <_ZN14HardwareSerial5flushEv+0x20>
    55c8:	a8 89       	ldd	r26, Y+16	; 0x10
    55ca:	b9 89       	ldd	r27, Y+17	; 0x11
    55cc:	8c 91       	ld	r24, X
    55ce:	86 fd       	sbrc	r24, 6
    55d0:	0e c0       	rjmp	.+28     	; 0x55ee <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    55d2:	0f b6       	in	r0, 0x3f	; 63
    55d4:	07 fc       	sbrc	r0, 7
    55d6:	f5 cf       	rjmp	.-22     	; 0x55c2 <_ZN14HardwareSerial5flushEv+0x10>
    55d8:	80 81       	ld	r24, Z
    55da:	85 ff       	sbrs	r24, 5
    55dc:	f2 cf       	rjmp	.-28     	; 0x55c2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    55de:	a8 89       	ldd	r26, Y+16	; 0x10
    55e0:	b9 89       	ldd	r27, Y+17	; 0x11
    55e2:	8c 91       	ld	r24, X
    55e4:	85 ff       	sbrs	r24, 5
    55e6:	ed cf       	rjmp	.-38     	; 0x55c2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    55e8:	ce 01       	movw	r24, r28
    55ea:	75 df       	rcall	.-278    	; 0x54d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    55ec:	e8 cf       	rjmp	.-48     	; 0x55be <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	08 95       	ret

000055f4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    55f4:	cf 92       	push	r12
    55f6:	df 92       	push	r13
    55f8:	ef 92       	push	r14
    55fa:	ff 92       	push	r15
    55fc:	1f 93       	push	r17
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	ec 01       	movw	r28, r24
    5604:	6a 01       	movw	r12, r20
    5606:	7b 01       	movw	r14, r22
    5608:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    560a:	e8 89       	ldd	r30, Y+16	; 0x10
    560c:	f9 89       	ldd	r31, Y+17	; 0x11
    560e:	82 e0       	ldi	r24, 0x02	; 2
    5610:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5612:	41 15       	cp	r20, r1
    5614:	51 4e       	sbci	r21, 0xE1	; 225
    5616:	61 05       	cpc	r22, r1
    5618:	71 05       	cpc	r23, r1
    561a:	a9 f0       	breq	.+42     	; 0x5646 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    561c:	60 e0       	ldi	r22, 0x00	; 0
    561e:	79 e0       	ldi	r23, 0x09	; 9
    5620:	8d e3       	ldi	r24, 0x3D	; 61
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	a7 01       	movw	r20, r14
    5626:	96 01       	movw	r18, r12
    5628:	d8 d5       	rcall	.+2992   	; 0x61da <__udivmodsi4>
    562a:	da 01       	movw	r26, r20
    562c:	c9 01       	movw	r24, r18
    562e:	01 97       	sbiw	r24, 0x01	; 1
    5630:	a1 09       	sbc	r26, r1
    5632:	b1 09       	sbc	r27, r1
    5634:	b6 95       	lsr	r27
    5636:	a7 95       	ror	r26
    5638:	97 95       	ror	r25
    563a:	87 95       	ror	r24
    563c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    563e:	21 15       	cp	r18, r1
    5640:	80 e1       	ldi	r24, 0x10	; 16
    5642:	38 07       	cpc	r19, r24
    5644:	a0 f0       	brcs	.+40     	; 0x566e <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5646:	e8 89       	ldd	r30, Y+16	; 0x10
    5648:	f9 89       	ldd	r31, Y+17	; 0x11
    564a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    564c:	60 e8       	ldi	r22, 0x80	; 128
    564e:	74 e8       	ldi	r23, 0x84	; 132
    5650:	8e e1       	ldi	r24, 0x1E	; 30
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	a7 01       	movw	r20, r14
    5656:	96 01       	movw	r18, r12
    5658:	c0 d5       	rcall	.+2944   	; 0x61da <__udivmodsi4>
    565a:	da 01       	movw	r26, r20
    565c:	c9 01       	movw	r24, r18
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	a1 09       	sbc	r26, r1
    5662:	b1 09       	sbc	r27, r1
    5664:	b6 95       	lsr	r27
    5666:	a7 95       	ror	r26
    5668:	97 95       	ror	r25
    566a:	87 95       	ror	r24
    566c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    566e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5670:	fd 85       	ldd	r31, Y+13	; 0x0d
    5672:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5674:	ee 85       	ldd	r30, Y+14	; 0x0e
    5676:	ff 85       	ldd	r31, Y+15	; 0x0f
    5678:	20 83       	st	Z, r18

  _written = false;
    567a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    567c:	ec 89       	ldd	r30, Y+20	; 0x14
    567e:	fd 89       	ldd	r31, Y+21	; 0x15
    5680:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5682:	ea 89       	ldd	r30, Y+18	; 0x12
    5684:	fb 89       	ldd	r31, Y+19	; 0x13
    5686:	80 81       	ld	r24, Z
    5688:	80 61       	ori	r24, 0x10	; 16
    568a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    568c:	ea 89       	ldd	r30, Y+18	; 0x12
    568e:	fb 89       	ldd	r31, Y+19	; 0x13
    5690:	80 81       	ld	r24, Z
    5692:	88 60       	ori	r24, 0x08	; 8
    5694:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5696:	ea 89       	ldd	r30, Y+18	; 0x12
    5698:	fb 89       	ldd	r31, Y+19	; 0x13
    569a:	80 81       	ld	r24, Z
    569c:	80 68       	ori	r24, 0x80	; 128
    569e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    56a0:	ea 89       	ldd	r30, Y+18	; 0x12
    56a2:	fb 89       	ldd	r31, Y+19	; 0x13
    56a4:	80 81       	ld	r24, Z
    56a6:	8f 7d       	andi	r24, 0xDF	; 223
    56a8:	80 83       	st	Z, r24
}
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	1f 91       	pop	r17
    56b0:	ff 90       	pop	r15
    56b2:	ef 90       	pop	r14
    56b4:	df 90       	pop	r13
    56b6:	cf 90       	pop	r12
    56b8:	08 95       	ret

000056ba <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    56ba:	1f 92       	push	r1
    56bc:	0f 92       	push	r0
    56be:	0f b6       	in	r0, 0x3f	; 63
    56c0:	0f 92       	push	r0
    56c2:	11 24       	eor	r1, r1
    56c4:	0b b6       	in	r0, 0x3b	; 59
    56c6:	0f 92       	push	r0
    56c8:	2f 93       	push	r18
    56ca:	8f 93       	push	r24
    56cc:	9f 93       	push	r25
    56ce:	ef 93       	push	r30
    56d0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    56d2:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <Serial+0x10>
    56d6:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <Serial+0x11>
    56da:	80 81       	ld	r24, Z
    56dc:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <Serial+0x16>
    56e0:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <Serial+0x17>
    56e4:	82 fd       	sbrc	r24, 2
    56e6:	12 c0       	rjmp	.+36     	; 0x570c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    56e8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    56ea:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <Serial+0x19>
    56ee:	8f 5f       	subi	r24, 0xFF	; 255
    56f0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    56f2:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Serial+0x1a>
    56f6:	82 17       	cp	r24, r18
    56f8:	51 f0       	breq	.+20     	; 0x570e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    56fa:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <Serial+0x19>
    56fe:	f0 e0       	ldi	r31, 0x00	; 0
    5700:	e2 56       	subi	r30, 0x62	; 98
    5702:	fb 4f       	sbci	r31, 0xFB	; 251
    5704:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5706:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <Serial+0x19>
    570a:	01 c0       	rjmp	.+2      	; 0x570e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    570c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    570e:	ff 91       	pop	r31
    5710:	ef 91       	pop	r30
    5712:	9f 91       	pop	r25
    5714:	8f 91       	pop	r24
    5716:	2f 91       	pop	r18
    5718:	0f 90       	pop	r0
    571a:	0b be       	out	0x3b, r0	; 59
    571c:	0f 90       	pop	r0
    571e:	0f be       	out	0x3f, r0	; 63
    5720:	0f 90       	pop	r0
    5722:	1f 90       	pop	r1
    5724:	18 95       	reti

00005726 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5726:	1f 92       	push	r1
    5728:	0f 92       	push	r0
    572a:	0f b6       	in	r0, 0x3f	; 63
    572c:	0f 92       	push	r0
    572e:	11 24       	eor	r1, r1
    5730:	0b b6       	in	r0, 0x3b	; 59
    5732:	0f 92       	push	r0
    5734:	2f 93       	push	r18
    5736:	3f 93       	push	r19
    5738:	4f 93       	push	r20
    573a:	5f 93       	push	r21
    573c:	6f 93       	push	r22
    573e:	7f 93       	push	r23
    5740:	8f 93       	push	r24
    5742:	9f 93       	push	r25
    5744:	af 93       	push	r26
    5746:	bf 93       	push	r27
    5748:	ef 93       	push	r30
    574a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    574c:	8e e9       	ldi	r24, 0x9E	; 158
    574e:	94 e0       	ldi	r25, 0x04	; 4
    5750:	c2 de       	rcall	.-636    	; 0x54d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5752:	ff 91       	pop	r31
    5754:	ef 91       	pop	r30
    5756:	bf 91       	pop	r27
    5758:	af 91       	pop	r26
    575a:	9f 91       	pop	r25
    575c:	8f 91       	pop	r24
    575e:	7f 91       	pop	r23
    5760:	6f 91       	pop	r22
    5762:	5f 91       	pop	r21
    5764:	4f 91       	pop	r20
    5766:	3f 91       	pop	r19
    5768:	2f 91       	pop	r18
    576a:	0f 90       	pop	r0
    576c:	0b be       	out	0x3b, r0	; 59
    576e:	0f 90       	pop	r0
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	0f 90       	pop	r0
    5774:	1f 90       	pop	r1
    5776:	18 95       	reti

00005778 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5778:	8e e9       	ldi	r24, 0x9E	; 158
    577a:	94 e0       	ldi	r25, 0x04	; 4
    577c:	33 de       	rcall	.-922    	; 0x53e4 <_ZN14HardwareSerial9availableEv>
    577e:	21 e0       	ldi	r18, 0x01	; 1
    5780:	89 2b       	or	r24, r25
    5782:	09 f4       	brne	.+2      	; 0x5786 <_Z17Serial0_availablev+0xe>
    5784:	20 e0       	ldi	r18, 0x00	; 0
}
    5786:	82 2f       	mov	r24, r18
    5788:	08 95       	ret

0000578a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    578a:	ee e9       	ldi	r30, 0x9E	; 158
    578c:	f4 e0       	ldi	r31, 0x04	; 4
    578e:	13 82       	std	Z+3, r1	; 0x03
    5790:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5792:	88 ee       	ldi	r24, 0xE8	; 232
    5794:	93 e0       	ldi	r25, 0x03	; 3
    5796:	a0 e0       	ldi	r26, 0x00	; 0
    5798:	b0 e0       	ldi	r27, 0x00	; 0
    579a:	84 83       	std	Z+4, r24	; 0x04
    579c:	95 83       	std	Z+5, r25	; 0x05
    579e:	a6 83       	std	Z+6, r26	; 0x06
    57a0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    57a2:	84 ec       	ldi	r24, 0xC4	; 196
    57a4:	92 e0       	ldi	r25, 0x02	; 2
    57a6:	91 83       	std	Z+1, r25	; 0x01
    57a8:	80 83       	st	Z, r24
    57aa:	85 ec       	ldi	r24, 0xC5	; 197
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	95 87       	std	Z+13, r25	; 0x0d
    57b0:	84 87       	std	Z+12, r24	; 0x0c
    57b2:	84 ec       	ldi	r24, 0xC4	; 196
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	97 87       	std	Z+15, r25	; 0x0f
    57b8:	86 87       	std	Z+14, r24	; 0x0e
    57ba:	80 ec       	ldi	r24, 0xC0	; 192
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	91 8b       	std	Z+17, r25	; 0x11
    57c0:	80 8b       	std	Z+16, r24	; 0x10
    57c2:	81 ec       	ldi	r24, 0xC1	; 193
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	93 8b       	std	Z+19, r25	; 0x13
    57c8:	82 8b       	std	Z+18, r24	; 0x12
    57ca:	82 ec       	ldi	r24, 0xC2	; 194
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	95 8b       	std	Z+21, r25	; 0x15
    57d0:	84 8b       	std	Z+20, r24	; 0x14
    57d2:	86 ec       	ldi	r24, 0xC6	; 198
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	97 8b       	std	Z+23, r25	; 0x17
    57d8:	86 8b       	std	Z+22, r24	; 0x16
    57da:	11 8e       	std	Z+25, r1	; 0x19
    57dc:	12 8e       	std	Z+26, r1	; 0x1a
    57de:	13 8e       	std	Z+27, r1	; 0x1b
    57e0:	14 8e       	std	Z+28, r1	; 0x1c
    57e2:	08 95       	ret

000057e4 <initVariant>:
    57e4:	08 95       	ret

000057e6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    57e6:	66 d1       	rcall	.+716    	; 0x5ab4 <init>

	initVariant();
    57e8:	fd df       	rcall	.-6      	; 0x57e4 <initVariant>
    57ea:	0e 94 4b 03 	call	0x696	; 0x696 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    57ee:	cf e2       	ldi	r28, 0x2F	; 47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    57f0:	da e2       	ldi	r29, 0x2A	; 42
    57f2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    57f6:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    57f8:	e1 f3       	breq	.-8      	; 0x57f2 <main+0xc>
    57fa:	31 de       	rcall	.-926    	; 0x545e <_Z14serialEventRunv>
    57fc:	fa cf       	rjmp	.-12     	; 0x57f2 <main+0xc>

000057fe <_ZdlPv>:
    57fe:	e4 c5       	rjmp	.+3016   	; 0x63c8 <free>

00005800 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    5800:	cf 92       	push	r12
    5802:	df 92       	push	r13
    5804:	ef 92       	push	r14
    5806:	ff 92       	push	r15
    5808:	0f 93       	push	r16
    580a:	1f 93       	push	r17
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	6c 01       	movw	r12, r24
    5812:	7a 01       	movw	r14, r20
    5814:	8b 01       	movw	r16, r22
    5816:	c0 e0       	ldi	r28, 0x00	; 0
    5818:	d0 e0       	ldi	r29, 0x00	; 0
    581a:	ce 15       	cp	r28, r14
    581c:	df 05       	cpc	r29, r15
    581e:	81 f0       	breq	.+32     	; 0x5840 <_ZN5Print5writeEPKhj+0x40>
    5820:	d8 01       	movw	r26, r16
    5822:	6d 91       	ld	r22, X+
    5824:	8d 01       	movw	r16, r26
    5826:	d6 01       	movw	r26, r12
    5828:	ed 91       	ld	r30, X+
    582a:	fc 91       	ld	r31, X
    582c:	01 90       	ld	r0, Z+
    582e:	f0 81       	ld	r31, Z
    5830:	e0 2d       	mov	r30, r0
    5832:	c6 01       	movw	r24, r12
    5834:	19 95       	eicall
    5836:	89 2b       	or	r24, r25
    5838:	11 f0       	breq	.+4      	; 0x583e <_ZN5Print5writeEPKhj+0x3e>
    583a:	21 96       	adiw	r28, 0x01	; 1
    583c:	ee cf       	rjmp	.-36     	; 0x581a <_ZN5Print5writeEPKhj+0x1a>
    583e:	7e 01       	movw	r14, r28
    5840:	c7 01       	movw	r24, r14
    5842:	df 91       	pop	r29
    5844:	cf 91       	pop	r28
    5846:	1f 91       	pop	r17
    5848:	0f 91       	pop	r16
    584a:	ff 90       	pop	r15
    584c:	ef 90       	pop	r14
    584e:	df 90       	pop	r13
    5850:	cf 90       	pop	r12
    5852:	08 95       	ret

00005854 <_ZN5Print5printEPKc>:
    5854:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_ZN5Print5writeEPKc>

00005858 <_ZN5Print7printlnEv>:
    5858:	62 ed       	ldi	r22, 0xD2	; 210
    585a:	72 e0       	ldi	r23, 0x02	; 2
    585c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_ZN5Print5writeEPKc>

00005860 <_ZN5Print7printlnEPKc>:
    5860:	0f 93       	push	r16
    5862:	1f 93       	push	r17
    5864:	cf 93       	push	r28
    5866:	df 93       	push	r29
    5868:	ec 01       	movw	r28, r24
    586a:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN5Print5writeEPKc>
    586e:	8c 01       	movw	r16, r24
    5870:	ce 01       	movw	r24, r28
    5872:	f2 df       	rcall	.-28     	; 0x5858 <_ZN5Print7printlnEv>
    5874:	80 0f       	add	r24, r16
    5876:	91 1f       	adc	r25, r17
    5878:	df 91       	pop	r29
    587a:	cf 91       	pop	r28
    587c:	1f 91       	pop	r17
    587e:	0f 91       	pop	r16
    5880:	08 95       	ret

00005882 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    5882:	8f 92       	push	r8
    5884:	9f 92       	push	r9
    5886:	af 92       	push	r10
    5888:	bf 92       	push	r11
    588a:	ef 92       	push	r14
    588c:	ff 92       	push	r15
    588e:	0f 93       	push	r16
    5890:	1f 93       	push	r17
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	a1 97       	sbiw	r28, 0x21	; 33
    589c:	0f b6       	in	r0, 0x3f	; 63
    589e:	f8 94       	cli
    58a0:	de bf       	out	0x3e, r29	; 62
    58a2:	0f be       	out	0x3f, r0	; 63
    58a4:	cd bf       	out	0x3d, r28	; 61
    58a6:	7c 01       	movw	r14, r24
    58a8:	fa 01       	movw	r30, r20
    58aa:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    58ac:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    58ae:	22 30       	cpi	r18, 0x02	; 2
    58b0:	08 f4       	brcc	.+2      	; 0x58b4 <_ZN5Print11printNumberEmh+0x32>
    58b2:	2a e0       	ldi	r18, 0x0A	; 10
    58b4:	8e 01       	movw	r16, r28
    58b6:	0f 5d       	subi	r16, 0xDF	; 223
    58b8:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    58ba:	82 2e       	mov	r8, r18
    58bc:	91 2c       	mov	r9, r1
    58be:	a1 2c       	mov	r10, r1
    58c0:	b1 2c       	mov	r11, r1
    58c2:	bf 01       	movw	r22, r30
    58c4:	a5 01       	movw	r20, r10
    58c6:	94 01       	movw	r18, r8
    58c8:	88 d4       	rcall	.+2320   	; 0x61da <__udivmodsi4>
    n /= base;
    58ca:	f9 01       	movw	r30, r18
    58cc:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    58ce:	01 50       	subi	r16, 0x01	; 1
    58d0:	11 09       	sbc	r17, r1
    58d2:	6a 30       	cpi	r22, 0x0A	; 10
    58d4:	10 f4       	brcc	.+4      	; 0x58da <_ZN5Print11printNumberEmh+0x58>
    58d6:	60 5d       	subi	r22, 0xD0	; 208
    58d8:	01 c0       	rjmp	.+2      	; 0x58dc <_ZN5Print11printNumberEmh+0x5a>
    58da:	69 5c       	subi	r22, 0xC9	; 201
    58dc:	d8 01       	movw	r26, r16
    58de:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    58e0:	23 2b       	or	r18, r19
    58e2:	24 2b       	or	r18, r20
    58e4:	25 2b       	or	r18, r21
    58e6:	69 f7       	brne	.-38     	; 0x58c2 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    58e8:	b8 01       	movw	r22, r16
    58ea:	c7 01       	movw	r24, r14
    58ec:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN5Print5writeEPKc>
}
    58f0:	a1 96       	adiw	r28, 0x21	; 33
    58f2:	0f b6       	in	r0, 0x3f	; 63
    58f4:	f8 94       	cli
    58f6:	de bf       	out	0x3e, r29	; 62
    58f8:	0f be       	out	0x3f, r0	; 63
    58fa:	cd bf       	out	0x3d, r28	; 61
    58fc:	df 91       	pop	r29
    58fe:	cf 91       	pop	r28
    5900:	1f 91       	pop	r17
    5902:	0f 91       	pop	r16
    5904:	ff 90       	pop	r15
    5906:	ef 90       	pop	r14
    5908:	bf 90       	pop	r11
    590a:	af 90       	pop	r10
    590c:	9f 90       	pop	r9
    590e:	8f 90       	pop	r8
    5910:	08 95       	ret

00005912 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    5912:	21 15       	cp	r18, r1
    5914:	31 05       	cpc	r19, r1
    5916:	41 f4       	brne	.+16     	; 0x5928 <_ZN5Print5printEmi+0x16>
    5918:	dc 01       	movw	r26, r24
    591a:	ed 91       	ld	r30, X+
    591c:	fc 91       	ld	r31, X
    591e:	01 90       	ld	r0, Z+
    5920:	f0 81       	ld	r31, Z
    5922:	e0 2d       	mov	r30, r0
    5924:	64 2f       	mov	r22, r20
    5926:	19 94       	eijmp
  else return printNumber(n, base);
    5928:	ac cf       	rjmp	.-168    	; 0x5882 <_ZN5Print11printNumberEmh>

0000592a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    592a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    592c:	46 2f       	mov	r20, r22
    592e:	50 e0       	ldi	r21, 0x00	; 0
    5930:	60 e0       	ldi	r22, 0x00	; 0
    5932:	70 e0       	ldi	r23, 0x00	; 0
    5934:	ee cf       	rjmp	.-36     	; 0x5912 <_ZN5Print5printEmi>

00005936 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5936:	1f 92       	push	r1
    5938:	0f 92       	push	r0
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	0f 92       	push	r0
    593e:	11 24       	eor	r1, r1
    5940:	2f 93       	push	r18
    5942:	3f 93       	push	r19
    5944:	8f 93       	push	r24
    5946:	9f 93       	push	r25
    5948:	af 93       	push	r26
    594a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    594c:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <timer0_millis>
    5950:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <timer0_millis+0x1>
    5954:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <timer0_millis+0x2>
    5958:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    595c:	30 91 3b 05 	lds	r19, 0x053B	; 0x80053b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5960:	23 e0       	ldi	r18, 0x03	; 3
    5962:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5964:	2d 37       	cpi	r18, 0x7D	; 125
    5966:	20 f4       	brcc	.+8      	; 0x5970 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5968:	01 96       	adiw	r24, 0x01	; 1
    596a:	a1 1d       	adc	r26, r1
    596c:	b1 1d       	adc	r27, r1
    596e:	05 c0       	rjmp	.+10     	; 0x597a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5970:	26 e8       	ldi	r18, 0x86	; 134
    5972:	23 0f       	add	r18, r19
		m += 1;
    5974:	02 96       	adiw	r24, 0x02	; 2
    5976:	a1 1d       	adc	r26, r1
    5978:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    597a:	20 93 3b 05 	sts	0x053B, r18	; 0x80053b <timer0_fract>
	timer0_millis = m;
    597e:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <timer0_millis>
    5982:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <timer0_millis+0x1>
    5986:	a0 93 3e 05 	sts	0x053E, r26	; 0x80053e <timer0_millis+0x2>
    598a:	b0 93 3f 05 	sts	0x053F, r27	; 0x80053f <timer0_millis+0x3>
	timer0_overflow_count++;
    598e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <timer0_overflow_count>
    5992:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <timer0_overflow_count+0x1>
    5996:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <timer0_overflow_count+0x2>
    599a:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <timer0_overflow_count+0x3>
    599e:	01 96       	adiw	r24, 0x01	; 1
    59a0:	a1 1d       	adc	r26, r1
    59a2:	b1 1d       	adc	r27, r1
    59a4:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <timer0_overflow_count>
    59a8:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <timer0_overflow_count+0x1>
    59ac:	a0 93 42 05 	sts	0x0542, r26	; 0x800542 <timer0_overflow_count+0x2>
    59b0:	b0 93 43 05 	sts	0x0543, r27	; 0x800543 <timer0_overflow_count+0x3>
}
    59b4:	bf 91       	pop	r27
    59b6:	af 91       	pop	r26
    59b8:	9f 91       	pop	r25
    59ba:	8f 91       	pop	r24
    59bc:	3f 91       	pop	r19
    59be:	2f 91       	pop	r18
    59c0:	0f 90       	pop	r0
    59c2:	0f be       	out	0x3f, r0	; 63
    59c4:	0f 90       	pop	r0
    59c6:	1f 90       	pop	r1
    59c8:	18 95       	reti

000059ca <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    59ca:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    59cc:	f8 94       	cli
	m = timer0_millis;
    59ce:	60 91 3c 05 	lds	r22, 0x053C	; 0x80053c <timer0_millis>
    59d2:	70 91 3d 05 	lds	r23, 0x053D	; 0x80053d <timer0_millis+0x1>
    59d6:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <timer0_millis+0x2>
    59da:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <timer0_millis+0x3>
	SREG = oldSREG;
    59de:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    59e0:	08 95       	ret

000059e2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    59e2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    59e4:	f8 94       	cli
	m = timer0_overflow_count;
    59e6:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <timer0_overflow_count>
    59ea:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <timer0_overflow_count+0x1>
    59ee:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <timer0_overflow_count+0x2>
    59f2:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    59f6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    59f8:	a8 9b       	sbis	0x15, 0	; 21
    59fa:	05 c0       	rjmp	.+10     	; 0x5a06 <micros+0x24>
    59fc:	2f 3f       	cpi	r18, 0xFF	; 255
    59fe:	19 f0       	breq	.+6      	; 0x5a06 <micros+0x24>
		m++;
    5a00:	01 96       	adiw	r24, 0x01	; 1
    5a02:	a1 1d       	adc	r26, r1
    5a04:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5a06:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5a08:	ba 2f       	mov	r27, r26
    5a0a:	a9 2f       	mov	r26, r25
    5a0c:	98 2f       	mov	r25, r24
    5a0e:	88 27       	eor	r24, r24
    5a10:	82 0f       	add	r24, r18
    5a12:	91 1d       	adc	r25, r1
    5a14:	a1 1d       	adc	r26, r1
    5a16:	b1 1d       	adc	r27, r1
    5a18:	bc 01       	movw	r22, r24
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	42 e0       	ldi	r20, 0x02	; 2
    5a1e:	66 0f       	add	r22, r22
    5a20:	77 1f       	adc	r23, r23
    5a22:	88 1f       	adc	r24, r24
    5a24:	99 1f       	adc	r25, r25
    5a26:	4a 95       	dec	r20
    5a28:	d1 f7       	brne	.-12     	; 0x5a1e <micros+0x3c>
}
    5a2a:	08 95       	ret

00005a2c <delay>:

void delay(unsigned long ms)
{
    5a2c:	8f 92       	push	r8
    5a2e:	9f 92       	push	r9
    5a30:	af 92       	push	r10
    5a32:	bf 92       	push	r11
    5a34:	cf 92       	push	r12
    5a36:	df 92       	push	r13
    5a38:	ef 92       	push	r14
    5a3a:	ff 92       	push	r15
    5a3c:	6b 01       	movw	r12, r22
    5a3e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5a40:	d0 df       	rcall	.-96     	; 0x59e2 <micros>
    5a42:	4b 01       	movw	r8, r22
    5a44:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5a46:	c1 14       	cp	r12, r1
    5a48:	d1 04       	cpc	r13, r1
    5a4a:	e1 04       	cpc	r14, r1
    5a4c:	f1 04       	cpc	r15, r1
		yield();
    5a4e:	f1 f0       	breq	.+60     	; 0x5a8c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5a50:	b4 d3       	rcall	.+1896   	; 0x61ba <yield>
    5a52:	c7 df       	rcall	.-114    	; 0x59e2 <micros>
    5a54:	dc 01       	movw	r26, r24
    5a56:	cb 01       	movw	r24, r22
    5a58:	88 19       	sub	r24, r8
    5a5a:	99 09       	sbc	r25, r9
    5a5c:	aa 09       	sbc	r26, r10
    5a5e:	bb 09       	sbc	r27, r11
    5a60:	88 3e       	cpi	r24, 0xE8	; 232
    5a62:	93 40       	sbci	r25, 0x03	; 3
    5a64:	a1 05       	cpc	r26, r1
    5a66:	b1 05       	cpc	r27, r1
    5a68:	70 f3       	brcs	.-36     	; 0x5a46 <delay+0x1a>
			ms--;
    5a6a:	21 e0       	ldi	r18, 0x01	; 1
    5a6c:	c2 1a       	sub	r12, r18
    5a6e:	d1 08       	sbc	r13, r1
    5a70:	e1 08       	sbc	r14, r1
    5a72:	f1 08       	sbc	r15, r1
			start += 1000;
    5a74:	88 ee       	ldi	r24, 0xE8	; 232
    5a76:	88 0e       	add	r8, r24
    5a78:	83 e0       	ldi	r24, 0x03	; 3
    5a7a:	98 1e       	adc	r9, r24
    5a7c:	a1 1c       	adc	r10, r1
    5a7e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5a80:	c1 14       	cp	r12, r1
    5a82:	d1 04       	cpc	r13, r1
    5a84:	e1 04       	cpc	r14, r1
    5a86:	f1 04       	cpc	r15, r1
    5a88:	21 f7       	brne	.-56     	; 0x5a52 <delay+0x26>
    5a8a:	dd cf       	rjmp	.-70     	; 0x5a46 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5a8c:	ff 90       	pop	r15
    5a8e:	ef 90       	pop	r14
    5a90:	df 90       	pop	r13
    5a92:	cf 90       	pop	r12
    5a94:	bf 90       	pop	r11
    5a96:	af 90       	pop	r10
    5a98:	9f 90       	pop	r9
    5a9a:	8f 90       	pop	r8
    5a9c:	08 95       	ret

00005a9e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5a9e:	82 30       	cpi	r24, 0x02	; 2
    5aa0:	91 05       	cpc	r25, r1
    5aa2:	38 f0       	brcs	.+14     	; 0x5ab2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5aa4:	88 0f       	add	r24, r24
    5aa6:	99 1f       	adc	r25, r25
    5aa8:	88 0f       	add	r24, r24
    5aaa:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5aac:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5aae:	01 97       	sbiw	r24, 0x01	; 1
    5ab0:	f1 f7       	brne	.-4      	; 0x5aae <delayMicroseconds+0x10>
    5ab2:	08 95       	ret

00005ab4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5ab4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5ab6:	84 b5       	in	r24, 0x24	; 36
    5ab8:	82 60       	ori	r24, 0x02	; 2
    5aba:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5abc:	84 b5       	in	r24, 0x24	; 36
    5abe:	81 60       	ori	r24, 0x01	; 1
    5ac0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5ac2:	85 b5       	in	r24, 0x25	; 37
    5ac4:	82 60       	ori	r24, 0x02	; 2
    5ac6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5ac8:	85 b5       	in	r24, 0x25	; 37
    5aca:	81 60       	ori	r24, 0x01	; 1
    5acc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5ace:	ee e6       	ldi	r30, 0x6E	; 110
    5ad0:	f0 e0       	ldi	r31, 0x00	; 0
    5ad2:	80 81       	ld	r24, Z
    5ad4:	81 60       	ori	r24, 0x01	; 1
    5ad6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5ad8:	e1 e8       	ldi	r30, 0x81	; 129
    5ada:	f0 e0       	ldi	r31, 0x00	; 0
    5adc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5ade:	80 81       	ld	r24, Z
    5ae0:	82 60       	ori	r24, 0x02	; 2
    5ae2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5ae4:	80 81       	ld	r24, Z
    5ae6:	81 60       	ori	r24, 0x01	; 1
    5ae8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5aea:	e0 e8       	ldi	r30, 0x80	; 128
    5aec:	f0 e0       	ldi	r31, 0x00	; 0
    5aee:	80 81       	ld	r24, Z
    5af0:	81 60       	ori	r24, 0x01	; 1
    5af2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5af4:	e1 eb       	ldi	r30, 0xB1	; 177
    5af6:	f0 e0       	ldi	r31, 0x00	; 0
    5af8:	80 81       	ld	r24, Z
    5afa:	84 60       	ori	r24, 0x04	; 4
    5afc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5afe:	e0 eb       	ldi	r30, 0xB0	; 176
    5b00:	f0 e0       	ldi	r31, 0x00	; 0
    5b02:	80 81       	ld	r24, Z
    5b04:	81 60       	ori	r24, 0x01	; 1
    5b06:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5b08:	e1 e9       	ldi	r30, 0x91	; 145
    5b0a:	f0 e0       	ldi	r31, 0x00	; 0
    5b0c:	80 81       	ld	r24, Z
    5b0e:	82 60       	ori	r24, 0x02	; 2
    5b10:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    5b12:	80 81       	ld	r24, Z
    5b14:	81 60       	ori	r24, 0x01	; 1
    5b16:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5b18:	e0 e9       	ldi	r30, 0x90	; 144
    5b1a:	f0 e0       	ldi	r31, 0x00	; 0
    5b1c:	80 81       	ld	r24, Z
    5b1e:	81 60       	ori	r24, 0x01	; 1
    5b20:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    5b22:	e1 ea       	ldi	r30, 0xA1	; 161
    5b24:	f0 e0       	ldi	r31, 0x00	; 0
    5b26:	80 81       	ld	r24, Z
    5b28:	82 60       	ori	r24, 0x02	; 2
    5b2a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5b2c:	80 81       	ld	r24, Z
    5b2e:	81 60       	ori	r24, 0x01	; 1
    5b30:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    5b32:	e0 ea       	ldi	r30, 0xA0	; 160
    5b34:	f0 e0       	ldi	r31, 0x00	; 0
    5b36:	80 81       	ld	r24, Z
    5b38:	81 60       	ori	r24, 0x01	; 1
    5b3a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5b3c:	e1 e2       	ldi	r30, 0x21	; 33
    5b3e:	f1 e0       	ldi	r31, 0x01	; 1
    5b40:	80 81       	ld	r24, Z
    5b42:	82 60       	ori	r24, 0x02	; 2
    5b44:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    5b46:	80 81       	ld	r24, Z
    5b48:	81 60       	ori	r24, 0x01	; 1
    5b4a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5b4c:	e0 e2       	ldi	r30, 0x20	; 32
    5b4e:	f1 e0       	ldi	r31, 0x01	; 1
    5b50:	80 81       	ld	r24, Z
    5b52:	81 60       	ori	r24, 0x01	; 1
    5b54:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5b56:	ea e7       	ldi	r30, 0x7A	; 122
    5b58:	f0 e0       	ldi	r31, 0x00	; 0
    5b5a:	80 81       	ld	r24, Z
    5b5c:	84 60       	ori	r24, 0x04	; 4
    5b5e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5b60:	80 81       	ld	r24, Z
    5b62:	82 60       	ori	r24, 0x02	; 2
    5b64:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5b66:	80 81       	ld	r24, Z
    5b68:	81 60       	ori	r24, 0x01	; 1
    5b6a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5b6c:	80 81       	ld	r24, Z
    5b6e:	80 68       	ori	r24, 0x80	; 128
    5b70:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5b72:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    5b76:	08 95       	ret

00005b78 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	fc 01       	movw	r30, r24
    5b7c:	31 97       	sbiw	r30, 0x01	; 1
    5b7e:	e2 31       	cpi	r30, 0x12	; 18
    5b80:	f1 05       	cpc	r31, r1
    5b82:	08 f0       	brcs	.+2      	; 0x5b86 <turnOffPWM+0xe>
    5b84:	4d c0       	rjmp	.+154    	; 0x5c20 <turnOffPWM+0xa8>
    5b86:	88 27       	eor	r24, r24
    5b88:	ee 58       	subi	r30, 0x8E	; 142
    5b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b8e:	63 c3       	rjmp	.+1734   	; 0x6256 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5b90:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5b94:	8f 77       	andi	r24, 0x7F	; 127
    5b96:	03 c0       	rjmp	.+6      	; 0x5b9e <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5b98:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5b9c:	8f 7d       	andi	r24, 0xDF	; 223
    5b9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5ba2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    5ba4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5ba8:	87 7f       	andi	r24, 0xF7	; 247
    5baa:	f9 cf       	rjmp	.-14     	; 0x5b9e <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5bac:	84 b5       	in	r24, 0x24	; 36
    5bae:	8f 77       	andi	r24, 0x7F	; 127
    5bb0:	02 c0       	rjmp	.+4      	; 0x5bb6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5bb2:	84 b5       	in	r24, 0x24	; 36
    5bb4:	8f 7d       	andi	r24, 0xDF	; 223
    5bb6:	84 bd       	out	0x24, r24	; 36
    5bb8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5bba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5bbe:	8f 77       	andi	r24, 0x7F	; 127
    5bc0:	03 c0       	rjmp	.+6      	; 0x5bc8 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5bc2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5bc6:	8f 7d       	andi	r24, 0xDF	; 223
    5bc8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5bcc:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5bce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5bd2:	8f 77       	andi	r24, 0x7F	; 127
    5bd4:	07 c0       	rjmp	.+14     	; 0x5be4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    5bd6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5bda:	8f 7d       	andi	r24, 0xDF	; 223
    5bdc:	03 c0       	rjmp	.+6      	; 0x5be4 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5bde:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5be2:	87 7f       	andi	r24, 0xF7	; 247
    5be4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5be8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5bea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5bee:	8f 77       	andi	r24, 0x7F	; 127
    5bf0:	07 c0       	rjmp	.+14     	; 0x5c00 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5bf2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5bf6:	8f 7d       	andi	r24, 0xDF	; 223
    5bf8:	03 c0       	rjmp	.+6      	; 0x5c00 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5bfa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5bfe:	87 7f       	andi	r24, 0xF7	; 247
    5c00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5c04:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5c06:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c0a:	8f 77       	andi	r24, 0x7F	; 127
    5c0c:	07 c0       	rjmp	.+14     	; 0x5c1c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5c0e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c12:	8f 7d       	andi	r24, 0xDF	; 223
    5c14:	03 c0       	rjmp	.+6      	; 0x5c1c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    5c16:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c1a:	87 7f       	andi	r24, 0xF7	; 247
    5c1c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5c20:	08 95       	ret

00005c22 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5c22:	cf 93       	push	r28
    5c24:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	fc 01       	movw	r30, r24
    5c2a:	e2 5b       	subi	r30, 0xB2	; 178
    5c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    5c2e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5c30:	fc 01       	movw	r30, r24
    5c32:	ec 56       	subi	r30, 0x6C	; 108
    5c34:	fe 4f       	sbci	r31, 0xFE	; 254
    5c36:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5c38:	88 23       	and	r24, r24
    5c3a:	61 f1       	breq	.+88     	; 0x5c94 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	88 0f       	add	r24, r24
    5c40:	99 1f       	adc	r25, r25
    5c42:	fc 01       	movw	r30, r24
    5c44:	e2 5f       	subi	r30, 0xF2	; 242
    5c46:	fd 4f       	sbci	r31, 0xFD	; 253
    5c48:	c5 91       	lpm	r28, Z+
    5c4a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5c4c:	fc 01       	movw	r30, r24
    5c4e:	ec 50       	subi	r30, 0x0C	; 12
    5c50:	fe 4f       	sbci	r31, 0xFE	; 254
    5c52:	a5 91       	lpm	r26, Z+
    5c54:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5c56:	61 11       	cpse	r22, r1
    5c58:	09 c0       	rjmp	.+18     	; 0x5c6c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5c5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c5c:	f8 94       	cli
		*reg &= ~bit;
    5c5e:	88 81       	ld	r24, Y
    5c60:	20 95       	com	r18
    5c62:	82 23       	and	r24, r18
    5c64:	88 83       	st	Y, r24
		*out &= ~bit;
    5c66:	ec 91       	ld	r30, X
    5c68:	2e 23       	and	r18, r30
    5c6a:	0b c0       	rjmp	.+22     	; 0x5c82 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5c6c:	62 30       	cpi	r22, 0x02	; 2
    5c6e:	61 f4       	brne	.+24     	; 0x5c88 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5c70:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c72:	f8 94       	cli
		*reg &= ~bit;
    5c74:	88 81       	ld	r24, Y
    5c76:	32 2f       	mov	r19, r18
    5c78:	30 95       	com	r19
    5c7a:	83 23       	and	r24, r19
    5c7c:	88 83       	st	Y, r24
		*out |= bit;
    5c7e:	ec 91       	ld	r30, X
    5c80:	2e 2b       	or	r18, r30
    5c82:	2c 93       	st	X, r18
		SREG = oldSREG;
    5c84:	9f bf       	out	0x3f, r25	; 63
    5c86:	06 c0       	rjmp	.+12     	; 0x5c94 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5c88:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5c8a:	f8 94       	cli
		*reg |= bit;
    5c8c:	e8 81       	ld	r30, Y
    5c8e:	2e 2b       	or	r18, r30
    5c90:	28 83       	st	Y, r18
		SREG = oldSREG;
    5c92:	8f bf       	out	0x3f, r24	; 63
	}
}
    5c94:	df 91       	pop	r29
    5c96:	cf 91       	pop	r28
    5c98:	08 95       	ret

00005c9a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5c9a:	1f 93       	push	r17
    5c9c:	cf 93       	push	r28
    5c9e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5ca0:	28 2f       	mov	r18, r24
    5ca2:	30 e0       	ldi	r19, 0x00	; 0
    5ca4:	f9 01       	movw	r30, r18
    5ca6:	e8 5f       	subi	r30, 0xF8	; 248
    5ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    5caa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5cac:	f9 01       	movw	r30, r18
    5cae:	e2 5b       	subi	r30, 0xB2	; 178
    5cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    5cb2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5cb4:	f9 01       	movw	r30, r18
    5cb6:	ec 56       	subi	r30, 0x6C	; 108
    5cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    5cba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5cbc:	cc 23       	and	r28, r28
    5cbe:	b9 f0       	breq	.+46     	; 0x5cee <digitalWrite+0x54>
    5cc0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5cc2:	81 11       	cpse	r24, r1
    5cc4:	59 df       	rcall	.-334    	; 0x5b78 <turnOffPWM>

	out = portOutputRegister(port);
    5cc6:	ec 2f       	mov	r30, r28
    5cc8:	f0 e0       	ldi	r31, 0x00	; 0
    5cca:	ee 0f       	add	r30, r30
    5ccc:	ff 1f       	adc	r31, r31
    5cce:	ec 50       	subi	r30, 0x0C	; 12
    5cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    5cd2:	a5 91       	lpm	r26, Z+
    5cd4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5cd6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5cd8:	f8 94       	cli

	if (val == LOW) {
    5cda:	11 11       	cpse	r17, r1
    5cdc:	04 c0       	rjmp	.+8      	; 0x5ce6 <digitalWrite+0x4c>
		*out &= ~bit;
    5cde:	8c 91       	ld	r24, X
    5ce0:	d0 95       	com	r29
    5ce2:	d8 23       	and	r29, r24
    5ce4:	02 c0       	rjmp	.+4      	; 0x5cea <digitalWrite+0x50>
	} else {
		*out |= bit;
    5ce6:	ec 91       	ld	r30, X
    5ce8:	de 2b       	or	r29, r30
    5cea:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5cec:	9f bf       	out	0x3f, r25	; 63
}
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	1f 91       	pop	r17
    5cf4:	08 95       	ret

00005cf6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5cfa:	28 2f       	mov	r18, r24
    5cfc:	30 e0       	ldi	r19, 0x00	; 0
    5cfe:	f9 01       	movw	r30, r18
    5d00:	e8 5f       	subi	r30, 0xF8	; 248
    5d02:	fe 4f       	sbci	r31, 0xFE	; 254
    5d04:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5d06:	f9 01       	movw	r30, r18
    5d08:	e2 5b       	subi	r30, 0xB2	; 178
    5d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    5d0c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5d0e:	f9 01       	movw	r30, r18
    5d10:	ec 56       	subi	r30, 0x6C	; 108
    5d12:	fe 4f       	sbci	r31, 0xFE	; 254
    5d14:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    5d16:	cc 23       	and	r28, r28
    5d18:	89 f0       	breq	.+34     	; 0x5d3c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5d1a:	81 11       	cpse	r24, r1
    5d1c:	2d df       	rcall	.-422    	; 0x5b78 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5d1e:	ec 2f       	mov	r30, r28
    5d20:	f0 e0       	ldi	r31, 0x00	; 0
    5d22:	ee 0f       	add	r30, r30
    5d24:	ff 1f       	adc	r31, r31
    5d26:	e6 52       	subi	r30, 0x26	; 38
    5d28:	fe 4f       	sbci	r31, 0xFE	; 254
    5d2a:	a5 91       	lpm	r26, Z+
    5d2c:	b4 91       	lpm	r27, Z
    5d2e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5d30:	ed 23       	and	r30, r29
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	21 f4       	brne	.+8      	; 0x5d40 <digitalRead+0x4a>
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	02 c0       	rjmp	.+4      	; 0x5d40 <digitalRead+0x4a>
    5d3c:	80 e0       	ldi	r24, 0x00	; 0
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5d40:	df 91       	pop	r29
    5d42:	cf 91       	pop	r28
    5d44:	08 95       	ret

00005d46 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5d46:	4f 92       	push	r4
    5d48:	5f 92       	push	r5
    5d4a:	6f 92       	push	r6
    5d4c:	7f 92       	push	r7
    5d4e:	af 92       	push	r10
    5d50:	bf 92       	push	r11
    5d52:	cf 92       	push	r12
    5d54:	df 92       	push	r13
    5d56:	ef 92       	push	r14
    5d58:	ff 92       	push	r15
    5d5a:	0f 93       	push	r16
    5d5c:	1f 93       	push	r17
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
    5d62:	cd b7       	in	r28, 0x3d	; 61
    5d64:	de b7       	in	r29, 0x3e	; 62
    5d66:	29 01       	movw	r4, r18
    5d68:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5d6a:	9b 01       	movw	r18, r22
    5d6c:	ac 01       	movw	r20, r24
    5d6e:	24 19       	sub	r18, r4
    5d70:	35 09       	sbc	r19, r5
    5d72:	46 09       	sbc	r20, r6
    5d74:	57 09       	sbc	r21, r7
    5d76:	8a 89       	ldd	r24, Y+18	; 0x12
    5d78:	9b 89       	ldd	r25, Y+19	; 0x13
    5d7a:	ac 89       	ldd	r26, Y+20	; 0x14
    5d7c:	bd 89       	ldd	r27, Y+21	; 0x15
    5d7e:	bc 01       	movw	r22, r24
    5d80:	cd 01       	movw	r24, r26
    5d82:	6a 19       	sub	r22, r10
    5d84:	7b 09       	sbc	r23, r11
    5d86:	8c 09       	sbc	r24, r12
    5d88:	9d 09       	sbc	r25, r13
    5d8a:	18 d2       	rcall	.+1072   	; 0x61bc <__mulsi3>
    5d8c:	a8 01       	movw	r20, r16
    5d8e:	97 01       	movw	r18, r14
    5d90:	24 19       	sub	r18, r4
    5d92:	35 09       	sbc	r19, r5
    5d94:	46 09       	sbc	r20, r6
    5d96:	57 09       	sbc	r21, r7
    5d98:	42 d2       	rcall	.+1156   	; 0x621e <__divmodsi4>
    5d9a:	ca 01       	movw	r24, r20
    5d9c:	b9 01       	movw	r22, r18
    5d9e:	6a 0d       	add	r22, r10
    5da0:	7b 1d       	adc	r23, r11
    5da2:	8c 1d       	adc	r24, r12
    5da4:	9d 1d       	adc	r25, r13
}
    5da6:	df 91       	pop	r29
    5da8:	cf 91       	pop	r28
    5daa:	1f 91       	pop	r17
    5dac:	0f 91       	pop	r16
    5dae:	ff 90       	pop	r15
    5db0:	ef 90       	pop	r14
    5db2:	df 90       	pop	r13
    5db4:	cf 90       	pop	r12
    5db6:	bf 90       	pop	r11
    5db8:	af 90       	pop	r10
    5dba:	7f 90       	pop	r7
    5dbc:	6f 90       	pop	r6
    5dbe:	5f 90       	pop	r5
    5dc0:	4f 90       	pop	r4
    5dc2:	08 95       	ret

00005dc4 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    5dc4:	08 95       	ret

00005dc6 <_ZN6StringD1Ev>:
    5dc6:	fc 01       	movw	r30, r24
    5dc8:	80 81       	ld	r24, Z
    5dca:	91 81       	ldd	r25, Z+1	; 0x01
    5dcc:	00 97       	sbiw	r24, 0x00	; 0
    5dce:	09 f0       	breq	.+2      	; 0x5dd2 <_ZN6StringD1Ev+0xc>
    5dd0:	fb c2       	rjmp	.+1526   	; 0x63c8 <free>
    5dd2:	08 95       	ret

00005dd4 <_ZN6String10invalidateEv>:
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	ec 01       	movw	r28, r24
    5dda:	88 81       	ld	r24, Y
    5ddc:	99 81       	ldd	r25, Y+1	; 0x01
    5dde:	00 97       	sbiw	r24, 0x00	; 0
    5de0:	09 f0       	breq	.+2      	; 0x5de4 <_ZN6String10invalidateEv+0x10>
    5de2:	f2 d2       	rcall	.+1508   	; 0x63c8 <free>
    5de4:	19 82       	std	Y+1, r1	; 0x01
    5de6:	18 82       	st	Y, r1
    5de8:	1d 82       	std	Y+5, r1	; 0x05
    5dea:	1c 82       	std	Y+4, r1	; 0x04
    5dec:	1b 82       	std	Y+3, r1	; 0x03
    5dee:	1a 82       	std	Y+2, r1	; 0x02
    5df0:	df 91       	pop	r29
    5df2:	cf 91       	pop	r28
    5df4:	08 95       	ret

00005df6 <_ZN6String12changeBufferEj>:
    5df6:	0f 93       	push	r16
    5df8:	1f 93       	push	r17
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	ec 01       	movw	r28, r24
    5e00:	8b 01       	movw	r16, r22
    5e02:	6f 5f       	subi	r22, 0xFF	; 255
    5e04:	7f 4f       	sbci	r23, 0xFF	; 255
    5e06:	88 81       	ld	r24, Y
    5e08:	99 81       	ldd	r25, Y+1	; 0x01
    5e0a:	67 d3       	rcall	.+1742   	; 0x64da <realloc>
    5e0c:	00 97       	sbiw	r24, 0x00	; 0
    5e0e:	31 f0       	breq	.+12     	; 0x5e1c <_ZN6String12changeBufferEj+0x26>
    5e10:	99 83       	std	Y+1, r25	; 0x01
    5e12:	88 83       	st	Y, r24
    5e14:	1b 83       	std	Y+3, r17	; 0x03
    5e16:	0a 83       	std	Y+2, r16	; 0x02
    5e18:	81 e0       	ldi	r24, 0x01	; 1
    5e1a:	01 c0       	rjmp	.+2      	; 0x5e1e <_ZN6String12changeBufferEj+0x28>
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	df 91       	pop	r29
    5e20:	cf 91       	pop	r28
    5e22:	1f 91       	pop	r17
    5e24:	0f 91       	pop	r16
    5e26:	08 95       	ret

00005e28 <_ZN6String7reserveEj>:
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	ec 01       	movw	r28, r24
    5e2e:	88 81       	ld	r24, Y
    5e30:	99 81       	ldd	r25, Y+1	; 0x01
    5e32:	89 2b       	or	r24, r25
    5e34:	29 f0       	breq	.+10     	; 0x5e40 <_ZN6String7reserveEj+0x18>
    5e36:	8a 81       	ldd	r24, Y+2	; 0x02
    5e38:	9b 81       	ldd	r25, Y+3	; 0x03
    5e3a:	86 17       	cp	r24, r22
    5e3c:	97 07       	cpc	r25, r23
    5e3e:	58 f4       	brcc	.+22     	; 0x5e56 <_ZN6String7reserveEj+0x2e>
    5e40:	ce 01       	movw	r24, r28
    5e42:	d9 df       	rcall	.-78     	; 0x5df6 <_ZN6String12changeBufferEj>
    5e44:	88 23       	and	r24, r24
    5e46:	41 f0       	breq	.+16     	; 0x5e58 <_ZN6String7reserveEj+0x30>
    5e48:	8c 81       	ldd	r24, Y+4	; 0x04
    5e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    5e4c:	89 2b       	or	r24, r25
    5e4e:	19 f4       	brne	.+6      	; 0x5e56 <_ZN6String7reserveEj+0x2e>
    5e50:	e8 81       	ld	r30, Y
    5e52:	f9 81       	ldd	r31, Y+1	; 0x01
    5e54:	10 82       	st	Z, r1
    5e56:	81 e0       	ldi	r24, 0x01	; 1
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	08 95       	ret

00005e5e <_ZN6String4copyEPKcj>:
    5e5e:	ef 92       	push	r14
    5e60:	ff 92       	push	r15
    5e62:	0f 93       	push	r16
    5e64:	1f 93       	push	r17
    5e66:	cf 93       	push	r28
    5e68:	df 93       	push	r29
    5e6a:	ec 01       	movw	r28, r24
    5e6c:	7b 01       	movw	r14, r22
    5e6e:	8a 01       	movw	r16, r20
    5e70:	ba 01       	movw	r22, r20
    5e72:	da df       	rcall	.-76     	; 0x5e28 <_ZN6String7reserveEj>
    5e74:	81 11       	cpse	r24, r1
    5e76:	03 c0       	rjmp	.+6      	; 0x5e7e <_ZN6String4copyEPKcj+0x20>
    5e78:	ce 01       	movw	r24, r28
    5e7a:	ac df       	rcall	.-168    	; 0x5dd4 <_ZN6String10invalidateEv>
    5e7c:	06 c0       	rjmp	.+12     	; 0x5e8a <_ZN6String4copyEPKcj+0x2c>
    5e7e:	1d 83       	std	Y+5, r17	; 0x05
    5e80:	0c 83       	std	Y+4, r16	; 0x04
    5e82:	b7 01       	movw	r22, r14
    5e84:	88 81       	ld	r24, Y
    5e86:	99 81       	ldd	r25, Y+1	; 0x01
    5e88:	2d d4       	rcall	.+2138   	; 0x66e4 <strcpy>
    5e8a:	ce 01       	movw	r24, r28
    5e8c:	df 91       	pop	r29
    5e8e:	cf 91       	pop	r28
    5e90:	1f 91       	pop	r17
    5e92:	0f 91       	pop	r16
    5e94:	ff 90       	pop	r15
    5e96:	ef 90       	pop	r14
    5e98:	08 95       	ret

00005e9a <_ZN6StringC1EPKc>:
    5e9a:	fc 01       	movw	r30, r24
    5e9c:	11 82       	std	Z+1, r1	; 0x01
    5e9e:	10 82       	st	Z, r1
    5ea0:	13 82       	std	Z+3, r1	; 0x03
    5ea2:	12 82       	std	Z+2, r1	; 0x02
    5ea4:	15 82       	std	Z+5, r1	; 0x05
    5ea6:	14 82       	std	Z+4, r1	; 0x04
    5ea8:	61 15       	cp	r22, r1
    5eaa:	71 05       	cpc	r23, r1
    5eac:	49 f0       	breq	.+18     	; 0x5ec0 <_ZN6StringC1EPKc+0x26>
    5eae:	fb 01       	movw	r30, r22
    5eb0:	01 90       	ld	r0, Z+
    5eb2:	00 20       	and	r0, r0
    5eb4:	e9 f7       	brne	.-6      	; 0x5eb0 <_ZN6StringC1EPKc+0x16>
    5eb6:	31 97       	sbiw	r30, 0x01	; 1
    5eb8:	af 01       	movw	r20, r30
    5eba:	46 1b       	sub	r20, r22
    5ebc:	57 0b       	sbc	r21, r23
    5ebe:	cf cf       	rjmp	.-98     	; 0x5e5e <_ZN6String4copyEPKcj>
    5ec0:	08 95       	ret

00005ec2 <_ZN6String4moveERS_>:
    5ec2:	0f 93       	push	r16
    5ec4:	1f 93       	push	r17
    5ec6:	cf 93       	push	r28
    5ec8:	df 93       	push	r29
    5eca:	8c 01       	movw	r16, r24
    5ecc:	eb 01       	movw	r28, r22
    5ece:	fc 01       	movw	r30, r24
    5ed0:	80 81       	ld	r24, Z
    5ed2:	91 81       	ldd	r25, Z+1	; 0x01
    5ed4:	00 97       	sbiw	r24, 0x00	; 0
    5ed6:	c1 f0       	breq	.+48     	; 0x5f08 <_ZN6String4moveERS_+0x46>
    5ed8:	68 81       	ld	r22, Y
    5eda:	79 81       	ldd	r23, Y+1	; 0x01
    5edc:	61 15       	cp	r22, r1
    5ede:	71 05       	cpc	r23, r1
    5ee0:	91 f0       	breq	.+36     	; 0x5f06 <_ZN6String4moveERS_+0x44>
    5ee2:	22 ee       	ldi	r18, 0xE2	; 226
    5ee4:	3e e2       	ldi	r19, 0x2E	; 46
    5ee6:	23 2b       	or	r18, r19
    5ee8:	71 f0       	breq	.+28     	; 0x5f06 <_ZN6String4moveERS_+0x44>
    5eea:	42 81       	ldd	r20, Z+2	; 0x02
    5eec:	53 81       	ldd	r21, Z+3	; 0x03
    5eee:	2c 81       	ldd	r18, Y+4	; 0x04
    5ef0:	3d 81       	ldd	r19, Y+5	; 0x05
    5ef2:	42 17       	cp	r20, r18
    5ef4:	53 07       	cpc	r21, r19
    5ef6:	38 f0       	brcs	.+14     	; 0x5f06 <_ZN6String4moveERS_+0x44>
    5ef8:	f5 d3       	rcall	.+2026   	; 0x66e4 <strcpy>
    5efa:	8c 81       	ldd	r24, Y+4	; 0x04
    5efc:	9d 81       	ldd	r25, Y+5	; 0x05
    5efe:	f8 01       	movw	r30, r16
    5f00:	95 83       	std	Z+5, r25	; 0x05
    5f02:	84 83       	std	Z+4, r24	; 0x04
    5f04:	12 c0       	rjmp	.+36     	; 0x5f2a <_ZN6String4moveERS_+0x68>
    5f06:	60 d2       	rcall	.+1216   	; 0x63c8 <free>
    5f08:	88 81       	ld	r24, Y
    5f0a:	99 81       	ldd	r25, Y+1	; 0x01
    5f0c:	f8 01       	movw	r30, r16
    5f0e:	91 83       	std	Z+1, r25	; 0x01
    5f10:	80 83       	st	Z, r24
    5f12:	8a 81       	ldd	r24, Y+2	; 0x02
    5f14:	9b 81       	ldd	r25, Y+3	; 0x03
    5f16:	93 83       	std	Z+3, r25	; 0x03
    5f18:	82 83       	std	Z+2, r24	; 0x02
    5f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    5f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    5f1e:	95 83       	std	Z+5, r25	; 0x05
    5f20:	84 83       	std	Z+4, r24	; 0x04
    5f22:	19 82       	std	Y+1, r1	; 0x01
    5f24:	18 82       	st	Y, r1
    5f26:	1b 82       	std	Y+3, r1	; 0x03
    5f28:	1a 82       	std	Y+2, r1	; 0x02
    5f2a:	1d 82       	std	Y+5, r1	; 0x05
    5f2c:	1c 82       	std	Y+4, r1	; 0x04
    5f2e:	df 91       	pop	r29
    5f30:	cf 91       	pop	r28
    5f32:	1f 91       	pop	r17
    5f34:	0f 91       	pop	r16
    5f36:	08 95       	ret

00005f38 <_ZN6StringaSEOS_>:
    5f38:	cf 93       	push	r28
    5f3a:	df 93       	push	r29
    5f3c:	ec 01       	movw	r28, r24
    5f3e:	86 17       	cp	r24, r22
    5f40:	97 07       	cpc	r25, r23
    5f42:	09 f0       	breq	.+2      	; 0x5f46 <_ZN6StringaSEOS_+0xe>
    5f44:	be df       	rcall	.-132    	; 0x5ec2 <_ZN6String4moveERS_>
    5f46:	ce 01       	movw	r24, r28
    5f48:	df 91       	pop	r29
    5f4a:	cf 91       	pop	r28
    5f4c:	08 95       	ret

00005f4e <_ZN6StringaSEPKc>:
    5f4e:	cf 93       	push	r28
    5f50:	df 93       	push	r29
    5f52:	ec 01       	movw	r28, r24
    5f54:	61 15       	cp	r22, r1
    5f56:	71 05       	cpc	r23, r1
    5f58:	51 f0       	breq	.+20     	; 0x5f6e <_ZN6StringaSEPKc+0x20>
    5f5a:	fb 01       	movw	r30, r22
    5f5c:	01 90       	ld	r0, Z+
    5f5e:	00 20       	and	r0, r0
    5f60:	e9 f7       	brne	.-6      	; 0x5f5c <_ZN6StringaSEPKc+0xe>
    5f62:	31 97       	sbiw	r30, 0x01	; 1
    5f64:	af 01       	movw	r20, r30
    5f66:	46 1b       	sub	r20, r22
    5f68:	57 0b       	sbc	r21, r23
    5f6a:	79 df       	rcall	.-270    	; 0x5e5e <_ZN6String4copyEPKcj>
    5f6c:	01 c0       	rjmp	.+2      	; 0x5f70 <_ZN6StringaSEPKc+0x22>
    5f6e:	32 df       	rcall	.-412    	; 0x5dd4 <_ZN6String10invalidateEv>
    5f70:	ce 01       	movw	r24, r28
    5f72:	df 91       	pop	r29
    5f74:	cf 91       	pop	r28
    5f76:	08 95       	ret

00005f78 <_ZN6StringC1Ehh>:
    5f78:	0f 93       	push	r16
    5f7a:	1f 93       	push	r17
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	cd b7       	in	r28, 0x3d	; 61
    5f82:	de b7       	in	r29, 0x3e	; 62
    5f84:	29 97       	sbiw	r28, 0x09	; 9
    5f86:	0f b6       	in	r0, 0x3f	; 63
    5f88:	f8 94       	cli
    5f8a:	de bf       	out	0x3e, r29	; 62
    5f8c:	0f be       	out	0x3f, r0	; 63
    5f8e:	cd bf       	out	0x3d, r28	; 61
    5f90:	8c 01       	movw	r16, r24
    5f92:	86 2f       	mov	r24, r22
    5f94:	f8 01       	movw	r30, r16
    5f96:	11 82       	std	Z+1, r1	; 0x01
    5f98:	10 82       	st	Z, r1
    5f9a:	13 82       	std	Z+3, r1	; 0x03
    5f9c:	12 82       	std	Z+2, r1	; 0x02
    5f9e:	15 82       	std	Z+5, r1	; 0x05
    5fa0:	14 82       	std	Z+4, r1	; 0x04
    5fa2:	50 e0       	ldi	r21, 0x00	; 0
    5fa4:	be 01       	movw	r22, r28
    5fa6:	6f 5f       	subi	r22, 0xFF	; 255
    5fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	ba d3       	rcall	.+1908   	; 0x6722 <utoa>
    5fae:	be 01       	movw	r22, r28
    5fb0:	6f 5f       	subi	r22, 0xFF	; 255
    5fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb4:	c8 01       	movw	r24, r16
    5fb6:	cb df       	rcall	.-106    	; 0x5f4e <_ZN6StringaSEPKc>
    5fb8:	29 96       	adiw	r28, 0x09	; 9
    5fba:	0f b6       	in	r0, 0x3f	; 63
    5fbc:	f8 94       	cli
    5fbe:	de bf       	out	0x3e, r29	; 62
    5fc0:	0f be       	out	0x3f, r0	; 63
    5fc2:	cd bf       	out	0x3d, r28	; 61
    5fc4:	df 91       	pop	r29
    5fc6:	cf 91       	pop	r28
    5fc8:	1f 91       	pop	r17
    5fca:	0f 91       	pop	r16
    5fcc:	08 95       	ret

00005fce <_ZN6String6concatEPKcj>:
    5fce:	ef 92       	push	r14
    5fd0:	ff 92       	push	r15
    5fd2:	0f 93       	push	r16
    5fd4:	1f 93       	push	r17
    5fd6:	cf 93       	push	r28
    5fd8:	df 93       	push	r29
    5fda:	61 15       	cp	r22, r1
    5fdc:	71 05       	cpc	r23, r1
    5fde:	11 f4       	brne	.+4      	; 0x5fe4 <_ZN6String6concatEPKcj+0x16>
    5fe0:	80 e0       	ldi	r24, 0x00	; 0
    5fe2:	1a c0       	rjmp	.+52     	; 0x6018 <_ZN6String6concatEPKcj+0x4a>
    5fe4:	41 15       	cp	r20, r1
    5fe6:	51 05       	cpc	r21, r1
    5fe8:	b1 f0       	breq	.+44     	; 0x6016 <_ZN6String6concatEPKcj+0x48>
    5fea:	7b 01       	movw	r14, r22
    5fec:	ec 01       	movw	r28, r24
    5fee:	8c 81       	ldd	r24, Y+4	; 0x04
    5ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    5ff2:	8a 01       	movw	r16, r20
    5ff4:	08 0f       	add	r16, r24
    5ff6:	19 1f       	adc	r17, r25
    5ff8:	b8 01       	movw	r22, r16
    5ffa:	ce 01       	movw	r24, r28
    5ffc:	15 df       	rcall	.-470    	; 0x5e28 <_ZN6String7reserveEj>
    5ffe:	88 23       	and	r24, r24
    6000:	79 f3       	breq	.-34     	; 0x5fe0 <_ZN6String6concatEPKcj+0x12>
    6002:	28 81       	ld	r18, Y
    6004:	39 81       	ldd	r19, Y+1	; 0x01
    6006:	8c 81       	ldd	r24, Y+4	; 0x04
    6008:	9d 81       	ldd	r25, Y+5	; 0x05
    600a:	b7 01       	movw	r22, r14
    600c:	82 0f       	add	r24, r18
    600e:	93 1f       	adc	r25, r19
    6010:	69 d3       	rcall	.+1746   	; 0x66e4 <strcpy>
    6012:	1d 83       	std	Y+5, r17	; 0x05
    6014:	0c 83       	std	Y+4, r16	; 0x04
    6016:	81 e0       	ldi	r24, 0x01	; 1
    6018:	df 91       	pop	r29
    601a:	cf 91       	pop	r28
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	ff 90       	pop	r15
    6022:	ef 90       	pop	r14
    6024:	08 95       	ret

00006026 <_ZN6String6concatERKS_>:
    6026:	fb 01       	movw	r30, r22
    6028:	44 81       	ldd	r20, Z+4	; 0x04
    602a:	55 81       	ldd	r21, Z+5	; 0x05
    602c:	60 81       	ld	r22, Z
    602e:	71 81       	ldd	r23, Z+1	; 0x01
    6030:	ce cf       	rjmp	.-100    	; 0x5fce <_ZN6String6concatEPKcj>

00006032 <_ZN6String6concatEc>:
    6032:	cf 93       	push	r28
    6034:	df 93       	push	r29
    6036:	1f 92       	push	r1
    6038:	1f 92       	push	r1
    603a:	cd b7       	in	r28, 0x3d	; 61
    603c:	de b7       	in	r29, 0x3e	; 62
    603e:	69 83       	std	Y+1, r22	; 0x01
    6040:	1a 82       	std	Y+2, r1	; 0x02
    6042:	41 e0       	ldi	r20, 0x01	; 1
    6044:	50 e0       	ldi	r21, 0x00	; 0
    6046:	be 01       	movw	r22, r28
    6048:	6f 5f       	subi	r22, 0xFF	; 255
    604a:	7f 4f       	sbci	r23, 0xFF	; 255
    604c:	c0 df       	rcall	.-128    	; 0x5fce <_ZN6String6concatEPKcj>
    604e:	0f 90       	pop	r0
    6050:	0f 90       	pop	r0
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	08 95       	ret

00006058 <_ZNK6String9compareToERKS_>:
    6058:	cf 93       	push	r28
    605a:	df 93       	push	r29
    605c:	dc 01       	movw	r26, r24
    605e:	ed 91       	ld	r30, X+
    6060:	fc 91       	ld	r31, X
    6062:	eb 01       	movw	r28, r22
    6064:	a8 81       	ld	r26, Y
    6066:	b9 81       	ldd	r27, Y+1	; 0x01
    6068:	30 97       	sbiw	r30, 0x00	; 0
    606a:	11 f0       	breq	.+4      	; 0x6070 <_ZNK6String9compareToERKS_+0x18>
    606c:	10 97       	sbiw	r26, 0x00	; 0
    606e:	c9 f4       	brne	.+50     	; 0x60a2 <_ZNK6String9compareToERKS_+0x4a>
    6070:	10 97       	sbiw	r26, 0x00	; 0
    6072:	59 f0       	breq	.+22     	; 0x608a <_ZNK6String9compareToERKS_+0x32>
    6074:	eb 01       	movw	r28, r22
    6076:	2c 81       	ldd	r18, Y+4	; 0x04
    6078:	3d 81       	ldd	r19, Y+5	; 0x05
    607a:	23 2b       	or	r18, r19
    607c:	31 f0       	breq	.+12     	; 0x608a <_ZNK6String9compareToERKS_+0x32>
    607e:	8c 91       	ld	r24, X
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	91 95       	neg	r25
    6084:	81 95       	neg	r24
    6086:	91 09       	sbc	r25, r1
    6088:	13 c0       	rjmp	.+38     	; 0x60b0 <_ZNK6String9compareToERKS_+0x58>
    608a:	30 97       	sbiw	r30, 0x00	; 0
    608c:	79 f0       	breq	.+30     	; 0x60ac <_ZNK6String9compareToERKS_+0x54>
    608e:	dc 01       	movw	r26, r24
    6090:	14 96       	adiw	r26, 0x04	; 4
    6092:	8d 91       	ld	r24, X+
    6094:	9c 91       	ld	r25, X
    6096:	15 97       	sbiw	r26, 0x05	; 5
    6098:	89 2b       	or	r24, r25
    609a:	41 f0       	breq	.+16     	; 0x60ac <_ZNK6String9compareToERKS_+0x54>
    609c:	80 81       	ld	r24, Z
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	07 c0       	rjmp	.+14     	; 0x60b0 <_ZNK6String9compareToERKS_+0x58>
    60a2:	bd 01       	movw	r22, r26
    60a4:	cf 01       	movw	r24, r30
    60a6:	df 91       	pop	r29
    60a8:	cf 91       	pop	r28
    60aa:	13 c3       	rjmp	.+1574   	; 0x66d2 <strcmp>
    60ac:	80 e0       	ldi	r24, 0x00	; 0
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <_ZNK6String6equalsERKS_>:
    60b6:	fc 01       	movw	r30, r24
    60b8:	44 81       	ldd	r20, Z+4	; 0x04
    60ba:	55 81       	ldd	r21, Z+5	; 0x05
    60bc:	fb 01       	movw	r30, r22
    60be:	24 81       	ldd	r18, Z+4	; 0x04
    60c0:	35 81       	ldd	r19, Z+5	; 0x05
    60c2:	42 17       	cp	r20, r18
    60c4:	53 07       	cpc	r21, r19
    60c6:	21 f4       	brne	.+8      	; 0x60d0 <_ZNK6String6equalsERKS_+0x1a>
    60c8:	c7 df       	rcall	.-114    	; 0x6058 <_ZNK6String9compareToERKS_>
    60ca:	21 e0       	ldi	r18, 0x01	; 1
    60cc:	89 2b       	or	r24, r25
    60ce:	09 f0       	breq	.+2      	; 0x60d2 <_ZNK6String6equalsERKS_+0x1c>
    60d0:	20 e0       	ldi	r18, 0x00	; 0
    60d2:	82 2f       	mov	r24, r18
    60d4:	08 95       	ret

000060d6 <_ZNK6String6equalsEPKc>:
    60d6:	fc 01       	movw	r30, r24
    60d8:	24 81       	ldd	r18, Z+4	; 0x04
    60da:	35 81       	ldd	r19, Z+5	; 0x05
    60dc:	23 2b       	or	r18, r19
    60de:	31 f4       	brne	.+12     	; 0x60ec <_ZNK6String6equalsEPKc+0x16>
    60e0:	21 e0       	ldi	r18, 0x01	; 1
    60e2:	61 15       	cp	r22, r1
    60e4:	71 05       	cpc	r23, r1
    60e6:	99 f0       	breq	.+38     	; 0x610e <_ZNK6String6equalsEPKc+0x38>
    60e8:	fb 01       	movw	r30, r22
    60ea:	08 c0       	rjmp	.+16     	; 0x60fc <_ZNK6String6equalsEPKc+0x26>
    60ec:	fc 01       	movw	r30, r24
    60ee:	80 81       	ld	r24, Z
    60f0:	91 81       	ldd	r25, Z+1	; 0x01
    60f2:	61 15       	cp	r22, r1
    60f4:	71 05       	cpc	r23, r1
    60f6:	31 f4       	brne	.+12     	; 0x6104 <_ZNK6String6equalsEPKc+0x2e>
    60f8:	21 e0       	ldi	r18, 0x01	; 1
    60fa:	fc 01       	movw	r30, r24
    60fc:	80 81       	ld	r24, Z
    60fe:	88 23       	and	r24, r24
    6100:	31 f0       	breq	.+12     	; 0x610e <_ZNK6String6equalsEPKc+0x38>
    6102:	04 c0       	rjmp	.+8      	; 0x610c <_ZNK6String6equalsEPKc+0x36>
    6104:	e6 d2       	rcall	.+1484   	; 0x66d2 <strcmp>
    6106:	21 e0       	ldi	r18, 0x01	; 1
    6108:	89 2b       	or	r24, r25
    610a:	09 f0       	breq	.+2      	; 0x610e <_ZNK6String6equalsEPKc+0x38>
    610c:	20 e0       	ldi	r18, 0x00	; 0
    610e:	82 2f       	mov	r24, r18
    6110:	08 95       	ret

00006112 <_ZNK6String9substringEjj>:
    6112:	bf 92       	push	r11
    6114:	cf 92       	push	r12
    6116:	df 92       	push	r13
    6118:	ef 92       	push	r14
    611a:	ff 92       	push	r15
    611c:	0f 93       	push	r16
    611e:	1f 93       	push	r17
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	7c 01       	movw	r14, r24
    6126:	6b 01       	movw	r12, r22
    6128:	8a 01       	movw	r16, r20
    612a:	e9 01       	movw	r28, r18
    612c:	24 17       	cp	r18, r20
    612e:	35 07       	cpc	r19, r21
    6130:	20 f4       	brcc	.+8      	; 0x613a <_ZNK6String9substringEjj+0x28>
    6132:	81 2f       	mov	r24, r17
    6134:	89 01       	movw	r16, r18
    6136:	c4 2f       	mov	r28, r20
    6138:	d8 2f       	mov	r29, r24
    613a:	64 ed       	ldi	r22, 0xD4	; 212
    613c:	72 e0       	ldi	r23, 0x02	; 2
    613e:	c7 01       	movw	r24, r14
    6140:	ac de       	rcall	.-680    	; 0x5e9a <_ZN6StringC1EPKc>
    6142:	d6 01       	movw	r26, r12
    6144:	14 96       	adiw	r26, 0x04	; 4
    6146:	8d 91       	ld	r24, X+
    6148:	9c 91       	ld	r25, X
    614a:	15 97       	sbiw	r26, 0x05	; 5
    614c:	08 17       	cp	r16, r24
    614e:	19 07       	cpc	r17, r25
    6150:	c0 f4       	brcc	.+48     	; 0x6182 <_ZNK6String9substringEjj+0x70>
    6152:	8c 17       	cp	r24, r28
    6154:	9d 07       	cpc	r25, r29
    6156:	08 f4       	brcc	.+2      	; 0x615a <_ZNK6String9substringEjj+0x48>
    6158:	ec 01       	movw	r28, r24
    615a:	d6 01       	movw	r26, r12
    615c:	ed 91       	ld	r30, X+
    615e:	fc 91       	ld	r31, X
    6160:	11 97       	sbiw	r26, 0x01	; 1
    6162:	ec 0f       	add	r30, r28
    6164:	fd 1f       	adc	r31, r29
    6166:	b0 80       	ld	r11, Z
    6168:	10 82       	st	Z, r1
    616a:	6d 91       	ld	r22, X+
    616c:	7c 91       	ld	r23, X
    616e:	60 0f       	add	r22, r16
    6170:	71 1f       	adc	r23, r17
    6172:	c7 01       	movw	r24, r14
    6174:	ec de       	rcall	.-552    	; 0x5f4e <_ZN6StringaSEPKc>
    6176:	d6 01       	movw	r26, r12
    6178:	ed 91       	ld	r30, X+
    617a:	fc 91       	ld	r31, X
    617c:	ec 0f       	add	r30, r28
    617e:	fd 1f       	adc	r31, r29
    6180:	b0 82       	st	Z, r11
    6182:	c7 01       	movw	r24, r14
    6184:	df 91       	pop	r29
    6186:	cf 91       	pop	r28
    6188:	1f 91       	pop	r17
    618a:	0f 91       	pop	r16
    618c:	ff 90       	pop	r15
    618e:	ef 90       	pop	r14
    6190:	df 90       	pop	r13
    6192:	cf 90       	pop	r12
    6194:	bf 90       	pop	r11
    6196:	08 95       	ret

00006198 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    6198:	cf 93       	push	r28
    619a:	df 93       	push	r29
	if (!buffer) return;
    619c:	fc 01       	movw	r30, r24
    619e:	c0 81       	ld	r28, Z
    61a0:	d1 81       	ldd	r29, Z+1	; 0x01
    61a2:	20 97       	sbiw	r28, 0x00	; 0
    61a4:	39 f0       	breq	.+14     	; 0x61b4 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    61a6:	88 81       	ld	r24, Y
    61a8:	88 23       	and	r24, r24
    61aa:	21 f0       	breq	.+8      	; 0x61b4 <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	79 d2       	rcall	.+1266   	; 0x66a2 <toupper>
    61b0:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    61b2:	f9 cf       	rjmp	.-14     	; 0x61a6 <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    61b4:	df 91       	pop	r29
    61b6:	cf 91       	pop	r28
    61b8:	08 95       	ret

000061ba <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    61ba:	08 95       	ret

000061bc <__mulsi3>:
    61bc:	db 01       	movw	r26, r22
    61be:	8f 93       	push	r24
    61c0:	9f 93       	push	r25
    61c2:	51 d0       	rcall	.+162    	; 0x6266 <__muluhisi3>
    61c4:	bf 91       	pop	r27
    61c6:	af 91       	pop	r26
    61c8:	a2 9f       	mul	r26, r18
    61ca:	80 0d       	add	r24, r0
    61cc:	91 1d       	adc	r25, r1
    61ce:	a3 9f       	mul	r26, r19
    61d0:	90 0d       	add	r25, r0
    61d2:	b2 9f       	mul	r27, r18
    61d4:	90 0d       	add	r25, r0
    61d6:	11 24       	eor	r1, r1
    61d8:	08 95       	ret

000061da <__udivmodsi4>:
    61da:	a1 e2       	ldi	r26, 0x21	; 33
    61dc:	1a 2e       	mov	r1, r26
    61de:	aa 1b       	sub	r26, r26
    61e0:	bb 1b       	sub	r27, r27
    61e2:	fd 01       	movw	r30, r26
    61e4:	0d c0       	rjmp	.+26     	; 0x6200 <__udivmodsi4_ep>

000061e6 <__udivmodsi4_loop>:
    61e6:	aa 1f       	adc	r26, r26
    61e8:	bb 1f       	adc	r27, r27
    61ea:	ee 1f       	adc	r30, r30
    61ec:	ff 1f       	adc	r31, r31
    61ee:	a2 17       	cp	r26, r18
    61f0:	b3 07       	cpc	r27, r19
    61f2:	e4 07       	cpc	r30, r20
    61f4:	f5 07       	cpc	r31, r21
    61f6:	20 f0       	brcs	.+8      	; 0x6200 <__udivmodsi4_ep>
    61f8:	a2 1b       	sub	r26, r18
    61fa:	b3 0b       	sbc	r27, r19
    61fc:	e4 0b       	sbc	r30, r20
    61fe:	f5 0b       	sbc	r31, r21

00006200 <__udivmodsi4_ep>:
    6200:	66 1f       	adc	r22, r22
    6202:	77 1f       	adc	r23, r23
    6204:	88 1f       	adc	r24, r24
    6206:	99 1f       	adc	r25, r25
    6208:	1a 94       	dec	r1
    620a:	69 f7       	brne	.-38     	; 0x61e6 <__udivmodsi4_loop>
    620c:	60 95       	com	r22
    620e:	70 95       	com	r23
    6210:	80 95       	com	r24
    6212:	90 95       	com	r25
    6214:	9b 01       	movw	r18, r22
    6216:	ac 01       	movw	r20, r24
    6218:	bd 01       	movw	r22, r26
    621a:	cf 01       	movw	r24, r30
    621c:	08 95       	ret

0000621e <__divmodsi4>:
    621e:	05 2e       	mov	r0, r21
    6220:	97 fb       	bst	r25, 7
    6222:	16 f4       	brtc	.+4      	; 0x6228 <__divmodsi4+0xa>
    6224:	00 94       	com	r0
    6226:	0f d0       	rcall	.+30     	; 0x6246 <__negsi2>
    6228:	57 fd       	sbrc	r21, 7
    622a:	05 d0       	rcall	.+10     	; 0x6236 <__divmodsi4_neg2>
    622c:	d6 df       	rcall	.-84     	; 0x61da <__udivmodsi4>
    622e:	07 fc       	sbrc	r0, 7
    6230:	02 d0       	rcall	.+4      	; 0x6236 <__divmodsi4_neg2>
    6232:	46 f4       	brtc	.+16     	; 0x6244 <__divmodsi4_exit>
    6234:	08 c0       	rjmp	.+16     	; 0x6246 <__negsi2>

00006236 <__divmodsi4_neg2>:
    6236:	50 95       	com	r21
    6238:	40 95       	com	r20
    623a:	30 95       	com	r19
    623c:	21 95       	neg	r18
    623e:	3f 4f       	sbci	r19, 0xFF	; 255
    6240:	4f 4f       	sbci	r20, 0xFF	; 255
    6242:	5f 4f       	sbci	r21, 0xFF	; 255

00006244 <__divmodsi4_exit>:
    6244:	08 95       	ret

00006246 <__negsi2>:
    6246:	90 95       	com	r25
    6248:	80 95       	com	r24
    624a:	70 95       	com	r23
    624c:	61 95       	neg	r22
    624e:	7f 4f       	sbci	r23, 0xFF	; 255
    6250:	8f 4f       	sbci	r24, 0xFF	; 255
    6252:	9f 4f       	sbci	r25, 0xFF	; 255
    6254:	08 95       	ret

00006256 <__tablejump2__>:
    6256:	ee 0f       	add	r30, r30
    6258:	ff 1f       	adc	r31, r31
    625a:	88 1f       	adc	r24, r24
    625c:	8b bf       	out	0x3b, r24	; 59
    625e:	07 90       	elpm	r0, Z+
    6260:	f6 91       	elpm	r31, Z
    6262:	e0 2d       	mov	r30, r0
    6264:	19 94       	eijmp

00006266 <__muluhisi3>:
    6266:	09 d0       	rcall	.+18     	; 0x627a <__umulhisi3>
    6268:	a5 9f       	mul	r26, r21
    626a:	90 0d       	add	r25, r0
    626c:	b4 9f       	mul	r27, r20
    626e:	90 0d       	add	r25, r0
    6270:	a4 9f       	mul	r26, r20
    6272:	80 0d       	add	r24, r0
    6274:	91 1d       	adc	r25, r1
    6276:	11 24       	eor	r1, r1
    6278:	08 95       	ret

0000627a <__umulhisi3>:
    627a:	a2 9f       	mul	r26, r18
    627c:	b0 01       	movw	r22, r0
    627e:	b3 9f       	mul	r27, r19
    6280:	c0 01       	movw	r24, r0
    6282:	a3 9f       	mul	r26, r19
    6284:	70 0d       	add	r23, r0
    6286:	81 1d       	adc	r24, r1
    6288:	11 24       	eor	r1, r1
    628a:	91 1d       	adc	r25, r1
    628c:	b2 9f       	mul	r27, r18
    628e:	70 0d       	add	r23, r0
    6290:	81 1d       	adc	r24, r1
    6292:	11 24       	eor	r1, r1
    6294:	91 1d       	adc	r25, r1
    6296:	08 95       	ret

00006298 <malloc>:
    6298:	0f 93       	push	r16
    629a:	1f 93       	push	r17
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	82 30       	cpi	r24, 0x02	; 2
    62a2:	91 05       	cpc	r25, r1
    62a4:	10 f4       	brcc	.+4      	; 0x62aa <malloc+0x12>
    62a6:	82 e0       	ldi	r24, 0x02	; 2
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <__flp>
    62ae:	f0 91 47 05 	lds	r31, 0x0547	; 0x800547 <__flp+0x1>
    62b2:	20 e0       	ldi	r18, 0x00	; 0
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	a0 e0       	ldi	r26, 0x00	; 0
    62b8:	b0 e0       	ldi	r27, 0x00	; 0
    62ba:	30 97       	sbiw	r30, 0x00	; 0
    62bc:	19 f1       	breq	.+70     	; 0x6304 <malloc+0x6c>
    62be:	40 81       	ld	r20, Z
    62c0:	51 81       	ldd	r21, Z+1	; 0x01
    62c2:	02 81       	ldd	r16, Z+2	; 0x02
    62c4:	13 81       	ldd	r17, Z+3	; 0x03
    62c6:	48 17       	cp	r20, r24
    62c8:	59 07       	cpc	r21, r25
    62ca:	c8 f0       	brcs	.+50     	; 0x62fe <malloc+0x66>
    62cc:	84 17       	cp	r24, r20
    62ce:	95 07       	cpc	r25, r21
    62d0:	69 f4       	brne	.+26     	; 0x62ec <malloc+0x54>
    62d2:	10 97       	sbiw	r26, 0x00	; 0
    62d4:	31 f0       	breq	.+12     	; 0x62e2 <malloc+0x4a>
    62d6:	12 96       	adiw	r26, 0x02	; 2
    62d8:	0c 93       	st	X, r16
    62da:	12 97       	sbiw	r26, 0x02	; 2
    62dc:	13 96       	adiw	r26, 0x03	; 3
    62de:	1c 93       	st	X, r17
    62e0:	27 c0       	rjmp	.+78     	; 0x6330 <malloc+0x98>
    62e2:	00 93 46 05 	sts	0x0546, r16	; 0x800546 <__flp>
    62e6:	10 93 47 05 	sts	0x0547, r17	; 0x800547 <__flp+0x1>
    62ea:	22 c0       	rjmp	.+68     	; 0x6330 <malloc+0x98>
    62ec:	21 15       	cp	r18, r1
    62ee:	31 05       	cpc	r19, r1
    62f0:	19 f0       	breq	.+6      	; 0x62f8 <malloc+0x60>
    62f2:	42 17       	cp	r20, r18
    62f4:	53 07       	cpc	r21, r19
    62f6:	18 f4       	brcc	.+6      	; 0x62fe <malloc+0x66>
    62f8:	9a 01       	movw	r18, r20
    62fa:	bd 01       	movw	r22, r26
    62fc:	ef 01       	movw	r28, r30
    62fe:	df 01       	movw	r26, r30
    6300:	f8 01       	movw	r30, r16
    6302:	db cf       	rjmp	.-74     	; 0x62ba <malloc+0x22>
    6304:	21 15       	cp	r18, r1
    6306:	31 05       	cpc	r19, r1
    6308:	f9 f0       	breq	.+62     	; 0x6348 <malloc+0xb0>
    630a:	28 1b       	sub	r18, r24
    630c:	39 0b       	sbc	r19, r25
    630e:	24 30       	cpi	r18, 0x04	; 4
    6310:	31 05       	cpc	r19, r1
    6312:	80 f4       	brcc	.+32     	; 0x6334 <malloc+0x9c>
    6314:	8a 81       	ldd	r24, Y+2	; 0x02
    6316:	9b 81       	ldd	r25, Y+3	; 0x03
    6318:	61 15       	cp	r22, r1
    631a:	71 05       	cpc	r23, r1
    631c:	21 f0       	breq	.+8      	; 0x6326 <malloc+0x8e>
    631e:	fb 01       	movw	r30, r22
    6320:	93 83       	std	Z+3, r25	; 0x03
    6322:	82 83       	std	Z+2, r24	; 0x02
    6324:	04 c0       	rjmp	.+8      	; 0x632e <malloc+0x96>
    6326:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <__flp+0x1>
    632a:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <__flp>
    632e:	fe 01       	movw	r30, r28
    6330:	32 96       	adiw	r30, 0x02	; 2
    6332:	44 c0       	rjmp	.+136    	; 0x63bc <malloc+0x124>
    6334:	fe 01       	movw	r30, r28
    6336:	e2 0f       	add	r30, r18
    6338:	f3 1f       	adc	r31, r19
    633a:	81 93       	st	Z+, r24
    633c:	91 93       	st	Z+, r25
    633e:	22 50       	subi	r18, 0x02	; 2
    6340:	31 09       	sbc	r19, r1
    6342:	39 83       	std	Y+1, r19	; 0x01
    6344:	28 83       	st	Y, r18
    6346:	3a c0       	rjmp	.+116    	; 0x63bc <malloc+0x124>
    6348:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <__brkval>
    634c:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <__brkval+0x1>
    6350:	23 2b       	or	r18, r19
    6352:	41 f4       	brne	.+16     	; 0x6364 <malloc+0xcc>
    6354:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6358:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    635c:	30 93 45 05 	sts	0x0545, r19	; 0x800545 <__brkval+0x1>
    6360:	20 93 44 05 	sts	0x0544, r18	; 0x800544 <__brkval>
    6364:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6368:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    636c:	21 15       	cp	r18, r1
    636e:	31 05       	cpc	r19, r1
    6370:	41 f4       	brne	.+16     	; 0x6382 <malloc+0xea>
    6372:	2d b7       	in	r18, 0x3d	; 61
    6374:	3e b7       	in	r19, 0x3e	; 62
    6376:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    637a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    637e:	24 1b       	sub	r18, r20
    6380:	35 0b       	sbc	r19, r21
    6382:	e0 91 44 05 	lds	r30, 0x0544	; 0x800544 <__brkval>
    6386:	f0 91 45 05 	lds	r31, 0x0545	; 0x800545 <__brkval+0x1>
    638a:	e2 17       	cp	r30, r18
    638c:	f3 07       	cpc	r31, r19
    638e:	a0 f4       	brcc	.+40     	; 0x63b8 <malloc+0x120>
    6390:	2e 1b       	sub	r18, r30
    6392:	3f 0b       	sbc	r19, r31
    6394:	28 17       	cp	r18, r24
    6396:	39 07       	cpc	r19, r25
    6398:	78 f0       	brcs	.+30     	; 0x63b8 <malloc+0x120>
    639a:	ac 01       	movw	r20, r24
    639c:	4e 5f       	subi	r20, 0xFE	; 254
    639e:	5f 4f       	sbci	r21, 0xFF	; 255
    63a0:	24 17       	cp	r18, r20
    63a2:	35 07       	cpc	r19, r21
    63a4:	48 f0       	brcs	.+18     	; 0x63b8 <malloc+0x120>
    63a6:	4e 0f       	add	r20, r30
    63a8:	5f 1f       	adc	r21, r31
    63aa:	50 93 45 05 	sts	0x0545, r21	; 0x800545 <__brkval+0x1>
    63ae:	40 93 44 05 	sts	0x0544, r20	; 0x800544 <__brkval>
    63b2:	81 93       	st	Z+, r24
    63b4:	91 93       	st	Z+, r25
    63b6:	02 c0       	rjmp	.+4      	; 0x63bc <malloc+0x124>
    63b8:	e0 e0       	ldi	r30, 0x00	; 0
    63ba:	f0 e0       	ldi	r31, 0x00	; 0
    63bc:	cf 01       	movw	r24, r30
    63be:	df 91       	pop	r29
    63c0:	cf 91       	pop	r28
    63c2:	1f 91       	pop	r17
    63c4:	0f 91       	pop	r16
    63c6:	08 95       	ret

000063c8 <free>:
    63c8:	cf 93       	push	r28
    63ca:	df 93       	push	r29
    63cc:	00 97       	sbiw	r24, 0x00	; 0
    63ce:	09 f4       	brne	.+2      	; 0x63d2 <free+0xa>
    63d0:	81 c0       	rjmp	.+258    	; 0x64d4 <free+0x10c>
    63d2:	fc 01       	movw	r30, r24
    63d4:	32 97       	sbiw	r30, 0x02	; 2
    63d6:	13 82       	std	Z+3, r1	; 0x03
    63d8:	12 82       	std	Z+2, r1	; 0x02
    63da:	a0 91 46 05 	lds	r26, 0x0546	; 0x800546 <__flp>
    63de:	b0 91 47 05 	lds	r27, 0x0547	; 0x800547 <__flp+0x1>
    63e2:	10 97       	sbiw	r26, 0x00	; 0
    63e4:	81 f4       	brne	.+32     	; 0x6406 <free+0x3e>
    63e6:	20 81       	ld	r18, Z
    63e8:	31 81       	ldd	r19, Z+1	; 0x01
    63ea:	82 0f       	add	r24, r18
    63ec:	93 1f       	adc	r25, r19
    63ee:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <__brkval>
    63f2:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <__brkval+0x1>
    63f6:	28 17       	cp	r18, r24
    63f8:	39 07       	cpc	r19, r25
    63fa:	51 f5       	brne	.+84     	; 0x6450 <free+0x88>
    63fc:	f0 93 45 05 	sts	0x0545, r31	; 0x800545 <__brkval+0x1>
    6400:	e0 93 44 05 	sts	0x0544, r30	; 0x800544 <__brkval>
    6404:	67 c0       	rjmp	.+206    	; 0x64d4 <free+0x10c>
    6406:	ed 01       	movw	r28, r26
    6408:	20 e0       	ldi	r18, 0x00	; 0
    640a:	30 e0       	ldi	r19, 0x00	; 0
    640c:	ce 17       	cp	r28, r30
    640e:	df 07       	cpc	r29, r31
    6410:	40 f4       	brcc	.+16     	; 0x6422 <free+0x5a>
    6412:	4a 81       	ldd	r20, Y+2	; 0x02
    6414:	5b 81       	ldd	r21, Y+3	; 0x03
    6416:	9e 01       	movw	r18, r28
    6418:	41 15       	cp	r20, r1
    641a:	51 05       	cpc	r21, r1
    641c:	f1 f0       	breq	.+60     	; 0x645a <free+0x92>
    641e:	ea 01       	movw	r28, r20
    6420:	f5 cf       	rjmp	.-22     	; 0x640c <free+0x44>
    6422:	d3 83       	std	Z+3, r29	; 0x03
    6424:	c2 83       	std	Z+2, r28	; 0x02
    6426:	40 81       	ld	r20, Z
    6428:	51 81       	ldd	r21, Z+1	; 0x01
    642a:	84 0f       	add	r24, r20
    642c:	95 1f       	adc	r25, r21
    642e:	c8 17       	cp	r28, r24
    6430:	d9 07       	cpc	r29, r25
    6432:	59 f4       	brne	.+22     	; 0x644a <free+0x82>
    6434:	88 81       	ld	r24, Y
    6436:	99 81       	ldd	r25, Y+1	; 0x01
    6438:	84 0f       	add	r24, r20
    643a:	95 1f       	adc	r25, r21
    643c:	02 96       	adiw	r24, 0x02	; 2
    643e:	91 83       	std	Z+1, r25	; 0x01
    6440:	80 83       	st	Z, r24
    6442:	8a 81       	ldd	r24, Y+2	; 0x02
    6444:	9b 81       	ldd	r25, Y+3	; 0x03
    6446:	93 83       	std	Z+3, r25	; 0x03
    6448:	82 83       	std	Z+2, r24	; 0x02
    644a:	21 15       	cp	r18, r1
    644c:	31 05       	cpc	r19, r1
    644e:	29 f4       	brne	.+10     	; 0x645a <free+0x92>
    6450:	f0 93 47 05 	sts	0x0547, r31	; 0x800547 <__flp+0x1>
    6454:	e0 93 46 05 	sts	0x0546, r30	; 0x800546 <__flp>
    6458:	3d c0       	rjmp	.+122    	; 0x64d4 <free+0x10c>
    645a:	e9 01       	movw	r28, r18
    645c:	fb 83       	std	Y+3, r31	; 0x03
    645e:	ea 83       	std	Y+2, r30	; 0x02
    6460:	49 91       	ld	r20, Y+
    6462:	59 91       	ld	r21, Y+
    6464:	c4 0f       	add	r28, r20
    6466:	d5 1f       	adc	r29, r21
    6468:	ec 17       	cp	r30, r28
    646a:	fd 07       	cpc	r31, r29
    646c:	61 f4       	brne	.+24     	; 0x6486 <free+0xbe>
    646e:	80 81       	ld	r24, Z
    6470:	91 81       	ldd	r25, Z+1	; 0x01
    6472:	84 0f       	add	r24, r20
    6474:	95 1f       	adc	r25, r21
    6476:	02 96       	adiw	r24, 0x02	; 2
    6478:	e9 01       	movw	r28, r18
    647a:	99 83       	std	Y+1, r25	; 0x01
    647c:	88 83       	st	Y, r24
    647e:	82 81       	ldd	r24, Z+2	; 0x02
    6480:	93 81       	ldd	r25, Z+3	; 0x03
    6482:	9b 83       	std	Y+3, r25	; 0x03
    6484:	8a 83       	std	Y+2, r24	; 0x02
    6486:	e0 e0       	ldi	r30, 0x00	; 0
    6488:	f0 e0       	ldi	r31, 0x00	; 0
    648a:	12 96       	adiw	r26, 0x02	; 2
    648c:	8d 91       	ld	r24, X+
    648e:	9c 91       	ld	r25, X
    6490:	13 97       	sbiw	r26, 0x03	; 3
    6492:	00 97       	sbiw	r24, 0x00	; 0
    6494:	19 f0       	breq	.+6      	; 0x649c <free+0xd4>
    6496:	fd 01       	movw	r30, r26
    6498:	dc 01       	movw	r26, r24
    649a:	f7 cf       	rjmp	.-18     	; 0x648a <free+0xc2>
    649c:	8d 91       	ld	r24, X+
    649e:	9c 91       	ld	r25, X
    64a0:	11 97       	sbiw	r26, 0x01	; 1
    64a2:	9d 01       	movw	r18, r26
    64a4:	2e 5f       	subi	r18, 0xFE	; 254
    64a6:	3f 4f       	sbci	r19, 0xFF	; 255
    64a8:	82 0f       	add	r24, r18
    64aa:	93 1f       	adc	r25, r19
    64ac:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <__brkval>
    64b0:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <__brkval+0x1>
    64b4:	28 17       	cp	r18, r24
    64b6:	39 07       	cpc	r19, r25
    64b8:	69 f4       	brne	.+26     	; 0x64d4 <free+0x10c>
    64ba:	30 97       	sbiw	r30, 0x00	; 0
    64bc:	29 f4       	brne	.+10     	; 0x64c8 <free+0x100>
    64be:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <__flp+0x1>
    64c2:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <__flp>
    64c6:	02 c0       	rjmp	.+4      	; 0x64cc <free+0x104>
    64c8:	13 82       	std	Z+3, r1	; 0x03
    64ca:	12 82       	std	Z+2, r1	; 0x02
    64cc:	b0 93 45 05 	sts	0x0545, r27	; 0x800545 <__brkval+0x1>
    64d0:	a0 93 44 05 	sts	0x0544, r26	; 0x800544 <__brkval>
    64d4:	df 91       	pop	r29
    64d6:	cf 91       	pop	r28
    64d8:	08 95       	ret

000064da <realloc>:
    64da:	6f 92       	push	r6
    64dc:	7f 92       	push	r7
    64de:	8f 92       	push	r8
    64e0:	9f 92       	push	r9
    64e2:	af 92       	push	r10
    64e4:	bf 92       	push	r11
    64e6:	cf 92       	push	r12
    64e8:	df 92       	push	r13
    64ea:	ef 92       	push	r14
    64ec:	ff 92       	push	r15
    64ee:	0f 93       	push	r16
    64f0:	1f 93       	push	r17
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	00 97       	sbiw	r24, 0x00	; 0
    64f8:	81 f4       	brne	.+32     	; 0x651a <realloc+0x40>
    64fa:	cb 01       	movw	r24, r22
    64fc:	df 91       	pop	r29
    64fe:	cf 91       	pop	r28
    6500:	1f 91       	pop	r17
    6502:	0f 91       	pop	r16
    6504:	ff 90       	pop	r15
    6506:	ef 90       	pop	r14
    6508:	df 90       	pop	r13
    650a:	cf 90       	pop	r12
    650c:	bf 90       	pop	r11
    650e:	af 90       	pop	r10
    6510:	9f 90       	pop	r9
    6512:	8f 90       	pop	r8
    6514:	7f 90       	pop	r7
    6516:	6f 90       	pop	r6
    6518:	bf ce       	rjmp	.-642    	; 0x6298 <malloc>
    651a:	fc 01       	movw	r30, r24
    651c:	e6 0f       	add	r30, r22
    651e:	f7 1f       	adc	r31, r23
    6520:	9c 01       	movw	r18, r24
    6522:	22 50       	subi	r18, 0x02	; 2
    6524:	31 09       	sbc	r19, r1
    6526:	e2 17       	cp	r30, r18
    6528:	f3 07       	cpc	r31, r19
    652a:	08 f4       	brcc	.+2      	; 0x652e <realloc+0x54>
    652c:	a5 c0       	rjmp	.+330    	; 0x6678 <realloc+0x19e>
    652e:	ec 01       	movw	r28, r24
    6530:	d9 01       	movw	r26, r18
    6532:	0d 91       	ld	r16, X+
    6534:	1c 91       	ld	r17, X
    6536:	11 97       	sbiw	r26, 0x01	; 1
    6538:	06 17       	cp	r16, r22
    653a:	17 07       	cpc	r17, r23
    653c:	a8 f0       	brcs	.+42     	; 0x6568 <realloc+0x8e>
    653e:	05 30       	cpi	r16, 0x05	; 5
    6540:	11 05       	cpc	r17, r1
    6542:	08 f4       	brcc	.+2      	; 0x6546 <realloc+0x6c>
    6544:	97 c0       	rjmp	.+302    	; 0x6674 <realloc+0x19a>
    6546:	c8 01       	movw	r24, r16
    6548:	04 97       	sbiw	r24, 0x04	; 4
    654a:	86 17       	cp	r24, r22
    654c:	97 07       	cpc	r25, r23
    654e:	08 f4       	brcc	.+2      	; 0x6552 <realloc+0x78>
    6550:	91 c0       	rjmp	.+290    	; 0x6674 <realloc+0x19a>
    6552:	02 50       	subi	r16, 0x02	; 2
    6554:	11 09       	sbc	r17, r1
    6556:	06 1b       	sub	r16, r22
    6558:	17 0b       	sbc	r17, r23
    655a:	01 93       	st	Z+, r16
    655c:	11 93       	st	Z+, r17
    655e:	6d 93       	st	X+, r22
    6560:	7c 93       	st	X, r23
    6562:	cf 01       	movw	r24, r30
    6564:	31 df       	rcall	.-414    	; 0x63c8 <free>
    6566:	86 c0       	rjmp	.+268    	; 0x6674 <realloc+0x19a>
    6568:	5b 01       	movw	r10, r22
    656a:	a0 1a       	sub	r10, r16
    656c:	b1 0a       	sbc	r11, r17
    656e:	4c 01       	movw	r8, r24
    6570:	80 0e       	add	r8, r16
    6572:	91 1e       	adc	r9, r17
    6574:	a0 91 46 05 	lds	r26, 0x0546	; 0x800546 <__flp>
    6578:	b0 91 47 05 	lds	r27, 0x0547	; 0x800547 <__flp+0x1>
    657c:	61 2c       	mov	r6, r1
    657e:	71 2c       	mov	r7, r1
    6580:	e1 2c       	mov	r14, r1
    6582:	f1 2c       	mov	r15, r1
    6584:	10 97       	sbiw	r26, 0x00	; 0
    6586:	09 f4       	brne	.+2      	; 0x658a <realloc+0xb0>
    6588:	46 c0       	rjmp	.+140    	; 0x6616 <realloc+0x13c>
    658a:	8d 91       	ld	r24, X+
    658c:	9c 91       	ld	r25, X
    658e:	11 97       	sbiw	r26, 0x01	; 1
    6590:	a8 15       	cp	r26, r8
    6592:	b9 05       	cpc	r27, r9
    6594:	b1 f5       	brne	.+108    	; 0x6602 <realloc+0x128>
    6596:	6c 01       	movw	r12, r24
    6598:	42 e0       	ldi	r20, 0x02	; 2
    659a:	c4 0e       	add	r12, r20
    659c:	d1 1c       	adc	r13, r1
    659e:	ca 14       	cp	r12, r10
    65a0:	db 04       	cpc	r13, r11
    65a2:	78 f1       	brcs	.+94     	; 0x6602 <realloc+0x128>
    65a4:	4c 01       	movw	r8, r24
    65a6:	8a 18       	sub	r8, r10
    65a8:	9b 08       	sbc	r9, r11
    65aa:	64 01       	movw	r12, r8
    65ac:	42 e0       	ldi	r20, 0x02	; 2
    65ae:	c4 0e       	add	r12, r20
    65b0:	d1 1c       	adc	r13, r1
    65b2:	12 96       	adiw	r26, 0x02	; 2
    65b4:	bc 90       	ld	r11, X
    65b6:	12 97       	sbiw	r26, 0x02	; 2
    65b8:	13 96       	adiw	r26, 0x03	; 3
    65ba:	ac 91       	ld	r26, X
    65bc:	b5 e0       	ldi	r27, 0x05	; 5
    65be:	cb 16       	cp	r12, r27
    65c0:	d1 04       	cpc	r13, r1
    65c2:	40 f0       	brcs	.+16     	; 0x65d4 <realloc+0xfa>
    65c4:	b2 82       	std	Z+2, r11	; 0x02
    65c6:	a3 83       	std	Z+3, r26	; 0x03
    65c8:	91 82       	std	Z+1, r9	; 0x01
    65ca:	80 82       	st	Z, r8
    65cc:	d9 01       	movw	r26, r18
    65ce:	6d 93       	st	X+, r22
    65d0:	7c 93       	st	X, r23
    65d2:	09 c0       	rjmp	.+18     	; 0x65e6 <realloc+0x10c>
    65d4:	0e 5f       	subi	r16, 0xFE	; 254
    65d6:	1f 4f       	sbci	r17, 0xFF	; 255
    65d8:	80 0f       	add	r24, r16
    65da:	91 1f       	adc	r25, r17
    65dc:	f9 01       	movw	r30, r18
    65de:	91 83       	std	Z+1, r25	; 0x01
    65e0:	80 83       	st	Z, r24
    65e2:	eb 2d       	mov	r30, r11
    65e4:	fa 2f       	mov	r31, r26
    65e6:	e1 14       	cp	r14, r1
    65e8:	f1 04       	cpc	r15, r1
    65ea:	31 f0       	breq	.+12     	; 0x65f8 <realloc+0x11e>
    65ec:	d7 01       	movw	r26, r14
    65ee:	13 96       	adiw	r26, 0x03	; 3
    65f0:	fc 93       	st	X, r31
    65f2:	ee 93       	st	-X, r30
    65f4:	12 97       	sbiw	r26, 0x02	; 2
    65f6:	3e c0       	rjmp	.+124    	; 0x6674 <realloc+0x19a>
    65f8:	f0 93 47 05 	sts	0x0547, r31	; 0x800547 <__flp+0x1>
    65fc:	e0 93 46 05 	sts	0x0546, r30	; 0x800546 <__flp>
    6600:	39 c0       	rjmp	.+114    	; 0x6674 <realloc+0x19a>
    6602:	68 16       	cp	r6, r24
    6604:	79 06       	cpc	r7, r25
    6606:	08 f4       	brcc	.+2      	; 0x660a <realloc+0x130>
    6608:	3c 01       	movw	r6, r24
    660a:	7d 01       	movw	r14, r26
    660c:	12 96       	adiw	r26, 0x02	; 2
    660e:	0d 90       	ld	r0, X+
    6610:	bc 91       	ld	r27, X
    6612:	a0 2d       	mov	r26, r0
    6614:	b7 cf       	rjmp	.-146    	; 0x6584 <realloc+0xaa>
    6616:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <__brkval>
    661a:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <__brkval+0x1>
    661e:	88 16       	cp	r8, r24
    6620:	99 06       	cpc	r9, r25
    6622:	e1 f4       	brne	.+56     	; 0x665c <realloc+0x182>
    6624:	66 16       	cp	r6, r22
    6626:	77 06       	cpc	r7, r23
    6628:	c8 f4       	brcc	.+50     	; 0x665c <realloc+0x182>
    662a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    662e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6632:	00 97       	sbiw	r24, 0x00	; 0
    6634:	41 f4       	brne	.+16     	; 0x6646 <realloc+0x16c>
    6636:	8d b7       	in	r24, 0x3d	; 61
    6638:	9e b7       	in	r25, 0x3e	; 62
    663a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    663e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6642:	84 1b       	sub	r24, r20
    6644:	95 0b       	sbc	r25, r21
    6646:	e8 17       	cp	r30, r24
    6648:	f9 07       	cpc	r31, r25
    664a:	b0 f4       	brcc	.+44     	; 0x6678 <realloc+0x19e>
    664c:	f0 93 45 05 	sts	0x0545, r31	; 0x800545 <__brkval+0x1>
    6650:	e0 93 44 05 	sts	0x0544, r30	; 0x800544 <__brkval>
    6654:	f9 01       	movw	r30, r18
    6656:	71 83       	std	Z+1, r23	; 0x01
    6658:	60 83       	st	Z, r22
    665a:	0c c0       	rjmp	.+24     	; 0x6674 <realloc+0x19a>
    665c:	cb 01       	movw	r24, r22
    665e:	1c de       	rcall	.-968    	; 0x6298 <malloc>
    6660:	7c 01       	movw	r14, r24
    6662:	00 97       	sbiw	r24, 0x00	; 0
    6664:	49 f0       	breq	.+18     	; 0x6678 <realloc+0x19e>
    6666:	a8 01       	movw	r20, r16
    6668:	be 01       	movw	r22, r28
    666a:	23 d0       	rcall	.+70     	; 0x66b2 <memcpy>
    666c:	ce 01       	movw	r24, r28
    666e:	ac de       	rcall	.-680    	; 0x63c8 <free>
    6670:	c7 01       	movw	r24, r14
    6672:	04 c0       	rjmp	.+8      	; 0x667c <realloc+0x1a2>
    6674:	ce 01       	movw	r24, r28
    6676:	02 c0       	rjmp	.+4      	; 0x667c <realloc+0x1a2>
    6678:	80 e0       	ldi	r24, 0x00	; 0
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	df 91       	pop	r29
    667e:	cf 91       	pop	r28
    6680:	1f 91       	pop	r17
    6682:	0f 91       	pop	r16
    6684:	ff 90       	pop	r15
    6686:	ef 90       	pop	r14
    6688:	df 90       	pop	r13
    668a:	cf 90       	pop	r12
    668c:	bf 90       	pop	r11
    668e:	af 90       	pop	r10
    6690:	9f 90       	pop	r9
    6692:	8f 90       	pop	r8
    6694:	7f 90       	pop	r7
    6696:	6f 90       	pop	r6
    6698:	08 95       	ret

0000669a <abort>:
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	f8 94       	cli
    66a0:	73 c0       	rjmp	.+230    	; 0x6788 <__do_global_dtors>

000066a2 <toupper>:
    66a2:	91 11       	cpse	r25, r1
    66a4:	08 95       	ret
    66a6:	81 56       	subi	r24, 0x61	; 97
    66a8:	8a 51       	subi	r24, 0x1A	; 26
    66aa:	08 f4       	brcc	.+2      	; 0x66ae <toupper+0xc>
    66ac:	80 52       	subi	r24, 0x20	; 32
    66ae:	85 58       	subi	r24, 0x85	; 133
    66b0:	08 95       	ret

000066b2 <memcpy>:
    66b2:	fb 01       	movw	r30, r22
    66b4:	dc 01       	movw	r26, r24
    66b6:	02 c0       	rjmp	.+4      	; 0x66bc <memcpy+0xa>
    66b8:	01 90       	ld	r0, Z+
    66ba:	0d 92       	st	X+, r0
    66bc:	41 50       	subi	r20, 0x01	; 1
    66be:	50 40       	sbci	r21, 0x00	; 0
    66c0:	d8 f7       	brcc	.-10     	; 0x66b8 <memcpy+0x6>
    66c2:	08 95       	ret

000066c4 <memset>:
    66c4:	dc 01       	movw	r26, r24
    66c6:	01 c0       	rjmp	.+2      	; 0x66ca <memset+0x6>
    66c8:	6d 93       	st	X+, r22
    66ca:	41 50       	subi	r20, 0x01	; 1
    66cc:	50 40       	sbci	r21, 0x00	; 0
    66ce:	e0 f7       	brcc	.-8      	; 0x66c8 <memset+0x4>
    66d0:	08 95       	ret

000066d2 <strcmp>:
    66d2:	fb 01       	movw	r30, r22
    66d4:	dc 01       	movw	r26, r24
    66d6:	8d 91       	ld	r24, X+
    66d8:	01 90       	ld	r0, Z+
    66da:	80 19       	sub	r24, r0
    66dc:	01 10       	cpse	r0, r1
    66de:	d9 f3       	breq	.-10     	; 0x66d6 <strcmp+0x4>
    66e0:	99 0b       	sbc	r25, r25
    66e2:	08 95       	ret

000066e4 <strcpy>:
    66e4:	fb 01       	movw	r30, r22
    66e6:	dc 01       	movw	r26, r24
    66e8:	01 90       	ld	r0, Z+
    66ea:	0d 92       	st	X+, r0
    66ec:	00 20       	and	r0, r0
    66ee:	e1 f7       	brne	.-8      	; 0x66e8 <strcpy+0x4>
    66f0:	08 95       	ret

000066f2 <strlen>:
    66f2:	fc 01       	movw	r30, r24
    66f4:	01 90       	ld	r0, Z+
    66f6:	00 20       	and	r0, r0
    66f8:	e9 f7       	brne	.-6      	; 0x66f4 <strlen+0x2>
    66fa:	80 95       	com	r24
    66fc:	90 95       	com	r25
    66fe:	8e 0f       	add	r24, r30
    6700:	9f 1f       	adc	r25, r31
    6702:	08 95       	ret

00006704 <strncpy>:
    6704:	fb 01       	movw	r30, r22
    6706:	dc 01       	movw	r26, r24
    6708:	41 50       	subi	r20, 0x01	; 1
    670a:	50 40       	sbci	r21, 0x00	; 0
    670c:	48 f0       	brcs	.+18     	; 0x6720 <strncpy+0x1c>
    670e:	01 90       	ld	r0, Z+
    6710:	0d 92       	st	X+, r0
    6712:	00 20       	and	r0, r0
    6714:	c9 f7       	brne	.-14     	; 0x6708 <strncpy+0x4>
    6716:	01 c0       	rjmp	.+2      	; 0x671a <strncpy+0x16>
    6718:	1d 92       	st	X+, r1
    671a:	41 50       	subi	r20, 0x01	; 1
    671c:	50 40       	sbci	r21, 0x00	; 0
    671e:	e0 f7       	brcc	.-8      	; 0x6718 <strncpy+0x14>
    6720:	08 95       	ret

00006722 <utoa>:
    6722:	45 32       	cpi	r20, 0x25	; 37
    6724:	51 05       	cpc	r21, r1
    6726:	18 f4       	brcc	.+6      	; 0x672e <utoa+0xc>
    6728:	42 30       	cpi	r20, 0x02	; 2
    672a:	08 f0       	brcs	.+2      	; 0x672e <utoa+0xc>
    672c:	04 c0       	rjmp	.+8      	; 0x6736 <__utoa_ncheck>
    672e:	fb 01       	movw	r30, r22
    6730:	10 82       	st	Z, r1
    6732:	cb 01       	movw	r24, r22
    6734:	08 95       	ret

00006736 <__utoa_ncheck>:
    6736:	bb 27       	eor	r27, r27

00006738 <__utoa_common>:
    6738:	fb 01       	movw	r30, r22
    673a:	55 27       	eor	r21, r21
    673c:	aa 27       	eor	r26, r26
    673e:	88 0f       	add	r24, r24
    6740:	99 1f       	adc	r25, r25
    6742:	aa 1f       	adc	r26, r26
    6744:	a4 17       	cp	r26, r20
    6746:	10 f0       	brcs	.+4      	; 0x674c <__utoa_common+0x14>
    6748:	a4 1b       	sub	r26, r20
    674a:	83 95       	inc	r24
    674c:	50 51       	subi	r21, 0x10	; 16
    674e:	b9 f7       	brne	.-18     	; 0x673e <__utoa_common+0x6>
    6750:	a0 5d       	subi	r26, 0xD0	; 208
    6752:	aa 33       	cpi	r26, 0x3A	; 58
    6754:	08 f0       	brcs	.+2      	; 0x6758 <__utoa_common+0x20>
    6756:	a9 5d       	subi	r26, 0xD9	; 217
    6758:	a1 93       	st	Z+, r26
    675a:	00 97       	sbiw	r24, 0x00	; 0
    675c:	79 f7       	brne	.-34     	; 0x673c <__utoa_common+0x4>
    675e:	b1 11       	cpse	r27, r1
    6760:	b1 93       	st	Z+, r27
    6762:	11 92       	st	Z+, r1
    6764:	cb 01       	movw	r24, r22
    6766:	00 c0       	rjmp	.+0      	; 0x6768 <strrev>

00006768 <strrev>:
    6768:	dc 01       	movw	r26, r24
    676a:	fc 01       	movw	r30, r24
    676c:	67 2f       	mov	r22, r23
    676e:	71 91       	ld	r23, Z+
    6770:	77 23       	and	r23, r23
    6772:	e1 f7       	brne	.-8      	; 0x676c <strrev+0x4>
    6774:	32 97       	sbiw	r30, 0x02	; 2
    6776:	04 c0       	rjmp	.+8      	; 0x6780 <strrev+0x18>
    6778:	7c 91       	ld	r23, X
    677a:	6d 93       	st	X+, r22
    677c:	70 83       	st	Z, r23
    677e:	62 91       	ld	r22, -Z
    6780:	ae 17       	cp	r26, r30
    6782:	bf 07       	cpc	r27, r31
    6784:	c8 f3       	brcs	.-14     	; 0x6778 <strrev+0x10>
    6786:	08 95       	ret

00006788 <__do_global_dtors>:
    6788:	11 e0       	ldi	r17, 0x01	; 1
    678a:	c7 e1       	ldi	r28, 0x17	; 23
    678c:	d1 e0       	ldi	r29, 0x01	; 1
    678e:	00 e0       	ldi	r16, 0x00	; 0
    6790:	05 c0       	rjmp	.+10     	; 0x679c <__do_global_dtors+0x14>
    6792:	80 2f       	mov	r24, r16
    6794:	fe 01       	movw	r30, r28
    6796:	5f dd       	rcall	.-1346   	; 0x6256 <__tablejump2__>
    6798:	21 96       	adiw	r28, 0x01	; 1
    679a:	01 1d       	adc	r16, r1
    679c:	c8 31       	cpi	r28, 0x18	; 24
    679e:	d1 07       	cpc	r29, r17
    67a0:	80 e0       	ldi	r24, 0x00	; 0
    67a2:	08 07       	cpc	r16, r24
    67a4:	b1 f7       	brne	.-20     	; 0x6792 <__do_global_dtors+0xa>
    67a6:	f8 94       	cli

000067a8 <__stop_program>:
    67a8:	ff cf       	rjmp	.-2      	; 0x67a8 <__stop_program>
